{"version":3,"sources":["webpack:///dashboard/dashboard.min.js","webpack:///webpack/bootstrap f8b75713b6c3387c1233","webpack:///../pkg/dashboard/list.js","webpack:///external \"jQuery\"","webpack:///external \"cockpit\"","webpack:///../pkg/lib/mustache.js","webpack:///../~/mustache/mustache.js","webpack:///../pkg/lib/plot.js","webpack:///../~/jquery-flot/jquery.flot.js","webpack:///../~/jquery-flot/jquery.flot.selection.js","webpack:///../~/jquery-flot/jquery.flot.time.js","webpack:///../pkg/lib/machines.js","webpack:///../pkg/lib/machine-dialogs.js","webpack:///../pkg/lib/credentials.js","webpack:///../~/process/browser.js","webpack:///../pkg/lib/patterns.js","webpack:///../pkg/lib/credentials-ssh-private-keys.sh","webpack:///../pkg/lib/machine-add.html","webpack:///../pkg/lib/machine-auth-failed.html","webpack:///../pkg/lib/machine-change-auth.html","webpack:///../pkg/lib/machine-change-port.html","webpack:///../pkg/lib/machine-color-picker.html","webpack:///../pkg/lib/machine-invalid-hostkey.html","webpack:///../pkg/lib/machine-not-supported.html","webpack:///../pkg/lib/machine-sync-users.html","webpack:///../pkg/lib/machine-unknown-hostkey.html","webpack:///../pkg/dashboard/image-editor.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","host_edit_dialog","machine_manager","machine_dialogs","host","machine","lookup","can_change_user","address","dlg","$","text","hide","val","label","prop","state","toggle","machines","allow_connection_string","cockpit","user","done","attr","name","popover","render_color_picker","off","on","modal","render_dialog","dialog","values","avatar","avatar_editor","changed","get_data","color","colors","parse","css","promise","change","key","select_file","start_cropping","stop_cropping","load_data","fail","show","update_servers_privileged","update_privileged","permission","format","_","PageDashboard","this","_init","page_show","arg","_entered_","leave","enter","init","navigate","path","location","length","dashboard_page","console","warn","removeAttr","translate","setup","Mustache","plot","mdialogs","image_editor","gettext","document","ev","jump","preventDefault","common_plot_options","legend","series","shadowSize","xaxis","tickColor","mode","tickFormatter","format_date_tick","minTickSize","points","radius","grid","borderWidth","borderColor","hoverable","autoHighlight","resource_monitors","selector","direct","internal","units","derive","factor","options","yaxis","v","ymax_unit","ticks","memory_ticks","format_bytes_tick","omit-instances","format_bits_per_sec_tick","ymax_min","format_bytes_per_sec_tick","admin","prototype","edit_enabled","getTitle","toggle_edit","self","toggleClass","set_monitor","removeClass","addClass","current_monitor","plot_refresh","update_series","refresh","seen","each","addr","item","plot_add","forEach","s","event","highlight","remove","ser","lines","lineWidth","move_to_front","host_renderer","target","render_avatar","avatar_display","restarting","connecting_display","render","template","list","html","tooltip","title","throttled_render","timer","window","setTimeout","plots","i","rm","push","add_metrics_sum_series","extend","connection_string","plot_init","setup_hook","flot","axes","getAxes","config","datamax","max","Math","ceil","min","pl","set_options","instance","new_manager","click","renderer","parseInt","data","setup_plot_controls","parent","visible","resize","jQuery","cache","div","createElement","innerHTML","result","mustache","view","partials","to_html","send","clearCache","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","undefined","testRegExp","re","string","RegExp_test","isWhitespace","nonSpaceRe","isFunction","object","escapeRegExp","replace","escapeHtml","String","entityMap","escapeTags","tags","isArray","Error","RegExp","parseTemplate","stripSpace","hasTag","nonSpace","spaces","tokens","pop","split","spaceRe","start","type","value","chr","token","openSection","tagRes","scanner","Scanner","sections","eos","pos","scanUntil","len","charAt","scan","tagRe","whiteRe","equalsRe","curlyRe","nestTokens","squashTokens","lastToken","squashedTokens","section","nestedTokens","collector","tail","Context","parentContext",".","Writer","test","Object_toString","Object","toString","Array","&","<",">","\"","'","/","match","index","substring","search","context","indexOf","names","renderTokens","originalTemplate","subRender","buffer","j","jlen","slice","escape","version","defaultWriter","setup_plot","graph_id","user_options","sync_divs","inner_div","width","outer_div","height","set_yaxis_max","running","maybe_start","stop","setData","setupGrid","draw","destroy","trigger","empty","fill","aboveData","scale","labelMargin","append","element","plotter","C_","x_range_seconds","x_stop_seconds","refresh_now","flot_data","beg","interval","end","used","refresh_pending","start_walking","walk","stop_walking","move","reset","clearSelection","x_offset","Date","getTime","floor","close","sync_suppressed","sync","count","opts","get_options","desc","channel","add_series","remove_series","splice","build_metric","n","flat_sum","sum","reset_series","check_archives","archives","triggerHandler","metrics","chanopts_list","metrics_row","add","row","x","hover_hit","hover","source","archive_source","map","instances","add_metrics_stacked_instances_series","add_instance","instance_data","ts","last","abs","threshold","last_instance","clear_instances","round","d","y","metrics_path_names","next_hover_series","next_hover_val","cur_hover_series","cur_hover_val","hover_on","hover_off","selecting","ranges","selected","to","from","plot_colors","plot_simple_template","tickLength","reserveSpace","size","pow","log","LN2","t","month_names","axis","pad","str","toFixed","begin","year_index","month_index","day_index","hour_minute_index","tickSize","l","getFullYear","getMonth","getDate","getHours","getMinutes","substr","bytes_tick_unit","format_bytes","format_bytes_tick_no_unit","bytes_per_sec_tick_unit","format_bytes_per_sec","format_bytes_per_sec_tick_no_unit","bits_per_sec_tick_unit","format_bits_per_sec","format_bits_per_sec_tick_no_unit","container","zoom_plot_start","plot_x_stop","update_plot_buttons","zoom_plot_in","x_range","x_stop","zoom_history","plot_x_range","plot_reset","zoom_plot_out","r","plot_zoom_steps","format_range","seconds","ngettext","find","update_selection_zooming","hasClass","plot_min_x_range","selection","step","setup_complicated_plot","basic_flot_row","input","stacked_flot_row","x_rh_stack_graphs","make","g","b","a","o","normalize","f","join","clamp","clone","extract","elem","toLowerCase","nodeName","get","res","exec","parseFloat","trim","lookupColors","aqua","azure","beige","black","blue","brown","cyan","darkblue","darkcyan","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkviolet","fuchsia","gold","green","indigo","khaki","lightblue","lightcyan","lightgreen","lightgrey","lightpink","lightyellow","lime","magenta","maroon","navy","olive","orange","pink","purple","violet","red","silver","white","yellow","Canvas","cls","children","className","direction","position","left","top","appendTo","getContext","G_vmlCanvasManager","initElement","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","pixelRatio","textContainer","_textCache","Plot","placeholder","data_","options_","plugins","executeHooks","hook","args","concat","apply","initPlugins","classes","parseOptions","axisOptions","axisCount","fontSize","fontSizeDefault","fontDefaults","style","variant","weight","family","xaxes","font","lineHeight","yaxes","noTicks","x2axis","y2axis","coloredAreas","markings","coloredAreasColor","markingsColor","bars","highlightColor","getOrCreateAxis","hooks","processOptions","parseData","fillInSeriesOptions","processData","axisNumber","obj","coord","allAxes","grep","canvasToAxisCoords","c2p","x1","y1","axisToCanvasCoords","p2c","number","neededColors","maxIndex","sc","colorPool","colorPoolSize","variation","colori","zero","updateAxis","datamin","fakeInfinity","k","ps","topSentry","Number","POSITIVE_INFINITY","bottomSentry","NEGATIVE_INFINITY","MAX_VALUE","datapoints","processRawData","required","autoscale","defaultValue","horizontal","pointsize","insertSteps","steps","nullify","isNaN","Infinity","processDatapoints","xmin","ymin","xmax","ymax","delta","align","barWidth","setupCanvases","filter","surface","overlay","ctx","octx","eventHolder","unbind","existing","shutdown","clear","bindEvents","mousemove","onMouseMove","bind","onMouseLeave","clickable","onClick","redrawTimeout","clearTimeout","setTransformationHelpers","identity","transform","it","inverseTransform","plotWidth","plotHeight","measureTickLabels","labelWidth","labelHeight","maxWidth","legacyStyles","layer","info","getTextInfo","allocateAxisBoxFirstPhase","lw","lh","isXAxis","axisMargin","padding","innermost","outermost","first","found","plotOffset","bottom","box","right","allocateAxisBoxSecondPhase","adjustLayoutForThingsStickingOut","minMargin","minBorderMargin","margins","showGrid","margin","processOffset","axisOpts","setRange","allocatedAxes","setupTickGeneration","setTicks","snapRangeToTicks","drawAxisLabels","insertLegend","widen","autoscaleMargin","sqrt","dec","LN10","maxDec","tickDecimals","magn","norm","tickGenerator","prev","floorInBase","NaN","formatted","decimal","precision","alignTicksWithAxis","otherAxis","niceTicks","extraDec","oticks","drawBackground","backgroundColor","drawGrid","drawSeries","triggerRedrawOverlay","extractRange","tmp","save","fillStyle","getColorOrGradient","fillRect","restore","bw","bc","xrange","yrange","xequal","yequal","markingsLineWidth","subPixel","beginPath","strokeStyle","moveTo","lineTo","stroke","xoff","yoff","strokeRect","tick","halign","valign","removeText","addText","drawSeriesLines","drawSeriesBars","drawSeriesPoints","plotLine","xoffset","yoffset","axisx","axisy","prevx","prevy","x2","y2","plotLineArea","areaOpen","ypos","segmentStart","segmentEnd","x1old","x2old","lineJoin","sw","angle","PI","sin","cos","getFillStyle","plotPoints","offset","shadow","symbol","arc","closePath","w","drawBar","barLeft","barRight","fillStyleCallback","drawLeft","drawRight","drawTop","drawBottom","plotBars","filloptions","seriesColor","fillColor","fragments","entries","rowStarted","lf","labelFormatter","sorted","sort","reverse","ascending","entry","noColumns","labelBoxBorderColor","table","backgroundOpacity","prependTo","findNearbyItem","mouseX","mouseY","seriesFilter","maxDistance","mouseActiveRadius","smallestDistance","mx","my","maxx","maxy","dx","dy","dist","datapoint","dataIndex","seriesIndex","e","triggerClickHoverEvent","eventname","canvasX","pageX","canvasY","pageY","highlights","h","auto","point","unhighlight","interaction","redrawOverlayInterval","drawOverlay","hi","drawBarHighlight","drawPointHighlight","indexOfHighlight","pointRadius","spec","defaultColor","gradient","createLinearGradient","co","brightness","opacity","addColorStop","getPlaceholder","getCanvas","getPlotOffset","getData","getXAxes","getYAxes","getOptions","pointOffset","removeData","base","hasOwnProperty","fn","detach","parentNode","removeChild","clearRect","layerKey","getTextLayer","layerCache","styleKey","styleCache","positions","active","rendered","font-size","insertAfter","textStyle","max-width","outerWidth","outerHeight","text-align","updateSelection","getSelection","onMouseDown","which","body","focus","onselectstart","savedhandlers","ondrag","setSelectionPos","mouseUpHandler","onMouseUp","one","selectionIsSane","triggerSelectedEvent","c1","c2","second","p1","p2","preventEvent","setSelection","range","minSize","mousedown","shape","formatDate","fmt","monthNames","dayNames","strftime","leftPad","hours","isAM","hours12","getDay","getSeconds","makeUtcWrapper","addProxyMethod","sourceObj","sourceMethod","targetObj","targetMethod","arguments","utc","date","props","dateGenerator","timezone","timezoneJS","setTimezone","setTime","axisName","specQuarters","specMonths","timeUnitSize","unit","year","setSeconds","setMinutes","setHours","setMonth","setFullYear","setMilliseconds","minute","hour","day","setDate","month","quarter","carry","timeformat","useQuarters","span","suffix","hourCode","rt","twelveHourClock","baseSpec","generate_session_key","session_prefix","Machines","storage","storageArea","sessionStorage","JSON","newValue","desired","shared","emit_ready","ready","flat","timeout","setItem","stringify","hosts","content","application","events","old_machine","old_conns","generate_connection_string","port","transport","hostname","sel","update_session_machine","skey","when","update_saved_machine","values_variant","bridge","dbus","bus","superuser","mod","over","error","color_in_use","merge","localhost","manifests","addEventListener","getItem","add_key","host_key","known_hosts","file","known_hosts_path","modify","always","split_connection_string","unused_color","on_disk","hostnamed","conn_to","ex","all","changes","defineProperty","enumerable","m1","m2","localeCompare","keys","parts","user_spot","port_spot","lastIndexOf","removeEventListener","Loader","session_only","process_session_key","connect","load_from_session_storage","session_loaded","process_session_machines","problem","checksum","updated","proxies","valid","PrettyHostname","StaticHostname","os","OperatingSystemPrettyName","isEmptyObject","kill","disconnect","removed","channels","bridge_dbus","whirl","request","open","request_manifest","ajax","url","dataType","etag","getResponseHeader","watch_manifests","subscribe","interface","member","iface","mamber","request_hostname","static_hostname","proxy","wait","payload","local","encodeURI","client","expect_restart","host_props","wrapped","data_unwrap","prefixedKey","loader","getComputedStyle","getPropertyValue","caps","capabilities","inArray","has_auth_results","debug","translate_and_init","tmpl","old","outerHTML","translated","getAttribute","full_address","machines_ins","Dialog","codes","address_or_label","change_content","error_options","old_instance","current_instance","current_template","AddMachine","SyncUsers","HostKey","ChangeAuth","MachinePort","Simple","load","promise_callback","success_callback","try_to_connect","dfd","Deferred","conn_options","resolve","reject","get_sel","child_selector","ret_txt","set_on_success","callback","set_goal","complete","address_data","context_title","strong","output","templates","render_error","command","message","render_template","run","failure_callback","next","promise_funcs","dialog_dfd","is_method_supported","methods","method","can_try_method","MachineColorPicker","selected_color","part","$div","$pop","div_pos","div_width","div_height","pop_width","pop_height","existing_error","check_address","evt","disabled","button","run_error","add_machine","dfp","msg","host_id_port","port_index","invisible","addresses","manifest","limit","color_picker","nearlimit","change_port","update_host","q","then","inner","fp","match_problem","key_host","allow_change","update_keys","key_div","items","login","change_login_type","stored","available","supported","machine_user","allows_password","can_sync","machines.allow_connection_string","sync_link","credentials","keys_instance","load_users","perm_failed","blank","Transfer","prepared","groups","raw","users","username","members","u","sync_users","needs_auth","password","remote_options","group","Commit","toggle_button","any","formated_groups","user_list","needs_root","checked","is","MachineDialogManager","default_codes","troubleshoot","target_id","needs_troubleshoot","add_tmpl","auth_failed_tmpl","change_auth_tmpl","change_port_tmpl","color_picker_tmpl","invalid_hostkey_tmpl","not_supported_tmpl","sync_users_tmpl","unknown_hosts_tmpl","no-cockpit","not-supported","protocol-error","authentication-not-supported","authentication-failed","no-forwarding","unknown-hostkey","invalid-hostkey","not-found","unknown-host","sync-users","add-machine","auth-failed","change-auth","change-port","color-picker","process","Keys","watch","clearInterval","proc","script","lister","err","blocks","line","parse_key","block","parse_info","comment","toUpperCase","fingerprint","home","old_pass","new_pass","two_pass","old_exps","new_exps","bad_exps","sent_new","failure","spawn","pty","environ","directory","constructor","stream","ask_exp","perm_exp","bad_exp","unload","parents","onoff","keyCode","li","eq","field","rows","el","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","Item","array","noop","nextTick","browser","env","argv","versions","addListener","once","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","unique","unique_number","clear_errors","field_error","wrapper","insertBefore","selectpicker","global_error","alert","footer","display_errors","errors","DialogWait","handle","clear_wait","ctl","display_wait","cancelled","update","before","cancellation","cancel","controls","not","progress","onoff_refresh","andSelf","buttons","createTextNode","onoff_change","onoff_value","resize_flex","slider","flex","total","update_value","check_overflow","offsetWidth","scrollWidth","setup_slider","set","setAttribute","hasAttribute","hitx","offsetX","clientX","setup_sliders","action","perm","denied_message","placement","allowed","allowed_key","$image_canvas","$overlay_canvas","$file_input","image_canvas","image_2d","overlay_canvas","overlay_2d","load_file","cropping","set_crop","initial_crop_size","fix","low","high","min_s","crop_handle_width","square_size","crop_x","crop_y","crop_s","draw_crop","draw_box","ctxt","h_w","proj_sign","orig_s","orig_x","orig_y","dx_sign","dy_sign","ds_sign","mouseup","img","Image","onerror","onload","dest_w","dest_h","drawImage","src","dest","toDataURL","files","reader","select_dfd","FileReader","readAsDataURL","File"],"mappings":"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","file":"dashboard/dashboard.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(5);\n\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2015 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar $ = __webpack_require__(6);\n\tvar cockpit = __webpack_require__(7);\n\t\n\tvar Mustache = __webpack_require__(8);\n\tvar plot = __webpack_require__(10);\n\t\n\tvar machines = __webpack_require__(14);\n\tvar mdialogs = __webpack_require__(15);\n\t__webpack_require__(20);\n\t\n\tvar image_editor = __webpack_require__(31);\n\t\n\tvar _ = cockpit.gettext;\n\t\n\t/* Handles an href link to a server */\n\t$(document).on(\"click\", \"a[data-address]\", function(ev) {\n\t    cockpit.jump(\"/\", $(this).attr(\"data-address\"));\n\t    ev.preventDefault();\n\t});\n\t\n\tvar common_plot_options = {\n\t    legend: { show: false },\n\t    series: { shadowSize: 0 },\n\t    xaxis: { tickColor: \"#d1d1d1\", mode: \"time\", tickFormatter: plot.format_date_tick, minTickSize: [ 1, 'minute' ] },\n\t    // The point radius influences the margin around the grid even if\n\t    // no points are plotted.  We don't want any margin, so we set the\n\t    // radius to zero.\n\t    points: { radius: 0 },\n\t    grid: { borderWidth: 1,\n\t            borderColor: \"#e1e6ed\",\n\t            hoverable: true,\n\t            autoHighlight: false\n\t          }\n\t};\n\t\n\tvar resource_monitors = [\n\t    { selector: \"#dashboard-plot-0\",\n\t      plot: {\n\t          direct: [\n\t              \"kernel.all.cpu.nice\",\n\t              \"kernel.all.cpu.user\",\n\t              \"kernel.all.cpu.sys\"\n\t          ],\n\t          internal: [\n\t              \"cpu.basic.nice\",\n\t              \"cpu.basic.user\",\n\t              \"cpu.basic.system\"\n\t          ],\n\t          units: \"millisec\",\n\t          derive: \"rate\",\n\t          factor: 0.1  // millisec / sec -> percent\n\t      },\n\t      options: { yaxis: { tickColor: \"#e1e6ed\",\n\t                          tickFormatter: function(v) { return v + \"%\"; }} },\n\t      ymax_unit: 100\n\t    },\n\t    { selector: \"#dashboard-plot-1\",\n\t      plot: {\n\t          direct: [\n\t              \"mem.util.used\"\n\t          ],\n\t          internal: [\n\t              \"memory.used\"\n\t          ],\n\t          units: \"bytes\",\n\t      },\n\t      options: { yaxis: { ticks: plot.memory_ticks,\n\t                          tickColor: \"#e1e6ed\",\n\t                          tickFormatter: plot.format_bytes_tick\n\t                        }\n\t               },\n\t      ymax_unit: 100000000\n\t    },\n\t    { selector: \"#dashboard-plot-2\",\n\t      plot: {\n\t          direct: [\n\t              \"network.interface.total.bytes\"\n\t          ],\n\t          internal: [\n\t              \"network.interface.rx\",\n\t              \"network.interface.tx\"\n\t          ],\n\t          units: \"bytes\",\n\t          'omit-instances': [ \"lo\" ],\n\t          derive: \"rate\"\n\t      },\n\t      options: { yaxis: { tickColor: \"#e1e6ed\",\n\t                          tickFormatter: plot.format_bits_per_sec_tick\n\t                        }\n\t               },\n\t      ymax_min: 100000\n\t    },\n\t    { selector: \"#dashboard-plot-3\",\n\t      plot: {\n\t          direct: [\n\t              \"disk.dev.total_bytes\"\n\t          ],\n\t          internal: [\n\t              \"block.device.read\",\n\t              \"block.device.written\"\n\t          ],\n\t          units: \"bytes\",\n\t          derive: \"rate\"\n\t      },\n\t      options: { yaxis: { ticks: plot.memory_ticks,\n\t                          tickColor: \"#e1e6ed\",\n\t                          tickFormatter: plot.format_bytes_per_sec_tick\n\t                        }\n\t               },\n\t      ymax_min: 100000\n\t    }\n\t];\n\t\n\tvar avatar_editor;\n\t\n\t$(function () {\n\t    avatar_editor = image_editor($('#host-edit-avatar'), 256, 256);\n\t});\n\t\n\tfunction host_edit_dialog(machine_manager, machine_dialogs, host) {\n\t    var machine = machine_manager.lookup(host);\n\t    if (!machine)\n\t        return;\n\t\n\t    var can_change_user = machine.address != \"localhost\";\n\t    var dlg = $(\"#host-edit-dialog\");\n\t    $('#host-edit-fail').text(\"\").hide();\n\t    $('#host-edit-name').val(machine.label);\n\t    $('#host-edit-name').prop('disabled', machine.state == \"failed\");\n\t    $('#host-edit-user-row').toggle(machines.allow_connection_string);\n\t\n\t    if (machines.allow_connection_string) {\n\t        cockpit.user().done(function (user) {\n\t            $('#host-edit-user').attr('placeholder', user.name);\n\t        });\n\t        $('#host-edit-user').prop('disabled', !can_change_user);\n\t        $('#host-edit-user').val(machine.user);\n\t        $(\"#host-edit-dialog a[data-content]\").popover();\n\t    }\n\t\n\t    machine_dialogs.render_color_picker(\"#host-edit-colorpicker\", machine.address);\n\t    $('#host-edit-sync-users').off('click');\n\t    $(\"#host-edit-sync-users\").on('click', function () {\n\t        $(\"#host-edit-dialog\").modal('hide');\n\t        machine_dialogs.render_dialog(\"sync-users\",\n\t                                      \"dashboard_setup_server_dialog\",\n\t                                      machine.address);\n\t    });\n\t\n\t    $('#host-edit-apply').off('click');\n\t    $('#host-edit-apply').on('click', function () {\n\t        dlg.dialog('failure', null);\n\t        var values = {\n\t            avatar: avatar_editor.changed ? avatar_editor.get_data(128, 128, \"image/png\") : null,\n\t            color: machines.colors.parse($('#host-edit-colorpicker #host-edit-color').css('background-color')),\n\t            label: $('#host-edit-name').val(),\n\t        };\n\t\n\t        if (can_change_user && machines.allow_connection_string)\n\t            values.user = $('#host-edit-user').val();\n\t\n\t        var promise = machine_manager.change(machine.key, values);\n\t        dlg.dialog('promise', promise);\n\t    });\n\t    $('#host-edit-avatar').off('click');\n\t    $('#host-edit-avatar').on('click', function () {\n\t        $('#host-edit-fail').text(\"\").hide();\n\t        avatar_editor.select_file().\n\t            done(function () {\n\t                $('#host-edit-avatar').off('click');\n\t                avatar_editor.changed = true;\n\t                avatar_editor.start_cropping();\n\t            });\n\t    });\n\t    dlg.modal('show');\n\t    avatar_editor.stop_cropping();\n\t    avatar_editor.load_data(machine.avatar || \"images/server-large.png\").\n\t        fail(function () {\n\t            $('#host-edit-fail').text(\"Can't load image\").show();\n\t        });\n\t}\n\t\n\tvar permission = cockpit.permission({ admin: true });\n\t$(permission).on(\"changed\", update_servers_privileged);\n\t\n\tfunction update_servers_privileged() {\n\t    $(\".servers-privileged\").update_privileged(\n\t        permission, cockpit.format(\n\t            _(\"The user <b>$0</b> is not permitted to manage servers\"),\n\t            permission.user ? permission.user.name : '')\n\t    );\n\t}\n\t\n\tPageDashboard.prototype = {\n\t    _init: function() {\n\t        this.id = \"dashboard\";\n\t        this.edit_enabled = false;\n\t    },\n\t\n\t    getTitle: function() {\n\t        return null;\n\t    },\n\t\n\t    toggle_edit: function(val) {\n\t        var self = this;\n\t        self.edit_enabled = val;\n\t        $('#dashboard-enable-edit').toggleClass('active', self.edit_enabled);\n\t        $('.os').toggleClass('hidden', self.edit_enabled);\n\t        $('#dashboard-hosts').toggleClass('editable', self.edit_enabled);\n\t    },\n\t\n\t    setup: function() {\n\t        var self = this;\n\t\n\t        self.machines = machines.instance();\n\t\n\t        self.mdialogs = mdialogs.new_manager(self.machines);\n\t\n\t        var current_monitor = 0;\n\t\n\t        $('#dashboard-add').click(function () {\n\t            self.mdialogs.render_dialog(\"add-machine\", \"dashboard_setup_server_dialog\");\n\t        });\n\t        $('#dashboard-enable-edit').click(function () {\n\t            self.toggle_edit(!self.edit_enabled);\n\t        });\n\t\n\t        var renderer = host_renderer($(\"#dashboard-hosts .list-group\"));\n\t        $(self.machines).on(\"added.dashboard\", renderer);\n\t        $(self.machines).on(\"removed.dashboard\", renderer);\n\t        $(self.machines).on(\"updated.dashboard\", renderer);\n\t\n\t        $('#dashboard .nav-tabs li').click(function () {\n\t            set_monitor(parseInt($(this).data('monitor-id'), 10));\n\t        });\n\t\n\t        function set_monitor(id) {\n\t            $('#dashboard .nav-tabs li').removeClass(\"active\");\n\t            $('#dashboard .nav-tabs li[data-monitor-id=' + id + ']').addClass(\"active\");\n\t            current_monitor = id;\n\t            $('.dashboard-plot').hide();\n\t            $(resource_monitors[id].selector).show();\n\t            plot_refresh();\n\t        }\n\t\n\t        plot_init();\n\t        set_monitor(current_monitor);\n\t        plot.setup_plot_controls($('#dashboard'), $('#dashboard-toolbar'), self.plots);\n\t\n\t        $(\"#dashboard-hosts\")\n\t            .on(\"click\", \"a.list-group-item\", function() {\n\t                if (self.edit_enabled)\n\t                    return false;\n\t            })\n\t            .on(\"click\", \"button.pficon-delete\", function() {\n\t                var item = $(this).parent(\".list-group-item\");\n\t                self.toggle_edit(false);\n\t                var machine = self.machines.lookup(item.attr(\"data-address\"));\n\t                if (machine)\n\t                    self.machines.change(machine.key, { visible: false });\n\t                return false;\n\t            })\n\t            .on(\"click\", \"button.pficon-edit\", function() {\n\t                var item = $(this).parent(\".list-group-item\");\n\t                var host = item.attr(\"data-address\");\n\t                self.toggle_edit(false);\n\t                host_edit_dialog(self.machines, self.mdialogs, host);\n\t                return false;\n\t            })\n\t            .on(\"mouseenter\", \"a.list-group-item\", function() {\n\t                highlight($(this), true);\n\t            })\n\t            .on(\"mouseleave\", \"a.list-group-item\", function() {\n\t                highlight($(this), false);\n\t            });\n\t\n\t        var series = { };\n\t\n\t        function update_series() {\n\t            var refresh = false;\n\t\n\t            var seen = { };\n\t            $.each(series, function(addr) {\n\t                seen[addr] = true;\n\t            });\n\t\n\t            $(\"#dashboard-hosts .list-group-item\").each(function() {\n\t                var item = $(this);\n\t                var addr = item.attr(\"data-address\");\n\t                var machine = self.machines.lookup(addr);\n\t                if (!machine || machine.state != \"connected\")\n\t                    return;\n\t                delete seen[addr];\n\t                if (!series[addr]) {\n\t                    series[addr] = plot_add(addr);\n\t                }\n\t                series[addr].forEach(function (s) {\n\t                    $(s)\n\t                        .off('hover')\n\t                        .on('hover', function(event, val) {\n\t                            highlight(item, val);\n\t                        });\n\t                    var color = machine.color;\n\t                    if (s.options.color != color) {\n\t                        refresh = true;\n\t                        s.options.color = color;\n\t                    }\n\t                });\n\t            });\n\t\n\t            $.each(seen, function(addr) {\n\t                series[addr].forEach(function (s) { s.remove(); });\n\t                delete series[addr];\n\t            });\n\t\n\t            if (refresh)\n\t                plot_refresh();\n\t        }\n\t\n\t        function highlight(item, val) {\n\t            item.toggleClass(\"highlight-ct\", val);\n\t            var ser = series[item.attr(\"data-address\")];\n\t            if (ser) {\n\t                ser.forEach(function (s) {\n\t                    s.options.lines.lineWidth = val? 3 : 2;\n\t                    if (val)\n\t                        s.move_to_front();\n\t                });\n\t                plot_refresh();\n\t            }\n\t        }\n\t\n\t        function host_renderer(target) {\n\t            var template = $(\"#dashboard-hosts-tmpl\").html();\n\t            Mustache.parse(template);\n\t\n\t            /* jshint validthis:true */\n\t            function render_avatar() {\n\t                if (this.state == \"failed\")\n\t                    return \"../shell/images/server-error.png\";\n\t                else if (this.avatar)\n\t                    return this.avatar;\n\t                else\n\t                    return \"../shell/images/server-small.png\";\n\t            }\n\t\n\t            function avatar_display() {\n\t                if (this.restarting)\n\t                    return \"hidden\";\n\t                else\n\t                    return \"\";\n\t            }\n\t\n\t            function connecting_display() {\n\t                if (this.restarting)\n\t                    return \"\";\n\t                else\n\t                    return \"hidden\";\n\t            }\n\t\n\t            function render() {\n\t                var text = Mustache.render(template, {\n\t                    machines: self.machines.list,\n\t                    render_avatar: render_avatar,\n\t                    avatar_display: avatar_display,\n\t                    connecting_display: connecting_display\n\t                });\n\t\n\t                target.html(text);\n\t                $(\"[data-color]\", target).each(function() {\n\t                    $(this).css(\"border-left-color\", $(this).attr(\"data-color\"));\n\t                });\n\t                $(\".delete-localhost\").tooltip({\n\t                      title : _(\"You are currently connected directly to this server. You cannot delete it.\")\n\t                });\n\t                $(\".delete-localhost\").toggleClass('disabled', true);\n\t                $(\".delete-localhost\").toggleClass('servers-privileged', false);\n\t                update_servers_privileged();\n\t                update_series();\n\t            }\n\t\n\t            /* delay and throttle rendering\n\t               events shouldn't fire continuously anyway,\n\t               so in case of a burst it's better to wait a bit before we start rendering\n\t             */\n\t            function throttled_render() {\n\t                var timer = null;\n\t                return function() {\n\t                    if (timer === null) {\n\t                        timer = window.setTimeout(function () {\n\t                            timer = null;\n\t                            render();\n\t                        }, 500);\n\t                    }\n\t                };\n\t            }\n\t            return throttled_render();\n\t        }\n\t\n\t        function plot_refresh() {\n\t            self.plots.forEach(function (p) { p.refresh(); });\n\t        }\n\t\n\t        function plot_add(addr) {\n\t            var machine = self.machines.lookup(addr);\n\t\n\t            if (!machine || machine.state != \"connected\")\n\t                return null;\n\t\n\t            var series = [ ];\n\t            var i = 0;\n\t            resource_monitors.forEach(function (rm) {\n\t                if (self.plots[i]) {\n\t                    series.push(self.plots[i].add_metrics_sum_series($.extend({ host: machine.connection_string},\n\t                                                                              rm.plot),\n\t                                                                     { color: machine.color,\n\t                                                                       lines: {\n\t                                                                           lineWidth: 2\n\t                                                                       }\n\t                                                                     }));\n\t                }\n\t                i += 1;\n\t            });\n\t            return series;\n\t        }\n\t\n\t        function plot_init() {\n\t            self.plots = [];\n\t\n\t            resource_monitors.forEach(function (rm) {\n\t                function setup_hook(flot) {\n\t                    var axes = flot.getAxes();\n\t                    var config = rm;\n\t\n\t                    if (rm.ymax_unit) {\n\t                        if (axes.yaxis.datamax)\n\t                            axes.yaxis.options.max = Math.ceil(axes.yaxis.datamax / config.ymax_unit) * rm.ymax_unit;\n\t                        else\n\t                            axes.yaxis.options.max = rm.ymax_unit;\n\t                    }\n\t\n\t                    if (rm.ymax_min) {\n\t                        if (axes.yaxis.datamax < rm.ymax_min)\n\t                            axes.yaxis.options.max = rm.ymax_min;\n\t                        else\n\t                            axes.yaxis.options.max = null;\n\t                    }\n\t\n\t                    axes.yaxis.options.min = 0;\n\t                }\n\t\n\t                if (!rm.selector)\n\t                    return;\n\t\n\t                var options = $.extend({ setup_hook: setup_hook },\n\t                                       common_plot_options,\n\t                                       rm.options);\n\t                var pl = plot.plot($(rm.selector));\n\t                pl.set_options(options);\n\t                self.plots.push(pl);\n\t            });\n\t\n\t            series = {};\n\t            update_series();\n\t        }\n\t\n\t        $(window).on('resize.dashboard', function () {\n\t            self.plots.forEach(function (p) { p.resize(); });\n\t        });\n\t\n\t        renderer();\n\t    },\n\t\n\t    show: function() {\n\t        update_servers_privileged();\n\t        this.plots[0].resize();\n\t        this.toggle_edit(false);\n\t    },\n\t\n\t    enter: function() {\n\t    },\n\t\n\t    leave: function () {\n\t    }\n\t};\n\t\n\tfunction PageDashboard() {\n\t    this._init();\n\t}\n\t\n\t/*\n\t * INITIALIZATION AND NAVIGATION\n\t *\n\t * The code above still uses the legacy 'Page' abstraction for both\n\t * pages and dialogs, and expects page.setup, page.enter, page.show,\n\t * and page.leave to be called at the right times.\n\t *\n\t * We cater to this with a little compatibility shim consisting of\n\t * 'dialog_setup', 'page_show', and 'page_hide'.\n\t */\n\t\n\tfunction page_show(p, arg) {\n\t    if (p._entered_)\n\t        p.leave();\n\t    p.enter(arg);\n\t    p._entered_ = true;\n\t    $('#' + p.id).show();\n\t    p.show();\n\t}\n\t\n\tfunction init() {\n\t    var dashboard_page;\n\t\n\t    function navigate() {\n\t        var path = cockpit.location.path;\n\t\n\t        if (path.length === 0) {\n\t            page_show(dashboard_page);\n\t        } else { /* redirect */\n\t            console.warn(\"not a dashboard location: \" + path);\n\t            cockpit.location = '';\n\t        }\n\t\n\t        $(\"body\").removeAttr(\"hidden\");\n\t    }\n\t\n\t    cockpit.translate();\n\t\n\t    dashboard_page = new PageDashboard();\n\t    dashboard_page.setup();\n\t\n\t    $(cockpit).on(\"locationchanged\", navigate);\n\t    navigate();\n\t}\n\t\n\t$(init);\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = jQuery;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar cockpit = __webpack_require__(7);\n\tvar mustache = __webpack_require__(9);\n\t\n\t/*\n\t * Turns a mustache template into a translated mustache template\n\t * by preparsing it and translating it.\n\t */\n\tvar cache = { };\n\t\n\tfunction translate(template) {\n\t    if (template in cache)\n\t        return cache[template];\n\t    var div = document.createElement(\"div\");\n\t    div.innerHTML = template;\n\t    cockpit.translate(div);\n\t    var result = div.innerHTML;\n\t    cache[template] = result;\n\t    return result;\n\t}\n\t\n\t/* Just like the mustache object, except for translated */\n\tmodule.exports = cockpit.extend({ }, mustache, {\n\t    render: function render(template, view, partials) {\n\t        return translate(mustache.render(template, view, partials));\n\t    },\n\t    to_html: function to_html(template, view, partials, send) {\n\t        return translate(mustache.to_html(template, view, partials, send));\n\t    },\n\t    clearCache: function clearCache() {\n\t        cache = { };\n\t        return mustache.clearCache();\n\t    }\n\t});\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * mustache.js - Logic-less {{mustache}} templates with JavaScript\n\t * http://github.com/janl/mustache.js\n\t */\n\t\n\t/*global define: false*/\n\t\n\t(function (root, factory) {\n\t  if (typeof exports === \"object\" && exports) {\n\t    factory(exports); // CommonJS\n\t  } else {\n\t    var mustache = {};\n\t    factory(mustache);\n\t    if (true) {\n\t      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (mustache), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD\n\t    } else {\n\t      root.Mustache = mustache; // <script>\n\t    }\n\t  }\n\t}(this, function (mustache) {\n\t\n\t  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n\t  // See https://github.com/janl/mustache.js/issues/189\n\t  var RegExp_test = RegExp.prototype.test;\n\t  function testRegExp(re, string) {\n\t    return RegExp_test.call(re, string);\n\t  }\n\t\n\t  var nonSpaceRe = /\\S/;\n\t  function isWhitespace(string) {\n\t    return !testRegExp(nonSpaceRe, string);\n\t  }\n\t\n\t  var Object_toString = Object.prototype.toString;\n\t  var isArray = Array.isArray || function (object) {\n\t    return Object_toString.call(object) === '[object Array]';\n\t  };\n\t\n\t  function isFunction(object) {\n\t    return typeof object === 'function';\n\t  }\n\t\n\t  function escapeRegExp(string) {\n\t    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n\t  }\n\t\n\t  var entityMap = {\n\t    \"&\": \"&amp;\",\n\t    \"<\": \"&lt;\",\n\t    \">\": \"&gt;\",\n\t    '\"': '&quot;',\n\t    \"'\": '&#39;',\n\t    \"/\": '&#x2F;'\n\t  };\n\t\n\t  function escapeHtml(string) {\n\t    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n\t      return entityMap[s];\n\t    });\n\t  }\n\t\n\t  function escapeTags(tags) {\n\t    if (!isArray(tags) || tags.length !== 2) {\n\t      throw new Error('Invalid tags: ' + tags);\n\t    }\n\t\n\t    return [\n\t      new RegExp(escapeRegExp(tags[0]) + \"\\\\s*\"),\n\t      new RegExp(\"\\\\s*\" + escapeRegExp(tags[1]))\n\t    ];\n\t  }\n\t\n\t  var whiteRe = /\\s*/;\n\t  var spaceRe = /\\s+/;\n\t  var equalsRe = /\\s*=/;\n\t  var curlyRe = /\\s*\\}/;\n\t  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\t\n\t  /**\n\t   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n\t   * argument is given here it must be an array with two string values: the\n\t   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n\t   * course, the default is to use mustaches (i.e. mustache.tags).\n\t   *\n\t   * A token is an array with at least 4 elements. The first element is the\n\t   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n\t   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n\t   * all text that appears outside a symbol this element is \"text\".\n\t   *\n\t   * The second element of a token is its \"value\". For mustache tags this is\n\t   * whatever else was inside the tag besides the opening symbol. For text tokens\n\t   * this is the text itself.\n\t   *\n\t   * The third and fourth elements of the token are the start and end indices,\n\t   * respectively, of the token in the original template.\n\t   *\n\t   * Tokens that are the root node of a subtree contain two more elements: 1) an\n\t   * array of tokens in the subtree and 2) the index in the original template at\n\t   * which the closing tag for that section begins.\n\t   */\n\t  function parseTemplate(template, tags) {\n\t    tags = tags || mustache.tags;\n\t    template = template || '';\n\t\n\t    if (typeof tags === 'string') {\n\t      tags = tags.split(spaceRe);\n\t    }\n\t\n\t    var tagRes = escapeTags(tags);\n\t    var scanner = new Scanner(template);\n\t\n\t    var sections = [];     // Stack to hold section tokens\n\t    var tokens = [];       // Buffer to hold the tokens\n\t    var spaces = [];       // Indices of whitespace tokens on the current line\n\t    var hasTag = false;    // Is there a {{tag}} on the current line?\n\t    var nonSpace = false;  // Is there a non-space char on the current line?\n\t\n\t    // Strips all whitespace tokens array for the current line\n\t    // if there was a {{#tag}} on it and otherwise only space.\n\t    function stripSpace() {\n\t      if (hasTag && !nonSpace) {\n\t        while (spaces.length) {\n\t          delete tokens[spaces.pop()];\n\t        }\n\t      } else {\n\t        spaces = [];\n\t      }\n\t\n\t      hasTag = false;\n\t      nonSpace = false;\n\t    }\n\t\n\t    var start, type, value, chr, token, openSection;\n\t    while (!scanner.eos()) {\n\t      start = scanner.pos;\n\t\n\t      // Match any text between tags.\n\t      value = scanner.scanUntil(tagRes[0]);\n\t      if (value) {\n\t        for (var i = 0, len = value.length; i < len; ++i) {\n\t          chr = value.charAt(i);\n\t\n\t          if (isWhitespace(chr)) {\n\t            spaces.push(tokens.length);\n\t          } else {\n\t            nonSpace = true;\n\t          }\n\t\n\t          tokens.push(['text', chr, start, start + 1]);\n\t          start += 1;\n\t\n\t          // Check for whitespace on the current line.\n\t          if (chr === '\\n') {\n\t            stripSpace();\n\t          }\n\t        }\n\t      }\n\t\n\t      // Match the opening tag.\n\t      if (!scanner.scan(tagRes[0])) break;\n\t      hasTag = true;\n\t\n\t      // Get the tag type.\n\t      type = scanner.scan(tagRe) || 'name';\n\t      scanner.scan(whiteRe);\n\t\n\t      // Get the tag value.\n\t      if (type === '=') {\n\t        value = scanner.scanUntil(equalsRe);\n\t        scanner.scan(equalsRe);\n\t        scanner.scanUntil(tagRes[1]);\n\t      } else if (type === '{') {\n\t        value = scanner.scanUntil(new RegExp('\\\\s*' + escapeRegExp('}' + tags[1])));\n\t        scanner.scan(curlyRe);\n\t        scanner.scanUntil(tagRes[1]);\n\t        type = '&';\n\t      } else {\n\t        value = scanner.scanUntil(tagRes[1]);\n\t      }\n\t\n\t      // Match the closing tag.\n\t      if (!scanner.scan(tagRes[1])) {\n\t        throw new Error('Unclosed tag at ' + scanner.pos);\n\t      }\n\t\n\t      token = [ type, value, start, scanner.pos ];\n\t      tokens.push(token);\n\t\n\t      if (type === '#' || type === '^') {\n\t        sections.push(token);\n\t      } else if (type === '/') {\n\t        // Check section nesting.\n\t        openSection = sections.pop();\n\t\n\t        if (!openSection) {\n\t          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\t        }\n\t        if (openSection[1] !== value) {\n\t          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n\t        }\n\t      } else if (type === 'name' || type === '{' || type === '&') {\n\t        nonSpace = true;\n\t      } else if (type === '=') {\n\t        // Set the tags for the next time around.\n\t        tagRes = escapeTags(tags = value.split(spaceRe));\n\t      }\n\t    }\n\t\n\t    // Make sure there are no open sections when we're done.\n\t    openSection = sections.pop();\n\t    if (openSection) {\n\t      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\t    }\n\t\n\t    return nestTokens(squashTokens(tokens));\n\t  }\n\t\n\t  /**\n\t   * Combines the values of consecutive text tokens in the given `tokens` array\n\t   * to a single token.\n\t   */\n\t  function squashTokens(tokens) {\n\t    var squashedTokens = [];\n\t\n\t    var token, lastToken;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      if (token) {\n\t        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n\t          lastToken[1] += token[1];\n\t          lastToken[3] = token[3];\n\t        } else {\n\t          squashedTokens.push(token);\n\t          lastToken = token;\n\t        }\n\t      }\n\t    }\n\t\n\t    return squashedTokens;\n\t  }\n\t\n\t  /**\n\t   * Forms the given array of `tokens` into a nested tree structure where\n\t   * tokens that represent a section have two additional items: 1) an array of\n\t   * all tokens that appear in that section and 2) the index in the original\n\t   * template that represents the end of that section.\n\t   */\n\t  function nestTokens(tokens) {\n\t    var nestedTokens = [];\n\t    var collector = nestedTokens;\n\t    var sections = [];\n\t\n\t    var token, section;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      switch (token[0]) {\n\t      case '#':\n\t      case '^':\n\t        collector.push(token);\n\t        sections.push(token);\n\t        collector = token[4] = [];\n\t        break;\n\t      case '/':\n\t        section = sections.pop();\n\t        section[5] = token[2];\n\t        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n\t        break;\n\t      default:\n\t        collector.push(token);\n\t      }\n\t    }\n\t\n\t    return nestedTokens;\n\t  }\n\t\n\t  /**\n\t   * A simple string scanner that is used by the template parser to find\n\t   * tokens in template strings.\n\t   */\n\t  function Scanner(string) {\n\t    this.string = string;\n\t    this.tail = string;\n\t    this.pos = 0;\n\t  }\n\t\n\t  /**\n\t   * Returns `true` if the tail is empty (end of string).\n\t   */\n\t  Scanner.prototype.eos = function () {\n\t    return this.tail === \"\";\n\t  };\n\t\n\t  /**\n\t   * Tries to match the given regular expression at the current position.\n\t   * Returns the matched text if it can match, the empty string otherwise.\n\t   */\n\t  Scanner.prototype.scan = function (re) {\n\t    var match = this.tail.match(re);\n\t\n\t    if (match && match.index === 0) {\n\t      var string = match[0];\n\t      this.tail = this.tail.substring(string.length);\n\t      this.pos += string.length;\n\t      return string;\n\t    }\n\t\n\t    return \"\";\n\t  };\n\t\n\t  /**\n\t   * Skips all text until the given regular expression can be matched. Returns\n\t   * the skipped string, which is the entire tail if no match can be made.\n\t   */\n\t  Scanner.prototype.scanUntil = function (re) {\n\t    var index = this.tail.search(re), match;\n\t\n\t    switch (index) {\n\t    case -1:\n\t      match = this.tail;\n\t      this.tail = \"\";\n\t      break;\n\t    case 0:\n\t      match = \"\";\n\t      break;\n\t    default:\n\t      match = this.tail.substring(0, index);\n\t      this.tail = this.tail.substring(index);\n\t    }\n\t\n\t    this.pos += match.length;\n\t\n\t    return match;\n\t  };\n\t\n\t  /**\n\t   * Represents a rendering context by wrapping a view object and\n\t   * maintaining a reference to the parent context.\n\t   */\n\t  function Context(view, parentContext) {\n\t    this.view = view == null ? {} : view;\n\t    this.cache = { '.': this.view };\n\t    this.parent = parentContext;\n\t  }\n\t\n\t  /**\n\t   * Creates a new context using the given view with this context\n\t   * as the parent.\n\t   */\n\t  Context.prototype.push = function (view) {\n\t    return new Context(view, this);\n\t  };\n\t\n\t  /**\n\t   * Returns the value of the given name in this context, traversing\n\t   * up the context hierarchy if the value is absent in this context's view.\n\t   */\n\t  Context.prototype.lookup = function (name) {\n\t    var value;\n\t    if (name in this.cache) {\n\t      value = this.cache[name];\n\t    } else {\n\t      var context = this;\n\t\n\t      while (context) {\n\t        if (name.indexOf('.') > 0) {\n\t          value = context.view;\n\t\n\t          var names = name.split('.'), i = 0;\n\t          while (value != null && i < names.length) {\n\t            value = value[names[i++]];\n\t          }\n\t        } else {\n\t          value = context.view[name];\n\t        }\n\t\n\t        if (value != null) break;\n\t\n\t        context = context.parent;\n\t      }\n\t\n\t      this.cache[name] = value;\n\t    }\n\t\n\t    if (isFunction(value)) {\n\t      value = value.call(this.view);\n\t    }\n\t\n\t    return value;\n\t  };\n\t\n\t  /**\n\t   * A Writer knows how to take a stream of tokens and render them to a\n\t   * string, given a context. It also maintains a cache of templates to\n\t   * avoid the need to parse the same template twice.\n\t   */\n\t  function Writer() {\n\t    this.cache = {};\n\t  }\n\t\n\t  /**\n\t   * Clears all cached templates in this writer.\n\t   */\n\t  Writer.prototype.clearCache = function () {\n\t    this.cache = {};\n\t  };\n\t\n\t  /**\n\t   * Parses and caches the given `template` and returns the array of tokens\n\t   * that is generated from the parse.\n\t   */\n\t  Writer.prototype.parse = function (template, tags) {\n\t    var cache = this.cache;\n\t    var tokens = cache[template];\n\t\n\t    if (tokens == null) {\n\t      tokens = cache[template] = parseTemplate(template, tags);\n\t    }\n\t\n\t    return tokens;\n\t  };\n\t\n\t  /**\n\t   * High-level method that is used to render the given `template` with\n\t   * the given `view`.\n\t   *\n\t   * The optional `partials` argument may be an object that contains the\n\t   * names and templates of partials that are used in the template. It may\n\t   * also be a function that is used to load partial templates on the fly\n\t   * that takes a single argument: the name of the partial.\n\t   */\n\t  Writer.prototype.render = function (template, view, partials) {\n\t    var tokens = this.parse(template);\n\t    var context = (view instanceof Context) ? view : new Context(view);\n\t    return this.renderTokens(tokens, context, partials, template);\n\t  };\n\t\n\t  /**\n\t   * Low-level method that renders the given array of `tokens` using\n\t   * the given `context` and `partials`.\n\t   *\n\t   * Note: The `originalTemplate` is only ever used to extract the portion\n\t   * of the original template that was contained in a higher-order section.\n\t   * If the template doesn't use higher-order sections, this argument may\n\t   * be omitted.\n\t   */\n\t  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n\t    var buffer = '';\n\t\n\t    // This function is used to render an arbitrary template\n\t    // in the current context by higher-order sections.\n\t    var self = this;\n\t    function subRender(template) {\n\t      return self.render(template, context, partials);\n\t    }\n\t\n\t    var token, value;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      switch (token[0]) {\n\t      case '#':\n\t        value = context.lookup(token[1]);\n\t        if (!value) continue;\n\t\n\t        if (isArray(value)) {\n\t          for (var j = 0, jlen = value.length; j < jlen; ++j) {\n\t            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n\t          }\n\t        } else if (typeof value === 'object' || typeof value === 'string') {\n\t          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n\t        } else if (isFunction(value)) {\n\t          if (typeof originalTemplate !== 'string') {\n\t            throw new Error('Cannot use higher-order sections without the original template');\n\t          }\n\t\n\t          // Extract the portion of the original template that the section contains.\n\t          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\t\n\t          if (value != null) buffer += value;\n\t        } else {\n\t          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n\t        }\n\t\n\t        break;\n\t      case '^':\n\t        value = context.lookup(token[1]);\n\t\n\t        // Use JavaScript's definition of falsy. Include empty arrays.\n\t        // See https://github.com/janl/mustache.js/issues/186\n\t        if (!value || (isArray(value) && value.length === 0)) {\n\t          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n\t        }\n\t\n\t        break;\n\t      case '>':\n\t        if (!partials) continue;\n\t        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n\t        if (value != null) buffer += this.renderTokens(this.parse(value), context, partials, value);\n\t        break;\n\t      case '&':\n\t        value = context.lookup(token[1]);\n\t        if (value != null) buffer += value;\n\t        break;\n\t      case 'name':\n\t        value = context.lookup(token[1]);\n\t        if (value != null) buffer += mustache.escape(value);\n\t        break;\n\t      case 'text':\n\t        buffer += token[1];\n\t        break;\n\t      }\n\t    }\n\t\n\t    return buffer;\n\t  };\n\t\n\t  mustache.name = \"mustache.js\";\n\t  mustache.version = \"0.8.1\";\n\t  mustache.tags = [ \"{{\", \"}}\" ];\n\t\n\t  // All high-level mustache.* functions use this writer.\n\t  var defaultWriter = new Writer();\n\t\n\t  /**\n\t   * Clears all cached templates in the default writer.\n\t   */\n\t  mustache.clearCache = function () {\n\t    return defaultWriter.clearCache();\n\t  };\n\t\n\t  /**\n\t   * Parses and caches the given template in the default writer and returns the\n\t   * array of tokens it contains. Doing this ahead of time avoids the need to\n\t   * parse templates on the fly as they are rendered.\n\t   */\n\t  mustache.parse = function (template, tags) {\n\t    return defaultWriter.parse(template, tags);\n\t  };\n\t\n\t  /**\n\t   * Renders the `template` with the given `view` and `partials` using the\n\t   * default writer.\n\t   */\n\t  mustache.render = function (template, view, partials) {\n\t    return defaultWriter.render(template, view, partials);\n\t  };\n\t\n\t  // This is here for backwards compatibility with 0.4.x.\n\t  mustache.to_html = function (template, view, partials, send) {\n\t    var result = mustache.render(template, view, partials);\n\t\n\t    if (isFunction(send)) {\n\t      send(result);\n\t    } else {\n\t      return result;\n\t    }\n\t  };\n\t\n\t  // Export the escaping function so that the user may override it.\n\t  // See https://github.com/janl/mustache.js/issues/244\n\t  mustache.escape = escapeHtml;\n\t\n\t  // Export these mainly for testing, but also for advanced usage.\n\t  mustache.Scanner = Scanner;\n\t  mustache.Context = Context;\n\t  mustache.Writer = Writer;\n\t\n\t}));\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2014 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar $ = __webpack_require__(6);\n\tvar cockpit = __webpack_require__(7);\n\t\n\t__webpack_require__(11);\n\t__webpack_require__(12);\n\t__webpack_require__(13);\n\t\n\tvar plotter = { };\n\t\n\tvar C_ = cockpit.gettext;\n\t\n\t/* A thin abstraction over flot and metrics channels.  It mostly\n\t * shields you from hairy array acrobatics and having to know when it\n\t * is safe or required to create the flot object.\n\t *\n\t *\n\t * - plot = plotter.plot(element, x_range, [x_stop])\n\t *\n\t * Creates a 'plot' object attached to the given DOM element.  It will\n\t * show 'x_range' seconds worth of samples, until 'x_stop'.\n\t *\n\t * If 'x_stop' is undefined, the plot will show the last 'x_range'\n\t * seconds until now and walking will work as expected (see below).\n\t *\n\t * If 'x_stop' is not undefined, it should be the number of seconds\n\t * since the epoch.\n\t *\n\t * - plot.start_walking()\n\t *\n\t * Scroll towards the future.\n\t *\n\t * - plot.stop_walking()\n\t *\n\t * Stop automatic scrolling.\n\t *\n\t * - plot.refresh()\n\t *\n\t * Draw the plot.\n\t *\n\t * - plot.resize()\n\t *\n\t * Resize the plot to fit into its DOM element.  This will\n\t * automatically refresh the plot.  You should also call this function\n\t * when 'element' has changed visibility as that might affect its\n\t * size.\n\t *\n\t * - plot.set_options(options)\n\t *\n\t * Set the global flot options.  You need to refresh the plot\n\t * afterwards.\n\t *\n\t * In addition to the flot options, you can also set 'setup_hook'\n\t * field to a function.  This function will be called between\n\t * flot.setData() and flot.draw() and can be used to adjust the axes\n\t * limits, for example.  It is called with the flot object as its only\n\t * parameter.\n\t *\n\t * - options = plot.get_options()\n\t *\n\t * Get the global flot options.  You can modify the object and then\n\t * pass it to set_options.  Don't forget to refresh the plot.\n\t *\n\t * - plot.reset(x_range, [x_stop])\n\t *\n\t * Resets the range of the plot.  All current sources are reinitialzed\n\t * but keep their current samples.\n\t *\n\t * - plot.destroy()\n\t *\n\t * Resets the plot to be empty.  The plot will disappear completely\n\t * from the DOM, including the grid.\n\t *\n\t * - series = plot.add_metrics_sum_series(desc, options)\n\t *\n\t * Adds a single series into the plot that is fed by a metrics\n\t * channel.  The series will have the given flot options.  The plot\n\t * will automatically refresh as data becomes available from the\n\t * channel.\n\t *\n\t * The single value for the series is computed by summing the values\n\t * for all metrics and all instances that are delivered by the\n\t * channel.\n\t *\n\t * The 'desc' argument determines the channel options:\n\t *\n\t *   metrics:         An array with the names of all metrics to monitor.\n\t *   units:           The common units string for all metrics.\n\t *   instances:       A optional list of instances to include.\n\t *   omit_instances:  A optional list of instances to omit.\n\t *   factor:          A factor to apply to the final sum of all samples.\n\t *\n\t * - series.options\n\t *\n\t * Direct access to the series options.  You need to refresh the plot\n\t * after changing it.\n\t *\n\t * - series.move_to_front()\n\t *\n\t * Move the series in front of all other series.  You need to refresh\n\t * the plot to see the effect immediately.\n\t *\n\t * - series.remove()\n\t *\n\t * Removes the series from its plot.  The plot will be refreshed.\n\t *\n\t * - $(series).on('hover', function (event, val) { ... })\n\t *\n\t * This event is triggered when the user hovers over the series ('val'\n\t * == true), or stops hovering over it ('val' == false).\n\t */\n\t\n\tplotter.plot = function plot(element, x_range_seconds, x_stop_seconds) {\n\t    var options = { };\n\t    var result = { };\n\t\n\t    var series = [ ];\n\t    var flot_data = [ ];\n\t    var flot = null;\n\t\n\t    var interval;\n\t    var grid;\n\t\n\t    function refresh_now() {\n\t        if (element.height() === 0 || element.width() === 0)\n\t            return;\n\t\n\t        if (flot === null)\n\t            flot = $.plot(element, flot_data, options);\n\t\n\t        flot.setData(flot_data);\n\t        var axes = flot.getAxes();\n\t\n\t        /* Walking and fetching samples are not synchronized, which\n\t         * means that a walk step might reveal a sample that hasn't\n\t         * been fetched yet.  To reduce flicker, we cut off one extra\n\t         * sample at the end.\n\t         */\n\t        axes.xaxis.options.min = grid.beg * interval;\n\t        axes.xaxis.options.max = (grid.end - 2) * interval;\n\t        if (options.setup_hook)\n\t            options.setup_hook(flot);\n\t\n\t        /* This makes sure that the axes are displayed even for an\n\t         * empty plot.\n\t         */\n\t        axes.xaxis.show = true;\n\t        axes.xaxis.used = true;\n\t        axes.yaxis.show = true;\n\t        axes.yaxis.used = true;\n\t\n\t        flot.setupGrid();\n\t        flot.draw();\n\t    }\n\t\n\t    var refresh_pending = false;\n\t\n\t    function refresh() {\n\t        if (!refresh_pending) {\n\t            refresh_pending = true;\n\t            window.setTimeout(function () {\n\t                refresh_pending = false;\n\t                refresh_now();\n\t            }, 0);\n\t        }\n\t    }\n\t\n\t    function start_walking() {\n\t        grid.walk();\n\t    }\n\t\n\t    function stop_walking() {\n\t        grid.move(grid.beg, grid.end);\n\t    }\n\t\n\t    var sync_suppressed = 0;\n\t\n\t    function reset(x_range_seconds, x_stop_seconds) {\n\t        if (flot)\n\t            flot.clearSelection(true);\n\t\n\t        // Fill the plot with about 1000 samples, but don't sample\n\t        // faster than once per second.\n\t        //\n\t        // TODO - do this based on the actual size of the plot.\n\t\n\t        interval = Math.ceil(x_range_seconds / 1000) * 1000;\n\t\n\t        var x_offset;\n\t        if (x_stop_seconds !== undefined)\n\t            x_offset = (new Date().getTime()) - x_stop_seconds * 1000;\n\t        else\n\t            x_offset = 0;\n\t\n\t        var beg = -Math.ceil((x_range_seconds * 1000 + x_offset) / interval);\n\t        var end = -Math.floor(x_offset / interval);\n\t\n\t        if (grid && grid.interval == interval) {\n\t            grid.move(beg, end);\n\t        } else {\n\t            if (grid)\n\t                grid.close();\n\t            grid = cockpit.grid(interval, beg, end);\n\t            sync_suppressed++;\n\t            for (var i = 0; i < series.length; i++)\n\t                series[i].reset();\n\t            sync_suppressed--;\n\t            sync();\n\t\n\t            $(grid).on('notify', function (event, index, count) {\n\t                refresh();\n\t            });\n\t        }\n\t    }\n\t\n\t    function sync() {\n\t        if (sync_suppressed === 0)\n\t            grid.sync();\n\t    }\n\t\n\t    function destroy() {\n\t        grid.close();\n\t        for (var i = 0; i < series.length; i++)\n\t            series[i].stop();\n\t\n\t        options = { };\n\t        series = [ ];\n\t        flot_data = [ ];\n\t        flot = null;\n\t        $(element).empty();\n\t        $(element).data(\"flot_data\", null);\n\t    }\n\t\n\t    function resize() {\n\t        if (element.height() === 0 || element.width() === 0)\n\t            return;\n\t        if (flot)\n\t            flot.resize();\n\t        refresh();\n\t    }\n\t\n\t    function set_options(opts) {\n\t        options = opts;\n\t        flot = null;\n\t    }\n\t\n\t    function get_options() {\n\t        return options;\n\t    }\n\t\n\t    function add_metrics_sum_series(desc, opts) {\n\t        var channel = null;\n\t\n\t        var self = {\n\t            options: opts,\n\t            move_to_front: move_to_front,\n\t            remove: remove\n\t        };\n\t\n\t        series.push({\n\t            stop: stop,\n\t            reset: reset_series,\n\t            hover_hit: hover_hit,\n\t            hover: hover\n\t        });\n\t\n\t        function stop() {\n\t            if (channel)\n\t                channel.close();\n\t        }\n\t\n\t        function add_series() {\n\t            flot_data.push(opts);\n\t        }\n\t\n\t        function remove_series() {\n\t            var pos = flot_data.indexOf(opts);\n\t            if (pos >= 0)\n\t                flot_data.splice(pos, 1);\n\t        }\n\t\n\t        function move_to_front() {\n\t            var pos = flot_data.indexOf(opts);\n\t            if (pos >= 0) {\n\t                flot_data.splice(pos, 1);\n\t                flot_data.push(opts);\n\t            }\n\t        }\n\t\n\t        function remove() {\n\t            stop();\n\t            remove_series();\n\t            refresh();\n\t        }\n\t\n\t        function build_metric(n) {\n\t            return { name: n, units: desc.units, derive: desc.derive };\n\t        }\n\t\n\t        var chanopts_list = [ ];\n\t\n\t        if (desc.direct) {\n\t            chanopts_list.push({ source: \"direct\",\n\t                                 archive_source: \"pcp-archive\",\n\t                                 metrics: desc.direct.map(build_metric),\n\t                                 instances: desc.instances,\n\t                                 \"omit-instances\": desc['omit-instances'],\n\t                                 host: desc.host\n\t                               });\n\t        }\n\t\n\t        if (desc.internal) {\n\t            chanopts_list.push({ source: \"internal\",\n\t                                 metrics: desc.internal.map(build_metric),\n\t                                 instances: desc.instances,\n\t                                 \"omit-instances\": desc['omit-instances'],\n\t                                 host: desc.host\n\t                               });\n\t        }\n\t\n\t        function flat_sum(val) {\n\t            var i, sum;\n\t\n\t            if (!val)\n\t                return 0;\n\t            if (val.length !== undefined) {\n\t                sum = 0;\n\t                for (i = 0; i < val.length; i++)\n\t                    sum += flat_sum(val[i]);\n\t                return sum;\n\t            }\n\t            return val;\n\t        }\n\t\n\t        function reset_series() {\n\t            if (channel)\n\t                channel.close();\n\t\n\t            channel = cockpit.metrics(interval, chanopts_list);\n\t\n\t            var metrics_row = grid.add(channel, [ ]);\n\t            var factor = desc.factor || 1;\n\t            opts.data = grid.add(function(row, x, n) {\n\t                for (var i = 0; i < n; i++)\n\t                    row[x + i] = [(grid.beg + x + i)*interval, flat_sum(metrics_row[x + i]) * factor];\n\t            });\n\t\n\t            function check_archives() {\n\t                if (channel.archives && !result.archives) {\n\t                    result.archives = true;\n\t                    $(result).triggerHandler(\"changed\");\n\t                }\n\t            }\n\t\n\t            $(channel).on('changed', check_archives);\n\t            check_archives();\n\t\n\t            sync();\n\t        }\n\t\n\t        function hover_hit(pos, item) {\n\t            return !!(item && (item.series.data == opts.data));\n\t        }\n\t\n\t        function hover(val) {\n\t            $(self).triggerHandler('hover', [ val ]);\n\t        }\n\t\n\t        reset_series();\n\t        add_series();\n\t\n\t        return self;\n\t    }\n\t\n\t    function add_metrics_stacked_instances_series(desc, opts) {\n\t        var channel = null;\n\t\n\t        var self = {\n\t            add_instance:    add_instance,\n\t            clear_instances: clear_instances\n\t        };\n\t\n\t        series.push({\n\t            stop: stop,\n\t            reset: reset_series,\n\t            hover_hit: hover_hit,\n\t            hover: hover\n\t        });\n\t\n\t        function stop() {\n\t            if (channel)\n\t                channel.close();\n\t        }\n\t\n\t        function build_metric(n) {\n\t            return { name: n, units: desc.units, derive: desc.derive };\n\t        }\n\t\n\t        var chanopts_list = [ ];\n\t\n\t        if (desc.direct) {\n\t            chanopts_list.push({ source: \"direct\",\n\t                                 archive_source: \"pcp-archive\",\n\t                                 metrics: [ build_metric(desc.direct) ],\n\t                                 metrics_path_names: [ \"a\" ],\n\t                                 instances: desc.instances,\n\t                                 \"omit-instances\": desc['omit-instances'],\n\t                                 host: desc.host\n\t                               });\n\t        }\n\t\n\t        if (desc.internal) {\n\t            chanopts_list.push({ source: \"internal\",\n\t                                 metrics: [ build_metric(desc.internal) ],\n\t                                 metrics_path_names: [ \"a\" ],\n\t                                 instances: desc.instances,\n\t                                 \"omit-instances\": desc['omit-instances'],\n\t                                 host: desc.host\n\t                               });\n\t        }\n\t\n\t        var instances = { };\n\t        var last_instance = null;\n\t\n\t        function reset_series() {\n\t            if (channel)\n\t                channel.close();\n\t\n\t            channel = cockpit.metrics(interval, chanopts_list);\n\t\n\t            function check_archives() {\n\t                if (channel.archives && !result.archives) {\n\t                    result.archives = true;\n\t                    $(result).triggerHandler(\"changed\");\n\t                }\n\t            }\n\t\n\t            $(channel).on('changed', check_archives);\n\t            check_archives();\n\t\n\t            sync_suppressed++;\n\t            for (var name in instances)\n\t                instances[name].reset();\n\t            sync_suppressed--;\n\t            sync();\n\t        }\n\t\n\t        function add_instance(name, selector) {\n\t            if (instances[name])\n\t                return;\n\t\n\t            var instance_data = $.extend({ selector: selector }, opts);\n\t            var factor = desc.factor || 1;\n\t            var threshold = desc.threshold || 0;\n\t            var metrics_row;\n\t\n\t            var last = last_instance;\n\t\n\t            function reset() {\n\t                metrics_row = grid.add(channel, [ \"a\", name ]);\n\t                instance_data.data = grid.add(function(row, x, n) {\n\t                    for (var i = 0; i < n; i++) {\n\t                        var value = (metrics_row[x + i] || 0)*factor;\n\t                        var ts = (grid.beg + x + i)*interval;\n\t                        var floor = 0;\n\t\n\t                        if (last) {\n\t                            if (last.data[x + i][1])\n\t                                floor = last.data[x + i][1];\n\t                            else\n\t                                floor = last.data[x + i][2];\n\t                        }\n\t\n\t                        if (Math.abs(value) > threshold) {\n\t                            row[x + i] = [ ts, floor + value, floor ];\n\t                            if (row[x + i - 1] && row[x + i - 1][1] === null)\n\t                                row[x + i - 1][1] = row[x + i - 1][2];\n\t                        } else {\n\t                            row[x + i] = [ ts, null, floor ];\n\t                            if (row[x + i - 1] && row[x + i - 1][1] !== null)\n\t                                row[x + i - 1][1] = row[x + i - 1][2];\n\t                        }\n\t                    }\n\t                });\n\t                sync();\n\t            }\n\t\n\t            function remove() {\n\t                grid.remove(metrics_row);\n\t                grid.remove(instance_data.data);\n\t                var pos = flot_data.indexOf(instance_data);\n\t                if (pos >= 0)\n\t                    flot_data.splice(pos, 1);\n\t            }\n\t\n\t            last_instance = instance_data;\n\t            instances[name] = instance_data;\n\t            instance_data.reset = reset;\n\t            instance_data.remove = remove;\n\t\n\t            reset();\n\t            flot_data.push(instance_data);\n\t        }\n\t\n\t        function clear_instances() {\n\t            for (var i in instances)\n\t                instances[i].remove();\n\t            instances = { };\n\t            last_instance = null;\n\t        }\n\t\n\t        function hover_hit(pos, item) {\n\t            var name, index;\n\t\n\t            if (!grid)\n\t                return false;\n\t\n\t            index = Math.round(pos.x/interval) - grid.beg;\n\t            if (index < 0)\n\t                index = 0;\n\t\n\t            for (name in instances) {\n\t                var d = instances[name].data;\n\t                if (d[index] && d[index][1] && d[index][2] <= pos.y && pos.y <= d[index][1])\n\t                    return instances[name].selector || name;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        function hover(val) {\n\t            $(self).triggerHandler('hover', [ val ]);\n\t        }\n\t\n\t        reset_series();\n\t        return self;\n\t    }\n\t\n\t    var cur_hover_series = null;\n\t    var cur_hover_val = false;\n\t\n\t    function hover(next_hover_series, next_hover_val) {\n\t        if (cur_hover_series != next_hover_series) {\n\t            if (cur_hover_series)\n\t                cur_hover_series.hover(false);\n\t            cur_hover_series = next_hover_series;\n\t            cur_hover_val = next_hover_val;\n\t            if (cur_hover_series)\n\t                cur_hover_series.hover(cur_hover_val);\n\t        } else if (cur_hover_val != next_hover_val) {\n\t            cur_hover_val = next_hover_val;\n\t            if (cur_hover_series)\n\t                cur_hover_series.hover(cur_hover_val);\n\t        }\n\t    }\n\t\n\t    function hover_on(event, pos, item) {\n\t        var next_hover_series = null;\n\t        var next_hover_val = false;\n\t        for (var i = 0; i < series.length; i++) {\n\t            next_hover_val = series[i].hover_hit(pos, item);\n\t            if (next_hover_val) {\n\t                next_hover_series = series[i];\n\t                break;\n\t            }\n\t        }\n\t\n\t        hover(next_hover_series, next_hover_val);\n\t    }\n\t\n\t    function hover_off(event) {\n\t        hover(null, false);\n\t    }\n\t\n\t    function selecting(event, ranges) {\n\t        if (ranges)\n\t            $(result).triggerHandler(\"zoomstart\", [ ]);\n\t    }\n\t\n\t    function selected(event, ranges) {\n\t        flot.clearSelection(true);\n\t        $(result).triggerHandler(\"zoom\", [ (ranges.xaxis.to - ranges.xaxis.from) / 1000, ranges.xaxis.to / 1000]);\n\t    }\n\t\n\t    $(element).on(\"plothover\", hover_on);\n\t    $(element).on(\"mouseleave\", hover_off);\n\t    $(element).on(\"plotselecting\", selecting);\n\t    $(element).on(\"plotselected\", selected);\n\t\n\t    // for testing\n\t    $(element).data(\"flot_data\", flot_data);\n\t\n\t    reset(x_range_seconds, x_stop_seconds);\n\t\n\t    $.extend(result, {\n\t        archives: false, /* true if any archive data found */\n\t        start_walking: start_walking,\n\t        stop_walking: stop_walking,\n\t        refresh: refresh,\n\t        reset: reset,\n\t        destroy: destroy,\n\t        resize: resize,\n\t        set_options: set_options,\n\t        get_options: get_options,\n\t        add_metrics_sum_series: add_metrics_sum_series,\n\t        add_metrics_stacked_instances_series: add_metrics_stacked_instances_series\n\t    });\n\t\n\t    return result;\n\t};\n\t\n\tvar plot_colors = [ \"#006bb4\",\n\t                    \"#008ff0\",\n\t                    \"#2daaff\",\n\t                    \"#69c2ff\",\n\t                    \"#a5daff\",\n\t                    \"#e1f3ff\",\n\t                    \"#00243c\",\n\t                    \"#004778\"\n\t                  ];\n\t\n\tplotter.plot_simple_template = function simple() {\n\t    return {\n\t        colors: plot_colors,\n\t        legend: { show: false },\n\t        series: { shadowSize: 0,\n\t            lines: {\n\t                lineWidth: 2.0,\n\t                fill: 0.4\n\t            }\n\t        },\n\t        xaxis: { tickLength: 0,\n\t                 mode: \"time\",\n\t                 tickFormatter: plotter.format_date_tick,\n\t                 minTickSize: [ 1, 'minute' ],\n\t                 reserveSpace: false\n\t               },\n\t        yaxis: { tickColor: \"#d1d1d1\",\n\t                 min: 0\n\t               },\n\t        /*\n\t         * The point radius influences the margin around the grid even if no points\n\t         * are plotted. We don't want any margin, so we set the radius to zero.\n\t         */\n\t        points: {\n\t            radius: 0\n\t        },\n\t        grid: {\n\t            borderWidth: 1,\n\t            aboveData: false,\n\t            color: \"black\",\n\t            borderColor: $.color.parse(\"black\").scale('a', 0.22).toString(),\n\t            labelMargin: 0\n\t        }\n\t    };\n\t};\n\t\n\tplotter.memory_ticks = function memory_ticks(opts) {\n\t    // Not more than 5 ticks, nicely rounded to powers of 2.\n\t    var size = Math.pow(2.0, Math.ceil(Math.log(opts.max/5)/Math.LN2));\n\t    var ticks = [ ];\n\t    for (var t = 0; t < opts.max; t += size)\n\t        ticks.push(t);\n\t    return ticks;\n\t};\n\t\n\tvar month_names = [\n\t    C_(\"month-name\", 'Jan'),\n\t    C_(\"month-name\", 'Feb'),\n\t    C_(\"month-name\", 'Mar'),\n\t    C_(\"month-name\", 'Apr'),\n\t    C_(\"month-name\", 'May'),\n\t    C_(\"month-name\", 'Jun'),\n\t    C_(\"month-name\", 'Jul'),\n\t    C_(\"month-name\", 'Aug'),\n\t    C_(\"month-name\", 'Sep'),\n\t    C_(\"month-name\", 'Oct'),\n\t    C_(\"month-name\", 'Nov'),\n\t    C_(\"month-name\", 'Dec')\n\t];\n\t\n\tplotter.format_date_tick = function format_date_tick(val, axis) {\n\t    function pad(n) {\n\t        var str = n.toFixed();\n\t        if(str.length == 1)\n\t            str = '0' + str;\n\t        return str;\n\t    }\n\t\n\t    var year_index = 0;\n\t    var month_index = 1;\n\t    var day_index = 2;\n\t    var hour_minute_index = 3;\n\t\n\t    var begin;\n\t    var end;\n\t\n\t    // Determine the smallest unit according to the steps from one\n\t    // tick to the next.\n\t\n\t    var size = axis.tickSize[1];\n\t    if (size == \"minute\" || size == \"hour\")\n\t        end = hour_minute_index;\n\t    else if (size == \"day\")\n\t        end = day_index;\n\t    else if (size == \"month\")\n\t        end = month_index;\n\t    else\n\t        end = year_index;\n\t\n\t    // Determine biggest unit according to how far away the left edge\n\t    // of the graph is from 'now'.\n\t\n\t    var n = new Date();\n\t    var l = new Date(axis.min);\n\t\n\t    begin = year_index;\n\t    if (l.getFullYear() == n.getFullYear()) {\n\t        begin = month_index;\n\t        if (l.getMonth() == n.getMonth()) {\n\t            begin = day_index;\n\t            if (l.getDate() == n.getDate())\n\t                begin = hour_minute_index;\n\t        }\n\t    }\n\t\n\t    // Adjust so that it all makes sense\n\t\n\t    if (begin > end)\n\t        begin = end;\n\t    if (begin == day_index)\n\t        begin = month_index;\n\t\n\t    // And render it\n\t\n\t    var d = new Date(val);\n\t    var label = \" \";\n\t\n\t    if (year_index >= begin && year_index <= end)\n\t        label += d.getFullYear().toFixed() + \" \";\n\t    if (month_index >= begin && month_index <= end)\n\t        label += month_names[d.getMonth()] + \" \";\n\t    if (day_index >= begin && day_index <= end)\n\t        label += d.getDate().toFixed() + \" \";\n\t    if (hour_minute_index >= begin && hour_minute_index <= end)\n\t        label += pad(d.getHours()) + ':' + pad(d.getMinutes()) + \" \";\n\t\n\t    return label.substr(0, label.length-1);\n\t};\n\t\n\tplotter.bytes_tick_unit = function bytes_tick_unit(axis) {\n\t    return cockpit.format_bytes(axis.max, 1024, true)[1];\n\t};\n\t\n\tplotter.format_bytes_tick_no_unit = function format_bytes_tick_no_unit(val, axis) {\n\t    return cockpit.format_bytes(val, plotter.bytes_tick_unit(axis), true)[0];\n\t};\n\t\n\tplotter.format_bytes_tick = function format_bytes_tick(val, axis) {\n\t    return cockpit.format_bytes(val, 1024);\n\t};\n\t\n\tplotter.bytes_per_sec_tick_unit = function bytes_per_sec_tick_unit(axis) {\n\t    return cockpit.format_bytes_per_sec(axis.max, 1024, true)[1];\n\t};\n\t\n\tplotter.format_bytes_per_sec_tick_no_unit = function format_bytes_per_sec_tick_no_unit(val, axis) {\n\t    return cockpit.format_bytes_per_sec(val, plotter.bytes_per_sec_tick_unit(axis), true)[0];\n\t};\n\t\n\tplotter.format_bytes_per_sec_tick = function format_bytes_per_sec_tick(val, axis) {\n\t    return cockpit.format_bytes_per_sec(val, 1024);\n\t};\n\t\n\tplotter.bits_per_sec_tick_unit = function bits_per_sec_tick_unit(axis) {\n\t    return cockpit.format_bits_per_sec(axis.max*8, 1000, true)[1];\n\t};\n\t\n\tplotter.format_bits_per_sec_tick_no_unit = function format_bits_per_sec_tick_no_tick(val, axis) {\n\t    return cockpit.format_bits_per_sec(val*8, plotter.bits_per_sec_tick_unit(axis), true)[0];\n\t};\n\t\n\tplotter.format_bits_per_sec_tick = function format_bits_per_sec_tick(val, axis) {\n\t    return cockpit.format_bits_per_sec(val*8, 1000);\n\t};\n\t\n\tplotter.setup_plot_controls = function setup_plot_controls(container, element, plots) {\n\t\n\t    var plot_min_x_range = 5*60;\n\t    var plot_zoom_steps = [ 5*60,  60*60, 6*60*60, 24*60*60, 7*24*60*60, 30*24*60*60, 365*24*60*60 ];\n\t\n\t    var plot_x_range = 5*60;\n\t    var plot_x_stop;\n\t    var zoom_history = [ ];\n\t\n\t    element.find('[data-range]').click(function () {\n\t        zoom_history = [ ];\n\t        plot_x_range = parseInt($(this).attr('data-range'), 10);\n\t        plot_reset();\n\t    });\n\t\n\t    element.find('[data-action=\"goto-now\"]').click(function () {\n\t        plot_x_stop = undefined;\n\t        plot_reset();\n\t    });\n\t\n\t    element.find('[data-action=\"scroll-left\"]').click(function () {\n\t        var step = plot_x_range / 10;\n\t        if (plot_x_stop === undefined)\n\t            plot_x_stop = (new Date()).getTime() / 1000;\n\t        plot_x_stop -= step;\n\t        plot_reset();\n\t    });\n\t\n\t    element.find('[data-action=\"scroll-right\"]').click(function () {\n\t        var step = plot_x_range / 10;\n\t        if (plot_x_stop !== undefined) {\n\t            plot_x_stop += step;\n\t            plot_reset();\n\t        }\n\t    });\n\t\n\t    element.find('[data-action=\"zoom-out\"]').click(function () {\n\t        zoom_plot_out();\n\t    });\n\t\n\t    function zoom_plot_start() {\n\t        if (plot_x_stop === undefined) {\n\t            plots.forEach(function (p) {\n\t                p.stop_walking();\n\t            });\n\t            plot_x_stop = (new Date()).getTime() / 1000;\n\t            update_plot_buttons();\n\t        }\n\t    }\n\t\n\t    function zoom_plot_in(x_range, x_stop) {\n\t        zoom_history.push(plot_x_range);\n\t        plot_x_range = x_range;\n\t        plot_x_stop = x_stop;\n\t        plot_reset();\n\t    }\n\t\n\t    function zoom_plot_out() {\n\t        var r = zoom_history.pop();\n\t        if (r === undefined) {\n\t            var i;\n\t            for (i = 0; i < plot_zoom_steps.length-1; i++) {\n\t                if (plot_zoom_steps[i] > plot_x_range)\n\t                    break;\n\t            }\n\t            r = plot_zoom_steps[i];\n\t        }\n\t        if (plot_x_stop !== undefined)\n\t            plot_x_stop += (r - plot_x_range)/2;\n\t        plot_x_range = r;\n\t        plot_reset();\n\t    }\n\t\n\t    function format_range(seconds) {\n\t        var n;\n\t        if (seconds >= 365*24*60*60) {\n\t            n = Math.ceil(seconds / (365*24*60*60));\n\t            return cockpit.format(cockpit.ngettext(\"$0 year\", \"$0 years\", n), n);\n\t        } else if (seconds >= 30*24*60*60) {\n\t            n = Math.ceil(seconds / (30*24*60*60));\n\t            return cockpit.format(cockpit.ngettext(\"$0 month\", \"$0 months\", n), n);\n\t        } else if (seconds >= 7*24*60*60) {\n\t            n = Math.ceil(seconds / (7*24*60*60));\n\t            return cockpit.format(cockpit.ngettext(\"$0 week\", \"$0 weeks\", n), n);\n\t        } else if (seconds >= 24*60*60) {\n\t            n = Math.ceil(seconds / (24*60*60));\n\t            return cockpit.format(cockpit.ngettext(\"$0 day\", \"$0 days\", n), n);\n\t        } else if (seconds >= 60*60) {\n\t            n = Math.ceil(seconds / (60*60));\n\t            return cockpit.format(cockpit.ngettext(\"$0 hour\", \"$0 hours\", n), n);\n\t        } else {\n\t            n = Math.ceil(seconds / 60);\n\t            return cockpit.format(cockpit.ngettext(\"$0 minute\", \"$0 minutes\", n), n);\n\t        }\n\t    }\n\t\n\t    function update_plot_buttons() {\n\t        element.find('[data-action=\"scroll-right\"]')\n\t            .attr('disabled', plot_x_stop === undefined);\n\t        element.find('[data-action=\"zoom-out\"]')\n\t            .attr('disabled', plot_x_range >= plot_zoom_steps[plot_zoom_steps.length-1]);\n\t    }\n\t\n\t    function update_selection_zooming() {\n\t        var mode;\n\t\n\t        if (container.hasClass('show-zoom-controls') && plot_x_range > plot_min_x_range) {\n\t            container.addClass('show-zoom-cursor');\n\t            mode = \"x\";\n\t        } else {\n\t            container.removeClass('show-zoom-cursor');\n\t            mode = null;\n\t        }\n\t\n\t        plots.forEach(function (p) {\n\t            var options = p.get_options();\n\t            if (!options.selection || options.selection.mode != mode) {\n\t                options.selection = { mode: mode, color: \"#d4edfa\" };\n\t                p.set_options(options);\n\t                p.refresh();\n\t            }\n\t        });\n\t    }\n\t\n\t    function plot_reset() {\n\t        if (plot_x_range < plot_min_x_range) {\n\t            plot_x_stop += (plot_min_x_range - plot_x_range)/2;\n\t            plot_x_range = plot_min_x_range;\n\t        }\n\t        if (plot_x_stop >= (new Date()).getTime() / 1000 - 10)\n\t            plot_x_stop = undefined;\n\t\n\t        element.find('.dropdown-toggle span:first-child').text(format_range(plot_x_range));\n\t\n\t        plots.forEach(function (p) {\n\t            p.stop_walking();\n\t            p.reset(plot_x_range, plot_x_stop);\n\t            p.refresh();\n\t            if (plot_x_stop === undefined)\n\t                p.start_walking();\n\t\n\t            function check_archives() {\n\t                if (p.archives) {\n\t                    container.addClass('show-zoom-controls');\n\t                    update_selection_zooming();\n\t                }\n\t            }\n\t\n\t            $(p).on(\"changed\", check_archives);\n\t            check_archives();\n\t        });\n\t\n\t        update_plot_buttons();\n\t        update_selection_zooming();\n\t    }\n\t\n\t    function reset(p) {\n\t        if (p === undefined)\n\t            p = [ ];\n\t        plots = p;\n\t        plots.forEach(function (p) {\n\t            $(p).on(\"zoomstart\", function (event) { zoom_plot_start(); });\n\t            $(p).on(\"zoom\", function (event, x_range, x_stop) { zoom_plot_in(x_range, x_stop); });\n\t        });\n\t        plot_reset();\n\t    }\n\t\n\t    reset(plots);\n\t\n\t    return {\n\t        reset: reset\n\t    };\n\t};\n\t\n\tfunction setup_plot(graph_id, grid, data, user_options) {\n\t    var options = {\n\t        colors: [ \"#0099d3\" ],\n\t        legend: { show: false },\n\t        series: { shadowSize: 0,\n\t                  lines: { lineWidth: 0.0,\n\t                           fill: 1.0\n\t                         }\n\t                },\n\t        xaxis: { tickFormatter: function() { return \"\"; } },\n\t        yaxis: { tickFormatter: function() { return \"\"; } },\n\t        // The point radius influences\n\t        // the margin around the grid\n\t        // even if no points are plotted.\n\t        // We don't want any margin, so\n\t        // we set the radius to zero.\n\t        points: { radius: 0 },\n\t        grid: { borderWidth: 1,\n\t                aboveData: true,\n\t                color: \"black\",\n\t                borderColor: $.color.parse(\"black\").scale('a', 0.22).toString(),\n\t                labelMargin: 0\n\t              }\n\t    };\n\t\n\t    var plot;\n\t    var running = false;\n\t    var self;\n\t\n\t    $.extend(true, options, user_options);\n\t\n\t    // We put the plot inside its own div so that we can give that div\n\t    // a fixed size which only changes when we can also immediately\n\t    // call plot.resize().  Otherwise, the labels and legends briefly\n\t    // get out of sync during resizing.\n\t\n\t    var outer_div = $(graph_id);\n\t    var inner_div = $('<div/>');\n\t    outer_div.empty();\n\t    outer_div.append(inner_div);\n\t\n\t    function sync_divs ()\n\t    {\n\t        inner_div.width(outer_div.width());\n\t        inner_div.height(outer_div.height());\n\t    }\n\t\n\t    // Updating flot options is tricky and somewhat implementation\n\t    // defined.  Different options needs different approaches.  So we\n\t    // just have very specific functions for changing specific options\n\t    // until a pattern emerges.\n\t\n\t    function set_yaxis_max (max) {\n\t        if (plot) {\n\t            plot.getAxes().yaxis.options.max = max;\n\t            refresh ();\n\t        } else {\n\t            options.yaxis.max = max;\n\t        }\n\t    }\n\t\n\t    function start ()\n\t    {\n\t        running = true;\n\t        maybe_start();\n\t    }\n\t\n\t    function maybe_start() {\n\t        if (running && outer_div.width() !== 0 && outer_div.height() !== 0) {\n\t            if (!plot) {\n\t                sync_divs ();\n\t                plot = $.plot(inner_div, data, options);\n\t            } else\n\t                resize();\n\t        }\n\t    }\n\t\n\t    function stop ()\n\t    {\n\t        running = false;\n\t    }\n\t\n\t    function refresh() {\n\t        if (plot && running) {\n\t            plot.setData(data);\n\t            if (user_options.setup_hook)\n\t                user_options.setup_hook(plot);\n\t            plot.setupGrid();\n\t            plot.draw();\n\t        }\n\t    }\n\t\n\t    function resize() {\n\t        if (plot && running) {\n\t            sync_divs ();\n\t            if (inner_div.width() > 0 && inner_div.height() > 0)\n\t                plot.resize();\n\t            refresh();\n\t        }\n\t    }\n\t\n\t    function destroy () {\n\t        $(self).trigger('destroyed');\n\t        $(window).off('resize', resize);\n\t        $(outer_div).empty();\n\t        plot = null;\n\t    }\n\t\n\t    $(grid).on('notify', refresh);\n\t    $(window).on('resize', resize);\n\t    maybe_start();\n\t\n\t    self = { start: start, stop: stop,\n\t             resize: resize, element: inner_div[0],\n\t             set_yaxis_max: set_yaxis_max,\n\t             destroy: destroy\n\t           };\n\t    return self;\n\t}\n\t\n\tplotter.setup_complicated_plot = function setup_complicated_plot(graph_id, grid, series, options) {\n\t    function basic_flot_row(grid, input) {\n\t        return grid.add(function(row, x, n) {\n\t            for (var i = 0; i < n; i++)\n\t                row[x + i] = [i, input[x + i] || 0];\n\t        });\n\t    }\n\t\n\t    function stacked_flot_row(grid, input, last) {\n\t        return grid.add(function(row, x, n) {\n\t            var i, l, floor, val;\n\t            for (i = 0; i < n; i++) {\n\t                floor = 0;\n\t                if (last) {\n\t                    l = last[x + i];\n\t                    floor = l ? l[1] : 0;\n\t                }\n\t                val = (input[x + i] || 0);\n\t                row[x + i] = [i, val + floor, floor];\n\t            }\n\t        });\n\t    }\n\t\n\t    /* All the data row setup happens now */\n\t    var last = null;\n\t    series.forEach(function(ser, i) {\n\t        if (options.x_rh_stack_graphs)\n\t            ser.data = stacked_flot_row(grid, ser.row, last);\n\t        else\n\t            ser.data = basic_flot_row(grid, ser.row);\n\t        last = ser.data;\n\t    });\n\t    return setup_plot(graph_id, grid, series, options);\n\t};\n\t\n\tmodule.exports = plotter;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t/* Javascript plotting library for jQuery, version 0.8.3.\n\t\n\tCopyright (c) 2007-2014 IOLA and Ole Laursen.\n\tLicensed under the MIT license.\n\t\n\t*/\n\t\n\t// first an inline dependency, jquery.colorhelpers.js, we inline it here\n\t// for convenience\n\t\n\t/* Plugin for jQuery for working with colors.\n\t *\n\t * Version 1.1.\n\t *\n\t * Inspiration from jQuery color animation plugin by John Resig.\n\t *\n\t * Released under the MIT license by Ole Laursen, October 2009.\n\t *\n\t * Examples:\n\t *\n\t *   $.color.parse(\"#fff\").scale('rgb', 0.25).add('a', -0.5).toString()\n\t *   var c = $.color.extract($(\"#mydiv\"), 'background-color');\n\t *   console.log(c.r, c.g, c.b, c.a);\n\t *   $.color.make(100, 50, 25, 0.4).toString() // returns \"rgba(100,50,25,0.4)\"\n\t *\n\t * Note that .scale() and .add() return the same modified object\n\t * instead of making a new one.\n\t *\n\t * V. 1.1: Fix error handling so e.g. parsing an empty string does\n\t * produce a color rather than just crashing.\n\t */\n\t(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return\"rgb(\"+[o.r,o.g,o.b].join(\",\")+\")\"}else{return\"rgba(\"+[o.r,o.g,o.b,o.a].join(\",\")+\")\"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=\"\"&&c!=\"transparent\")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),\"body\"));if(c==\"rgba(0, 0, 0, 0)\")c=\"transparent\";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name==\"transparent\")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);\n\t\n\t// the actual Flot code\n\t(function($) {\n\t\n\t\t// Cache the prototype hasOwnProperty for faster access\n\t\n\t\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\t\n\t    // A shim to provide 'detach' to jQuery versions prior to 1.4.  Using a DOM\n\t    // operation produces the same effect as detach, i.e. removing the element\n\t    // without touching its jQuery data.\n\t\n\t    // Do not merge this into Flot 0.9, since it requires jQuery 1.4.4+.\n\t\n\t    if (!$.fn.detach) {\n\t        $.fn.detach = function() {\n\t            return this.each(function() {\n\t                if (this.parentNode) {\n\t                    this.parentNode.removeChild( this );\n\t                }\n\t            });\n\t        };\n\t    }\n\t\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t// The Canvas object is a wrapper around an HTML5 <canvas> tag.\n\t\t//\n\t\t// @constructor\n\t\t// @param {string} cls List of classes to apply to the canvas.\n\t\t// @param {element} container Element onto which to append the canvas.\n\t\t//\n\t\t// Requiring a container is a little iffy, but unfortunately canvas\n\t\t// operations don't work unless the canvas is attached to the DOM.\n\t\n\t\tfunction Canvas(cls, container) {\n\t\n\t\t\tvar element = container.children(\".\" + cls)[0];\n\t\n\t\t\tif (element == null) {\n\t\n\t\t\t\telement = document.createElement(\"canvas\");\n\t\t\t\telement.className = cls;\n\t\n\t\t\t\t$(element).css({ direction: \"ltr\", position: \"absolute\", left: 0, top: 0 })\n\t\t\t\t\t.appendTo(container);\n\t\n\t\t\t\t// If HTML5 Canvas isn't available, fall back to [Ex|Flash]canvas\n\t\n\t\t\t\tif (!element.getContext) {\n\t\t\t\t\tif (window.G_vmlCanvasManager) {\n\t\t\t\t\t\telement = window.G_vmlCanvasManager.initElement(element);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(\"Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tthis.element = element;\n\t\n\t\t\tvar context = this.context = element.getContext(\"2d\");\n\t\n\t\t\t// Determine the screen's ratio of physical to device-independent\n\t\t\t// pixels.  This is the ratio between the canvas width that the browser\n\t\t\t// advertises and the number of pixels actually present in that space.\n\t\n\t\t\t// The iPhone 4, for example, has a device-independent width of 320px,\n\t\t\t// but its screen is actually 640px wide.  It therefore has a pixel\n\t\t\t// ratio of 2, while most normal devices have a ratio of 1.\n\t\n\t\t\tvar devicePixelRatio = window.devicePixelRatio || 1,\n\t\t\t\tbackingStoreRatio =\n\t\t\t\t\tcontext.webkitBackingStorePixelRatio ||\n\t\t\t\t\tcontext.mozBackingStorePixelRatio ||\n\t\t\t\t\tcontext.msBackingStorePixelRatio ||\n\t\t\t\t\tcontext.oBackingStorePixelRatio ||\n\t\t\t\t\tcontext.backingStorePixelRatio || 1;\n\t\n\t\t\tthis.pixelRatio = devicePixelRatio / backingStoreRatio;\n\t\n\t\t\t// Size the canvas to match the internal dimensions of its container\n\t\n\t\t\tthis.resize(container.width(), container.height());\n\t\n\t\t\t// Collection of HTML div layers for text overlaid onto the canvas\n\t\n\t\t\tthis.textContainer = null;\n\t\t\tthis.text = {};\n\t\n\t\t\t// Cache of text fragments and metrics, so we can avoid expensively\n\t\t\t// re-calculating them when the plot is re-rendered in a loop.\n\t\n\t\t\tthis._textCache = {};\n\t\t}\n\t\n\t\t// Resizes the canvas to the given dimensions.\n\t\t//\n\t\t// @param {number} width New width of the canvas, in pixels.\n\t\t// @param {number} width New height of the canvas, in pixels.\n\t\n\t\tCanvas.prototype.resize = function(width, height) {\n\t\n\t\t\tif (width <= 0 || height <= 0) {\n\t\t\t\tthrow new Error(\"Invalid dimensions for plot, width = \" + width + \", height = \" + height);\n\t\t\t}\n\t\n\t\t\tvar element = this.element,\n\t\t\t\tcontext = this.context,\n\t\t\t\tpixelRatio = this.pixelRatio;\n\t\n\t\t\t// Resize the canvas, increasing its density based on the display's\n\t\t\t// pixel ratio; basically giving it more pixels without increasing the\n\t\t\t// size of its element, to take advantage of the fact that retina\n\t\t\t// displays have that many more pixels in the same advertised space.\n\t\n\t\t\t// Resizing should reset the state (excanvas seems to be buggy though)\n\t\n\t\t\tif (this.width != width) {\n\t\t\t\telement.width = width * pixelRatio;\n\t\t\t\telement.style.width = width + \"px\";\n\t\t\t\tthis.width = width;\n\t\t\t}\n\t\n\t\t\tif (this.height != height) {\n\t\t\t\telement.height = height * pixelRatio;\n\t\t\t\telement.style.height = height + \"px\";\n\t\t\t\tthis.height = height;\n\t\t\t}\n\t\n\t\t\t// Save the context, so we can reset in case we get replotted.  The\n\t\t\t// restore ensure that we're really back at the initial state, and\n\t\t\t// should be safe even if we haven't saved the initial state yet.\n\t\n\t\t\tcontext.restore();\n\t\t\tcontext.save();\n\t\n\t\t\t// Scale the coordinate space to match the display density; so even though we\n\t\t\t// may have twice as many pixels, we still want lines and other drawing to\n\t\t\t// appear at the same size; the extra pixels will just make them crisper.\n\t\n\t\t\tcontext.scale(pixelRatio, pixelRatio);\n\t\t};\n\t\n\t\t// Clears the entire canvas area, not including any overlaid HTML text\n\t\n\t\tCanvas.prototype.clear = function() {\n\t\t\tthis.context.clearRect(0, 0, this.width, this.height);\n\t\t};\n\t\n\t\t// Finishes rendering the canvas, including managing the text overlay.\n\t\n\t\tCanvas.prototype.render = function() {\n\t\n\t\t\tvar cache = this._textCache;\n\t\n\t\t\t// For each text layer, add elements marked as active that haven't\n\t\t\t// already been rendered, and remove those that are no longer active.\n\t\n\t\t\tfor (var layerKey in cache) {\n\t\t\t\tif (hasOwnProperty.call(cache, layerKey)) {\n\t\n\t\t\t\t\tvar layer = this.getTextLayer(layerKey),\n\t\t\t\t\t\tlayerCache = cache[layerKey];\n\t\n\t\t\t\t\tlayer.hide();\n\t\n\t\t\t\t\tfor (var styleKey in layerCache) {\n\t\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\n\t\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\n\t\t\t\t\t\t\tfor (var key in styleCache) {\n\t\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\n\t\n\t\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\n\t\n\t\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\t\t\t\t\t\tif (position.active) {\n\t\t\t\t\t\t\t\t\t\t\tif (!position.rendered) {\n\t\t\t\t\t\t\t\t\t\t\t\tlayer.append(position.element);\n\t\t\t\t\t\t\t\t\t\t\t\tposition.rendered = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tpositions.splice(i--, 1);\n\t\t\t\t\t\t\t\t\t\t\tif (position.rendered) {\n\t\t\t\t\t\t\t\t\t\t\t\tposition.element.detach();\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\tif (positions.length == 0) {\n\t\t\t\t\t\t\t\t\t\tdelete styleCache[key];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tlayer.show();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t// Creates (if necessary) and returns the text overlay container.\n\t\t//\n\t\t// @param {string} classes String of space-separated CSS classes used to\n\t\t//     uniquely identify the text layer.\n\t\t// @return {object} The jQuery-wrapped text-layer div.\n\t\n\t\tCanvas.prototype.getTextLayer = function(classes) {\n\t\n\t\t\tvar layer = this.text[classes];\n\t\n\t\t\t// Create the text layer if it doesn't exist\n\t\n\t\t\tif (layer == null) {\n\t\n\t\t\t\t// Create the text layer container, if it doesn't exist\n\t\n\t\t\t\tif (this.textContainer == null) {\n\t\t\t\t\tthis.textContainer = $(\"<div class='flot-text'></div>\")\n\t\t\t\t\t\t.css({\n\t\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\t\t'font-size': \"smaller\",\n\t\t\t\t\t\t\tcolor: \"#545454\"\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.insertAfter(this.element);\n\t\t\t\t}\n\t\n\t\t\t\tlayer = this.text[classes] = $(\"<div></div>\")\n\t\t\t\t\t.addClass(classes)\n\t\t\t\t\t.css({\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tright: 0\n\t\t\t\t\t})\n\t\t\t\t\t.appendTo(this.textContainer);\n\t\t\t}\n\t\n\t\t\treturn layer;\n\t\t};\n\t\n\t\t// Creates (if necessary) and returns a text info object.\n\t\t//\n\t\t// The object looks like this:\n\t\t//\n\t\t// {\n\t\t//     width: Width of the text's wrapper div.\n\t\t//     height: Height of the text's wrapper div.\n\t\t//     element: The jQuery-wrapped HTML div containing the text.\n\t\t//     positions: Array of positions at which this text is drawn.\n\t\t// }\n\t\t//\n\t\t// The positions array contains objects that look like this:\n\t\t//\n\t\t// {\n\t\t//     active: Flag indicating whether the text should be visible.\n\t\t//     rendered: Flag indicating whether the text is currently visible.\n\t\t//     element: The jQuery-wrapped HTML div containing the text.\n\t\t//     x: X coordinate at which to draw the text.\n\t\t//     y: Y coordinate at which to draw the text.\n\t\t// }\n\t\t//\n\t\t// Each position after the first receives a clone of the original element.\n\t\t//\n\t\t// The idea is that that the width, height, and general 'identity' of the\n\t\t// text is constant no matter where it is placed; the placements are a\n\t\t// secondary property.\n\t\t//\n\t\t// Canvas maintains a cache of recently-used text info objects; getTextInfo\n\t\t// either returns the cached element or creates a new entry.\n\t\t//\n\t\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t\t//     identifying the layer containing this text.\n\t\t// @param {string} text Text string to retrieve info for.\n\t\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t\t//     classes or a font-spec object, defining the text's font and style.\n\t\t// @param {number=} angle Angle at which to rotate the text, in degrees.\n\t\t//     Angle is currently unused, it will be implemented in the future.\n\t\t// @param {number=} width Maximum width of the text before it wraps.\n\t\t// @return {object} a text info object.\n\t\n\t\tCanvas.prototype.getTextInfo = function(layer, text, font, angle, width) {\n\t\n\t\t\tvar textStyle, layerCache, styleCache, info;\n\t\n\t\t\t// Cast the value to a string, in case we were given a number or such\n\t\n\t\t\ttext = \"\" + text;\n\t\n\t\t\t// If the font is a font-spec object, generate a CSS font definition\n\t\n\t\t\tif (typeof font === \"object\") {\n\t\t\t\ttextStyle = font.style + \" \" + font.variant + \" \" + font.weight + \" \" + font.size + \"px/\" + font.lineHeight + \"px \" + font.family;\n\t\t\t} else {\n\t\t\t\ttextStyle = font;\n\t\t\t}\n\t\n\t\t\t// Retrieve (or create) the cache for the text's layer and styles\n\t\n\t\t\tlayerCache = this._textCache[layer];\n\t\n\t\t\tif (layerCache == null) {\n\t\t\t\tlayerCache = this._textCache[layer] = {};\n\t\t\t}\n\t\n\t\t\tstyleCache = layerCache[textStyle];\n\t\n\t\t\tif (styleCache == null) {\n\t\t\t\tstyleCache = layerCache[textStyle] = {};\n\t\t\t}\n\t\n\t\t\tinfo = styleCache[text];\n\t\n\t\t\t// If we can't find a matching element in our cache, create a new one\n\t\n\t\t\tif (info == null) {\n\t\n\t\t\t\tvar element = $(\"<div></div>\").html(text)\n\t\t\t\t\t.css({\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\t'max-width': width,\n\t\t\t\t\t\ttop: -9999\n\t\t\t\t\t})\n\t\t\t\t\t.appendTo(this.getTextLayer(layer));\n\t\n\t\t\t\tif (typeof font === \"object\") {\n\t\t\t\t\telement.css({\n\t\t\t\t\t\tfont: textStyle,\n\t\t\t\t\t\tcolor: font.color\n\t\t\t\t\t});\n\t\t\t\t} else if (typeof font === \"string\") {\n\t\t\t\t\telement.addClass(font);\n\t\t\t\t}\n\t\n\t\t\t\tinfo = styleCache[text] = {\n\t\t\t\t\twidth: element.outerWidth(true),\n\t\t\t\t\theight: element.outerHeight(true),\n\t\t\t\t\telement: element,\n\t\t\t\t\tpositions: []\n\t\t\t\t};\n\t\n\t\t\t\telement.detach();\n\t\t\t}\n\t\n\t\t\treturn info;\n\t\t};\n\t\n\t\t// Adds a text string to the canvas text overlay.\n\t\t//\n\t\t// The text isn't drawn immediately; it is marked as rendering, which will\n\t\t// result in its addition to the canvas on the next render pass.\n\t\t//\n\t\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t\t//     identifying the layer containing this text.\n\t\t// @param {number} x X coordinate at which to draw the text.\n\t\t// @param {number} y Y coordinate at which to draw the text.\n\t\t// @param {string} text Text string to draw.\n\t\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t\t//     classes or a font-spec object, defining the text's font and style.\n\t\t// @param {number=} angle Angle at which to rotate the text, in degrees.\n\t\t//     Angle is currently unused, it will be implemented in the future.\n\t\t// @param {number=} width Maximum width of the text before it wraps.\n\t\t// @param {string=} halign Horizontal alignment of the text; either \"left\",\n\t\t//     \"center\" or \"right\".\n\t\t// @param {string=} valign Vertical alignment of the text; either \"top\",\n\t\t//     \"middle\" or \"bottom\".\n\t\n\t\tCanvas.prototype.addText = function(layer, x, y, text, font, angle, width, halign, valign) {\n\t\n\t\t\tvar info = this.getTextInfo(layer, text, font, angle, width),\n\t\t\t\tpositions = info.positions;\n\t\n\t\t\t// Tweak the div's position to match the text's alignment\n\t\n\t\t\tif (halign == \"center\") {\n\t\t\t\tx -= info.width / 2;\n\t\t\t} else if (halign == \"right\") {\n\t\t\t\tx -= info.width;\n\t\t\t}\n\t\n\t\t\tif (valign == \"middle\") {\n\t\t\t\ty -= info.height / 2;\n\t\t\t} else if (valign == \"bottom\") {\n\t\t\t\ty -= info.height;\n\t\t\t}\n\t\n\t\t\t// Determine whether this text already exists at this position.\n\t\t\t// If so, mark it for inclusion in the next render pass.\n\t\n\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\tif (position.x == x && position.y == y) {\n\t\t\t\t\tposition.active = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// If the text doesn't exist at this position, create a new entry\n\t\n\t\t\t// For the very first position we'll re-use the original element,\n\t\t\t// while for subsequent ones we'll clone it.\n\t\n\t\t\tposition = {\n\t\t\t\tactive: true,\n\t\t\t\trendered: false,\n\t\t\t\telement: positions.length ? info.element.clone() : info.element,\n\t\t\t\tx: x,\n\t\t\t\ty: y\n\t\t\t};\n\t\n\t\t\tpositions.push(position);\n\t\n\t\t\t// Move the element to its final position within the container\n\t\n\t\t\tposition.element.css({\n\t\t\t\ttop: Math.round(y),\n\t\t\t\tleft: Math.round(x),\n\t\t\t\t'text-align': halign\t// In case the text wraps\n\t\t\t});\n\t\t};\n\t\n\t\t// Removes one or more text strings from the canvas text overlay.\n\t\t//\n\t\t// If no parameters are given, all text within the layer is removed.\n\t\t//\n\t\t// Note that the text is not immediately removed; it is simply marked as\n\t\t// inactive, which will result in its removal on the next render pass.\n\t\t// This avoids the performance penalty for 'clear and redraw' behavior,\n\t\t// where we potentially get rid of all text on a layer, but will likely\n\t\t// add back most or all of it later, as when redrawing axes, for example.\n\t\t//\n\t\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t\t//     identifying the layer containing this text.\n\t\t// @param {number=} x X coordinate of the text.\n\t\t// @param {number=} y Y coordinate of the text.\n\t\t// @param {string=} text Text string to remove.\n\t\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t\t//     classes or a font-spec object, defining the text's font and style.\n\t\t// @param {number=} angle Angle at which the text is rotated, in degrees.\n\t\t//     Angle is currently unused, it will be implemented in the future.\n\t\n\t\tCanvas.prototype.removeText = function(layer, x, y, text, font, angle) {\n\t\t\tif (text == null) {\n\t\t\t\tvar layerCache = this._textCache[layer];\n\t\t\t\tif (layerCache != null) {\n\t\t\t\t\tfor (var styleKey in layerCache) {\n\t\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\n\t\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\n\t\t\t\t\t\t\tfor (var key in styleCache) {\n\t\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\n\t\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\n\t\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\t\t\t\t\t\tposition.active = false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar positions = this.getTextInfo(layer, text, font, angle).positions;\n\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\tif (position.x == x && position.y == y) {\n\t\t\t\t\t\tposition.active = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t///////////////////////////////////////////////////////////////////////////\n\t\t// The top-level container for the entire plot.\n\t\n\t    function Plot(placeholder, data_, options_, plugins) {\n\t        // data is on the form:\n\t        //   [ series1, series2 ... ]\n\t        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]\n\t        // or { data: [ [x1, y1], [x2, y2], ... ], label: \"some label\", ... }\n\t\n\t        var series = [],\n\t            options = {\n\t                // the color theme used for graphs\n\t                colors: [\"#edc240\", \"#afd8f8\", \"#cb4b4b\", \"#4da74d\", \"#9440ed\"],\n\t                legend: {\n\t                    show: true,\n\t                    noColumns: 1, // number of colums in legend table\n\t                    labelFormatter: null, // fn: string -> string\n\t                    labelBoxBorderColor: \"#ccc\", // border color for the little label boxes\n\t                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph\n\t                    position: \"ne\", // position of default legend container within plot\n\t                    margin: 5, // distance from grid edge to default legend container within plot\n\t                    backgroundColor: null, // null means auto-detect\n\t                    backgroundOpacity: 0.85, // set to 0 to avoid background\n\t                    sorted: null    // default to no legend sorting\n\t                },\n\t                xaxis: {\n\t                    show: null, // null = auto-detect, true = always, false = never\n\t                    position: \"bottom\", // or \"top\"\n\t                    mode: null, // null or \"time\"\n\t                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: \"italic\", weight: \"bold\", family: \"sans-serif\", variant: \"small-caps\" }\n\t                    color: null, // base color, labels, ticks\n\t                    tickColor: null, // possibly different color of ticks, e.g. \"rgba(0,0,0,0.15)\"\n\t                    transform: null, // null or f: number -> number to transform axis\n\t                    inverseTransform: null, // if transform is set, this should be the inverse function\n\t                    min: null, // min. value to show, null means set automatically\n\t                    max: null, // max. value to show, null means set automatically\n\t                    autoscaleMargin: null, // margin in % to add if auto-setting min/max\n\t                    ticks: null, // either [1, 3] or [[1, \"a\"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks\n\t                    tickFormatter: null, // fn: number -> string\n\t                    labelWidth: null, // size of tick labels in pixels\n\t                    labelHeight: null,\n\t                    reserveSpace: null, // whether to reserve space even if axis isn't shown\n\t                    tickLength: null, // size in pixels of ticks, or \"full\" for whole line\n\t                    alignTicksWithAxis: null, // axis number or null for no sync\n\t                    tickDecimals: null, // no. of decimals, null means auto\n\t                    tickSize: null, // number or [number, \"unit\"]\n\t                    minTickSize: null // number or [number, \"unit\"]\n\t                },\n\t                yaxis: {\n\t                    autoscaleMargin: 0.02,\n\t                    position: \"left\" // or \"right\"\n\t                },\n\t                xaxes: [],\n\t                yaxes: [],\n\t                series: {\n\t                    points: {\n\t                        show: false,\n\t                        radius: 3,\n\t                        lineWidth: 2, // in pixels\n\t                        fill: true,\n\t                        fillColor: \"#ffffff\",\n\t                        symbol: \"circle\" // or callback\n\t                    },\n\t                    lines: {\n\t                        // we don't put in show: false so we can see\n\t                        // whether lines were actively disabled\n\t                        lineWidth: 2, // in pixels\n\t                        fill: false,\n\t                        fillColor: null,\n\t                        steps: false\n\t                        // Omit 'zero', so we can later default its value to\n\t                        // match that of the 'fill' option.\n\t                    },\n\t                    bars: {\n\t                        show: false,\n\t                        lineWidth: 2, // in pixels\n\t                        barWidth: 1, // in units of the x axis\n\t                        fill: true,\n\t                        fillColor: null,\n\t                        align: \"left\", // \"left\", \"right\", or \"center\"\n\t                        horizontal: false,\n\t                        zero: true\n\t                    },\n\t                    shadowSize: 3,\n\t                    highlightColor: null\n\t                },\n\t                grid: {\n\t                    show: true,\n\t                    aboveData: false,\n\t                    color: \"#545454\", // primary color used for outline and labels\n\t                    backgroundColor: null, // null for transparent, else color\n\t                    borderColor: null, // set if different from the grid color\n\t                    tickColor: null, // color for the ticks, e.g. \"rgba(0,0,0,0.15)\"\n\t                    margin: 0, // distance from the canvas edge to the grid\n\t                    labelMargin: 5, // in pixels\n\t                    axisMargin: 8, // in pixels\n\t                    borderWidth: 2, // in pixels\n\t                    minBorderMargin: null, // in pixels, null means taken from points radius\n\t                    markings: null, // array of ranges or fn: axes -> array of ranges\n\t                    markingsColor: \"#f4f4f4\",\n\t                    markingsLineWidth: 2,\n\t                    // interactive stuff\n\t                    clickable: false,\n\t                    hoverable: false,\n\t                    autoHighlight: true, // highlight in case mouse is near\n\t                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item\n\t                },\n\t                interaction: {\n\t                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow\n\t                },\n\t                hooks: {}\n\t            },\n\t        surface = null,     // the canvas for the plot itself\n\t        overlay = null,     // canvas for interactive stuff on top of plot\n\t        eventHolder = null, // jQuery object that events should be bound to\n\t        ctx = null, octx = null,\n\t        xaxes = [], yaxes = [],\n\t        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},\n\t        plotWidth = 0, plotHeight = 0,\n\t        hooks = {\n\t            processOptions: [],\n\t            processRawData: [],\n\t            processDatapoints: [],\n\t            processOffset: [],\n\t            drawBackground: [],\n\t            drawSeries: [],\n\t            draw: [],\n\t            bindEvents: [],\n\t            drawOverlay: [],\n\t            shutdown: []\n\t        },\n\t        plot = this;\n\t\n\t        // public functions\n\t        plot.setData = setData;\n\t        plot.setupGrid = setupGrid;\n\t        plot.draw = draw;\n\t        plot.getPlaceholder = function() { return placeholder; };\n\t        plot.getCanvas = function() { return surface.element; };\n\t        plot.getPlotOffset = function() { return plotOffset; };\n\t        plot.width = function () { return plotWidth; };\n\t        plot.height = function () { return plotHeight; };\n\t        plot.offset = function () {\n\t            var o = eventHolder.offset();\n\t            o.left += plotOffset.left;\n\t            o.top += plotOffset.top;\n\t            return o;\n\t        };\n\t        plot.getData = function () { return series; };\n\t        plot.getAxes = function () {\n\t            var res = {}, i;\n\t            $.each(xaxes.concat(yaxes), function (_, axis) {\n\t                if (axis)\n\t                    res[axis.direction + (axis.n != 1 ? axis.n : \"\") + \"axis\"] = axis;\n\t            });\n\t            return res;\n\t        };\n\t        plot.getXAxes = function () { return xaxes; };\n\t        plot.getYAxes = function () { return yaxes; };\n\t        plot.c2p = canvasToAxisCoords;\n\t        plot.p2c = axisToCanvasCoords;\n\t        plot.getOptions = function () { return options; };\n\t        plot.highlight = highlight;\n\t        plot.unhighlight = unhighlight;\n\t        plot.triggerRedrawOverlay = triggerRedrawOverlay;\n\t        plot.pointOffset = function(point) {\n\t            return {\n\t                left: parseInt(xaxes[axisNumber(point, \"x\") - 1].p2c(+point.x) + plotOffset.left, 10),\n\t                top: parseInt(yaxes[axisNumber(point, \"y\") - 1].p2c(+point.y) + plotOffset.top, 10)\n\t            };\n\t        };\n\t        plot.shutdown = shutdown;\n\t        plot.destroy = function () {\n\t            shutdown();\n\t            placeholder.removeData(\"plot\").empty();\n\t\n\t            series = [];\n\t            options = null;\n\t            surface = null;\n\t            overlay = null;\n\t            eventHolder = null;\n\t            ctx = null;\n\t            octx = null;\n\t            xaxes = [];\n\t            yaxes = [];\n\t            hooks = null;\n\t            highlights = [];\n\t            plot = null;\n\t        };\n\t        plot.resize = function () {\n\t        \tvar width = placeholder.width(),\n\t        \t\theight = placeholder.height();\n\t            surface.resize(width, height);\n\t            overlay.resize(width, height);\n\t        };\n\t\n\t        // public attributes\n\t        plot.hooks = hooks;\n\t\n\t        // initialize\n\t        initPlugins(plot);\n\t        parseOptions(options_);\n\t        setupCanvases();\n\t        setData(data_);\n\t        setupGrid();\n\t        draw();\n\t        bindEvents();\n\t\n\t\n\t        function executeHooks(hook, args) {\n\t            args = [plot].concat(args);\n\t            for (var i = 0; i < hook.length; ++i)\n\t                hook[i].apply(this, args);\n\t        }\n\t\n\t        function initPlugins() {\n\t\n\t            // References to key classes, allowing plugins to modify them\n\t\n\t            var classes = {\n\t                Canvas: Canvas\n\t            };\n\t\n\t            for (var i = 0; i < plugins.length; ++i) {\n\t                var p = plugins[i];\n\t                p.init(plot, classes);\n\t                if (p.options)\n\t                    $.extend(true, options, p.options);\n\t            }\n\t        }\n\t\n\t        function parseOptions(opts) {\n\t\n\t            $.extend(true, options, opts);\n\t\n\t            // $.extend merges arrays, rather than replacing them.  When less\n\t            // colors are provided than the size of the default palette, we\n\t            // end up with those colors plus the remaining defaults, which is\n\t            // not expected behavior; avoid it by replacing them here.\n\t\n\t            if (opts && opts.colors) {\n\t            \toptions.colors = opts.colors;\n\t            }\n\t\n\t            if (options.xaxis.color == null)\n\t                options.xaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\t            if (options.yaxis.color == null)\n\t                options.yaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\t\n\t            if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility\n\t                options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;\n\t            if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility\n\t                options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;\n\t\n\t            if (options.grid.borderColor == null)\n\t                options.grid.borderColor = options.grid.color;\n\t            if (options.grid.tickColor == null)\n\t                options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\t\n\t            // Fill in defaults for axis options, including any unspecified\n\t            // font-spec fields, if a font-spec was provided.\n\t\n\t            // If no x/y axis options were provided, create one of each anyway,\n\t            // since the rest of the code assumes that they exist.\n\t\n\t            var i, axisOptions, axisCount,\n\t                fontSize = placeholder.css(\"font-size\"),\n\t                fontSizeDefault = fontSize ? +fontSize.replace(\"px\", \"\") : 13,\n\t                fontDefaults = {\n\t                    style: placeholder.css(\"font-style\"),\n\t                    size: Math.round(0.8 * fontSizeDefault),\n\t                    variant: placeholder.css(\"font-variant\"),\n\t                    weight: placeholder.css(\"font-weight\"),\n\t                    family: placeholder.css(\"font-family\")\n\t                };\n\t\n\t            axisCount = options.xaxes.length || 1;\n\t            for (i = 0; i < axisCount; ++i) {\n\t\n\t                axisOptions = options.xaxes[i];\n\t                if (axisOptions && !axisOptions.tickColor) {\n\t                    axisOptions.tickColor = axisOptions.color;\n\t                }\n\t\n\t                axisOptions = $.extend(true, {}, options.xaxis, axisOptions);\n\t                options.xaxes[i] = axisOptions;\n\t\n\t                if (axisOptions.font) {\n\t                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n\t                    if (!axisOptions.font.color) {\n\t                        axisOptions.font.color = axisOptions.color;\n\t                    }\n\t                    if (!axisOptions.font.lineHeight) {\n\t                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n\t                    }\n\t                }\n\t            }\n\t\n\t            axisCount = options.yaxes.length || 1;\n\t            for (i = 0; i < axisCount; ++i) {\n\t\n\t                axisOptions = options.yaxes[i];\n\t                if (axisOptions && !axisOptions.tickColor) {\n\t                    axisOptions.tickColor = axisOptions.color;\n\t                }\n\t\n\t                axisOptions = $.extend(true, {}, options.yaxis, axisOptions);\n\t                options.yaxes[i] = axisOptions;\n\t\n\t                if (axisOptions.font) {\n\t                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n\t                    if (!axisOptions.font.color) {\n\t                        axisOptions.font.color = axisOptions.color;\n\t                    }\n\t                    if (!axisOptions.font.lineHeight) {\n\t                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n\t                    }\n\t                }\n\t            }\n\t\n\t            // backwards compatibility, to be removed in future\n\t            if (options.xaxis.noTicks && options.xaxis.ticks == null)\n\t                options.xaxis.ticks = options.xaxis.noTicks;\n\t            if (options.yaxis.noTicks && options.yaxis.ticks == null)\n\t                options.yaxis.ticks = options.yaxis.noTicks;\n\t            if (options.x2axis) {\n\t                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);\n\t                options.xaxes[1].position = \"top\";\n\t                // Override the inherit to allow the axis to auto-scale\n\t                if (options.x2axis.min == null) {\n\t                    options.xaxes[1].min = null;\n\t                }\n\t                if (options.x2axis.max == null) {\n\t                    options.xaxes[1].max = null;\n\t                }\n\t            }\n\t            if (options.y2axis) {\n\t                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);\n\t                options.yaxes[1].position = \"right\";\n\t                // Override the inherit to allow the axis to auto-scale\n\t                if (options.y2axis.min == null) {\n\t                    options.yaxes[1].min = null;\n\t                }\n\t                if (options.y2axis.max == null) {\n\t                    options.yaxes[1].max = null;\n\t                }\n\t            }\n\t            if (options.grid.coloredAreas)\n\t                options.grid.markings = options.grid.coloredAreas;\n\t            if (options.grid.coloredAreasColor)\n\t                options.grid.markingsColor = options.grid.coloredAreasColor;\n\t            if (options.lines)\n\t                $.extend(true, options.series.lines, options.lines);\n\t            if (options.points)\n\t                $.extend(true, options.series.points, options.points);\n\t            if (options.bars)\n\t                $.extend(true, options.series.bars, options.bars);\n\t            if (options.shadowSize != null)\n\t                options.series.shadowSize = options.shadowSize;\n\t            if (options.highlightColor != null)\n\t                options.series.highlightColor = options.highlightColor;\n\t\n\t            // save options on axes for future reference\n\t            for (i = 0; i < options.xaxes.length; ++i)\n\t                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];\n\t            for (i = 0; i < options.yaxes.length; ++i)\n\t                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];\n\t\n\t            // add hooks from options\n\t            for (var n in hooks)\n\t                if (options.hooks[n] && options.hooks[n].length)\n\t                    hooks[n] = hooks[n].concat(options.hooks[n]);\n\t\n\t            executeHooks(hooks.processOptions, [options]);\n\t        }\n\t\n\t        function setData(d) {\n\t            series = parseData(d);\n\t            fillInSeriesOptions();\n\t            processData();\n\t        }\n\t\n\t        function parseData(d) {\n\t            var res = [];\n\t            for (var i = 0; i < d.length; ++i) {\n\t                var s = $.extend(true, {}, options.series);\n\t\n\t                if (d[i].data != null) {\n\t                    s.data = d[i].data; // move the data instead of deep-copy\n\t                    delete d[i].data;\n\t\n\t                    $.extend(true, s, d[i]);\n\t\n\t                    d[i].data = s.data;\n\t                }\n\t                else\n\t                    s.data = d[i];\n\t                res.push(s);\n\t            }\n\t\n\t            return res;\n\t        }\n\t\n\t        function axisNumber(obj, coord) {\n\t            var a = obj[coord + \"axis\"];\n\t            if (typeof a == \"object\") // if we got a real axis, extract number\n\t                a = a.n;\n\t            if (typeof a != \"number\")\n\t                a = 1; // default to first axis\n\t            return a;\n\t        }\n\t\n\t        function allAxes() {\n\t            // return flat array without annoying null entries\n\t            return $.grep(xaxes.concat(yaxes), function (a) { return a; });\n\t        }\n\t\n\t        function canvasToAxisCoords(pos) {\n\t            // return an object with x/y corresponding to all used axes\n\t            var res = {}, i, axis;\n\t            for (i = 0; i < xaxes.length; ++i) {\n\t                axis = xaxes[i];\n\t                if (axis && axis.used)\n\t                    res[\"x\" + axis.n] = axis.c2p(pos.left);\n\t            }\n\t\n\t            for (i = 0; i < yaxes.length; ++i) {\n\t                axis = yaxes[i];\n\t                if (axis && axis.used)\n\t                    res[\"y\" + axis.n] = axis.c2p(pos.top);\n\t            }\n\t\n\t            if (res.x1 !== undefined)\n\t                res.x = res.x1;\n\t            if (res.y1 !== undefined)\n\t                res.y = res.y1;\n\t\n\t            return res;\n\t        }\n\t\n\t        function axisToCanvasCoords(pos) {\n\t            // get canvas coords from the first pair of x/y found in pos\n\t            var res = {}, i, axis, key;\n\t\n\t            for (i = 0; i < xaxes.length; ++i) {\n\t                axis = xaxes[i];\n\t                if (axis && axis.used) {\n\t                    key = \"x\" + axis.n;\n\t                    if (pos[key] == null && axis.n == 1)\n\t                        key = \"x\";\n\t\n\t                    if (pos[key] != null) {\n\t                        res.left = axis.p2c(pos[key]);\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t\n\t            for (i = 0; i < yaxes.length; ++i) {\n\t                axis = yaxes[i];\n\t                if (axis && axis.used) {\n\t                    key = \"y\" + axis.n;\n\t                    if (pos[key] == null && axis.n == 1)\n\t                        key = \"y\";\n\t\n\t                    if (pos[key] != null) {\n\t                        res.top = axis.p2c(pos[key]);\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t\n\t            return res;\n\t        }\n\t\n\t        function getOrCreateAxis(axes, number) {\n\t            if (!axes[number - 1])\n\t                axes[number - 1] = {\n\t                    n: number, // save the number for future reference\n\t                    direction: axes == xaxes ? \"x\" : \"y\",\n\t                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)\n\t                };\n\t\n\t            return axes[number - 1];\n\t        }\n\t\n\t        function fillInSeriesOptions() {\n\t\n\t            var neededColors = series.length, maxIndex = -1, i;\n\t\n\t            // Subtract the number of series that already have fixed colors or\n\t            // color indexes from the number that we still need to generate.\n\t\n\t            for (i = 0; i < series.length; ++i) {\n\t                var sc = series[i].color;\n\t                if (sc != null) {\n\t                    neededColors--;\n\t                    if (typeof sc == \"number\" && sc > maxIndex) {\n\t                        maxIndex = sc;\n\t                    }\n\t                }\n\t            }\n\t\n\t            // If any of the series have fixed color indexes, then we need to\n\t            // generate at least as many colors as the highest index.\n\t\n\t            if (neededColors <= maxIndex) {\n\t                neededColors = maxIndex + 1;\n\t            }\n\t\n\t            // Generate all the colors, using first the option colors and then\n\t            // variations on those colors once they're exhausted.\n\t\n\t            var c, colors = [], colorPool = options.colors,\n\t                colorPoolSize = colorPool.length, variation = 0;\n\t\n\t            for (i = 0; i < neededColors; i++) {\n\t\n\t                c = $.color.parse(colorPool[i % colorPoolSize] || \"#666\");\n\t\n\t                // Each time we exhaust the colors in the pool we adjust\n\t                // a scaling factor used to produce more variations on\n\t                // those colors. The factor alternates negative/positive\n\t                // to produce lighter/darker colors.\n\t\n\t                // Reset the variation after every few cycles, or else\n\t                // it will end up producing only white or black colors.\n\t\n\t                if (i % colorPoolSize == 0 && i) {\n\t                    if (variation >= 0) {\n\t                        if (variation < 0.5) {\n\t                            variation = -variation - 0.2;\n\t                        } else variation = 0;\n\t                    } else variation = -variation;\n\t                }\n\t\n\t                colors[i] = c.scale('rgb', 1 + variation);\n\t            }\n\t\n\t            // Finalize the series options, filling in their colors\n\t\n\t            var colori = 0, s;\n\t            for (i = 0; i < series.length; ++i) {\n\t                s = series[i];\n\t\n\t                // assign colors\n\t                if (s.color == null) {\n\t                    s.color = colors[colori].toString();\n\t                    ++colori;\n\t                }\n\t                else if (typeof s.color == \"number\")\n\t                    s.color = colors[s.color].toString();\n\t\n\t                // turn on lines automatically in case nothing is set\n\t                if (s.lines.show == null) {\n\t                    var v, show = true;\n\t                    for (v in s)\n\t                        if (s[v] && s[v].show) {\n\t                            show = false;\n\t                            break;\n\t                        }\n\t                    if (show)\n\t                        s.lines.show = true;\n\t                }\n\t\n\t                // If nothing was provided for lines.zero, default it to match\n\t                // lines.fill, since areas by default should extend to zero.\n\t\n\t                if (s.lines.zero == null) {\n\t                    s.lines.zero = !!s.lines.fill;\n\t                }\n\t\n\t                // setup axes\n\t                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, \"x\"));\n\t                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, \"y\"));\n\t            }\n\t        }\n\t\n\t        function processData() {\n\t            var topSentry = Number.POSITIVE_INFINITY,\n\t                bottomSentry = Number.NEGATIVE_INFINITY,\n\t                fakeInfinity = Number.MAX_VALUE,\n\t                i, j, k, m, length,\n\t                s, points, ps, x, y, axis, val, f, p,\n\t                data, format;\n\t\n\t            function updateAxis(axis, min, max) {\n\t                if (min < axis.datamin && min != -fakeInfinity)\n\t                    axis.datamin = min;\n\t                if (max > axis.datamax && max != fakeInfinity)\n\t                    axis.datamax = max;\n\t            }\n\t\n\t            $.each(allAxes(), function (_, axis) {\n\t                // init axis\n\t                axis.datamin = topSentry;\n\t                axis.datamax = bottomSentry;\n\t                axis.used = false;\n\t            });\n\t\n\t            for (i = 0; i < series.length; ++i) {\n\t                s = series[i];\n\t                s.datapoints = { points: [] };\n\t\n\t                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);\n\t            }\n\t\n\t            // first pass: clean and copy data\n\t            for (i = 0; i < series.length; ++i) {\n\t                s = series[i];\n\t\n\t                data = s.data;\n\t                format = s.datapoints.format;\n\t\n\t                if (!format) {\n\t                    format = [];\n\t                    // find out how to copy\n\t                    format.push({ x: true, number: true, required: true });\n\t                    format.push({ y: true, number: true, required: true });\n\t\n\t                    if (s.bars.show || (s.lines.show && s.lines.fill)) {\n\t                        var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));\n\t                        format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });\n\t                        if (s.bars.horizontal) {\n\t                            delete format[format.length - 1].y;\n\t                            format[format.length - 1].x = true;\n\t                        }\n\t                    }\n\t\n\t                    s.datapoints.format = format;\n\t                }\n\t\n\t                if (s.datapoints.pointsize != null)\n\t                    continue; // already filled in\n\t\n\t                s.datapoints.pointsize = format.length;\n\t\n\t                ps = s.datapoints.pointsize;\n\t                points = s.datapoints.points;\n\t\n\t                var insertSteps = s.lines.show && s.lines.steps;\n\t                s.xaxis.used = s.yaxis.used = true;\n\t\n\t                for (j = k = 0; j < data.length; ++j, k += ps) {\n\t                    p = data[j];\n\t\n\t                    var nullify = p == null;\n\t                    if (!nullify) {\n\t                        for (m = 0; m < ps; ++m) {\n\t                            val = p[m];\n\t                            f = format[m];\n\t\n\t                            if (f) {\n\t                                if (f.number && val != null) {\n\t                                    val = +val; // convert to number\n\t                                    if (isNaN(val))\n\t                                        val = null;\n\t                                    else if (val == Infinity)\n\t                                        val = fakeInfinity;\n\t                                    else if (val == -Infinity)\n\t                                        val = -fakeInfinity;\n\t                                }\n\t\n\t                                if (val == null) {\n\t                                    if (f.required)\n\t                                        nullify = true;\n\t\n\t                                    if (f.defaultValue != null)\n\t                                        val = f.defaultValue;\n\t                                }\n\t                            }\n\t\n\t                            points[k + m] = val;\n\t                        }\n\t                    }\n\t\n\t                    if (nullify) {\n\t                        for (m = 0; m < ps; ++m) {\n\t                            val = points[k + m];\n\t                            if (val != null) {\n\t                                f = format[m];\n\t                                // extract min/max info\n\t                                if (f.autoscale !== false) {\n\t                                    if (f.x) {\n\t                                        updateAxis(s.xaxis, val, val);\n\t                                    }\n\t                                    if (f.y) {\n\t                                        updateAxis(s.yaxis, val, val);\n\t                                    }\n\t                                }\n\t                            }\n\t                            points[k + m] = null;\n\t                        }\n\t                    }\n\t                    else {\n\t                        // a little bit of line specific stuff that\n\t                        // perhaps shouldn't be here, but lacking\n\t                        // better means...\n\t                        if (insertSteps && k > 0\n\t                            && points[k - ps] != null\n\t                            && points[k - ps] != points[k]\n\t                            && points[k - ps + 1] != points[k + 1]) {\n\t                            // copy the point to make room for a middle point\n\t                            for (m = 0; m < ps; ++m)\n\t                                points[k + ps + m] = points[k + m];\n\t\n\t                            // middle point has same y\n\t                            points[k + 1] = points[k - ps + 1];\n\t\n\t                            // we've added a point, better reflect that\n\t                            k += ps;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            // give the hooks a chance to run\n\t            for (i = 0; i < series.length; ++i) {\n\t                s = series[i];\n\t\n\t                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);\n\t            }\n\t\n\t            // second pass: find datamax/datamin for auto-scaling\n\t            for (i = 0; i < series.length; ++i) {\n\t                s = series[i];\n\t                points = s.datapoints.points;\n\t                ps = s.datapoints.pointsize;\n\t                format = s.datapoints.format;\n\t\n\t                var xmin = topSentry, ymin = topSentry,\n\t                    xmax = bottomSentry, ymax = bottomSentry;\n\t\n\t                for (j = 0; j < points.length; j += ps) {\n\t                    if (points[j] == null)\n\t                        continue;\n\t\n\t                    for (m = 0; m < ps; ++m) {\n\t                        val = points[j + m];\n\t                        f = format[m];\n\t                        if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity)\n\t                            continue;\n\t\n\t                        if (f.x) {\n\t                            if (val < xmin)\n\t                                xmin = val;\n\t                            if (val > xmax)\n\t                                xmax = val;\n\t                        }\n\t                        if (f.y) {\n\t                            if (val < ymin)\n\t                                ymin = val;\n\t                            if (val > ymax)\n\t                                ymax = val;\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (s.bars.show) {\n\t                    // make sure we got room for the bar on the dancing floor\n\t                    var delta;\n\t\n\t                    switch (s.bars.align) {\n\t                        case \"left\":\n\t                            delta = 0;\n\t                            break;\n\t                        case \"right\":\n\t                            delta = -s.bars.barWidth;\n\t                            break;\n\t                        default:\n\t                            delta = -s.bars.barWidth / 2;\n\t                    }\n\t\n\t                    if (s.bars.horizontal) {\n\t                        ymin += delta;\n\t                        ymax += delta + s.bars.barWidth;\n\t                    }\n\t                    else {\n\t                        xmin += delta;\n\t                        xmax += delta + s.bars.barWidth;\n\t                    }\n\t                }\n\t\n\t                updateAxis(s.xaxis, xmin, xmax);\n\t                updateAxis(s.yaxis, ymin, ymax);\n\t            }\n\t\n\t            $.each(allAxes(), function (_, axis) {\n\t                if (axis.datamin == topSentry)\n\t                    axis.datamin = null;\n\t                if (axis.datamax == bottomSentry)\n\t                    axis.datamax = null;\n\t            });\n\t        }\n\t\n\t        function setupCanvases() {\n\t\n\t            // Make sure the placeholder is clear of everything except canvases\n\t            // from a previous plot in this container that we'll try to re-use.\n\t\n\t            placeholder.css(\"padding\", 0) // padding messes up the positioning\n\t                .children().filter(function(){\n\t                    return !$(this).hasClass(\"flot-overlay\") && !$(this).hasClass('flot-base');\n\t                }).remove();\n\t\n\t            if (placeholder.css(\"position\") == 'static')\n\t                placeholder.css(\"position\", \"relative\"); // for positioning labels and overlay\n\t\n\t            surface = new Canvas(\"flot-base\", placeholder);\n\t            overlay = new Canvas(\"flot-overlay\", placeholder); // overlay canvas for interactive features\n\t\n\t            ctx = surface.context;\n\t            octx = overlay.context;\n\t\n\t            // define which element we're listening for events on\n\t            eventHolder = $(overlay.element).unbind();\n\t\n\t            // If we're re-using a plot object, shut down the old one\n\t\n\t            var existing = placeholder.data(\"plot\");\n\t\n\t            if (existing) {\n\t                existing.shutdown();\n\t                overlay.clear();\n\t            }\n\t\n\t            // save in case we get replotted\n\t            placeholder.data(\"plot\", plot);\n\t        }\n\t\n\t        function bindEvents() {\n\t            // bind events\n\t            if (options.grid.hoverable) {\n\t                eventHolder.mousemove(onMouseMove);\n\t\n\t                // Use bind, rather than .mouseleave, because we officially\n\t                // still support jQuery 1.2.6, which doesn't define a shortcut\n\t                // for mouseenter or mouseleave.  This was a bug/oversight that\n\t                // was fixed somewhere around 1.3.x.  We can return to using\n\t                // .mouseleave when we drop support for 1.2.6.\n\t\n\t                eventHolder.bind(\"mouseleave\", onMouseLeave);\n\t            }\n\t\n\t            if (options.grid.clickable)\n\t                eventHolder.click(onClick);\n\t\n\t            executeHooks(hooks.bindEvents, [eventHolder]);\n\t        }\n\t\n\t        function shutdown() {\n\t            if (redrawTimeout)\n\t                clearTimeout(redrawTimeout);\n\t\n\t            eventHolder.unbind(\"mousemove\", onMouseMove);\n\t            eventHolder.unbind(\"mouseleave\", onMouseLeave);\n\t            eventHolder.unbind(\"click\", onClick);\n\t\n\t            executeHooks(hooks.shutdown, [eventHolder]);\n\t        }\n\t\n\t        function setTransformationHelpers(axis) {\n\t            // set helper functions on the axis, assumes plot area\n\t            // has been computed already\n\t\n\t            function identity(x) { return x; }\n\t\n\t            var s, m, t = axis.options.transform || identity,\n\t                it = axis.options.inverseTransform;\n\t\n\t            // precompute how much the axis is scaling a point\n\t            // in canvas space\n\t            if (axis.direction == \"x\") {\n\t                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));\n\t                m = Math.min(t(axis.max), t(axis.min));\n\t            }\n\t            else {\n\t                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));\n\t                s = -s;\n\t                m = Math.max(t(axis.max), t(axis.min));\n\t            }\n\t\n\t            // data point to canvas coordinate\n\t            if (t == identity) // slight optimization\n\t                axis.p2c = function (p) { return (p - m) * s; };\n\t            else\n\t                axis.p2c = function (p) { return (t(p) - m) * s; };\n\t            // canvas coordinate to data point\n\t            if (!it)\n\t                axis.c2p = function (c) { return m + c / s; };\n\t            else\n\t                axis.c2p = function (c) { return it(m + c / s); };\n\t        }\n\t\n\t        function measureTickLabels(axis) {\n\t\n\t            var opts = axis.options,\n\t                ticks = axis.ticks || [],\n\t                labelWidth = opts.labelWidth || 0,\n\t                labelHeight = opts.labelHeight || 0,\n\t                maxWidth = labelWidth || (axis.direction == \"x\" ? Math.floor(surface.width / (ticks.length || 1)) : null),\n\t                legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n\t                layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n\t                font = opts.font || \"flot-tick-label tickLabel\";\n\t\n\t            for (var i = 0; i < ticks.length; ++i) {\n\t\n\t                var t = ticks[i];\n\t\n\t                if (!t.label)\n\t                    continue;\n\t\n\t                var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);\n\t\n\t                labelWidth = Math.max(labelWidth, info.width);\n\t                labelHeight = Math.max(labelHeight, info.height);\n\t            }\n\t\n\t            axis.labelWidth = opts.labelWidth || labelWidth;\n\t            axis.labelHeight = opts.labelHeight || labelHeight;\n\t        }\n\t\n\t        function allocateAxisBoxFirstPhase(axis) {\n\t            // find the bounding box of the axis by looking at label\n\t            // widths/heights and ticks, make room by diminishing the\n\t            // plotOffset; this first phase only looks at one\n\t            // dimension per axis, the other dimension depends on the\n\t            // other axes so will have to wait\n\t\n\t            var lw = axis.labelWidth,\n\t                lh = axis.labelHeight,\n\t                pos = axis.options.position,\n\t                isXAxis = axis.direction === \"x\",\n\t                tickLength = axis.options.tickLength,\n\t                axisMargin = options.grid.axisMargin,\n\t                padding = options.grid.labelMargin,\n\t                innermost = true,\n\t                outermost = true,\n\t                first = true,\n\t                found = false;\n\t\n\t            // Determine the axis's position in its direction and on its side\n\t\n\t            $.each(isXAxis ? xaxes : yaxes, function(i, a) {\n\t                if (a && (a.show || a.reserveSpace)) {\n\t                    if (a === axis) {\n\t                        found = true;\n\t                    } else if (a.options.position === pos) {\n\t                        if (found) {\n\t                            outermost = false;\n\t                        } else {\n\t                            innermost = false;\n\t                        }\n\t                    }\n\t                    if (!found) {\n\t                        first = false;\n\t                    }\n\t                }\n\t            });\n\t\n\t            // The outermost axis on each side has no margin\n\t\n\t            if (outermost) {\n\t                axisMargin = 0;\n\t            }\n\t\n\t            // The ticks for the first axis in each direction stretch across\n\t\n\t            if (tickLength == null) {\n\t                tickLength = first ? \"full\" : 5;\n\t            }\n\t\n\t            if (!isNaN(+tickLength))\n\t                padding += +tickLength;\n\t\n\t            if (isXAxis) {\n\t                lh += padding;\n\t\n\t                if (pos == \"bottom\") {\n\t                    plotOffset.bottom += lh + axisMargin;\n\t                    axis.box = { top: surface.height - plotOffset.bottom, height: lh };\n\t                }\n\t                else {\n\t                    axis.box = { top: plotOffset.top + axisMargin, height: lh };\n\t                    plotOffset.top += lh + axisMargin;\n\t                }\n\t            }\n\t            else {\n\t                lw += padding;\n\t\n\t                if (pos == \"left\") {\n\t                    axis.box = { left: plotOffset.left + axisMargin, width: lw };\n\t                    plotOffset.left += lw + axisMargin;\n\t                }\n\t                else {\n\t                    plotOffset.right += lw + axisMargin;\n\t                    axis.box = { left: surface.width - plotOffset.right, width: lw };\n\t                }\n\t            }\n\t\n\t             // save for future reference\n\t            axis.position = pos;\n\t            axis.tickLength = tickLength;\n\t            axis.box.padding = padding;\n\t            axis.innermost = innermost;\n\t        }\n\t\n\t        function allocateAxisBoxSecondPhase(axis) {\n\t            // now that all axis boxes have been placed in one\n\t            // dimension, we can set the remaining dimension coordinates\n\t            if (axis.direction == \"x\") {\n\t                axis.box.left = plotOffset.left - axis.labelWidth / 2;\n\t                axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;\n\t            }\n\t            else {\n\t                axis.box.top = plotOffset.top - axis.labelHeight / 2;\n\t                axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;\n\t            }\n\t        }\n\t\n\t        function adjustLayoutForThingsStickingOut() {\n\t            // possibly adjust plot offset to ensure everything stays\n\t            // inside the canvas and isn't clipped off\n\t\n\t            var minMargin = options.grid.minBorderMargin,\n\t                axis, i;\n\t\n\t            // check stuff from the plot (FIXME: this should just read\n\t            // a value from the series, otherwise it's impossible to\n\t            // customize)\n\t            if (minMargin == null) {\n\t                minMargin = 0;\n\t                for (i = 0; i < series.length; ++i)\n\t                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));\n\t            }\n\t\n\t            var margins = {\n\t                left: minMargin,\n\t                right: minMargin,\n\t                top: minMargin,\n\t                bottom: minMargin\n\t            };\n\t\n\t            // check axis labels, note we don't check the actual\n\t            // labels but instead use the overall width/height to not\n\t            // jump as much around with replots\n\t            $.each(allAxes(), function (_, axis) {\n\t                if (axis.reserveSpace && axis.ticks && axis.ticks.length) {\n\t                    if (axis.direction === \"x\") {\n\t                        margins.left = Math.max(margins.left, axis.labelWidth / 2);\n\t                        margins.right = Math.max(margins.right, axis.labelWidth / 2);\n\t                    } else {\n\t                        margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);\n\t                        margins.top = Math.max(margins.top, axis.labelHeight / 2);\n\t                    }\n\t                }\n\t            });\n\t\n\t            plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));\n\t            plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));\n\t            plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));\n\t            plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));\n\t        }\n\t\n\t        function setupGrid() {\n\t            var i, axes = allAxes(), showGrid = options.grid.show;\n\t\n\t            // Initialize the plot's offset from the edge of the canvas\n\t\n\t            for (var a in plotOffset) {\n\t                var margin = options.grid.margin || 0;\n\t                plotOffset[a] = typeof margin == \"number\" ? margin : margin[a] || 0;\n\t            }\n\t\n\t            executeHooks(hooks.processOffset, [plotOffset]);\n\t\n\t            // If the grid is visible, add its border width to the offset\n\t\n\t            for (var a in plotOffset) {\n\t                if(typeof(options.grid.borderWidth) == \"object\") {\n\t                    plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;\n\t                }\n\t                else {\n\t                    plotOffset[a] += showGrid ? options.grid.borderWidth : 0;\n\t                }\n\t            }\n\t\n\t            $.each(axes, function (_, axis) {\n\t                var axisOpts = axis.options;\n\t                axis.show = axisOpts.show == null ? axis.used : axisOpts.show;\n\t                axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace;\n\t                setRange(axis);\n\t            });\n\t\n\t            if (showGrid) {\n\t\n\t                var allocatedAxes = $.grep(axes, function (axis) {\n\t                    return axis.show || axis.reserveSpace;\n\t                });\n\t\n\t                $.each(allocatedAxes, function (_, axis) {\n\t                    // make the ticks\n\t                    setupTickGeneration(axis);\n\t                    setTicks(axis);\n\t                    snapRangeToTicks(axis, axis.ticks);\n\t                    // find labelWidth/Height for axis\n\t                    measureTickLabels(axis);\n\t                });\n\t\n\t                // with all dimensions calculated, we can compute the\n\t                // axis bounding boxes, start from the outside\n\t                // (reverse order)\n\t                for (i = allocatedAxes.length - 1; i >= 0; --i)\n\t                    allocateAxisBoxFirstPhase(allocatedAxes[i]);\n\t\n\t                // make sure we've got enough space for things that\n\t                // might stick out\n\t                adjustLayoutForThingsStickingOut();\n\t\n\t                $.each(allocatedAxes, function (_, axis) {\n\t                    allocateAxisBoxSecondPhase(axis);\n\t                });\n\t            }\n\t\n\t            plotWidth = surface.width - plotOffset.left - plotOffset.right;\n\t            plotHeight = surface.height - plotOffset.bottom - plotOffset.top;\n\t\n\t            // now we got the proper plot dimensions, we can compute the scaling\n\t            $.each(axes, function (_, axis) {\n\t                setTransformationHelpers(axis);\n\t            });\n\t\n\t            if (showGrid) {\n\t                drawAxisLabels();\n\t            }\n\t\n\t            insertLegend();\n\t        }\n\t\n\t        function setRange(axis) {\n\t            var opts = axis.options,\n\t                min = +(opts.min != null ? opts.min : axis.datamin),\n\t                max = +(opts.max != null ? opts.max : axis.datamax),\n\t                delta = max - min;\n\t\n\t            if (delta == 0.0) {\n\t                // degenerate case\n\t                var widen = max == 0 ? 1 : 0.01;\n\t\n\t                if (opts.min == null)\n\t                    min -= widen;\n\t                // always widen max if we couldn't widen min to ensure we\n\t                // don't fall into min == max which doesn't work\n\t                if (opts.max == null || opts.min != null)\n\t                    max += widen;\n\t            }\n\t            else {\n\t                // consider autoscaling\n\t                var margin = opts.autoscaleMargin;\n\t                if (margin != null) {\n\t                    if (opts.min == null) {\n\t                        min -= delta * margin;\n\t                        // make sure we don't go below zero if all values\n\t                        // are positive\n\t                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)\n\t                            min = 0;\n\t                    }\n\t                    if (opts.max == null) {\n\t                        max += delta * margin;\n\t                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)\n\t                            max = 0;\n\t                    }\n\t                }\n\t            }\n\t            axis.min = min;\n\t            axis.max = max;\n\t        }\n\t\n\t        function setupTickGeneration(axis) {\n\t            var opts = axis.options;\n\t\n\t            // estimate number of ticks\n\t            var noTicks;\n\t            if (typeof opts.ticks == \"number\" && opts.ticks > 0)\n\t                noTicks = opts.ticks;\n\t            else\n\t                // heuristic based on the model a*sqrt(x) fitted to\n\t                // some data points that seemed reasonable\n\t                noTicks = 0.3 * Math.sqrt(axis.direction == \"x\" ? surface.width : surface.height);\n\t\n\t            var delta = (axis.max - axis.min) / noTicks,\n\t                dec = -Math.floor(Math.log(delta) / Math.LN10),\n\t                maxDec = opts.tickDecimals;\n\t\n\t            if (maxDec != null && dec > maxDec) {\n\t                dec = maxDec;\n\t            }\n\t\n\t            var magn = Math.pow(10, -dec),\n\t                norm = delta / magn, // norm is between 1.0 and 10.0\n\t                size;\n\t\n\t            if (norm < 1.5) {\n\t                size = 1;\n\t            } else if (norm < 3) {\n\t                size = 2;\n\t                // special case for 2.5, requires an extra decimal\n\t                if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\n\t                    size = 2.5;\n\t                    ++dec;\n\t                }\n\t            } else if (norm < 7.5) {\n\t                size = 5;\n\t            } else {\n\t                size = 10;\n\t            }\n\t\n\t            size *= magn;\n\t\n\t            if (opts.minTickSize != null && size < opts.minTickSize) {\n\t                size = opts.minTickSize;\n\t            }\n\t\n\t            axis.delta = delta;\n\t            axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);\n\t            axis.tickSize = opts.tickSize || size;\n\t\n\t            // Time mode was moved to a plug-in in 0.8, and since so many people use it\n\t            // we'll add an especially friendly reminder to make sure they included it.\n\t\n\t            if (opts.mode == \"time\" && !axis.tickGenerator) {\n\t                throw new Error(\"Time mode requires the flot.time plugin.\");\n\t            }\n\t\n\t            // Flot supports base-10 axes; any other mode else is handled by a plug-in,\n\t            // like flot.time.js.\n\t\n\t            if (!axis.tickGenerator) {\n\t\n\t                axis.tickGenerator = function (axis) {\n\t\n\t                    var ticks = [],\n\t                        start = floorInBase(axis.min, axis.tickSize),\n\t                        i = 0,\n\t                        v = Number.NaN,\n\t                        prev;\n\t\n\t                    do {\n\t                        prev = v;\n\t                        v = start + i * axis.tickSize;\n\t                        ticks.push(v);\n\t                        ++i;\n\t                    } while (v < axis.max && v != prev);\n\t                    return ticks;\n\t                };\n\t\n\t\t\t\t\taxis.tickFormatter = function (value, axis) {\n\t\n\t\t\t\t\t\tvar factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;\n\t\t\t\t\t\tvar formatted = \"\" + Math.round(value * factor) / factor;\n\t\n\t\t\t\t\t\t// If tickDecimals was specified, ensure that we have exactly that\n\t\t\t\t\t\t// much precision; otherwise default to the value's own precision.\n\t\n\t\t\t\t\t\tif (axis.tickDecimals != null) {\n\t\t\t\t\t\t\tvar decimal = formatted.indexOf(\".\");\n\t\t\t\t\t\t\tvar precision = decimal == -1 ? 0 : formatted.length - decimal - 1;\n\t\t\t\t\t\t\tif (precision < axis.tickDecimals) {\n\t\t\t\t\t\t\t\treturn (precision ? formatted : formatted + \".\") + (\"\" + factor).substr(1, axis.tickDecimals - precision);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\n\t                    return formatted;\n\t                };\n\t            }\n\t\n\t            if ($.isFunction(opts.tickFormatter))\n\t                axis.tickFormatter = function (v, axis) { return \"\" + opts.tickFormatter(v, axis); };\n\t\n\t            if (opts.alignTicksWithAxis != null) {\n\t                var otherAxis = (axis.direction == \"x\" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];\n\t                if (otherAxis && otherAxis.used && otherAxis != axis) {\n\t                    // consider snapping min/max to outermost nice ticks\n\t                    var niceTicks = axis.tickGenerator(axis);\n\t                    if (niceTicks.length > 0) {\n\t                        if (opts.min == null)\n\t                            axis.min = Math.min(axis.min, niceTicks[0]);\n\t                        if (opts.max == null && niceTicks.length > 1)\n\t                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);\n\t                    }\n\t\n\t                    axis.tickGenerator = function (axis) {\n\t                        // copy ticks, scaled to this axis\n\t                        var ticks = [], v, i;\n\t                        for (i = 0; i < otherAxis.ticks.length; ++i) {\n\t                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);\n\t                            v = axis.min + v * (axis.max - axis.min);\n\t                            ticks.push(v);\n\t                        }\n\t                        return ticks;\n\t                    };\n\t\n\t                    // we might need an extra decimal since forced\n\t                    // ticks don't necessarily fit naturally\n\t                    if (!axis.mode && opts.tickDecimals == null) {\n\t                        var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),\n\t                            ts = axis.tickGenerator(axis);\n\t\n\t                        // only proceed if the tick interval rounded\n\t                        // with an extra decimal doesn't give us a\n\t                        // zero at end\n\t                        if (!(ts.length > 1 && /\\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))\n\t                            axis.tickDecimals = extraDec;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t\n\t        function setTicks(axis) {\n\t            var oticks = axis.options.ticks, ticks = [];\n\t            if (oticks == null || (typeof oticks == \"number\" && oticks > 0))\n\t                ticks = axis.tickGenerator(axis);\n\t            else if (oticks) {\n\t                if ($.isFunction(oticks))\n\t                    // generate the ticks\n\t                    ticks = oticks(axis);\n\t                else\n\t                    ticks = oticks;\n\t            }\n\t\n\t            // clean up/labelify the supplied ticks, copy them over\n\t            var i, v;\n\t            axis.ticks = [];\n\t            for (i = 0; i < ticks.length; ++i) {\n\t                var label = null;\n\t                var t = ticks[i];\n\t                if (typeof t == \"object\") {\n\t                    v = +t[0];\n\t                    if (t.length > 1)\n\t                        label = t[1];\n\t                }\n\t                else\n\t                    v = +t;\n\t                if (label == null)\n\t                    label = axis.tickFormatter(v, axis);\n\t                if (!isNaN(v))\n\t                    axis.ticks.push({ v: v, label: label });\n\t            }\n\t        }\n\t\n\t        function snapRangeToTicks(axis, ticks) {\n\t            if (axis.options.autoscaleMargin && ticks.length > 0) {\n\t                // snap to ticks\n\t                if (axis.options.min == null)\n\t                    axis.min = Math.min(axis.min, ticks[0].v);\n\t                if (axis.options.max == null && ticks.length > 1)\n\t                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);\n\t            }\n\t        }\n\t\n\t        function draw() {\n\t\n\t            surface.clear();\n\t\n\t            executeHooks(hooks.drawBackground, [ctx]);\n\t\n\t            var grid = options.grid;\n\t\n\t            // draw background, if any\n\t            if (grid.show && grid.backgroundColor)\n\t                drawBackground();\n\t\n\t            if (grid.show && !grid.aboveData) {\n\t                drawGrid();\n\t            }\n\t\n\t            for (var i = 0; i < series.length; ++i) {\n\t                executeHooks(hooks.drawSeries, [ctx, series[i]]);\n\t                drawSeries(series[i]);\n\t            }\n\t\n\t            executeHooks(hooks.draw, [ctx]);\n\t\n\t            if (grid.show && grid.aboveData) {\n\t                drawGrid();\n\t            }\n\t\n\t            surface.render();\n\t\n\t            // A draw implies that either the axes or data have changed, so we\n\t            // should probably update the overlay highlights as well.\n\t\n\t            triggerRedrawOverlay();\n\t        }\n\t\n\t        function extractRange(ranges, coord) {\n\t            var axis, from, to, key, axes = allAxes();\n\t\n\t            for (var i = 0; i < axes.length; ++i) {\n\t                axis = axes[i];\n\t                if (axis.direction == coord) {\n\t                    key = coord + axis.n + \"axis\";\n\t                    if (!ranges[key] && axis.n == 1)\n\t                        key = coord + \"axis\"; // support x1axis as xaxis\n\t                    if (ranges[key]) {\n\t                        from = ranges[key].from;\n\t                        to = ranges[key].to;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t\n\t            // backwards-compat stuff - to be removed in future\n\t            if (!ranges[key]) {\n\t                axis = coord == \"x\" ? xaxes[0] : yaxes[0];\n\t                from = ranges[coord + \"1\"];\n\t                to = ranges[coord + \"2\"];\n\t            }\n\t\n\t            // auto-reverse as an added bonus\n\t            if (from != null && to != null && from > to) {\n\t                var tmp = from;\n\t                from = to;\n\t                to = tmp;\n\t            }\n\t\n\t            return { from: from, to: to, axis: axis };\n\t        }\n\t\n\t        function drawBackground() {\n\t            ctx.save();\n\t            ctx.translate(plotOffset.left, plotOffset.top);\n\t\n\t            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, \"rgba(255, 255, 255, 0)\");\n\t            ctx.fillRect(0, 0, plotWidth, plotHeight);\n\t            ctx.restore();\n\t        }\n\t\n\t        function drawGrid() {\n\t            var i, axes, bw, bc;\n\t\n\t            ctx.save();\n\t            ctx.translate(plotOffset.left, plotOffset.top);\n\t\n\t            // draw markings\n\t            var markings = options.grid.markings;\n\t            if (markings) {\n\t                if ($.isFunction(markings)) {\n\t                    axes = plot.getAxes();\n\t                    // xmin etc. is backwards compatibility, to be\n\t                    // removed in the future\n\t                    axes.xmin = axes.xaxis.min;\n\t                    axes.xmax = axes.xaxis.max;\n\t                    axes.ymin = axes.yaxis.min;\n\t                    axes.ymax = axes.yaxis.max;\n\t\n\t                    markings = markings(axes);\n\t                }\n\t\n\t                for (i = 0; i < markings.length; ++i) {\n\t                    var m = markings[i],\n\t                        xrange = extractRange(m, \"x\"),\n\t                        yrange = extractRange(m, \"y\");\n\t\n\t                    // fill in missing\n\t                    if (xrange.from == null)\n\t                        xrange.from = xrange.axis.min;\n\t                    if (xrange.to == null)\n\t                        xrange.to = xrange.axis.max;\n\t                    if (yrange.from == null)\n\t                        yrange.from = yrange.axis.min;\n\t                    if (yrange.to == null)\n\t                        yrange.to = yrange.axis.max;\n\t\n\t                    // clip\n\t                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||\n\t                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)\n\t                        continue;\n\t\n\t                    xrange.from = Math.max(xrange.from, xrange.axis.min);\n\t                    xrange.to = Math.min(xrange.to, xrange.axis.max);\n\t                    yrange.from = Math.max(yrange.from, yrange.axis.min);\n\t                    yrange.to = Math.min(yrange.to, yrange.axis.max);\n\t\n\t                    var xequal = xrange.from === xrange.to,\n\t                        yequal = yrange.from === yrange.to;\n\t\n\t                    if (xequal && yequal) {\n\t                        continue;\n\t                    }\n\t\n\t                    // then draw\n\t                    xrange.from = Math.floor(xrange.axis.p2c(xrange.from));\n\t                    xrange.to = Math.floor(xrange.axis.p2c(xrange.to));\n\t                    yrange.from = Math.floor(yrange.axis.p2c(yrange.from));\n\t                    yrange.to = Math.floor(yrange.axis.p2c(yrange.to));\n\t\n\t                    if (xequal || yequal) {\n\t                        var lineWidth = m.lineWidth || options.grid.markingsLineWidth,\n\t                            subPixel = lineWidth % 2 ? 0.5 : 0;\n\t                        ctx.beginPath();\n\t                        ctx.strokeStyle = m.color || options.grid.markingsColor;\n\t                        ctx.lineWidth = lineWidth;\n\t                        if (xequal) {\n\t                            ctx.moveTo(xrange.to + subPixel, yrange.from);\n\t                            ctx.lineTo(xrange.to + subPixel, yrange.to);\n\t                        } else {\n\t                            ctx.moveTo(xrange.from, yrange.to + subPixel);\n\t                            ctx.lineTo(xrange.to, yrange.to + subPixel);                            \n\t                        }\n\t                        ctx.stroke();\n\t                    } else {\n\t                        ctx.fillStyle = m.color || options.grid.markingsColor;\n\t                        ctx.fillRect(xrange.from, yrange.to,\n\t                                     xrange.to - xrange.from,\n\t                                     yrange.from - yrange.to);\n\t                    }\n\t                }\n\t            }\n\t\n\t            // draw the ticks\n\t            axes = allAxes();\n\t            bw = options.grid.borderWidth;\n\t\n\t            for (var j = 0; j < axes.length; ++j) {\n\t                var axis = axes[j], box = axis.box,\n\t                    t = axis.tickLength, x, y, xoff, yoff;\n\t                if (!axis.show || axis.ticks.length == 0)\n\t                    continue;\n\t\n\t                ctx.lineWidth = 1;\n\t\n\t                // find the edges\n\t                if (axis.direction == \"x\") {\n\t                    x = 0;\n\t                    if (t == \"full\")\n\t                        y = (axis.position == \"top\" ? 0 : plotHeight);\n\t                    else\n\t                        y = box.top - plotOffset.top + (axis.position == \"top\" ? box.height : 0);\n\t                }\n\t                else {\n\t                    y = 0;\n\t                    if (t == \"full\")\n\t                        x = (axis.position == \"left\" ? 0 : plotWidth);\n\t                    else\n\t                        x = box.left - plotOffset.left + (axis.position == \"left\" ? box.width : 0);\n\t                }\n\t\n\t                // draw tick bar\n\t                if (!axis.innermost) {\n\t                    ctx.strokeStyle = axis.options.color;\n\t                    ctx.beginPath();\n\t                    xoff = yoff = 0;\n\t                    if (axis.direction == \"x\")\n\t                        xoff = plotWidth + 1;\n\t                    else\n\t                        yoff = plotHeight + 1;\n\t\n\t                    if (ctx.lineWidth == 1) {\n\t                        if (axis.direction == \"x\") {\n\t                            y = Math.floor(y) + 0.5;\n\t                        } else {\n\t                            x = Math.floor(x) + 0.5;\n\t                        }\n\t                    }\n\t\n\t                    ctx.moveTo(x, y);\n\t                    ctx.lineTo(x + xoff, y + yoff);\n\t                    ctx.stroke();\n\t                }\n\t\n\t                // draw ticks\n\t\n\t                ctx.strokeStyle = axis.options.tickColor;\n\t\n\t                ctx.beginPath();\n\t                for (i = 0; i < axis.ticks.length; ++i) {\n\t                    var v = axis.ticks[i].v;\n\t\n\t                    xoff = yoff = 0;\n\t\n\t                    if (isNaN(v) || v < axis.min || v > axis.max\n\t                        // skip those lying on the axes if we got a border\n\t                        || (t == \"full\"\n\t                            && ((typeof bw == \"object\" && bw[axis.position] > 0) || bw > 0)\n\t                            && (v == axis.min || v == axis.max)))\n\t                        continue;\n\t\n\t                    if (axis.direction == \"x\") {\n\t                        x = axis.p2c(v);\n\t                        yoff = t == \"full\" ? -plotHeight : t;\n\t\n\t                        if (axis.position == \"top\")\n\t                            yoff = -yoff;\n\t                    }\n\t                    else {\n\t                        y = axis.p2c(v);\n\t                        xoff = t == \"full\" ? -plotWidth : t;\n\t\n\t                        if (axis.position == \"left\")\n\t                            xoff = -xoff;\n\t                    }\n\t\n\t                    if (ctx.lineWidth == 1) {\n\t                        if (axis.direction == \"x\")\n\t                            x = Math.floor(x) + 0.5;\n\t                        else\n\t                            y = Math.floor(y) + 0.5;\n\t                    }\n\t\n\t                    ctx.moveTo(x, y);\n\t                    ctx.lineTo(x + xoff, y + yoff);\n\t                }\n\t\n\t                ctx.stroke();\n\t            }\n\t\n\t\n\t            // draw border\n\t            if (bw) {\n\t                // If either borderWidth or borderColor is an object, then draw the border\n\t                // line by line instead of as one rectangle\n\t                bc = options.grid.borderColor;\n\t                if(typeof bw == \"object\" || typeof bc == \"object\") {\n\t                    if (typeof bw !== \"object\") {\n\t                        bw = {top: bw, right: bw, bottom: bw, left: bw};\n\t                    }\n\t                    if (typeof bc !== \"object\") {\n\t                        bc = {top: bc, right: bc, bottom: bc, left: bc};\n\t                    }\n\t\n\t                    if (bw.top > 0) {\n\t                        ctx.strokeStyle = bc.top;\n\t                        ctx.lineWidth = bw.top;\n\t                        ctx.beginPath();\n\t                        ctx.moveTo(0 - bw.left, 0 - bw.top/2);\n\t                        ctx.lineTo(plotWidth, 0 - bw.top/2);\n\t                        ctx.stroke();\n\t                    }\n\t\n\t                    if (bw.right > 0) {\n\t                        ctx.strokeStyle = bc.right;\n\t                        ctx.lineWidth = bw.right;\n\t                        ctx.beginPath();\n\t                        ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);\n\t                        ctx.lineTo(plotWidth + bw.right / 2, plotHeight);\n\t                        ctx.stroke();\n\t                    }\n\t\n\t                    if (bw.bottom > 0) {\n\t                        ctx.strokeStyle = bc.bottom;\n\t                        ctx.lineWidth = bw.bottom;\n\t                        ctx.beginPath();\n\t                        ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);\n\t                        ctx.lineTo(0, plotHeight + bw.bottom / 2);\n\t                        ctx.stroke();\n\t                    }\n\t\n\t                    if (bw.left > 0) {\n\t                        ctx.strokeStyle = bc.left;\n\t                        ctx.lineWidth = bw.left;\n\t                        ctx.beginPath();\n\t                        ctx.moveTo(0 - bw.left/2, plotHeight + bw.bottom);\n\t                        ctx.lineTo(0- bw.left/2, 0);\n\t                        ctx.stroke();\n\t                    }\n\t                }\n\t                else {\n\t                    ctx.lineWidth = bw;\n\t                    ctx.strokeStyle = options.grid.borderColor;\n\t                    ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);\n\t                }\n\t            }\n\t\n\t            ctx.restore();\n\t        }\n\t\n\t        function drawAxisLabels() {\n\t\n\t            $.each(allAxes(), function (_, axis) {\n\t                var box = axis.box,\n\t                    legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n\t                    layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n\t                    font = axis.options.font || \"flot-tick-label tickLabel\",\n\t                    tick, x, y, halign, valign;\n\t\n\t                // Remove text before checking for axis.show and ticks.length;\n\t                // otherwise plugins, like flot-tickrotor, that draw their own\n\t                // tick labels will end up with both theirs and the defaults.\n\t\n\t                surface.removeText(layer);\n\t\n\t                if (!axis.show || axis.ticks.length == 0)\n\t                    return;\n\t\n\t                for (var i = 0; i < axis.ticks.length; ++i) {\n\t\n\t                    tick = axis.ticks[i];\n\t                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)\n\t                        continue;\n\t\n\t                    if (axis.direction == \"x\") {\n\t                        halign = \"center\";\n\t                        x = plotOffset.left + axis.p2c(tick.v);\n\t                        if (axis.position == \"bottom\") {\n\t                            y = box.top + box.padding;\n\t                        } else {\n\t                            y = box.top + box.height - box.padding;\n\t                            valign = \"bottom\";\n\t                        }\n\t                    } else {\n\t                        valign = \"middle\";\n\t                        y = plotOffset.top + axis.p2c(tick.v);\n\t                        if (axis.position == \"left\") {\n\t                            x = box.left + box.width - box.padding;\n\t                            halign = \"right\";\n\t                        } else {\n\t                            x = box.left + box.padding;\n\t                        }\n\t                    }\n\t\n\t                    surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);\n\t                }\n\t            });\n\t        }\n\t\n\t        function drawSeries(series) {\n\t            if (series.lines.show)\n\t                drawSeriesLines(series);\n\t            if (series.bars.show)\n\t                drawSeriesBars(series);\n\t            if (series.points.show)\n\t                drawSeriesPoints(series);\n\t        }\n\t\n\t        function drawSeriesLines(series) {\n\t            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {\n\t                var points = datapoints.points,\n\t                    ps = datapoints.pointsize,\n\t                    prevx = null, prevy = null;\n\t\n\t                ctx.beginPath();\n\t                for (var i = ps; i < points.length; i += ps) {\n\t                    var x1 = points[i - ps], y1 = points[i - ps + 1],\n\t                        x2 = points[i], y2 = points[i + 1];\n\t\n\t                    if (x1 == null || x2 == null)\n\t                        continue;\n\t\n\t                    // clip with ymin\n\t                    if (y1 <= y2 && y1 < axisy.min) {\n\t                        if (y2 < axisy.min)\n\t                            continue;   // line segment is outside\n\t                        // compute new intersection point\n\t                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n\t                        y1 = axisy.min;\n\t                    }\n\t                    else if (y2 <= y1 && y2 < axisy.min) {\n\t                        if (y1 < axisy.min)\n\t                            continue;\n\t                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n\t                        y2 = axisy.min;\n\t                    }\n\t\n\t                    // clip with ymax\n\t                    if (y1 >= y2 && y1 > axisy.max) {\n\t                        if (y2 > axisy.max)\n\t                            continue;\n\t                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n\t                        y1 = axisy.max;\n\t                    }\n\t                    else if (y2 >= y1 && y2 > axisy.max) {\n\t                        if (y1 > axisy.max)\n\t                            continue;\n\t                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n\t                        y2 = axisy.max;\n\t                    }\n\t\n\t                    // clip with xmin\n\t                    if (x1 <= x2 && x1 < axisx.min) {\n\t                        if (x2 < axisx.min)\n\t                            continue;\n\t                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n\t                        x1 = axisx.min;\n\t                    }\n\t                    else if (x2 <= x1 && x2 < axisx.min) {\n\t                        if (x1 < axisx.min)\n\t                            continue;\n\t                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n\t                        x2 = axisx.min;\n\t                    }\n\t\n\t                    // clip with xmax\n\t                    if (x1 >= x2 && x1 > axisx.max) {\n\t                        if (x2 > axisx.max)\n\t                            continue;\n\t                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n\t                        x1 = axisx.max;\n\t                    }\n\t                    else if (x2 >= x1 && x2 > axisx.max) {\n\t                        if (x1 > axisx.max)\n\t                            continue;\n\t                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n\t                        x2 = axisx.max;\n\t                    }\n\t\n\t                    if (x1 != prevx || y1 != prevy)\n\t                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\n\t\n\t                    prevx = x2;\n\t                    prevy = y2;\n\t                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);\n\t                }\n\t                ctx.stroke();\n\t            }\n\t\n\t            function plotLineArea(datapoints, axisx, axisy) {\n\t                var points = datapoints.points,\n\t                    ps = datapoints.pointsize,\n\t                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),\n\t                    i = 0, top, areaOpen = false,\n\t                    ypos = 1, segmentStart = 0, segmentEnd = 0;\n\t\n\t                // we process each segment in two turns, first forward\n\t                // direction to sketch out top, then once we hit the\n\t                // end we go backwards to sketch the bottom\n\t                while (true) {\n\t                    if (ps > 0 && i > points.length + ps)\n\t                        break;\n\t\n\t                    i += ps; // ps is negative if going backwards\n\t\n\t                    var x1 = points[i - ps],\n\t                        y1 = points[i - ps + ypos],\n\t                        x2 = points[i], y2 = points[i + ypos];\n\t\n\t                    if (areaOpen) {\n\t                        if (ps > 0 && x1 != null && x2 == null) {\n\t                            // at turning point\n\t                            segmentEnd = i;\n\t                            ps = -ps;\n\t                            ypos = 2;\n\t                            continue;\n\t                        }\n\t\n\t                        if (ps < 0 && i == segmentStart + ps) {\n\t                            // done with the reverse sweep\n\t                            ctx.fill();\n\t                            areaOpen = false;\n\t                            ps = -ps;\n\t                            ypos = 1;\n\t                            i = segmentStart = segmentEnd + ps;\n\t                            continue;\n\t                        }\n\t                    }\n\t\n\t                    if (x1 == null || x2 == null)\n\t                        continue;\n\t\n\t                    // clip x values\n\t\n\t                    // clip with xmin\n\t                    if (x1 <= x2 && x1 < axisx.min) {\n\t                        if (x2 < axisx.min)\n\t                            continue;\n\t                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n\t                        x1 = axisx.min;\n\t                    }\n\t                    else if (x2 <= x1 && x2 < axisx.min) {\n\t                        if (x1 < axisx.min)\n\t                            continue;\n\t                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n\t                        x2 = axisx.min;\n\t                    }\n\t\n\t                    // clip with xmax\n\t                    if (x1 >= x2 && x1 > axisx.max) {\n\t                        if (x2 > axisx.max)\n\t                            continue;\n\t                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n\t                        x1 = axisx.max;\n\t                    }\n\t                    else if (x2 >= x1 && x2 > axisx.max) {\n\t                        if (x1 > axisx.max)\n\t                            continue;\n\t                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n\t                        x2 = axisx.max;\n\t                    }\n\t\n\t                    if (!areaOpen) {\n\t                        // open area\n\t                        ctx.beginPath();\n\t                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));\n\t                        areaOpen = true;\n\t                    }\n\t\n\t                    // now first check the case where both is outside\n\t                    if (y1 >= axisy.max && y2 >= axisy.max) {\n\t                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));\n\t                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));\n\t                        continue;\n\t                    }\n\t                    else if (y1 <= axisy.min && y2 <= axisy.min) {\n\t                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));\n\t                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));\n\t                        continue;\n\t                    }\n\t\n\t                    // else it's a bit more complicated, there might\n\t                    // be a flat maxed out rectangle first, then a\n\t                    // triangular cutout or reverse; to find these\n\t                    // keep track of the current x values\n\t                    var x1old = x1, x2old = x2;\n\t\n\t                    // clip the y values, without shortcutting, we\n\t                    // go through all cases in turn\n\t\n\t                    // clip with ymin\n\t                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {\n\t                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n\t                        y1 = axisy.min;\n\t                    }\n\t                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {\n\t                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n\t                        y2 = axisy.min;\n\t                    }\n\t\n\t                    // clip with ymax\n\t                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {\n\t                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n\t                        y1 = axisy.max;\n\t                    }\n\t                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {\n\t                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n\t                        y2 = axisy.max;\n\t                    }\n\t\n\t                    // if the x value was changed we got a rectangle\n\t                    // to fill\n\t                    if (x1 != x1old) {\n\t                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));\n\t                        // it goes to (x1, y1), but we fill that below\n\t                    }\n\t\n\t                    // fill triangular section, this sometimes result\n\t                    // in redundant points if (x1, y1) hasn't changed\n\t                    // from previous line to, but we just ignore that\n\t                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));\n\t                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n\t\n\t                    // fill the other rectangle if it's there\n\t                    if (x2 != x2old) {\n\t                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n\t                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));\n\t                    }\n\t                }\n\t            }\n\t\n\t            ctx.save();\n\t            ctx.translate(plotOffset.left, plotOffset.top);\n\t            ctx.lineJoin = \"round\";\n\t\n\t            var lw = series.lines.lineWidth,\n\t                sw = series.shadowSize;\n\t            // FIXME: consider another form of shadow when filling is turned on\n\t            if (lw > 0 && sw > 0) {\n\t                // draw shadow as a thick and thin line with transparency\n\t                ctx.lineWidth = sw;\n\t                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n\t                // position shadow at angle from the mid of line\n\t                var angle = Math.PI/18;\n\t                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);\n\t                ctx.lineWidth = sw/2;\n\t                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);\n\t            }\n\t\n\t            ctx.lineWidth = lw;\n\t            ctx.strokeStyle = series.color;\n\t            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);\n\t            if (fillStyle) {\n\t                ctx.fillStyle = fillStyle;\n\t                plotLineArea(series.datapoints, series.xaxis, series.yaxis);\n\t            }\n\t\n\t            if (lw > 0)\n\t                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);\n\t            ctx.restore();\n\t        }\n\t\n\t        function drawSeriesPoints(series) {\n\t            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {\n\t                var points = datapoints.points, ps = datapoints.pointsize;\n\t\n\t                for (var i = 0; i < points.length; i += ps) {\n\t                    var x = points[i], y = points[i + 1];\n\t                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\n\t                        continue;\n\t\n\t                    ctx.beginPath();\n\t                    x = axisx.p2c(x);\n\t                    y = axisy.p2c(y) + offset;\n\t                    if (symbol == \"circle\")\n\t                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);\n\t                    else\n\t                        symbol(ctx, x, y, radius, shadow);\n\t                    ctx.closePath();\n\t\n\t                    if (fillStyle) {\n\t                        ctx.fillStyle = fillStyle;\n\t                        ctx.fill();\n\t                    }\n\t                    ctx.stroke();\n\t                }\n\t            }\n\t\n\t            ctx.save();\n\t            ctx.translate(plotOffset.left, plotOffset.top);\n\t\n\t            var lw = series.points.lineWidth,\n\t                sw = series.shadowSize,\n\t                radius = series.points.radius,\n\t                symbol = series.points.symbol;\n\t\n\t            // If the user sets the line width to 0, we change it to a very \n\t            // small value. A line width of 0 seems to force the default of 1.\n\t            // Doing the conditional here allows the shadow setting to still be \n\t            // optional even with a lineWidth of 0.\n\t\n\t            if( lw == 0 )\n\t                lw = 0.0001;\n\t\n\t            if (lw > 0 && sw > 0) {\n\t                // draw shadow in two steps\n\t                var w = sw / 2;\n\t                ctx.lineWidth = w;\n\t                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n\t                plotPoints(series.datapoints, radius, null, w + w/2, true,\n\t                           series.xaxis, series.yaxis, symbol);\n\t\n\t                ctx.strokeStyle = \"rgba(0,0,0,0.2)\";\n\t                plotPoints(series.datapoints, radius, null, w/2, true,\n\t                           series.xaxis, series.yaxis, symbol);\n\t            }\n\t\n\t            ctx.lineWidth = lw;\n\t            ctx.strokeStyle = series.color;\n\t            plotPoints(series.datapoints, radius,\n\t                       getFillStyle(series.points, series.color), 0, false,\n\t                       series.xaxis, series.yaxis, symbol);\n\t            ctx.restore();\n\t        }\n\t\n\t        function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {\n\t            var left, right, bottom, top,\n\t                drawLeft, drawRight, drawTop, drawBottom,\n\t                tmp;\n\t\n\t            // in horizontal mode, we start the bar from the left\n\t            // instead of from the bottom so it appears to be\n\t            // horizontal rather than vertical\n\t            if (horizontal) {\n\t                drawBottom = drawRight = drawTop = true;\n\t                drawLeft = false;\n\t                left = b;\n\t                right = x;\n\t                top = y + barLeft;\n\t                bottom = y + barRight;\n\t\n\t                // account for negative bars\n\t                if (right < left) {\n\t                    tmp = right;\n\t                    right = left;\n\t                    left = tmp;\n\t                    drawLeft = true;\n\t                    drawRight = false;\n\t                }\n\t            }\n\t            else {\n\t                drawLeft = drawRight = drawTop = true;\n\t                drawBottom = false;\n\t                left = x + barLeft;\n\t                right = x + barRight;\n\t                bottom = b;\n\t                top = y;\n\t\n\t                // account for negative bars\n\t                if (top < bottom) {\n\t                    tmp = top;\n\t                    top = bottom;\n\t                    bottom = tmp;\n\t                    drawBottom = true;\n\t                    drawTop = false;\n\t                }\n\t            }\n\t\n\t            // clip\n\t            if (right < axisx.min || left > axisx.max ||\n\t                top < axisy.min || bottom > axisy.max)\n\t                return;\n\t\n\t            if (left < axisx.min) {\n\t                left = axisx.min;\n\t                drawLeft = false;\n\t            }\n\t\n\t            if (right > axisx.max) {\n\t                right = axisx.max;\n\t                drawRight = false;\n\t            }\n\t\n\t            if (bottom < axisy.min) {\n\t                bottom = axisy.min;\n\t                drawBottom = false;\n\t            }\n\t\n\t            if (top > axisy.max) {\n\t                top = axisy.max;\n\t                drawTop = false;\n\t            }\n\t\n\t            left = axisx.p2c(left);\n\t            bottom = axisy.p2c(bottom);\n\t            right = axisx.p2c(right);\n\t            top = axisy.p2c(top);\n\t\n\t            // fill the bar\n\t            if (fillStyleCallback) {\n\t                c.fillStyle = fillStyleCallback(bottom, top);\n\t                c.fillRect(left, top, right - left, bottom - top)\n\t            }\n\t\n\t            // draw outline\n\t            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {\n\t                c.beginPath();\n\t\n\t                // FIXME: inline moveTo is buggy with excanvas\n\t                c.moveTo(left, bottom);\n\t                if (drawLeft)\n\t                    c.lineTo(left, top);\n\t                else\n\t                    c.moveTo(left, top);\n\t                if (drawTop)\n\t                    c.lineTo(right, top);\n\t                else\n\t                    c.moveTo(right, top);\n\t                if (drawRight)\n\t                    c.lineTo(right, bottom);\n\t                else\n\t                    c.moveTo(right, bottom);\n\t                if (drawBottom)\n\t                    c.lineTo(left, bottom);\n\t                else\n\t                    c.moveTo(left, bottom);\n\t                c.stroke();\n\t            }\n\t        }\n\t\n\t        function drawSeriesBars(series) {\n\t            function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {\n\t                var points = datapoints.points, ps = datapoints.pointsize;\n\t\n\t                for (var i = 0; i < points.length; i += ps) {\n\t                    if (points[i] == null)\n\t                        continue;\n\t                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);\n\t                }\n\t            }\n\t\n\t            ctx.save();\n\t            ctx.translate(plotOffset.left, plotOffset.top);\n\t\n\t            // FIXME: figure out a way to add shadows (for instance along the right edge)\n\t            ctx.lineWidth = series.bars.lineWidth;\n\t            ctx.strokeStyle = series.color;\n\t\n\t            var barLeft;\n\t\n\t            switch (series.bars.align) {\n\t                case \"left\":\n\t                    barLeft = 0;\n\t                    break;\n\t                case \"right\":\n\t                    barLeft = -series.bars.barWidth;\n\t                    break;\n\t                default:\n\t                    barLeft = -series.bars.barWidth / 2;\n\t            }\n\t\n\t            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;\n\t            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);\n\t            ctx.restore();\n\t        }\n\t\n\t        function getFillStyle(filloptions, seriesColor, bottom, top) {\n\t            var fill = filloptions.fill;\n\t            if (!fill)\n\t                return null;\n\t\n\t            if (filloptions.fillColor)\n\t                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);\n\t\n\t            var c = $.color.parse(seriesColor);\n\t            c.a = typeof fill == \"number\" ? fill : 0.4;\n\t            c.normalize();\n\t            return c.toString();\n\t        }\n\t\n\t        function insertLegend() {\n\t\n\t            if (options.legend.container != null) {\n\t                $(options.legend.container).html(\"\");\n\t            } else {\n\t                placeholder.find(\".legend\").remove();\n\t            }\n\t\n\t            if (!options.legend.show) {\n\t                return;\n\t            }\n\t\n\t            var fragments = [], entries = [], rowStarted = false,\n\t                lf = options.legend.labelFormatter, s, label;\n\t\n\t            // Build a list of legend entries, with each having a label and a color\n\t\n\t            for (var i = 0; i < series.length; ++i) {\n\t                s = series[i];\n\t                if (s.label) {\n\t                    label = lf ? lf(s.label, s) : s.label;\n\t                    if (label) {\n\t                        entries.push({\n\t                            label: label,\n\t                            color: s.color\n\t                        });\n\t                    }\n\t                }\n\t            }\n\t\n\t            // Sort the legend using either the default or a custom comparator\n\t\n\t            if (options.legend.sorted) {\n\t                if ($.isFunction(options.legend.sorted)) {\n\t                    entries.sort(options.legend.sorted);\n\t                } else if (options.legend.sorted == \"reverse\") {\n\t                \tentries.reverse();\n\t                } else {\n\t                    var ascending = options.legend.sorted != \"descending\";\n\t                    entries.sort(function(a, b) {\n\t                        return a.label == b.label ? 0 : (\n\t                            (a.label < b.label) != ascending ? 1 : -1   // Logical XOR\n\t                        );\n\t                    });\n\t                }\n\t            }\n\t\n\t            // Generate markup for the list of entries, in their final order\n\t\n\t            for (var i = 0; i < entries.length; ++i) {\n\t\n\t                var entry = entries[i];\n\t\n\t                if (i % options.legend.noColumns == 0) {\n\t                    if (rowStarted)\n\t                        fragments.push('</tr>');\n\t                    fragments.push('<tr>');\n\t                    rowStarted = true;\n\t                }\n\t\n\t                fragments.push(\n\t                    '<td class=\"legendColorBox\"><div style=\"border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px\"><div style=\"width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden\"></div></div></td>' +\n\t                    '<td class=\"legendLabel\">' + entry.label + '</td>'\n\t                );\n\t            }\n\t\n\t            if (rowStarted)\n\t                fragments.push('</tr>');\n\t\n\t            if (fragments.length == 0)\n\t                return;\n\t\n\t            var table = '<table style=\"font-size:smaller;color:' + options.grid.color + '\">' + fragments.join(\"\") + '</table>';\n\t            if (options.legend.container != null)\n\t                $(options.legend.container).html(table);\n\t            else {\n\t                var pos = \"\",\n\t                    p = options.legend.position,\n\t                    m = options.legend.margin;\n\t                if (m[0] == null)\n\t                    m = [m, m];\n\t                if (p.charAt(0) == \"n\")\n\t                    pos += 'top:' + (m[1] + plotOffset.top) + 'px;';\n\t                else if (p.charAt(0) == \"s\")\n\t                    pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';\n\t                if (p.charAt(1) == \"e\")\n\t                    pos += 'right:' + (m[0] + plotOffset.right) + 'px;';\n\t                else if (p.charAt(1) == \"w\")\n\t                    pos += 'left:' + (m[0] + plotOffset.left) + 'px;';\n\t                var legend = $('<div class=\"legend\">' + table.replace('style=\"', 'style=\"position:absolute;' + pos +';') + '</div>').appendTo(placeholder);\n\t                if (options.legend.backgroundOpacity != 0.0) {\n\t                    // put in the transparent background\n\t                    // separately to avoid blended labels and\n\t                    // label boxes\n\t                    var c = options.legend.backgroundColor;\n\t                    if (c == null) {\n\t                        c = options.grid.backgroundColor;\n\t                        if (c && typeof c == \"string\")\n\t                            c = $.color.parse(c);\n\t                        else\n\t                            c = $.color.extract(legend, 'background-color');\n\t                        c.a = 1;\n\t                        c = c.toString();\n\t                    }\n\t                    var div = legend.children();\n\t                    $('<div style=\"position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos +'background-color:' + c + ';\"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);\n\t                }\n\t            }\n\t        }\n\t\n\t\n\t        // interactive features\n\t\n\t        var highlights = [],\n\t            redrawTimeout = null;\n\t\n\t        // returns the data item the mouse is over, or null if none is found\n\t        function findNearbyItem(mouseX, mouseY, seriesFilter) {\n\t            var maxDistance = options.grid.mouseActiveRadius,\n\t                smallestDistance = maxDistance * maxDistance + 1,\n\t                item = null, foundPoint = false, i, j, ps;\n\t\n\t            for (i = series.length - 1; i >= 0; --i) {\n\t                if (!seriesFilter(series[i]))\n\t                    continue;\n\t\n\t                var s = series[i],\n\t                    axisx = s.xaxis,\n\t                    axisy = s.yaxis,\n\t                    points = s.datapoints.points,\n\t                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster\n\t                    my = axisy.c2p(mouseY),\n\t                    maxx = maxDistance / axisx.scale,\n\t                    maxy = maxDistance / axisy.scale;\n\t\n\t                ps = s.datapoints.pointsize;\n\t                // with inverse transforms, we can't use the maxx/maxy\n\t                // optimization, sadly\n\t                if (axisx.options.inverseTransform)\n\t                    maxx = Number.MAX_VALUE;\n\t                if (axisy.options.inverseTransform)\n\t                    maxy = Number.MAX_VALUE;\n\t\n\t                if (s.lines.show || s.points.show) {\n\t                    for (j = 0; j < points.length; j += ps) {\n\t                        var x = points[j], y = points[j + 1];\n\t                        if (x == null)\n\t                            continue;\n\t\n\t                        // For points and lines, the cursor must be within a\n\t                        // certain distance to the data point\n\t                        if (x - mx > maxx || x - mx < -maxx ||\n\t                            y - my > maxy || y - my < -maxy)\n\t                            continue;\n\t\n\t                        // We have to calculate distances in pixels, not in\n\t                        // data units, because the scales of the axes may be different\n\t                        var dx = Math.abs(axisx.p2c(x) - mouseX),\n\t                            dy = Math.abs(axisy.p2c(y) - mouseY),\n\t                            dist = dx * dx + dy * dy; // we save the sqrt\n\t\n\t                        // use <= to ensure last point takes precedence\n\t                        // (last generally means on top of)\n\t                        if (dist < smallestDistance) {\n\t                            smallestDistance = dist;\n\t                            item = [i, j / ps];\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if (s.bars.show && !item) { // no other point can be nearby\n\t\n\t                    var barLeft, barRight;\n\t\n\t                    switch (s.bars.align) {\n\t                        case \"left\":\n\t                            barLeft = 0;\n\t                            break;\n\t                        case \"right\":\n\t                            barLeft = -s.bars.barWidth;\n\t                            break;\n\t                        default:\n\t                            barLeft = -s.bars.barWidth / 2;\n\t                    }\n\t\n\t                    barRight = barLeft + s.bars.barWidth;\n\t\n\t                    for (j = 0; j < points.length; j += ps) {\n\t                        var x = points[j], y = points[j + 1], b = points[j + 2];\n\t                        if (x == null)\n\t                            continue;\n\t\n\t                        // for a bar graph, the cursor must be inside the bar\n\t                        if (series[i].bars.horizontal ?\n\t                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) &&\n\t                             my >= y + barLeft && my <= y + barRight) :\n\t                            (mx >= x + barLeft && mx <= x + barRight &&\n\t                             my >= Math.min(b, y) && my <= Math.max(b, y)))\n\t                                item = [i, j / ps];\n\t                    }\n\t                }\n\t            }\n\t\n\t            if (item) {\n\t                i = item[0];\n\t                j = item[1];\n\t                ps = series[i].datapoints.pointsize;\n\t\n\t                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),\n\t                         dataIndex: j,\n\t                         series: series[i],\n\t                         seriesIndex: i };\n\t            }\n\t\n\t            return null;\n\t        }\n\t\n\t        function onMouseMove(e) {\n\t            if (options.grid.hoverable)\n\t                triggerClickHoverEvent(\"plothover\", e,\n\t                                       function (s) { return s[\"hoverable\"] != false; });\n\t        }\n\t\n\t        function onMouseLeave(e) {\n\t            if (options.grid.hoverable)\n\t                triggerClickHoverEvent(\"plothover\", e,\n\t                                       function (s) { return false; });\n\t        }\n\t\n\t        function onClick(e) {\n\t            triggerClickHoverEvent(\"plotclick\", e,\n\t                                   function (s) { return s[\"clickable\"] != false; });\n\t        }\n\t\n\t        // trigger click or hover event (they send the same parameters\n\t        // so we share their code)\n\t        function triggerClickHoverEvent(eventname, event, seriesFilter) {\n\t            var offset = eventHolder.offset(),\n\t                canvasX = event.pageX - offset.left - plotOffset.left,\n\t                canvasY = event.pageY - offset.top - plotOffset.top,\n\t            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });\n\t\n\t            pos.pageX = event.pageX;\n\t            pos.pageY = event.pageY;\n\t\n\t            var item = findNearbyItem(canvasX, canvasY, seriesFilter);\n\t\n\t            if (item) {\n\t                // fill in mouse pos for any listeners out there\n\t                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);\n\t                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);\n\t            }\n\t\n\t            if (options.grid.autoHighlight) {\n\t                // clear auto-highlights\n\t                for (var i = 0; i < highlights.length; ++i) {\n\t                    var h = highlights[i];\n\t                    if (h.auto == eventname &&\n\t                        !(item && h.series == item.series &&\n\t                          h.point[0] == item.datapoint[0] &&\n\t                          h.point[1] == item.datapoint[1]))\n\t                        unhighlight(h.series, h.point);\n\t                }\n\t\n\t                if (item)\n\t                    highlight(item.series, item.datapoint, eventname);\n\t            }\n\t\n\t            placeholder.trigger(eventname, [ pos, item ]);\n\t        }\n\t\n\t        function triggerRedrawOverlay() {\n\t            var t = options.interaction.redrawOverlayInterval;\n\t            if (t == -1) {      // skip event queue\n\t                drawOverlay();\n\t                return;\n\t            }\n\t\n\t            if (!redrawTimeout)\n\t                redrawTimeout = setTimeout(drawOverlay, t);\n\t        }\n\t\n\t        function drawOverlay() {\n\t            redrawTimeout = null;\n\t\n\t            // draw highlights\n\t            octx.save();\n\t            overlay.clear();\n\t            octx.translate(plotOffset.left, plotOffset.top);\n\t\n\t            var i, hi;\n\t            for (i = 0; i < highlights.length; ++i) {\n\t                hi = highlights[i];\n\t\n\t                if (hi.series.bars.show)\n\t                    drawBarHighlight(hi.series, hi.point);\n\t                else\n\t                    drawPointHighlight(hi.series, hi.point);\n\t            }\n\t            octx.restore();\n\t\n\t            executeHooks(hooks.drawOverlay, [octx]);\n\t        }\n\t\n\t        function highlight(s, point, auto) {\n\t            if (typeof s == \"number\")\n\t                s = series[s];\n\t\n\t            if (typeof point == \"number\") {\n\t                var ps = s.datapoints.pointsize;\n\t                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n\t            }\n\t\n\t            var i = indexOfHighlight(s, point);\n\t            if (i == -1) {\n\t                highlights.push({ series: s, point: point, auto: auto });\n\t\n\t                triggerRedrawOverlay();\n\t            }\n\t            else if (!auto)\n\t                highlights[i].auto = false;\n\t        }\n\t\n\t        function unhighlight(s, point) {\n\t            if (s == null && point == null) {\n\t                highlights = [];\n\t                triggerRedrawOverlay();\n\t                return;\n\t            }\n\t\n\t            if (typeof s == \"number\")\n\t                s = series[s];\n\t\n\t            if (typeof point == \"number\") {\n\t                var ps = s.datapoints.pointsize;\n\t                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n\t            }\n\t\n\t            var i = indexOfHighlight(s, point);\n\t            if (i != -1) {\n\t                highlights.splice(i, 1);\n\t\n\t                triggerRedrawOverlay();\n\t            }\n\t        }\n\t\n\t        function indexOfHighlight(s, p) {\n\t            for (var i = 0; i < highlights.length; ++i) {\n\t                var h = highlights[i];\n\t                if (h.series == s && h.point[0] == p[0]\n\t                    && h.point[1] == p[1])\n\t                    return i;\n\t            }\n\t            return -1;\n\t        }\n\t\n\t        function drawPointHighlight(series, point) {\n\t            var x = point[0], y = point[1],\n\t                axisx = series.xaxis, axisy = series.yaxis,\n\t                highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString();\n\t\n\t            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\n\t                return;\n\t\n\t            var pointRadius = series.points.radius + series.points.lineWidth / 2;\n\t            octx.lineWidth = pointRadius;\n\t            octx.strokeStyle = highlightColor;\n\t            var radius = 1.5 * pointRadius;\n\t            x = axisx.p2c(x);\n\t            y = axisy.p2c(y);\n\t\n\t            octx.beginPath();\n\t            if (series.points.symbol == \"circle\")\n\t                octx.arc(x, y, radius, 0, 2 * Math.PI, false);\n\t            else\n\t                series.points.symbol(octx, x, y, radius, false);\n\t            octx.closePath();\n\t            octx.stroke();\n\t        }\n\t\n\t        function drawBarHighlight(series, point) {\n\t            var highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString(),\n\t                fillStyle = highlightColor,\n\t                barLeft;\n\t\n\t            switch (series.bars.align) {\n\t                case \"left\":\n\t                    barLeft = 0;\n\t                    break;\n\t                case \"right\":\n\t                    barLeft = -series.bars.barWidth;\n\t                    break;\n\t                default:\n\t                    barLeft = -series.bars.barWidth / 2;\n\t            }\n\t\n\t            octx.lineWidth = series.bars.lineWidth;\n\t            octx.strokeStyle = highlightColor;\n\t\n\t            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,\n\t                    function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);\n\t        }\n\t\n\t        function getColorOrGradient(spec, bottom, top, defaultColor) {\n\t            if (typeof spec == \"string\")\n\t                return spec;\n\t            else {\n\t                // assume this is a gradient spec; IE currently only\n\t                // supports a simple vertical gradient properly, so that's\n\t                // what we support too\n\t                var gradient = ctx.createLinearGradient(0, top, 0, bottom);\n\t\n\t                for (var i = 0, l = spec.colors.length; i < l; ++i) {\n\t                    var c = spec.colors[i];\n\t                    if (typeof c != \"string\") {\n\t                        var co = $.color.parse(defaultColor);\n\t                        if (c.brightness != null)\n\t                            co = co.scale('rgb', c.brightness);\n\t                        if (c.opacity != null)\n\t                            co.a *= c.opacity;\n\t                        c = co.toString();\n\t                    }\n\t                    gradient.addColorStop(i / (l - 1), c);\n\t                }\n\t\n\t                return gradient;\n\t            }\n\t        }\n\t    }\n\t\n\t    // Add the plot function to the top level of the jQuery object\n\t\n\t    $.plot = function(placeholder, data, options) {\n\t        //var t0 = new Date();\n\t        var plot = new Plot($(placeholder), data, options, $.plot.plugins);\n\t        //(window.console ? console.log : alert)(\"time used (msecs): \" + ((new Date()).getTime() - t0.getTime()));\n\t        return plot;\n\t    };\n\t\n\t    $.plot.version = \"0.8.3\";\n\t\n\t    $.plot.plugins = [];\n\t\n\t    // Also add the plot function as a chainable property\n\t\n\t    $.fn.plot = function(data, options) {\n\t        return this.each(function() {\n\t            $.plot(this, data, options);\n\t        });\n\t    };\n\t\n\t    // round to nearby lower multiple of base\n\t    function floorInBase(n, base) {\n\t        return base * Math.floor(n / base);\n\t    }\n\t\n\t})(jQuery);\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t/* Flot plugin for selecting regions of a plot.\n\t\n\tCopyright (c) 2007-2014 IOLA and Ole Laursen.\n\tLicensed under the MIT license.\n\t\n\tThe plugin supports these options:\n\t\n\tselection: {\n\t\tmode: null or \"x\" or \"y\" or \"xy\",\n\t\tcolor: color,\n\t\tshape: \"round\" or \"miter\" or \"bevel\",\n\t\tminSize: number of pixels\n\t}\n\t\n\tSelection support is enabled by setting the mode to one of \"x\", \"y\" or \"xy\".\n\tIn \"x\" mode, the user will only be able to specify the x range, similarly for\n\t\"y\" mode. For \"xy\", the selection becomes a rectangle where both ranges can be\n\tspecified. \"color\" is color of the selection (if you need to change the color\n\tlater on, you can get to it with plot.getOptions().selection.color). \"shape\"\n\tis the shape of the corners of the selection.\n\t\n\t\"minSize\" is the minimum size a selection can be in pixels. This value can\n\tbe customized to determine the smallest size a selection can be and still\n\thave the selection rectangle be displayed. When customizing this value, the\n\tfact that it refers to pixels, not axis units must be taken into account.\n\tThus, for example, if there is a bar graph in time mode with BarWidth set to 1\n\tminute, setting \"minSize\" to 1 will not make the minimum selection size 1\n\tminute, but rather 1 pixel. Note also that setting \"minSize\" to 0 will prevent\n\t\"plotunselected\" events from being fired when the user clicks the mouse without\n\tdragging.\n\t\n\tWhen selection support is enabled, a \"plotselected\" event will be emitted on\n\tthe DOM element you passed into the plot function. The event handler gets a\n\tparameter with the ranges selected on the axes, like this:\n\t\n\t\tplaceholder.bind( \"plotselected\", function( event, ranges ) {\n\t\t\talert(\"You selected \" + ranges.xaxis.from + \" to \" + ranges.xaxis.to)\n\t\t\t// similar for yaxis - with multiple axes, the extra ones are in\n\t\t\t// x2axis, x3axis, ...\n\t\t});\n\t\n\tThe \"plotselected\" event is only fired when the user has finished making the\n\tselection. A \"plotselecting\" event is fired during the process with the same\n\tparameters as the \"plotselected\" event, in case you want to know what's\n\thappening while it's happening,\n\t\n\tA \"plotunselected\" event with no arguments is emitted when the user clicks the\n\tmouse to remove the selection. As stated above, setting \"minSize\" to 0 will\n\tdestroy this behavior.\n\t\n\tThe plugin allso adds the following methods to the plot object:\n\t\n\t- setSelection( ranges, preventEvent )\n\t\n\t  Set the selection rectangle. The passed in ranges is on the same form as\n\t  returned in the \"plotselected\" event. If the selection mode is \"x\", you\n\t  should put in either an xaxis range, if the mode is \"y\" you need to put in\n\t  an yaxis range and both xaxis and yaxis if the selection mode is \"xy\", like\n\t  this:\n\t\n\t\tsetSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });\n\t\n\t  setSelection will trigger the \"plotselected\" event when called. If you don't\n\t  want that to happen, e.g. if you're inside a \"plotselected\" handler, pass\n\t  true as the second parameter. If you are using multiple axes, you can\n\t  specify the ranges on any of those, e.g. as x2axis/x3axis/... instead of\n\t  xaxis, the plugin picks the first one it sees.\n\t\n\t- clearSelection( preventEvent )\n\t\n\t  Clear the selection rectangle. Pass in true to avoid getting a\n\t  \"plotunselected\" event.\n\t\n\t- getSelection()\n\t\n\t  Returns the current selection in the same format as the \"plotselected\"\n\t  event. If there's currently no selection, the function returns null.\n\t\n\t*/\n\t\n\t(function ($) {\n\t    function init(plot) {\n\t        var selection = {\n\t                first: { x: -1, y: -1}, second: { x: -1, y: -1},\n\t                show: false,\n\t                active: false\n\t            };\n\t\n\t        // FIXME: The drag handling implemented here should be\n\t        // abstracted out, there's some similar code from a library in\n\t        // the navigation plugin, this should be massaged a bit to fit\n\t        // the Flot cases here better and reused. Doing this would\n\t        // make this plugin much slimmer.\n\t        var savedhandlers = {};\n\t\n\t        var mouseUpHandler = null;\n\t        \n\t        function onMouseMove(e) {\n\t            if (selection.active) {\n\t                updateSelection(e);\n\t                \n\t                plot.getPlaceholder().trigger(\"plotselecting\", [ getSelection() ]);\n\t            }\n\t        }\n\t\n\t        function onMouseDown(e) {\n\t            if (e.which != 1)  // only accept left-click\n\t                return;\n\t            \n\t            // cancel out any text selections\n\t            document.body.focus();\n\t\n\t            // prevent text selection and drag in old-school browsers\n\t            if (document.onselectstart !== undefined && savedhandlers.onselectstart == null) {\n\t                savedhandlers.onselectstart = document.onselectstart;\n\t                document.onselectstart = function () { return false; };\n\t            }\n\t            if (document.ondrag !== undefined && savedhandlers.ondrag == null) {\n\t                savedhandlers.ondrag = document.ondrag;\n\t                document.ondrag = function () { return false; };\n\t            }\n\t\n\t            setSelectionPos(selection.first, e);\n\t\n\t            selection.active = true;\n\t\n\t            // this is a bit silly, but we have to use a closure to be\n\t            // able to whack the same handler again\n\t            mouseUpHandler = function (e) { onMouseUp(e); };\n\t            \n\t            $(document).one(\"mouseup\", mouseUpHandler);\n\t        }\n\t\n\t        function onMouseUp(e) {\n\t            mouseUpHandler = null;\n\t            \n\t            // revert drag stuff for old-school browsers\n\t            if (document.onselectstart !== undefined)\n\t                document.onselectstart = savedhandlers.onselectstart;\n\t            if (document.ondrag !== undefined)\n\t                document.ondrag = savedhandlers.ondrag;\n\t\n\t            // no more dragging\n\t            selection.active = false;\n\t            updateSelection(e);\n\t\n\t            if (selectionIsSane())\n\t                triggerSelectedEvent();\n\t            else {\n\t                // this counts as a clear\n\t                plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n\t                plot.getPlaceholder().trigger(\"plotselecting\", [ null ]);\n\t            }\n\t\n\t            return false;\n\t        }\n\t\n\t        function getSelection() {\n\t            if (!selectionIsSane())\n\t                return null;\n\t            \n\t            if (!selection.show) return null;\n\t\n\t            var r = {}, c1 = selection.first, c2 = selection.second;\n\t            $.each(plot.getAxes(), function (name, axis) {\n\t                if (axis.used) {\n\t                    var p1 = axis.c2p(c1[axis.direction]), p2 = axis.c2p(c2[axis.direction]); \n\t                    r[name] = { from: Math.min(p1, p2), to: Math.max(p1, p2) };\n\t                }\n\t            });\n\t            return r;\n\t        }\n\t\n\t        function triggerSelectedEvent() {\n\t            var r = getSelection();\n\t\n\t            plot.getPlaceholder().trigger(\"plotselected\", [ r ]);\n\t\n\t            // backwards-compat stuff, to be removed in future\n\t            if (r.xaxis && r.yaxis)\n\t                plot.getPlaceholder().trigger(\"selected\", [ { x1: r.xaxis.from, y1: r.yaxis.from, x2: r.xaxis.to, y2: r.yaxis.to } ]);\n\t        }\n\t\n\t        function clamp(min, value, max) {\n\t            return value < min ? min: (value > max ? max: value);\n\t        }\n\t\n\t        function setSelectionPos(pos, e) {\n\t            var o = plot.getOptions();\n\t            var offset = plot.getPlaceholder().offset();\n\t            var plotOffset = plot.getPlotOffset();\n\t            pos.x = clamp(0, e.pageX - offset.left - plotOffset.left, plot.width());\n\t            pos.y = clamp(0, e.pageY - offset.top - plotOffset.top, plot.height());\n\t\n\t            if (o.selection.mode == \"y\")\n\t                pos.x = pos == selection.first ? 0 : plot.width();\n\t\n\t            if (o.selection.mode == \"x\")\n\t                pos.y = pos == selection.first ? 0 : plot.height();\n\t        }\n\t\n\t        function updateSelection(pos) {\n\t            if (pos.pageX == null)\n\t                return;\n\t\n\t            setSelectionPos(selection.second, pos);\n\t            if (selectionIsSane()) {\n\t                selection.show = true;\n\t                plot.triggerRedrawOverlay();\n\t            }\n\t            else\n\t                clearSelection(true);\n\t        }\n\t\n\t        function clearSelection(preventEvent) {\n\t            if (selection.show) {\n\t                selection.show = false;\n\t                plot.triggerRedrawOverlay();\n\t                if (!preventEvent)\n\t                    plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n\t            }\n\t        }\n\t\n\t        // function taken from markings support in Flot\n\t        function extractRange(ranges, coord) {\n\t            var axis, from, to, key, axes = plot.getAxes();\n\t\n\t            for (var k in axes) {\n\t                axis = axes[k];\n\t                if (axis.direction == coord) {\n\t                    key = coord + axis.n + \"axis\";\n\t                    if (!ranges[key] && axis.n == 1)\n\t                        key = coord + \"axis\"; // support x1axis as xaxis\n\t                    if (ranges[key]) {\n\t                        from = ranges[key].from;\n\t                        to = ranges[key].to;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t\n\t            // backwards-compat stuff - to be removed in future\n\t            if (!ranges[key]) {\n\t                axis = coord == \"x\" ? plot.getXAxes()[0] : plot.getYAxes()[0];\n\t                from = ranges[coord + \"1\"];\n\t                to = ranges[coord + \"2\"];\n\t            }\n\t\n\t            // auto-reverse as an added bonus\n\t            if (from != null && to != null && from > to) {\n\t                var tmp = from;\n\t                from = to;\n\t                to = tmp;\n\t            }\n\t            \n\t            return { from: from, to: to, axis: axis };\n\t        }\n\t        \n\t        function setSelection(ranges, preventEvent) {\n\t            var axis, range, o = plot.getOptions();\n\t\n\t            if (o.selection.mode == \"y\") {\n\t                selection.first.x = 0;\n\t                selection.second.x = plot.width();\n\t            }\n\t            else {\n\t                range = extractRange(ranges, \"x\");\n\t\n\t                selection.first.x = range.axis.p2c(range.from);\n\t                selection.second.x = range.axis.p2c(range.to);\n\t            }\n\t\n\t            if (o.selection.mode == \"x\") {\n\t                selection.first.y = 0;\n\t                selection.second.y = plot.height();\n\t            }\n\t            else {\n\t                range = extractRange(ranges, \"y\");\n\t\n\t                selection.first.y = range.axis.p2c(range.from);\n\t                selection.second.y = range.axis.p2c(range.to);\n\t            }\n\t\n\t            selection.show = true;\n\t            plot.triggerRedrawOverlay();\n\t            if (!preventEvent && selectionIsSane())\n\t                triggerSelectedEvent();\n\t        }\n\t\n\t        function selectionIsSane() {\n\t            var minSize = plot.getOptions().selection.minSize;\n\t            return Math.abs(selection.second.x - selection.first.x) >= minSize &&\n\t                Math.abs(selection.second.y - selection.first.y) >= minSize;\n\t        }\n\t\n\t        plot.clearSelection = clearSelection;\n\t        plot.setSelection = setSelection;\n\t        plot.getSelection = getSelection;\n\t\n\t        plot.hooks.bindEvents.push(function(plot, eventHolder) {\n\t            var o = plot.getOptions();\n\t            if (o.selection.mode != null) {\n\t                eventHolder.mousemove(onMouseMove);\n\t                eventHolder.mousedown(onMouseDown);\n\t            }\n\t        });\n\t\n\t\n\t        plot.hooks.drawOverlay.push(function (plot, ctx) {\n\t            // draw selection\n\t            if (selection.show && selectionIsSane()) {\n\t                var plotOffset = plot.getPlotOffset();\n\t                var o = plot.getOptions();\n\t\n\t                ctx.save();\n\t                ctx.translate(plotOffset.left, plotOffset.top);\n\t\n\t                var c = $.color.parse(o.selection.color);\n\t\n\t                ctx.strokeStyle = c.scale('a', 0.8).toString();\n\t                ctx.lineWidth = 1;\n\t                ctx.lineJoin = o.selection.shape;\n\t                ctx.fillStyle = c.scale('a', 0.4).toString();\n\t\n\t                var x = Math.min(selection.first.x, selection.second.x) + 0.5,\n\t                    y = Math.min(selection.first.y, selection.second.y) + 0.5,\n\t                    w = Math.abs(selection.second.x - selection.first.x) - 1,\n\t                    h = Math.abs(selection.second.y - selection.first.y) - 1;\n\t\n\t                ctx.fillRect(x, y, w, h);\n\t                ctx.strokeRect(x, y, w, h);\n\t\n\t                ctx.restore();\n\t            }\n\t        });\n\t        \n\t        plot.hooks.shutdown.push(function (plot, eventHolder) {\n\t            eventHolder.unbind(\"mousemove\", onMouseMove);\n\t            eventHolder.unbind(\"mousedown\", onMouseDown);\n\t            \n\t            if (mouseUpHandler)\n\t                $(document).unbind(\"mouseup\", mouseUpHandler);\n\t        });\n\t\n\t    }\n\t\n\t    $.plot.plugins.push({\n\t        init: init,\n\t        options: {\n\t            selection: {\n\t                mode: null, // one of null, \"x\", \"y\" or \"xy\"\n\t                color: \"#e8cfac\",\n\t                shape: \"round\", // one of \"round\", \"miter\", or \"bevel\"\n\t                minSize: 5 // minimum number of pixels\n\t            }\n\t        },\n\t        name: 'selection',\n\t        version: '1.1'\n\t    });\n\t})(jQuery);\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t/* Pretty handling of time axes.\n\t\n\tCopyright (c) 2007-2014 IOLA and Ole Laursen.\n\tLicensed under the MIT license.\n\t\n\tSet axis.mode to \"time\" to enable. See the section \"Time series data\" in\n\tAPI.txt for details.\n\t\n\t*/\n\t\n\t(function($) {\n\t\n\t\tvar options = {\n\t\t\txaxis: {\n\t\t\t\ttimezone: null,\t\t// \"browser\" for local to the client or timezone for timezone-js\n\t\t\t\ttimeformat: null,\t// format string to use\n\t\t\t\ttwelveHourClock: false,\t// 12 or 24 time in time mode\n\t\t\t\tmonthNames: null\t// list of names of months\n\t\t\t}\n\t\t};\n\t\n\t\t// round to nearby lower multiple of base\n\t\n\t\tfunction floorInBase(n, base) {\n\t\t\treturn base * Math.floor(n / base);\n\t\t}\n\t\n\t\t// Returns a string with the date d formatted according to fmt.\n\t\t// A subset of the Open Group's strftime format is supported.\n\t\n\t\tfunction formatDate(d, fmt, monthNames, dayNames) {\n\t\n\t\t\tif (typeof d.strftime == \"function\") {\n\t\t\t\treturn d.strftime(fmt);\n\t\t\t}\n\t\n\t\t\tvar leftPad = function(n, pad) {\n\t\t\t\tn = \"\" + n;\n\t\t\t\tpad = \"\" + (pad == null ? \"0\" : pad);\n\t\t\t\treturn n.length == 1 ? pad + n : n;\n\t\t\t};\n\t\n\t\t\tvar r = [];\n\t\t\tvar escape = false;\n\t\t\tvar hours = d.getHours();\n\t\t\tvar isAM = hours < 12;\n\t\n\t\t\tif (monthNames == null) {\n\t\t\t\tmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\t\t\t}\n\t\n\t\t\tif (dayNames == null) {\n\t\t\t\tdayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\t\t\t}\n\t\n\t\t\tvar hours12;\n\t\n\t\t\tif (hours > 12) {\n\t\t\t\thours12 = hours - 12;\n\t\t\t} else if (hours == 0) {\n\t\t\t\thours12 = 12;\n\t\t\t} else {\n\t\t\t\thours12 = hours;\n\t\t\t}\n\t\n\t\t\tfor (var i = 0; i < fmt.length; ++i) {\n\t\n\t\t\t\tvar c = fmt.charAt(i);\n\t\n\t\t\t\tif (escape) {\n\t\t\t\t\tswitch (c) {\n\t\t\t\t\t\tcase 'a': c = \"\" + dayNames[d.getDay()]; break;\n\t\t\t\t\t\tcase 'b': c = \"\" + monthNames[d.getMonth()]; break;\n\t\t\t\t\t\tcase 'd': c = leftPad(d.getDate()); break;\n\t\t\t\t\t\tcase 'e': c = leftPad(d.getDate(), \" \"); break;\n\t\t\t\t\t\tcase 'h':\t// For back-compat with 0.7; remove in 1.0\n\t\t\t\t\t\tcase 'H': c = leftPad(hours); break;\n\t\t\t\t\t\tcase 'I': c = leftPad(hours12); break;\n\t\t\t\t\t\tcase 'l': c = leftPad(hours12, \" \"); break;\n\t\t\t\t\t\tcase 'm': c = leftPad(d.getMonth() + 1); break;\n\t\t\t\t\t\tcase 'M': c = leftPad(d.getMinutes()); break;\n\t\t\t\t\t\t// quarters not in Open Group's strftime specification\n\t\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t\tc = \"\" + (Math.floor(d.getMonth() / 3) + 1); break;\n\t\t\t\t\t\tcase 'S': c = leftPad(d.getSeconds()); break;\n\t\t\t\t\t\tcase 'y': c = leftPad(d.getFullYear() % 100); break;\n\t\t\t\t\t\tcase 'Y': c = \"\" + d.getFullYear(); break;\n\t\t\t\t\t\tcase 'p': c = (isAM) ? (\"\" + \"am\") : (\"\" + \"pm\"); break;\n\t\t\t\t\t\tcase 'P': c = (isAM) ? (\"\" + \"AM\") : (\"\" + \"PM\"); break;\n\t\t\t\t\t\tcase 'w': c = \"\" + d.getDay(); break;\n\t\t\t\t\t}\n\t\t\t\t\tr.push(c);\n\t\t\t\t\tescape = false;\n\t\t\t\t} else {\n\t\t\t\t\tif (c == \"%\") {\n\t\t\t\t\t\tescape = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr.push(c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn r.join(\"\");\n\t\t}\n\t\n\t\t// To have a consistent view of time-based data independent of which time\n\t\t// zone the client happens to be in we need a date-like object independent\n\t\t// of time zones.  This is done through a wrapper that only calls the UTC\n\t\t// versions of the accessor methods.\n\t\n\t\tfunction makeUtcWrapper(d) {\n\t\n\t\t\tfunction addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {\n\t\t\t\tsourceObj[sourceMethod] = function() {\n\t\t\t\t\treturn targetObj[targetMethod].apply(targetObj, arguments);\n\t\t\t\t};\n\t\t\t};\n\t\n\t\t\tvar utc = {\n\t\t\t\tdate: d\n\t\t\t};\n\t\n\t\t\t// support strftime, if found\n\t\n\t\t\tif (d.strftime != undefined) {\n\t\t\t\taddProxyMethod(utc, \"strftime\", d, \"strftime\");\n\t\t\t}\n\t\n\t\t\taddProxyMethod(utc, \"getTime\", d, \"getTime\");\n\t\t\taddProxyMethod(utc, \"setTime\", d, \"setTime\");\n\t\n\t\t\tvar props = [\"Date\", \"Day\", \"FullYear\", \"Hours\", \"Milliseconds\", \"Minutes\", \"Month\", \"Seconds\"];\n\t\n\t\t\tfor (var p = 0; p < props.length; p++) {\n\t\t\t\taddProxyMethod(utc, \"get\" + props[p], d, \"getUTC\" + props[p]);\n\t\t\t\taddProxyMethod(utc, \"set\" + props[p], d, \"setUTC\" + props[p]);\n\t\t\t}\n\t\n\t\t\treturn utc;\n\t\t};\n\t\n\t\t// select time zone strategy.  This returns a date-like object tied to the\n\t\t// desired timezone\n\t\n\t\tfunction dateGenerator(ts, opts) {\n\t\t\tif (opts.timezone == \"browser\") {\n\t\t\t\treturn new Date(ts);\n\t\t\t} else if (!opts.timezone || opts.timezone == \"utc\") {\n\t\t\t\treturn makeUtcWrapper(new Date(ts));\n\t\t\t} else if (typeof timezoneJS != \"undefined\" && typeof timezoneJS.Date != \"undefined\") {\n\t\t\t\tvar d = new timezoneJS.Date();\n\t\t\t\t// timezone-js is fickle, so be sure to set the time zone before\n\t\t\t\t// setting the time.\n\t\t\t\td.setTimezone(opts.timezone);\n\t\t\t\td.setTime(ts);\n\t\t\t\treturn d;\n\t\t\t} else {\n\t\t\t\treturn makeUtcWrapper(new Date(ts));\n\t\t\t}\n\t\t}\n\t\t\n\t\t// map of app. size of time units in milliseconds\n\t\n\t\tvar timeUnitSize = {\n\t\t\t\"second\": 1000,\n\t\t\t\"minute\": 60 * 1000,\n\t\t\t\"hour\": 60 * 60 * 1000,\n\t\t\t\"day\": 24 * 60 * 60 * 1000,\n\t\t\t\"month\": 30 * 24 * 60 * 60 * 1000,\n\t\t\t\"quarter\": 3 * 30 * 24 * 60 * 60 * 1000,\n\t\t\t\"year\": 365.2425 * 24 * 60 * 60 * 1000\n\t\t};\n\t\n\t\t// the allowed tick sizes, after 1 year we use\n\t\t// an integer algorithm\n\t\n\t\tvar baseSpec = [\n\t\t\t[1, \"second\"], [2, \"second\"], [5, \"second\"], [10, \"second\"],\n\t\t\t[30, \"second\"], \n\t\t\t[1, \"minute\"], [2, \"minute\"], [5, \"minute\"], [10, \"minute\"],\n\t\t\t[30, \"minute\"], \n\t\t\t[1, \"hour\"], [2, \"hour\"], [4, \"hour\"],\n\t\t\t[8, \"hour\"], [12, \"hour\"],\n\t\t\t[1, \"day\"], [2, \"day\"], [3, \"day\"],\n\t\t\t[0.25, \"month\"], [0.5, \"month\"], [1, \"month\"],\n\t\t\t[2, \"month\"]\n\t\t];\n\t\n\t\t// we don't know which variant(s) we'll need yet, but generating both is\n\t\t// cheap\n\t\n\t\tvar specMonths = baseSpec.concat([[3, \"month\"], [6, \"month\"],\n\t\t\t[1, \"year\"]]);\n\t\tvar specQuarters = baseSpec.concat([[1, \"quarter\"], [2, \"quarter\"],\n\t\t\t[1, \"year\"]]);\n\t\n\t\tfunction init(plot) {\n\t\t\tplot.hooks.processOptions.push(function (plot, options) {\n\t\t\t\t$.each(plot.getAxes(), function(axisName, axis) {\n\t\n\t\t\t\t\tvar opts = axis.options;\n\t\n\t\t\t\t\tif (opts.mode == \"time\") {\n\t\t\t\t\t\taxis.tickGenerator = function(axis) {\n\t\n\t\t\t\t\t\t\tvar ticks = [];\n\t\t\t\t\t\t\tvar d = dateGenerator(axis.min, opts);\n\t\t\t\t\t\t\tvar minSize = 0;\n\t\n\t\t\t\t\t\t\t// make quarter use a possibility if quarters are\n\t\t\t\t\t\t\t// mentioned in either of these options\n\t\n\t\t\t\t\t\t\tvar spec = (opts.tickSize && opts.tickSize[1] ===\n\t\t\t\t\t\t\t\t\"quarter\") ||\n\t\t\t\t\t\t\t\t(opts.minTickSize && opts.minTickSize[1] ===\n\t\t\t\t\t\t\t\t\"quarter\") ? specQuarters : specMonths;\n\t\n\t\t\t\t\t\t\tif (opts.minTickSize != null) {\n\t\t\t\t\t\t\t\tif (typeof opts.tickSize == \"number\") {\n\t\t\t\t\t\t\t\t\tminSize = opts.tickSize;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tminSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tfor (var i = 0; i < spec.length - 1; ++i) {\n\t\t\t\t\t\t\t\tif (axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]]\n\t\t\t\t\t\t\t\t\t\t\t\t  + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2\n\t\t\t\t\t\t\t\t\t&& spec[i][0] * timeUnitSize[spec[i][1]] >= minSize) {\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tvar size = spec[i][0];\n\t\t\t\t\t\t\tvar unit = spec[i][1];\n\t\n\t\t\t\t\t\t\t// special-case the possibility of several years\n\t\n\t\t\t\t\t\t\tif (unit == \"year\") {\n\t\n\t\t\t\t\t\t\t\t// if given a minTickSize in years, just use it,\n\t\t\t\t\t\t\t\t// ensuring that it's an integer\n\t\n\t\t\t\t\t\t\t\tif (opts.minTickSize != null && opts.minTickSize[1] == \"year\") {\n\t\t\t\t\t\t\t\t\tsize = Math.floor(opts.minTickSize[0]);\n\t\t\t\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t\t\t\tvar magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));\n\t\t\t\t\t\t\t\t\tvar norm = (axis.delta / timeUnitSize.year) / magn;\n\t\n\t\t\t\t\t\t\t\t\tif (norm < 1.5) {\n\t\t\t\t\t\t\t\t\t\tsize = 1;\n\t\t\t\t\t\t\t\t\t} else if (norm < 3) {\n\t\t\t\t\t\t\t\t\t\tsize = 2;\n\t\t\t\t\t\t\t\t\t} else if (norm < 7.5) {\n\t\t\t\t\t\t\t\t\t\tsize = 5;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tsize = 10;\n\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\tsize *= magn;\n\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t// minimum size for years is 1\n\t\n\t\t\t\t\t\t\t\tif (size < 1) {\n\t\t\t\t\t\t\t\t\tsize = 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\taxis.tickSize = opts.tickSize || [size, unit];\n\t\t\t\t\t\t\tvar tickSize = axis.tickSize[0];\n\t\t\t\t\t\t\tunit = axis.tickSize[1];\n\t\n\t\t\t\t\t\t\tvar step = tickSize * timeUnitSize[unit];\n\t\n\t\t\t\t\t\t\tif (unit == \"second\") {\n\t\t\t\t\t\t\t\td.setSeconds(floorInBase(d.getSeconds(), tickSize));\n\t\t\t\t\t\t\t} else if (unit == \"minute\") {\n\t\t\t\t\t\t\t\td.setMinutes(floorInBase(d.getMinutes(), tickSize));\n\t\t\t\t\t\t\t} else if (unit == \"hour\") {\n\t\t\t\t\t\t\t\td.setHours(floorInBase(d.getHours(), tickSize));\n\t\t\t\t\t\t\t} else if (unit == \"month\") {\n\t\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), tickSize));\n\t\t\t\t\t\t\t} else if (unit == \"quarter\") {\n\t\t\t\t\t\t\t\td.setMonth(3 * floorInBase(d.getMonth() / 3,\n\t\t\t\t\t\t\t\t\ttickSize));\n\t\t\t\t\t\t\t} else if (unit == \"year\") {\n\t\t\t\t\t\t\t\td.setFullYear(floorInBase(d.getFullYear(), tickSize));\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// reset smaller components\n\t\n\t\t\t\t\t\t\td.setMilliseconds(0);\n\t\n\t\t\t\t\t\t\tif (step >= timeUnitSize.minute) {\n\t\t\t\t\t\t\t\td.setSeconds(0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (step >= timeUnitSize.hour) {\n\t\t\t\t\t\t\t\td.setMinutes(0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (step >= timeUnitSize.day) {\n\t\t\t\t\t\t\t\td.setHours(0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (step >= timeUnitSize.day * 4) {\n\t\t\t\t\t\t\t\td.setDate(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (step >= timeUnitSize.month * 2) {\n\t\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), 3));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (step >= timeUnitSize.quarter * 2) {\n\t\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), 6));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (step >= timeUnitSize.year) {\n\t\t\t\t\t\t\t\td.setMonth(0);\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tvar carry = 0;\n\t\t\t\t\t\t\tvar v = Number.NaN;\n\t\t\t\t\t\t\tvar prev;\n\t\n\t\t\t\t\t\t\tdo {\n\t\n\t\t\t\t\t\t\t\tprev = v;\n\t\t\t\t\t\t\t\tv = d.getTime();\n\t\t\t\t\t\t\t\tticks.push(v);\n\t\n\t\t\t\t\t\t\t\tif (unit == \"month\" || unit == \"quarter\") {\n\t\t\t\t\t\t\t\t\tif (tickSize < 1) {\n\t\n\t\t\t\t\t\t\t\t\t\t// a bit complicated - we'll divide the\n\t\t\t\t\t\t\t\t\t\t// month/quarter up but we need to take\n\t\t\t\t\t\t\t\t\t\t// care of fractions so we don't end up in\n\t\t\t\t\t\t\t\t\t\t// the middle of a day\n\t\n\t\t\t\t\t\t\t\t\t\td.setDate(1);\n\t\t\t\t\t\t\t\t\t\tvar start = d.getTime();\n\t\t\t\t\t\t\t\t\t\td.setMonth(d.getMonth() +\n\t\t\t\t\t\t\t\t\t\t\t(unit == \"quarter\" ? 3 : 1));\n\t\t\t\t\t\t\t\t\t\tvar end = d.getTime();\n\t\t\t\t\t\t\t\t\t\td.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);\n\t\t\t\t\t\t\t\t\t\tcarry = d.getHours();\n\t\t\t\t\t\t\t\t\t\td.setHours(0);\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\td.setMonth(d.getMonth() +\n\t\t\t\t\t\t\t\t\t\t\ttickSize * (unit == \"quarter\" ? 3 : 1));\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (unit == \"year\") {\n\t\t\t\t\t\t\t\t\td.setFullYear(d.getFullYear() + tickSize);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\td.setTime(v + step);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} while (v < axis.max && v != prev);\n\t\n\t\t\t\t\t\t\treturn ticks;\n\t\t\t\t\t\t};\n\t\n\t\t\t\t\t\taxis.tickFormatter = function (v, axis) {\n\t\n\t\t\t\t\t\t\tvar d = dateGenerator(v, axis.options);\n\t\n\t\t\t\t\t\t\t// first check global format\n\t\n\t\t\t\t\t\t\tif (opts.timeformat != null) {\n\t\t\t\t\t\t\t\treturn formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// possibly use quarters if quarters are mentioned in\n\t\t\t\t\t\t\t// any of these places\n\t\n\t\t\t\t\t\t\tvar useQuarters = (axis.options.tickSize &&\n\t\t\t\t\t\t\t\t\taxis.options.tickSize[1] == \"quarter\") ||\n\t\t\t\t\t\t\t\t(axis.options.minTickSize &&\n\t\t\t\t\t\t\t\t\taxis.options.minTickSize[1] == \"quarter\");\n\t\n\t\t\t\t\t\t\tvar t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];\n\t\t\t\t\t\t\tvar span = axis.max - axis.min;\n\t\t\t\t\t\t\tvar suffix = (opts.twelveHourClock) ? \" %p\" : \"\";\n\t\t\t\t\t\t\tvar hourCode = (opts.twelveHourClock) ? \"%I\" : \"%H\";\n\t\t\t\t\t\t\tvar fmt;\n\t\n\t\t\t\t\t\t\tif (t < timeUnitSize.minute) {\n\t\t\t\t\t\t\t\tfmt = hourCode + \":%M:%S\" + suffix;\n\t\t\t\t\t\t\t} else if (t < timeUnitSize.day) {\n\t\t\t\t\t\t\t\tif (span < 2 * timeUnitSize.day) {\n\t\t\t\t\t\t\t\t\tfmt = hourCode + \":%M\" + suffix;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfmt = \"%b %d \" + hourCode + \":%M\" + suffix;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (t < timeUnitSize.month) {\n\t\t\t\t\t\t\t\tfmt = \"%b %d\";\n\t\t\t\t\t\t\t} else if ((useQuarters && t < timeUnitSize.quarter) ||\n\t\t\t\t\t\t\t\t(!useQuarters && t < timeUnitSize.year)) {\n\t\t\t\t\t\t\t\tif (span < timeUnitSize.year) {\n\t\t\t\t\t\t\t\t\tfmt = \"%b\";\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfmt = \"%b %Y\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (useQuarters && t < timeUnitSize.year) {\n\t\t\t\t\t\t\t\tif (span < timeUnitSize.year) {\n\t\t\t\t\t\t\t\t\tfmt = \"Q%q\";\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfmt = \"Q%q %Y\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfmt = \"%Y\";\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\tvar rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);\n\t\n\t\t\t\t\t\t\treturn rt;\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\n\t\t$.plot.plugins.push({\n\t\t\tinit: init,\n\t\t\toptions: options,\n\t\t\tname: 'time',\n\t\t\tversion: '1.0'\n\t\t});\n\t\n\t\t// Time-axis support used to be in Flot core, which exposed the\n\t\t// formatDate function on the plot object.  Various plugins depend\n\t\t// on the function, so we need to re-expose it here.\n\t\n\t\t$.plot.formatDate = formatDate;\n\t\t$.plot.dateGenerator = dateGenerator;\n\t\n\t})(jQuery);\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(6);\n\t    var cockpit = __webpack_require__(7);\n\t\n\t    var mod = { };\n\t\n\t    var known_hosts_path = \"/etc/ssh/ssh_known_hosts\";\n\t    /*\n\t     * We share the Machines state between multiple frames. Only\n\t     * one frame has the job of loading the state, usually index.js\n\t     * The Loader code below does all the loading.\n\t     *\n\t     * The data is stored in sessionStorage in a JSON object, like this\n\t     * {\n\t     *    content: name → info dict from bridge's /machines Machines property\n\t     *    overlay: extra data to augment and override on top of content\n\t     * }\n\t     *\n\t     * This uses sessionStorage rather than cockpit.sessionStorage\n\t     * because we don't ever want to write unprefixed keys.\n\t     */\n\t\n\t    var key = cockpit.sessionStorage.prefixedKey(\"v2-machines.json\");\n\t    var session_prefix = cockpit.sessionStorage.prefixedKey(\"v1-session-machine\");\n\t\n\t    function generate_session_key(host) {\n\t        return session_prefix + \"/\" + host;\n\t    }\n\t\n\t    function Machines() {\n\t        var self = this;\n\t\n\t        var flat = null;\n\t        self.ready = false;\n\t\n\t        /* parsed machine data */\n\t        var machines = { };\n\t\n\t        /* Data shared between Machines() instances */\n\t        var last = {\n\t            content: null,\n\t            overlay: {\n\t                localhost: {\n\t                    visible: true,\n\t                    manifests: cockpit.manifests\n\t                }\n\t            }\n\t        };\n\t\n\t        function storage(ev) {\n\t            if (ev.key === key && ev.storageArea === window.sessionStorage)\n\t                refresh(JSON.parse(ev.newValue));\n\t        }\n\t\n\t        window.addEventListener(\"storage\", storage);\n\t\n\t        window.setTimeout(function() {\n\t            var value = window.sessionStorage.getItem(key);\n\t            if (!self.ready && value)\n\t                refresh(JSON.parse(value));\n\t        });\n\t\n\t        var timeout = null;\n\t\n\t        function sync(machine, values, overlay) {\n\t            var desired = $.extend({ }, values || { }, overlay || { });\n\t            var prop;\n\t            for (prop in desired) {\n\t                if (machine[prop] !== desired[prop])\n\t                    machine[prop] = desired[prop];\n\t            }\n\t            for (prop in machine) {\n\t                if (machine[prop] !== desired[prop])\n\t                    delete machine[prop];\n\t            }\n\t            return machine;\n\t        }\n\t\n\t        function refresh(shared, push) {\n\t            if (!shared)\n\t                return;\n\t\n\t            var emit_ready = !self.ready;\n\t\n\t            self.ready = true;\n\t            last = shared;\n\t            flat = null;\n\t\n\t            if (push && !timeout) {\n\t                timeout = window.setTimeout(function() {\n\t                    timeout = null;\n\t                    window.sessionStorage.setItem(key, JSON.stringify(last));\n\t                }, 10);\n\t            }\n\t\n\t            var host, hosts = { };\n\t            var content = shared.content || { };\n\t            var overlay = shared.overlay || { };\n\t            for (host in content)\n\t                hosts[host] = true;\n\t            for (host in overlay)\n\t                hosts[host] = true;\n\t\n\t            var events = [];\n\t\n\t            var machine, application;\n\t            for (host in hosts) {\n\t                var old_machine = machines[host] || { };\n\t                var old_conns = old_machine.connection_string;\n\t\n\t                /* Invert logic for color, always respect what's on disk */\n\t                if (content[host] && content[host].color && overlay[host])\n\t                    delete overlay[host].color;\n\t\n\t                machine = sync(old_machine, content[host], overlay[host]);\n\t\n\t                /* Fill in defaults */\n\t                machine.key = host;\n\t                if (!machine.address)\n\t                    machine.address = host;\n\t\n\t                machine.connection_string = self.generate_connection_string(machine.user,\n\t                                                                            machine.port,\n\t                                                                            machine.address);\n\t\n\t                if (!machine.label) {\n\t                    if (host == \"localhost\" || host == \"localhost.localdomain\") {\n\t                        application = cockpit.transport.application();\n\t                        if (application.indexOf('cockpit+=') === 0)\n\t                            machine.label = application.replace('cockpit+=', '');\n\t                        else\n\t                            machine.label = window.location.hostname;\n\t                    } else {\n\t                        machine.label = host;\n\t                    }\n\t                }\n\t                if (!machine.avatar)\n\t                    machine.avatar = \"../shell/images/server-small.png\";\n\t\n\t                events.push([host in machines ? \"updated\" : \"added\",\n\t                            [machine, host, old_conns]]);\n\t                machines[host] = machine;\n\t            }\n\t\n\t            /* Remove any lost hosts */\n\t            for (host in machines) {\n\t                if (!(host in hosts)) {\n\t                    machine = machines[host];\n\t                    delete machines[host];\n\t                    delete overlay[host];\n\t                    events.push([\"removed\", [machine, host]]);\n\t                }\n\t            }\n\t\n\t            /* Fire off all events */\n\t            var i, sel = $(self), len = events.length;\n\t            for (i = 0; i < len; i++)\n\t                sel.triggerHandler(events[i][0], events[i][1]);\n\t            if (emit_ready)\n\t                $(self).triggerHandler(\"ready\");\n\t        }\n\t\n\t        function update_session_machine(machine, host, values) {\n\t            /* We don't save the whole machine object */\n\t            var skey = generate_session_key(host);\n\t            var data = $.extend({}, machine, values);\n\t            window.sessionStorage.setItem(skey, JSON.stringify(data));\n\t            self.overlay(host, values);\n\t            return cockpit.when([]);\n\t        }\n\t\n\t        function update_saved_machine(host, values) {\n\t            // wrap values in variants for D-Bus call; at least values.port can\n\t            // be int or string, so stringify everything but the \"visible\" boolean\n\t            var values_variant = {};\n\t            for (var prop in values)\n\t                if (values[prop] !== null) {\n\t                    if (prop == \"visible\")\n\t                        values_variant[prop] = cockpit.variant('b', values[prop]);\n\t                    else\n\t                        values_variant[prop] = cockpit.variant('s', values[prop].toString());\n\t                }\n\t\n\t            // FIXME: investigate re-using the proxy from Loader (runs in different frame/scope)\n\t            var bridge = cockpit.dbus(null, { bus: \"internal\", \"superuser\": \"try\" });\n\t            var mod = bridge.call(\"/machines\", \"cockpit.Machines\", \"Update\", [ \"99-webui.json\", host, values_variant ])\n\t                .done(function() {\n\t                    var prop, over = { };\n\t                    for (prop in values)\n\t                        over[prop] = null;\n\t                    self.overlay(host, over);\n\t                })\n\t                .fail(function(error) {\n\t                    console.error(\"failed to call cockpit.Machines.Update(): \", error);\n\t                });\n\t\n\t            return mod;\n\t        }\n\t\n\t        self.add_key = function(host_key) {\n\t            var known_hosts = cockpit.file(known_hosts_path, { superuser: \"try\" });\n\t            return known_hosts\n\t                .modify(function(data) {\n\t                    if (!data)\n\t                        data = \"\";\n\t\n\t                    return data + \"\\n\" + host_key;\n\t                })\n\t                .always(function() {\n\t                    known_hosts.close();\n\t                });\n\t        };\n\t\n\t        self.add = function add(connection_string, color) {\n\t            var values = self.split_connection_string(connection_string);\n\t            var host = values['address'];\n\t\n\t            values = $.extend({\n\t                        visible: true,\n\t                        color: color || self.unused_color(),\n\t                    }, values);\n\t\n\t            var machine = self.lookup(host);\n\t            if (machine)\n\t                machine.on_disk = true;\n\t\n\t            return self.change(values['address'], values);\n\t        };\n\t\n\t        self.unused_color = function unused_color() {\n\t            var i, len = mod.colors.length;\n\t            for (i = 0; i < len; i++) {\n\t                if (!color_in_use(mod.colors[i]))\n\t                    return mod.colors[i];\n\t            }\n\t            return \"gray\";\n\t        };\n\t\n\t        function color_in_use(color) {\n\t            var key, machine, norm = mod.colors.parse(color);\n\t            for (key in machines) {\n\t                machine = machines[key];\n\t                if (machine.color && mod.colors.parse(machine.color) == norm)\n\t                    return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        function merge(item, values) {\n\t            for (var prop in values) {\n\t                if (values[prop] === null)\n\t                    delete item[prop];\n\t                else\n\t                    item[prop] = values[prop];\n\t            }\n\t        }\n\t\n\t        self.change = function change(host, values) {\n\t            var mod, hostnamed, call;\n\t            var machine = self.lookup(host);\n\t\n\t            if (values.label) {\n\t\n\t                var conn_to = host;\n\t                if (machine)\n\t                    conn_to = machine.connection_string;\n\t\n\t                if (!machine || machine.label !== values.label) {\n\t                    hostnamed = cockpit.dbus(\"org.freedesktop.hostname1\", { host: conn_to });\n\t                    call = hostnamed.call(\"/org/freedesktop/hostname1\", \"org.freedesktop.hostname1\",\n\t                                          \"SetPrettyHostname\", [ values.label, true ])\n\t                        .always(function() {\n\t                            hostnamed.close();\n\t                        })\n\t                        .fail(function(ex) {\n\t                            console.warn(\"couldn't set pretty host name: \" + ex);\n\t                        });\n\t                }\n\t            }\n\t\n\t            if (machine && !machine.on_disk)\n\t                mod = update_session_machine(machine, host, values);\n\t            else\n\t                mod = update_saved_machine(host, values);\n\t\n\t            if (call)\n\t                return cockpit.all(call, mod);\n\t\n\t            return mod;\n\t        };\n\t\n\t        self.data = function data(content) {\n\t            var host, changes = {};\n\t\n\t            for (host in content) {\n\t                changes[host] = $.extend({ }, last.overlay[host] || { });\n\t                merge(changes[host], { on_disk: true });\n\t            }\n\t\n\t            /* It's a full reload, so data not\n\t             * present is no longer from disk\n\t             */\n\t            for (host in machines) {\n\t                if (content && !content[host]) {\n\t                    changes[host] = $.extend({ }, last.overlay[host] || { });\n\t                    merge(changes[host], { on_disk: null });\n\t                }\n\t            }\n\t\n\t            refresh({ content: content,\n\t                      overlay: $.extend({ }, last.overlay, changes) }, true);\n\t        };\n\t\n\t        self.overlay = function overlay(host, values) {\n\t            var changes = { };\n\t            changes[host] = $.extend({ }, last.overlay[host] || { });\n\t            merge(changes[host], values);\n\t            refresh({\n\t                content: last.content,\n\t                overlay: $.extend({ }, last.overlay, changes)\n\t            }, true);\n\t        };\n\t\n\t        Object.defineProperty(self, \"list\", {\n\t            enumerable: true,\n\t            get: function get() {\n\t                var key;\n\t                if (!flat) {\n\t                    flat = [];\n\t                    for (key in machines) {\n\t                        if (machines[key].visible)\n\t                            flat.push(machines[key]);\n\t                    }\n\t                    flat.sort(function(m1, m2) {\n\t                        return m1.label.localeCompare(m2.label);\n\t                    });\n\t                }\n\t                return flat;\n\t            }\n\t        });\n\t\n\t        Object.defineProperty(self, \"addresses\", {\n\t            enumerable: true,\n\t            get: function get() {\n\t                return Object.keys(machines);\n\t            }\n\t        });\n\t\n\t        self.lookup = function lookup(address) {\n\t            var parts = self.split_connection_string(address);\n\t            return machines[parts.address || \"localhost\"] || null;\n\t        };\n\t\n\t        self.generate_connection_string = function (user, port, addr) {\n\t            var address = addr;\n\t            if (user)\n\t                address = user + \"@\" + address;\n\t\n\t            if (port)\n\t                address = address + \":\" + port;\n\t\n\t            return address;\n\t        };\n\t\n\t        self.split_connection_string = function(conn_to) {\n\t            var parts = {};\n\t            var user_spot = -1;\n\t            var port_spot = -1;\n\t\n\t            if (conn_to) {\n\t                user_spot = conn_to.lastIndexOf('@');\n\t                port_spot = conn_to.lastIndexOf(':');\n\t            }\n\t\n\t            if (user_spot > 0) {\n\t                parts.user = conn_to.substring(0, user_spot);\n\t                conn_to = conn_to.substring(user_spot+1);\n\t                port_spot = conn_to.lastIndexOf(':');\n\t            }\n\t\n\t            if (port_spot > -1) {\n\t                var port = parseInt(conn_to.substring(port_spot+1), 10);\n\t                if (!isNaN(port)) {\n\t                    parts.port = port;\n\t                    conn_to = conn_to.substring(0, port_spot);\n\t                }\n\t            }\n\t\n\t            parts.address = conn_to;\n\t            return parts;\n\t        };\n\t\n\t        self.close = function close() {\n\t            window.removeEventListener(\"storage\", storage);\n\t        };\n\t    }\n\t\n\t    function Loader(machines, session_only) {\n\t        var self = this;\n\t\n\t        /* Have we loaded from cockpit session */\n\t        var session_loaded = false;\n\t\n\t        /* File we are watching */\n\t        var file;\n\t\n\t        /* echo channels to each machine */\n\t        var channels = { };\n\t\n\t        /* hostnamed proxies to each machine, if hostnamed available */\n\t        var proxies = { };\n\t\n\t        /* clients for the bridge D-Bus API */\n\t        var bridge_dbus = { };\n\t\n\t        function process_session_key(key, value) {\n\t            var host, values, machine;\n\t            var parts = key.split(\"/\");\n\t            if (parts[0] == session_prefix &&\n\t                parts.length === 2) {\n\t                    host = parts[1];\n\t                    if (value) {\n\t                        values = JSON.parse(value);\n\t                        machine = machines.lookup(host);\n\t                        if (!machine || !machine.on_disk)\n\t                            machines.overlay(host, values);\n\t                        else if (!machine.visible)\n\t                            machines.change(host, { visible: true });\n\t                        self.connect(host);\n\t                    }\n\t            }\n\t        }\n\t\n\t        function load_from_session_storage() {\n\t            var i;\n\t            session_loaded = true;\n\t            for (i = 0; i < window.sessionStorage.length; i++) {\n\t                var k = window.sessionStorage.key(i);\n\t                process_session_key(k, window.sessionStorage.getItem(k));\n\t            }\n\t        }\n\t\n\t        function process_session_machines(ev) {\n\t            if (ev.storageArea === window.sessionStorage)\n\t                process_session_key(ev.key || \"\", ev.newValue);\n\t        }\n\t        window.addEventListener(\"storage\", process_session_machines);\n\t\n\t        function state(host, value, problem) {\n\t            var values = { state: value, problem: problem };\n\t            if (value == \"connected\") {\n\t                values.restarting = false;\n\t            } else if (problem) {\n\t                values.manifests = null;\n\t                values.checksum = null;\n\t            }\n\t            machines.overlay(host, values);\n\t        }\n\t\n\t        $(machines).on(\"added\", updated);\n\t        $(machines).on(\"updated\", updated);\n\t        $(machines).on(\"removed\", removed);\n\t\n\t        function updated(ev, machine, host, old_conns) {\n\t            if (!machine) {\n\t                machine = machines.lookup(host);\n\t                if (!machine)\n\t                    return;\n\t            }\n\t\n\t            var props = proxies[host];\n\t            if (!props || !props.valid)\n\t                props = { };\n\t\n\t            var overlay = { };\n\t\n\t            if (!machine.color)\n\t                overlay.color = machines.unused_color();\n\t\n\t            var label = props.PrettyHostname || props.StaticHostname;\n\t            if (label && label !== machine.label)\n\t                overlay.label = label;\n\t\n\t            var os = props.OperatingSystemPrettyName;\n\t            if (os && os != machine.os)\n\t                overlay.os = props.OperatingSystemPrettyName;\n\t\n\t            if (!$.isEmptyObject(overlay))\n\t                machines.overlay(host, overlay);\n\t\n\t            /* Don't automatically reconnect failed machines */\n\t            if (machine.visible) {\n\t                if (old_conns && machine.connection_string != old_conns) {\n\t                    cockpit.kill(old_conns);\n\t                    self.disconnect(host);\n\t                    self.connect(host);\n\t                } else if (!machine.problem) {\n\t                    self.connect(host);\n\t                }\n\t            } else {\n\t                self.disconnect(host);\n\t            }\n\t        }\n\t\n\t        function removed(ev, machine, host) {\n\t            self.disconnect(host);\n\t        }\n\t\n\t        self.connect = function connect(host) {\n\t            var machine = machines.lookup(host);\n\t            if (!machine)\n\t                return;\n\t\n\t            var channel = channels[host];\n\t            if (channel)\n\t                return;\n\t\n\t            var options = {\n\t                host: machine.connection_string,\n\t                payload: \"echo\"\n\t            };\n\t\n\t            if (!machine.on_disk && machine.host_key) {\n\t                options['temp-session'] = false; /* Compatibility option */\n\t                options['session'] = 'shared';\n\t                options['host-key'] = machine.host_key;\n\t                options['unknown-host'] = \"1\";\n\t            }\n\t\n\t            channel = cockpit.channel(options);\n\t            channels[host] = channel;\n\t\n\t            var local = host === \"localhost\";\n\t\n\t            /* Request is null, and message is true when connected */\n\t            var request = null;\n\t            var open = local;\n\t            var problem = null;\n\t\n\t            var url;\n\t            if (!machine.manifests) {\n\t                if (machine.checksum)\n\t                    url = \"../../\" + machine.checksum + \"/manifests.json\";\n\t                else\n\t                    url = \"../../@\" + encodeURI(machine.connection_string) + \"/manifests.json\";\n\t            }\n\t\n\t            function whirl() {\n\t                if (!request && open)\n\t                    state(host, \"connected\", null);\n\t                else if (!problem)\n\t                    state(host, \"connecting\", null);\n\t            }\n\t\n\t            /* Here we load the machine manifests, and expect them before going to \"connected\" */\n\t            function request_manifest() {\n\t                request = $.ajax({ url: url, dataType: \"json\", cache: true})\n\t                    .done(function(manifests) {\n\t                        var overlay = { manifests: manifests };\n\t                        var etag = request.getResponseHeader(\"ETag\");\n\t                        if (etag) /* and remove quotes */\n\t                            overlay.checksum = etag.replace(/^\"(.+)\"$/, '$1');\n\t                        machines.overlay(host, overlay);\n\t                    })\n\t                    .fail(function(ex) {\n\t                        console.warn(\"failed to load manifests from \" + machine.connection_string + \": \" + ex);\n\t                    })\n\t                    .always(function() {\n\t                        request = null;\n\t                        whirl();\n\t                    });\n\t            }\n\t\n\t            /* Try to get change notifications via the internal\n\t               /packages D-Bus interface of the bridge.  Not all\n\t               bridges support this API, so we still get the first\n\t               version of the manifests via HTTP in request_manifest.\n\t            */\n\t\n\t            function watch_manifests() {\n\t                var dbus = cockpit.dbus(null, { bus: \"internal\",\n\t                                                host: machine.connection_string\n\t                                              });\n\t                bridge_dbus[host] = dbus;\n\t                dbus.subscribe({ path: \"/packages\",\n\t                                 interface: \"org.freedesktop.DBus.Properties\",\n\t                                 member: \"PropertiesChanged\" },\n\t                               function (path, iface, mamber, args) {\n\t                                   if (args[0] == \"cockpit.Packages\") {\n\t                                       if (args[1][\"Manifests\"]) {\n\t                                           var manifests = JSON.parse(args[1][\"Manifests\"].v);\n\t                                           machines.overlay(host, { manifests: manifests });\n\t                                       }\n\t                                   }\n\t                               });\n\t            }\n\t\n\t            function request_hostname() {\n\t                if (!machine.static_hostname) {\n\t                    var proxy = cockpit.dbus(\"org.freedesktop.hostname1\",\n\t                                             { host: machine.connection_string }).proxy();\n\t                    proxies[host] = proxy;\n\t                    proxy.wait(function() {\n\t                        $(proxy).on(\"changed\", function() {\n\t                            updated(null, null, host);\n\t                        });\n\t                        updated(null, null, host);\n\t                    });\n\t                }\n\t            }\n\t\n\t            /* Send a message to the server and get back a message once connected */\n\t            if (!local) {\n\t                channel.send(\"x\");\n\t\n\t                $(channel)\n\t                    .on(\"message\", function() {\n\t                        open = true;\n\t                        if (url)\n\t                            request_manifest();\n\t                        watch_manifests();\n\t                        request_hostname();\n\t                        whirl();\n\t                    })\n\t                .on(\"close\", function(ev, options) {\n\t                    var m = machines.lookup(host);\n\t                    open = false;\n\t                    // reset to clean state when removing machine (orderly disconnect), otherwise mark as failed\n\t                    if (!options.problem && m && !m.visible)\n\t                        state(host, null, null);\n\t                    else\n\t                        state(host, \"failed\", options.problem || \"disconnected\");\n\t                    if (m && m.restarting) {\n\t                        window.setTimeout(function() {\n\t                            self.connect(host);\n\t                        }, 10000);\n\t                    }\n\t                    self.disconnect(host);\n\t                });\n\t            } else {\n\t                if (url)\n\t                    request_manifest();\n\t                watch_manifests();\n\t                request_hostname();\n\t            }\n\t\n\t            /* In case already ready, for example when local */\n\t            whirl();\n\t        };\n\t\n\t        self.disconnect = function disconnect(host) {\n\t            if (host === \"localhost\")\n\t                return;\n\t\n\t            var channel = channels[host];\n\t            delete channels[host];\n\t            if (channel) {\n\t                channel.close();\n\t                $(channel).off();\n\t            }\n\t\n\t            var proxy = proxies[host];\n\t            delete proxies[host];\n\t            if (proxy) {\n\t                proxy.client.close();\n\t                $(proxy).off();\n\t            }\n\t\n\t            var dbus = bridge_dbus[host];\n\t            delete bridge_dbus[host];\n\t            if (dbus) {\n\t                dbus.close();\n\t            }\n\t        };\n\t\n\t        self.expect_restart = function expect_restart(host) {\n\t            var parts = machines.split_connection_string(host);\n\t            machines.overlay(parts.address, { restarting: true,\n\t                                              problem: null });\n\t        };\n\t\n\t        self.close = function close() {\n\t            $(machines).off(\"added\", updated);\n\t            $(machines).off(\"changed\", updated);\n\t            $(machines).off(\"removed\", removed);\n\t            machines = null;\n\t\n\t            if (file)\n\t                file.close();\n\t            file = null;\n\t\n\t            window.removeEventListener(\"storage\", process_session_machines);\n\t            var hosts = Object.keys(channels);\n\t            hosts.forEach(self.disconnect);\n\t        };\n\t\n\t        if (!session_only) {\n\t            var proxy = cockpit.dbus(null, { bus: \"internal\" }).proxy(\"cockpit.Machines\", \"/machines\");\n\t            $(proxy).on(\"changed\", function(data) {\n\t                // unwrap variants from D-Bus call\n\t                var wrapped = proxy.Machines;\n\t                var data_unwrap = {};\n\t                var host_props;\n\t                for (var host in wrapped) {\n\t                    host_props = {};\n\t                    for (var prop in wrapped[host])\n\t                        host_props[prop] = wrapped[host][prop].v;\n\t                    data_unwrap[host] = host_props;\n\t                }\n\t\n\t                machines.data(data_unwrap);\n\t                if (!session_loaded)\n\t                    load_from_session_storage();\n\t            });\n\t        } else {\n\t            load_from_session_storage();\n\t            machines.data({});\n\t        }\n\t    }\n\t\n\t    mod.instance = function instance(loader) {\n\t        return new Machines();\n\t    };\n\t\n\t    mod.loader = function loader(machines, session_only) {\n\t        return new Loader(machines, session_only);\n\t    };\n\t\n\t    mod.colors = [\n\t        \"#0099d3\",\n\t        \"#67d300\",\n\t        \"#d39e00\",\n\t        \"#d3007c\",\n\t        \"#00d39f\",\n\t        \"#00d1d3\",\n\t        \"#00618a\",\n\t        \"#4c8a00\",\n\t        \"#8a6600\",\n\t        \"#9b005b\",\n\t        \"#008a55\",\n\t        \"#008a8a\",\n\t        \"#00b9ff\",\n\t        \"#7dff00\",\n\t        \"#ffbe00\",\n\t        \"#ff0096\",\n\t        \"#00ffc0\",\n\t        \"#00fdff\",\n\t        \"#023448\",\n\t        \"#264802\",\n\t        \"#483602\",\n\t        \"#590034\",\n\t        \"#024830\",\n\t        \"#024848\"\n\t    ];\n\t\n\t    mod.colors.parse = function parse_color(input) {\n\t        var div = document.createElement('div');\n\t        div.style.color = input;\n\t        var style = window.getComputedStyle(div, null);\n\t        return style.getPropertyValue(\"color\") || div.style.color;\n\t    };\n\t\n\t    mod.known_hosts_path = known_hosts_path;\n\t\n\t    cockpit.transport.wait(function() {\n\t        var caps = cockpit.transport.options.capabilities || [];\n\t        /* If cockpit-ws is handling ssh, check for each capability. Otherwise\n\t         * the version is new enough that is has them all */\n\t        if ($.inArray(\"ssh\", caps) > -1) {\n\t            mod.allow_connection_string = $.inArray(\"connection-string\", caps) != -1;\n\t            mod.has_auth_results = $.inArray(\"auth-method-results\", caps) != -1;\n\t            known_hosts_path = \"/var/lib/cockpit/known_hosts\";\n\t            mod.known_hosts_path = known_hosts_path;\n\t            console.debug(\"Running against legacy ws with ssh, using legacy file\", known_hosts_path);\n\t        } else {\n\t            mod.allow_connection_string = true;\n\t            mod.has_auth_results = true;\n\t        }\n\t    });\n\t\n\t    module.exports = mod;\n\t}());\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2015 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(6);\n\t    var cockpit = __webpack_require__(7);\n\t\n\t    var mustache = __webpack_require__(8);\n\t\n\t    var machines = __webpack_require__(14);\n\t    var credentials = __webpack_require__(16);\n\t\n\t    var add_tmpl = __webpack_require__(22);\n\t    var auth_failed_tmpl = __webpack_require__(23);\n\t    var change_auth_tmpl = __webpack_require__(24);\n\t    var change_port_tmpl = __webpack_require__(25);\n\t    var color_picker_tmpl = __webpack_require__(26);\n\t    var invalid_hostkey_tmpl = __webpack_require__(27);\n\t    var not_supported_tmpl = __webpack_require__(28);\n\t    var sync_users_tmpl = __webpack_require__(29);\n\t    var unknown_hosts_tmpl = __webpack_require__(30);\n\t\n\t    var _ = cockpit.gettext;\n\t\n\t    var default_codes = {\n\t        \"no-cockpit\": \"not-supported\",\n\t        \"not-supported\": \"not-supported\",\n\t        \"protocol-error\": \"not-supported\",\n\t        \"authentication-not-supported\": \"change-auth\",\n\t        \"authentication-failed\": \"change-auth\",\n\t        \"no-forwarding\": \"change-auth\",\n\t        \"unknown-hostkey\": \"unknown-hostkey\",\n\t        \"invalid-hostkey\": \"invalid-hostkey\",\n\t        \"not-found\": \"add-machine\",\n\t        \"unknown-host\": \"unknown-host\",\n\t        \"sync-users\": \"sync-users\"\n\t    };\n\t\n\t    function translate_and_init(tmpl) {\n\t        var tmp = $(\"<div>\").append(tmpl);\n\t        tmp.find(\"[translatable=\\\"yes\\\"]\").each(function(i, e) {\n\t            var old = e.outerHTML;\n\t            var translated = cockpit.gettext(e.getAttribute(\"context\"), $(e).text());\n\t            $(e).removeAttr(\"translatable\").text(translated);\n\t            tmpl = tmpl.replace(old, e.outerHTML);\n\t        });\n\t        mustache.parse(tmpl);\n\t        return tmpl;\n\t    }\n\t\n\t    var templates = {\n\t        \"add-machine\" : translate_and_init(add_tmpl),\n\t        \"auth-failed\" : translate_and_init(auth_failed_tmpl),\n\t        \"change-auth\" : translate_and_init(change_auth_tmpl),\n\t        \"change-port\" : translate_and_init(change_port_tmpl),\n\t        \"color-picker\" : translate_and_init(color_picker_tmpl),\n\t        \"invalid-hostkey\" : translate_and_init(invalid_hostkey_tmpl),\n\t        \"not-supported\" : translate_and_init(not_supported_tmpl),\n\t        \"sync-users\" : translate_and_init(sync_users_tmpl),\n\t        \"unknown-hostkey\" : translate_and_init(unknown_hosts_tmpl),\n\t        \"unknown-host\" : translate_and_init(unknown_hosts_tmpl)\n\t    };\n\t\n\t    function full_address(machines_ins, address) {\n\t        var machine = machines_ins.lookup(address);\n\t        if (machine && machine.address != \"localhost\")\n\t            return machine.connection_string;\n\t\n\t        return address;\n\t    }\n\t\n\t    function Dialog(selector, address, machines_ins, codes) {\n\t        var self = this;\n\t\n\t        self.machines_ins = machines_ins;\n\t        self.codes = codes;\n\t        self.address = full_address(self.machines_ins, address);\n\t\n\t        var promise_callback = null;\n\t\n\t        var success_callback = null;\n\t\n\t        var current_template = null;\n\t        var current_instance = null;\n\t\n\t        function address_or_label() {\n\t            var machine = self.machines_ins.lookup(self.address);\n\t            var host = self.machines_ins.split_connection_string(self.address).address;\n\t            if (machine && machine.label)\n\t                host = machine.label;\n\t            return host;\n\t        }\n\t\n\t        function change_content(template, error_options) {\n\t            var old_instance = current_instance;\n\t\n\t            if (current_template === template)\n\t                return;\n\t\n\t            if (template == \"add-machine\")\n\t                current_instance = new AddMachine(self);\n\t            else if (template == \"sync-users\")\n\t                current_instance = new SyncUsers(self);\n\t            else if (template == \"unknown-hostkey\" || template == \"unknown-host\")\n\t                current_instance = new HostKey(self, template);\n\t            else if (template == \"invalid-hostkey\")\n\t                current_instance = new HostKey(self, template);\n\t            else if (template == \"change-auth\")\n\t                current_instance = new ChangeAuth(self);\n\t            else if (template == \"change-port\")\n\t                current_instance = new MachinePort(self);\n\t            else\n\t                current_instance = new Simple(self);\n\t\n\t            current_template = template;\n\t            current_instance.load(error_options);\n\t\n\t            if (old_instance && old_instance.close)\n\t                old_instance.close();\n\t            old_instance = null;\n\t        }\n\t\n\t        self.try_to_connect = function(address, options) {\n\t            var dfd = $.Deferred();\n\t            var conn_options = $.extend({ \"payload\": \"echo\",\n\t                                          \"host\": address },\n\t                                        options);\n\t\n\t            var machine = self.machines_ins.lookup(address);\n\t            if (machine && machine.host_key && !machine.on_disk) {\n\t                conn_options['temp-session'] = false; /* Compatiblity option */\n\t                conn_options['session'] = 'shared';\n\t                conn_options['host-key'] = machine.host_key;\n\t                conn_options['unknown-host'] = \"1\";\n\t            }\n\t            var client = cockpit.channel(conn_options);\n\t            client.send(\"x\");\n\t            $(client)\n\t               .on(\"message\", function() {\n\t                    $(client).off();\n\t                    client.close();\n\t                    dfd.resolve();\n\t                })\n\t                .on(\"close\", function(event, options) {\n\t                    dfd.reject(options);\n\t                });\n\t\n\t            return dfd.promise();\n\t        };\n\t\n\t        self.get_sel = function(child_selector) {\n\t            var ret_txt = selector;\n\t            if (child_selector)\n\t                ret_txt = ret_txt + \" \" + child_selector;\n\t            return $(ret_txt);\n\t        };\n\t\n\t        self.set_on_success = function (callback) {\n\t            success_callback = callback;\n\t        };\n\t\n\t        self.set_goal = function (callback) {\n\t            promise_callback = callback;\n\t        };\n\t\n\t        self.complete = function(val) {\n\t            if (success_callback)\n\t                success_callback(val);\n\t            else\n\t                $(selector).modal('hide');\n\t        };\n\t\n\t        self.render = function render(data, template) {\n\t            if (!template)\n\t                template = current_template;\n\t\n\t            var address_data = self.machines_ins.split_connection_string(self.address);\n\t            var context = $.extend({\n\t                'host' : address_or_label(),\n\t                'full_address' : self.address,\n\t                'context_title' : self.context_title,\n\t                'strong' : function() {\n\t                    return function(text, render) {\n\t                        return \"<strong>\" + render(text) + \"</strong>\";\n\t                    };\n\t                }\n\t            }, data, address_data);\n\t\n\t            var output = $(mustache.render(templates[template], context));\n\t            cockpit.translate(output);\n\t            self.get_sel(\".modal-content\").html(output);\n\t        };\n\t\n\t        self.render_error = function render_error(error) {\n\t            var template;\n\t            if (error.problem && error.command == \"close\")\n\t                template = self.codes[error.problem];\n\t\n\t            if (template && current_template !== template)\n\t                change_content(template, error);\n\t            else\n\t                $(selector).dialog(\"failure\", cockpit.message(error));\n\t        };\n\t\n\t        self.render_template = function render_template(template) {\n\t            change_content(template);\n\t        };\n\t\n\t        self.show = function () {\n\t            var sel = self.get_sel();\n\t            sel.on('hide.bs.modal', function () {\n\t                self.get_sel(\".model-content\").empty();\n\t            });\n\t            sel.modal('show');\n\t        };\n\t\n\t        self.run = function (promise, failure_callback) {\n\t            var dialog_dfd = $.Deferred();\n\t            var promise_funcs = [];\n\t\n\t            function next(i) {\n\t                promise_funcs[i]()\n\t                    .done(function(val) {\n\t                        i = i + 1;\n\t                        if (i < promise_funcs.length) {\n\t                            next(i);\n\t                        } else {\n\t                            dialog_dfd.resolve();\n\t                            self.complete(val);\n\t                        }\n\t                    })\n\t                    .fail(function(ex) {\n\t                        if (failure_callback)\n\t                            failure_callback(ex);\n\t                        else\n\t                            self.render_error(ex);\n\t                        dialog_dfd.reject(ex);\n\t                    });\n\t            }\n\t\n\t            promise_funcs.push(function() {\n\t                return promise;\n\t            });\n\t\n\t            self.get_sel().dialog(\"wait\", dialog_dfd.promise());\n\t            if (promise_callback)\n\t                promise_funcs.push(promise_callback);\n\t\n\t            next(0);\n\t        };\n\t    }\n\t\n\t    function is_method_supported(methods, method) {\n\t        var result = methods[method];\n\t        return result ? result != \"no-server-support\" : false;\n\t    }\n\t\n\t    function can_try_method(methods, method) {\n\t        if (is_method_supported(methods, method))\n\t            return method == 'password' || methods[method] != \"not-provided\";\n\t        return false;\n\t    }\n\t\n\t    function MachineColorPicker(machines_ins) {\n\t        var self = this;\n\t\n\t        self.render = function(selector, address, selected_color) {\n\t            var machine;\n\t\n\t            if (address && !selected_color) {\n\t                machine = machines_ins.lookup(address);\n\t                if (machine)\n\t                    selected_color = machine.color;\n\t            }\n\t\n\t            if (!selected_color)\n\t                selected_color = machines_ins.unused_color();\n\t\n\t            var part, colors = [];\n\t            for (var i = 0; i < machines.colors.length; i += 6) {\n\t                part = machines.colors.slice(i, i+6);\n\t                colors.push({\"list\" : part});\n\t            }\n\t\n\t            var text = mustache.render(templates[\"color-picker\"], { 'colors' : colors, });\n\t            $(selector).html(text);\n\t\n\t            $(\"#host-edit-color\", selector).css(\"background-color\", selected_color);\n\t            $(\".color-cell\", selector).each(function(index) {\n\t                $(this).css(\"background-color\", machines.colors[index]);\n\t            });\n\t\n\t            $('#host-edit-color-popover .popover-content .color-cell', selector)\n\t                .click(function() {\n\t                    var color = $(this).css('background-color');\n\t                    $('#host-edit-color', selector).css('background-color', color);\n\t                });\n\t\n\t            $(\"#host-edit-color\", selector).parent().\n\t                on('show.bs.dropdown', function () {\n\t                    var $div = $('#host-edit-color', selector);\n\t                    var $pop = $('#host-edit-color-popover', selector);\n\t                    var div_pos = $div.position();\n\t                    var div_width = $div.width();\n\t                    var div_height = $div.height();\n\t                    var pop_width = $pop.width();\n\t                    var pop_height = $pop.height();\n\t\n\t                    var top = div_pos.top - pop_height + 10;\n\t                    if (top < 0) {\n\t                        top = div_pos.top + div_height + 10;\n\t                        $pop.addClass(\"bottom\");\n\t                        $pop.removeClass(\"top\");\n\t                    } else {\n\t                        $pop.addClass(\"top\");\n\t                        $pop.removeClass(\"bottom\");\n\t                    }\n\t                    $pop.css('left', div_pos.left + (div_width - pop_width) / 2);\n\t                    $pop.css('top', top);\n\t                    $pop.show();\n\t                }).\n\t                on('hide.bs.dropdown', function () {\n\t                    $('#host-edit-color-popover', selector).hide();\n\t                });\n\t        };\n\t    }\n\t\n\t    function Simple(dialog) {\n\t        var self = this;\n\t\n\t        self.load = function() {\n\t            dialog.render();\n\t        };\n\t    }\n\t\n\t    function AddMachine(dialog) {\n\t        var self = this;\n\t        var color = null;\n\t        var selector = dialog.get_sel();\n\t        var run_error = null;\n\t\n\t        var invisible = dialog.machines_ins.addresses.filter(function(addr) {\n\t            var m = dialog.machines_ins.lookup(addr);\n\t            return !m || !m.visible;\n\t        });\n\t\n\t        function existing_error(address) {\n\t            var ex = null;\n\t            var machine = dialog.machines_ins.lookup(address);\n\t            if (machine && machine.visible && machine.on_disk) {\n\t                ex = new Error(_(\"This machine has already been added.\"));\n\t                ex.target = \"#add-machine-address\";\n\t            }\n\t            return ex;\n\t        }\n\t\n\t        function check_address(evt) {\n\t            var disabled = true;\n\t            var ex = null;\n\t\n\t            var addr = $('#add-machine-address').val();\n\t            var button = dialog.get_sel(\".btn-primary\");\n\t            if (addr === \"\") {\n\t                disabled = true;\n\t            } else if (!machines.allow_connection_string &&\n\t                       (addr.indexOf('@') > -1 || addr.indexOf(':') > -1)) {\n\t                ex = new Error(_(\"This version of cockpit-ws does not support connecting to a host with an alternate user or port\"));\n\t            } else if (addr.search(/\\s+/) === -1) {\n\t                ex = existing_error(addr);\n\t                if (!ex)\n\t                    disabled = false;\n\t            } else {\n\t                ex = new Error(_(\"The IP address or host name cannot contain whitespace.\"));\n\t            }\n\t\n\t            if (ex)\n\t                ex.target = \"#add-machine-address\";\n\t\n\t            if (run_error)\n\t                selector.dialog(\"failure\", run_error, ex);\n\t            else\n\t                selector.dialog(\"failure\", ex);\n\t\n\t            button.prop(\"disabled\", disabled);\n\t        }\n\t\n\t        function add_machine() {\n\t            run_error = null;\n\t            dialog.address = $('#add-machine-address').val();\n\t            color = machines.colors.parse($('#add-machine-color-picker #host-edit-color').css('background-color'));\n\t            if (existing_error(dialog.address))\n\t                return;\n\t\n\t            dialog.set_goal(function() {\n\t                var dfp = $.Deferred();\n\t                dialog.machines_ins.add(dialog.address, color)\n\t                    .done(dfp.resolve)\n\t                    .fail(function (ex) {\n\t                        var msg = cockpit.format(_(\"Failed to add machine: $0\"),\n\t                                                 cockpit.message(ex));\n\t                        dfp.reject(msg);\n\t                    });\n\t\n\t                return dfp.promise();\n\t            });\n\t\n\t            dialog.run(dialog.try_to_connect(dialog.address), function (ex) {\n\t                if (ex.problem == \"no-host\") {\n\t                    var host_id_port = dialog.address;\n\t                    var port_index = host_id_port.lastIndexOf(\":\");\n\t                    var port = \"22\";\n\t                    if (port_index === -1)\n\t                        host_id_port = dialog.address + \":22\";\n\t                    else\n\t                        port = host_id_port.substr(port_index + 1);\n\t                    ex.message = cockpit.format(_(\"Cockpit could not contact the given host $0. Make sure it has ssh running on port $1, or specify another port in the address.\"), host_id_port, port);\n\t                    ex = cockpit.message(ex);\n\t                    run_error = ex;\n\t                }\n\t                dialog.render_error(ex);\n\t            });\n\t        }\n\t\n\t        self.load = function() {\n\t            var manifest = cockpit.manifests[\"shell\"] || {};\n\t            var limit = parseInt(manifest[\"machine-limit\"], 10);\n\t            var color_picker = new MachineColorPicker(dialog.machines_ins);\n\t            if (!limit || isNaN(limit))\n\t                limit = 20;\n\t\n\t            dialog.render({\n\t                'nearlimit' : limit * 0.75 <= dialog.machines_ins.list.length,\n\t                'limit' : limit,\n\t                'placeholder' : _(\"Enter IP address or host name\"),\n\t                'options' : invisible,\n\t            });\n\t\n\t            var button = dialog.get_sel(\".btn-primary\");\n\t            button.on(\"click\", add_machine);\n\t\n\t            $(\"#add-machine-address\").on(\"keyup\", function (ev) {\n\t                if (ev.which === 13) {\n\t                    var disabled = button.prop('disabled');\n\t                    if (!disabled)\n\t                        add_machine();\n\t                }\n\t            });\n\t            $(\"#add-machine-address\").on(\"input focus\", check_address);\n\t            color_picker.render(\"#add-machine-color-picker\", dialog.address, color);\n\t            $(\"#add-machine-address\").focus();\n\t        };\n\t    }\n\t\n\t    function MachinePort(dialog) {\n\t        var self = this;\n\t\n\t        function change_port() {\n\t            var dfp = $.Deferred();\n\t            var parts = dialog.machines_ins.split_connection_string(dialog.address);\n\t            parts.port = $(\"#edit-machine-port\").val();\n\t            var address = dialog.machines_ins.generate_connection_string(parts.user,\n\t                                                                  parts.port,\n\t                                                                  parts.address);\n\t            function update_host(ex) {\n\t                dialog.address = address;\n\t                dialog.machines_ins.change(parts.address, { \"port\": parts.port })\n\t                    .done(function () {\n\t                        // We failed before so try to connect again\n\t                        // now that the machine is saved.\n\t                        if (ex) {\n\t                            dialog.try_to_connect(address)\n\t                                .done(dialog.complete)\n\t                                .fail(function (e) {\n\t                                    dfp.reject(e);\n\t                                });\n\t                        } else {\n\t                            dfp.resolve();\n\t                        }\n\t                    })\n\t                    .fail(function (ex) {\n\t                        var msg = cockpit.format(_(\"Failed to edit machine: $0\"),\n\t                                                 cockpit.message(ex));\n\t                        dfp.reject(msg);\n\t                    });\n\t            }\n\t\n\t            dialog.try_to_connect(address)\n\t                .done(function () {\n\t                    update_host();\n\t                })\n\t                .fail(function (ex) {\n\t                    /* any other error means progress, so save */\n\t                    if (ex.problem != 'no-host')\n\t                        update_host(ex);\n\t                    else\n\t                        dfp.reject(ex);\n\t                });\n\t\n\t            dialog.run(dfp.promise());\n\t        }\n\t\n\t        self.load = function() {\n\t            var machine = dialog.machines_ins.lookup(dialog.address);\n\t            if (!machine) {\n\t                dialog.get_sel().modal('hide');\n\t                return;\n\t            }\n\t\n\t            dialog.render({ 'port' : machine.port,\n\t                            'allow_connection_string' : machines.allow_connection_string });\n\t            if (machines.allow_connection_string)\n\t                dialog.get_sel(\".btn-primary\").on(\"click\", change_port);\n\t        };\n\t    }\n\t\n\t    function HostKey(dialog, problem) {\n\t        var self = this;\n\t        var error_options = null;\n\t        var key = null;\n\t        var allow_change = (problem == \"unknown-hostkey\" ||\n\t                            problem == \"unknown-host\");\n\t\n\t        function add_key() {\n\t            var q;\n\t            var machine = dialog.machines_ins.lookup(dialog.address);\n\t            if (!machine || machine.on_disk) {\n\t                q = dialog.machines_ins.add_key(key);\n\t            } else {\n\t                /* When machine isn't saved to disk\n\t                   don't save the key either */\n\t                q = dialog.machines_ins.change(dialog.address, {\n\t                    'host_key': key\n\t                });\n\t            }\n\t\n\t            var promise = q.then(function () {\n\t                var inner = dialog.try_to_connect(dialog.address);\n\t\n\t                inner.fail(function(ex) {\n\t                    if ((ex.problem == \"invalid-hostkey\" ||\n\t                        ex.problem == \"unknown-hostkey\") &&\n\t                        machine && !machine.on_disk) {\n\t                            dialog.machines_ins.change(dialog.address, {\n\t                                'host_key': null\n\t                            });\n\t                        }\n\t                    });\n\t\n\t                return inner;\n\t            });\n\t\n\t            dialog.run(promise);\n\t        }\n\t\n\t        function render() {\n\t            var promise = null;\n\t            var options = {};\n\t            var match_problem = problem;\n\t            var fp;\n\t            var path = machines.known_hosts_path;\n\t\n\t            if (error_options) {\n\t                key = error_options[\"host-key\"];\n\t                fp = error_options[\"host-fingerprint\"];\n\t                if (error_options[\"invalid-hostkey-file\"])\n\t                    path = error_options[\"invalid-hostkey-file\"];\n\t            }\n\t\n\t            dialog.render({\n\t                'context_title' : dialog.context_title,\n\t                'path' : path,\n\t                'key' : fp,\n\t                'key_host' : key ? key.split(' ')[0] : null,\n\t            });\n\t\n\t            if (!key) {\n\t                if (problem == \"unknown-host\") {\n\t                    options[\"session\"] = \"private\";\n\t                    match_problem = \"unknown-hostkey\";\n\t                }\n\t\n\t                promise = dialog.try_to_connect(dialog.address, options)\n\t                    .fail(function(ex) {\n\t                        if (ex.problem != match_problem) {\n\t                            dialog.render_error(ex);\n\t                        } else {\n\t                            error_options = ex;\n\t                            render();\n\t                        }\n\t                    })\n\t\n\t                    // Fixed already, just close\n\t                    .done(function (v) {\n\t                        dialog.complete(v);\n\t                    });\n\t\n\t                dialog.get_sel().dialog(\"wait\", promise);\n\t            } else if (allow_change) {\n\t                dialog.get_sel(\".btn-primary\").on(\"click\", add_key);\n\t            }\n\t        }\n\t\n\t        self.load = function(ex) {\n\t            error_options = ex;\n\t            render();\n\t        };\n\t    }\n\t\n\t    function ChangeAuth(dialog) {\n\t        var self = this;\n\t        var error_options = null;\n\t        var allows_password = false;\n\t        var keys = null;\n\t        var machine = dialog.machines_ins.lookup(dialog.address);\n\t\n\t        self.user = { };\n\t\n\t        function update_keys() {\n\t            var key_div = dialog.get_sel('.keys');\n\t\n\t            if (key_div) {\n\t                key_div.empty();\n\t                for (var id in keys.items) {\n\t                    var key = keys.items[id];\n\t                    if (key.loaded)\n\t                        key_div.append($(\"<div>\").text(key.name));\n\t                }\n\t            }\n\t        }\n\t\n\t        function login() {\n\t            var address;\n\t            var options = {};\n\t            var dfp = $.Deferred();\n\t            var user = $(\"#login-custom-user\").val();\n\t\n\t            var parts = dialog.machines_ins.split_connection_string(dialog.address);\n\t            parts.user = user;\n\t\n\t            address = dialog.machines_ins.generate_connection_string(parts.user,\n\t                                                              parts.port,\n\t                                                              parts.address);\n\t\n\t            if ($(\"#login-type\").val() != 'stored') {\n\t                options['password'] = $(\"#login-custom-password\").val();\n\t                options[\"session\"] = 'shared';\n\t                if (!user) {\n\t                    /* we don't want to save the default user for everyone\n\t                     * so we pass current user as an option, but make sure the\n\t                     * session isn't private\n\t                     */\n\t                    if (self.user && self.user.name)\n\t                        options[\"user\"] = self.user.name;\n\t                    options[\"temp-session\"] = false; /* Compatibility option */\n\t                }\n\t            }\n\t\n\t            dialog.try_to_connect(address, options)\n\t                .done(function () {\n\t                    dialog.address = address;\n\t                    if (machine) {\n\t                        dialog.machines_ins.change(machine.address, { \"user\" : user })\n\t                            .done(dfp.resolve)\n\t                            .fail(dfp.reject);\n\t                    } else {\n\t                        dfp.resolve();\n\t                    }\n\t                })\n\t                .fail(dfp.reject);\n\t\n\t            dialog.run(dfp.promise());\n\t        }\n\t\n\t        function change_login_type(value) {\n\t            var stored = value != 'password';\n\t            var text = $(\"#login-type li[value=\" + value + \"]\").text();\n\t            $(\"#login-type button span\").text(text);\n\t            $(\"#login-available\").toggle(stored);\n\t            $(\"#login-diff-password\").toggle(!stored);\n\t        }\n\t\n\t        function render() {\n\t            var promise = null;\n\t            var template = \"change-auth\";\n\t            if (!machines.allow_connection_string || !machines.has_auth_results)\n\t                template = \"auth-failed\";\n\t\n\t            var methods = null;\n\t            var available = null;\n\t            var supported = null;\n\t\n\t            var machine_user = dialog.machines_ins.split_connection_string(dialog.address).user;\n\t            if (!machine_user && machine)\n\t                machine_user = machine.user;\n\t\n\t            if (error_options && machines.has_auth_results) {\n\t                supported = {};\n\t                available = {};\n\t\n\t                methods = error_options[\"auth-method-results\"];\n\t                if (methods) {\n\t                    allows_password = is_method_supported(methods, 'password');\n\t                    for (var method in methods) {\n\t                        if (can_try_method(methods, method)) {\n\t                            available[method] = true;\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if ($.isEmptyObject(available))\n\t                    template = \"auth-failed\";\n\t            }\n\t\n\t            dialog.render({\n\t                'supported' : methods,\n\t                'available' : available,\n\t                'machine_user' : machine_user,\n\t                'user' : self.user ? self.user.name : \"\",\n\t                'allows_password' : allows_password,\n\t                'can_sync': !!dialog.codes['sync-users'],\n\t                'machines.allow_connection_string' : machines.allow_connection_string,\n\t                'sync_link' : function() {\n\t                    return function(text, render) {\n\t                        return '<a id=\"do-sync-users\">' + render(text) + \"</a>\";\n\t                    };\n\t                }\n\t            }, template);\n\t\n\t            if (methods === null && machines.has_auth_results) {\n\t                promise = dialog.try_to_connect(dialog.address)\n\t                    .fail(function(ex) {\n\t                        error_options = ex;\n\t                        render();\n\t                    })\n\t\n\t                    // Fixed already, just close\n\t                    .done(function (v) {\n\t                        dialog.complete(v);\n\t                    });\n\t\n\t                dialog.get_sel().dialog(\"wait\", promise);\n\t            } else if (!$.isEmptyObject(available)) {\n\t                $(\"#login-type li\").on('click', function() {\n\t                    change_login_type($(this).attr(\"value\"));\n\t                });\n\t                change_login_type($(\"#login-type li:first-child\").attr(\"value\"));\n\t                dialog.get_sel(\".btn-primary\").on(\"click\", login);\n\t                dialog.get_sel(\"a[data-content]\").popover();\n\t\n\t                update_keys();\n\t            }\n\t\n\t            dialog.get_sel(\"#do-sync-users\").on(\"click\", function () {\n\t                dialog.render_template(\"sync-users\");\n\t            });\n\t        }\n\t\n\t        self.load = function(ex) {\n\t            error_options = ex;\n\t            if (credentials) {\n\t                keys = credentials.keys_instance();\n\t                $(keys).on(\"changed\", update_keys);\n\t            }\n\t            cockpit.user()\n\t                .done(function (user) {\n\t                    self.user = user;\n\t                })\n\t                .always(function (user) {\n\t                    render();\n\t                });\n\t        };\n\t\n\t        self.close = function(ex) {\n\t            if (keys) {\n\t                $(keys).off();\n\t                keys.close();\n\t            }\n\t            keys = null;\n\t        };\n\t    }\n\t\n\t    function SyncUsers(dialog) {\n\t        var self = this;\n\t        var users = {};\n\t\n\t        var needs_auth = false;\n\t        var needs_root = false;\n\t        var methods = null;\n\t        var remote_options = { \"superuser\": true };\n\t\n\t        var perm_failed = null;\n\t\n\t        function load_users() {\n\t            var local = cockpit.dbus(null, { bus: \"internal\",\n\t                                             host: \"localhost\",\n\t                                             superuser: true });\n\t            $(local).on(\"close\", function(event, options) {\n\t                perm_failed = options;\n\t                render();\n\t            });\n\t\n\t            var proxy = local.proxy(\"cockpit.Setup\", \"/setup\");\n\t            proxy.wait(function () {\n\t                if (proxy.valid) {\n\t                    var blank = {\n\t                        \"t\" : \"(asas)\",\n\t                        \"v\" : [[], []]\n\t                    };\n\t\n\t                    proxy.Transfer(\"passwd1\", blank)\n\t                        .done(function(prepared) {\n\t                            var i, parts, name;\n\t                            var groups = prepared.v[1];\n\t\n\t                            for (i = 0; i < prepared.v[0].length; i++) {\n\t                                var raw = prepared.v[0][i];\n\t\n\t                                parts = raw.split(\":\");\n\t                                name = parts[0];\n\t\n\t                                users[name] = {\n\t                                    \"username\" : name,\n\t                                    \"name\" : parts[4] || name,\n\t                                    \"raw\" : raw,\n\t                                    \"groups\" : [],\n\t                                };\n\t                            }\n\t\n\t                            for (i = 0; i < groups.length; i++) {\n\t                                parts = groups[i].split(\":\");\n\t                                name = parts[0];\n\t                                var members = parts[parts.length - 1].split(\",\");\n\t                                for (var j = 0; j < members.length; j++) {\n\t                                    var u = members[j];\n\t                                    if (users[u])\n\t                                        users[u].groups.push(name);\n\t                                }\n\t                            }\n\t                        })\n\t                        .fail(function(ex) {\n\t                            ex.message = cockpit.gettext(ex.message);\n\t                            perm_failed = ex;\n\t                        })\n\t                        .always(function(ex) {\n\t                            $(local).off();\n\t                            local.close();\n\t                            render();\n\t                        });\n\t                }\n\t            });\n\t        }\n\t\n\t        function sync_users() {\n\t            var client = null;\n\t\n\t            var dfd = $.Deferred();\n\t            var promise = dfd.promise();\n\t\n\t            dialog.run(promise);\n\t\n\t            /* A successfull sync should close the dialog */\n\t            dialog.set_on_success(null);\n\t\n\t            promise.always(function () {\n\t                if (client) {\n\t                    $(client).off();\n\t                    client.close();\n\t                }\n\t            });\n\t\n\t            var options = { bus: \"internal\" };\n\t            if (needs_auth) {\n\t                options.user = $(\"#sync-username\").val();\n\t                options.password = $(\"#sync-password\").val();\n\t            }\n\t            $.extend(options, remote_options, { host: dialog.address });\n\t            client = cockpit.dbus(null, options);\n\t            $(client).on(\"close\", function(event, ex) {\n\t                dfd.reject(cockpit.message(ex));\n\t            });\n\t\n\t            var variant = {\n\t                \"t\" : \"(asas)\",\n\t                \"v\" : [[]],\n\t            };\n\t\n\t            var groups = {};\n\t            dialog.get_sel(\"input:checked\").each( function() {\n\t                var u = users[$(this).attr(\"name\")];\n\t                if (u) {\n\t                    variant.v[0].push(u.raw);\n\t                    for (var i = 0; i < u.groups.length; i++) {\n\t                        var group = u.groups[i];\n\t                        if (!groups[group])\n\t                            groups[group] = [];\n\t\n\t                        groups[group].push(u.username);\n\t                    }\n\t                }\n\t            });\n\t            variant.v.push(Object.keys(groups).map(function(k) {\n\t                return k + \":::\" + groups[k].join();\n\t            }));\n\t\n\t            /* We assume all cockpits support the 'passwd1' mechanism */\n\t            var proxy = client.proxy(\"cockpit.Setup\", \"/setup\");\n\t            proxy.wait(function() {\n\t                if (proxy.valid) {\n\t                    proxy.Commit(\"passwd1\", variant)\n\t                        .fail(function(ex) {\n\t                            ex.message = cockpit.gettext(ex.message);\n\t                            dfd.reject(ex);\n\t                        })\n\t                        .done(dfd.resolve);\n\t                }\n\t            });\n\t        }\n\t\n\t        function toggle_button() {\n\t            var any = dialog.get_sel(\"input:checked\").length > 0;\n\t            dialog.get_sel(\".btn-primary\").toggleClass(\"disabled\", !any);\n\t        }\n\t\n\t        function render() {\n\t            function formated_groups() {\n\t                /*jshint validthis:true */\n\t                if (this.groups)\n\t                    return this.groups.join(\", \");\n\t            }\n\t\n\t            /* assume password is allowed for backwards compatibility */\n\t            var allows_password = true;\n\t            var user_list = Object.keys(users).sort().map(function(v) {\n\t                return users[v];\n\t            });\n\t\n\t            if (machines.has_auth_results && methods)\n\t                allows_password = is_method_supported(methods, 'password');\n\t\n\t            var text = dialog.render({\n\t                'needs_auth' : needs_auth,\n\t                'needs_root' : needs_root,\n\t                'users' : user_list,\n\t                'perm_failed' : perm_failed ? cockpit.message(perm_failed) : null,\n\t                'allows_password' : allows_password,\n\t                'formated_groups': formated_groups,\n\t            });\n\t\n\t            dialog.get_sel(\".modal-content\").html(text);\n\t            dialog.get_sel(\".btn-primary\").on(\"click\", sync_users);\n\t            dialog.get_sel(\"input:checkbox\").on(\"change\", function() {\n\t                var name = $(this).attr(\"name\");\n\t                users[name].checked = $(this).is(':checked');\n\t                toggle_button();\n\t            });\n\t            toggle_button();\n\t        }\n\t\n\t        self.load = function(error_options) {\n\t            if (error_options)\n\t                methods = error_options['auth-method-results'];\n\t\n\t            render();\n\t            dialog.try_to_connect(dialog.address, remote_options).fail(function(ex) {\n\t                needs_auth = true;\n\t                if (ex.problem == \"access-denied\") {\n\t                    needs_root = true;\n\t                    if (!methods && machines.has_auth_results)\n\t                        /* TODO: We need to know if password auth is\n\t                         * supported but we only get that when the transport\n\t                         * closes. Passing an invalid username should\n\t                         * open new transport that fails.\n\t                         */\n\t                        dialog.try_to_connect(dialog.address, { \"user\" : \"1\" })\n\t                            .fail(function(ex) {\n\t                                methods = ex['auth-method-results'];\n\t                            })\n\t                            .always(render);\n\t                } else {\n\t                    methods = ex['auth-method-results'];\n\t                    render();\n\t                }\n\t            });\n\t            load_users();\n\t        };\n\t    }\n\t\n\t    function MachineDialogManager(machines_ins, codes) {\n\t        var self = this;\n\t\n\t        if (!codes)\n\t            codes = default_codes;\n\t\n\t        var color_picker = new MachineColorPicker(machines_ins);\n\t\n\t        self.troubleshoot = function(target_id, machine) {\n\t            var selector = \"#\" + target_id;\n\t            if (!machine || !machine.problem)\n\t                return;\n\t\n\t            var template = codes[machine.problem];\n\t            if (machine.problem == \"no-host\")\n\t                template = \"change-port\";\n\t\n\t            var dialog = new Dialog(selector, machine.address, machines_ins, codes);\n\t            dialog.render_template(template);\n\t            dialog.show();\n\t        };\n\t\n\t        self.needs_troubleshoot = function (machine) {\n\t            if (!machine || !machine.problem)\n\t                return false;\n\t\n\t            if (machine.problem == \"no-host\")\n\t                return true;\n\t\n\t            return codes[machine.problem] ? true : false;\n\t        };\n\t\n\t        self.render_dialog = function (template, target_id, address) {\n\t            var selector = \"#\" + target_id;\n\t            var dialog = new Dialog(selector, address, machines_ins, codes);\n\t            dialog.render_template(template);\n\t            dialog.show();\n\t        };\n\t\n\t        self.render_color_picker = function (selector, address) {\n\t            color_picker.render(selector, address);\n\t        };\n\t    }\n\t\n\t    module.exports = {\n\t        new_manager: function (machines_ins, codes) {\n\t            return new MachineDialogManager(machines_ins, codes);\n\t        }\n\t    };\n\t}());\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2015 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(6);\n\t    var cockpit = __webpack_require__(7);\n\t\n\t    __webpack_require__(18);\n\t    __webpack_require__(20);\n\t\n\t    var lister = __webpack_require__(21);\n\t\n\t    var _ = cockpit.gettext;\n\t\n\t    function Keys() {\n\t        var self = this;\n\t\n\t        self.path = null;\n\t        self.items = { };\n\t\n\t        var watch = null;\n\t        var proc = null;\n\t        var timeout = null;\n\t\n\t        cockpit.user().done(function (user) {\n\t            self.path = user.home + '/.ssh';\n\t            refresh();\n\t        });\n\t\n\t        function refresh() {\n\t            if (watch === null) {\n\t                watch = cockpit.channel({ payload: \"fslist1\", path: self.path });\n\t                $(watch)\n\t                    .on(\"close\", function(ev, data) {\n\t                        $(watch).off();\n\t                        if (!data.problem || data.problem == \"not-found\") {\n\t                            watch = null; /* Watch again */\n\t                        } else {\n\t                            console.warn(\"couldn't watch \" + self.path + \": \" + (data.message || data.problem));\n\t                            watch = false; /* Don't watch again */\n\t                        }\n\t                    })\n\t                    .on(\"message\", function(ev, payload) {\n\t                        var item = JSON.parse(payload);\n\t                        var name = item.path;\n\t                        if (name && name.indexOf(\"/\") === -1 && name.slice(-4) === \".pub\") {\n\t                            if (item.event === \"present\" ||item.event === \"created\" ||\n\t                                item.event === \"changed\" || item.event === \"deleted\") {\n\t                                window.clearInterval(timeout);\n\t                                timeout = window.setTimeout(refresh, 100);\n\t                            }\n\t                        }\n\t                    });\n\t            }\n\t\n\t            if (proc)\n\t                return;\n\t\n\t            window.clearTimeout(timeout);\n\t            timeout = null;\n\t\n\t            proc = cockpit.script(lister, [ self.path ], { err: \"message\" })\n\t                .always(function() {\n\t                    proc = null;\n\t\n\t                    if (!timeout)\n\t                        timeout = window.setTimeout(refresh, 5000);\n\t                })\n\t                .done(function(data) {\n\t                    process(data);\n\t                })\n\t                .fail(function(ex) {\n\t                    console.warn(\"failed to list keys in home directory: \" + ex.message);\n\t                });\n\t        }\n\t\n\t        function process(data) {\n\t            var blocks = data.split('\\v');\n\t            var key, items = { };\n\t\n\t            /* First block is the data from ssh agent */\n\t            blocks[0].trim().split(\"\\n\").forEach(function(line) {\n\t                key = parse_key(line, items);\n\t                if (key)\n\t                    key.loaded = true;\n\t            });\n\t\n\t            /* Next come individual triples of blocks */\n\t            blocks.slice(1).forEach(function(block, i) {\n\t                switch(i % 3) {\n\t                case 0:\n\t                    key = parse_key(block, items);\n\t                    break;\n\t                case 1:\n\t                    if (key) {\n\t                        block = block.trim();\n\t                        if (block.slice(-4) === \".pub\")\n\t                            key.name = block.slice(0, -4);\n\t                        else\n\t                            key.name = block;\n\t                    }\n\t                    break;\n\t                case 2:\n\t                    if (key)\n\t                        parse_info(block, key);\n\t                    break;\n\t                }\n\t            });\n\t\n\t            self.items = items;\n\t            $(self).triggerHandler(\"changed\");\n\t        }\n\t\n\t        function parse_key(line, items) {\n\t            var parts = line.trim().split(\" \");\n\t            var id, type, comment;\n\t\n\t            /* SSHv1 keys */\n\t            if (!isNaN(parseInt(parts[0], 10))) {\n\t                id = parts[2];\n\t                type = \"RSA1\";\n\t                comment = parts.slice(3).join(\" \");\n\t\n\t            } else if (parts[0].indexOf(\"ssh-\") === 0) {\n\t                id = parts[1];\n\t                type = parts[0].substring(4).toUpperCase();\n\t                comment = parts.slice(2).join(\" \");\n\t            } else if (parts[0].indexOf(\"ecdsa-\") === 0) {\n\t                id = parts[1];\n\t                type = \"ECDSA\";\n\t                comment = parts.slice(2).join(\" \");\n\t            } else {\n\t                return;\n\t            }\n\t\n\t            var key = items[id];\n\t            if (!key)\n\t                key = items[id] = { };\n\t\n\t            key.type = type;\n\t            key.comment = comment;\n\t            key.data = line;\n\t            return key;\n\t        }\n\t\n\t        function parse_info(line, key) {\n\t            var parts = line.trim().split(\" \");\n\t\n\t            key.size = parseInt(parts[0], 10);\n\t            if (isNaN(key.size))\n\t                key.size = null;\n\t\n\t            key.fingerprint = parts[1];\n\t        }\n\t\n\t        self.change = function change(name, old_pass, new_pass, two_pass) {\n\t            var old_exps = [ /.*Enter old passphrase: $/ ];\n\t            var new_exps = [ /.*Enter new passphrase.*/, /.*Enter same passphrase again: $/ ];\n\t            var bad_exps = [ /.*failed: passphrase is too short.*/ ];\n\t\n\t            var dfd = $.Deferred();\n\t            var buffer = \"\";\n\t            var sent_new = false;\n\t            var failure = _(\"No such file or directory\");\n\t            var i;\n\t\n\t            if (new_pass !== two_pass) {\n\t                dfd.reject(new Error(_(\"The passwords do not match.\")));\n\t                return dfd.promise();\n\t            }\n\t\n\t            var proc;\n\t            var timeout = window.setTimeout(function() {\n\t                failure = _(\"Prompting via ssh-keygen timed out\");\n\t                proc.close(\"terminated\");\n\t            }, 10 * 1000);\n\t\n\t            proc = cockpit.spawn([\"ssh-keygen\", \"-p\", \"-f\", name],\n\t                    { pty: true, environ: [ \"LC_ALL=C\" ], err: \"out\", directory: self.path })\n\t                .always(function() {\n\t                    window.clearInterval(timeout);\n\t                })\n\t                .done(function() {\n\t                    dfd.resolve();\n\t                })\n\t                .fail(function(ex) {\n\t                    if (ex.constructor.name == \"ProcessError\")\n\t                        ex = new Error(failure);\n\t                    dfd.reject(ex);\n\t                })\n\t                .stream(function(data) {\n\t                    buffer += data;\n\t                    for (i = 0; i < old_exps.length; i++) {\n\t                        if (old_exps[i].test(buffer)) {\n\t                            buffer = \"\";\n\t                            failure = _(\"Old password not accepted\");\n\t                            this.input(old_pass + \"\\n\", true);\n\t                            return;\n\t                        }\n\t                    }\n\t\n\t                    for (i = 0; i < new_exps.length; i++) {\n\t                        if (new_exps[i].test(buffer)) {\n\t                            buffer = \"\";\n\t                            this.input(new_pass + \"\\n\", true);\n\t                            failure = _(\"Failed to change password\");\n\t                            sent_new = true;\n\t                            return;\n\t                        }\n\t                    }\n\t\n\t                    for (i = 0; sent_new && i < bad_exps.length; i++) {\n\t                        if (bad_exps[i].test(buffer)) {\n\t                            failure = _(\"New password was not accepted\");\n\t                            return;\n\t                        }\n\t                    }\n\t                });\n\t\n\t            return dfd.promise();\n\t        };\n\t\n\t        self.load = function(name, password) {\n\t            var ask_exp =  /.*Enter passphrase for .*/;\n\t            var perm_exp = /.*UNPROTECTED PRIVATE KEY FILE.*/;\n\t            var bad_exp = /.*Bad passphrase.*/;\n\t\n\t            var dfd = $.Deferred();\n\t            var buffer = \"\";\n\t            var output = \"\";\n\t            var failure = _(\"Not a valid private key\");\n\t\n\t            var proc;\n\t            var timeout = window.setTimeout(function() {\n\t                failure = _(\"Prompting via ssh-add timed out\");\n\t                proc.close(\"terminated\");\n\t            }, 10 * 1000);\n\t\n\t            proc = cockpit.spawn([\"ssh-add\", name],\n\t                    { pty: true, environ: [ \"LC_ALL=C\" ], err: \"out\", directory: self.path })\n\t                .always(function() {\n\t                    window.clearInterval(timeout);\n\t                })\n\t                .done(function() {\n\t                    refresh();\n\t                    dfd.resolve();\n\t                })\n\t                .fail(function(ex) {\n\t                    console.log(output);\n\t                    if (ex.constructor.name == \"ProcessError\")\n\t                        ex = new Error(failure);\n\t                    dfd.reject(ex);\n\t                })\n\t                .stream(function(data) {\n\t                    buffer += data;\n\t                    output += data;\n\t                    if (perm_exp.test(buffer)) {\n\t                        failure = _(\"Invalid file permissions\");\n\t                        buffer = \"\";\n\t                    } else if (ask_exp.test(buffer)) {\n\t                        buffer = \"\";\n\t                        failure = _(\"Password not accepted\");\n\t                        this.input(password + \"\\n\", true);\n\t                    } else if (bad_exp.test(buffer)) {\n\t                        buffer = \"\";\n\t                        this.input(\"\\n\", true);\n\t                    }\n\t                });\n\t\n\t            return dfd.promise();\n\t        };\n\t\n\t        self.unload = function unload(name) {\n\t            return cockpit.spawn([\"ssh-add\", \"-d\", name],\n\t                    { pty: true, err: \"message\", directory: self.path })\n\t                .done(refresh);\n\t        };\n\t\n\t        self.close = function close() {\n\t            if (watch)\n\t                watch.close();\n\t            if (proc)\n\t                proc.close();\n\t            window.clearTimeout(timeout);\n\t            timeout = null;\n\t        };\n\t    }\n\t\n\t    function setup() {\n\t        var keys;\n\t\n\t        $(\"#credentials-dialog\")\n\t\n\t            /* Show and hide panels */\n\t            .on(\"click\", \"tr.listing-ct-item\", function(ev) {\n\t                var body;\n\t                if ($(ev.target).parents(\".listing-ct-actions, ul\").length === 0) {\n\t                    body = $(ev.target).parents(\"tbody\");\n\t                    body.toggleClass(\"open\").removeClass(\"unlock\");\n\t                    body.find(\".alert\").hide();\n\t                }\n\t            })\n\t\n\t            /* Highlighting */\n\t            .on(\"mouseenter\", \".listing-ct-item\", function(ev) {\n\t                $(ev.target).parents(\"tbody\").find(\".listing-ct-item\").addClass(\"highlight-ct\");\n\t            })\n\t            .on(\"mouseleave\", \".listing-ct-item\", function(ev) {\n\t                $(ev.target).parents(\"tbody\").find(\".listing-ct-item\").removeClass(\"highlight-ct\");\n\t            })\n\t\n\t            /* Load and unload keys */\n\t            .on(\"change\", \".btn-group\", function(ev) {\n\t                var body = $(this).parents(\"tbody\");\n\t                var id = body.attr(\"data-id\");\n\t                var key = keys.items[id];\n\t                if (!key || !key.name)\n\t                    return;\n\t\n\t                var value = $(this).onoff(\"value\");\n\t\n\t                /* Key needs to be loaded, show load UI */\n\t                if (value && !key.loaded) {\n\t                    body.addClass(\"open\").addClass(\"unlock\");\n\t\n\t                /* Key needs to be unloaded, do that directly */\n\t                } else if (!value && key.loaded) {\n\t                    keys.unload(key.name)\n\t                        .done(function(ex) {\n\t                            body.removeClass(\"open\");\n\t                        })\n\t                        .fail(function(ex) {\n\t                            body.addClass(\"open\").removeClass(\"unlock\");\n\t                            body.find(\".alert\").show().find(\".credential-alert\").text(ex.message);\n\t                        });\n\t                }\n\t            })\n\t\n\t            /* Load key */\n\t            .on(\"click\", \".credential-unlock button\", function(ev) {\n\t                var body = $(this).parents(\"tbody\");\n\t                var id = body.attr(\"data-id\");\n\t                var key = keys.items[id];\n\t                if (!key || !key.name)\n\t                    return;\n\t\n\t                body.find(\"input button\").prop(\"disabled\", true);\n\t\n\t                var password = body.find(\".credential-password\").val();\n\t                keys.load(key.name, password)\n\t                    .always(function(ex) {\n\t                        body.find(\"input button\").prop(\"disabled\", false);\n\t                    })\n\t                    .done(function(ex) {\n\t                        body.find(\".credential-password\").val(\"\");\n\t                        body.removeClass(\"unlock\");\n\t                        body.find(\".alert\").hide();\n\t                    })\n\t                    .fail(function(ex) {\n\t                        body.find(\".alert\").show().find(\"span\").text(ex.message);\n\t                        console.warn(\"loading key failed: \", ex.message);\n\t                    });\n\t            })\n\t\n\t            /* Change key */\n\t            .on(\"click\", \".credential-change\", function(ev) {\n\t                var body = $(this).parents(\"tbody\");\n\t                var id = body.attr(\"data-id\");\n\t                var key = keys.items[id];\n\t                if (!key || !key.name)\n\t                    return;\n\t\n\t                body.find(\"input button\").prop(\"disabled\", true);\n\t\n\t                var old_pass = body.find(\".credential-old\").val();\n\t                var new_pass = body.find(\".credential-new\").val();\n\t                var two_pass = body.find(\".credential-two\").val();\n\t                if (old_pass === undefined || new_pass === undefined || two_pass === undefined)\n\t                    throw \"invalid password fields\";\n\t\n\t                keys.change(key.name, old_pass, new_pass, two_pass)\n\t                    .always(function(ex) {\n\t                        body.find(\"input button\").prop(\"disabled\", false);\n\t                    })\n\t                    .done(function() {\n\t                        body.find(\".credential-old\").val(\"\");\n\t                        body.find(\".credential-new\").val(\"\");\n\t                        body.find(\".credential-two\").val(\"\");\n\t                        body.find(\"li a\").first().click();\n\t                    })\n\t                    .fail(function(ex) {\n\t                        body.find(\".alert\").show().find(\"span\").text(ex.message);\n\t                    });\n\t            })\n\t\n\t            .on(\"change keypress\", \"input\", function(ev) {\n\t                var body = $(this).parents(\"tbody\");\n\t                if (ev.type == \"keypress\" && ev.keyCode == 13)\n\t                    $(this).parents(\"dl\").find(\".btn-primary\").click();\n\t                body.find(\".alert\").hide();\n\t            })\n\t\n\t            /* Change tabs */\n\t            .on(\"click\", \"tr.credential-panel ul > li > a\", function() {\n\t                var li = $(this).parent();\n\t                var index = li.index();\n\t                li.parent().children().removeClass(\"active\");\n\t                li.addClass(\"active\");\n\t                var body = $(this).parents(\"tbody\");\n\t                body.find(\".credential-tab\").hide().eq(index).show();\n\t                body.find(\".alert\").hide();\n\t            })\n\t\n\t            /* Popover help */\n\t            .on(\"click\", \"[data-toggle='popover']\", function() {\n\t                $(this).popover('toggle');\n\t            })\n\t\n\t            /* Dialog is hidden */\n\t            .on(\"hide.bs.modal\", function() {\n\t                if (keys) {\n\t                    $(keys).off();\n\t                    keys.close();\n\t                    keys = null;\n\t                }\n\t            })\n\t\n\t            /* Dialog is shown */\n\t            .on(\"show.bs.modal\", function() {\n\t                keys = new Keys();\n\t                $(\"#credential-keys\").toggleClass(\"hidden\",\n\t                                                  $.isEmptyObject(keys.items));\n\t\n\t                $(keys).on(\"changed\", function() {\n\t                    var key, id, row, rows = { };\n\t                    var table = $(\"#credentials-dialog table.credential-listing\");\n\t\n\t                    table.find(\"tbody[data-id]\").each(function(i, el) {\n\t                        row = $(el);\n\t                        rows[row.attr(\"data-id\")] = row;\n\t                    });\n\t\n\t                    var body = table.find(\"tbody\").first();\n\t                    for (id in keys.items) {\n\t                        if (!(id in rows)) {\n\t                            row = rows[id] = body.clone();\n\t                            row.attr(\"data-id\", id)\n\t                                .show()\n\t                                .onoff();\n\t                            table.append(row);\n\t                        }\n\t                    }\n\t\n\t                    function text(row, field, string) {\n\t                        var sel = row.find(field);\n\t                        string = string || \"\";\n\t                        if (sel.text() !== string)\n\t                            sel.text(string);\n\t                    }\n\t\n\t                    for (id in rows) {\n\t                        row = rows[id];\n\t                        key = keys.items[id];\n\t                        if (key) {\n\t                            text(row, \".credential-label\", key.name || key.comment);\n\t                            text(row, \".credential-type\", key.type);\n\t                            text(row, \".credential-fingerprint\", key.fingerprint);\n\t                            text(row, \".credential-comment\", key.comment);\n\t                            text(row, \".credential-data\", key.data);\n\t                            row.attr(\"data-name\", key.name)\n\t                                .attr(\"data-loaded\", key.loaded ? \"1\" : \"0\")\n\t                                .find(\".btn-onoff-ct\")\n\t                                    .onoff(\"value\", key.loaded || row.hasClass(\"unlock\"))\n\t                                    .onoff(\"disabled\", !key.name);\n\t                        } else {\n\t                            row.remove();\n\t                        }\n\t                        $(\"#credential-keys\").toggleClass(\"hidden\",\n\t                                                          $.isEmptyObject(keys.items));\n\t                    }\n\t                });\n\t            });\n\t        }\n\t\n\t    module.exports = {\n\t        keys_instance: function () {\n\t            return new Keys();\n\t        },\n\t        setup: setup\n\t    };\n\t}());\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(17)))\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\t\n\tprocess.listeners = function (name) { return [] }\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 19 */,\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(6);\n\t    var cockpit = __webpack_require__(7);\n\t\n\t    var unique_number = 0;\n\t    function unique() {\n\t        unique_number += 1;\n\t        return \"unique\" + -(new Date()) + -unique_number;\n\t    }\n\t\n\t    /* Dialog Patterns */\n\t\n\t    function clear_errors(sel) {\n\t        sel.find(\".dialog-error\").remove();\n\t        sel.find(\".has-error\").removeClass(\"has-error\");\n\t        sel.find(\".dialog-wrapper\").off(\".dialog-error\");\n\t        sel.off(\".dialog-error\");\n\t    }\n\t\n\t    function field_error(target, error) {\n\t        var wrapper = target.parent();\n\t        var next, refresh;\n\t\n\t        if (!wrapper.is(\".dialog-wrapper\")) {\n\t            wrapper = $(\"<div class='dialog-wrapper'>\").insertBefore(target);\n\t\n\t            /*\n\t             * Some bootstrap plugins replace html controls with their own\n\t             * stuff, so we have to account for that here.\n\t             */\n\t\n\t            next = target.next();\n\t            if (next.is(\".bootstrap-select\") && next.selectpicker) {\n\t                next.remove();\n\t                refresh = next.selectpicker;\n\t            }\n\t\n\t            target.remove().appendTo(wrapper);\n\t\n\t            if (refresh)\n\t                refresh.call(target);\n\t        }\n\t\n\t        var message;\n\t        if (error.message)\n\t            message = $(\"<div class='dialog-error help-block'>\").text(error.message);\n\t        wrapper.addClass(\"has-error\").append(message);\n\t\n\t        if (!wrapper.hasClass(\"error-keep\")) {\n\t            wrapper.on(\"keypress.dialog-error change.dialog-error\", function() {\n\t                wrapper.removeClass(\"has-error\")\n\t                    .find(\".dialog-error.help-block\").css(\"visibility\", \"hidden\");\n\t            });\n\t        }\n\t    }\n\t\n\t    function global_error(sel, error) {\n\t        var alert = $(\"<div class='alert alert-danger dialog-error'>\");\n\t        var text = error.message || error.toString();\n\t        alert.text(text);\n\t        $(\"<span class='fa fa-exclamation-triangle'>\").prependTo(alert);\n\t\n\t        /* Always log global dialog errors for easier debugging */\n\t        console.warn(text);\n\t\n\t        var footer = sel.find(\".modal-footer\");\n\t        if (footer.length)\n\t            alert.prependTo(footer);\n\t        else\n\t            alert.appendTo(sel);\n\t    }\n\t\n\t    function display_errors(sel, errors) {\n\t        clear_errors(sel);\n\t\n\t        /* The list of errors can also be passed as an array */\n\t        if (errors.length == 1 && $.isArray(errors[0]))\n\t            errors = errors[0];\n\t\n\t        var any = false;\n\t        errors.forEach(function(error) {\n\t            var target;\n\t            if (error) {\n\t                target = sel.find(error.target);\n\t\n\t                /* Errors for a specific field added below that field */\n\t                if (target && target.length)\n\t                    field_error(target, error);\n\t                else\n\t                    global_error(sel, error);\n\t\n\t                any = true;\n\t            }\n\t        });\n\t\n\t        if (!any)\n\t            return;\n\t\n\t        /* When dialog is shown again, remove all mods */\n\t        sel.on(\"show.bs.modal.dialog-error\", function() {\n\t            clear_errors(sel);\n\t        });\n\t    }\n\t\n\t    function DialogWait(promise, handle) {\n\t        this.promise = promise;\n\t        this.disabled = [];\n\t        this.handle = handle;\n\t    }\n\t\n\t    function clear_wait(sel) {\n\t        var data = sel.data(\"dialog-wait\");\n\t        sel.data(\"dialog-wait\", null);\n\t\n\t        sel.find(\".dialog-wait-ct\").remove();\n\t        sel.find(\".btn\").off(\".dialog-wait\");\n\t        sel.off(\".dialog-wait\");\n\t\n\t        if (data) {\n\t            data.disabled.forEach(function(ctl) {\n\t                ctl.removeAttr(\"disabled\");\n\t            });\n\t        }\n\t    }\n\t\n\t    function display_wait(sel, promise, handle) {\n\t        clear_wait(sel);\n\t\n\t        if (!promise) {\n\t            if (handle)\n\t                sel.modal(\"hide\");\n\t            return sel;\n\t        }\n\t\n\t        /* Clear all errors in the dialog */\n\t        if (handle)\n\t            display_errors(sel, []);\n\t\n\t        var wait = $(\"<div class='dialog-wait-ct pull-left'>\");\n\t        $(\"<div class='spinner spinner-sm'>\").appendTo(wait);\n\t        var message = $(\"<span>\").appendTo(wait);\n\t\n\t        sel.find(\".modal-footer button\").first().before(wait);\n\t\n\t        var data = new DialogWait(promise, handle);\n\t        sel.data(\"dialog-wait\", data);\n\t\n\t        var cancellation = promise.cancel || promise.close;\n\t        var cancelled = false;\n\t\n\t        /* Disable everything and stash previous disabled state */\n\t        var controls = sel.find(\".form-control\").add(\".btn\", sel);\n\t        if (cancellation)\n\t            controls = controls.not(\"[data-dismiss]\").not(\".btn-cancel\");\n\t        controls.each(function() {\n\t            var ctl = $(this);\n\t            if (!ctl.attr(\"disabled\")) {\n\t                data.disabled.push(ctl);\n\t                ctl.attr(\"disabled\", \"disabled\");\n\t            }\n\t        });\n\t\n\t        sel.find(\".btn[data-dismiss], .btn-cancel\").on(\"click.dialog-wait\", function() {\n\t            cancelled = true;\n\t            if (cancellation)\n\t                cancellation.apply(promise);\n\t            return false;\n\t        });\n\t\n\t        /* When dialog is shown again, remove all mods */\n\t        sel.on(\"hide.bs.modal.dialog-wait\", function() {\n\t            clear_wait(sel);\n\t        });\n\t\n\t        /*\n\t         * There is no way to remove a callback from a promise\n\t         * so we have to be careful to only react if still\n\t         * processing the same promise.\n\t         */\n\t        function restore() {\n\t            var state, data = sel.data(\"dialog-wait\");\n\t            if (data && data.promise === promise) {\n\t                clear_wait(sel);\n\t                state = promise.state();\n\t                if (cancelled || (state == \"resolved\" && data.handle))\n\t                    sel.modal('hide');\n\t                else if (state == \"rejected\" && data.handle)\n\t                    display_errors(sel, [ arguments[0] ]);\n\t            }\n\t        }\n\t\n\t        function update(arg) {\n\t            var data = sel.data(\"dialog-wait\");\n\t            if (data && data.promise === promise) {\n\t                if (typeof arg !== \"string\")\n\t                    arg = \"\";\n\t                message.text(arg);\n\t            }\n\t        }\n\t\n\t        promise\n\t            .always(restore)\n\t            .progress(update);\n\t\n\t        return sel;\n\t    }\n\t\n\t    $.fn.dialog = function dialog(action /* ... */) {\n\t        if (action === \"failure\")\n\t            return display_errors(this, Array.prototype.slice.call(arguments, 1));\n\t        else if (action === \"wait\")\n\t            return display_wait(this, arguments[1]);\n\t        else if (action === \"promise\")\n\t            return display_wait(this, arguments[1], true);\n\t        else\n\t            console.warn(\"unknown dialog action: \" + action);\n\t    };\n\t\n\t    window.addEventListener(\"hashchange\", function() {\n\t        $(\".modal\").modal(\"hide\");\n\t    });\n\t\n\t    /*\n\t     * OnOff switch pattern\n\t     */\n\t\n\t    function onoff_refresh(sel) {\n\t        /* During testing, no Cockpit dependency */\n\t        var _ = cockpit.gettext || function(x) { return x; };\n\t\n\t        sel = sel.find(\".btn-onoff-ct\").andSelf().filter(\".btn-onoff-ct\");\n\t        sel.each(function(x, el) {\n\t            var self = $(el)\n\t                .attr(\"data-toggle\", \"buttons\")\n\t                .addClass(\"btn-group\");\n\t            var value = self.onoff(\"value\");\n\t            var buttons = self.find(\".btn\");\n\t            var name = self.find(\"input\").first().attr(\"name\") || unique();\n\t            var i, input, text;\n\t            for (i = buttons.length; i < 2; i++) {\n\t                input = $('<input type=\"radio\" autocomplete=\"off\">');\n\t                text = document.createTextNode(i === 0 ? _(\"On\") : _(\"Off\"));\n\t                self.append($('<label class=\"btn\">').append(input, text));\n\t                buttons = null;\n\t            }\n\t            buttons = buttons || self.find(\".btn\");\n\t            buttons.find(\"input\").attr(\"name\", name);\n\t            onoff_change(self, !!value);\n\t        });\n\t        return sel;\n\t    }\n\t\n\t    function onoff_value(sel) {\n\t        return sel.find(\".btn\").first().hasClass(\"active\");\n\t    }\n\t\n\t    function onoff_change(sel, value) {\n\t        return sel.each(function(i, el) {\n\t            var buttons = $(el).find(\".btn\");\n\t            buttons.first().toggleClass(\"active\", !!value).find(\"input\").prop(\"checked\", !!value);\n\t            buttons.last().toggleClass(\"active\", !value).find(\"input\").prop(\"checked\", !value);\n\t        });\n\t    }\n\t\n\t    $.fn.onoff = function onoff(action /* ... */) {\n\t        if (arguments.length === 0 || action == \"refresh\") {\n\t            return onoff_refresh(this);\n\t        } else if (action === \"value\") {\n\t            if (arguments.length === 1)\n\t                return onoff_value(this);\n\t            else\n\t                return onoff_change(this, arguments[1]);\n\t        } else if (action == \"disabled\") {\n\t            return this.find(\".btn\").toggleClass(\"disabled\", arguments[1]);\n\t        } else {\n\t            console.warn(\"unknown switch action: \" + action);\n\t        }\n\t    };\n\t\n\t    /* ----------------------------------------------------------------------------\n\t     * Sliders\n\t     *\n\t     * <div class=\"slider\" value=\"0.5\">\n\t     *    <div class=\"slider-bar\">\n\t     *        <div class=\"slider-thumb\"></div>\n\t     *    </div>\n\t     *    <div class=\"slider-bar\">\n\t     *        <!-- optional left overs -->\n\t     *    </div>\n\t     * </div>\n\t     *\n\t     * A slider control. The first div.slider-bar is the one that is resized.\n\t     * The value will be bounded between 0 and 1 as a floating point number.\n\t     *\n\t     * The following div.slider-bar if present is resized to fill the remainder\n\t     * of the slider if not given a specific size. You can put more div.slider-bar\n\t     * inside it to reflect squashing other prevous allocations.\n\t     *\n\t     * If the following div.slider-bar have a width specified, then the\n\t     * slider supports the concept of overflowing. If the slider overflows\n\t     * it will get the .slider-warning class and go a bit red.\n\t     *\n\t     * On document creation any div.slider are automatically turned into\n\t     * Bar graphs.\n\t     *\n\t     * Slider has the following extra read/write properties:\n\t     *\n\t     * .value: the floating point value the slider is set to.\n\t     * .disabled: whether to display slider as disabled and refuse interacton.\n\t     *\n\t     * Slider has this event:\n\t     *\n\t     * on('change'): fired when the slider changes, passes value as additional arg.\n\t     */\n\t\n\t    function resize_flex(slider, flex, total, part) {\n\t        var value = 0;\n\t        if (part > total)\n\t            value = 1;\n\t        else if (part < 0 || isNaN(part))\n\t            value = 0;\n\t        else if (!isNaN(total) && total > 0 && part >= 0)\n\t            value = (part / total);\n\t        $(flex).css('width', (value * 100) + \"%\").\n\t            next(\"div\").css('margin-left', $(flex).css('width'));\n\t\n\t        /* Set the property and the attribute */\n\t        slider.value = value;\n\t    }\n\t\n\t    function update_value(slider) {\n\t        resize_flex(slider, $(slider).children(\"div.slider-bar\").first()[0], 1, slider.value);\n\t    }\n\t\n\t    function check_overflow(slider) {\n\t        $(slider).toggleClass(\"slider-warning\",\n\t                              slider.offsetWidth < slider.scrollWidth);\n\t    }\n\t\n\t    function setup_slider(slider) {\n\t        $(slider).attr('unselectable', 'on');\n\t\n\t        Object.defineProperty(slider, \"value\", {\n\t            get: function() {\n\t                return parseFloat(this.getAttribute(\"value\"));\n\t            },\n\t            set: function(v) {\n\t                var s = String(v);\n\t                if (s != this.getAttribute(\"value\"))\n\t                    this.setAttribute(\"value\", v);\n\t            }\n\t        });\n\t\n\t        Object.defineProperty(slider, \"disabled\", {\n\t            get: function() {\n\t                if (!this.hasAttribute(\"disabled\"))\n\t                    return false;\n\t                return this.getAttribute(\"disabled\").toLowerCase() != \"false\";\n\t            },\n\t            set: function(v) {\n\t                this.setAttribute(\"disabled\", v ? \"true\" : \"false\");\n\t            }\n\t        });\n\t\n\t        update_value(slider);\n\t        check_overflow(slider);\n\t\n\t        $(slider).on(\"change\", function() {\n\t            update_value(slider);\n\t            $(slider).toggleClass(\"slider-disabled\", slider.disabled);\n\t        });\n\t\n\t        if (slider.disabled)\n\t            $(slider).addClass(\"slider-disabled\");\n\t\n\t        $(slider).on(\"mousedown\", function(ev) {\n\t            if (slider.disabled)\n\t                return true; /* default action */\n\t            var flex;\n\t            var offset = $(slider).offset().left;\n\t            if ($(ev.target).hasClass(\"slider-thumb\")) {\n\t                var hitx  = (ev.offsetX || ev.clientX - $(ev.target).offset().left);\n\t                offset += (hitx - $(ev.target).outerWidth() / 2);\n\t                flex = $(ev.target).parent()[0];\n\t            } else {\n\t                flex = $(slider).children(\"div.slider-bar\").first()[0];\n\t                resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n\t                $(slider).trigger(\"change\", [slider.value]);\n\t                check_overflow(slider);\n\t            }\n\t\n\t            $(document).\n\t                on(\"mousemove.slider\", function(ev) {\n\t                    resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n\t                    $(slider).trigger(\"change\", [slider.value]);\n\t                    check_overflow(slider);\n\t                    return false;\n\t                }).\n\t                on(\"mouseup.slider\", function(ev) {\n\t                    $(document).\n\t                        off(\"mousemove.slider\").\n\t                        off(\"mouseup.slider\");\n\t                    return false;\n\t                });\n\t            return false; /* no default action */\n\t        });\n\t    }\n\t\n\t    function setup_sliders() {\n\t        $(\"div.slider\").each(function() {\n\t            setup_slider(this);\n\t        });\n\t    }\n\t\n\t    $.fn.slider = function Slider(action) {\n\t        var sel = this;\n\t        if (arguments.length === 0 || action == \"refresh\") {\n\t            sel.each(function() {\n\t                setup_slider(this);\n\t            });\n\t            return sel;\n\t        } else {\n\t            console.warn(\"unknown slider action: \" + action);\n\t        }\n\t    };\n\t\n\t    $(document).ready(setup_sliders);\n\t\n\t    /* -----------------------------------------------------------------------------\n\t     * Privileged UI actions.\n\t     */\n\t\n\t    // placement is optional, \"top\", \"left\", \"bottom\", \"right\"\n\t    $.fn.update_privileged = function update_privileged(perm, denied_message, placement) {\n\t        var allowed = (perm.allowed !== false);\n\t        var selector = this;\n\t\n\t        selector.each(function() {\n\t            // preserve old title first time to use when allowed\n\t            // activate tooltip\n\t            var allowed_key = 'allowed-title';\n\t            if (typeof $(this).data(allowed_key) === 'undefined' ||\n\t                   $(this).data(allowed_key) === false)\n\t                $(this).data(allowed_key, $(this).attr('title') || \"\");\n\t\n\t            var options = { html: true };\n\t            if (placement)\n\t                options['placement'] = placement;\n\t\n\t            $(this).tooltip(options);\n\t\n\t            if ($(this).hasClass(\"disabled\") === allowed) {\n\t              $(this).toggleClass(\"disabled\", !allowed)\n\t                   .attr('data-original-title', null);\n\t\n\t              if (allowed)\n\t                  $(this).attr('title', $(this).data(allowed_key));\n\t              else\n\t                  $(this).attr('title', denied_message);\n\t              $(this).tooltip('fixTitle');\n\t            }\n\t        });\n\t\n\t        return selector;\n\t    };\n\t}());\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"#!/bin/sh\\n\\nset -eu\\n\\n# The first thing we do is list loaded keys\\nssh-add -L || true\\n\\n# Try to list keys in this directory\\ncd \\\"$1\\\" || exit 0\\n\\n# After that each .pub file gets its on set of blocks\\nfor file in *.pub; do\\n    printf \\\"\\\\v\\\"\\n    cat \\\"$file\\\"\\n    printf \\\"\\\\v%s\\\\v\\\" \\\"$file\\\"\\n    ssh-keygen -l -f \\\"$file\\\" || true\\ndone\\n\"\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Add Machine to Dashboard</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td class=\\\"top\\\" translatable=\\\"yes\\\">Address</td>\\n                <td>\\n                <div class=\\\"dialog-wrapper error-keep\\\">\\n                    <input class=\\\"form-control\\\" id=\\\"add-machine-address\\\"\\n                       type=\\\"test\\\" value=\\\"{{ full_address }}\\\"\\n                       list=\\\"options\\\"\\n                       placeholder=\\\"{{ placeholder }}\\\"/>\\n                    <datalist id=\\\"options\\\">\\n                        {{#options}}\\n                        <option value=\\\"{{.}}\\\">\\n                        {{/options}}\\n                    </datalist>\\n                </div>\\n                </td>\\n            </tr>\\n            <tr>\\n                <td translatable=\\\"yes\\\">Color</td>\\n                <td id=\\\"add-machine-color-picker\\\">\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    {{#nearlimit}}\\n    <div class=\\\"alert alert-warning dialog-error dashboard-machine-warning\\\">\\n        <span class=\\\"pficon pficon-warning-triangle-o\\\"></span>\\n        <span translatable=\\\"yes\\\">Connecting simultaneously to more than {{ limit }} machines is unsupported.</span>\\n    </div>\\n    {{/nearlimit}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Add</button>\\n</div>\\n\"\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Authentication Failed</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    {{#supported}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}. To use this machine with cockpit you will need to enable one of the following authentication methods in the sshd config on {{#strong}}{{host}}{{/strong}}:</p>\\n    <ul>\\n        {{#password}}<li translatable=\\\"yes\\\">Password</li>{{/password}}\\n        {{#public-key}}<li translatable=\\\"yes\\\">Public Key</li>{{/public-key}}\\n        {{#gssapi-mic}}<li translatable=\\\"yes\\\">Kerberos Based SSO</li>{{/gssapi-mic}}\\n    </ul>\\n    {{/supported}}\\n\\n    {{^supported}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log in to {{#strong}}{{host}}{{/strong}}. {{#can_sync}}You may want to try to {{#sync_link}}synchronize users{{/sync_link}}.{{/can_sync}} For more authentication options and troubleshooting support please upgrade cockpit-ws to a newer version.</p>\\n    {{/supported}}\\n\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Log in to {{host}}</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    {{^available}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}.</p>\\n    {{/available}}\\n\\n    {{#available}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}. You can change your authentication credentials below. {{#can_sync}}You may prefer to {{#sync_link}}synchronize accounts and passwords{{/sync_link}}.{{/can_sync}}</p>\\n\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">User name</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"login-custom-user\\\" type=\\\"text\\\" value=\\\"{{machine_user}}\\\" placeholder=\\\"{{ user }}\\\"/>\\n                </td>\\n                <td>\\n                    <a tabindex=\\\"0\\\" role=\\\"button\\\" data-toggle=\\\"popover\\\"\\n                        data-trigger=\\\"focus\\\" data-placement=\\\"bottom\\\" translate=\\\"data-content\\\"\\n                        data-content=\\\"Leave blank to connect to this machine as the currently logged in user{{#user}} ({{user}}){{/user}}. If you enter a different username, that user will always be used connecting to this machine.\\\">\\n                        <span class=\\\"fa fa-lg fa-info-circle\\\"></span>\\n                    </a>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td translatable=\\\"yes\\\">Authentication</td>\\n                <td>\\n                    <div class=\\\"btn-group bootstrap-select dropdown form-control\\\" id=\\\"login-type\\\">\\n                        <button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\"\\n                            data-toggle=\\\"dropdown\\\">\\n                            <span class=\\\"pull-left\\\" translatable=\\\"yes\\\"></span>\\n                            <div class=\\\"caret\\\"></div>\\n                        </button>\\n                        <ul class=\\\"dropdown-menu\\\">\\n                            {{#allows_password}}\\n                            <li value=\\\"password\\\"><a translate>Type a password</a></li>\\n                            {{/allows_password}}\\n                            <li value=\\\"stored\\\"><a translate>Using available credentials</a></li>\\n                        </ul>\\n                    </div>\\n                </td>\\n            </tr>\\n\\n            {{#allows_password}}\\n            <tr id=\\\"login-diff-password\\\">\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">Password</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"login-custom-password\\\" type=\\\"password\\\" />\\n                </td>\\n                <td>\\n                    <a tabindex=\\\"0\\\" role=\\\"button\\\" data-toggle=\\\"popover\\\"\\n                        data-trigger=\\\"focus\\\" data-placement=\\\"bottom\\\" translate=\\\"data-content\\\"\\n                        data-content=\\\"Entering a different password here means you will need to retype it every time you reconnect to this machine\\\">\\n                        <span class=\\\"fa fa-lg fa-info-circle\\\"></span>\\n                    </a>\\n                </td>\\n            </tr>\\n            {{/allows_password}}\\n            <tr id=\\\"login-available\\\">\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">Available</td>\\n                <td class=\\\"top\\\">\\n                        {{#password}}<div translatable=\\\"yes\\\">Login Password</div>{{/password}}\\n                        {{#gssapi-mic}}<div translatable=\\\"yes\\\">Kerberos Ticket</div>{{/gssapi-mic}}\\n                        {{#public-key}}<div class=\\\"keys\\\"><div class='dialog-wait-ct pull-left'><div class='spinner spinner-sm'></div><span translatable=\\\"yes\\\">Checking for public keys</span></div></div>{{/public-key}}\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n    {{/available}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Log In</button>\\n</div>\\n\"\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Could not contact {{host}}</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <p>\\n        <span translatable=\\\"yes\\\">Cockpit was unable to contact {{#strong}}{{host}}{{/strong}}.</span>\\n        {{^allow_connection_string}}\\n        <span translatable=\\\"yes\\\">To try a different port you will need to upgrade cockpit-ws to a newer version.</span>\\n        {{/allow_connection_string}}\\n\\n        {{#allow_connection_string}}\\n        <span translatable=\\\"yes\\\">Is sshd running on a different port?</span>\\n        {{/allow_connection_string}}\\n    </p>\\n\\n    {{#allow_connection_string}}\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td class=\\\"top\\\" translatable=\\\"yes\\\">Port</td>\\n                <td>\\n                <div class=\\\"dialog-wrapper error-keep\\\">\\n                    <input id=\\\"edit-machine-port\\\" class=\\\"form-control\\\"\\n                       type=\\\"test\\\" value=\\\"{{ port }}\\\"\\n                       list=\\\"options\\\"\\n                       placeholder=\\\"22\\\"/>\\n                </div>\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n    {{/allow_connection_string}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    {{#allow_connection_string}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Update</button>\\n    {{/allow_connection_string}}\\n\\n    {{^allow_connection_string}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n    {{/allow_connection_string}}\\n</div>\\n\"\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div>\\n    <div id=\\\"host-edit-color\\\" data-toggle=\\\"dropdown\\\"></div>\\n    <div id=\\\"host-edit-color-popover\\\" class=\\\"popover in\\\" tabindex=\\\"-1\\\">\\n        <div class=\\\"arrow\\\"></div>\\n        <div class=\\\"popover-content\\\">\\n            {{#colors}}\\n            <div>\\n                {{#list}}\\n                <div class=\\\"color-cell\\\"></div>\\n                {{/list}}\\n            </div>\\n            {{/colors}}\\n        </div>\\n        <div class=\\\"arrow\\\"></div>\\n    </div>\\n</div>\\n\"\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Incorrect Host Key</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <div class=\\\"banned\\\">\\n        <i class=\\\"fa fa-ban\\\"></i>\\n    </div>\\n    <p translatable=\\\"yes\\\">The key of {{#strong}}{{host}}{{/strong}} does not match the key previously in use. Unless this machine was recently replaced, it is likely that someone is trying to attack your connection to this machine.</p>\\n\\n    {{#key_host}}\\n    <p translatable=\\\"yes\\\">You can remove the previously stored key by running the following command</p>\\n\\n    <pre class=\\\"center\\\">ssh-keygen -R {{ key_host }} -f {{ path }}</pre>\\n    {{/key_host}}\\n\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Cockpit is not installed</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <p translatable=\\\"yes\\\">A compatible version of Cockpit is not installed on {{#strong}}{{host}}{{/strong}}.</p>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n/***/ },\n/* 29 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Synchronize users</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <p translatable=\\\"yes\\\">Select the users that you would like to be synchronized with {{#strong}}{{host}}{{/strong}}</p>\\n\\n{{#perm_failed}}\\n    <div class=\\\"alert alert-danger dialog-error\\\">\\n        <span class=\\\"fa fa-exclamation-triangle\\\"></span>\\n        <span translatable=\\\"yes\\\">Error loading users: {{perm_failed}}</span>\\n    </div>\\n{{/perm_failed}}\\n\\n{{^perm_failed}}\\n    <div id=\\\"sync-users\\\">\\n        <table class=\\\"table\\\">\\n        <tbody>\\n        {{^users}}\\n            <tr>\\n                  <td>\\n                    <div class=\\\"center-spinner\\\">\\n                        <div class=\\\"spinner spinner-lg\\\"></div>\\n                    </div>\\n                  </td>\\n            </tr>\\n        {{/users}}\\n\\n        {{#users}}\\n              <tr>\\n                  <td><input type=\\\"checkbox\\\" name=\\\"{{username}}\\\" {{#checked}}checked=checked{{/checked}} /></td>\\n                  <td>{{username}}</td>\\n                  <td>{{name}}</td>\\n                  <td>&#8226;&#8226;&#8226;&#8226;&#8226;</td>\\n                  <td>{{formated_groups}}</td>\\n              </tr>\\n        {{/users}}\\n        </tbody>\\n        </table>\\n    </div>\\n\\n    {{#needs_auth}}\\n    <div>\\n        {{#needs_root}}\\n        <p translatable=\\\"yes\\\">You are connected to {{#strong}}{{host}}{{/strong}}, however in order to synchronize users, a user with superuser privileges is required.</p>\\n        {{/needs_root}}\\n        {{^needs_root}}\\n        <p translatable=\\\"yes\\\">In order to synchronize users, you need to log in to {{#strong}}{{host}}{{/strong}}.</p>\\n        {{/needs_root}}\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\">User name</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"sync-username\\\" type=\\\"text\\\" />\\n                </td>\\n            </tr>\\n            {{#allows_password}}\\n            <tr>\\n                <td translatable=\\\"yes\\\">Password</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"sync-password\\\" type=\\\"password\\\" />\\n                </td>\\n            </tr>\\n            {{/allows_password}}\\n        </table>\\n    </div>\\n    {{/needs_auth}}\\n{{/perm_failed}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary disabled\\\" translatable=\\\"yes\\\">Synchronize</button>\\n</div>\\n\"\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Unknown Host Key</h4>\\n</div>\\n<div id=\\\"add-unknown-host\\\" class=\\\"modal-body\\\">\\n    {{#key}}\\n        <p translatable=\\\"yes\\\">The authenticity of host {{#strong}}{{host}}{{/strong}} can't be established. Are you sure you want to continue connecting?</p>\\n        <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\">Fingerprint</td>\\n                <td><pre class=\\\"machine-key\\\">{{key}} </pre></td>\\n            </tr>\\n        </table>\\n        </div>\\n    {{/key}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n\\n    {{#key}}\\n        <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Connect</button>\\n    {{/key}}\\n</div>\\n\"\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2014 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar $ = __webpack_require__(6);\n\t\n\t/* Construct a simple image editor inside 'element'.  It can only crop\n\t * an image to a square region.\n\t *\n\t * - editor = image_editor(element, width, height)\n\t *\n\t * - editor.load_data(data).done(...).fail(...)\n\t *\n\t * - editor.select_file().done(...).fail(...)\n\t *\n\t * - editor.get_data(width, height)\n\t *\n\t * - editor.changed\n\t *\n\t * - editor.start_crop()\n\t */\n\t\n\tfunction image_editor(element, width, height) {\n\t    var self = {\n\t        load_data: load_data,\n\t        get_data: get_data,\n\t        start_cropping: start_cropping,\n\t        stop_cropping: stop_cropping,\n\t        select_file: select_file,\n\t        changed: false\n\t    };\n\t\n\t    var square_size = Math.min (width, height);\n\t    var initial_crop_size = square_size;\n\t    var crop_handle_width = 20;\n\t\n\t    var $image_canvas, $overlay_canvas, $file_input;\n\t    var image_canvas, overlay_canvas;\n\t    var image_2d, overlay_2d;\n\t\n\t\n\t    function setup() {\n\t        element.empty().\n\t            css('width', width).\n\t            css('height', height).\n\t            css('position', 'relative').\n\t            append(\n\t                $image_canvas = $('<canvas>'),\n\t                $overlay_canvas = $('<canvas>').\n\t                    css('position', 'absolute').\n\t                    css('top', 0).\n\t                    css('left', 0).\n\t                    css('z-index', 10));\n\t        $('body').append(\n\t            $file_input = $('<input data-role=\"none\" type=\"file\">').hide());\n\t\n\t        image_canvas = $image_canvas[0];\n\t        image_2d = image_canvas.getContext(\"2d\");\n\t        overlay_canvas = $overlay_canvas[0];\n\t        overlay_2d = overlay_canvas.getContext(\"2d\");\n\t        image_canvas.width = overlay_canvas.width = width;\n\t        image_canvas.height = overlay_canvas.height = height;\n\t\n\t        $file_input.on('change', load_file);\n\t    }\n\t\n\t    var cropping = false;\n\t    var crop_x, crop_y, crop_s;\n\t\n\t    function start_cropping() {\n\t        cropping = true;\n\t        set_crop ((width - initial_crop_size) / 2, (height - initial_crop_size) / 2, initial_crop_size, true);\n\t        $overlay_canvas.on('mousedown', mousedown);\n\t    }\n\t\n\t    function stop_cropping() {\n\t        cropping = false;\n\t        overlay_2d.clearRect(0, 0, width, height);\n\t        $overlay_canvas.off('mousedown', mousedown);\n\t    }\n\t\n\t    function set_crop(x, y, s, fix) {\n\t        function clamp (low, val, high) {\n\t            if (val < low)\n\t                return low;\n\t            if (val > high)\n\t                return high;\n\t            return val;\n\t        }\n\t\n\t        x = Math.floor(x);\n\t        y = Math.floor(y);\n\t        s = Math.floor(s);\n\t\n\t        var min_s = 2 * crop_handle_width;\n\t\n\t        if (fix) {\n\t            // move it until it fits\n\t            s = clamp (min_s, s, square_size);\n\t            x = clamp (0, x, width - s);\n\t            y = clamp (0, y, height - s);\n\t        } else if (x < 0 || y < 0 || x + s > width || y + s > height || s < min_s)\n\t            return;\n\t\n\t        crop_x = x;\n\t        crop_y = y;\n\t        crop_s = s;\n\t\n\t        draw_crop (x, y, x+s, y+s);\n\t    }\n\t\n\t    function draw_crop(x1,y1,x2,y2) {\n\t        var ctxt = overlay_2d;\n\t\n\t        function draw_box (x1, y1, x2, y2) {\n\t            ctxt.strokeStyle = 'black';\n\t            ctxt.strokeRect(x1+0.5, y1+0.5, x2-x1-1, y2-y1-1);\n\t            ctxt.strokeStyle = 'white';\n\t            ctxt.strokeRect(x1+1.5, y1+1.5, x2-x1-3, y2-y1-3);\n\t        }\n\t\n\t        ctxt.clearRect(0, 0, width, height);\n\t        ctxt.fillStyle = 'rgba(0,0,0,0.8)';\n\t        ctxt.fillRect(0, 0, width, height);\n\t        ctxt.clearRect(x1, y1, x2 - x1, y2 - y1);\n\t\n\t        var h_w = crop_handle_width;\n\t        draw_box (x1, y1, x1+h_w, y1+h_w);\n\t        draw_box (x2-h_w, y1, x2, y1+h_w);\n\t        draw_box (x1, y2-h_w, x1+h_w, y2);\n\t        draw_box (x2-h_w, y2-h_w, x2, y2);\n\t        draw_box (x1, y1, x2, y2);\n\t    }\n\t\n\t    function mousedown(ev) {\n\t        var offset = $overlay_canvas.offset();\n\t        var xoff = ev.pageX - offset.left - crop_x;\n\t        var yoff = ev.pageY - offset.top - crop_y;\n\t\n\t        var orig_x = crop_x;\n\t        var orig_y = crop_y;\n\t        var orig_s = crop_s;\n\t\n\t        var proj_sign, dx_sign, dy_sign, ds_sign;\n\t\n\t        var h_w = crop_handle_width;\n\t\n\t        function mousemove(ev) {\n\t            var x = ev.pageX - offset.left - xoff;\n\t            var y = ev.pageY - offset.top - yoff;\n\t            if (proj_sign === 0)\n\t                set_crop (x, y, orig_s, true);\n\t            else {\n\t                var d = Math.floor((x - orig_x + proj_sign * (y - orig_y)) / 2);\n\t                set_crop (orig_x + dx_sign*d, orig_y + dy_sign*d, orig_s + ds_sign*d, false);\n\t            }\n\t            self.changed = true;\n\t        }\n\t\n\t        function mouseup(ev) {\n\t            $('body').off('mousemove', mousemove);\n\t            $('body').off('mouseup', mouseup);\n\t        }\n\t\n\t        if (xoff > 0 && yoff > 0 && xoff < crop_s && yoff < crop_s) {\n\t            if (xoff < h_w && yoff < h_w) {\n\t                // top left\n\t                proj_sign = 1;\n\t                dx_sign = 1;\n\t                dy_sign = 1;\n\t                ds_sign = -1;\n\t            } else if (xoff > crop_s - h_w && yoff < h_w) {\n\t                // top right\n\t                proj_sign = -1;\n\t                dx_sign = 0;\n\t                dy_sign = -1;\n\t                ds_sign = 1;\n\t            } else if (xoff < h_w && yoff > crop_s - h_w) {\n\t                // bottom left\n\t                proj_sign = -1;\n\t                dx_sign = 1;\n\t                dy_sign = 0;\n\t                ds_sign = -1;\n\t            } else if (xoff > crop_s - h_w && yoff > crop_s - h_w) {\n\t                // bottom right\n\t                proj_sign = 1;\n\t                dx_sign = 0;\n\t                dy_sign = 0;\n\t                ds_sign = 1;\n\t            } else {\n\t                // center\n\t                proj_sign = 0;\n\t            }\n\t\n\t            $('body').on('mousemove', mousemove);\n\t            $('body').on('mouseup', mouseup);\n\t        }\n\t    }\n\t\n\t    function load_data(data) {\n\t        var dfd = $.Deferred();\n\t        var img = new window.Image();\n\t        img.onerror = function () {\n\t            dfd.reject();\n\t        };\n\t        img.onload = function () {\n\t            var dest_w, dest_h;\n\t            if (img.width > img.height) {\n\t                dest_w = width;\n\t                dest_h = dest_w * (img.height/img.width);\n\t            } else {\n\t                dest_h = height;\n\t                dest_w = dest_h * (img.width/img.height);\n\t            }\n\t            image_2d.fillStyle = 'rgb(255,255,255)';\n\t            image_2d.fillRect(0, 0, width, height);\n\t            image_2d.drawImage(img, (width - dest_w) / 2, (height - dest_h) / 2, dest_w, dest_h);\n\t            initial_crop_size = Math.min(dest_h, dest_w);\n\t            dfd.resolve();\n\t        };\n\t        img.src = data;\n\t        return dfd.promise();\n\t    }\n\t\n\t    function get_data(width, height, format) {\n\t        var dest = $('<canvas/>')[0];\n\t        dest.width = width;\n\t        dest.height = height;\n\t        var ctxt = dest.getContext(\"2d\");\n\t        if (cropping) {\n\t            ctxt.drawImage (image_canvas,\n\t                            crop_x, crop_y, crop_s, crop_s,\n\t                            0, 0, width, height);\n\t        } else {\n\t            ctxt.drawImage (image_canvas,\n\t                            0, 0, square_size, square_size,\n\t                            0, 0, width, height);\n\t        }\n\t        return dest.toDataURL(format);\n\t    }\n\t\n\t    var select_dfd;\n\t\n\t    function load_file()\n\t    {\n\t        var files, file, reader;\n\t        files = $file_input[0].files;\n\t        if (files.length != 1) {\n\t            select_dfd.reject();\n\t            return;\n\t        }\n\t        file = files[0];\n\t        if (!file.type.match(\"image.*\")) {\n\t            select_dfd.reject();\n\t            return;\n\t        }\n\t        reader = new window.FileReader();\n\t        reader.onerror = function () {\n\t            select_dfd.reject();\n\t        };\n\t        reader.onload = function () {\n\t            load_data(reader.result).\n\t                done(function () {\n\t                    select_dfd.resolve();\n\t                }).\n\t                fail(function () {\n\t                    select_dfd.reject();\n\t                });\n\t        };\n\t        reader.readAsDataURL(file);\n\t    }\n\t\n\t    function select_file() {\n\t        select_dfd = $.Deferred();\n\t        if (window.File && window.FileReader)\n\t            $file_input.trigger('click');\n\t        else\n\t            select_dfd.reject();\n\t        return select_dfd.promise();\n\t    }\n\t\n\t    setup();\n\t\n\t    return self;\n\t}\n\t\n\tmodule.exports = image_editor;\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// dashboard/dashboard.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f8b75713b6c3387c1233","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2015 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar $ = require(\"jquery\");\nvar cockpit = require(\"cockpit\");\n\nvar Mustache = require(\"mustache\");\nvar plot = require(\"plot\");\n\nvar machines = require(\"machines\");\nvar mdialogs = require(\"machine-dialogs\");\nrequire(\"patterns\");\n\nvar image_editor = require(\"./image-editor\");\n\nvar _ = cockpit.gettext;\n\n/* Handles an href link to a server */\n$(document).on(\"click\", \"a[data-address]\", function(ev) {\n    cockpit.jump(\"/\", $(this).attr(\"data-address\"));\n    ev.preventDefault();\n});\n\nvar common_plot_options = {\n    legend: { show: false },\n    series: { shadowSize: 0 },\n    xaxis: { tickColor: \"#d1d1d1\", mode: \"time\", tickFormatter: plot.format_date_tick, minTickSize: [ 1, 'minute' ] },\n    // The point radius influences the margin around the grid even if\n    // no points are plotted.  We don't want any margin, so we set the\n    // radius to zero.\n    points: { radius: 0 },\n    grid: { borderWidth: 1,\n            borderColor: \"#e1e6ed\",\n            hoverable: true,\n            autoHighlight: false\n          }\n};\n\nvar resource_monitors = [\n    { selector: \"#dashboard-plot-0\",\n      plot: {\n          direct: [\n              \"kernel.all.cpu.nice\",\n              \"kernel.all.cpu.user\",\n              \"kernel.all.cpu.sys\"\n          ],\n          internal: [\n              \"cpu.basic.nice\",\n              \"cpu.basic.user\",\n              \"cpu.basic.system\"\n          ],\n          units: \"millisec\",\n          derive: \"rate\",\n          factor: 0.1  // millisec / sec -> percent\n      },\n      options: { yaxis: { tickColor: \"#e1e6ed\",\n                          tickFormatter: function(v) { return v + \"%\"; }} },\n      ymax_unit: 100\n    },\n    { selector: \"#dashboard-plot-1\",\n      plot: {\n          direct: [\n              \"mem.util.used\"\n          ],\n          internal: [\n              \"memory.used\"\n          ],\n          units: \"bytes\",\n      },\n      options: { yaxis: { ticks: plot.memory_ticks,\n                          tickColor: \"#e1e6ed\",\n                          tickFormatter: plot.format_bytes_tick\n                        }\n               },\n      ymax_unit: 100000000\n    },\n    { selector: \"#dashboard-plot-2\",\n      plot: {\n          direct: [\n              \"network.interface.total.bytes\"\n          ],\n          internal: [\n              \"network.interface.rx\",\n              \"network.interface.tx\"\n          ],\n          units: \"bytes\",\n          'omit-instances': [ \"lo\" ],\n          derive: \"rate\"\n      },\n      options: { yaxis: { tickColor: \"#e1e6ed\",\n                          tickFormatter: plot.format_bits_per_sec_tick\n                        }\n               },\n      ymax_min: 100000\n    },\n    { selector: \"#dashboard-plot-3\",\n      plot: {\n          direct: [\n              \"disk.dev.total_bytes\"\n          ],\n          internal: [\n              \"block.device.read\",\n              \"block.device.written\"\n          ],\n          units: \"bytes\",\n          derive: \"rate\"\n      },\n      options: { yaxis: { ticks: plot.memory_ticks,\n                          tickColor: \"#e1e6ed\",\n                          tickFormatter: plot.format_bytes_per_sec_tick\n                        }\n               },\n      ymax_min: 100000\n    }\n];\n\nvar avatar_editor;\n\n$(function () {\n    avatar_editor = image_editor($('#host-edit-avatar'), 256, 256);\n});\n\nfunction host_edit_dialog(machine_manager, machine_dialogs, host) {\n    var machine = machine_manager.lookup(host);\n    if (!machine)\n        return;\n\n    var can_change_user = machine.address != \"localhost\";\n    var dlg = $(\"#host-edit-dialog\");\n    $('#host-edit-fail').text(\"\").hide();\n    $('#host-edit-name').val(machine.label);\n    $('#host-edit-name').prop('disabled', machine.state == \"failed\");\n    $('#host-edit-user-row').toggle(machines.allow_connection_string);\n\n    if (machines.allow_connection_string) {\n        cockpit.user().done(function (user) {\n            $('#host-edit-user').attr('placeholder', user.name);\n        });\n        $('#host-edit-user').prop('disabled', !can_change_user);\n        $('#host-edit-user').val(machine.user);\n        $(\"#host-edit-dialog a[data-content]\").popover();\n    }\n\n    machine_dialogs.render_color_picker(\"#host-edit-colorpicker\", machine.address);\n    $('#host-edit-sync-users').off('click');\n    $(\"#host-edit-sync-users\").on('click', function () {\n        $(\"#host-edit-dialog\").modal('hide');\n        machine_dialogs.render_dialog(\"sync-users\",\n                                      \"dashboard_setup_server_dialog\",\n                                      machine.address);\n    });\n\n    $('#host-edit-apply').off('click');\n    $('#host-edit-apply').on('click', function () {\n        dlg.dialog('failure', null);\n        var values = {\n            avatar: avatar_editor.changed ? avatar_editor.get_data(128, 128, \"image/png\") : null,\n            color: machines.colors.parse($('#host-edit-colorpicker #host-edit-color').css('background-color')),\n            label: $('#host-edit-name').val(),\n        };\n\n        if (can_change_user && machines.allow_connection_string)\n            values.user = $('#host-edit-user').val();\n\n        var promise = machine_manager.change(machine.key, values);\n        dlg.dialog('promise', promise);\n    });\n    $('#host-edit-avatar').off('click');\n    $('#host-edit-avatar').on('click', function () {\n        $('#host-edit-fail').text(\"\").hide();\n        avatar_editor.select_file().\n            done(function () {\n                $('#host-edit-avatar').off('click');\n                avatar_editor.changed = true;\n                avatar_editor.start_cropping();\n            });\n    });\n    dlg.modal('show');\n    avatar_editor.stop_cropping();\n    avatar_editor.load_data(machine.avatar || \"images/server-large.png\").\n        fail(function () {\n            $('#host-edit-fail').text(\"Can't load image\").show();\n        });\n}\n\nvar permission = cockpit.permission({ admin: true });\n$(permission).on(\"changed\", update_servers_privileged);\n\nfunction update_servers_privileged() {\n    $(\".servers-privileged\").update_privileged(\n        permission, cockpit.format(\n            _(\"The user <b>$0</b> is not permitted to manage servers\"),\n            permission.user ? permission.user.name : '')\n    );\n}\n\nPageDashboard.prototype = {\n    _init: function() {\n        this.id = \"dashboard\";\n        this.edit_enabled = false;\n    },\n\n    getTitle: function() {\n        return null;\n    },\n\n    toggle_edit: function(val) {\n        var self = this;\n        self.edit_enabled = val;\n        $('#dashboard-enable-edit').toggleClass('active', self.edit_enabled);\n        $('.os').toggleClass('hidden', self.edit_enabled);\n        $('#dashboard-hosts').toggleClass('editable', self.edit_enabled);\n    },\n\n    setup: function() {\n        var self = this;\n\n        self.machines = machines.instance();\n\n        self.mdialogs = mdialogs.new_manager(self.machines);\n\n        var current_monitor = 0;\n\n        $('#dashboard-add').click(function () {\n            self.mdialogs.render_dialog(\"add-machine\", \"dashboard_setup_server_dialog\");\n        });\n        $('#dashboard-enable-edit').click(function () {\n            self.toggle_edit(!self.edit_enabled);\n        });\n\n        var renderer = host_renderer($(\"#dashboard-hosts .list-group\"));\n        $(self.machines).on(\"added.dashboard\", renderer);\n        $(self.machines).on(\"removed.dashboard\", renderer);\n        $(self.machines).on(\"updated.dashboard\", renderer);\n\n        $('#dashboard .nav-tabs li').click(function () {\n            set_monitor(parseInt($(this).data('monitor-id'), 10));\n        });\n\n        function set_monitor(id) {\n            $('#dashboard .nav-tabs li').removeClass(\"active\");\n            $('#dashboard .nav-tabs li[data-monitor-id=' + id + ']').addClass(\"active\");\n            current_monitor = id;\n            $('.dashboard-plot').hide();\n            $(resource_monitors[id].selector).show();\n            plot_refresh();\n        }\n\n        plot_init();\n        set_monitor(current_monitor);\n        plot.setup_plot_controls($('#dashboard'), $('#dashboard-toolbar'), self.plots);\n\n        $(\"#dashboard-hosts\")\n            .on(\"click\", \"a.list-group-item\", function() {\n                if (self.edit_enabled)\n                    return false;\n            })\n            .on(\"click\", \"button.pficon-delete\", function() {\n                var item = $(this).parent(\".list-group-item\");\n                self.toggle_edit(false);\n                var machine = self.machines.lookup(item.attr(\"data-address\"));\n                if (machine)\n                    self.machines.change(machine.key, { visible: false });\n                return false;\n            })\n            .on(\"click\", \"button.pficon-edit\", function() {\n                var item = $(this).parent(\".list-group-item\");\n                var host = item.attr(\"data-address\");\n                self.toggle_edit(false);\n                host_edit_dialog(self.machines, self.mdialogs, host);\n                return false;\n            })\n            .on(\"mouseenter\", \"a.list-group-item\", function() {\n                highlight($(this), true);\n            })\n            .on(\"mouseleave\", \"a.list-group-item\", function() {\n                highlight($(this), false);\n            });\n\n        var series = { };\n\n        function update_series() {\n            var refresh = false;\n\n            var seen = { };\n            $.each(series, function(addr) {\n                seen[addr] = true;\n            });\n\n            $(\"#dashboard-hosts .list-group-item\").each(function() {\n                var item = $(this);\n                var addr = item.attr(\"data-address\");\n                var machine = self.machines.lookup(addr);\n                if (!machine || machine.state != \"connected\")\n                    return;\n                delete seen[addr];\n                if (!series[addr]) {\n                    series[addr] = plot_add(addr);\n                }\n                series[addr].forEach(function (s) {\n                    $(s)\n                        .off('hover')\n                        .on('hover', function(event, val) {\n                            highlight(item, val);\n                        });\n                    var color = machine.color;\n                    if (s.options.color != color) {\n                        refresh = true;\n                        s.options.color = color;\n                    }\n                });\n            });\n\n            $.each(seen, function(addr) {\n                series[addr].forEach(function (s) { s.remove(); });\n                delete series[addr];\n            });\n\n            if (refresh)\n                plot_refresh();\n        }\n\n        function highlight(item, val) {\n            item.toggleClass(\"highlight-ct\", val);\n            var ser = series[item.attr(\"data-address\")];\n            if (ser) {\n                ser.forEach(function (s) {\n                    s.options.lines.lineWidth = val? 3 : 2;\n                    if (val)\n                        s.move_to_front();\n                });\n                plot_refresh();\n            }\n        }\n\n        function host_renderer(target) {\n            var template = $(\"#dashboard-hosts-tmpl\").html();\n            Mustache.parse(template);\n\n            /* jshint validthis:true */\n            function render_avatar() {\n                if (this.state == \"failed\")\n                    return \"../shell/images/server-error.png\";\n                else if (this.avatar)\n                    return this.avatar;\n                else\n                    return \"../shell/images/server-small.png\";\n            }\n\n            function avatar_display() {\n                if (this.restarting)\n                    return \"hidden\";\n                else\n                    return \"\";\n            }\n\n            function connecting_display() {\n                if (this.restarting)\n                    return \"\";\n                else\n                    return \"hidden\";\n            }\n\n            function render() {\n                var text = Mustache.render(template, {\n                    machines: self.machines.list,\n                    render_avatar: render_avatar,\n                    avatar_display: avatar_display,\n                    connecting_display: connecting_display\n                });\n\n                target.html(text);\n                $(\"[data-color]\", target).each(function() {\n                    $(this).css(\"border-left-color\", $(this).attr(\"data-color\"));\n                });\n                $(\".delete-localhost\").tooltip({\n                      title : _(\"You are currently connected directly to this server. You cannot delete it.\")\n                });\n                $(\".delete-localhost\").toggleClass('disabled', true);\n                $(\".delete-localhost\").toggleClass('servers-privileged', false);\n                update_servers_privileged();\n                update_series();\n            }\n\n            /* delay and throttle rendering\n               events shouldn't fire continuously anyway,\n               so in case of a burst it's better to wait a bit before we start rendering\n             */\n            function throttled_render() {\n                var timer = null;\n                return function() {\n                    if (timer === null) {\n                        timer = window.setTimeout(function () {\n                            timer = null;\n                            render();\n                        }, 500);\n                    }\n                };\n            }\n            return throttled_render();\n        }\n\n        function plot_refresh() {\n            self.plots.forEach(function (p) { p.refresh(); });\n        }\n\n        function plot_add(addr) {\n            var machine = self.machines.lookup(addr);\n\n            if (!machine || machine.state != \"connected\")\n                return null;\n\n            var series = [ ];\n            var i = 0;\n            resource_monitors.forEach(function (rm) {\n                if (self.plots[i]) {\n                    series.push(self.plots[i].add_metrics_sum_series($.extend({ host: machine.connection_string},\n                                                                              rm.plot),\n                                                                     { color: machine.color,\n                                                                       lines: {\n                                                                           lineWidth: 2\n                                                                       }\n                                                                     }));\n                }\n                i += 1;\n            });\n            return series;\n        }\n\n        function plot_init() {\n            self.plots = [];\n\n            resource_monitors.forEach(function (rm) {\n                function setup_hook(flot) {\n                    var axes = flot.getAxes();\n                    var config = rm;\n\n                    if (rm.ymax_unit) {\n                        if (axes.yaxis.datamax)\n                            axes.yaxis.options.max = Math.ceil(axes.yaxis.datamax / config.ymax_unit) * rm.ymax_unit;\n                        else\n                            axes.yaxis.options.max = rm.ymax_unit;\n                    }\n\n                    if (rm.ymax_min) {\n                        if (axes.yaxis.datamax < rm.ymax_min)\n                            axes.yaxis.options.max = rm.ymax_min;\n                        else\n                            axes.yaxis.options.max = null;\n                    }\n\n                    axes.yaxis.options.min = 0;\n                }\n\n                if (!rm.selector)\n                    return;\n\n                var options = $.extend({ setup_hook: setup_hook },\n                                       common_plot_options,\n                                       rm.options);\n                var pl = plot.plot($(rm.selector));\n                pl.set_options(options);\n                self.plots.push(pl);\n            });\n\n            series = {};\n            update_series();\n        }\n\n        $(window).on('resize.dashboard', function () {\n            self.plots.forEach(function (p) { p.resize(); });\n        });\n\n        renderer();\n    },\n\n    show: function() {\n        update_servers_privileged();\n        this.plots[0].resize();\n        this.toggle_edit(false);\n    },\n\n    enter: function() {\n    },\n\n    leave: function () {\n    }\n};\n\nfunction PageDashboard() {\n    this._init();\n}\n\n/*\n * INITIALIZATION AND NAVIGATION\n *\n * The code above still uses the legacy 'Page' abstraction for both\n * pages and dialogs, and expects page.setup, page.enter, page.show,\n * and page.leave to be called at the right times.\n *\n * We cater to this with a little compatibility shim consisting of\n * 'dialog_setup', 'page_show', and 'page_hide'.\n */\n\nfunction page_show(p, arg) {\n    if (p._entered_)\n        p.leave();\n    p.enter(arg);\n    p._entered_ = true;\n    $('#' + p.id).show();\n    p.show();\n}\n\nfunction init() {\n    var dashboard_page;\n\n    function navigate() {\n        var path = cockpit.location.path;\n\n        if (path.length === 0) {\n            page_show(dashboard_page);\n        } else { /* redirect */\n            console.warn(\"not a dashboard location: \" + path);\n            cockpit.location = '';\n        }\n\n        $(\"body\").removeAttr(\"hidden\");\n    }\n\n    cockpit.translate();\n\n    dashboard_page = new PageDashboard();\n    dashboard_page.setup();\n\n    $(cockpit).on(\"locationchanged\", navigate);\n    navigate();\n}\n\n$(init);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/dashboard/list.js\n// module id = 5\n// module chunks = 0","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 6\n// module chunks = 0","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 7\n// module chunks = 0","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar cockpit = require(\"cockpit\");\nvar mustache = require(\"mustache/mustache\");\n\n/*\n * Turns a mustache template into a translated mustache template\n * by preparsing it and translating it.\n */\nvar cache = { };\n\nfunction translate(template) {\n    if (template in cache)\n        return cache[template];\n    var div = document.createElement(\"div\");\n    div.innerHTML = template;\n    cockpit.translate(div);\n    var result = div.innerHTML;\n    cache[template] = result;\n    return result;\n}\n\n/* Just like the mustache object, except for translated */\nmodule.exports = cockpit.extend({ }, mustache, {\n    render: function render(template, view, partials) {\n        return translate(mustache.render(template, view, partials));\n    },\n    to_html: function to_html(template, view, partials, send) {\n        return translate(mustache.to_html(template, view, partials, send));\n    },\n    clearCache: function clearCache() {\n        cache = { };\n        return mustache.clearCache();\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/mustache.js\n// module id = 8\n// module chunks = 0","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false*/\n\n(function (root, factory) {\n  if (typeof exports === \"object\" && exports) {\n    factory(exports); // CommonJS\n  } else {\n    var mustache = {};\n    factory(mustache);\n    if (typeof define === \"function\" && define.amd) {\n      define(mustache); // AMD\n    } else {\n      root.Mustache = mustache; // <script>\n    }\n  }\n}(this, function (mustache) {\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var RegExp_test = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return RegExp_test.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var Object_toString = Object.prototype.toString;\n  var isArray = Array.isArray || function (object) {\n    return Object_toString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  var entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  function escapeTags(tags) {\n    if (!isArray(tags) || tags.length !== 2) {\n      throw new Error('Invalid tags: ' + tags);\n    }\n\n    return [\n      new RegExp(escapeRegExp(tags[0]) + \"\\\\s*\"),\n      new RegExp(\"\\\\s*\" + escapeRegExp(tags[1]))\n    ];\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate(template, tags) {\n    tags = tags || mustache.tags;\n    template = template || '';\n\n    if (typeof tags === 'string') {\n      tags = tags.split(spaceRe);\n    }\n\n    var tagRes = escapeTags(tags);\n    var scanner = new Scanner(template);\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) {\n          delete tokens[spaces.pop()];\n        }\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(tagRes[0]);\n      if (value) {\n        for (var i = 0, len = value.length; i < len; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push(['text', chr, start, start + 1]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(tagRes[0])) break;\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(tagRes[1]);\n      } else if (type === '{') {\n        value = scanner.scanUntil(new RegExp('\\\\s*' + escapeRegExp('}' + tags[1])));\n        scanner.scan(curlyRe);\n        scanner.scanUntil(tagRes[1]);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(tagRes[1]);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(tagRes[1])) {\n        throw new Error('Unclosed tag at ' + scanner.pos);\n      }\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection) {\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n        }\n        if (openSection[1] !== value) {\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n        }\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        tagRes = escapeTags(tags = value.split(spaceRe));\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n    if (openSection) {\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n    }\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function () {\n    return this.tail === \"\";\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function (re) {\n    var match = this.tail.match(re);\n\n    if (match && match.index === 0) {\n      var string = match[0];\n      this.tail = this.tail.substring(string.length);\n      this.pos += string.length;\n      return string;\n    }\n\n    return \"\";\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = \"\";\n      break;\n    case 0:\n      match = \"\";\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view == null ? {} : view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function (name) {\n    var value;\n    if (name in this.cache) {\n      value = this.cache[name];\n    } else {\n      var context = this;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n\n          var names = name.split('.'), i = 0;\n          while (value != null && i < names.length) {\n            value = value[names[i++]];\n          }\n        } else {\n          value = context.view[name];\n        }\n\n        if (value != null) break;\n\n        context = context.parent;\n      }\n\n      this.cache[name] = value;\n    }\n\n    if (isFunction(value)) {\n      value = value.call(this.view);\n    }\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null) {\n      tokens = cache[template] = parseTemplate(template, tags);\n    }\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    var self = this;\n    function subRender(template) {\n      return self.render(template, context, partials);\n    }\n\n    var token, value;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n        value = context.lookup(token[1]);\n        if (!value) continue;\n\n        if (isArray(value)) {\n          for (var j = 0, jlen = value.length; j < jlen; ++j) {\n            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n          }\n        } else if (typeof value === 'object' || typeof value === 'string') {\n          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n        } else if (isFunction(value)) {\n          if (typeof originalTemplate !== 'string') {\n            throw new Error('Cannot use higher-order sections without the original template');\n          }\n\n          // Extract the portion of the original template that the section contains.\n          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n          if (value != null) buffer += value;\n        } else {\n          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n        }\n\n        break;\n      case '^':\n        value = context.lookup(token[1]);\n\n        // Use JavaScript's definition of falsy. Include empty arrays.\n        // See https://github.com/janl/mustache.js/issues/186\n        if (!value || (isArray(value) && value.length === 0)) {\n          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n        }\n\n        break;\n      case '>':\n        if (!partials) continue;\n        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n        if (value != null) buffer += this.renderTokens(this.parse(value), context, partials, value);\n        break;\n      case '&':\n        value = context.lookup(token[1]);\n        if (value != null) buffer += value;\n        break;\n      case 'name':\n        value = context.lookup(token[1]);\n        if (value != null) buffer += mustache.escape(value);\n        break;\n      case 'text':\n        buffer += token[1];\n        break;\n      }\n    }\n\n    return buffer;\n  };\n\n  mustache.name = \"mustache.js\";\n  mustache.version = \"0.8.1\";\n  mustache.tags = [ \"{{\", \"}}\" ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function (template, view, partials) {\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.\n  mustache.to_html = function (template, view, partials, send) {\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/mustache/mustache.js\n// module id = 9\n// module chunks = 0","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2014 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar $ = require(\"jquery\");\nvar cockpit = require(\"cockpit\");\n\nrequire(\"jquery-flot/jquery.flot\");\nrequire(\"jquery-flot/jquery.flot.selection\");\nrequire(\"jquery-flot/jquery.flot.time\");\n\nvar plotter = { };\n\nvar C_ = cockpit.gettext;\n\n/* A thin abstraction over flot and metrics channels.  It mostly\n * shields you from hairy array acrobatics and having to know when it\n * is safe or required to create the flot object.\n *\n *\n * - plot = plotter.plot(element, x_range, [x_stop])\n *\n * Creates a 'plot' object attached to the given DOM element.  It will\n * show 'x_range' seconds worth of samples, until 'x_stop'.\n *\n * If 'x_stop' is undefined, the plot will show the last 'x_range'\n * seconds until now and walking will work as expected (see below).\n *\n * If 'x_stop' is not undefined, it should be the number of seconds\n * since the epoch.\n *\n * - plot.start_walking()\n *\n * Scroll towards the future.\n *\n * - plot.stop_walking()\n *\n * Stop automatic scrolling.\n *\n * - plot.refresh()\n *\n * Draw the plot.\n *\n * - plot.resize()\n *\n * Resize the plot to fit into its DOM element.  This will\n * automatically refresh the plot.  You should also call this function\n * when 'element' has changed visibility as that might affect its\n * size.\n *\n * - plot.set_options(options)\n *\n * Set the global flot options.  You need to refresh the plot\n * afterwards.\n *\n * In addition to the flot options, you can also set 'setup_hook'\n * field to a function.  This function will be called between\n * flot.setData() and flot.draw() and can be used to adjust the axes\n * limits, for example.  It is called with the flot object as its only\n * parameter.\n *\n * - options = plot.get_options()\n *\n * Get the global flot options.  You can modify the object and then\n * pass it to set_options.  Don't forget to refresh the plot.\n *\n * - plot.reset(x_range, [x_stop])\n *\n * Resets the range of the plot.  All current sources are reinitialzed\n * but keep their current samples.\n *\n * - plot.destroy()\n *\n * Resets the plot to be empty.  The plot will disappear completely\n * from the DOM, including the grid.\n *\n * - series = plot.add_metrics_sum_series(desc, options)\n *\n * Adds a single series into the plot that is fed by a metrics\n * channel.  The series will have the given flot options.  The plot\n * will automatically refresh as data becomes available from the\n * channel.\n *\n * The single value for the series is computed by summing the values\n * for all metrics and all instances that are delivered by the\n * channel.\n *\n * The 'desc' argument determines the channel options:\n *\n *   metrics:         An array with the names of all metrics to monitor.\n *   units:           The common units string for all metrics.\n *   instances:       A optional list of instances to include.\n *   omit_instances:  A optional list of instances to omit.\n *   factor:          A factor to apply to the final sum of all samples.\n *\n * - series.options\n *\n * Direct access to the series options.  You need to refresh the plot\n * after changing it.\n *\n * - series.move_to_front()\n *\n * Move the series in front of all other series.  You need to refresh\n * the plot to see the effect immediately.\n *\n * - series.remove()\n *\n * Removes the series from its plot.  The plot will be refreshed.\n *\n * - $(series).on('hover', function (event, val) { ... })\n *\n * This event is triggered when the user hovers over the series ('val'\n * == true), or stops hovering over it ('val' == false).\n */\n\nplotter.plot = function plot(element, x_range_seconds, x_stop_seconds) {\n    var options = { };\n    var result = { };\n\n    var series = [ ];\n    var flot_data = [ ];\n    var flot = null;\n\n    var interval;\n    var grid;\n\n    function refresh_now() {\n        if (element.height() === 0 || element.width() === 0)\n            return;\n\n        if (flot === null)\n            flot = $.plot(element, flot_data, options);\n\n        flot.setData(flot_data);\n        var axes = flot.getAxes();\n\n        /* Walking and fetching samples are not synchronized, which\n         * means that a walk step might reveal a sample that hasn't\n         * been fetched yet.  To reduce flicker, we cut off one extra\n         * sample at the end.\n         */\n        axes.xaxis.options.min = grid.beg * interval;\n        axes.xaxis.options.max = (grid.end - 2) * interval;\n        if (options.setup_hook)\n            options.setup_hook(flot);\n\n        /* This makes sure that the axes are displayed even for an\n         * empty plot.\n         */\n        axes.xaxis.show = true;\n        axes.xaxis.used = true;\n        axes.yaxis.show = true;\n        axes.yaxis.used = true;\n\n        flot.setupGrid();\n        flot.draw();\n    }\n\n    var refresh_pending = false;\n\n    function refresh() {\n        if (!refresh_pending) {\n            refresh_pending = true;\n            window.setTimeout(function () {\n                refresh_pending = false;\n                refresh_now();\n            }, 0);\n        }\n    }\n\n    function start_walking() {\n        grid.walk();\n    }\n\n    function stop_walking() {\n        grid.move(grid.beg, grid.end);\n    }\n\n    var sync_suppressed = 0;\n\n    function reset(x_range_seconds, x_stop_seconds) {\n        if (flot)\n            flot.clearSelection(true);\n\n        // Fill the plot with about 1000 samples, but don't sample\n        // faster than once per second.\n        //\n        // TODO - do this based on the actual size of the plot.\n\n        interval = Math.ceil(x_range_seconds / 1000) * 1000;\n\n        var x_offset;\n        if (x_stop_seconds !== undefined)\n            x_offset = (new Date().getTime()) - x_stop_seconds * 1000;\n        else\n            x_offset = 0;\n\n        var beg = -Math.ceil((x_range_seconds * 1000 + x_offset) / interval);\n        var end = -Math.floor(x_offset / interval);\n\n        if (grid && grid.interval == interval) {\n            grid.move(beg, end);\n        } else {\n            if (grid)\n                grid.close();\n            grid = cockpit.grid(interval, beg, end);\n            sync_suppressed++;\n            for (var i = 0; i < series.length; i++)\n                series[i].reset();\n            sync_suppressed--;\n            sync();\n\n            $(grid).on('notify', function (event, index, count) {\n                refresh();\n            });\n        }\n    }\n\n    function sync() {\n        if (sync_suppressed === 0)\n            grid.sync();\n    }\n\n    function destroy() {\n        grid.close();\n        for (var i = 0; i < series.length; i++)\n            series[i].stop();\n\n        options = { };\n        series = [ ];\n        flot_data = [ ];\n        flot = null;\n        $(element).empty();\n        $(element).data(\"flot_data\", null);\n    }\n\n    function resize() {\n        if (element.height() === 0 || element.width() === 0)\n            return;\n        if (flot)\n            flot.resize();\n        refresh();\n    }\n\n    function set_options(opts) {\n        options = opts;\n        flot = null;\n    }\n\n    function get_options() {\n        return options;\n    }\n\n    function add_metrics_sum_series(desc, opts) {\n        var channel = null;\n\n        var self = {\n            options: opts,\n            move_to_front: move_to_front,\n            remove: remove\n        };\n\n        series.push({\n            stop: stop,\n            reset: reset_series,\n            hover_hit: hover_hit,\n            hover: hover\n        });\n\n        function stop() {\n            if (channel)\n                channel.close();\n        }\n\n        function add_series() {\n            flot_data.push(opts);\n        }\n\n        function remove_series() {\n            var pos = flot_data.indexOf(opts);\n            if (pos >= 0)\n                flot_data.splice(pos, 1);\n        }\n\n        function move_to_front() {\n            var pos = flot_data.indexOf(opts);\n            if (pos >= 0) {\n                flot_data.splice(pos, 1);\n                flot_data.push(opts);\n            }\n        }\n\n        function remove() {\n            stop();\n            remove_series();\n            refresh();\n        }\n\n        function build_metric(n) {\n            return { name: n, units: desc.units, derive: desc.derive };\n        }\n\n        var chanopts_list = [ ];\n\n        if (desc.direct) {\n            chanopts_list.push({ source: \"direct\",\n                                 archive_source: \"pcp-archive\",\n                                 metrics: desc.direct.map(build_metric),\n                                 instances: desc.instances,\n                                 \"omit-instances\": desc['omit-instances'],\n                                 host: desc.host\n                               });\n        }\n\n        if (desc.internal) {\n            chanopts_list.push({ source: \"internal\",\n                                 metrics: desc.internal.map(build_metric),\n                                 instances: desc.instances,\n                                 \"omit-instances\": desc['omit-instances'],\n                                 host: desc.host\n                               });\n        }\n\n        function flat_sum(val) {\n            var i, sum;\n\n            if (!val)\n                return 0;\n            if (val.length !== undefined) {\n                sum = 0;\n                for (i = 0; i < val.length; i++)\n                    sum += flat_sum(val[i]);\n                return sum;\n            }\n            return val;\n        }\n\n        function reset_series() {\n            if (channel)\n                channel.close();\n\n            channel = cockpit.metrics(interval, chanopts_list);\n\n            var metrics_row = grid.add(channel, [ ]);\n            var factor = desc.factor || 1;\n            opts.data = grid.add(function(row, x, n) {\n                for (var i = 0; i < n; i++)\n                    row[x + i] = [(grid.beg + x + i)*interval, flat_sum(metrics_row[x + i]) * factor];\n            });\n\n            function check_archives() {\n                if (channel.archives && !result.archives) {\n                    result.archives = true;\n                    $(result).triggerHandler(\"changed\");\n                }\n            }\n\n            $(channel).on('changed', check_archives);\n            check_archives();\n\n            sync();\n        }\n\n        function hover_hit(pos, item) {\n            return !!(item && (item.series.data == opts.data));\n        }\n\n        function hover(val) {\n            $(self).triggerHandler('hover', [ val ]);\n        }\n\n        reset_series();\n        add_series();\n\n        return self;\n    }\n\n    function add_metrics_stacked_instances_series(desc, opts) {\n        var channel = null;\n\n        var self = {\n            add_instance:    add_instance,\n            clear_instances: clear_instances\n        };\n\n        series.push({\n            stop: stop,\n            reset: reset_series,\n            hover_hit: hover_hit,\n            hover: hover\n        });\n\n        function stop() {\n            if (channel)\n                channel.close();\n        }\n\n        function build_metric(n) {\n            return { name: n, units: desc.units, derive: desc.derive };\n        }\n\n        var chanopts_list = [ ];\n\n        if (desc.direct) {\n            chanopts_list.push({ source: \"direct\",\n                                 archive_source: \"pcp-archive\",\n                                 metrics: [ build_metric(desc.direct) ],\n                                 metrics_path_names: [ \"a\" ],\n                                 instances: desc.instances,\n                                 \"omit-instances\": desc['omit-instances'],\n                                 host: desc.host\n                               });\n        }\n\n        if (desc.internal) {\n            chanopts_list.push({ source: \"internal\",\n                                 metrics: [ build_metric(desc.internal) ],\n                                 metrics_path_names: [ \"a\" ],\n                                 instances: desc.instances,\n                                 \"omit-instances\": desc['omit-instances'],\n                                 host: desc.host\n                               });\n        }\n\n        var instances = { };\n        var last_instance = null;\n\n        function reset_series() {\n            if (channel)\n                channel.close();\n\n            channel = cockpit.metrics(interval, chanopts_list);\n\n            function check_archives() {\n                if (channel.archives && !result.archives) {\n                    result.archives = true;\n                    $(result).triggerHandler(\"changed\");\n                }\n            }\n\n            $(channel).on('changed', check_archives);\n            check_archives();\n\n            sync_suppressed++;\n            for (var name in instances)\n                instances[name].reset();\n            sync_suppressed--;\n            sync();\n        }\n\n        function add_instance(name, selector) {\n            if (instances[name])\n                return;\n\n            var instance_data = $.extend({ selector: selector }, opts);\n            var factor = desc.factor || 1;\n            var threshold = desc.threshold || 0;\n            var metrics_row;\n\n            var last = last_instance;\n\n            function reset() {\n                metrics_row = grid.add(channel, [ \"a\", name ]);\n                instance_data.data = grid.add(function(row, x, n) {\n                    for (var i = 0; i < n; i++) {\n                        var value = (metrics_row[x + i] || 0)*factor;\n                        var ts = (grid.beg + x + i)*interval;\n                        var floor = 0;\n\n                        if (last) {\n                            if (last.data[x + i][1])\n                                floor = last.data[x + i][1];\n                            else\n                                floor = last.data[x + i][2];\n                        }\n\n                        if (Math.abs(value) > threshold) {\n                            row[x + i] = [ ts, floor + value, floor ];\n                            if (row[x + i - 1] && row[x + i - 1][1] === null)\n                                row[x + i - 1][1] = row[x + i - 1][2];\n                        } else {\n                            row[x + i] = [ ts, null, floor ];\n                            if (row[x + i - 1] && row[x + i - 1][1] !== null)\n                                row[x + i - 1][1] = row[x + i - 1][2];\n                        }\n                    }\n                });\n                sync();\n            }\n\n            function remove() {\n                grid.remove(metrics_row);\n                grid.remove(instance_data.data);\n                var pos = flot_data.indexOf(instance_data);\n                if (pos >= 0)\n                    flot_data.splice(pos, 1);\n            }\n\n            last_instance = instance_data;\n            instances[name] = instance_data;\n            instance_data.reset = reset;\n            instance_data.remove = remove;\n\n            reset();\n            flot_data.push(instance_data);\n        }\n\n        function clear_instances() {\n            for (var i in instances)\n                instances[i].remove();\n            instances = { };\n            last_instance = null;\n        }\n\n        function hover_hit(pos, item) {\n            var name, index;\n\n            if (!grid)\n                return false;\n\n            index = Math.round(pos.x/interval) - grid.beg;\n            if (index < 0)\n                index = 0;\n\n            for (name in instances) {\n                var d = instances[name].data;\n                if (d[index] && d[index][1] && d[index][2] <= pos.y && pos.y <= d[index][1])\n                    return instances[name].selector || name;\n            }\n            return false;\n        }\n\n        function hover(val) {\n            $(self).triggerHandler('hover', [ val ]);\n        }\n\n        reset_series();\n        return self;\n    }\n\n    var cur_hover_series = null;\n    var cur_hover_val = false;\n\n    function hover(next_hover_series, next_hover_val) {\n        if (cur_hover_series != next_hover_series) {\n            if (cur_hover_series)\n                cur_hover_series.hover(false);\n            cur_hover_series = next_hover_series;\n            cur_hover_val = next_hover_val;\n            if (cur_hover_series)\n                cur_hover_series.hover(cur_hover_val);\n        } else if (cur_hover_val != next_hover_val) {\n            cur_hover_val = next_hover_val;\n            if (cur_hover_series)\n                cur_hover_series.hover(cur_hover_val);\n        }\n    }\n\n    function hover_on(event, pos, item) {\n        var next_hover_series = null;\n        var next_hover_val = false;\n        for (var i = 0; i < series.length; i++) {\n            next_hover_val = series[i].hover_hit(pos, item);\n            if (next_hover_val) {\n                next_hover_series = series[i];\n                break;\n            }\n        }\n\n        hover(next_hover_series, next_hover_val);\n    }\n\n    function hover_off(event) {\n        hover(null, false);\n    }\n\n    function selecting(event, ranges) {\n        if (ranges)\n            $(result).triggerHandler(\"zoomstart\", [ ]);\n    }\n\n    function selected(event, ranges) {\n        flot.clearSelection(true);\n        $(result).triggerHandler(\"zoom\", [ (ranges.xaxis.to - ranges.xaxis.from) / 1000, ranges.xaxis.to / 1000]);\n    }\n\n    $(element).on(\"plothover\", hover_on);\n    $(element).on(\"mouseleave\", hover_off);\n    $(element).on(\"plotselecting\", selecting);\n    $(element).on(\"plotselected\", selected);\n\n    // for testing\n    $(element).data(\"flot_data\", flot_data);\n\n    reset(x_range_seconds, x_stop_seconds);\n\n    $.extend(result, {\n        archives: false, /* true if any archive data found */\n        start_walking: start_walking,\n        stop_walking: stop_walking,\n        refresh: refresh,\n        reset: reset,\n        destroy: destroy,\n        resize: resize,\n        set_options: set_options,\n        get_options: get_options,\n        add_metrics_sum_series: add_metrics_sum_series,\n        add_metrics_stacked_instances_series: add_metrics_stacked_instances_series\n    });\n\n    return result;\n};\n\nvar plot_colors = [ \"#006bb4\",\n                    \"#008ff0\",\n                    \"#2daaff\",\n                    \"#69c2ff\",\n                    \"#a5daff\",\n                    \"#e1f3ff\",\n                    \"#00243c\",\n                    \"#004778\"\n                  ];\n\nplotter.plot_simple_template = function simple() {\n    return {\n        colors: plot_colors,\n        legend: { show: false },\n        series: { shadowSize: 0,\n            lines: {\n                lineWidth: 2.0,\n                fill: 0.4\n            }\n        },\n        xaxis: { tickLength: 0,\n                 mode: \"time\",\n                 tickFormatter: plotter.format_date_tick,\n                 minTickSize: [ 1, 'minute' ],\n                 reserveSpace: false\n               },\n        yaxis: { tickColor: \"#d1d1d1\",\n                 min: 0\n               },\n        /*\n         * The point radius influences the margin around the grid even if no points\n         * are plotted. We don't want any margin, so we set the radius to zero.\n         */\n        points: {\n            radius: 0\n        },\n        grid: {\n            borderWidth: 1,\n            aboveData: false,\n            color: \"black\",\n            borderColor: $.color.parse(\"black\").scale('a', 0.22).toString(),\n            labelMargin: 0\n        }\n    };\n};\n\nplotter.memory_ticks = function memory_ticks(opts) {\n    // Not more than 5 ticks, nicely rounded to powers of 2.\n    var size = Math.pow(2.0, Math.ceil(Math.log(opts.max/5)/Math.LN2));\n    var ticks = [ ];\n    for (var t = 0; t < opts.max; t += size)\n        ticks.push(t);\n    return ticks;\n};\n\nvar month_names = [\n    C_(\"month-name\", 'Jan'),\n    C_(\"month-name\", 'Feb'),\n    C_(\"month-name\", 'Mar'),\n    C_(\"month-name\", 'Apr'),\n    C_(\"month-name\", 'May'),\n    C_(\"month-name\", 'Jun'),\n    C_(\"month-name\", 'Jul'),\n    C_(\"month-name\", 'Aug'),\n    C_(\"month-name\", 'Sep'),\n    C_(\"month-name\", 'Oct'),\n    C_(\"month-name\", 'Nov'),\n    C_(\"month-name\", 'Dec')\n];\n\nplotter.format_date_tick = function format_date_tick(val, axis) {\n    function pad(n) {\n        var str = n.toFixed();\n        if(str.length == 1)\n            str = '0' + str;\n        return str;\n    }\n\n    var year_index = 0;\n    var month_index = 1;\n    var day_index = 2;\n    var hour_minute_index = 3;\n\n    var begin;\n    var end;\n\n    // Determine the smallest unit according to the steps from one\n    // tick to the next.\n\n    var size = axis.tickSize[1];\n    if (size == \"minute\" || size == \"hour\")\n        end = hour_minute_index;\n    else if (size == \"day\")\n        end = day_index;\n    else if (size == \"month\")\n        end = month_index;\n    else\n        end = year_index;\n\n    // Determine biggest unit according to how far away the left edge\n    // of the graph is from 'now'.\n\n    var n = new Date();\n    var l = new Date(axis.min);\n\n    begin = year_index;\n    if (l.getFullYear() == n.getFullYear()) {\n        begin = month_index;\n        if (l.getMonth() == n.getMonth()) {\n            begin = day_index;\n            if (l.getDate() == n.getDate())\n                begin = hour_minute_index;\n        }\n    }\n\n    // Adjust so that it all makes sense\n\n    if (begin > end)\n        begin = end;\n    if (begin == day_index)\n        begin = month_index;\n\n    // And render it\n\n    var d = new Date(val);\n    var label = \" \";\n\n    if (year_index >= begin && year_index <= end)\n        label += d.getFullYear().toFixed() + \" \";\n    if (month_index >= begin && month_index <= end)\n        label += month_names[d.getMonth()] + \" \";\n    if (day_index >= begin && day_index <= end)\n        label += d.getDate().toFixed() + \" \";\n    if (hour_minute_index >= begin && hour_minute_index <= end)\n        label += pad(d.getHours()) + ':' + pad(d.getMinutes()) + \" \";\n\n    return label.substr(0, label.length-1);\n};\n\nplotter.bytes_tick_unit = function bytes_tick_unit(axis) {\n    return cockpit.format_bytes(axis.max, 1024, true)[1];\n};\n\nplotter.format_bytes_tick_no_unit = function format_bytes_tick_no_unit(val, axis) {\n    return cockpit.format_bytes(val, plotter.bytes_tick_unit(axis), true)[0];\n};\n\nplotter.format_bytes_tick = function format_bytes_tick(val, axis) {\n    return cockpit.format_bytes(val, 1024);\n};\n\nplotter.bytes_per_sec_tick_unit = function bytes_per_sec_tick_unit(axis) {\n    return cockpit.format_bytes_per_sec(axis.max, 1024, true)[1];\n};\n\nplotter.format_bytes_per_sec_tick_no_unit = function format_bytes_per_sec_tick_no_unit(val, axis) {\n    return cockpit.format_bytes_per_sec(val, plotter.bytes_per_sec_tick_unit(axis), true)[0];\n};\n\nplotter.format_bytes_per_sec_tick = function format_bytes_per_sec_tick(val, axis) {\n    return cockpit.format_bytes_per_sec(val, 1024);\n};\n\nplotter.bits_per_sec_tick_unit = function bits_per_sec_tick_unit(axis) {\n    return cockpit.format_bits_per_sec(axis.max*8, 1000, true)[1];\n};\n\nplotter.format_bits_per_sec_tick_no_unit = function format_bits_per_sec_tick_no_tick(val, axis) {\n    return cockpit.format_bits_per_sec(val*8, plotter.bits_per_sec_tick_unit(axis), true)[0];\n};\n\nplotter.format_bits_per_sec_tick = function format_bits_per_sec_tick(val, axis) {\n    return cockpit.format_bits_per_sec(val*8, 1000);\n};\n\nplotter.setup_plot_controls = function setup_plot_controls(container, element, plots) {\n\n    var plot_min_x_range = 5*60;\n    var plot_zoom_steps = [ 5*60,  60*60, 6*60*60, 24*60*60, 7*24*60*60, 30*24*60*60, 365*24*60*60 ];\n\n    var plot_x_range = 5*60;\n    var plot_x_stop;\n    var zoom_history = [ ];\n\n    element.find('[data-range]').click(function () {\n        zoom_history = [ ];\n        plot_x_range = parseInt($(this).attr('data-range'), 10);\n        plot_reset();\n    });\n\n    element.find('[data-action=\"goto-now\"]').click(function () {\n        plot_x_stop = undefined;\n        plot_reset();\n    });\n\n    element.find('[data-action=\"scroll-left\"]').click(function () {\n        var step = plot_x_range / 10;\n        if (plot_x_stop === undefined)\n            plot_x_stop = (new Date()).getTime() / 1000;\n        plot_x_stop -= step;\n        plot_reset();\n    });\n\n    element.find('[data-action=\"scroll-right\"]').click(function () {\n        var step = plot_x_range / 10;\n        if (plot_x_stop !== undefined) {\n            plot_x_stop += step;\n            plot_reset();\n        }\n    });\n\n    element.find('[data-action=\"zoom-out\"]').click(function () {\n        zoom_plot_out();\n    });\n\n    function zoom_plot_start() {\n        if (plot_x_stop === undefined) {\n            plots.forEach(function (p) {\n                p.stop_walking();\n            });\n            plot_x_stop = (new Date()).getTime() / 1000;\n            update_plot_buttons();\n        }\n    }\n\n    function zoom_plot_in(x_range, x_stop) {\n        zoom_history.push(plot_x_range);\n        plot_x_range = x_range;\n        plot_x_stop = x_stop;\n        plot_reset();\n    }\n\n    function zoom_plot_out() {\n        var r = zoom_history.pop();\n        if (r === undefined) {\n            var i;\n            for (i = 0; i < plot_zoom_steps.length-1; i++) {\n                if (plot_zoom_steps[i] > plot_x_range)\n                    break;\n            }\n            r = plot_zoom_steps[i];\n        }\n        if (plot_x_stop !== undefined)\n            plot_x_stop += (r - plot_x_range)/2;\n        plot_x_range = r;\n        plot_reset();\n    }\n\n    function format_range(seconds) {\n        var n;\n        if (seconds >= 365*24*60*60) {\n            n = Math.ceil(seconds / (365*24*60*60));\n            return cockpit.format(cockpit.ngettext(\"$0 year\", \"$0 years\", n), n);\n        } else if (seconds >= 30*24*60*60) {\n            n = Math.ceil(seconds / (30*24*60*60));\n            return cockpit.format(cockpit.ngettext(\"$0 month\", \"$0 months\", n), n);\n        } else if (seconds >= 7*24*60*60) {\n            n = Math.ceil(seconds / (7*24*60*60));\n            return cockpit.format(cockpit.ngettext(\"$0 week\", \"$0 weeks\", n), n);\n        } else if (seconds >= 24*60*60) {\n            n = Math.ceil(seconds / (24*60*60));\n            return cockpit.format(cockpit.ngettext(\"$0 day\", \"$0 days\", n), n);\n        } else if (seconds >= 60*60) {\n            n = Math.ceil(seconds / (60*60));\n            return cockpit.format(cockpit.ngettext(\"$0 hour\", \"$0 hours\", n), n);\n        } else {\n            n = Math.ceil(seconds / 60);\n            return cockpit.format(cockpit.ngettext(\"$0 minute\", \"$0 minutes\", n), n);\n        }\n    }\n\n    function update_plot_buttons() {\n        element.find('[data-action=\"scroll-right\"]')\n            .attr('disabled', plot_x_stop === undefined);\n        element.find('[data-action=\"zoom-out\"]')\n            .attr('disabled', plot_x_range >= plot_zoom_steps[plot_zoom_steps.length-1]);\n    }\n\n    function update_selection_zooming() {\n        var mode;\n\n        if (container.hasClass('show-zoom-controls') && plot_x_range > plot_min_x_range) {\n            container.addClass('show-zoom-cursor');\n            mode = \"x\";\n        } else {\n            container.removeClass('show-zoom-cursor');\n            mode = null;\n        }\n\n        plots.forEach(function (p) {\n            var options = p.get_options();\n            if (!options.selection || options.selection.mode != mode) {\n                options.selection = { mode: mode, color: \"#d4edfa\" };\n                p.set_options(options);\n                p.refresh();\n            }\n        });\n    }\n\n    function plot_reset() {\n        if (plot_x_range < plot_min_x_range) {\n            plot_x_stop += (plot_min_x_range - plot_x_range)/2;\n            plot_x_range = plot_min_x_range;\n        }\n        if (plot_x_stop >= (new Date()).getTime() / 1000 - 10)\n            plot_x_stop = undefined;\n\n        element.find('.dropdown-toggle span:first-child').text(format_range(plot_x_range));\n\n        plots.forEach(function (p) {\n            p.stop_walking();\n            p.reset(plot_x_range, plot_x_stop);\n            p.refresh();\n            if (plot_x_stop === undefined)\n                p.start_walking();\n\n            function check_archives() {\n                if (p.archives) {\n                    container.addClass('show-zoom-controls');\n                    update_selection_zooming();\n                }\n            }\n\n            $(p).on(\"changed\", check_archives);\n            check_archives();\n        });\n\n        update_plot_buttons();\n        update_selection_zooming();\n    }\n\n    function reset(p) {\n        if (p === undefined)\n            p = [ ];\n        plots = p;\n        plots.forEach(function (p) {\n            $(p).on(\"zoomstart\", function (event) { zoom_plot_start(); });\n            $(p).on(\"zoom\", function (event, x_range, x_stop) { zoom_plot_in(x_range, x_stop); });\n        });\n        plot_reset();\n    }\n\n    reset(plots);\n\n    return {\n        reset: reset\n    };\n};\n\nfunction setup_plot(graph_id, grid, data, user_options) {\n    var options = {\n        colors: [ \"#0099d3\" ],\n        legend: { show: false },\n        series: { shadowSize: 0,\n                  lines: { lineWidth: 0.0,\n                           fill: 1.0\n                         }\n                },\n        xaxis: { tickFormatter: function() { return \"\"; } },\n        yaxis: { tickFormatter: function() { return \"\"; } },\n        // The point radius influences\n        // the margin around the grid\n        // even if no points are plotted.\n        // We don't want any margin, so\n        // we set the radius to zero.\n        points: { radius: 0 },\n        grid: { borderWidth: 1,\n                aboveData: true,\n                color: \"black\",\n                borderColor: $.color.parse(\"black\").scale('a', 0.22).toString(),\n                labelMargin: 0\n              }\n    };\n\n    var plot;\n    var running = false;\n    var self;\n\n    $.extend(true, options, user_options);\n\n    // We put the plot inside its own div so that we can give that div\n    // a fixed size which only changes when we can also immediately\n    // call plot.resize().  Otherwise, the labels and legends briefly\n    // get out of sync during resizing.\n\n    var outer_div = $(graph_id);\n    var inner_div = $('<div/>');\n    outer_div.empty();\n    outer_div.append(inner_div);\n\n    function sync_divs ()\n    {\n        inner_div.width(outer_div.width());\n        inner_div.height(outer_div.height());\n    }\n\n    // Updating flot options is tricky and somewhat implementation\n    // defined.  Different options needs different approaches.  So we\n    // just have very specific functions for changing specific options\n    // until a pattern emerges.\n\n    function set_yaxis_max (max) {\n        if (plot) {\n            plot.getAxes().yaxis.options.max = max;\n            refresh ();\n        } else {\n            options.yaxis.max = max;\n        }\n    }\n\n    function start ()\n    {\n        running = true;\n        maybe_start();\n    }\n\n    function maybe_start() {\n        if (running && outer_div.width() !== 0 && outer_div.height() !== 0) {\n            if (!plot) {\n                sync_divs ();\n                plot = $.plot(inner_div, data, options);\n            } else\n                resize();\n        }\n    }\n\n    function stop ()\n    {\n        running = false;\n    }\n\n    function refresh() {\n        if (plot && running) {\n            plot.setData(data);\n            if (user_options.setup_hook)\n                user_options.setup_hook(plot);\n            plot.setupGrid();\n            plot.draw();\n        }\n    }\n\n    function resize() {\n        if (plot && running) {\n            sync_divs ();\n            if (inner_div.width() > 0 && inner_div.height() > 0)\n                plot.resize();\n            refresh();\n        }\n    }\n\n    function destroy () {\n        $(self).trigger('destroyed');\n        $(window).off('resize', resize);\n        $(outer_div).empty();\n        plot = null;\n    }\n\n    $(grid).on('notify', refresh);\n    $(window).on('resize', resize);\n    maybe_start();\n\n    self = { start: start, stop: stop,\n             resize: resize, element: inner_div[0],\n             set_yaxis_max: set_yaxis_max,\n             destroy: destroy\n           };\n    return self;\n}\n\nplotter.setup_complicated_plot = function setup_complicated_plot(graph_id, grid, series, options) {\n    function basic_flot_row(grid, input) {\n        return grid.add(function(row, x, n) {\n            for (var i = 0; i < n; i++)\n                row[x + i] = [i, input[x + i] || 0];\n        });\n    }\n\n    function stacked_flot_row(grid, input, last) {\n        return grid.add(function(row, x, n) {\n            var i, l, floor, val;\n            for (i = 0; i < n; i++) {\n                floor = 0;\n                if (last) {\n                    l = last[x + i];\n                    floor = l ? l[1] : 0;\n                }\n                val = (input[x + i] || 0);\n                row[x + i] = [i, val + floor, floor];\n            }\n        });\n    }\n\n    /* All the data row setup happens now */\n    var last = null;\n    series.forEach(function(ser, i) {\n        if (options.x_rh_stack_graphs)\n            ser.data = stacked_flot_row(grid, ser.row, last);\n        else\n            ser.data = basic_flot_row(grid, ser.row);\n        last = ser.data;\n    });\n    return setup_plot(graph_id, grid, series, options);\n};\n\nmodule.exports = plotter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/plot.js\n// module id = 10\n// module chunks = 0","/* Javascript plotting library for jQuery, version 0.8.3.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\n*/\n\n// first an inline dependency, jquery.colorhelpers.js, we inline it here\n// for convenience\n\n/* Plugin for jQuery for working with colors.\n *\n * Version 1.1.\n *\n * Inspiration from jQuery color animation plugin by John Resig.\n *\n * Released under the MIT license by Ole Laursen, October 2009.\n *\n * Examples:\n *\n *   $.color.parse(\"#fff\").scale('rgb', 0.25).add('a', -0.5).toString()\n *   var c = $.color.extract($(\"#mydiv\"), 'background-color');\n *   console.log(c.r, c.g, c.b, c.a);\n *   $.color.make(100, 50, 25, 0.4).toString() // returns \"rgba(100,50,25,0.4)\"\n *\n * Note that .scale() and .add() return the same modified object\n * instead of making a new one.\n *\n * V. 1.1: Fix error handling so e.g. parsing an empty string does\n * produce a color rather than just crashing.\n */\n(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return\"rgb(\"+[o.r,o.g,o.b].join(\",\")+\")\"}else{return\"rgba(\"+[o.r,o.g,o.b,o.a].join(\",\")+\")\"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=\"\"&&c!=\"transparent\")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),\"body\"));if(c==\"rgba(0, 0, 0, 0)\")c=\"transparent\";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name==\"transparent\")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);\n\n// the actual Flot code\n(function($) {\n\n\t// Cache the prototype hasOwnProperty for faster access\n\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    // A shim to provide 'detach' to jQuery versions prior to 1.4.  Using a DOM\n    // operation produces the same effect as detach, i.e. removing the element\n    // without touching its jQuery data.\n\n    // Do not merge this into Flot 0.9, since it requires jQuery 1.4.4+.\n\n    if (!$.fn.detach) {\n        $.fn.detach = function() {\n            return this.each(function() {\n                if (this.parentNode) {\n                    this.parentNode.removeChild( this );\n                }\n            });\n        };\n    }\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// The Canvas object is a wrapper around an HTML5 <canvas> tag.\n\t//\n\t// @constructor\n\t// @param {string} cls List of classes to apply to the canvas.\n\t// @param {element} container Element onto which to append the canvas.\n\t//\n\t// Requiring a container is a little iffy, but unfortunately canvas\n\t// operations don't work unless the canvas is attached to the DOM.\n\n\tfunction Canvas(cls, container) {\n\n\t\tvar element = container.children(\".\" + cls)[0];\n\n\t\tif (element == null) {\n\n\t\t\telement = document.createElement(\"canvas\");\n\t\t\telement.className = cls;\n\n\t\t\t$(element).css({ direction: \"ltr\", position: \"absolute\", left: 0, top: 0 })\n\t\t\t\t.appendTo(container);\n\n\t\t\t// If HTML5 Canvas isn't available, fall back to [Ex|Flash]canvas\n\n\t\t\tif (!element.getContext) {\n\t\t\t\tif (window.G_vmlCanvasManager) {\n\t\t\t\t\telement = window.G_vmlCanvasManager.initElement(element);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(\"Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.element = element;\n\n\t\tvar context = this.context = element.getContext(\"2d\");\n\n\t\t// Determine the screen's ratio of physical to device-independent\n\t\t// pixels.  This is the ratio between the canvas width that the browser\n\t\t// advertises and the number of pixels actually present in that space.\n\n\t\t// The iPhone 4, for example, has a device-independent width of 320px,\n\t\t// but its screen is actually 640px wide.  It therefore has a pixel\n\t\t// ratio of 2, while most normal devices have a ratio of 1.\n\n\t\tvar devicePixelRatio = window.devicePixelRatio || 1,\n\t\t\tbackingStoreRatio =\n\t\t\t\tcontext.webkitBackingStorePixelRatio ||\n\t\t\t\tcontext.mozBackingStorePixelRatio ||\n\t\t\t\tcontext.msBackingStorePixelRatio ||\n\t\t\t\tcontext.oBackingStorePixelRatio ||\n\t\t\t\tcontext.backingStorePixelRatio || 1;\n\n\t\tthis.pixelRatio = devicePixelRatio / backingStoreRatio;\n\n\t\t// Size the canvas to match the internal dimensions of its container\n\n\t\tthis.resize(container.width(), container.height());\n\n\t\t// Collection of HTML div layers for text overlaid onto the canvas\n\n\t\tthis.textContainer = null;\n\t\tthis.text = {};\n\n\t\t// Cache of text fragments and metrics, so we can avoid expensively\n\t\t// re-calculating them when the plot is re-rendered in a loop.\n\n\t\tthis._textCache = {};\n\t}\n\n\t// Resizes the canvas to the given dimensions.\n\t//\n\t// @param {number} width New width of the canvas, in pixels.\n\t// @param {number} width New height of the canvas, in pixels.\n\n\tCanvas.prototype.resize = function(width, height) {\n\n\t\tif (width <= 0 || height <= 0) {\n\t\t\tthrow new Error(\"Invalid dimensions for plot, width = \" + width + \", height = \" + height);\n\t\t}\n\n\t\tvar element = this.element,\n\t\t\tcontext = this.context,\n\t\t\tpixelRatio = this.pixelRatio;\n\n\t\t// Resize the canvas, increasing its density based on the display's\n\t\t// pixel ratio; basically giving it more pixels without increasing the\n\t\t// size of its element, to take advantage of the fact that retina\n\t\t// displays have that many more pixels in the same advertised space.\n\n\t\t// Resizing should reset the state (excanvas seems to be buggy though)\n\n\t\tif (this.width != width) {\n\t\t\telement.width = width * pixelRatio;\n\t\t\telement.style.width = width + \"px\";\n\t\t\tthis.width = width;\n\t\t}\n\n\t\tif (this.height != height) {\n\t\t\telement.height = height * pixelRatio;\n\t\t\telement.style.height = height + \"px\";\n\t\t\tthis.height = height;\n\t\t}\n\n\t\t// Save the context, so we can reset in case we get replotted.  The\n\t\t// restore ensure that we're really back at the initial state, and\n\t\t// should be safe even if we haven't saved the initial state yet.\n\n\t\tcontext.restore();\n\t\tcontext.save();\n\n\t\t// Scale the coordinate space to match the display density; so even though we\n\t\t// may have twice as many pixels, we still want lines and other drawing to\n\t\t// appear at the same size; the extra pixels will just make them crisper.\n\n\t\tcontext.scale(pixelRatio, pixelRatio);\n\t};\n\n\t// Clears the entire canvas area, not including any overlaid HTML text\n\n\tCanvas.prototype.clear = function() {\n\t\tthis.context.clearRect(0, 0, this.width, this.height);\n\t};\n\n\t// Finishes rendering the canvas, including managing the text overlay.\n\n\tCanvas.prototype.render = function() {\n\n\t\tvar cache = this._textCache;\n\n\t\t// For each text layer, add elements marked as active that haven't\n\t\t// already been rendered, and remove those that are no longer active.\n\n\t\tfor (var layerKey in cache) {\n\t\t\tif (hasOwnProperty.call(cache, layerKey)) {\n\n\t\t\t\tvar layer = this.getTextLayer(layerKey),\n\t\t\t\t\tlayerCache = cache[layerKey];\n\n\t\t\t\tlayer.hide();\n\n\t\t\t\tfor (var styleKey in layerCache) {\n\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\n\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\n\t\t\t\t\t\tfor (var key in styleCache) {\n\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\n\n\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\n\n\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\t\t\t\t\tif (position.active) {\n\t\t\t\t\t\t\t\t\t\tif (!position.rendered) {\n\t\t\t\t\t\t\t\t\t\t\tlayer.append(position.element);\n\t\t\t\t\t\t\t\t\t\t\tposition.rendered = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tpositions.splice(i--, 1);\n\t\t\t\t\t\t\t\t\t\tif (position.rendered) {\n\t\t\t\t\t\t\t\t\t\t\tposition.element.detach();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (positions.length == 0) {\n\t\t\t\t\t\t\t\t\tdelete styleCache[key];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlayer.show();\n\t\t\t}\n\t\t}\n\t};\n\n\t// Creates (if necessary) and returns the text overlay container.\n\t//\n\t// @param {string} classes String of space-separated CSS classes used to\n\t//     uniquely identify the text layer.\n\t// @return {object} The jQuery-wrapped text-layer div.\n\n\tCanvas.prototype.getTextLayer = function(classes) {\n\n\t\tvar layer = this.text[classes];\n\n\t\t// Create the text layer if it doesn't exist\n\n\t\tif (layer == null) {\n\n\t\t\t// Create the text layer container, if it doesn't exist\n\n\t\t\tif (this.textContainer == null) {\n\t\t\t\tthis.textContainer = $(\"<div class='flot-text'></div>\")\n\t\t\t\t\t.css({\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0,\n\t\t\t\t\t\tbottom: 0,\n\t\t\t\t\t\tright: 0,\n\t\t\t\t\t\t'font-size': \"smaller\",\n\t\t\t\t\t\tcolor: \"#545454\"\n\t\t\t\t\t})\n\t\t\t\t\t.insertAfter(this.element);\n\t\t\t}\n\n\t\t\tlayer = this.text[classes] = $(\"<div></div>\")\n\t\t\t\t.addClass(classes)\n\t\t\t\t.css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\ttop: 0,\n\t\t\t\t\tleft: 0,\n\t\t\t\t\tbottom: 0,\n\t\t\t\t\tright: 0\n\t\t\t\t})\n\t\t\t\t.appendTo(this.textContainer);\n\t\t}\n\n\t\treturn layer;\n\t};\n\n\t// Creates (if necessary) and returns a text info object.\n\t//\n\t// The object looks like this:\n\t//\n\t// {\n\t//     width: Width of the text's wrapper div.\n\t//     height: Height of the text's wrapper div.\n\t//     element: The jQuery-wrapped HTML div containing the text.\n\t//     positions: Array of positions at which this text is drawn.\n\t// }\n\t//\n\t// The positions array contains objects that look like this:\n\t//\n\t// {\n\t//     active: Flag indicating whether the text should be visible.\n\t//     rendered: Flag indicating whether the text is currently visible.\n\t//     element: The jQuery-wrapped HTML div containing the text.\n\t//     x: X coordinate at which to draw the text.\n\t//     y: Y coordinate at which to draw the text.\n\t// }\n\t//\n\t// Each position after the first receives a clone of the original element.\n\t//\n\t// The idea is that that the width, height, and general 'identity' of the\n\t// text is constant no matter where it is placed; the placements are a\n\t// secondary property.\n\t//\n\t// Canvas maintains a cache of recently-used text info objects; getTextInfo\n\t// either returns the cached element or creates a new entry.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {string} text Text string to retrieve info for.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which to rotate the text, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\t// @param {number=} width Maximum width of the text before it wraps.\n\t// @return {object} a text info object.\n\n\tCanvas.prototype.getTextInfo = function(layer, text, font, angle, width) {\n\n\t\tvar textStyle, layerCache, styleCache, info;\n\n\t\t// Cast the value to a string, in case we were given a number or such\n\n\t\ttext = \"\" + text;\n\n\t\t// If the font is a font-spec object, generate a CSS font definition\n\n\t\tif (typeof font === \"object\") {\n\t\t\ttextStyle = font.style + \" \" + font.variant + \" \" + font.weight + \" \" + font.size + \"px/\" + font.lineHeight + \"px \" + font.family;\n\t\t} else {\n\t\t\ttextStyle = font;\n\t\t}\n\n\t\t// Retrieve (or create) the cache for the text's layer and styles\n\n\t\tlayerCache = this._textCache[layer];\n\n\t\tif (layerCache == null) {\n\t\t\tlayerCache = this._textCache[layer] = {};\n\t\t}\n\n\t\tstyleCache = layerCache[textStyle];\n\n\t\tif (styleCache == null) {\n\t\t\tstyleCache = layerCache[textStyle] = {};\n\t\t}\n\n\t\tinfo = styleCache[text];\n\n\t\t// If we can't find a matching element in our cache, create a new one\n\n\t\tif (info == null) {\n\n\t\t\tvar element = $(\"<div></div>\").html(text)\n\t\t\t\t.css({\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t'max-width': width,\n\t\t\t\t\ttop: -9999\n\t\t\t\t})\n\t\t\t\t.appendTo(this.getTextLayer(layer));\n\n\t\t\tif (typeof font === \"object\") {\n\t\t\t\telement.css({\n\t\t\t\t\tfont: textStyle,\n\t\t\t\t\tcolor: font.color\n\t\t\t\t});\n\t\t\t} else if (typeof font === \"string\") {\n\t\t\t\telement.addClass(font);\n\t\t\t}\n\n\t\t\tinfo = styleCache[text] = {\n\t\t\t\twidth: element.outerWidth(true),\n\t\t\t\theight: element.outerHeight(true),\n\t\t\t\telement: element,\n\t\t\t\tpositions: []\n\t\t\t};\n\n\t\t\telement.detach();\n\t\t}\n\n\t\treturn info;\n\t};\n\n\t// Adds a text string to the canvas text overlay.\n\t//\n\t// The text isn't drawn immediately; it is marked as rendering, which will\n\t// result in its addition to the canvas on the next render pass.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {number} x X coordinate at which to draw the text.\n\t// @param {number} y Y coordinate at which to draw the text.\n\t// @param {string} text Text string to draw.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which to rotate the text, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\t// @param {number=} width Maximum width of the text before it wraps.\n\t// @param {string=} halign Horizontal alignment of the text; either \"left\",\n\t//     \"center\" or \"right\".\n\t// @param {string=} valign Vertical alignment of the text; either \"top\",\n\t//     \"middle\" or \"bottom\".\n\n\tCanvas.prototype.addText = function(layer, x, y, text, font, angle, width, halign, valign) {\n\n\t\tvar info = this.getTextInfo(layer, text, font, angle, width),\n\t\t\tpositions = info.positions;\n\n\t\t// Tweak the div's position to match the text's alignment\n\n\t\tif (halign == \"center\") {\n\t\t\tx -= info.width / 2;\n\t\t} else if (halign == \"right\") {\n\t\t\tx -= info.width;\n\t\t}\n\n\t\tif (valign == \"middle\") {\n\t\t\ty -= info.height / 2;\n\t\t} else if (valign == \"bottom\") {\n\t\t\ty -= info.height;\n\t\t}\n\n\t\t// Determine whether this text already exists at this position.\n\t\t// If so, mark it for inclusion in the next render pass.\n\n\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\tif (position.x == x && position.y == y) {\n\t\t\t\tposition.active = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// If the text doesn't exist at this position, create a new entry\n\n\t\t// For the very first position we'll re-use the original element,\n\t\t// while for subsequent ones we'll clone it.\n\n\t\tposition = {\n\t\t\tactive: true,\n\t\t\trendered: false,\n\t\t\telement: positions.length ? info.element.clone() : info.element,\n\t\t\tx: x,\n\t\t\ty: y\n\t\t};\n\n\t\tpositions.push(position);\n\n\t\t// Move the element to its final position within the container\n\n\t\tposition.element.css({\n\t\t\ttop: Math.round(y),\n\t\t\tleft: Math.round(x),\n\t\t\t'text-align': halign\t// In case the text wraps\n\t\t});\n\t};\n\n\t// Removes one or more text strings from the canvas text overlay.\n\t//\n\t// If no parameters are given, all text within the layer is removed.\n\t//\n\t// Note that the text is not immediately removed; it is simply marked as\n\t// inactive, which will result in its removal on the next render pass.\n\t// This avoids the performance penalty for 'clear and redraw' behavior,\n\t// where we potentially get rid of all text on a layer, but will likely\n\t// add back most or all of it later, as when redrawing axes, for example.\n\t//\n\t// @param {string} layer A string of space-separated CSS classes uniquely\n\t//     identifying the layer containing this text.\n\t// @param {number=} x X coordinate of the text.\n\t// @param {number=} y Y coordinate of the text.\n\t// @param {string=} text Text string to remove.\n\t// @param {(string|object)=} font Either a string of space-separated CSS\n\t//     classes or a font-spec object, defining the text's font and style.\n\t// @param {number=} angle Angle at which the text is rotated, in degrees.\n\t//     Angle is currently unused, it will be implemented in the future.\n\n\tCanvas.prototype.removeText = function(layer, x, y, text, font, angle) {\n\t\tif (text == null) {\n\t\t\tvar layerCache = this._textCache[layer];\n\t\t\tif (layerCache != null) {\n\t\t\t\tfor (var styleKey in layerCache) {\n\t\t\t\t\tif (hasOwnProperty.call(layerCache, styleKey)) {\n\t\t\t\t\t\tvar styleCache = layerCache[styleKey];\n\t\t\t\t\t\tfor (var key in styleCache) {\n\t\t\t\t\t\t\tif (hasOwnProperty.call(styleCache, key)) {\n\t\t\t\t\t\t\t\tvar positions = styleCache[key].positions;\n\t\t\t\t\t\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\t\t\t\t\t\tposition.active = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tvar positions = this.getTextInfo(layer, text, font, angle).positions;\n\t\t\tfor (var i = 0, position; position = positions[i]; i++) {\n\t\t\t\tif (position.x == x && position.y == y) {\n\t\t\t\t\tposition.active = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// The top-level container for the entire plot.\n\n    function Plot(placeholder, data_, options_, plugins) {\n        // data is on the form:\n        //   [ series1, series2 ... ]\n        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]\n        // or { data: [ [x1, y1], [x2, y2], ... ], label: \"some label\", ... }\n\n        var series = [],\n            options = {\n                // the color theme used for graphs\n                colors: [\"#edc240\", \"#afd8f8\", \"#cb4b4b\", \"#4da74d\", \"#9440ed\"],\n                legend: {\n                    show: true,\n                    noColumns: 1, // number of colums in legend table\n                    labelFormatter: null, // fn: string -> string\n                    labelBoxBorderColor: \"#ccc\", // border color for the little label boxes\n                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph\n                    position: \"ne\", // position of default legend container within plot\n                    margin: 5, // distance from grid edge to default legend container within plot\n                    backgroundColor: null, // null means auto-detect\n                    backgroundOpacity: 0.85, // set to 0 to avoid background\n                    sorted: null    // default to no legend sorting\n                },\n                xaxis: {\n                    show: null, // null = auto-detect, true = always, false = never\n                    position: \"bottom\", // or \"top\"\n                    mode: null, // null or \"time\"\n                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: \"italic\", weight: \"bold\", family: \"sans-serif\", variant: \"small-caps\" }\n                    color: null, // base color, labels, ticks\n                    tickColor: null, // possibly different color of ticks, e.g. \"rgba(0,0,0,0.15)\"\n                    transform: null, // null or f: number -> number to transform axis\n                    inverseTransform: null, // if transform is set, this should be the inverse function\n                    min: null, // min. value to show, null means set automatically\n                    max: null, // max. value to show, null means set automatically\n                    autoscaleMargin: null, // margin in % to add if auto-setting min/max\n                    ticks: null, // either [1, 3] or [[1, \"a\"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks\n                    tickFormatter: null, // fn: number -> string\n                    labelWidth: null, // size of tick labels in pixels\n                    labelHeight: null,\n                    reserveSpace: null, // whether to reserve space even if axis isn't shown\n                    tickLength: null, // size in pixels of ticks, or \"full\" for whole line\n                    alignTicksWithAxis: null, // axis number or null for no sync\n                    tickDecimals: null, // no. of decimals, null means auto\n                    tickSize: null, // number or [number, \"unit\"]\n                    minTickSize: null // number or [number, \"unit\"]\n                },\n                yaxis: {\n                    autoscaleMargin: 0.02,\n                    position: \"left\" // or \"right\"\n                },\n                xaxes: [],\n                yaxes: [],\n                series: {\n                    points: {\n                        show: false,\n                        radius: 3,\n                        lineWidth: 2, // in pixels\n                        fill: true,\n                        fillColor: \"#ffffff\",\n                        symbol: \"circle\" // or callback\n                    },\n                    lines: {\n                        // we don't put in show: false so we can see\n                        // whether lines were actively disabled\n                        lineWidth: 2, // in pixels\n                        fill: false,\n                        fillColor: null,\n                        steps: false\n                        // Omit 'zero', so we can later default its value to\n                        // match that of the 'fill' option.\n                    },\n                    bars: {\n                        show: false,\n                        lineWidth: 2, // in pixels\n                        barWidth: 1, // in units of the x axis\n                        fill: true,\n                        fillColor: null,\n                        align: \"left\", // \"left\", \"right\", or \"center\"\n                        horizontal: false,\n                        zero: true\n                    },\n                    shadowSize: 3,\n                    highlightColor: null\n                },\n                grid: {\n                    show: true,\n                    aboveData: false,\n                    color: \"#545454\", // primary color used for outline and labels\n                    backgroundColor: null, // null for transparent, else color\n                    borderColor: null, // set if different from the grid color\n                    tickColor: null, // color for the ticks, e.g. \"rgba(0,0,0,0.15)\"\n                    margin: 0, // distance from the canvas edge to the grid\n                    labelMargin: 5, // in pixels\n                    axisMargin: 8, // in pixels\n                    borderWidth: 2, // in pixels\n                    minBorderMargin: null, // in pixels, null means taken from points radius\n                    markings: null, // array of ranges or fn: axes -> array of ranges\n                    markingsColor: \"#f4f4f4\",\n                    markingsLineWidth: 2,\n                    // interactive stuff\n                    clickable: false,\n                    hoverable: false,\n                    autoHighlight: true, // highlight in case mouse is near\n                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item\n                },\n                interaction: {\n                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow\n                },\n                hooks: {}\n            },\n        surface = null,     // the canvas for the plot itself\n        overlay = null,     // canvas for interactive stuff on top of plot\n        eventHolder = null, // jQuery object that events should be bound to\n        ctx = null, octx = null,\n        xaxes = [], yaxes = [],\n        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},\n        plotWidth = 0, plotHeight = 0,\n        hooks = {\n            processOptions: [],\n            processRawData: [],\n            processDatapoints: [],\n            processOffset: [],\n            drawBackground: [],\n            drawSeries: [],\n            draw: [],\n            bindEvents: [],\n            drawOverlay: [],\n            shutdown: []\n        },\n        plot = this;\n\n        // public functions\n        plot.setData = setData;\n        plot.setupGrid = setupGrid;\n        plot.draw = draw;\n        plot.getPlaceholder = function() { return placeholder; };\n        plot.getCanvas = function() { return surface.element; };\n        plot.getPlotOffset = function() { return plotOffset; };\n        plot.width = function () { return plotWidth; };\n        plot.height = function () { return plotHeight; };\n        plot.offset = function () {\n            var o = eventHolder.offset();\n            o.left += plotOffset.left;\n            o.top += plotOffset.top;\n            return o;\n        };\n        plot.getData = function () { return series; };\n        plot.getAxes = function () {\n            var res = {}, i;\n            $.each(xaxes.concat(yaxes), function (_, axis) {\n                if (axis)\n                    res[axis.direction + (axis.n != 1 ? axis.n : \"\") + \"axis\"] = axis;\n            });\n            return res;\n        };\n        plot.getXAxes = function () { return xaxes; };\n        plot.getYAxes = function () { return yaxes; };\n        plot.c2p = canvasToAxisCoords;\n        plot.p2c = axisToCanvasCoords;\n        plot.getOptions = function () { return options; };\n        plot.highlight = highlight;\n        plot.unhighlight = unhighlight;\n        plot.triggerRedrawOverlay = triggerRedrawOverlay;\n        plot.pointOffset = function(point) {\n            return {\n                left: parseInt(xaxes[axisNumber(point, \"x\") - 1].p2c(+point.x) + plotOffset.left, 10),\n                top: parseInt(yaxes[axisNumber(point, \"y\") - 1].p2c(+point.y) + plotOffset.top, 10)\n            };\n        };\n        plot.shutdown = shutdown;\n        plot.destroy = function () {\n            shutdown();\n            placeholder.removeData(\"plot\").empty();\n\n            series = [];\n            options = null;\n            surface = null;\n            overlay = null;\n            eventHolder = null;\n            ctx = null;\n            octx = null;\n            xaxes = [];\n            yaxes = [];\n            hooks = null;\n            highlights = [];\n            plot = null;\n        };\n        plot.resize = function () {\n        \tvar width = placeholder.width(),\n        \t\theight = placeholder.height();\n            surface.resize(width, height);\n            overlay.resize(width, height);\n        };\n\n        // public attributes\n        plot.hooks = hooks;\n\n        // initialize\n        initPlugins(plot);\n        parseOptions(options_);\n        setupCanvases();\n        setData(data_);\n        setupGrid();\n        draw();\n        bindEvents();\n\n\n        function executeHooks(hook, args) {\n            args = [plot].concat(args);\n            for (var i = 0; i < hook.length; ++i)\n                hook[i].apply(this, args);\n        }\n\n        function initPlugins() {\n\n            // References to key classes, allowing plugins to modify them\n\n            var classes = {\n                Canvas: Canvas\n            };\n\n            for (var i = 0; i < plugins.length; ++i) {\n                var p = plugins[i];\n                p.init(plot, classes);\n                if (p.options)\n                    $.extend(true, options, p.options);\n            }\n        }\n\n        function parseOptions(opts) {\n\n            $.extend(true, options, opts);\n\n            // $.extend merges arrays, rather than replacing them.  When less\n            // colors are provided than the size of the default palette, we\n            // end up with those colors plus the remaining defaults, which is\n            // not expected behavior; avoid it by replacing them here.\n\n            if (opts && opts.colors) {\n            \toptions.colors = opts.colors;\n            }\n\n            if (options.xaxis.color == null)\n                options.xaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n            if (options.yaxis.color == null)\n                options.yaxis.color = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\n            if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility\n                options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;\n            if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility\n                options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;\n\n            if (options.grid.borderColor == null)\n                options.grid.borderColor = options.grid.color;\n            if (options.grid.tickColor == null)\n                options.grid.tickColor = $.color.parse(options.grid.color).scale('a', 0.22).toString();\n\n            // Fill in defaults for axis options, including any unspecified\n            // font-spec fields, if a font-spec was provided.\n\n            // If no x/y axis options were provided, create one of each anyway,\n            // since the rest of the code assumes that they exist.\n\n            var i, axisOptions, axisCount,\n                fontSize = placeholder.css(\"font-size\"),\n                fontSizeDefault = fontSize ? +fontSize.replace(\"px\", \"\") : 13,\n                fontDefaults = {\n                    style: placeholder.css(\"font-style\"),\n                    size: Math.round(0.8 * fontSizeDefault),\n                    variant: placeholder.css(\"font-variant\"),\n                    weight: placeholder.css(\"font-weight\"),\n                    family: placeholder.css(\"font-family\")\n                };\n\n            axisCount = options.xaxes.length || 1;\n            for (i = 0; i < axisCount; ++i) {\n\n                axisOptions = options.xaxes[i];\n                if (axisOptions && !axisOptions.tickColor) {\n                    axisOptions.tickColor = axisOptions.color;\n                }\n\n                axisOptions = $.extend(true, {}, options.xaxis, axisOptions);\n                options.xaxes[i] = axisOptions;\n\n                if (axisOptions.font) {\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n                    if (!axisOptions.font.color) {\n                        axisOptions.font.color = axisOptions.color;\n                    }\n                    if (!axisOptions.font.lineHeight) {\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n                    }\n                }\n            }\n\n            axisCount = options.yaxes.length || 1;\n            for (i = 0; i < axisCount; ++i) {\n\n                axisOptions = options.yaxes[i];\n                if (axisOptions && !axisOptions.tickColor) {\n                    axisOptions.tickColor = axisOptions.color;\n                }\n\n                axisOptions = $.extend(true, {}, options.yaxis, axisOptions);\n                options.yaxes[i] = axisOptions;\n\n                if (axisOptions.font) {\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\n                    if (!axisOptions.font.color) {\n                        axisOptions.font.color = axisOptions.color;\n                    }\n                    if (!axisOptions.font.lineHeight) {\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\n                    }\n                }\n            }\n\n            // backwards compatibility, to be removed in future\n            if (options.xaxis.noTicks && options.xaxis.ticks == null)\n                options.xaxis.ticks = options.xaxis.noTicks;\n            if (options.yaxis.noTicks && options.yaxis.ticks == null)\n                options.yaxis.ticks = options.yaxis.noTicks;\n            if (options.x2axis) {\n                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);\n                options.xaxes[1].position = \"top\";\n                // Override the inherit to allow the axis to auto-scale\n                if (options.x2axis.min == null) {\n                    options.xaxes[1].min = null;\n                }\n                if (options.x2axis.max == null) {\n                    options.xaxes[1].max = null;\n                }\n            }\n            if (options.y2axis) {\n                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);\n                options.yaxes[1].position = \"right\";\n                // Override the inherit to allow the axis to auto-scale\n                if (options.y2axis.min == null) {\n                    options.yaxes[1].min = null;\n                }\n                if (options.y2axis.max == null) {\n                    options.yaxes[1].max = null;\n                }\n            }\n            if (options.grid.coloredAreas)\n                options.grid.markings = options.grid.coloredAreas;\n            if (options.grid.coloredAreasColor)\n                options.grid.markingsColor = options.grid.coloredAreasColor;\n            if (options.lines)\n                $.extend(true, options.series.lines, options.lines);\n            if (options.points)\n                $.extend(true, options.series.points, options.points);\n            if (options.bars)\n                $.extend(true, options.series.bars, options.bars);\n            if (options.shadowSize != null)\n                options.series.shadowSize = options.shadowSize;\n            if (options.highlightColor != null)\n                options.series.highlightColor = options.highlightColor;\n\n            // save options on axes for future reference\n            for (i = 0; i < options.xaxes.length; ++i)\n                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];\n            for (i = 0; i < options.yaxes.length; ++i)\n                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];\n\n            // add hooks from options\n            for (var n in hooks)\n                if (options.hooks[n] && options.hooks[n].length)\n                    hooks[n] = hooks[n].concat(options.hooks[n]);\n\n            executeHooks(hooks.processOptions, [options]);\n        }\n\n        function setData(d) {\n            series = parseData(d);\n            fillInSeriesOptions();\n            processData();\n        }\n\n        function parseData(d) {\n            var res = [];\n            for (var i = 0; i < d.length; ++i) {\n                var s = $.extend(true, {}, options.series);\n\n                if (d[i].data != null) {\n                    s.data = d[i].data; // move the data instead of deep-copy\n                    delete d[i].data;\n\n                    $.extend(true, s, d[i]);\n\n                    d[i].data = s.data;\n                }\n                else\n                    s.data = d[i];\n                res.push(s);\n            }\n\n            return res;\n        }\n\n        function axisNumber(obj, coord) {\n            var a = obj[coord + \"axis\"];\n            if (typeof a == \"object\") // if we got a real axis, extract number\n                a = a.n;\n            if (typeof a != \"number\")\n                a = 1; // default to first axis\n            return a;\n        }\n\n        function allAxes() {\n            // return flat array without annoying null entries\n            return $.grep(xaxes.concat(yaxes), function (a) { return a; });\n        }\n\n        function canvasToAxisCoords(pos) {\n            // return an object with x/y corresponding to all used axes\n            var res = {}, i, axis;\n            for (i = 0; i < xaxes.length; ++i) {\n                axis = xaxes[i];\n                if (axis && axis.used)\n                    res[\"x\" + axis.n] = axis.c2p(pos.left);\n            }\n\n            for (i = 0; i < yaxes.length; ++i) {\n                axis = yaxes[i];\n                if (axis && axis.used)\n                    res[\"y\" + axis.n] = axis.c2p(pos.top);\n            }\n\n            if (res.x1 !== undefined)\n                res.x = res.x1;\n            if (res.y1 !== undefined)\n                res.y = res.y1;\n\n            return res;\n        }\n\n        function axisToCanvasCoords(pos) {\n            // get canvas coords from the first pair of x/y found in pos\n            var res = {}, i, axis, key;\n\n            for (i = 0; i < xaxes.length; ++i) {\n                axis = xaxes[i];\n                if (axis && axis.used) {\n                    key = \"x\" + axis.n;\n                    if (pos[key] == null && axis.n == 1)\n                        key = \"x\";\n\n                    if (pos[key] != null) {\n                        res.left = axis.p2c(pos[key]);\n                        break;\n                    }\n                }\n            }\n\n            for (i = 0; i < yaxes.length; ++i) {\n                axis = yaxes[i];\n                if (axis && axis.used) {\n                    key = \"y\" + axis.n;\n                    if (pos[key] == null && axis.n == 1)\n                        key = \"y\";\n\n                    if (pos[key] != null) {\n                        res.top = axis.p2c(pos[key]);\n                        break;\n                    }\n                }\n            }\n\n            return res;\n        }\n\n        function getOrCreateAxis(axes, number) {\n            if (!axes[number - 1])\n                axes[number - 1] = {\n                    n: number, // save the number for future reference\n                    direction: axes == xaxes ? \"x\" : \"y\",\n                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)\n                };\n\n            return axes[number - 1];\n        }\n\n        function fillInSeriesOptions() {\n\n            var neededColors = series.length, maxIndex = -1, i;\n\n            // Subtract the number of series that already have fixed colors or\n            // color indexes from the number that we still need to generate.\n\n            for (i = 0; i < series.length; ++i) {\n                var sc = series[i].color;\n                if (sc != null) {\n                    neededColors--;\n                    if (typeof sc == \"number\" && sc > maxIndex) {\n                        maxIndex = sc;\n                    }\n                }\n            }\n\n            // If any of the series have fixed color indexes, then we need to\n            // generate at least as many colors as the highest index.\n\n            if (neededColors <= maxIndex) {\n                neededColors = maxIndex + 1;\n            }\n\n            // Generate all the colors, using first the option colors and then\n            // variations on those colors once they're exhausted.\n\n            var c, colors = [], colorPool = options.colors,\n                colorPoolSize = colorPool.length, variation = 0;\n\n            for (i = 0; i < neededColors; i++) {\n\n                c = $.color.parse(colorPool[i % colorPoolSize] || \"#666\");\n\n                // Each time we exhaust the colors in the pool we adjust\n                // a scaling factor used to produce more variations on\n                // those colors. The factor alternates negative/positive\n                // to produce lighter/darker colors.\n\n                // Reset the variation after every few cycles, or else\n                // it will end up producing only white or black colors.\n\n                if (i % colorPoolSize == 0 && i) {\n                    if (variation >= 0) {\n                        if (variation < 0.5) {\n                            variation = -variation - 0.2;\n                        } else variation = 0;\n                    } else variation = -variation;\n                }\n\n                colors[i] = c.scale('rgb', 1 + variation);\n            }\n\n            // Finalize the series options, filling in their colors\n\n            var colori = 0, s;\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n\n                // assign colors\n                if (s.color == null) {\n                    s.color = colors[colori].toString();\n                    ++colori;\n                }\n                else if (typeof s.color == \"number\")\n                    s.color = colors[s.color].toString();\n\n                // turn on lines automatically in case nothing is set\n                if (s.lines.show == null) {\n                    var v, show = true;\n                    for (v in s)\n                        if (s[v] && s[v].show) {\n                            show = false;\n                            break;\n                        }\n                    if (show)\n                        s.lines.show = true;\n                }\n\n                // If nothing was provided for lines.zero, default it to match\n                // lines.fill, since areas by default should extend to zero.\n\n                if (s.lines.zero == null) {\n                    s.lines.zero = !!s.lines.fill;\n                }\n\n                // setup axes\n                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, \"x\"));\n                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, \"y\"));\n            }\n        }\n\n        function processData() {\n            var topSentry = Number.POSITIVE_INFINITY,\n                bottomSentry = Number.NEGATIVE_INFINITY,\n                fakeInfinity = Number.MAX_VALUE,\n                i, j, k, m, length,\n                s, points, ps, x, y, axis, val, f, p,\n                data, format;\n\n            function updateAxis(axis, min, max) {\n                if (min < axis.datamin && min != -fakeInfinity)\n                    axis.datamin = min;\n                if (max > axis.datamax && max != fakeInfinity)\n                    axis.datamax = max;\n            }\n\n            $.each(allAxes(), function (_, axis) {\n                // init axis\n                axis.datamin = topSentry;\n                axis.datamax = bottomSentry;\n                axis.used = false;\n            });\n\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n                s.datapoints = { points: [] };\n\n                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);\n            }\n\n            // first pass: clean and copy data\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n\n                data = s.data;\n                format = s.datapoints.format;\n\n                if (!format) {\n                    format = [];\n                    // find out how to copy\n                    format.push({ x: true, number: true, required: true });\n                    format.push({ y: true, number: true, required: true });\n\n                    if (s.bars.show || (s.lines.show && s.lines.fill)) {\n                        var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));\n                        format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });\n                        if (s.bars.horizontal) {\n                            delete format[format.length - 1].y;\n                            format[format.length - 1].x = true;\n                        }\n                    }\n\n                    s.datapoints.format = format;\n                }\n\n                if (s.datapoints.pointsize != null)\n                    continue; // already filled in\n\n                s.datapoints.pointsize = format.length;\n\n                ps = s.datapoints.pointsize;\n                points = s.datapoints.points;\n\n                var insertSteps = s.lines.show && s.lines.steps;\n                s.xaxis.used = s.yaxis.used = true;\n\n                for (j = k = 0; j < data.length; ++j, k += ps) {\n                    p = data[j];\n\n                    var nullify = p == null;\n                    if (!nullify) {\n                        for (m = 0; m < ps; ++m) {\n                            val = p[m];\n                            f = format[m];\n\n                            if (f) {\n                                if (f.number && val != null) {\n                                    val = +val; // convert to number\n                                    if (isNaN(val))\n                                        val = null;\n                                    else if (val == Infinity)\n                                        val = fakeInfinity;\n                                    else if (val == -Infinity)\n                                        val = -fakeInfinity;\n                                }\n\n                                if (val == null) {\n                                    if (f.required)\n                                        nullify = true;\n\n                                    if (f.defaultValue != null)\n                                        val = f.defaultValue;\n                                }\n                            }\n\n                            points[k + m] = val;\n                        }\n                    }\n\n                    if (nullify) {\n                        for (m = 0; m < ps; ++m) {\n                            val = points[k + m];\n                            if (val != null) {\n                                f = format[m];\n                                // extract min/max info\n                                if (f.autoscale !== false) {\n                                    if (f.x) {\n                                        updateAxis(s.xaxis, val, val);\n                                    }\n                                    if (f.y) {\n                                        updateAxis(s.yaxis, val, val);\n                                    }\n                                }\n                            }\n                            points[k + m] = null;\n                        }\n                    }\n                    else {\n                        // a little bit of line specific stuff that\n                        // perhaps shouldn't be here, but lacking\n                        // better means...\n                        if (insertSteps && k > 0\n                            && points[k - ps] != null\n                            && points[k - ps] != points[k]\n                            && points[k - ps + 1] != points[k + 1]) {\n                            // copy the point to make room for a middle point\n                            for (m = 0; m < ps; ++m)\n                                points[k + ps + m] = points[k + m];\n\n                            // middle point has same y\n                            points[k + 1] = points[k - ps + 1];\n\n                            // we've added a point, better reflect that\n                            k += ps;\n                        }\n                    }\n                }\n            }\n\n            // give the hooks a chance to run\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n\n                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);\n            }\n\n            // second pass: find datamax/datamin for auto-scaling\n            for (i = 0; i < series.length; ++i) {\n                s = series[i];\n                points = s.datapoints.points;\n                ps = s.datapoints.pointsize;\n                format = s.datapoints.format;\n\n                var xmin = topSentry, ymin = topSentry,\n                    xmax = bottomSentry, ymax = bottomSentry;\n\n                for (j = 0; j < points.length; j += ps) {\n                    if (points[j] == null)\n                        continue;\n\n                    for (m = 0; m < ps; ++m) {\n                        val = points[j + m];\n                        f = format[m];\n                        if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity)\n                            continue;\n\n                        if (f.x) {\n                            if (val < xmin)\n                                xmin = val;\n                            if (val > xmax)\n                                xmax = val;\n                        }\n                        if (f.y) {\n                            if (val < ymin)\n                                ymin = val;\n                            if (val > ymax)\n                                ymax = val;\n                        }\n                    }\n                }\n\n                if (s.bars.show) {\n                    // make sure we got room for the bar on the dancing floor\n                    var delta;\n\n                    switch (s.bars.align) {\n                        case \"left\":\n                            delta = 0;\n                            break;\n                        case \"right\":\n                            delta = -s.bars.barWidth;\n                            break;\n                        default:\n                            delta = -s.bars.barWidth / 2;\n                    }\n\n                    if (s.bars.horizontal) {\n                        ymin += delta;\n                        ymax += delta + s.bars.barWidth;\n                    }\n                    else {\n                        xmin += delta;\n                        xmax += delta + s.bars.barWidth;\n                    }\n                }\n\n                updateAxis(s.xaxis, xmin, xmax);\n                updateAxis(s.yaxis, ymin, ymax);\n            }\n\n            $.each(allAxes(), function (_, axis) {\n                if (axis.datamin == topSentry)\n                    axis.datamin = null;\n                if (axis.datamax == bottomSentry)\n                    axis.datamax = null;\n            });\n        }\n\n        function setupCanvases() {\n\n            // Make sure the placeholder is clear of everything except canvases\n            // from a previous plot in this container that we'll try to re-use.\n\n            placeholder.css(\"padding\", 0) // padding messes up the positioning\n                .children().filter(function(){\n                    return !$(this).hasClass(\"flot-overlay\") && !$(this).hasClass('flot-base');\n                }).remove();\n\n            if (placeholder.css(\"position\") == 'static')\n                placeholder.css(\"position\", \"relative\"); // for positioning labels and overlay\n\n            surface = new Canvas(\"flot-base\", placeholder);\n            overlay = new Canvas(\"flot-overlay\", placeholder); // overlay canvas for interactive features\n\n            ctx = surface.context;\n            octx = overlay.context;\n\n            // define which element we're listening for events on\n            eventHolder = $(overlay.element).unbind();\n\n            // If we're re-using a plot object, shut down the old one\n\n            var existing = placeholder.data(\"plot\");\n\n            if (existing) {\n                existing.shutdown();\n                overlay.clear();\n            }\n\n            // save in case we get replotted\n            placeholder.data(\"plot\", plot);\n        }\n\n        function bindEvents() {\n            // bind events\n            if (options.grid.hoverable) {\n                eventHolder.mousemove(onMouseMove);\n\n                // Use bind, rather than .mouseleave, because we officially\n                // still support jQuery 1.2.6, which doesn't define a shortcut\n                // for mouseenter or mouseleave.  This was a bug/oversight that\n                // was fixed somewhere around 1.3.x.  We can return to using\n                // .mouseleave when we drop support for 1.2.6.\n\n                eventHolder.bind(\"mouseleave\", onMouseLeave);\n            }\n\n            if (options.grid.clickable)\n                eventHolder.click(onClick);\n\n            executeHooks(hooks.bindEvents, [eventHolder]);\n        }\n\n        function shutdown() {\n            if (redrawTimeout)\n                clearTimeout(redrawTimeout);\n\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n            eventHolder.unbind(\"mouseleave\", onMouseLeave);\n            eventHolder.unbind(\"click\", onClick);\n\n            executeHooks(hooks.shutdown, [eventHolder]);\n        }\n\n        function setTransformationHelpers(axis) {\n            // set helper functions on the axis, assumes plot area\n            // has been computed already\n\n            function identity(x) { return x; }\n\n            var s, m, t = axis.options.transform || identity,\n                it = axis.options.inverseTransform;\n\n            // precompute how much the axis is scaling a point\n            // in canvas space\n            if (axis.direction == \"x\") {\n                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));\n                m = Math.min(t(axis.max), t(axis.min));\n            }\n            else {\n                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));\n                s = -s;\n                m = Math.max(t(axis.max), t(axis.min));\n            }\n\n            // data point to canvas coordinate\n            if (t == identity) // slight optimization\n                axis.p2c = function (p) { return (p - m) * s; };\n            else\n                axis.p2c = function (p) { return (t(p) - m) * s; };\n            // canvas coordinate to data point\n            if (!it)\n                axis.c2p = function (c) { return m + c / s; };\n            else\n                axis.c2p = function (c) { return it(m + c / s); };\n        }\n\n        function measureTickLabels(axis) {\n\n            var opts = axis.options,\n                ticks = axis.ticks || [],\n                labelWidth = opts.labelWidth || 0,\n                labelHeight = opts.labelHeight || 0,\n                maxWidth = labelWidth || (axis.direction == \"x\" ? Math.floor(surface.width / (ticks.length || 1)) : null),\n                legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n                layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n                font = opts.font || \"flot-tick-label tickLabel\";\n\n            for (var i = 0; i < ticks.length; ++i) {\n\n                var t = ticks[i];\n\n                if (!t.label)\n                    continue;\n\n                var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);\n\n                labelWidth = Math.max(labelWidth, info.width);\n                labelHeight = Math.max(labelHeight, info.height);\n            }\n\n            axis.labelWidth = opts.labelWidth || labelWidth;\n            axis.labelHeight = opts.labelHeight || labelHeight;\n        }\n\n        function allocateAxisBoxFirstPhase(axis) {\n            // find the bounding box of the axis by looking at label\n            // widths/heights and ticks, make room by diminishing the\n            // plotOffset; this first phase only looks at one\n            // dimension per axis, the other dimension depends on the\n            // other axes so will have to wait\n\n            var lw = axis.labelWidth,\n                lh = axis.labelHeight,\n                pos = axis.options.position,\n                isXAxis = axis.direction === \"x\",\n                tickLength = axis.options.tickLength,\n                axisMargin = options.grid.axisMargin,\n                padding = options.grid.labelMargin,\n                innermost = true,\n                outermost = true,\n                first = true,\n                found = false;\n\n            // Determine the axis's position in its direction and on its side\n\n            $.each(isXAxis ? xaxes : yaxes, function(i, a) {\n                if (a && (a.show || a.reserveSpace)) {\n                    if (a === axis) {\n                        found = true;\n                    } else if (a.options.position === pos) {\n                        if (found) {\n                            outermost = false;\n                        } else {\n                            innermost = false;\n                        }\n                    }\n                    if (!found) {\n                        first = false;\n                    }\n                }\n            });\n\n            // The outermost axis on each side has no margin\n\n            if (outermost) {\n                axisMargin = 0;\n            }\n\n            // The ticks for the first axis in each direction stretch across\n\n            if (tickLength == null) {\n                tickLength = first ? \"full\" : 5;\n            }\n\n            if (!isNaN(+tickLength))\n                padding += +tickLength;\n\n            if (isXAxis) {\n                lh += padding;\n\n                if (pos == \"bottom\") {\n                    plotOffset.bottom += lh + axisMargin;\n                    axis.box = { top: surface.height - plotOffset.bottom, height: lh };\n                }\n                else {\n                    axis.box = { top: plotOffset.top + axisMargin, height: lh };\n                    plotOffset.top += lh + axisMargin;\n                }\n            }\n            else {\n                lw += padding;\n\n                if (pos == \"left\") {\n                    axis.box = { left: plotOffset.left + axisMargin, width: lw };\n                    plotOffset.left += lw + axisMargin;\n                }\n                else {\n                    plotOffset.right += lw + axisMargin;\n                    axis.box = { left: surface.width - plotOffset.right, width: lw };\n                }\n            }\n\n             // save for future reference\n            axis.position = pos;\n            axis.tickLength = tickLength;\n            axis.box.padding = padding;\n            axis.innermost = innermost;\n        }\n\n        function allocateAxisBoxSecondPhase(axis) {\n            // now that all axis boxes have been placed in one\n            // dimension, we can set the remaining dimension coordinates\n            if (axis.direction == \"x\") {\n                axis.box.left = plotOffset.left - axis.labelWidth / 2;\n                axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;\n            }\n            else {\n                axis.box.top = plotOffset.top - axis.labelHeight / 2;\n                axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;\n            }\n        }\n\n        function adjustLayoutForThingsStickingOut() {\n            // possibly adjust plot offset to ensure everything stays\n            // inside the canvas and isn't clipped off\n\n            var minMargin = options.grid.minBorderMargin,\n                axis, i;\n\n            // check stuff from the plot (FIXME: this should just read\n            // a value from the series, otherwise it's impossible to\n            // customize)\n            if (minMargin == null) {\n                minMargin = 0;\n                for (i = 0; i < series.length; ++i)\n                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));\n            }\n\n            var margins = {\n                left: minMargin,\n                right: minMargin,\n                top: minMargin,\n                bottom: minMargin\n            };\n\n            // check axis labels, note we don't check the actual\n            // labels but instead use the overall width/height to not\n            // jump as much around with replots\n            $.each(allAxes(), function (_, axis) {\n                if (axis.reserveSpace && axis.ticks && axis.ticks.length) {\n                    if (axis.direction === \"x\") {\n                        margins.left = Math.max(margins.left, axis.labelWidth / 2);\n                        margins.right = Math.max(margins.right, axis.labelWidth / 2);\n                    } else {\n                        margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);\n                        margins.top = Math.max(margins.top, axis.labelHeight / 2);\n                    }\n                }\n            });\n\n            plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));\n            plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));\n            plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));\n            plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));\n        }\n\n        function setupGrid() {\n            var i, axes = allAxes(), showGrid = options.grid.show;\n\n            // Initialize the plot's offset from the edge of the canvas\n\n            for (var a in plotOffset) {\n                var margin = options.grid.margin || 0;\n                plotOffset[a] = typeof margin == \"number\" ? margin : margin[a] || 0;\n            }\n\n            executeHooks(hooks.processOffset, [plotOffset]);\n\n            // If the grid is visible, add its border width to the offset\n\n            for (var a in plotOffset) {\n                if(typeof(options.grid.borderWidth) == \"object\") {\n                    plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;\n                }\n                else {\n                    plotOffset[a] += showGrid ? options.grid.borderWidth : 0;\n                }\n            }\n\n            $.each(axes, function (_, axis) {\n                var axisOpts = axis.options;\n                axis.show = axisOpts.show == null ? axis.used : axisOpts.show;\n                axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace;\n                setRange(axis);\n            });\n\n            if (showGrid) {\n\n                var allocatedAxes = $.grep(axes, function (axis) {\n                    return axis.show || axis.reserveSpace;\n                });\n\n                $.each(allocatedAxes, function (_, axis) {\n                    // make the ticks\n                    setupTickGeneration(axis);\n                    setTicks(axis);\n                    snapRangeToTicks(axis, axis.ticks);\n                    // find labelWidth/Height for axis\n                    measureTickLabels(axis);\n                });\n\n                // with all dimensions calculated, we can compute the\n                // axis bounding boxes, start from the outside\n                // (reverse order)\n                for (i = allocatedAxes.length - 1; i >= 0; --i)\n                    allocateAxisBoxFirstPhase(allocatedAxes[i]);\n\n                // make sure we've got enough space for things that\n                // might stick out\n                adjustLayoutForThingsStickingOut();\n\n                $.each(allocatedAxes, function (_, axis) {\n                    allocateAxisBoxSecondPhase(axis);\n                });\n            }\n\n            plotWidth = surface.width - plotOffset.left - plotOffset.right;\n            plotHeight = surface.height - plotOffset.bottom - plotOffset.top;\n\n            // now we got the proper plot dimensions, we can compute the scaling\n            $.each(axes, function (_, axis) {\n                setTransformationHelpers(axis);\n            });\n\n            if (showGrid) {\n                drawAxisLabels();\n            }\n\n            insertLegend();\n        }\n\n        function setRange(axis) {\n            var opts = axis.options,\n                min = +(opts.min != null ? opts.min : axis.datamin),\n                max = +(opts.max != null ? opts.max : axis.datamax),\n                delta = max - min;\n\n            if (delta == 0.0) {\n                // degenerate case\n                var widen = max == 0 ? 1 : 0.01;\n\n                if (opts.min == null)\n                    min -= widen;\n                // always widen max if we couldn't widen min to ensure we\n                // don't fall into min == max which doesn't work\n                if (opts.max == null || opts.min != null)\n                    max += widen;\n            }\n            else {\n                // consider autoscaling\n                var margin = opts.autoscaleMargin;\n                if (margin != null) {\n                    if (opts.min == null) {\n                        min -= delta * margin;\n                        // make sure we don't go below zero if all values\n                        // are positive\n                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)\n                            min = 0;\n                    }\n                    if (opts.max == null) {\n                        max += delta * margin;\n                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)\n                            max = 0;\n                    }\n                }\n            }\n            axis.min = min;\n            axis.max = max;\n        }\n\n        function setupTickGeneration(axis) {\n            var opts = axis.options;\n\n            // estimate number of ticks\n            var noTicks;\n            if (typeof opts.ticks == \"number\" && opts.ticks > 0)\n                noTicks = opts.ticks;\n            else\n                // heuristic based on the model a*sqrt(x) fitted to\n                // some data points that seemed reasonable\n                noTicks = 0.3 * Math.sqrt(axis.direction == \"x\" ? surface.width : surface.height);\n\n            var delta = (axis.max - axis.min) / noTicks,\n                dec = -Math.floor(Math.log(delta) / Math.LN10),\n                maxDec = opts.tickDecimals;\n\n            if (maxDec != null && dec > maxDec) {\n                dec = maxDec;\n            }\n\n            var magn = Math.pow(10, -dec),\n                norm = delta / magn, // norm is between 1.0 and 10.0\n                size;\n\n            if (norm < 1.5) {\n                size = 1;\n            } else if (norm < 3) {\n                size = 2;\n                // special case for 2.5, requires an extra decimal\n                if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\n                    size = 2.5;\n                    ++dec;\n                }\n            } else if (norm < 7.5) {\n                size = 5;\n            } else {\n                size = 10;\n            }\n\n            size *= magn;\n\n            if (opts.minTickSize != null && size < opts.minTickSize) {\n                size = opts.minTickSize;\n            }\n\n            axis.delta = delta;\n            axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);\n            axis.tickSize = opts.tickSize || size;\n\n            // Time mode was moved to a plug-in in 0.8, and since so many people use it\n            // we'll add an especially friendly reminder to make sure they included it.\n\n            if (opts.mode == \"time\" && !axis.tickGenerator) {\n                throw new Error(\"Time mode requires the flot.time plugin.\");\n            }\n\n            // Flot supports base-10 axes; any other mode else is handled by a plug-in,\n            // like flot.time.js.\n\n            if (!axis.tickGenerator) {\n\n                axis.tickGenerator = function (axis) {\n\n                    var ticks = [],\n                        start = floorInBase(axis.min, axis.tickSize),\n                        i = 0,\n                        v = Number.NaN,\n                        prev;\n\n                    do {\n                        prev = v;\n                        v = start + i * axis.tickSize;\n                        ticks.push(v);\n                        ++i;\n                    } while (v < axis.max && v != prev);\n                    return ticks;\n                };\n\n\t\t\t\taxis.tickFormatter = function (value, axis) {\n\n\t\t\t\t\tvar factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;\n\t\t\t\t\tvar formatted = \"\" + Math.round(value * factor) / factor;\n\n\t\t\t\t\t// If tickDecimals was specified, ensure that we have exactly that\n\t\t\t\t\t// much precision; otherwise default to the value's own precision.\n\n\t\t\t\t\tif (axis.tickDecimals != null) {\n\t\t\t\t\t\tvar decimal = formatted.indexOf(\".\");\n\t\t\t\t\t\tvar precision = decimal == -1 ? 0 : formatted.length - decimal - 1;\n\t\t\t\t\t\tif (precision < axis.tickDecimals) {\n\t\t\t\t\t\t\treturn (precision ? formatted : formatted + \".\") + (\"\" + factor).substr(1, axis.tickDecimals - precision);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n                    return formatted;\n                };\n            }\n\n            if ($.isFunction(opts.tickFormatter))\n                axis.tickFormatter = function (v, axis) { return \"\" + opts.tickFormatter(v, axis); };\n\n            if (opts.alignTicksWithAxis != null) {\n                var otherAxis = (axis.direction == \"x\" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];\n                if (otherAxis && otherAxis.used && otherAxis != axis) {\n                    // consider snapping min/max to outermost nice ticks\n                    var niceTicks = axis.tickGenerator(axis);\n                    if (niceTicks.length > 0) {\n                        if (opts.min == null)\n                            axis.min = Math.min(axis.min, niceTicks[0]);\n                        if (opts.max == null && niceTicks.length > 1)\n                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);\n                    }\n\n                    axis.tickGenerator = function (axis) {\n                        // copy ticks, scaled to this axis\n                        var ticks = [], v, i;\n                        for (i = 0; i < otherAxis.ticks.length; ++i) {\n                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);\n                            v = axis.min + v * (axis.max - axis.min);\n                            ticks.push(v);\n                        }\n                        return ticks;\n                    };\n\n                    // we might need an extra decimal since forced\n                    // ticks don't necessarily fit naturally\n                    if (!axis.mode && opts.tickDecimals == null) {\n                        var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),\n                            ts = axis.tickGenerator(axis);\n\n                        // only proceed if the tick interval rounded\n                        // with an extra decimal doesn't give us a\n                        // zero at end\n                        if (!(ts.length > 1 && /\\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))\n                            axis.tickDecimals = extraDec;\n                    }\n                }\n            }\n        }\n\n        function setTicks(axis) {\n            var oticks = axis.options.ticks, ticks = [];\n            if (oticks == null || (typeof oticks == \"number\" && oticks > 0))\n                ticks = axis.tickGenerator(axis);\n            else if (oticks) {\n                if ($.isFunction(oticks))\n                    // generate the ticks\n                    ticks = oticks(axis);\n                else\n                    ticks = oticks;\n            }\n\n            // clean up/labelify the supplied ticks, copy them over\n            var i, v;\n            axis.ticks = [];\n            for (i = 0; i < ticks.length; ++i) {\n                var label = null;\n                var t = ticks[i];\n                if (typeof t == \"object\") {\n                    v = +t[0];\n                    if (t.length > 1)\n                        label = t[1];\n                }\n                else\n                    v = +t;\n                if (label == null)\n                    label = axis.tickFormatter(v, axis);\n                if (!isNaN(v))\n                    axis.ticks.push({ v: v, label: label });\n            }\n        }\n\n        function snapRangeToTicks(axis, ticks) {\n            if (axis.options.autoscaleMargin && ticks.length > 0) {\n                // snap to ticks\n                if (axis.options.min == null)\n                    axis.min = Math.min(axis.min, ticks[0].v);\n                if (axis.options.max == null && ticks.length > 1)\n                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);\n            }\n        }\n\n        function draw() {\n\n            surface.clear();\n\n            executeHooks(hooks.drawBackground, [ctx]);\n\n            var grid = options.grid;\n\n            // draw background, if any\n            if (grid.show && grid.backgroundColor)\n                drawBackground();\n\n            if (grid.show && !grid.aboveData) {\n                drawGrid();\n            }\n\n            for (var i = 0; i < series.length; ++i) {\n                executeHooks(hooks.drawSeries, [ctx, series[i]]);\n                drawSeries(series[i]);\n            }\n\n            executeHooks(hooks.draw, [ctx]);\n\n            if (grid.show && grid.aboveData) {\n                drawGrid();\n            }\n\n            surface.render();\n\n            // A draw implies that either the axes or data have changed, so we\n            // should probably update the overlay highlights as well.\n\n            triggerRedrawOverlay();\n        }\n\n        function extractRange(ranges, coord) {\n            var axis, from, to, key, axes = allAxes();\n\n            for (var i = 0; i < axes.length; ++i) {\n                axis = axes[i];\n                if (axis.direction == coord) {\n                    key = coord + axis.n + \"axis\";\n                    if (!ranges[key] && axis.n == 1)\n                        key = coord + \"axis\"; // support x1axis as xaxis\n                    if (ranges[key]) {\n                        from = ranges[key].from;\n                        to = ranges[key].to;\n                        break;\n                    }\n                }\n            }\n\n            // backwards-compat stuff - to be removed in future\n            if (!ranges[key]) {\n                axis = coord == \"x\" ? xaxes[0] : yaxes[0];\n                from = ranges[coord + \"1\"];\n                to = ranges[coord + \"2\"];\n            }\n\n            // auto-reverse as an added bonus\n            if (from != null && to != null && from > to) {\n                var tmp = from;\n                from = to;\n                to = tmp;\n            }\n\n            return { from: from, to: to, axis: axis };\n        }\n\n        function drawBackground() {\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, \"rgba(255, 255, 255, 0)\");\n            ctx.fillRect(0, 0, plotWidth, plotHeight);\n            ctx.restore();\n        }\n\n        function drawGrid() {\n            var i, axes, bw, bc;\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            // draw markings\n            var markings = options.grid.markings;\n            if (markings) {\n                if ($.isFunction(markings)) {\n                    axes = plot.getAxes();\n                    // xmin etc. is backwards compatibility, to be\n                    // removed in the future\n                    axes.xmin = axes.xaxis.min;\n                    axes.xmax = axes.xaxis.max;\n                    axes.ymin = axes.yaxis.min;\n                    axes.ymax = axes.yaxis.max;\n\n                    markings = markings(axes);\n                }\n\n                for (i = 0; i < markings.length; ++i) {\n                    var m = markings[i],\n                        xrange = extractRange(m, \"x\"),\n                        yrange = extractRange(m, \"y\");\n\n                    // fill in missing\n                    if (xrange.from == null)\n                        xrange.from = xrange.axis.min;\n                    if (xrange.to == null)\n                        xrange.to = xrange.axis.max;\n                    if (yrange.from == null)\n                        yrange.from = yrange.axis.min;\n                    if (yrange.to == null)\n                        yrange.to = yrange.axis.max;\n\n                    // clip\n                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||\n                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)\n                        continue;\n\n                    xrange.from = Math.max(xrange.from, xrange.axis.min);\n                    xrange.to = Math.min(xrange.to, xrange.axis.max);\n                    yrange.from = Math.max(yrange.from, yrange.axis.min);\n                    yrange.to = Math.min(yrange.to, yrange.axis.max);\n\n                    var xequal = xrange.from === xrange.to,\n                        yequal = yrange.from === yrange.to;\n\n                    if (xequal && yequal) {\n                        continue;\n                    }\n\n                    // then draw\n                    xrange.from = Math.floor(xrange.axis.p2c(xrange.from));\n                    xrange.to = Math.floor(xrange.axis.p2c(xrange.to));\n                    yrange.from = Math.floor(yrange.axis.p2c(yrange.from));\n                    yrange.to = Math.floor(yrange.axis.p2c(yrange.to));\n\n                    if (xequal || yequal) {\n                        var lineWidth = m.lineWidth || options.grid.markingsLineWidth,\n                            subPixel = lineWidth % 2 ? 0.5 : 0;\n                        ctx.beginPath();\n                        ctx.strokeStyle = m.color || options.grid.markingsColor;\n                        ctx.lineWidth = lineWidth;\n                        if (xequal) {\n                            ctx.moveTo(xrange.to + subPixel, yrange.from);\n                            ctx.lineTo(xrange.to + subPixel, yrange.to);\n                        } else {\n                            ctx.moveTo(xrange.from, yrange.to + subPixel);\n                            ctx.lineTo(xrange.to, yrange.to + subPixel);                            \n                        }\n                        ctx.stroke();\n                    } else {\n                        ctx.fillStyle = m.color || options.grid.markingsColor;\n                        ctx.fillRect(xrange.from, yrange.to,\n                                     xrange.to - xrange.from,\n                                     yrange.from - yrange.to);\n                    }\n                }\n            }\n\n            // draw the ticks\n            axes = allAxes();\n            bw = options.grid.borderWidth;\n\n            for (var j = 0; j < axes.length; ++j) {\n                var axis = axes[j], box = axis.box,\n                    t = axis.tickLength, x, y, xoff, yoff;\n                if (!axis.show || axis.ticks.length == 0)\n                    continue;\n\n                ctx.lineWidth = 1;\n\n                // find the edges\n                if (axis.direction == \"x\") {\n                    x = 0;\n                    if (t == \"full\")\n                        y = (axis.position == \"top\" ? 0 : plotHeight);\n                    else\n                        y = box.top - plotOffset.top + (axis.position == \"top\" ? box.height : 0);\n                }\n                else {\n                    y = 0;\n                    if (t == \"full\")\n                        x = (axis.position == \"left\" ? 0 : plotWidth);\n                    else\n                        x = box.left - plotOffset.left + (axis.position == \"left\" ? box.width : 0);\n                }\n\n                // draw tick bar\n                if (!axis.innermost) {\n                    ctx.strokeStyle = axis.options.color;\n                    ctx.beginPath();\n                    xoff = yoff = 0;\n                    if (axis.direction == \"x\")\n                        xoff = plotWidth + 1;\n                    else\n                        yoff = plotHeight + 1;\n\n                    if (ctx.lineWidth == 1) {\n                        if (axis.direction == \"x\") {\n                            y = Math.floor(y) + 0.5;\n                        } else {\n                            x = Math.floor(x) + 0.5;\n                        }\n                    }\n\n                    ctx.moveTo(x, y);\n                    ctx.lineTo(x + xoff, y + yoff);\n                    ctx.stroke();\n                }\n\n                // draw ticks\n\n                ctx.strokeStyle = axis.options.tickColor;\n\n                ctx.beginPath();\n                for (i = 0; i < axis.ticks.length; ++i) {\n                    var v = axis.ticks[i].v;\n\n                    xoff = yoff = 0;\n\n                    if (isNaN(v) || v < axis.min || v > axis.max\n                        // skip those lying on the axes if we got a border\n                        || (t == \"full\"\n                            && ((typeof bw == \"object\" && bw[axis.position] > 0) || bw > 0)\n                            && (v == axis.min || v == axis.max)))\n                        continue;\n\n                    if (axis.direction == \"x\") {\n                        x = axis.p2c(v);\n                        yoff = t == \"full\" ? -plotHeight : t;\n\n                        if (axis.position == \"top\")\n                            yoff = -yoff;\n                    }\n                    else {\n                        y = axis.p2c(v);\n                        xoff = t == \"full\" ? -plotWidth : t;\n\n                        if (axis.position == \"left\")\n                            xoff = -xoff;\n                    }\n\n                    if (ctx.lineWidth == 1) {\n                        if (axis.direction == \"x\")\n                            x = Math.floor(x) + 0.5;\n                        else\n                            y = Math.floor(y) + 0.5;\n                    }\n\n                    ctx.moveTo(x, y);\n                    ctx.lineTo(x + xoff, y + yoff);\n                }\n\n                ctx.stroke();\n            }\n\n\n            // draw border\n            if (bw) {\n                // If either borderWidth or borderColor is an object, then draw the border\n                // line by line instead of as one rectangle\n                bc = options.grid.borderColor;\n                if(typeof bw == \"object\" || typeof bc == \"object\") {\n                    if (typeof bw !== \"object\") {\n                        bw = {top: bw, right: bw, bottom: bw, left: bw};\n                    }\n                    if (typeof bc !== \"object\") {\n                        bc = {top: bc, right: bc, bottom: bc, left: bc};\n                    }\n\n                    if (bw.top > 0) {\n                        ctx.strokeStyle = bc.top;\n                        ctx.lineWidth = bw.top;\n                        ctx.beginPath();\n                        ctx.moveTo(0 - bw.left, 0 - bw.top/2);\n                        ctx.lineTo(plotWidth, 0 - bw.top/2);\n                        ctx.stroke();\n                    }\n\n                    if (bw.right > 0) {\n                        ctx.strokeStyle = bc.right;\n                        ctx.lineWidth = bw.right;\n                        ctx.beginPath();\n                        ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);\n                        ctx.lineTo(plotWidth + bw.right / 2, plotHeight);\n                        ctx.stroke();\n                    }\n\n                    if (bw.bottom > 0) {\n                        ctx.strokeStyle = bc.bottom;\n                        ctx.lineWidth = bw.bottom;\n                        ctx.beginPath();\n                        ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);\n                        ctx.lineTo(0, plotHeight + bw.bottom / 2);\n                        ctx.stroke();\n                    }\n\n                    if (bw.left > 0) {\n                        ctx.strokeStyle = bc.left;\n                        ctx.lineWidth = bw.left;\n                        ctx.beginPath();\n                        ctx.moveTo(0 - bw.left/2, plotHeight + bw.bottom);\n                        ctx.lineTo(0- bw.left/2, 0);\n                        ctx.stroke();\n                    }\n                }\n                else {\n                    ctx.lineWidth = bw;\n                    ctx.strokeStyle = options.grid.borderColor;\n                    ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);\n                }\n            }\n\n            ctx.restore();\n        }\n\n        function drawAxisLabels() {\n\n            $.each(allAxes(), function (_, axis) {\n                var box = axis.box,\n                    legacyStyles = axis.direction + \"Axis \" + axis.direction + axis.n + \"Axis\",\n                    layer = \"flot-\" + axis.direction + \"-axis flot-\" + axis.direction + axis.n + \"-axis \" + legacyStyles,\n                    font = axis.options.font || \"flot-tick-label tickLabel\",\n                    tick, x, y, halign, valign;\n\n                // Remove text before checking for axis.show and ticks.length;\n                // otherwise plugins, like flot-tickrotor, that draw their own\n                // tick labels will end up with both theirs and the defaults.\n\n                surface.removeText(layer);\n\n                if (!axis.show || axis.ticks.length == 0)\n                    return;\n\n                for (var i = 0; i < axis.ticks.length; ++i) {\n\n                    tick = axis.ticks[i];\n                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)\n                        continue;\n\n                    if (axis.direction == \"x\") {\n                        halign = \"center\";\n                        x = plotOffset.left + axis.p2c(tick.v);\n                        if (axis.position == \"bottom\") {\n                            y = box.top + box.padding;\n                        } else {\n                            y = box.top + box.height - box.padding;\n                            valign = \"bottom\";\n                        }\n                    } else {\n                        valign = \"middle\";\n                        y = plotOffset.top + axis.p2c(tick.v);\n                        if (axis.position == \"left\") {\n                            x = box.left + box.width - box.padding;\n                            halign = \"right\";\n                        } else {\n                            x = box.left + box.padding;\n                        }\n                    }\n\n                    surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);\n                }\n            });\n        }\n\n        function drawSeries(series) {\n            if (series.lines.show)\n                drawSeriesLines(series);\n            if (series.bars.show)\n                drawSeriesBars(series);\n            if (series.points.show)\n                drawSeriesPoints(series);\n        }\n\n        function drawSeriesLines(series) {\n            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {\n                var points = datapoints.points,\n                    ps = datapoints.pointsize,\n                    prevx = null, prevy = null;\n\n                ctx.beginPath();\n                for (var i = ps; i < points.length; i += ps) {\n                    var x1 = points[i - ps], y1 = points[i - ps + 1],\n                        x2 = points[i], y2 = points[i + 1];\n\n                    if (x1 == null || x2 == null)\n                        continue;\n\n                    // clip with ymin\n                    if (y1 <= y2 && y1 < axisy.min) {\n                        if (y2 < axisy.min)\n                            continue;   // line segment is outside\n                        // compute new intersection point\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.min;\n                    }\n                    else if (y2 <= y1 && y2 < axisy.min) {\n                        if (y1 < axisy.min)\n                            continue;\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.min;\n                    }\n\n                    // clip with ymax\n                    if (y1 >= y2 && y1 > axisy.max) {\n                        if (y2 > axisy.max)\n                            continue;\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.max;\n                    }\n                    else if (y2 >= y1 && y2 > axisy.max) {\n                        if (y1 > axisy.max)\n                            continue;\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.max;\n                    }\n\n                    // clip with xmin\n                    if (x1 <= x2 && x1 < axisx.min) {\n                        if (x2 < axisx.min)\n                            continue;\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.min;\n                    }\n                    else if (x2 <= x1 && x2 < axisx.min) {\n                        if (x1 < axisx.min)\n                            continue;\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.min;\n                    }\n\n                    // clip with xmax\n                    if (x1 >= x2 && x1 > axisx.max) {\n                        if (x2 > axisx.max)\n                            continue;\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.max;\n                    }\n                    else if (x2 >= x1 && x2 > axisx.max) {\n                        if (x1 > axisx.max)\n                            continue;\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.max;\n                    }\n\n                    if (x1 != prevx || y1 != prevy)\n                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\n\n                    prevx = x2;\n                    prevy = y2;\n                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);\n                }\n                ctx.stroke();\n            }\n\n            function plotLineArea(datapoints, axisx, axisy) {\n                var points = datapoints.points,\n                    ps = datapoints.pointsize,\n                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),\n                    i = 0, top, areaOpen = false,\n                    ypos = 1, segmentStart = 0, segmentEnd = 0;\n\n                // we process each segment in two turns, first forward\n                // direction to sketch out top, then once we hit the\n                // end we go backwards to sketch the bottom\n                while (true) {\n                    if (ps > 0 && i > points.length + ps)\n                        break;\n\n                    i += ps; // ps is negative if going backwards\n\n                    var x1 = points[i - ps],\n                        y1 = points[i - ps + ypos],\n                        x2 = points[i], y2 = points[i + ypos];\n\n                    if (areaOpen) {\n                        if (ps > 0 && x1 != null && x2 == null) {\n                            // at turning point\n                            segmentEnd = i;\n                            ps = -ps;\n                            ypos = 2;\n                            continue;\n                        }\n\n                        if (ps < 0 && i == segmentStart + ps) {\n                            // done with the reverse sweep\n                            ctx.fill();\n                            areaOpen = false;\n                            ps = -ps;\n                            ypos = 1;\n                            i = segmentStart = segmentEnd + ps;\n                            continue;\n                        }\n                    }\n\n                    if (x1 == null || x2 == null)\n                        continue;\n\n                    // clip x values\n\n                    // clip with xmin\n                    if (x1 <= x2 && x1 < axisx.min) {\n                        if (x2 < axisx.min)\n                            continue;\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.min;\n                    }\n                    else if (x2 <= x1 && x2 < axisx.min) {\n                        if (x1 < axisx.min)\n                            continue;\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.min;\n                    }\n\n                    // clip with xmax\n                    if (x1 >= x2 && x1 > axisx.max) {\n                        if (x2 > axisx.max)\n                            continue;\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x1 = axisx.max;\n                    }\n                    else if (x2 >= x1 && x2 > axisx.max) {\n                        if (x1 > axisx.max)\n                            continue;\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\n                        x2 = axisx.max;\n                    }\n\n                    if (!areaOpen) {\n                        // open area\n                        ctx.beginPath();\n                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));\n                        areaOpen = true;\n                    }\n\n                    // now first check the case where both is outside\n                    if (y1 >= axisy.max && y2 >= axisy.max) {\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));\n                        continue;\n                    }\n                    else if (y1 <= axisy.min && y2 <= axisy.min) {\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));\n                        continue;\n                    }\n\n                    // else it's a bit more complicated, there might\n                    // be a flat maxed out rectangle first, then a\n                    // triangular cutout or reverse; to find these\n                    // keep track of the current x values\n                    var x1old = x1, x2old = x2;\n\n                    // clip the y values, without shortcutting, we\n                    // go through all cases in turn\n\n                    // clip with ymin\n                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.min;\n                    }\n                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.min;\n                    }\n\n                    // clip with ymax\n                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y1 = axisy.max;\n                    }\n                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\n                        y2 = axisy.max;\n                    }\n\n                    // if the x value was changed we got a rectangle\n                    // to fill\n                    if (x1 != x1old) {\n                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));\n                        // it goes to (x1, y1), but we fill that below\n                    }\n\n                    // fill triangular section, this sometimes result\n                    // in redundant points if (x1, y1) hasn't changed\n                    // from previous line to, but we just ignore that\n                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));\n                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n\n                    // fill the other rectangle if it's there\n                    if (x2 != x2old) {\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\n                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));\n                    }\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n            ctx.lineJoin = \"round\";\n\n            var lw = series.lines.lineWidth,\n                sw = series.shadowSize;\n            // FIXME: consider another form of shadow when filling is turned on\n            if (lw > 0 && sw > 0) {\n                // draw shadow as a thick and thin line with transparency\n                ctx.lineWidth = sw;\n                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n                // position shadow at angle from the mid of line\n                var angle = Math.PI/18;\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);\n                ctx.lineWidth = sw/2;\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);\n            }\n\n            ctx.lineWidth = lw;\n            ctx.strokeStyle = series.color;\n            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);\n            if (fillStyle) {\n                ctx.fillStyle = fillStyle;\n                plotLineArea(series.datapoints, series.xaxis, series.yaxis);\n            }\n\n            if (lw > 0)\n                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);\n            ctx.restore();\n        }\n\n        function drawSeriesPoints(series) {\n            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {\n                var points = datapoints.points, ps = datapoints.pointsize;\n\n                for (var i = 0; i < points.length; i += ps) {\n                    var x = points[i], y = points[i + 1];\n                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\n                        continue;\n\n                    ctx.beginPath();\n                    x = axisx.p2c(x);\n                    y = axisy.p2c(y) + offset;\n                    if (symbol == \"circle\")\n                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);\n                    else\n                        symbol(ctx, x, y, radius, shadow);\n                    ctx.closePath();\n\n                    if (fillStyle) {\n                        ctx.fillStyle = fillStyle;\n                        ctx.fill();\n                    }\n                    ctx.stroke();\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            var lw = series.points.lineWidth,\n                sw = series.shadowSize,\n                radius = series.points.radius,\n                symbol = series.points.symbol;\n\n            // If the user sets the line width to 0, we change it to a very \n            // small value. A line width of 0 seems to force the default of 1.\n            // Doing the conditional here allows the shadow setting to still be \n            // optional even with a lineWidth of 0.\n\n            if( lw == 0 )\n                lw = 0.0001;\n\n            if (lw > 0 && sw > 0) {\n                // draw shadow in two steps\n                var w = sw / 2;\n                ctx.lineWidth = w;\n                ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\n                plotPoints(series.datapoints, radius, null, w + w/2, true,\n                           series.xaxis, series.yaxis, symbol);\n\n                ctx.strokeStyle = \"rgba(0,0,0,0.2)\";\n                plotPoints(series.datapoints, radius, null, w/2, true,\n                           series.xaxis, series.yaxis, symbol);\n            }\n\n            ctx.lineWidth = lw;\n            ctx.strokeStyle = series.color;\n            plotPoints(series.datapoints, radius,\n                       getFillStyle(series.points, series.color), 0, false,\n                       series.xaxis, series.yaxis, symbol);\n            ctx.restore();\n        }\n\n        function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {\n            var left, right, bottom, top,\n                drawLeft, drawRight, drawTop, drawBottom,\n                tmp;\n\n            // in horizontal mode, we start the bar from the left\n            // instead of from the bottom so it appears to be\n            // horizontal rather than vertical\n            if (horizontal) {\n                drawBottom = drawRight = drawTop = true;\n                drawLeft = false;\n                left = b;\n                right = x;\n                top = y + barLeft;\n                bottom = y + barRight;\n\n                // account for negative bars\n                if (right < left) {\n                    tmp = right;\n                    right = left;\n                    left = tmp;\n                    drawLeft = true;\n                    drawRight = false;\n                }\n            }\n            else {\n                drawLeft = drawRight = drawTop = true;\n                drawBottom = false;\n                left = x + barLeft;\n                right = x + barRight;\n                bottom = b;\n                top = y;\n\n                // account for negative bars\n                if (top < bottom) {\n                    tmp = top;\n                    top = bottom;\n                    bottom = tmp;\n                    drawBottom = true;\n                    drawTop = false;\n                }\n            }\n\n            // clip\n            if (right < axisx.min || left > axisx.max ||\n                top < axisy.min || bottom > axisy.max)\n                return;\n\n            if (left < axisx.min) {\n                left = axisx.min;\n                drawLeft = false;\n            }\n\n            if (right > axisx.max) {\n                right = axisx.max;\n                drawRight = false;\n            }\n\n            if (bottom < axisy.min) {\n                bottom = axisy.min;\n                drawBottom = false;\n            }\n\n            if (top > axisy.max) {\n                top = axisy.max;\n                drawTop = false;\n            }\n\n            left = axisx.p2c(left);\n            bottom = axisy.p2c(bottom);\n            right = axisx.p2c(right);\n            top = axisy.p2c(top);\n\n            // fill the bar\n            if (fillStyleCallback) {\n                c.fillStyle = fillStyleCallback(bottom, top);\n                c.fillRect(left, top, right - left, bottom - top)\n            }\n\n            // draw outline\n            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {\n                c.beginPath();\n\n                // FIXME: inline moveTo is buggy with excanvas\n                c.moveTo(left, bottom);\n                if (drawLeft)\n                    c.lineTo(left, top);\n                else\n                    c.moveTo(left, top);\n                if (drawTop)\n                    c.lineTo(right, top);\n                else\n                    c.moveTo(right, top);\n                if (drawRight)\n                    c.lineTo(right, bottom);\n                else\n                    c.moveTo(right, bottom);\n                if (drawBottom)\n                    c.lineTo(left, bottom);\n                else\n                    c.moveTo(left, bottom);\n                c.stroke();\n            }\n        }\n\n        function drawSeriesBars(series) {\n            function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {\n                var points = datapoints.points, ps = datapoints.pointsize;\n\n                for (var i = 0; i < points.length; i += ps) {\n                    if (points[i] == null)\n                        continue;\n                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);\n                }\n            }\n\n            ctx.save();\n            ctx.translate(plotOffset.left, plotOffset.top);\n\n            // FIXME: figure out a way to add shadows (for instance along the right edge)\n            ctx.lineWidth = series.bars.lineWidth;\n            ctx.strokeStyle = series.color;\n\n            var barLeft;\n\n            switch (series.bars.align) {\n                case \"left\":\n                    barLeft = 0;\n                    break;\n                case \"right\":\n                    barLeft = -series.bars.barWidth;\n                    break;\n                default:\n                    barLeft = -series.bars.barWidth / 2;\n            }\n\n            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;\n            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);\n            ctx.restore();\n        }\n\n        function getFillStyle(filloptions, seriesColor, bottom, top) {\n            var fill = filloptions.fill;\n            if (!fill)\n                return null;\n\n            if (filloptions.fillColor)\n                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);\n\n            var c = $.color.parse(seriesColor);\n            c.a = typeof fill == \"number\" ? fill : 0.4;\n            c.normalize();\n            return c.toString();\n        }\n\n        function insertLegend() {\n\n            if (options.legend.container != null) {\n                $(options.legend.container).html(\"\");\n            } else {\n                placeholder.find(\".legend\").remove();\n            }\n\n            if (!options.legend.show) {\n                return;\n            }\n\n            var fragments = [], entries = [], rowStarted = false,\n                lf = options.legend.labelFormatter, s, label;\n\n            // Build a list of legend entries, with each having a label and a color\n\n            for (var i = 0; i < series.length; ++i) {\n                s = series[i];\n                if (s.label) {\n                    label = lf ? lf(s.label, s) : s.label;\n                    if (label) {\n                        entries.push({\n                            label: label,\n                            color: s.color\n                        });\n                    }\n                }\n            }\n\n            // Sort the legend using either the default or a custom comparator\n\n            if (options.legend.sorted) {\n                if ($.isFunction(options.legend.sorted)) {\n                    entries.sort(options.legend.sorted);\n                } else if (options.legend.sorted == \"reverse\") {\n                \tentries.reverse();\n                } else {\n                    var ascending = options.legend.sorted != \"descending\";\n                    entries.sort(function(a, b) {\n                        return a.label == b.label ? 0 : (\n                            (a.label < b.label) != ascending ? 1 : -1   // Logical XOR\n                        );\n                    });\n                }\n            }\n\n            // Generate markup for the list of entries, in their final order\n\n            for (var i = 0; i < entries.length; ++i) {\n\n                var entry = entries[i];\n\n                if (i % options.legend.noColumns == 0) {\n                    if (rowStarted)\n                        fragments.push('</tr>');\n                    fragments.push('<tr>');\n                    rowStarted = true;\n                }\n\n                fragments.push(\n                    '<td class=\"legendColorBox\"><div style=\"border:1px solid ' + options.legend.labelBoxBorderColor + ';padding:1px\"><div style=\"width:4px;height:0;border:5px solid ' + entry.color + ';overflow:hidden\"></div></div></td>' +\n                    '<td class=\"legendLabel\">' + entry.label + '</td>'\n                );\n            }\n\n            if (rowStarted)\n                fragments.push('</tr>');\n\n            if (fragments.length == 0)\n                return;\n\n            var table = '<table style=\"font-size:smaller;color:' + options.grid.color + '\">' + fragments.join(\"\") + '</table>';\n            if (options.legend.container != null)\n                $(options.legend.container).html(table);\n            else {\n                var pos = \"\",\n                    p = options.legend.position,\n                    m = options.legend.margin;\n                if (m[0] == null)\n                    m = [m, m];\n                if (p.charAt(0) == \"n\")\n                    pos += 'top:' + (m[1] + plotOffset.top) + 'px;';\n                else if (p.charAt(0) == \"s\")\n                    pos += 'bottom:' + (m[1] + plotOffset.bottom) + 'px;';\n                if (p.charAt(1) == \"e\")\n                    pos += 'right:' + (m[0] + plotOffset.right) + 'px;';\n                else if (p.charAt(1) == \"w\")\n                    pos += 'left:' + (m[0] + plotOffset.left) + 'px;';\n                var legend = $('<div class=\"legend\">' + table.replace('style=\"', 'style=\"position:absolute;' + pos +';') + '</div>').appendTo(placeholder);\n                if (options.legend.backgroundOpacity != 0.0) {\n                    // put in the transparent background\n                    // separately to avoid blended labels and\n                    // label boxes\n                    var c = options.legend.backgroundColor;\n                    if (c == null) {\n                        c = options.grid.backgroundColor;\n                        if (c && typeof c == \"string\")\n                            c = $.color.parse(c);\n                        else\n                            c = $.color.extract(legend, 'background-color');\n                        c.a = 1;\n                        c = c.toString();\n                    }\n                    var div = legend.children();\n                    $('<div style=\"position:absolute;width:' + div.width() + 'px;height:' + div.height() + 'px;' + pos +'background-color:' + c + ';\"> </div>').prependTo(legend).css('opacity', options.legend.backgroundOpacity);\n                }\n            }\n        }\n\n\n        // interactive features\n\n        var highlights = [],\n            redrawTimeout = null;\n\n        // returns the data item the mouse is over, or null if none is found\n        function findNearbyItem(mouseX, mouseY, seriesFilter) {\n            var maxDistance = options.grid.mouseActiveRadius,\n                smallestDistance = maxDistance * maxDistance + 1,\n                item = null, foundPoint = false, i, j, ps;\n\n            for (i = series.length - 1; i >= 0; --i) {\n                if (!seriesFilter(series[i]))\n                    continue;\n\n                var s = series[i],\n                    axisx = s.xaxis,\n                    axisy = s.yaxis,\n                    points = s.datapoints.points,\n                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster\n                    my = axisy.c2p(mouseY),\n                    maxx = maxDistance / axisx.scale,\n                    maxy = maxDistance / axisy.scale;\n\n                ps = s.datapoints.pointsize;\n                // with inverse transforms, we can't use the maxx/maxy\n                // optimization, sadly\n                if (axisx.options.inverseTransform)\n                    maxx = Number.MAX_VALUE;\n                if (axisy.options.inverseTransform)\n                    maxy = Number.MAX_VALUE;\n\n                if (s.lines.show || s.points.show) {\n                    for (j = 0; j < points.length; j += ps) {\n                        var x = points[j], y = points[j + 1];\n                        if (x == null)\n                            continue;\n\n                        // For points and lines, the cursor must be within a\n                        // certain distance to the data point\n                        if (x - mx > maxx || x - mx < -maxx ||\n                            y - my > maxy || y - my < -maxy)\n                            continue;\n\n                        // We have to calculate distances in pixels, not in\n                        // data units, because the scales of the axes may be different\n                        var dx = Math.abs(axisx.p2c(x) - mouseX),\n                            dy = Math.abs(axisy.p2c(y) - mouseY),\n                            dist = dx * dx + dy * dy; // we save the sqrt\n\n                        // use <= to ensure last point takes precedence\n                        // (last generally means on top of)\n                        if (dist < smallestDistance) {\n                            smallestDistance = dist;\n                            item = [i, j / ps];\n                        }\n                    }\n                }\n\n                if (s.bars.show && !item) { // no other point can be nearby\n\n                    var barLeft, barRight;\n\n                    switch (s.bars.align) {\n                        case \"left\":\n                            barLeft = 0;\n                            break;\n                        case \"right\":\n                            barLeft = -s.bars.barWidth;\n                            break;\n                        default:\n                            barLeft = -s.bars.barWidth / 2;\n                    }\n\n                    barRight = barLeft + s.bars.barWidth;\n\n                    for (j = 0; j < points.length; j += ps) {\n                        var x = points[j], y = points[j + 1], b = points[j + 2];\n                        if (x == null)\n                            continue;\n\n                        // for a bar graph, the cursor must be inside the bar\n                        if (series[i].bars.horizontal ?\n                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) &&\n                             my >= y + barLeft && my <= y + barRight) :\n                            (mx >= x + barLeft && mx <= x + barRight &&\n                             my >= Math.min(b, y) && my <= Math.max(b, y)))\n                                item = [i, j / ps];\n                    }\n                }\n            }\n\n            if (item) {\n                i = item[0];\n                j = item[1];\n                ps = series[i].datapoints.pointsize;\n\n                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),\n                         dataIndex: j,\n                         series: series[i],\n                         seriesIndex: i };\n            }\n\n            return null;\n        }\n\n        function onMouseMove(e) {\n            if (options.grid.hoverable)\n                triggerClickHoverEvent(\"plothover\", e,\n                                       function (s) { return s[\"hoverable\"] != false; });\n        }\n\n        function onMouseLeave(e) {\n            if (options.grid.hoverable)\n                triggerClickHoverEvent(\"plothover\", e,\n                                       function (s) { return false; });\n        }\n\n        function onClick(e) {\n            triggerClickHoverEvent(\"plotclick\", e,\n                                   function (s) { return s[\"clickable\"] != false; });\n        }\n\n        // trigger click or hover event (they send the same parameters\n        // so we share their code)\n        function triggerClickHoverEvent(eventname, event, seriesFilter) {\n            var offset = eventHolder.offset(),\n                canvasX = event.pageX - offset.left - plotOffset.left,\n                canvasY = event.pageY - offset.top - plotOffset.top,\n            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });\n\n            pos.pageX = event.pageX;\n            pos.pageY = event.pageY;\n\n            var item = findNearbyItem(canvasX, canvasY, seriesFilter);\n\n            if (item) {\n                // fill in mouse pos for any listeners out there\n                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);\n                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);\n            }\n\n            if (options.grid.autoHighlight) {\n                // clear auto-highlights\n                for (var i = 0; i < highlights.length; ++i) {\n                    var h = highlights[i];\n                    if (h.auto == eventname &&\n                        !(item && h.series == item.series &&\n                          h.point[0] == item.datapoint[0] &&\n                          h.point[1] == item.datapoint[1]))\n                        unhighlight(h.series, h.point);\n                }\n\n                if (item)\n                    highlight(item.series, item.datapoint, eventname);\n            }\n\n            placeholder.trigger(eventname, [ pos, item ]);\n        }\n\n        function triggerRedrawOverlay() {\n            var t = options.interaction.redrawOverlayInterval;\n            if (t == -1) {      // skip event queue\n                drawOverlay();\n                return;\n            }\n\n            if (!redrawTimeout)\n                redrawTimeout = setTimeout(drawOverlay, t);\n        }\n\n        function drawOverlay() {\n            redrawTimeout = null;\n\n            // draw highlights\n            octx.save();\n            overlay.clear();\n            octx.translate(plotOffset.left, plotOffset.top);\n\n            var i, hi;\n            for (i = 0; i < highlights.length; ++i) {\n                hi = highlights[i];\n\n                if (hi.series.bars.show)\n                    drawBarHighlight(hi.series, hi.point);\n                else\n                    drawPointHighlight(hi.series, hi.point);\n            }\n            octx.restore();\n\n            executeHooks(hooks.drawOverlay, [octx]);\n        }\n\n        function highlight(s, point, auto) {\n            if (typeof s == \"number\")\n                s = series[s];\n\n            if (typeof point == \"number\") {\n                var ps = s.datapoints.pointsize;\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n            }\n\n            var i = indexOfHighlight(s, point);\n            if (i == -1) {\n                highlights.push({ series: s, point: point, auto: auto });\n\n                triggerRedrawOverlay();\n            }\n            else if (!auto)\n                highlights[i].auto = false;\n        }\n\n        function unhighlight(s, point) {\n            if (s == null && point == null) {\n                highlights = [];\n                triggerRedrawOverlay();\n                return;\n            }\n\n            if (typeof s == \"number\")\n                s = series[s];\n\n            if (typeof point == \"number\") {\n                var ps = s.datapoints.pointsize;\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\n            }\n\n            var i = indexOfHighlight(s, point);\n            if (i != -1) {\n                highlights.splice(i, 1);\n\n                triggerRedrawOverlay();\n            }\n        }\n\n        function indexOfHighlight(s, p) {\n            for (var i = 0; i < highlights.length; ++i) {\n                var h = highlights[i];\n                if (h.series == s && h.point[0] == p[0]\n                    && h.point[1] == p[1])\n                    return i;\n            }\n            return -1;\n        }\n\n        function drawPointHighlight(series, point) {\n            var x = point[0], y = point[1],\n                axisx = series.xaxis, axisy = series.yaxis,\n                highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString();\n\n            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\n                return;\n\n            var pointRadius = series.points.radius + series.points.lineWidth / 2;\n            octx.lineWidth = pointRadius;\n            octx.strokeStyle = highlightColor;\n            var radius = 1.5 * pointRadius;\n            x = axisx.p2c(x);\n            y = axisy.p2c(y);\n\n            octx.beginPath();\n            if (series.points.symbol == \"circle\")\n                octx.arc(x, y, radius, 0, 2 * Math.PI, false);\n            else\n                series.points.symbol(octx, x, y, radius, false);\n            octx.closePath();\n            octx.stroke();\n        }\n\n        function drawBarHighlight(series, point) {\n            var highlightColor = (typeof series.highlightColor === \"string\") ? series.highlightColor : $.color.parse(series.color).scale('a', 0.5).toString(),\n                fillStyle = highlightColor,\n                barLeft;\n\n            switch (series.bars.align) {\n                case \"left\":\n                    barLeft = 0;\n                    break;\n                case \"right\":\n                    barLeft = -series.bars.barWidth;\n                    break;\n                default:\n                    barLeft = -series.bars.barWidth / 2;\n            }\n\n            octx.lineWidth = series.bars.lineWidth;\n            octx.strokeStyle = highlightColor;\n\n            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,\n                    function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);\n        }\n\n        function getColorOrGradient(spec, bottom, top, defaultColor) {\n            if (typeof spec == \"string\")\n                return spec;\n            else {\n                // assume this is a gradient spec; IE currently only\n                // supports a simple vertical gradient properly, so that's\n                // what we support too\n                var gradient = ctx.createLinearGradient(0, top, 0, bottom);\n\n                for (var i = 0, l = spec.colors.length; i < l; ++i) {\n                    var c = spec.colors[i];\n                    if (typeof c != \"string\") {\n                        var co = $.color.parse(defaultColor);\n                        if (c.brightness != null)\n                            co = co.scale('rgb', c.brightness);\n                        if (c.opacity != null)\n                            co.a *= c.opacity;\n                        c = co.toString();\n                    }\n                    gradient.addColorStop(i / (l - 1), c);\n                }\n\n                return gradient;\n            }\n        }\n    }\n\n    // Add the plot function to the top level of the jQuery object\n\n    $.plot = function(placeholder, data, options) {\n        //var t0 = new Date();\n        var plot = new Plot($(placeholder), data, options, $.plot.plugins);\n        //(window.console ? console.log : alert)(\"time used (msecs): \" + ((new Date()).getTime() - t0.getTime()));\n        return plot;\n    };\n\n    $.plot.version = \"0.8.3\";\n\n    $.plot.plugins = [];\n\n    // Also add the plot function as a chainable property\n\n    $.fn.plot = function(data, options) {\n        return this.each(function() {\n            $.plot(this, data, options);\n        });\n    };\n\n    // round to nearby lower multiple of base\n    function floorInBase(n, base) {\n        return base * Math.floor(n / base);\n    }\n\n})(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/jquery-flot/jquery.flot.js\n// module id = 11\n// module chunks = 0","/* Flot plugin for selecting regions of a plot.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nThe plugin supports these options:\n\nselection: {\n\tmode: null or \"x\" or \"y\" or \"xy\",\n\tcolor: color,\n\tshape: \"round\" or \"miter\" or \"bevel\",\n\tminSize: number of pixels\n}\n\nSelection support is enabled by setting the mode to one of \"x\", \"y\" or \"xy\".\nIn \"x\" mode, the user will only be able to specify the x range, similarly for\n\"y\" mode. For \"xy\", the selection becomes a rectangle where both ranges can be\nspecified. \"color\" is color of the selection (if you need to change the color\nlater on, you can get to it with plot.getOptions().selection.color). \"shape\"\nis the shape of the corners of the selection.\n\n\"minSize\" is the minimum size a selection can be in pixels. This value can\nbe customized to determine the smallest size a selection can be and still\nhave the selection rectangle be displayed. When customizing this value, the\nfact that it refers to pixels, not axis units must be taken into account.\nThus, for example, if there is a bar graph in time mode with BarWidth set to 1\nminute, setting \"minSize\" to 1 will not make the minimum selection size 1\nminute, but rather 1 pixel. Note also that setting \"minSize\" to 0 will prevent\n\"plotunselected\" events from being fired when the user clicks the mouse without\ndragging.\n\nWhen selection support is enabled, a \"plotselected\" event will be emitted on\nthe DOM element you passed into the plot function. The event handler gets a\nparameter with the ranges selected on the axes, like this:\n\n\tplaceholder.bind( \"plotselected\", function( event, ranges ) {\n\t\talert(\"You selected \" + ranges.xaxis.from + \" to \" + ranges.xaxis.to)\n\t\t// similar for yaxis - with multiple axes, the extra ones are in\n\t\t// x2axis, x3axis, ...\n\t});\n\nThe \"plotselected\" event is only fired when the user has finished making the\nselection. A \"plotselecting\" event is fired during the process with the same\nparameters as the \"plotselected\" event, in case you want to know what's\nhappening while it's happening,\n\nA \"plotunselected\" event with no arguments is emitted when the user clicks the\nmouse to remove the selection. As stated above, setting \"minSize\" to 0 will\ndestroy this behavior.\n\nThe plugin allso adds the following methods to the plot object:\n\n- setSelection( ranges, preventEvent )\n\n  Set the selection rectangle. The passed in ranges is on the same form as\n  returned in the \"plotselected\" event. If the selection mode is \"x\", you\n  should put in either an xaxis range, if the mode is \"y\" you need to put in\n  an yaxis range and both xaxis and yaxis if the selection mode is \"xy\", like\n  this:\n\n\tsetSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });\n\n  setSelection will trigger the \"plotselected\" event when called. If you don't\n  want that to happen, e.g. if you're inside a \"plotselected\" handler, pass\n  true as the second parameter. If you are using multiple axes, you can\n  specify the ranges on any of those, e.g. as x2axis/x3axis/... instead of\n  xaxis, the plugin picks the first one it sees.\n\n- clearSelection( preventEvent )\n\n  Clear the selection rectangle. Pass in true to avoid getting a\n  \"plotunselected\" event.\n\n- getSelection()\n\n  Returns the current selection in the same format as the \"plotselected\"\n  event. If there's currently no selection, the function returns null.\n\n*/\n\n(function ($) {\n    function init(plot) {\n        var selection = {\n                first: { x: -1, y: -1}, second: { x: -1, y: -1},\n                show: false,\n                active: false\n            };\n\n        // FIXME: The drag handling implemented here should be\n        // abstracted out, there's some similar code from a library in\n        // the navigation plugin, this should be massaged a bit to fit\n        // the Flot cases here better and reused. Doing this would\n        // make this plugin much slimmer.\n        var savedhandlers = {};\n\n        var mouseUpHandler = null;\n        \n        function onMouseMove(e) {\n            if (selection.active) {\n                updateSelection(e);\n                \n                plot.getPlaceholder().trigger(\"plotselecting\", [ getSelection() ]);\n            }\n        }\n\n        function onMouseDown(e) {\n            if (e.which != 1)  // only accept left-click\n                return;\n            \n            // cancel out any text selections\n            document.body.focus();\n\n            // prevent text selection and drag in old-school browsers\n            if (document.onselectstart !== undefined && savedhandlers.onselectstart == null) {\n                savedhandlers.onselectstart = document.onselectstart;\n                document.onselectstart = function () { return false; };\n            }\n            if (document.ondrag !== undefined && savedhandlers.ondrag == null) {\n                savedhandlers.ondrag = document.ondrag;\n                document.ondrag = function () { return false; };\n            }\n\n            setSelectionPos(selection.first, e);\n\n            selection.active = true;\n\n            // this is a bit silly, but we have to use a closure to be\n            // able to whack the same handler again\n            mouseUpHandler = function (e) { onMouseUp(e); };\n            \n            $(document).one(\"mouseup\", mouseUpHandler);\n        }\n\n        function onMouseUp(e) {\n            mouseUpHandler = null;\n            \n            // revert drag stuff for old-school browsers\n            if (document.onselectstart !== undefined)\n                document.onselectstart = savedhandlers.onselectstart;\n            if (document.ondrag !== undefined)\n                document.ondrag = savedhandlers.ondrag;\n\n            // no more dragging\n            selection.active = false;\n            updateSelection(e);\n\n            if (selectionIsSane())\n                triggerSelectedEvent();\n            else {\n                // this counts as a clear\n                plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n                plot.getPlaceholder().trigger(\"plotselecting\", [ null ]);\n            }\n\n            return false;\n        }\n\n        function getSelection() {\n            if (!selectionIsSane())\n                return null;\n            \n            if (!selection.show) return null;\n\n            var r = {}, c1 = selection.first, c2 = selection.second;\n            $.each(plot.getAxes(), function (name, axis) {\n                if (axis.used) {\n                    var p1 = axis.c2p(c1[axis.direction]), p2 = axis.c2p(c2[axis.direction]); \n                    r[name] = { from: Math.min(p1, p2), to: Math.max(p1, p2) };\n                }\n            });\n            return r;\n        }\n\n        function triggerSelectedEvent() {\n            var r = getSelection();\n\n            plot.getPlaceholder().trigger(\"plotselected\", [ r ]);\n\n            // backwards-compat stuff, to be removed in future\n            if (r.xaxis && r.yaxis)\n                plot.getPlaceholder().trigger(\"selected\", [ { x1: r.xaxis.from, y1: r.yaxis.from, x2: r.xaxis.to, y2: r.yaxis.to } ]);\n        }\n\n        function clamp(min, value, max) {\n            return value < min ? min: (value > max ? max: value);\n        }\n\n        function setSelectionPos(pos, e) {\n            var o = plot.getOptions();\n            var offset = plot.getPlaceholder().offset();\n            var plotOffset = plot.getPlotOffset();\n            pos.x = clamp(0, e.pageX - offset.left - plotOffset.left, plot.width());\n            pos.y = clamp(0, e.pageY - offset.top - plotOffset.top, plot.height());\n\n            if (o.selection.mode == \"y\")\n                pos.x = pos == selection.first ? 0 : plot.width();\n\n            if (o.selection.mode == \"x\")\n                pos.y = pos == selection.first ? 0 : plot.height();\n        }\n\n        function updateSelection(pos) {\n            if (pos.pageX == null)\n                return;\n\n            setSelectionPos(selection.second, pos);\n            if (selectionIsSane()) {\n                selection.show = true;\n                plot.triggerRedrawOverlay();\n            }\n            else\n                clearSelection(true);\n        }\n\n        function clearSelection(preventEvent) {\n            if (selection.show) {\n                selection.show = false;\n                plot.triggerRedrawOverlay();\n                if (!preventEvent)\n                    plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\n            }\n        }\n\n        // function taken from markings support in Flot\n        function extractRange(ranges, coord) {\n            var axis, from, to, key, axes = plot.getAxes();\n\n            for (var k in axes) {\n                axis = axes[k];\n                if (axis.direction == coord) {\n                    key = coord + axis.n + \"axis\";\n                    if (!ranges[key] && axis.n == 1)\n                        key = coord + \"axis\"; // support x1axis as xaxis\n                    if (ranges[key]) {\n                        from = ranges[key].from;\n                        to = ranges[key].to;\n                        break;\n                    }\n                }\n            }\n\n            // backwards-compat stuff - to be removed in future\n            if (!ranges[key]) {\n                axis = coord == \"x\" ? plot.getXAxes()[0] : plot.getYAxes()[0];\n                from = ranges[coord + \"1\"];\n                to = ranges[coord + \"2\"];\n            }\n\n            // auto-reverse as an added bonus\n            if (from != null && to != null && from > to) {\n                var tmp = from;\n                from = to;\n                to = tmp;\n            }\n            \n            return { from: from, to: to, axis: axis };\n        }\n        \n        function setSelection(ranges, preventEvent) {\n            var axis, range, o = plot.getOptions();\n\n            if (o.selection.mode == \"y\") {\n                selection.first.x = 0;\n                selection.second.x = plot.width();\n            }\n            else {\n                range = extractRange(ranges, \"x\");\n\n                selection.first.x = range.axis.p2c(range.from);\n                selection.second.x = range.axis.p2c(range.to);\n            }\n\n            if (o.selection.mode == \"x\") {\n                selection.first.y = 0;\n                selection.second.y = plot.height();\n            }\n            else {\n                range = extractRange(ranges, \"y\");\n\n                selection.first.y = range.axis.p2c(range.from);\n                selection.second.y = range.axis.p2c(range.to);\n            }\n\n            selection.show = true;\n            plot.triggerRedrawOverlay();\n            if (!preventEvent && selectionIsSane())\n                triggerSelectedEvent();\n        }\n\n        function selectionIsSane() {\n            var minSize = plot.getOptions().selection.minSize;\n            return Math.abs(selection.second.x - selection.first.x) >= minSize &&\n                Math.abs(selection.second.y - selection.first.y) >= minSize;\n        }\n\n        plot.clearSelection = clearSelection;\n        plot.setSelection = setSelection;\n        plot.getSelection = getSelection;\n\n        plot.hooks.bindEvents.push(function(plot, eventHolder) {\n            var o = plot.getOptions();\n            if (o.selection.mode != null) {\n                eventHolder.mousemove(onMouseMove);\n                eventHolder.mousedown(onMouseDown);\n            }\n        });\n\n\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\n            // draw selection\n            if (selection.show && selectionIsSane()) {\n                var plotOffset = plot.getPlotOffset();\n                var o = plot.getOptions();\n\n                ctx.save();\n                ctx.translate(plotOffset.left, plotOffset.top);\n\n                var c = $.color.parse(o.selection.color);\n\n                ctx.strokeStyle = c.scale('a', 0.8).toString();\n                ctx.lineWidth = 1;\n                ctx.lineJoin = o.selection.shape;\n                ctx.fillStyle = c.scale('a', 0.4).toString();\n\n                var x = Math.min(selection.first.x, selection.second.x) + 0.5,\n                    y = Math.min(selection.first.y, selection.second.y) + 0.5,\n                    w = Math.abs(selection.second.x - selection.first.x) - 1,\n                    h = Math.abs(selection.second.y - selection.first.y) - 1;\n\n                ctx.fillRect(x, y, w, h);\n                ctx.strokeRect(x, y, w, h);\n\n                ctx.restore();\n            }\n        });\n        \n        plot.hooks.shutdown.push(function (plot, eventHolder) {\n            eventHolder.unbind(\"mousemove\", onMouseMove);\n            eventHolder.unbind(\"mousedown\", onMouseDown);\n            \n            if (mouseUpHandler)\n                $(document).unbind(\"mouseup\", mouseUpHandler);\n        });\n\n    }\n\n    $.plot.plugins.push({\n        init: init,\n        options: {\n            selection: {\n                mode: null, // one of null, \"x\", \"y\" or \"xy\"\n                color: \"#e8cfac\",\n                shape: \"round\", // one of \"round\", \"miter\", or \"bevel\"\n                minSize: 5 // minimum number of pixels\n            }\n        },\n        name: 'selection',\n        version: '1.1'\n    });\n})(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/jquery-flot/jquery.flot.selection.js\n// module id = 12\n// module chunks = 0","/* Pretty handling of time axes.\n\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\nLicensed under the MIT license.\n\nSet axis.mode to \"time\" to enable. See the section \"Time series data\" in\nAPI.txt for details.\n\n*/\n\n(function($) {\n\n\tvar options = {\n\t\txaxis: {\n\t\t\ttimezone: null,\t\t// \"browser\" for local to the client or timezone for timezone-js\n\t\t\ttimeformat: null,\t// format string to use\n\t\t\ttwelveHourClock: false,\t// 12 or 24 time in time mode\n\t\t\tmonthNames: null\t// list of names of months\n\t\t}\n\t};\n\n\t// round to nearby lower multiple of base\n\n\tfunction floorInBase(n, base) {\n\t\treturn base * Math.floor(n / base);\n\t}\n\n\t// Returns a string with the date d formatted according to fmt.\n\t// A subset of the Open Group's strftime format is supported.\n\n\tfunction formatDate(d, fmt, monthNames, dayNames) {\n\n\t\tif (typeof d.strftime == \"function\") {\n\t\t\treturn d.strftime(fmt);\n\t\t}\n\n\t\tvar leftPad = function(n, pad) {\n\t\t\tn = \"\" + n;\n\t\t\tpad = \"\" + (pad == null ? \"0\" : pad);\n\t\t\treturn n.length == 1 ? pad + n : n;\n\t\t};\n\n\t\tvar r = [];\n\t\tvar escape = false;\n\t\tvar hours = d.getHours();\n\t\tvar isAM = hours < 12;\n\n\t\tif (monthNames == null) {\n\t\t\tmonthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\t\t}\n\n\t\tif (dayNames == null) {\n\t\t\tdayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n\t\t}\n\n\t\tvar hours12;\n\n\t\tif (hours > 12) {\n\t\t\thours12 = hours - 12;\n\t\t} else if (hours == 0) {\n\t\t\thours12 = 12;\n\t\t} else {\n\t\t\thours12 = hours;\n\t\t}\n\n\t\tfor (var i = 0; i < fmt.length; ++i) {\n\n\t\t\tvar c = fmt.charAt(i);\n\n\t\t\tif (escape) {\n\t\t\t\tswitch (c) {\n\t\t\t\t\tcase 'a': c = \"\" + dayNames[d.getDay()]; break;\n\t\t\t\t\tcase 'b': c = \"\" + monthNames[d.getMonth()]; break;\n\t\t\t\t\tcase 'd': c = leftPad(d.getDate()); break;\n\t\t\t\t\tcase 'e': c = leftPad(d.getDate(), \" \"); break;\n\t\t\t\t\tcase 'h':\t// For back-compat with 0.7; remove in 1.0\n\t\t\t\t\tcase 'H': c = leftPad(hours); break;\n\t\t\t\t\tcase 'I': c = leftPad(hours12); break;\n\t\t\t\t\tcase 'l': c = leftPad(hours12, \" \"); break;\n\t\t\t\t\tcase 'm': c = leftPad(d.getMonth() + 1); break;\n\t\t\t\t\tcase 'M': c = leftPad(d.getMinutes()); break;\n\t\t\t\t\t// quarters not in Open Group's strftime specification\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\tc = \"\" + (Math.floor(d.getMonth() / 3) + 1); break;\n\t\t\t\t\tcase 'S': c = leftPad(d.getSeconds()); break;\n\t\t\t\t\tcase 'y': c = leftPad(d.getFullYear() % 100); break;\n\t\t\t\t\tcase 'Y': c = \"\" + d.getFullYear(); break;\n\t\t\t\t\tcase 'p': c = (isAM) ? (\"\" + \"am\") : (\"\" + \"pm\"); break;\n\t\t\t\t\tcase 'P': c = (isAM) ? (\"\" + \"AM\") : (\"\" + \"PM\"); break;\n\t\t\t\t\tcase 'w': c = \"\" + d.getDay(); break;\n\t\t\t\t}\n\t\t\t\tr.push(c);\n\t\t\t\tescape = false;\n\t\t\t} else {\n\t\t\t\tif (c == \"%\") {\n\t\t\t\t\tescape = true;\n\t\t\t\t} else {\n\t\t\t\t\tr.push(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn r.join(\"\");\n\t}\n\n\t// To have a consistent view of time-based data independent of which time\n\t// zone the client happens to be in we need a date-like object independent\n\t// of time zones.  This is done through a wrapper that only calls the UTC\n\t// versions of the accessor methods.\n\n\tfunction makeUtcWrapper(d) {\n\n\t\tfunction addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {\n\t\t\tsourceObj[sourceMethod] = function() {\n\t\t\t\treturn targetObj[targetMethod].apply(targetObj, arguments);\n\t\t\t};\n\t\t};\n\n\t\tvar utc = {\n\t\t\tdate: d\n\t\t};\n\n\t\t// support strftime, if found\n\n\t\tif (d.strftime != undefined) {\n\t\t\taddProxyMethod(utc, \"strftime\", d, \"strftime\");\n\t\t}\n\n\t\taddProxyMethod(utc, \"getTime\", d, \"getTime\");\n\t\taddProxyMethod(utc, \"setTime\", d, \"setTime\");\n\n\t\tvar props = [\"Date\", \"Day\", \"FullYear\", \"Hours\", \"Milliseconds\", \"Minutes\", \"Month\", \"Seconds\"];\n\n\t\tfor (var p = 0; p < props.length; p++) {\n\t\t\taddProxyMethod(utc, \"get\" + props[p], d, \"getUTC\" + props[p]);\n\t\t\taddProxyMethod(utc, \"set\" + props[p], d, \"setUTC\" + props[p]);\n\t\t}\n\n\t\treturn utc;\n\t};\n\n\t// select time zone strategy.  This returns a date-like object tied to the\n\t// desired timezone\n\n\tfunction dateGenerator(ts, opts) {\n\t\tif (opts.timezone == \"browser\") {\n\t\t\treturn new Date(ts);\n\t\t} else if (!opts.timezone || opts.timezone == \"utc\") {\n\t\t\treturn makeUtcWrapper(new Date(ts));\n\t\t} else if (typeof timezoneJS != \"undefined\" && typeof timezoneJS.Date != \"undefined\") {\n\t\t\tvar d = new timezoneJS.Date();\n\t\t\t// timezone-js is fickle, so be sure to set the time zone before\n\t\t\t// setting the time.\n\t\t\td.setTimezone(opts.timezone);\n\t\t\td.setTime(ts);\n\t\t\treturn d;\n\t\t} else {\n\t\t\treturn makeUtcWrapper(new Date(ts));\n\t\t}\n\t}\n\t\n\t// map of app. size of time units in milliseconds\n\n\tvar timeUnitSize = {\n\t\t\"second\": 1000,\n\t\t\"minute\": 60 * 1000,\n\t\t\"hour\": 60 * 60 * 1000,\n\t\t\"day\": 24 * 60 * 60 * 1000,\n\t\t\"month\": 30 * 24 * 60 * 60 * 1000,\n\t\t\"quarter\": 3 * 30 * 24 * 60 * 60 * 1000,\n\t\t\"year\": 365.2425 * 24 * 60 * 60 * 1000\n\t};\n\n\t// the allowed tick sizes, after 1 year we use\n\t// an integer algorithm\n\n\tvar baseSpec = [\n\t\t[1, \"second\"], [2, \"second\"], [5, \"second\"], [10, \"second\"],\n\t\t[30, \"second\"], \n\t\t[1, \"minute\"], [2, \"minute\"], [5, \"minute\"], [10, \"minute\"],\n\t\t[30, \"minute\"], \n\t\t[1, \"hour\"], [2, \"hour\"], [4, \"hour\"],\n\t\t[8, \"hour\"], [12, \"hour\"],\n\t\t[1, \"day\"], [2, \"day\"], [3, \"day\"],\n\t\t[0.25, \"month\"], [0.5, \"month\"], [1, \"month\"],\n\t\t[2, \"month\"]\n\t];\n\n\t// we don't know which variant(s) we'll need yet, but generating both is\n\t// cheap\n\n\tvar specMonths = baseSpec.concat([[3, \"month\"], [6, \"month\"],\n\t\t[1, \"year\"]]);\n\tvar specQuarters = baseSpec.concat([[1, \"quarter\"], [2, \"quarter\"],\n\t\t[1, \"year\"]]);\n\n\tfunction init(plot) {\n\t\tplot.hooks.processOptions.push(function (plot, options) {\n\t\t\t$.each(plot.getAxes(), function(axisName, axis) {\n\n\t\t\t\tvar opts = axis.options;\n\n\t\t\t\tif (opts.mode == \"time\") {\n\t\t\t\t\taxis.tickGenerator = function(axis) {\n\n\t\t\t\t\t\tvar ticks = [];\n\t\t\t\t\t\tvar d = dateGenerator(axis.min, opts);\n\t\t\t\t\t\tvar minSize = 0;\n\n\t\t\t\t\t\t// make quarter use a possibility if quarters are\n\t\t\t\t\t\t// mentioned in either of these options\n\n\t\t\t\t\t\tvar spec = (opts.tickSize && opts.tickSize[1] ===\n\t\t\t\t\t\t\t\"quarter\") ||\n\t\t\t\t\t\t\t(opts.minTickSize && opts.minTickSize[1] ===\n\t\t\t\t\t\t\t\"quarter\") ? specQuarters : specMonths;\n\n\t\t\t\t\t\tif (opts.minTickSize != null) {\n\t\t\t\t\t\t\tif (typeof opts.tickSize == \"number\") {\n\t\t\t\t\t\t\t\tminSize = opts.tickSize;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tminSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (var i = 0; i < spec.length - 1; ++i) {\n\t\t\t\t\t\t\tif (axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]]\n\t\t\t\t\t\t\t\t\t\t\t  + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2\n\t\t\t\t\t\t\t\t&& spec[i][0] * timeUnitSize[spec[i][1]] >= minSize) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar size = spec[i][0];\n\t\t\t\t\t\tvar unit = spec[i][1];\n\n\t\t\t\t\t\t// special-case the possibility of several years\n\n\t\t\t\t\t\tif (unit == \"year\") {\n\n\t\t\t\t\t\t\t// if given a minTickSize in years, just use it,\n\t\t\t\t\t\t\t// ensuring that it's an integer\n\n\t\t\t\t\t\t\tif (opts.minTickSize != null && opts.minTickSize[1] == \"year\") {\n\t\t\t\t\t\t\t\tsize = Math.floor(opts.minTickSize[0]);\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tvar magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));\n\t\t\t\t\t\t\t\tvar norm = (axis.delta / timeUnitSize.year) / magn;\n\n\t\t\t\t\t\t\t\tif (norm < 1.5) {\n\t\t\t\t\t\t\t\t\tsize = 1;\n\t\t\t\t\t\t\t\t} else if (norm < 3) {\n\t\t\t\t\t\t\t\t\tsize = 2;\n\t\t\t\t\t\t\t\t} else if (norm < 7.5) {\n\t\t\t\t\t\t\t\t\tsize = 5;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsize = 10;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsize *= magn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// minimum size for years is 1\n\n\t\t\t\t\t\t\tif (size < 1) {\n\t\t\t\t\t\t\t\tsize = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\taxis.tickSize = opts.tickSize || [size, unit];\n\t\t\t\t\t\tvar tickSize = axis.tickSize[0];\n\t\t\t\t\t\tunit = axis.tickSize[1];\n\n\t\t\t\t\t\tvar step = tickSize * timeUnitSize[unit];\n\n\t\t\t\t\t\tif (unit == \"second\") {\n\t\t\t\t\t\t\td.setSeconds(floorInBase(d.getSeconds(), tickSize));\n\t\t\t\t\t\t} else if (unit == \"minute\") {\n\t\t\t\t\t\t\td.setMinutes(floorInBase(d.getMinutes(), tickSize));\n\t\t\t\t\t\t} else if (unit == \"hour\") {\n\t\t\t\t\t\t\td.setHours(floorInBase(d.getHours(), tickSize));\n\t\t\t\t\t\t} else if (unit == \"month\") {\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), tickSize));\n\t\t\t\t\t\t} else if (unit == \"quarter\") {\n\t\t\t\t\t\t\td.setMonth(3 * floorInBase(d.getMonth() / 3,\n\t\t\t\t\t\t\t\ttickSize));\n\t\t\t\t\t\t} else if (unit == \"year\") {\n\t\t\t\t\t\t\td.setFullYear(floorInBase(d.getFullYear(), tickSize));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// reset smaller components\n\n\t\t\t\t\t\td.setMilliseconds(0);\n\n\t\t\t\t\t\tif (step >= timeUnitSize.minute) {\n\t\t\t\t\t\t\td.setSeconds(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.hour) {\n\t\t\t\t\t\t\td.setMinutes(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.day) {\n\t\t\t\t\t\t\td.setHours(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.day * 4) {\n\t\t\t\t\t\t\td.setDate(1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.month * 2) {\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), 3));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.quarter * 2) {\n\t\t\t\t\t\t\td.setMonth(floorInBase(d.getMonth(), 6));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (step >= timeUnitSize.year) {\n\t\t\t\t\t\t\td.setMonth(0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar carry = 0;\n\t\t\t\t\t\tvar v = Number.NaN;\n\t\t\t\t\t\tvar prev;\n\n\t\t\t\t\t\tdo {\n\n\t\t\t\t\t\t\tprev = v;\n\t\t\t\t\t\t\tv = d.getTime();\n\t\t\t\t\t\t\tticks.push(v);\n\n\t\t\t\t\t\t\tif (unit == \"month\" || unit == \"quarter\") {\n\t\t\t\t\t\t\t\tif (tickSize < 1) {\n\n\t\t\t\t\t\t\t\t\t// a bit complicated - we'll divide the\n\t\t\t\t\t\t\t\t\t// month/quarter up but we need to take\n\t\t\t\t\t\t\t\t\t// care of fractions so we don't end up in\n\t\t\t\t\t\t\t\t\t// the middle of a day\n\n\t\t\t\t\t\t\t\t\td.setDate(1);\n\t\t\t\t\t\t\t\t\tvar start = d.getTime();\n\t\t\t\t\t\t\t\t\td.setMonth(d.getMonth() +\n\t\t\t\t\t\t\t\t\t\t(unit == \"quarter\" ? 3 : 1));\n\t\t\t\t\t\t\t\t\tvar end = d.getTime();\n\t\t\t\t\t\t\t\t\td.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);\n\t\t\t\t\t\t\t\t\tcarry = d.getHours();\n\t\t\t\t\t\t\t\t\td.setHours(0);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\td.setMonth(d.getMonth() +\n\t\t\t\t\t\t\t\t\t\ttickSize * (unit == \"quarter\" ? 3 : 1));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (unit == \"year\") {\n\t\t\t\t\t\t\t\td.setFullYear(d.getFullYear() + tickSize);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\td.setTime(v + step);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (v < axis.max && v != prev);\n\n\t\t\t\t\t\treturn ticks;\n\t\t\t\t\t};\n\n\t\t\t\t\taxis.tickFormatter = function (v, axis) {\n\n\t\t\t\t\t\tvar d = dateGenerator(v, axis.options);\n\n\t\t\t\t\t\t// first check global format\n\n\t\t\t\t\t\tif (opts.timeformat != null) {\n\t\t\t\t\t\t\treturn formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// possibly use quarters if quarters are mentioned in\n\t\t\t\t\t\t// any of these places\n\n\t\t\t\t\t\tvar useQuarters = (axis.options.tickSize &&\n\t\t\t\t\t\t\t\taxis.options.tickSize[1] == \"quarter\") ||\n\t\t\t\t\t\t\t(axis.options.minTickSize &&\n\t\t\t\t\t\t\t\taxis.options.minTickSize[1] == \"quarter\");\n\n\t\t\t\t\t\tvar t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];\n\t\t\t\t\t\tvar span = axis.max - axis.min;\n\t\t\t\t\t\tvar suffix = (opts.twelveHourClock) ? \" %p\" : \"\";\n\t\t\t\t\t\tvar hourCode = (opts.twelveHourClock) ? \"%I\" : \"%H\";\n\t\t\t\t\t\tvar fmt;\n\n\t\t\t\t\t\tif (t < timeUnitSize.minute) {\n\t\t\t\t\t\t\tfmt = hourCode + \":%M:%S\" + suffix;\n\t\t\t\t\t\t} else if (t < timeUnitSize.day) {\n\t\t\t\t\t\t\tif (span < 2 * timeUnitSize.day) {\n\t\t\t\t\t\t\t\tfmt = hourCode + \":%M\" + suffix;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfmt = \"%b %d \" + hourCode + \":%M\" + suffix;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (t < timeUnitSize.month) {\n\t\t\t\t\t\t\tfmt = \"%b %d\";\n\t\t\t\t\t\t} else if ((useQuarters && t < timeUnitSize.quarter) ||\n\t\t\t\t\t\t\t(!useQuarters && t < timeUnitSize.year)) {\n\t\t\t\t\t\t\tif (span < timeUnitSize.year) {\n\t\t\t\t\t\t\t\tfmt = \"%b\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfmt = \"%b %Y\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (useQuarters && t < timeUnitSize.year) {\n\t\t\t\t\t\t\tif (span < timeUnitSize.year) {\n\t\t\t\t\t\t\t\tfmt = \"Q%q\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfmt = \"Q%q %Y\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfmt = \"%Y\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);\n\n\t\t\t\t\t\treturn rt;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t$.plot.plugins.push({\n\t\tinit: init,\n\t\toptions: options,\n\t\tname: 'time',\n\t\tversion: '1.0'\n\t});\n\n\t// Time-axis support used to be in Flot core, which exposed the\n\t// formatDate function on the plot object.  Various plugins depend\n\t// on the function, so we need to re-expose it here.\n\n\t$.plot.formatDate = formatDate;\n\t$.plot.dateGenerator = dateGenerator;\n\n})(jQuery);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/jquery-flot/jquery.flot.time.js\n// module id = 13\n// module chunks = 0","'use strict';\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var mod = { };\n\n    var known_hosts_path = \"/etc/ssh/ssh_known_hosts\";\n    /*\n     * We share the Machines state between multiple frames. Only\n     * one frame has the job of loading the state, usually index.js\n     * The Loader code below does all the loading.\n     *\n     * The data is stored in sessionStorage in a JSON object, like this\n     * {\n     *    content: name → info dict from bridge's /machines Machines property\n     *    overlay: extra data to augment and override on top of content\n     * }\n     *\n     * This uses sessionStorage rather than cockpit.sessionStorage\n     * because we don't ever want to write unprefixed keys.\n     */\n\n    var key = cockpit.sessionStorage.prefixedKey(\"v2-machines.json\");\n    var session_prefix = cockpit.sessionStorage.prefixedKey(\"v1-session-machine\");\n\n    function generate_session_key(host) {\n        return session_prefix + \"/\" + host;\n    }\n\n    function Machines() {\n        var self = this;\n\n        var flat = null;\n        self.ready = false;\n\n        /* parsed machine data */\n        var machines = { };\n\n        /* Data shared between Machines() instances */\n        var last = {\n            content: null,\n            overlay: {\n                localhost: {\n                    visible: true,\n                    manifests: cockpit.manifests\n                }\n            }\n        };\n\n        function storage(ev) {\n            if (ev.key === key && ev.storageArea === window.sessionStorage)\n                refresh(JSON.parse(ev.newValue));\n        }\n\n        window.addEventListener(\"storage\", storage);\n\n        window.setTimeout(function() {\n            var value = window.sessionStorage.getItem(key);\n            if (!self.ready && value)\n                refresh(JSON.parse(value));\n        });\n\n        var timeout = null;\n\n        function sync(machine, values, overlay) {\n            var desired = $.extend({ }, values || { }, overlay || { });\n            var prop;\n            for (prop in desired) {\n                if (machine[prop] !== desired[prop])\n                    machine[prop] = desired[prop];\n            }\n            for (prop in machine) {\n                if (machine[prop] !== desired[prop])\n                    delete machine[prop];\n            }\n            return machine;\n        }\n\n        function refresh(shared, push) {\n            if (!shared)\n                return;\n\n            var emit_ready = !self.ready;\n\n            self.ready = true;\n            last = shared;\n            flat = null;\n\n            if (push && !timeout) {\n                timeout = window.setTimeout(function() {\n                    timeout = null;\n                    window.sessionStorage.setItem(key, JSON.stringify(last));\n                }, 10);\n            }\n\n            var host, hosts = { };\n            var content = shared.content || { };\n            var overlay = shared.overlay || { };\n            for (host in content)\n                hosts[host] = true;\n            for (host in overlay)\n                hosts[host] = true;\n\n            var events = [];\n\n            var machine, application;\n            for (host in hosts) {\n                var old_machine = machines[host] || { };\n                var old_conns = old_machine.connection_string;\n\n                /* Invert logic for color, always respect what's on disk */\n                if (content[host] && content[host].color && overlay[host])\n                    delete overlay[host].color;\n\n                machine = sync(old_machine, content[host], overlay[host]);\n\n                /* Fill in defaults */\n                machine.key = host;\n                if (!machine.address)\n                    machine.address = host;\n\n                machine.connection_string = self.generate_connection_string(machine.user,\n                                                                            machine.port,\n                                                                            machine.address);\n\n                if (!machine.label) {\n                    if (host == \"localhost\" || host == \"localhost.localdomain\") {\n                        application = cockpit.transport.application();\n                        if (application.indexOf('cockpit+=') === 0)\n                            machine.label = application.replace('cockpit+=', '');\n                        else\n                            machine.label = window.location.hostname;\n                    } else {\n                        machine.label = host;\n                    }\n                }\n                if (!machine.avatar)\n                    machine.avatar = \"../shell/images/server-small.png\";\n\n                events.push([host in machines ? \"updated\" : \"added\",\n                            [machine, host, old_conns]]);\n                machines[host] = machine;\n            }\n\n            /* Remove any lost hosts */\n            for (host in machines) {\n                if (!(host in hosts)) {\n                    machine = machines[host];\n                    delete machines[host];\n                    delete overlay[host];\n                    events.push([\"removed\", [machine, host]]);\n                }\n            }\n\n            /* Fire off all events */\n            var i, sel = $(self), len = events.length;\n            for (i = 0; i < len; i++)\n                sel.triggerHandler(events[i][0], events[i][1]);\n            if (emit_ready)\n                $(self).triggerHandler(\"ready\");\n        }\n\n        function update_session_machine(machine, host, values) {\n            /* We don't save the whole machine object */\n            var skey = generate_session_key(host);\n            var data = $.extend({}, machine, values);\n            window.sessionStorage.setItem(skey, JSON.stringify(data));\n            self.overlay(host, values);\n            return cockpit.when([]);\n        }\n\n        function update_saved_machine(host, values) {\n            // wrap values in variants for D-Bus call; at least values.port can\n            // be int or string, so stringify everything but the \"visible\" boolean\n            var values_variant = {};\n            for (var prop in values)\n                if (values[prop] !== null) {\n                    if (prop == \"visible\")\n                        values_variant[prop] = cockpit.variant('b', values[prop]);\n                    else\n                        values_variant[prop] = cockpit.variant('s', values[prop].toString());\n                }\n\n            // FIXME: investigate re-using the proxy from Loader (runs in different frame/scope)\n            var bridge = cockpit.dbus(null, { bus: \"internal\", \"superuser\": \"try\" });\n            var mod = bridge.call(\"/machines\", \"cockpit.Machines\", \"Update\", [ \"99-webui.json\", host, values_variant ])\n                .done(function() {\n                    var prop, over = { };\n                    for (prop in values)\n                        over[prop] = null;\n                    self.overlay(host, over);\n                })\n                .fail(function(error) {\n                    console.error(\"failed to call cockpit.Machines.Update(): \", error);\n                });\n\n            return mod;\n        }\n\n        self.add_key = function(host_key) {\n            var known_hosts = cockpit.file(known_hosts_path, { superuser: \"try\" });\n            return known_hosts\n                .modify(function(data) {\n                    if (!data)\n                        data = \"\";\n\n                    return data + \"\\n\" + host_key;\n                })\n                .always(function() {\n                    known_hosts.close();\n                });\n        };\n\n        self.add = function add(connection_string, color) {\n            var values = self.split_connection_string(connection_string);\n            var host = values['address'];\n\n            values = $.extend({\n                        visible: true,\n                        color: color || self.unused_color(),\n                    }, values);\n\n            var machine = self.lookup(host);\n            if (machine)\n                machine.on_disk = true;\n\n            return self.change(values['address'], values);\n        };\n\n        self.unused_color = function unused_color() {\n            var i, len = mod.colors.length;\n            for (i = 0; i < len; i++) {\n                if (!color_in_use(mod.colors[i]))\n                    return mod.colors[i];\n            }\n            return \"gray\";\n        };\n\n        function color_in_use(color) {\n            var key, machine, norm = mod.colors.parse(color);\n            for (key in machines) {\n                machine = machines[key];\n                if (machine.color && mod.colors.parse(machine.color) == norm)\n                    return true;\n            }\n            return false;\n        }\n\n        function merge(item, values) {\n            for (var prop in values) {\n                if (values[prop] === null)\n                    delete item[prop];\n                else\n                    item[prop] = values[prop];\n            }\n        }\n\n        self.change = function change(host, values) {\n            var mod, hostnamed, call;\n            var machine = self.lookup(host);\n\n            if (values.label) {\n\n                var conn_to = host;\n                if (machine)\n                    conn_to = machine.connection_string;\n\n                if (!machine || machine.label !== values.label) {\n                    hostnamed = cockpit.dbus(\"org.freedesktop.hostname1\", { host: conn_to });\n                    call = hostnamed.call(\"/org/freedesktop/hostname1\", \"org.freedesktop.hostname1\",\n                                          \"SetPrettyHostname\", [ values.label, true ])\n                        .always(function() {\n                            hostnamed.close();\n                        })\n                        .fail(function(ex) {\n                            console.warn(\"couldn't set pretty host name: \" + ex);\n                        });\n                }\n            }\n\n            if (machine && !machine.on_disk)\n                mod = update_session_machine(machine, host, values);\n            else\n                mod = update_saved_machine(host, values);\n\n            if (call)\n                return cockpit.all(call, mod);\n\n            return mod;\n        };\n\n        self.data = function data(content) {\n            var host, changes = {};\n\n            for (host in content) {\n                changes[host] = $.extend({ }, last.overlay[host] || { });\n                merge(changes[host], { on_disk: true });\n            }\n\n            /* It's a full reload, so data not\n             * present is no longer from disk\n             */\n            for (host in machines) {\n                if (content && !content[host]) {\n                    changes[host] = $.extend({ }, last.overlay[host] || { });\n                    merge(changes[host], { on_disk: null });\n                }\n            }\n\n            refresh({ content: content,\n                      overlay: $.extend({ }, last.overlay, changes) }, true);\n        };\n\n        self.overlay = function overlay(host, values) {\n            var changes = { };\n            changes[host] = $.extend({ }, last.overlay[host] || { });\n            merge(changes[host], values);\n            refresh({\n                content: last.content,\n                overlay: $.extend({ }, last.overlay, changes)\n            }, true);\n        };\n\n        Object.defineProperty(self, \"list\", {\n            enumerable: true,\n            get: function get() {\n                var key;\n                if (!flat) {\n                    flat = [];\n                    for (key in machines) {\n                        if (machines[key].visible)\n                            flat.push(machines[key]);\n                    }\n                    flat.sort(function(m1, m2) {\n                        return m1.label.localeCompare(m2.label);\n                    });\n                }\n                return flat;\n            }\n        });\n\n        Object.defineProperty(self, \"addresses\", {\n            enumerable: true,\n            get: function get() {\n                return Object.keys(machines);\n            }\n        });\n\n        self.lookup = function lookup(address) {\n            var parts = self.split_connection_string(address);\n            return machines[parts.address || \"localhost\"] || null;\n        };\n\n        self.generate_connection_string = function (user, port, addr) {\n            var address = addr;\n            if (user)\n                address = user + \"@\" + address;\n\n            if (port)\n                address = address + \":\" + port;\n\n            return address;\n        };\n\n        self.split_connection_string = function(conn_to) {\n            var parts = {};\n            var user_spot = -1;\n            var port_spot = -1;\n\n            if (conn_to) {\n                user_spot = conn_to.lastIndexOf('@');\n                port_spot = conn_to.lastIndexOf(':');\n            }\n\n            if (user_spot > 0) {\n                parts.user = conn_to.substring(0, user_spot);\n                conn_to = conn_to.substring(user_spot+1);\n                port_spot = conn_to.lastIndexOf(':');\n            }\n\n            if (port_spot > -1) {\n                var port = parseInt(conn_to.substring(port_spot+1), 10);\n                if (!isNaN(port)) {\n                    parts.port = port;\n                    conn_to = conn_to.substring(0, port_spot);\n                }\n            }\n\n            parts.address = conn_to;\n            return parts;\n        };\n\n        self.close = function close() {\n            window.removeEventListener(\"storage\", storage);\n        };\n    }\n\n    function Loader(machines, session_only) {\n        var self = this;\n\n        /* Have we loaded from cockpit session */\n        var session_loaded = false;\n\n        /* File we are watching */\n        var file;\n\n        /* echo channels to each machine */\n        var channels = { };\n\n        /* hostnamed proxies to each machine, if hostnamed available */\n        var proxies = { };\n\n        /* clients for the bridge D-Bus API */\n        var bridge_dbus = { };\n\n        function process_session_key(key, value) {\n            var host, values, machine;\n            var parts = key.split(\"/\");\n            if (parts[0] == session_prefix &&\n                parts.length === 2) {\n                    host = parts[1];\n                    if (value) {\n                        values = JSON.parse(value);\n                        machine = machines.lookup(host);\n                        if (!machine || !machine.on_disk)\n                            machines.overlay(host, values);\n                        else if (!machine.visible)\n                            machines.change(host, { visible: true });\n                        self.connect(host);\n                    }\n            }\n        }\n\n        function load_from_session_storage() {\n            var i;\n            session_loaded = true;\n            for (i = 0; i < window.sessionStorage.length; i++) {\n                var k = window.sessionStorage.key(i);\n                process_session_key(k, window.sessionStorage.getItem(k));\n            }\n        }\n\n        function process_session_machines(ev) {\n            if (ev.storageArea === window.sessionStorage)\n                process_session_key(ev.key || \"\", ev.newValue);\n        }\n        window.addEventListener(\"storage\", process_session_machines);\n\n        function state(host, value, problem) {\n            var values = { state: value, problem: problem };\n            if (value == \"connected\") {\n                values.restarting = false;\n            } else if (problem) {\n                values.manifests = null;\n                values.checksum = null;\n            }\n            machines.overlay(host, values);\n        }\n\n        $(machines).on(\"added\", updated);\n        $(machines).on(\"updated\", updated);\n        $(machines).on(\"removed\", removed);\n\n        function updated(ev, machine, host, old_conns) {\n            if (!machine) {\n                machine = machines.lookup(host);\n                if (!machine)\n                    return;\n            }\n\n            var props = proxies[host];\n            if (!props || !props.valid)\n                props = { };\n\n            var overlay = { };\n\n            if (!machine.color)\n                overlay.color = machines.unused_color();\n\n            var label = props.PrettyHostname || props.StaticHostname;\n            if (label && label !== machine.label)\n                overlay.label = label;\n\n            var os = props.OperatingSystemPrettyName;\n            if (os && os != machine.os)\n                overlay.os = props.OperatingSystemPrettyName;\n\n            if (!$.isEmptyObject(overlay))\n                machines.overlay(host, overlay);\n\n            /* Don't automatically reconnect failed machines */\n            if (machine.visible) {\n                if (old_conns && machine.connection_string != old_conns) {\n                    cockpit.kill(old_conns);\n                    self.disconnect(host);\n                    self.connect(host);\n                } else if (!machine.problem) {\n                    self.connect(host);\n                }\n            } else {\n                self.disconnect(host);\n            }\n        }\n\n        function removed(ev, machine, host) {\n            self.disconnect(host);\n        }\n\n        self.connect = function connect(host) {\n            var machine = machines.lookup(host);\n            if (!machine)\n                return;\n\n            var channel = channels[host];\n            if (channel)\n                return;\n\n            var options = {\n                host: machine.connection_string,\n                payload: \"echo\"\n            };\n\n            if (!machine.on_disk && machine.host_key) {\n                options['temp-session'] = false; /* Compatibility option */\n                options['session'] = 'shared';\n                options['host-key'] = machine.host_key;\n                options['unknown-host'] = \"1\";\n            }\n\n            channel = cockpit.channel(options);\n            channels[host] = channel;\n\n            var local = host === \"localhost\";\n\n            /* Request is null, and message is true when connected */\n            var request = null;\n            var open = local;\n            var problem = null;\n\n            var url;\n            if (!machine.manifests) {\n                if (machine.checksum)\n                    url = \"../../\" + machine.checksum + \"/manifests.json\";\n                else\n                    url = \"../../@\" + encodeURI(machine.connection_string) + \"/manifests.json\";\n            }\n\n            function whirl() {\n                if (!request && open)\n                    state(host, \"connected\", null);\n                else if (!problem)\n                    state(host, \"connecting\", null);\n            }\n\n            /* Here we load the machine manifests, and expect them before going to \"connected\" */\n            function request_manifest() {\n                request = $.ajax({ url: url, dataType: \"json\", cache: true})\n                    .done(function(manifests) {\n                        var overlay = { manifests: manifests };\n                        var etag = request.getResponseHeader(\"ETag\");\n                        if (etag) /* and remove quotes */\n                            overlay.checksum = etag.replace(/^\"(.+)\"$/, '$1');\n                        machines.overlay(host, overlay);\n                    })\n                    .fail(function(ex) {\n                        console.warn(\"failed to load manifests from \" + machine.connection_string + \": \" + ex);\n                    })\n                    .always(function() {\n                        request = null;\n                        whirl();\n                    });\n            }\n\n            /* Try to get change notifications via the internal\n               /packages D-Bus interface of the bridge.  Not all\n               bridges support this API, so we still get the first\n               version of the manifests via HTTP in request_manifest.\n            */\n\n            function watch_manifests() {\n                var dbus = cockpit.dbus(null, { bus: \"internal\",\n                                                host: machine.connection_string\n                                              });\n                bridge_dbus[host] = dbus;\n                dbus.subscribe({ path: \"/packages\",\n                                 interface: \"org.freedesktop.DBus.Properties\",\n                                 member: \"PropertiesChanged\" },\n                               function (path, iface, mamber, args) {\n                                   if (args[0] == \"cockpit.Packages\") {\n                                       if (args[1][\"Manifests\"]) {\n                                           var manifests = JSON.parse(args[1][\"Manifests\"].v);\n                                           machines.overlay(host, { manifests: manifests });\n                                       }\n                                   }\n                               });\n            }\n\n            function request_hostname() {\n                if (!machine.static_hostname) {\n                    var proxy = cockpit.dbus(\"org.freedesktop.hostname1\",\n                                             { host: machine.connection_string }).proxy();\n                    proxies[host] = proxy;\n                    proxy.wait(function() {\n                        $(proxy).on(\"changed\", function() {\n                            updated(null, null, host);\n                        });\n                        updated(null, null, host);\n                    });\n                }\n            }\n\n            /* Send a message to the server and get back a message once connected */\n            if (!local) {\n                channel.send(\"x\");\n\n                $(channel)\n                    .on(\"message\", function() {\n                        open = true;\n                        if (url)\n                            request_manifest();\n                        watch_manifests();\n                        request_hostname();\n                        whirl();\n                    })\n                .on(\"close\", function(ev, options) {\n                    var m = machines.lookup(host);\n                    open = false;\n                    // reset to clean state when removing machine (orderly disconnect), otherwise mark as failed\n                    if (!options.problem && m && !m.visible)\n                        state(host, null, null);\n                    else\n                        state(host, \"failed\", options.problem || \"disconnected\");\n                    if (m && m.restarting) {\n                        window.setTimeout(function() {\n                            self.connect(host);\n                        }, 10000);\n                    }\n                    self.disconnect(host);\n                });\n            } else {\n                if (url)\n                    request_manifest();\n                watch_manifests();\n                request_hostname();\n            }\n\n            /* In case already ready, for example when local */\n            whirl();\n        };\n\n        self.disconnect = function disconnect(host) {\n            if (host === \"localhost\")\n                return;\n\n            var channel = channels[host];\n            delete channels[host];\n            if (channel) {\n                channel.close();\n                $(channel).off();\n            }\n\n            var proxy = proxies[host];\n            delete proxies[host];\n            if (proxy) {\n                proxy.client.close();\n                $(proxy).off();\n            }\n\n            var dbus = bridge_dbus[host];\n            delete bridge_dbus[host];\n            if (dbus) {\n                dbus.close();\n            }\n        };\n\n        self.expect_restart = function expect_restart(host) {\n            var parts = machines.split_connection_string(host);\n            machines.overlay(parts.address, { restarting: true,\n                                              problem: null });\n        };\n\n        self.close = function close() {\n            $(machines).off(\"added\", updated);\n            $(machines).off(\"changed\", updated);\n            $(machines).off(\"removed\", removed);\n            machines = null;\n\n            if (file)\n                file.close();\n            file = null;\n\n            window.removeEventListener(\"storage\", process_session_machines);\n            var hosts = Object.keys(channels);\n            hosts.forEach(self.disconnect);\n        };\n\n        if (!session_only) {\n            var proxy = cockpit.dbus(null, { bus: \"internal\" }).proxy(\"cockpit.Machines\", \"/machines\");\n            $(proxy).on(\"changed\", function(data) {\n                // unwrap variants from D-Bus call\n                var wrapped = proxy.Machines;\n                var data_unwrap = {};\n                var host_props;\n                for (var host in wrapped) {\n                    host_props = {};\n                    for (var prop in wrapped[host])\n                        host_props[prop] = wrapped[host][prop].v;\n                    data_unwrap[host] = host_props;\n                }\n\n                machines.data(data_unwrap);\n                if (!session_loaded)\n                    load_from_session_storage();\n            });\n        } else {\n            load_from_session_storage();\n            machines.data({});\n        }\n    }\n\n    mod.instance = function instance(loader) {\n        return new Machines();\n    };\n\n    mod.loader = function loader(machines, session_only) {\n        return new Loader(machines, session_only);\n    };\n\n    mod.colors = [\n        \"#0099d3\",\n        \"#67d300\",\n        \"#d39e00\",\n        \"#d3007c\",\n        \"#00d39f\",\n        \"#00d1d3\",\n        \"#00618a\",\n        \"#4c8a00\",\n        \"#8a6600\",\n        \"#9b005b\",\n        \"#008a55\",\n        \"#008a8a\",\n        \"#00b9ff\",\n        \"#7dff00\",\n        \"#ffbe00\",\n        \"#ff0096\",\n        \"#00ffc0\",\n        \"#00fdff\",\n        \"#023448\",\n        \"#264802\",\n        \"#483602\",\n        \"#590034\",\n        \"#024830\",\n        \"#024848\"\n    ];\n\n    mod.colors.parse = function parse_color(input) {\n        var div = document.createElement('div');\n        div.style.color = input;\n        var style = window.getComputedStyle(div, null);\n        return style.getPropertyValue(\"color\") || div.style.color;\n    };\n\n    mod.known_hosts_path = known_hosts_path;\n\n    cockpit.transport.wait(function() {\n        var caps = cockpit.transport.options.capabilities || [];\n        /* If cockpit-ws is handling ssh, check for each capability. Otherwise\n         * the version is new enough that is has them all */\n        if ($.inArray(\"ssh\", caps) > -1) {\n            mod.allow_connection_string = $.inArray(\"connection-string\", caps) != -1;\n            mod.has_auth_results = $.inArray(\"auth-method-results\", caps) != -1;\n            known_hosts_path = \"/var/lib/cockpit/known_hosts\";\n            mod.known_hosts_path = known_hosts_path;\n            console.debug(\"Running against legacy ws with ssh, using legacy file\", known_hosts_path);\n        } else {\n            mod.allow_connection_string = true;\n            mod.has_auth_results = true;\n        }\n    });\n\n    module.exports = mod;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/machines.js\n// module id = 14\n// module chunks = 0","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2015 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var mustache = require(\"mustache\");\n\n    var machines = require(\"machines\");\n    var credentials = require(\"credentials\");\n\n    var add_tmpl = require(\"raw!machine-add.html\");\n    var auth_failed_tmpl = require(\"raw!machine-auth-failed.html\");\n    var change_auth_tmpl = require(\"raw!machine-change-auth.html\");\n    var change_port_tmpl = require(\"raw!machine-change-port.html\");\n    var color_picker_tmpl = require(\"raw!machine-color-picker.html\");\n    var invalid_hostkey_tmpl = require(\"raw!machine-invalid-hostkey.html\");\n    var not_supported_tmpl = require(\"raw!machine-not-supported.html\");\n    var sync_users_tmpl = require(\"raw!machine-sync-users.html\");\n    var unknown_hosts_tmpl = require(\"raw!machine-unknown-hostkey.html\");\n\n    var _ = cockpit.gettext;\n\n    var default_codes = {\n        \"no-cockpit\": \"not-supported\",\n        \"not-supported\": \"not-supported\",\n        \"protocol-error\": \"not-supported\",\n        \"authentication-not-supported\": \"change-auth\",\n        \"authentication-failed\": \"change-auth\",\n        \"no-forwarding\": \"change-auth\",\n        \"unknown-hostkey\": \"unknown-hostkey\",\n        \"invalid-hostkey\": \"invalid-hostkey\",\n        \"not-found\": \"add-machine\",\n        \"unknown-host\": \"unknown-host\",\n        \"sync-users\": \"sync-users\"\n    };\n\n    function translate_and_init(tmpl) {\n        var tmp = $(\"<div>\").append(tmpl);\n        tmp.find(\"[translatable=\\\"yes\\\"]\").each(function(i, e) {\n            var old = e.outerHTML;\n            var translated = cockpit.gettext(e.getAttribute(\"context\"), $(e).text());\n            $(e).removeAttr(\"translatable\").text(translated);\n            tmpl = tmpl.replace(old, e.outerHTML);\n        });\n        mustache.parse(tmpl);\n        return tmpl;\n    }\n\n    var templates = {\n        \"add-machine\" : translate_and_init(add_tmpl),\n        \"auth-failed\" : translate_and_init(auth_failed_tmpl),\n        \"change-auth\" : translate_and_init(change_auth_tmpl),\n        \"change-port\" : translate_and_init(change_port_tmpl),\n        \"color-picker\" : translate_and_init(color_picker_tmpl),\n        \"invalid-hostkey\" : translate_and_init(invalid_hostkey_tmpl),\n        \"not-supported\" : translate_and_init(not_supported_tmpl),\n        \"sync-users\" : translate_and_init(sync_users_tmpl),\n        \"unknown-hostkey\" : translate_and_init(unknown_hosts_tmpl),\n        \"unknown-host\" : translate_and_init(unknown_hosts_tmpl)\n    };\n\n    function full_address(machines_ins, address) {\n        var machine = machines_ins.lookup(address);\n        if (machine && machine.address != \"localhost\")\n            return machine.connection_string;\n\n        return address;\n    }\n\n    function Dialog(selector, address, machines_ins, codes) {\n        var self = this;\n\n        self.machines_ins = machines_ins;\n        self.codes = codes;\n        self.address = full_address(self.machines_ins, address);\n\n        var promise_callback = null;\n\n        var success_callback = null;\n\n        var current_template = null;\n        var current_instance = null;\n\n        function address_or_label() {\n            var machine = self.machines_ins.lookup(self.address);\n            var host = self.machines_ins.split_connection_string(self.address).address;\n            if (machine && machine.label)\n                host = machine.label;\n            return host;\n        }\n\n        function change_content(template, error_options) {\n            var old_instance = current_instance;\n\n            if (current_template === template)\n                return;\n\n            if (template == \"add-machine\")\n                current_instance = new AddMachine(self);\n            else if (template == \"sync-users\")\n                current_instance = new SyncUsers(self);\n            else if (template == \"unknown-hostkey\" || template == \"unknown-host\")\n                current_instance = new HostKey(self, template);\n            else if (template == \"invalid-hostkey\")\n                current_instance = new HostKey(self, template);\n            else if (template == \"change-auth\")\n                current_instance = new ChangeAuth(self);\n            else if (template == \"change-port\")\n                current_instance = new MachinePort(self);\n            else\n                current_instance = new Simple(self);\n\n            current_template = template;\n            current_instance.load(error_options);\n\n            if (old_instance && old_instance.close)\n                old_instance.close();\n            old_instance = null;\n        }\n\n        self.try_to_connect = function(address, options) {\n            var dfd = $.Deferred();\n            var conn_options = $.extend({ \"payload\": \"echo\",\n                                          \"host\": address },\n                                        options);\n\n            var machine = self.machines_ins.lookup(address);\n            if (machine && machine.host_key && !machine.on_disk) {\n                conn_options['temp-session'] = false; /* Compatiblity option */\n                conn_options['session'] = 'shared';\n                conn_options['host-key'] = machine.host_key;\n                conn_options['unknown-host'] = \"1\";\n            }\n            var client = cockpit.channel(conn_options);\n            client.send(\"x\");\n            $(client)\n               .on(\"message\", function() {\n                    $(client).off();\n                    client.close();\n                    dfd.resolve();\n                })\n                .on(\"close\", function(event, options) {\n                    dfd.reject(options);\n                });\n\n            return dfd.promise();\n        };\n\n        self.get_sel = function(child_selector) {\n            var ret_txt = selector;\n            if (child_selector)\n                ret_txt = ret_txt + \" \" + child_selector;\n            return $(ret_txt);\n        };\n\n        self.set_on_success = function (callback) {\n            success_callback = callback;\n        };\n\n        self.set_goal = function (callback) {\n            promise_callback = callback;\n        };\n\n        self.complete = function(val) {\n            if (success_callback)\n                success_callback(val);\n            else\n                $(selector).modal('hide');\n        };\n\n        self.render = function render(data, template) {\n            if (!template)\n                template = current_template;\n\n            var address_data = self.machines_ins.split_connection_string(self.address);\n            var context = $.extend({\n                'host' : address_or_label(),\n                'full_address' : self.address,\n                'context_title' : self.context_title,\n                'strong' : function() {\n                    return function(text, render) {\n                        return \"<strong>\" + render(text) + \"</strong>\";\n                    };\n                }\n            }, data, address_data);\n\n            var output = $(mustache.render(templates[template], context));\n            cockpit.translate(output);\n            self.get_sel(\".modal-content\").html(output);\n        };\n\n        self.render_error = function render_error(error) {\n            var template;\n            if (error.problem && error.command == \"close\")\n                template = self.codes[error.problem];\n\n            if (template && current_template !== template)\n                change_content(template, error);\n            else\n                $(selector).dialog(\"failure\", cockpit.message(error));\n        };\n\n        self.render_template = function render_template(template) {\n            change_content(template);\n        };\n\n        self.show = function () {\n            var sel = self.get_sel();\n            sel.on('hide.bs.modal', function () {\n                self.get_sel(\".model-content\").empty();\n            });\n            sel.modal('show');\n        };\n\n        self.run = function (promise, failure_callback) {\n            var dialog_dfd = $.Deferred();\n            var promise_funcs = [];\n\n            function next(i) {\n                promise_funcs[i]()\n                    .done(function(val) {\n                        i = i + 1;\n                        if (i < promise_funcs.length) {\n                            next(i);\n                        } else {\n                            dialog_dfd.resolve();\n                            self.complete(val);\n                        }\n                    })\n                    .fail(function(ex) {\n                        if (failure_callback)\n                            failure_callback(ex);\n                        else\n                            self.render_error(ex);\n                        dialog_dfd.reject(ex);\n                    });\n            }\n\n            promise_funcs.push(function() {\n                return promise;\n            });\n\n            self.get_sel().dialog(\"wait\", dialog_dfd.promise());\n            if (promise_callback)\n                promise_funcs.push(promise_callback);\n\n            next(0);\n        };\n    }\n\n    function is_method_supported(methods, method) {\n        var result = methods[method];\n        return result ? result != \"no-server-support\" : false;\n    }\n\n    function can_try_method(methods, method) {\n        if (is_method_supported(methods, method))\n            return method == 'password' || methods[method] != \"not-provided\";\n        return false;\n    }\n\n    function MachineColorPicker(machines_ins) {\n        var self = this;\n\n        self.render = function(selector, address, selected_color) {\n            var machine;\n\n            if (address && !selected_color) {\n                machine = machines_ins.lookup(address);\n                if (machine)\n                    selected_color = machine.color;\n            }\n\n            if (!selected_color)\n                selected_color = machines_ins.unused_color();\n\n            var part, colors = [];\n            for (var i = 0; i < machines.colors.length; i += 6) {\n                part = machines.colors.slice(i, i+6);\n                colors.push({\"list\" : part});\n            }\n\n            var text = mustache.render(templates[\"color-picker\"], { 'colors' : colors, });\n            $(selector).html(text);\n\n            $(\"#host-edit-color\", selector).css(\"background-color\", selected_color);\n            $(\".color-cell\", selector).each(function(index) {\n                $(this).css(\"background-color\", machines.colors[index]);\n            });\n\n            $('#host-edit-color-popover .popover-content .color-cell', selector)\n                .click(function() {\n                    var color = $(this).css('background-color');\n                    $('#host-edit-color', selector).css('background-color', color);\n                });\n\n            $(\"#host-edit-color\", selector).parent().\n                on('show.bs.dropdown', function () {\n                    var $div = $('#host-edit-color', selector);\n                    var $pop = $('#host-edit-color-popover', selector);\n                    var div_pos = $div.position();\n                    var div_width = $div.width();\n                    var div_height = $div.height();\n                    var pop_width = $pop.width();\n                    var pop_height = $pop.height();\n\n                    var top = div_pos.top - pop_height + 10;\n                    if (top < 0) {\n                        top = div_pos.top + div_height + 10;\n                        $pop.addClass(\"bottom\");\n                        $pop.removeClass(\"top\");\n                    } else {\n                        $pop.addClass(\"top\");\n                        $pop.removeClass(\"bottom\");\n                    }\n                    $pop.css('left', div_pos.left + (div_width - pop_width) / 2);\n                    $pop.css('top', top);\n                    $pop.show();\n                }).\n                on('hide.bs.dropdown', function () {\n                    $('#host-edit-color-popover', selector).hide();\n                });\n        };\n    }\n\n    function Simple(dialog) {\n        var self = this;\n\n        self.load = function() {\n            dialog.render();\n        };\n    }\n\n    function AddMachine(dialog) {\n        var self = this;\n        var color = null;\n        var selector = dialog.get_sel();\n        var run_error = null;\n\n        var invisible = dialog.machines_ins.addresses.filter(function(addr) {\n            var m = dialog.machines_ins.lookup(addr);\n            return !m || !m.visible;\n        });\n\n        function existing_error(address) {\n            var ex = null;\n            var machine = dialog.machines_ins.lookup(address);\n            if (machine && machine.visible && machine.on_disk) {\n                ex = new Error(_(\"This machine has already been added.\"));\n                ex.target = \"#add-machine-address\";\n            }\n            return ex;\n        }\n\n        function check_address(evt) {\n            var disabled = true;\n            var ex = null;\n\n            var addr = $('#add-machine-address').val();\n            var button = dialog.get_sel(\".btn-primary\");\n            if (addr === \"\") {\n                disabled = true;\n            } else if (!machines.allow_connection_string &&\n                       (addr.indexOf('@') > -1 || addr.indexOf(':') > -1)) {\n                ex = new Error(_(\"This version of cockpit-ws does not support connecting to a host with an alternate user or port\"));\n            } else if (addr.search(/\\s+/) === -1) {\n                ex = existing_error(addr);\n                if (!ex)\n                    disabled = false;\n            } else {\n                ex = new Error(_(\"The IP address or host name cannot contain whitespace.\"));\n            }\n\n            if (ex)\n                ex.target = \"#add-machine-address\";\n\n            if (run_error)\n                selector.dialog(\"failure\", run_error, ex);\n            else\n                selector.dialog(\"failure\", ex);\n\n            button.prop(\"disabled\", disabled);\n        }\n\n        function add_machine() {\n            run_error = null;\n            dialog.address = $('#add-machine-address').val();\n            color = machines.colors.parse($('#add-machine-color-picker #host-edit-color').css('background-color'));\n            if (existing_error(dialog.address))\n                return;\n\n            dialog.set_goal(function() {\n                var dfp = $.Deferred();\n                dialog.machines_ins.add(dialog.address, color)\n                    .done(dfp.resolve)\n                    .fail(function (ex) {\n                        var msg = cockpit.format(_(\"Failed to add machine: $0\"),\n                                                 cockpit.message(ex));\n                        dfp.reject(msg);\n                    });\n\n                return dfp.promise();\n            });\n\n            dialog.run(dialog.try_to_connect(dialog.address), function (ex) {\n                if (ex.problem == \"no-host\") {\n                    var host_id_port = dialog.address;\n                    var port_index = host_id_port.lastIndexOf(\":\");\n                    var port = \"22\";\n                    if (port_index === -1)\n                        host_id_port = dialog.address + \":22\";\n                    else\n                        port = host_id_port.substr(port_index + 1);\n                    ex.message = cockpit.format(_(\"Cockpit could not contact the given host $0. Make sure it has ssh running on port $1, or specify another port in the address.\"), host_id_port, port);\n                    ex = cockpit.message(ex);\n                    run_error = ex;\n                }\n                dialog.render_error(ex);\n            });\n        }\n\n        self.load = function() {\n            var manifest = cockpit.manifests[\"shell\"] || {};\n            var limit = parseInt(manifest[\"machine-limit\"], 10);\n            var color_picker = new MachineColorPicker(dialog.machines_ins);\n            if (!limit || isNaN(limit))\n                limit = 20;\n\n            dialog.render({\n                'nearlimit' : limit * 0.75 <= dialog.machines_ins.list.length,\n                'limit' : limit,\n                'placeholder' : _(\"Enter IP address or host name\"),\n                'options' : invisible,\n            });\n\n            var button = dialog.get_sel(\".btn-primary\");\n            button.on(\"click\", add_machine);\n\n            $(\"#add-machine-address\").on(\"keyup\", function (ev) {\n                if (ev.which === 13) {\n                    var disabled = button.prop('disabled');\n                    if (!disabled)\n                        add_machine();\n                }\n            });\n            $(\"#add-machine-address\").on(\"input focus\", check_address);\n            color_picker.render(\"#add-machine-color-picker\", dialog.address, color);\n            $(\"#add-machine-address\").focus();\n        };\n    }\n\n    function MachinePort(dialog) {\n        var self = this;\n\n        function change_port() {\n            var dfp = $.Deferred();\n            var parts = dialog.machines_ins.split_connection_string(dialog.address);\n            parts.port = $(\"#edit-machine-port\").val();\n            var address = dialog.machines_ins.generate_connection_string(parts.user,\n                                                                  parts.port,\n                                                                  parts.address);\n            function update_host(ex) {\n                dialog.address = address;\n                dialog.machines_ins.change(parts.address, { \"port\": parts.port })\n                    .done(function () {\n                        // We failed before so try to connect again\n                        // now that the machine is saved.\n                        if (ex) {\n                            dialog.try_to_connect(address)\n                                .done(dialog.complete)\n                                .fail(function (e) {\n                                    dfp.reject(e);\n                                });\n                        } else {\n                            dfp.resolve();\n                        }\n                    })\n                    .fail(function (ex) {\n                        var msg = cockpit.format(_(\"Failed to edit machine: $0\"),\n                                                 cockpit.message(ex));\n                        dfp.reject(msg);\n                    });\n            }\n\n            dialog.try_to_connect(address)\n                .done(function () {\n                    update_host();\n                })\n                .fail(function (ex) {\n                    /* any other error means progress, so save */\n                    if (ex.problem != 'no-host')\n                        update_host(ex);\n                    else\n                        dfp.reject(ex);\n                });\n\n            dialog.run(dfp.promise());\n        }\n\n        self.load = function() {\n            var machine = dialog.machines_ins.lookup(dialog.address);\n            if (!machine) {\n                dialog.get_sel().modal('hide');\n                return;\n            }\n\n            dialog.render({ 'port' : machine.port,\n                            'allow_connection_string' : machines.allow_connection_string });\n            if (machines.allow_connection_string)\n                dialog.get_sel(\".btn-primary\").on(\"click\", change_port);\n        };\n    }\n\n    function HostKey(dialog, problem) {\n        var self = this;\n        var error_options = null;\n        var key = null;\n        var allow_change = (problem == \"unknown-hostkey\" ||\n                            problem == \"unknown-host\");\n\n        function add_key() {\n            var q;\n            var machine = dialog.machines_ins.lookup(dialog.address);\n            if (!machine || machine.on_disk) {\n                q = dialog.machines_ins.add_key(key);\n            } else {\n                /* When machine isn't saved to disk\n                   don't save the key either */\n                q = dialog.machines_ins.change(dialog.address, {\n                    'host_key': key\n                });\n            }\n\n            var promise = q.then(function () {\n                var inner = dialog.try_to_connect(dialog.address);\n\n                inner.fail(function(ex) {\n                    if ((ex.problem == \"invalid-hostkey\" ||\n                        ex.problem == \"unknown-hostkey\") &&\n                        machine && !machine.on_disk) {\n                            dialog.machines_ins.change(dialog.address, {\n                                'host_key': null\n                            });\n                        }\n                    });\n\n                return inner;\n            });\n\n            dialog.run(promise);\n        }\n\n        function render() {\n            var promise = null;\n            var options = {};\n            var match_problem = problem;\n            var fp;\n            var path = machines.known_hosts_path;\n\n            if (error_options) {\n                key = error_options[\"host-key\"];\n                fp = error_options[\"host-fingerprint\"];\n                if (error_options[\"invalid-hostkey-file\"])\n                    path = error_options[\"invalid-hostkey-file\"];\n            }\n\n            dialog.render({\n                'context_title' : dialog.context_title,\n                'path' : path,\n                'key' : fp,\n                'key_host' : key ? key.split(' ')[0] : null,\n            });\n\n            if (!key) {\n                if (problem == \"unknown-host\") {\n                    options[\"session\"] = \"private\";\n                    match_problem = \"unknown-hostkey\";\n                }\n\n                promise = dialog.try_to_connect(dialog.address, options)\n                    .fail(function(ex) {\n                        if (ex.problem != match_problem) {\n                            dialog.render_error(ex);\n                        } else {\n                            error_options = ex;\n                            render();\n                        }\n                    })\n\n                    // Fixed already, just close\n                    .done(function (v) {\n                        dialog.complete(v);\n                    });\n\n                dialog.get_sel().dialog(\"wait\", promise);\n            } else if (allow_change) {\n                dialog.get_sel(\".btn-primary\").on(\"click\", add_key);\n            }\n        }\n\n        self.load = function(ex) {\n            error_options = ex;\n            render();\n        };\n    }\n\n    function ChangeAuth(dialog) {\n        var self = this;\n        var error_options = null;\n        var allows_password = false;\n        var keys = null;\n        var machine = dialog.machines_ins.lookup(dialog.address);\n\n        self.user = { };\n\n        function update_keys() {\n            var key_div = dialog.get_sel('.keys');\n\n            if (key_div) {\n                key_div.empty();\n                for (var id in keys.items) {\n                    var key = keys.items[id];\n                    if (key.loaded)\n                        key_div.append($(\"<div>\").text(key.name));\n                }\n            }\n        }\n\n        function login() {\n            var address;\n            var options = {};\n            var dfp = $.Deferred();\n            var user = $(\"#login-custom-user\").val();\n\n            var parts = dialog.machines_ins.split_connection_string(dialog.address);\n            parts.user = user;\n\n            address = dialog.machines_ins.generate_connection_string(parts.user,\n                                                              parts.port,\n                                                              parts.address);\n\n            if ($(\"#login-type\").val() != 'stored') {\n                options['password'] = $(\"#login-custom-password\").val();\n                options[\"session\"] = 'shared';\n                if (!user) {\n                    /* we don't want to save the default user for everyone\n                     * so we pass current user as an option, but make sure the\n                     * session isn't private\n                     */\n                    if (self.user && self.user.name)\n                        options[\"user\"] = self.user.name;\n                    options[\"temp-session\"] = false; /* Compatibility option */\n                }\n            }\n\n            dialog.try_to_connect(address, options)\n                .done(function () {\n                    dialog.address = address;\n                    if (machine) {\n                        dialog.machines_ins.change(machine.address, { \"user\" : user })\n                            .done(dfp.resolve)\n                            .fail(dfp.reject);\n                    } else {\n                        dfp.resolve();\n                    }\n                })\n                .fail(dfp.reject);\n\n            dialog.run(dfp.promise());\n        }\n\n        function change_login_type(value) {\n            var stored = value != 'password';\n            var text = $(\"#login-type li[value=\" + value + \"]\").text();\n            $(\"#login-type button span\").text(text);\n            $(\"#login-available\").toggle(stored);\n            $(\"#login-diff-password\").toggle(!stored);\n        }\n\n        function render() {\n            var promise = null;\n            var template = \"change-auth\";\n            if (!machines.allow_connection_string || !machines.has_auth_results)\n                template = \"auth-failed\";\n\n            var methods = null;\n            var available = null;\n            var supported = null;\n\n            var machine_user = dialog.machines_ins.split_connection_string(dialog.address).user;\n            if (!machine_user && machine)\n                machine_user = machine.user;\n\n            if (error_options && machines.has_auth_results) {\n                supported = {};\n                available = {};\n\n                methods = error_options[\"auth-method-results\"];\n                if (methods) {\n                    allows_password = is_method_supported(methods, 'password');\n                    for (var method in methods) {\n                        if (can_try_method(methods, method)) {\n                            available[method] = true;\n                        }\n                    }\n                }\n\n                if ($.isEmptyObject(available))\n                    template = \"auth-failed\";\n            }\n\n            dialog.render({\n                'supported' : methods,\n                'available' : available,\n                'machine_user' : machine_user,\n                'user' : self.user ? self.user.name : \"\",\n                'allows_password' : allows_password,\n                'can_sync': !!dialog.codes['sync-users'],\n                'machines.allow_connection_string' : machines.allow_connection_string,\n                'sync_link' : function() {\n                    return function(text, render) {\n                        return '<a id=\"do-sync-users\">' + render(text) + \"</a>\";\n                    };\n                }\n            }, template);\n\n            if (methods === null && machines.has_auth_results) {\n                promise = dialog.try_to_connect(dialog.address)\n                    .fail(function(ex) {\n                        error_options = ex;\n                        render();\n                    })\n\n                    // Fixed already, just close\n                    .done(function (v) {\n                        dialog.complete(v);\n                    });\n\n                dialog.get_sel().dialog(\"wait\", promise);\n            } else if (!$.isEmptyObject(available)) {\n                $(\"#login-type li\").on('click', function() {\n                    change_login_type($(this).attr(\"value\"));\n                });\n                change_login_type($(\"#login-type li:first-child\").attr(\"value\"));\n                dialog.get_sel(\".btn-primary\").on(\"click\", login);\n                dialog.get_sel(\"a[data-content]\").popover();\n\n                update_keys();\n            }\n\n            dialog.get_sel(\"#do-sync-users\").on(\"click\", function () {\n                dialog.render_template(\"sync-users\");\n            });\n        }\n\n        self.load = function(ex) {\n            error_options = ex;\n            if (credentials) {\n                keys = credentials.keys_instance();\n                $(keys).on(\"changed\", update_keys);\n            }\n            cockpit.user()\n                .done(function (user) {\n                    self.user = user;\n                })\n                .always(function (user) {\n                    render();\n                });\n        };\n\n        self.close = function(ex) {\n            if (keys) {\n                $(keys).off();\n                keys.close();\n            }\n            keys = null;\n        };\n    }\n\n    function SyncUsers(dialog) {\n        var self = this;\n        var users = {};\n\n        var needs_auth = false;\n        var needs_root = false;\n        var methods = null;\n        var remote_options = { \"superuser\": true };\n\n        var perm_failed = null;\n\n        function load_users() {\n            var local = cockpit.dbus(null, { bus: \"internal\",\n                                             host: \"localhost\",\n                                             superuser: true });\n            $(local).on(\"close\", function(event, options) {\n                perm_failed = options;\n                render();\n            });\n\n            var proxy = local.proxy(\"cockpit.Setup\", \"/setup\");\n            proxy.wait(function () {\n                if (proxy.valid) {\n                    var blank = {\n                        \"t\" : \"(asas)\",\n                        \"v\" : [[], []]\n                    };\n\n                    proxy.Transfer(\"passwd1\", blank)\n                        .done(function(prepared) {\n                            var i, parts, name;\n                            var groups = prepared.v[1];\n\n                            for (i = 0; i < prepared.v[0].length; i++) {\n                                var raw = prepared.v[0][i];\n\n                                parts = raw.split(\":\");\n                                name = parts[0];\n\n                                users[name] = {\n                                    \"username\" : name,\n                                    \"name\" : parts[4] || name,\n                                    \"raw\" : raw,\n                                    \"groups\" : [],\n                                };\n                            }\n\n                            for (i = 0; i < groups.length; i++) {\n                                parts = groups[i].split(\":\");\n                                name = parts[0];\n                                var members = parts[parts.length - 1].split(\",\");\n                                for (var j = 0; j < members.length; j++) {\n                                    var u = members[j];\n                                    if (users[u])\n                                        users[u].groups.push(name);\n                                }\n                            }\n                        })\n                        .fail(function(ex) {\n                            ex.message = cockpit.gettext(ex.message);\n                            perm_failed = ex;\n                        })\n                        .always(function(ex) {\n                            $(local).off();\n                            local.close();\n                            render();\n                        });\n                }\n            });\n        }\n\n        function sync_users() {\n            var client = null;\n\n            var dfd = $.Deferred();\n            var promise = dfd.promise();\n\n            dialog.run(promise);\n\n            /* A successfull sync should close the dialog */\n            dialog.set_on_success(null);\n\n            promise.always(function () {\n                if (client) {\n                    $(client).off();\n                    client.close();\n                }\n            });\n\n            var options = { bus: \"internal\" };\n            if (needs_auth) {\n                options.user = $(\"#sync-username\").val();\n                options.password = $(\"#sync-password\").val();\n            }\n            $.extend(options, remote_options, { host: dialog.address });\n            client = cockpit.dbus(null, options);\n            $(client).on(\"close\", function(event, ex) {\n                dfd.reject(cockpit.message(ex));\n            });\n\n            var variant = {\n                \"t\" : \"(asas)\",\n                \"v\" : [[]],\n            };\n\n            var groups = {};\n            dialog.get_sel(\"input:checked\").each( function() {\n                var u = users[$(this).attr(\"name\")];\n                if (u) {\n                    variant.v[0].push(u.raw);\n                    for (var i = 0; i < u.groups.length; i++) {\n                        var group = u.groups[i];\n                        if (!groups[group])\n                            groups[group] = [];\n\n                        groups[group].push(u.username);\n                    }\n                }\n            });\n            variant.v.push(Object.keys(groups).map(function(k) {\n                return k + \":::\" + groups[k].join();\n            }));\n\n            /* We assume all cockpits support the 'passwd1' mechanism */\n            var proxy = client.proxy(\"cockpit.Setup\", \"/setup\");\n            proxy.wait(function() {\n                if (proxy.valid) {\n                    proxy.Commit(\"passwd1\", variant)\n                        .fail(function(ex) {\n                            ex.message = cockpit.gettext(ex.message);\n                            dfd.reject(ex);\n                        })\n                        .done(dfd.resolve);\n                }\n            });\n        }\n\n        function toggle_button() {\n            var any = dialog.get_sel(\"input:checked\").length > 0;\n            dialog.get_sel(\".btn-primary\").toggleClass(\"disabled\", !any);\n        }\n\n        function render() {\n            function formated_groups() {\n                /*jshint validthis:true */\n                if (this.groups)\n                    return this.groups.join(\", \");\n            }\n\n            /* assume password is allowed for backwards compatibility */\n            var allows_password = true;\n            var user_list = Object.keys(users).sort().map(function(v) {\n                return users[v];\n            });\n\n            if (machines.has_auth_results && methods)\n                allows_password = is_method_supported(methods, 'password');\n\n            var text = dialog.render({\n                'needs_auth' : needs_auth,\n                'needs_root' : needs_root,\n                'users' : user_list,\n                'perm_failed' : perm_failed ? cockpit.message(perm_failed) : null,\n                'allows_password' : allows_password,\n                'formated_groups': formated_groups,\n            });\n\n            dialog.get_sel(\".modal-content\").html(text);\n            dialog.get_sel(\".btn-primary\").on(\"click\", sync_users);\n            dialog.get_sel(\"input:checkbox\").on(\"change\", function() {\n                var name = $(this).attr(\"name\");\n                users[name].checked = $(this).is(':checked');\n                toggle_button();\n            });\n            toggle_button();\n        }\n\n        self.load = function(error_options) {\n            if (error_options)\n                methods = error_options['auth-method-results'];\n\n            render();\n            dialog.try_to_connect(dialog.address, remote_options).fail(function(ex) {\n                needs_auth = true;\n                if (ex.problem == \"access-denied\") {\n                    needs_root = true;\n                    if (!methods && machines.has_auth_results)\n                        /* TODO: We need to know if password auth is\n                         * supported but we only get that when the transport\n                         * closes. Passing an invalid username should\n                         * open new transport that fails.\n                         */\n                        dialog.try_to_connect(dialog.address, { \"user\" : \"1\" })\n                            .fail(function(ex) {\n                                methods = ex['auth-method-results'];\n                            })\n                            .always(render);\n                } else {\n                    methods = ex['auth-method-results'];\n                    render();\n                }\n            });\n            load_users();\n        };\n    }\n\n    function MachineDialogManager(machines_ins, codes) {\n        var self = this;\n\n        if (!codes)\n            codes = default_codes;\n\n        var color_picker = new MachineColorPicker(machines_ins);\n\n        self.troubleshoot = function(target_id, machine) {\n            var selector = \"#\" + target_id;\n            if (!machine || !machine.problem)\n                return;\n\n            var template = codes[machine.problem];\n            if (machine.problem == \"no-host\")\n                template = \"change-port\";\n\n            var dialog = new Dialog(selector, machine.address, machines_ins, codes);\n            dialog.render_template(template);\n            dialog.show();\n        };\n\n        self.needs_troubleshoot = function (machine) {\n            if (!machine || !machine.problem)\n                return false;\n\n            if (machine.problem == \"no-host\")\n                return true;\n\n            return codes[machine.problem] ? true : false;\n        };\n\n        self.render_dialog = function (template, target_id, address) {\n            var selector = \"#\" + target_id;\n            var dialog = new Dialog(selector, address, machines_ins, codes);\n            dialog.render_template(template);\n            dialog.show();\n        };\n\n        self.render_color_picker = function (selector, address) {\n            color_picker.render(selector, address);\n        };\n    }\n\n    module.exports = {\n        new_manager: function (machines_ins, codes) {\n            return new MachineDialogManager(machines_ins, codes);\n        }\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/machine-dialogs.js\n// module id = 15\n// module chunks = 0","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2015 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    require(\"listing.less\");\n    require(\"patterns\");\n\n    var lister = require(\"raw!credentials-ssh-private-keys.sh\");\n\n    var _ = cockpit.gettext;\n\n    function Keys() {\n        var self = this;\n\n        self.path = null;\n        self.items = { };\n\n        var watch = null;\n        var proc = null;\n        var timeout = null;\n\n        cockpit.user().done(function (user) {\n            self.path = user.home + '/.ssh';\n            refresh();\n        });\n\n        function refresh() {\n            if (watch === null) {\n                watch = cockpit.channel({ payload: \"fslist1\", path: self.path });\n                $(watch)\n                    .on(\"close\", function(ev, data) {\n                        $(watch).off();\n                        if (!data.problem || data.problem == \"not-found\") {\n                            watch = null; /* Watch again */\n                        } else {\n                            console.warn(\"couldn't watch \" + self.path + \": \" + (data.message || data.problem));\n                            watch = false; /* Don't watch again */\n                        }\n                    })\n                    .on(\"message\", function(ev, payload) {\n                        var item = JSON.parse(payload);\n                        var name = item.path;\n                        if (name && name.indexOf(\"/\") === -1 && name.slice(-4) === \".pub\") {\n                            if (item.event === \"present\" ||item.event === \"created\" ||\n                                item.event === \"changed\" || item.event === \"deleted\") {\n                                window.clearInterval(timeout);\n                                timeout = window.setTimeout(refresh, 100);\n                            }\n                        }\n                    });\n            }\n\n            if (proc)\n                return;\n\n            window.clearTimeout(timeout);\n            timeout = null;\n\n            proc = cockpit.script(lister, [ self.path ], { err: \"message\" })\n                .always(function() {\n                    proc = null;\n\n                    if (!timeout)\n                        timeout = window.setTimeout(refresh, 5000);\n                })\n                .done(function(data) {\n                    process(data);\n                })\n                .fail(function(ex) {\n                    console.warn(\"failed to list keys in home directory: \" + ex.message);\n                });\n        }\n\n        function process(data) {\n            var blocks = data.split('\\v');\n            var key, items = { };\n\n            /* First block is the data from ssh agent */\n            blocks[0].trim().split(\"\\n\").forEach(function(line) {\n                key = parse_key(line, items);\n                if (key)\n                    key.loaded = true;\n            });\n\n            /* Next come individual triples of blocks */\n            blocks.slice(1).forEach(function(block, i) {\n                switch(i % 3) {\n                case 0:\n                    key = parse_key(block, items);\n                    break;\n                case 1:\n                    if (key) {\n                        block = block.trim();\n                        if (block.slice(-4) === \".pub\")\n                            key.name = block.slice(0, -4);\n                        else\n                            key.name = block;\n                    }\n                    break;\n                case 2:\n                    if (key)\n                        parse_info(block, key);\n                    break;\n                }\n            });\n\n            self.items = items;\n            $(self).triggerHandler(\"changed\");\n        }\n\n        function parse_key(line, items) {\n            var parts = line.trim().split(\" \");\n            var id, type, comment;\n\n            /* SSHv1 keys */\n            if (!isNaN(parseInt(parts[0], 10))) {\n                id = parts[2];\n                type = \"RSA1\";\n                comment = parts.slice(3).join(\" \");\n\n            } else if (parts[0].indexOf(\"ssh-\") === 0) {\n                id = parts[1];\n                type = parts[0].substring(4).toUpperCase();\n                comment = parts.slice(2).join(\" \");\n            } else if (parts[0].indexOf(\"ecdsa-\") === 0) {\n                id = parts[1];\n                type = \"ECDSA\";\n                comment = parts.slice(2).join(\" \");\n            } else {\n                return;\n            }\n\n            var key = items[id];\n            if (!key)\n                key = items[id] = { };\n\n            key.type = type;\n            key.comment = comment;\n            key.data = line;\n            return key;\n        }\n\n        function parse_info(line, key) {\n            var parts = line.trim().split(\" \");\n\n            key.size = parseInt(parts[0], 10);\n            if (isNaN(key.size))\n                key.size = null;\n\n            key.fingerprint = parts[1];\n        }\n\n        self.change = function change(name, old_pass, new_pass, two_pass) {\n            var old_exps = [ /.*Enter old passphrase: $/ ];\n            var new_exps = [ /.*Enter new passphrase.*/, /.*Enter same passphrase again: $/ ];\n            var bad_exps = [ /.*failed: passphrase is too short.*/ ];\n\n            var dfd = $.Deferred();\n            var buffer = \"\";\n            var sent_new = false;\n            var failure = _(\"No such file or directory\");\n            var i;\n\n            if (new_pass !== two_pass) {\n                dfd.reject(new Error(_(\"The passwords do not match.\")));\n                return dfd.promise();\n            }\n\n            var proc;\n            var timeout = window.setTimeout(function() {\n                failure = _(\"Prompting via ssh-keygen timed out\");\n                proc.close(\"terminated\");\n            }, 10 * 1000);\n\n            proc = cockpit.spawn([\"ssh-keygen\", \"-p\", \"-f\", name],\n                    { pty: true, environ: [ \"LC_ALL=C\" ], err: \"out\", directory: self.path })\n                .always(function() {\n                    window.clearInterval(timeout);\n                })\n                .done(function() {\n                    dfd.resolve();\n                })\n                .fail(function(ex) {\n                    if (ex.constructor.name == \"ProcessError\")\n                        ex = new Error(failure);\n                    dfd.reject(ex);\n                })\n                .stream(function(data) {\n                    buffer += data;\n                    for (i = 0; i < old_exps.length; i++) {\n                        if (old_exps[i].test(buffer)) {\n                            buffer = \"\";\n                            failure = _(\"Old password not accepted\");\n                            this.input(old_pass + \"\\n\", true);\n                            return;\n                        }\n                    }\n\n                    for (i = 0; i < new_exps.length; i++) {\n                        if (new_exps[i].test(buffer)) {\n                            buffer = \"\";\n                            this.input(new_pass + \"\\n\", true);\n                            failure = _(\"Failed to change password\");\n                            sent_new = true;\n                            return;\n                        }\n                    }\n\n                    for (i = 0; sent_new && i < bad_exps.length; i++) {\n                        if (bad_exps[i].test(buffer)) {\n                            failure = _(\"New password was not accepted\");\n                            return;\n                        }\n                    }\n                });\n\n            return dfd.promise();\n        };\n\n        self.load = function(name, password) {\n            var ask_exp =  /.*Enter passphrase for .*/;\n            var perm_exp = /.*UNPROTECTED PRIVATE KEY FILE.*/;\n            var bad_exp = /.*Bad passphrase.*/;\n\n            var dfd = $.Deferred();\n            var buffer = \"\";\n            var output = \"\";\n            var failure = _(\"Not a valid private key\");\n\n            var proc;\n            var timeout = window.setTimeout(function() {\n                failure = _(\"Prompting via ssh-add timed out\");\n                proc.close(\"terminated\");\n            }, 10 * 1000);\n\n            proc = cockpit.spawn([\"ssh-add\", name],\n                    { pty: true, environ: [ \"LC_ALL=C\" ], err: \"out\", directory: self.path })\n                .always(function() {\n                    window.clearInterval(timeout);\n                })\n                .done(function() {\n                    refresh();\n                    dfd.resolve();\n                })\n                .fail(function(ex) {\n                    console.log(output);\n                    if (ex.constructor.name == \"ProcessError\")\n                        ex = new Error(failure);\n                    dfd.reject(ex);\n                })\n                .stream(function(data) {\n                    buffer += data;\n                    output += data;\n                    if (perm_exp.test(buffer)) {\n                        failure = _(\"Invalid file permissions\");\n                        buffer = \"\";\n                    } else if (ask_exp.test(buffer)) {\n                        buffer = \"\";\n                        failure = _(\"Password not accepted\");\n                        this.input(password + \"\\n\", true);\n                    } else if (bad_exp.test(buffer)) {\n                        buffer = \"\";\n                        this.input(\"\\n\", true);\n                    }\n                });\n\n            return dfd.promise();\n        };\n\n        self.unload = function unload(name) {\n            return cockpit.spawn([\"ssh-add\", \"-d\", name],\n                    { pty: true, err: \"message\", directory: self.path })\n                .done(refresh);\n        };\n\n        self.close = function close() {\n            if (watch)\n                watch.close();\n            if (proc)\n                proc.close();\n            window.clearTimeout(timeout);\n            timeout = null;\n        };\n    }\n\n    function setup() {\n        var keys;\n\n        $(\"#credentials-dialog\")\n\n            /* Show and hide panels */\n            .on(\"click\", \"tr.listing-ct-item\", function(ev) {\n                var body;\n                if ($(ev.target).parents(\".listing-ct-actions, ul\").length === 0) {\n                    body = $(ev.target).parents(\"tbody\");\n                    body.toggleClass(\"open\").removeClass(\"unlock\");\n                    body.find(\".alert\").hide();\n                }\n            })\n\n            /* Highlighting */\n            .on(\"mouseenter\", \".listing-ct-item\", function(ev) {\n                $(ev.target).parents(\"tbody\").find(\".listing-ct-item\").addClass(\"highlight-ct\");\n            })\n            .on(\"mouseleave\", \".listing-ct-item\", function(ev) {\n                $(ev.target).parents(\"tbody\").find(\".listing-ct-item\").removeClass(\"highlight-ct\");\n            })\n\n            /* Load and unload keys */\n            .on(\"change\", \".btn-group\", function(ev) {\n                var body = $(this).parents(\"tbody\");\n                var id = body.attr(\"data-id\");\n                var key = keys.items[id];\n                if (!key || !key.name)\n                    return;\n\n                var value = $(this).onoff(\"value\");\n\n                /* Key needs to be loaded, show load UI */\n                if (value && !key.loaded) {\n                    body.addClass(\"open\").addClass(\"unlock\");\n\n                /* Key needs to be unloaded, do that directly */\n                } else if (!value && key.loaded) {\n                    keys.unload(key.name)\n                        .done(function(ex) {\n                            body.removeClass(\"open\");\n                        })\n                        .fail(function(ex) {\n                            body.addClass(\"open\").removeClass(\"unlock\");\n                            body.find(\".alert\").show().find(\".credential-alert\").text(ex.message);\n                        });\n                }\n            })\n\n            /* Load key */\n            .on(\"click\", \".credential-unlock button\", function(ev) {\n                var body = $(this).parents(\"tbody\");\n                var id = body.attr(\"data-id\");\n                var key = keys.items[id];\n                if (!key || !key.name)\n                    return;\n\n                body.find(\"input button\").prop(\"disabled\", true);\n\n                var password = body.find(\".credential-password\").val();\n                keys.load(key.name, password)\n                    .always(function(ex) {\n                        body.find(\"input button\").prop(\"disabled\", false);\n                    })\n                    .done(function(ex) {\n                        body.find(\".credential-password\").val(\"\");\n                        body.removeClass(\"unlock\");\n                        body.find(\".alert\").hide();\n                    })\n                    .fail(function(ex) {\n                        body.find(\".alert\").show().find(\"span\").text(ex.message);\n                        console.warn(\"loading key failed: \", ex.message);\n                    });\n            })\n\n            /* Change key */\n            .on(\"click\", \".credential-change\", function(ev) {\n                var body = $(this).parents(\"tbody\");\n                var id = body.attr(\"data-id\");\n                var key = keys.items[id];\n                if (!key || !key.name)\n                    return;\n\n                body.find(\"input button\").prop(\"disabled\", true);\n\n                var old_pass = body.find(\".credential-old\").val();\n                var new_pass = body.find(\".credential-new\").val();\n                var two_pass = body.find(\".credential-two\").val();\n                if (old_pass === undefined || new_pass === undefined || two_pass === undefined)\n                    throw \"invalid password fields\";\n\n                keys.change(key.name, old_pass, new_pass, two_pass)\n                    .always(function(ex) {\n                        body.find(\"input button\").prop(\"disabled\", false);\n                    })\n                    .done(function() {\n                        body.find(\".credential-old\").val(\"\");\n                        body.find(\".credential-new\").val(\"\");\n                        body.find(\".credential-two\").val(\"\");\n                        body.find(\"li a\").first().click();\n                    })\n                    .fail(function(ex) {\n                        body.find(\".alert\").show().find(\"span\").text(ex.message);\n                    });\n            })\n\n            .on(\"change keypress\", \"input\", function(ev) {\n                var body = $(this).parents(\"tbody\");\n                if (ev.type == \"keypress\" && ev.keyCode == 13)\n                    $(this).parents(\"dl\").find(\".btn-primary\").click();\n                body.find(\".alert\").hide();\n            })\n\n            /* Change tabs */\n            .on(\"click\", \"tr.credential-panel ul > li > a\", function() {\n                var li = $(this).parent();\n                var index = li.index();\n                li.parent().children().removeClass(\"active\");\n                li.addClass(\"active\");\n                var body = $(this).parents(\"tbody\");\n                body.find(\".credential-tab\").hide().eq(index).show();\n                body.find(\".alert\").hide();\n            })\n\n            /* Popover help */\n            .on(\"click\", \"[data-toggle='popover']\", function() {\n                $(this).popover('toggle');\n            })\n\n            /* Dialog is hidden */\n            .on(\"hide.bs.modal\", function() {\n                if (keys) {\n                    $(keys).off();\n                    keys.close();\n                    keys = null;\n                }\n            })\n\n            /* Dialog is shown */\n            .on(\"show.bs.modal\", function() {\n                keys = new Keys();\n                $(\"#credential-keys\").toggleClass(\"hidden\",\n                                                  $.isEmptyObject(keys.items));\n\n                $(keys).on(\"changed\", function() {\n                    var key, id, row, rows = { };\n                    var table = $(\"#credentials-dialog table.credential-listing\");\n\n                    table.find(\"tbody[data-id]\").each(function(i, el) {\n                        row = $(el);\n                        rows[row.attr(\"data-id\")] = row;\n                    });\n\n                    var body = table.find(\"tbody\").first();\n                    for (id in keys.items) {\n                        if (!(id in rows)) {\n                            row = rows[id] = body.clone();\n                            row.attr(\"data-id\", id)\n                                .show()\n                                .onoff();\n                            table.append(row);\n                        }\n                    }\n\n                    function text(row, field, string) {\n                        var sel = row.find(field);\n                        string = string || \"\";\n                        if (sel.text() !== string)\n                            sel.text(string);\n                    }\n\n                    for (id in rows) {\n                        row = rows[id];\n                        key = keys.items[id];\n                        if (key) {\n                            text(row, \".credential-label\", key.name || key.comment);\n                            text(row, \".credential-type\", key.type);\n                            text(row, \".credential-fingerprint\", key.fingerprint);\n                            text(row, \".credential-comment\", key.comment);\n                            text(row, \".credential-data\", key.data);\n                            row.attr(\"data-name\", key.name)\n                                .attr(\"data-loaded\", key.loaded ? \"1\" : \"0\")\n                                .find(\".btn-onoff-ct\")\n                                    .onoff(\"value\", key.loaded || row.hasClass(\"unlock\"))\n                                    .onoff(\"disabled\", !key.name);\n                        } else {\n                            row.remove();\n                        }\n                        $(\"#credential-keys\").toggleClass(\"hidden\",\n                                                          $.isEmptyObject(keys.items));\n                    }\n                });\n            });\n        }\n\n    module.exports = {\n        keys_instance: function () {\n            return new Keys();\n        },\n        setup: setup\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/credentials.js\n// module id = 16\n// module chunks = 0","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/process/browser.js\n// module id = 17\n// module chunks = 0","'use strict';\n\n(function() {\n    \"use strict\";\n\n    var $ = require('jquery');\n    var cockpit = require('cockpit');\n\n    var unique_number = 0;\n    function unique() {\n        unique_number += 1;\n        return \"unique\" + -(new Date()) + -unique_number;\n    }\n\n    /* Dialog Patterns */\n\n    function clear_errors(sel) {\n        sel.find(\".dialog-error\").remove();\n        sel.find(\".has-error\").removeClass(\"has-error\");\n        sel.find(\".dialog-wrapper\").off(\".dialog-error\");\n        sel.off(\".dialog-error\");\n    }\n\n    function field_error(target, error) {\n        var wrapper = target.parent();\n        var next, refresh;\n\n        if (!wrapper.is(\".dialog-wrapper\")) {\n            wrapper = $(\"<div class='dialog-wrapper'>\").insertBefore(target);\n\n            /*\n             * Some bootstrap plugins replace html controls with their own\n             * stuff, so we have to account for that here.\n             */\n\n            next = target.next();\n            if (next.is(\".bootstrap-select\") && next.selectpicker) {\n                next.remove();\n                refresh = next.selectpicker;\n            }\n\n            target.remove().appendTo(wrapper);\n\n            if (refresh)\n                refresh.call(target);\n        }\n\n        var message;\n        if (error.message)\n            message = $(\"<div class='dialog-error help-block'>\").text(error.message);\n        wrapper.addClass(\"has-error\").append(message);\n\n        if (!wrapper.hasClass(\"error-keep\")) {\n            wrapper.on(\"keypress.dialog-error change.dialog-error\", function() {\n                wrapper.removeClass(\"has-error\")\n                    .find(\".dialog-error.help-block\").css(\"visibility\", \"hidden\");\n            });\n        }\n    }\n\n    function global_error(sel, error) {\n        var alert = $(\"<div class='alert alert-danger dialog-error'>\");\n        var text = error.message || error.toString();\n        alert.text(text);\n        $(\"<span class='fa fa-exclamation-triangle'>\").prependTo(alert);\n\n        /* Always log global dialog errors for easier debugging */\n        console.warn(text);\n\n        var footer = sel.find(\".modal-footer\");\n        if (footer.length)\n            alert.prependTo(footer);\n        else\n            alert.appendTo(sel);\n    }\n\n    function display_errors(sel, errors) {\n        clear_errors(sel);\n\n        /* The list of errors can also be passed as an array */\n        if (errors.length == 1 && $.isArray(errors[0]))\n            errors = errors[0];\n\n        var any = false;\n        errors.forEach(function(error) {\n            var target;\n            if (error) {\n                target = sel.find(error.target);\n\n                /* Errors for a specific field added below that field */\n                if (target && target.length)\n                    field_error(target, error);\n                else\n                    global_error(sel, error);\n\n                any = true;\n            }\n        });\n\n        if (!any)\n            return;\n\n        /* When dialog is shown again, remove all mods */\n        sel.on(\"show.bs.modal.dialog-error\", function() {\n            clear_errors(sel);\n        });\n    }\n\n    function DialogWait(promise, handle) {\n        this.promise = promise;\n        this.disabled = [];\n        this.handle = handle;\n    }\n\n    function clear_wait(sel) {\n        var data = sel.data(\"dialog-wait\");\n        sel.data(\"dialog-wait\", null);\n\n        sel.find(\".dialog-wait-ct\").remove();\n        sel.find(\".btn\").off(\".dialog-wait\");\n        sel.off(\".dialog-wait\");\n\n        if (data) {\n            data.disabled.forEach(function(ctl) {\n                ctl.removeAttr(\"disabled\");\n            });\n        }\n    }\n\n    function display_wait(sel, promise, handle) {\n        clear_wait(sel);\n\n        if (!promise) {\n            if (handle)\n                sel.modal(\"hide\");\n            return sel;\n        }\n\n        /* Clear all errors in the dialog */\n        if (handle)\n            display_errors(sel, []);\n\n        var wait = $(\"<div class='dialog-wait-ct pull-left'>\");\n        $(\"<div class='spinner spinner-sm'>\").appendTo(wait);\n        var message = $(\"<span>\").appendTo(wait);\n\n        sel.find(\".modal-footer button\").first().before(wait);\n\n        var data = new DialogWait(promise, handle);\n        sel.data(\"dialog-wait\", data);\n\n        var cancellation = promise.cancel || promise.close;\n        var cancelled = false;\n\n        /* Disable everything and stash previous disabled state */\n        var controls = sel.find(\".form-control\").add(\".btn\", sel);\n        if (cancellation)\n            controls = controls.not(\"[data-dismiss]\").not(\".btn-cancel\");\n        controls.each(function() {\n            var ctl = $(this);\n            if (!ctl.attr(\"disabled\")) {\n                data.disabled.push(ctl);\n                ctl.attr(\"disabled\", \"disabled\");\n            }\n        });\n\n        sel.find(\".btn[data-dismiss], .btn-cancel\").on(\"click.dialog-wait\", function() {\n            cancelled = true;\n            if (cancellation)\n                cancellation.apply(promise);\n            return false;\n        });\n\n        /* When dialog is shown again, remove all mods */\n        sel.on(\"hide.bs.modal.dialog-wait\", function() {\n            clear_wait(sel);\n        });\n\n        /*\n         * There is no way to remove a callback from a promise\n         * so we have to be careful to only react if still\n         * processing the same promise.\n         */\n        function restore() {\n            var state, data = sel.data(\"dialog-wait\");\n            if (data && data.promise === promise) {\n                clear_wait(sel);\n                state = promise.state();\n                if (cancelled || (state == \"resolved\" && data.handle))\n                    sel.modal('hide');\n                else if (state == \"rejected\" && data.handle)\n                    display_errors(sel, [ arguments[0] ]);\n            }\n        }\n\n        function update(arg) {\n            var data = sel.data(\"dialog-wait\");\n            if (data && data.promise === promise) {\n                if (typeof arg !== \"string\")\n                    arg = \"\";\n                message.text(arg);\n            }\n        }\n\n        promise\n            .always(restore)\n            .progress(update);\n\n        return sel;\n    }\n\n    $.fn.dialog = function dialog(action /* ... */) {\n        if (action === \"failure\")\n            return display_errors(this, Array.prototype.slice.call(arguments, 1));\n        else if (action === \"wait\")\n            return display_wait(this, arguments[1]);\n        else if (action === \"promise\")\n            return display_wait(this, arguments[1], true);\n        else\n            console.warn(\"unknown dialog action: \" + action);\n    };\n\n    window.addEventListener(\"hashchange\", function() {\n        $(\".modal\").modal(\"hide\");\n    });\n\n    /*\n     * OnOff switch pattern\n     */\n\n    function onoff_refresh(sel) {\n        /* During testing, no Cockpit dependency */\n        var _ = cockpit.gettext || function(x) { return x; };\n\n        sel = sel.find(\".btn-onoff-ct\").andSelf().filter(\".btn-onoff-ct\");\n        sel.each(function(x, el) {\n            var self = $(el)\n                .attr(\"data-toggle\", \"buttons\")\n                .addClass(\"btn-group\");\n            var value = self.onoff(\"value\");\n            var buttons = self.find(\".btn\");\n            var name = self.find(\"input\").first().attr(\"name\") || unique();\n            var i, input, text;\n            for (i = buttons.length; i < 2; i++) {\n                input = $('<input type=\"radio\" autocomplete=\"off\">');\n                text = document.createTextNode(i === 0 ? _(\"On\") : _(\"Off\"));\n                self.append($('<label class=\"btn\">').append(input, text));\n                buttons = null;\n            }\n            buttons = buttons || self.find(\".btn\");\n            buttons.find(\"input\").attr(\"name\", name);\n            onoff_change(self, !!value);\n        });\n        return sel;\n    }\n\n    function onoff_value(sel) {\n        return sel.find(\".btn\").first().hasClass(\"active\");\n    }\n\n    function onoff_change(sel, value) {\n        return sel.each(function(i, el) {\n            var buttons = $(el).find(\".btn\");\n            buttons.first().toggleClass(\"active\", !!value).find(\"input\").prop(\"checked\", !!value);\n            buttons.last().toggleClass(\"active\", !value).find(\"input\").prop(\"checked\", !value);\n        });\n    }\n\n    $.fn.onoff = function onoff(action /* ... */) {\n        if (arguments.length === 0 || action == \"refresh\") {\n            return onoff_refresh(this);\n        } else if (action === \"value\") {\n            if (arguments.length === 1)\n                return onoff_value(this);\n            else\n                return onoff_change(this, arguments[1]);\n        } else if (action == \"disabled\") {\n            return this.find(\".btn\").toggleClass(\"disabled\", arguments[1]);\n        } else {\n            console.warn(\"unknown switch action: \" + action);\n        }\n    };\n\n    /* ----------------------------------------------------------------------------\n     * Sliders\n     *\n     * <div class=\"slider\" value=\"0.5\">\n     *    <div class=\"slider-bar\">\n     *        <div class=\"slider-thumb\"></div>\n     *    </div>\n     *    <div class=\"slider-bar\">\n     *        <!-- optional left overs -->\n     *    </div>\n     * </div>\n     *\n     * A slider control. The first div.slider-bar is the one that is resized.\n     * The value will be bounded between 0 and 1 as a floating point number.\n     *\n     * The following div.slider-bar if present is resized to fill the remainder\n     * of the slider if not given a specific size. You can put more div.slider-bar\n     * inside it to reflect squashing other prevous allocations.\n     *\n     * If the following div.slider-bar have a width specified, then the\n     * slider supports the concept of overflowing. If the slider overflows\n     * it will get the .slider-warning class and go a bit red.\n     *\n     * On document creation any div.slider are automatically turned into\n     * Bar graphs.\n     *\n     * Slider has the following extra read/write properties:\n     *\n     * .value: the floating point value the slider is set to.\n     * .disabled: whether to display slider as disabled and refuse interacton.\n     *\n     * Slider has this event:\n     *\n     * on('change'): fired when the slider changes, passes value as additional arg.\n     */\n\n    function resize_flex(slider, flex, total, part) {\n        var value = 0;\n        if (part > total)\n            value = 1;\n        else if (part < 0 || isNaN(part))\n            value = 0;\n        else if (!isNaN(total) && total > 0 && part >= 0)\n            value = (part / total);\n        $(flex).css('width', (value * 100) + \"%\").\n            next(\"div\").css('margin-left', $(flex).css('width'));\n\n        /* Set the property and the attribute */\n        slider.value = value;\n    }\n\n    function update_value(slider) {\n        resize_flex(slider, $(slider).children(\"div.slider-bar\").first()[0], 1, slider.value);\n    }\n\n    function check_overflow(slider) {\n        $(slider).toggleClass(\"slider-warning\",\n                              slider.offsetWidth < slider.scrollWidth);\n    }\n\n    function setup_slider(slider) {\n        $(slider).attr('unselectable', 'on');\n\n        Object.defineProperty(slider, \"value\", {\n            get: function() {\n                return parseFloat(this.getAttribute(\"value\"));\n            },\n            set: function(v) {\n                var s = String(v);\n                if (s != this.getAttribute(\"value\"))\n                    this.setAttribute(\"value\", v);\n            }\n        });\n\n        Object.defineProperty(slider, \"disabled\", {\n            get: function() {\n                if (!this.hasAttribute(\"disabled\"))\n                    return false;\n                return this.getAttribute(\"disabled\").toLowerCase() != \"false\";\n            },\n            set: function(v) {\n                this.setAttribute(\"disabled\", v ? \"true\" : \"false\");\n            }\n        });\n\n        update_value(slider);\n        check_overflow(slider);\n\n        $(slider).on(\"change\", function() {\n            update_value(slider);\n            $(slider).toggleClass(\"slider-disabled\", slider.disabled);\n        });\n\n        if (slider.disabled)\n            $(slider).addClass(\"slider-disabled\");\n\n        $(slider).on(\"mousedown\", function(ev) {\n            if (slider.disabled)\n                return true; /* default action */\n            var flex;\n            var offset = $(slider).offset().left;\n            if ($(ev.target).hasClass(\"slider-thumb\")) {\n                var hitx  = (ev.offsetX || ev.clientX - $(ev.target).offset().left);\n                offset += (hitx - $(ev.target).outerWidth() / 2);\n                flex = $(ev.target).parent()[0];\n            } else {\n                flex = $(slider).children(\"div.slider-bar\").first()[0];\n                resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n                $(slider).trigger(\"change\", [slider.value]);\n                check_overflow(slider);\n            }\n\n            $(document).\n                on(\"mousemove.slider\", function(ev) {\n                    resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n                    $(slider).trigger(\"change\", [slider.value]);\n                    check_overflow(slider);\n                    return false;\n                }).\n                on(\"mouseup.slider\", function(ev) {\n                    $(document).\n                        off(\"mousemove.slider\").\n                        off(\"mouseup.slider\");\n                    return false;\n                });\n            return false; /* no default action */\n        });\n    }\n\n    function setup_sliders() {\n        $(\"div.slider\").each(function() {\n            setup_slider(this);\n        });\n    }\n\n    $.fn.slider = function Slider(action) {\n        var sel = this;\n        if (arguments.length === 0 || action == \"refresh\") {\n            sel.each(function() {\n                setup_slider(this);\n            });\n            return sel;\n        } else {\n            console.warn(\"unknown slider action: \" + action);\n        }\n    };\n\n    $(document).ready(setup_sliders);\n\n    /* -----------------------------------------------------------------------------\n     * Privileged UI actions.\n     */\n\n    // placement is optional, \"top\", \"left\", \"bottom\", \"right\"\n    $.fn.update_privileged = function update_privileged(perm, denied_message, placement) {\n        var allowed = (perm.allowed !== false);\n        var selector = this;\n\n        selector.each(function() {\n            // preserve old title first time to use when allowed\n            // activate tooltip\n            var allowed_key = 'allowed-title';\n            if (typeof $(this).data(allowed_key) === 'undefined' ||\n                   $(this).data(allowed_key) === false)\n                $(this).data(allowed_key, $(this).attr('title') || \"\");\n\n            var options = { html: true };\n            if (placement)\n                options['placement'] = placement;\n\n            $(this).tooltip(options);\n\n            if ($(this).hasClass(\"disabled\") === allowed) {\n              $(this).toggleClass(\"disabled\", !allowed)\n                   .attr('data-original-title', null);\n\n              if (allowed)\n                  $(this).attr('title', $(this).data(allowed_key));\n              else\n                  $(this).attr('title', denied_message);\n              $(this).tooltip('fixTitle');\n            }\n        });\n\n        return selector;\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/patterns.js\n// module id = 20\n// module chunks = 0","module.exports = \"#!/bin/sh\\n\\nset -eu\\n\\n# The first thing we do is list loaded keys\\nssh-add -L || true\\n\\n# Try to list keys in this directory\\ncd \\\"$1\\\" || exit 0\\n\\n# After that each .pub file gets its on set of blocks\\nfor file in *.pub; do\\n    printf \\\"\\\\v\\\"\\n    cat \\\"$file\\\"\\n    printf \\\"\\\\v%s\\\\v\\\" \\\"$file\\\"\\n    ssh-keygen -l -f \\\"$file\\\" || true\\ndone\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/credentials-ssh-private-keys.sh\n// module id = 21\n// module chunks = 0","module.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Add Machine to Dashboard</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td class=\\\"top\\\" translatable=\\\"yes\\\">Address</td>\\n                <td>\\n                <div class=\\\"dialog-wrapper error-keep\\\">\\n                    <input class=\\\"form-control\\\" id=\\\"add-machine-address\\\"\\n                       type=\\\"test\\\" value=\\\"{{ full_address }}\\\"\\n                       list=\\\"options\\\"\\n                       placeholder=\\\"{{ placeholder }}\\\"/>\\n                    <datalist id=\\\"options\\\">\\n                        {{#options}}\\n                        <option value=\\\"{{.}}\\\">\\n                        {{/options}}\\n                    </datalist>\\n                </div>\\n                </td>\\n            </tr>\\n            <tr>\\n                <td translatable=\\\"yes\\\">Color</td>\\n                <td id=\\\"add-machine-color-picker\\\">\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    {{#nearlimit}}\\n    <div class=\\\"alert alert-warning dialog-error dashboard-machine-warning\\\">\\n        <span class=\\\"pficon pficon-warning-triangle-o\\\"></span>\\n        <span translatable=\\\"yes\\\">Connecting simultaneously to more than {{ limit }} machines is unsupported.</span>\\n    </div>\\n    {{/nearlimit}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Add</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-add.html\n// module id = 22\n// module chunks = 0","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Authentication Failed</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    {{#supported}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}. To use this machine with cockpit you will need to enable one of the following authentication methods in the sshd config on {{#strong}}{{host}}{{/strong}}:</p>\\n    <ul>\\n        {{#password}}<li translatable=\\\"yes\\\">Password</li>{{/password}}\\n        {{#public-key}}<li translatable=\\\"yes\\\">Public Key</li>{{/public-key}}\\n        {{#gssapi-mic}}<li translatable=\\\"yes\\\">Kerberos Based SSO</li>{{/gssapi-mic}}\\n    </ul>\\n    {{/supported}}\\n\\n    {{^supported}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log in to {{#strong}}{{host}}{{/strong}}. {{#can_sync}}You may want to try to {{#sync_link}}synchronize users{{/sync_link}}.{{/can_sync}} For more authentication options and troubleshooting support please upgrade cockpit-ws to a newer version.</p>\\n    {{/supported}}\\n\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-auth-failed.html\n// module id = 23\n// module chunks = 0","module.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Log in to {{host}}</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    {{^available}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}.</p>\\n    {{/available}}\\n\\n    {{#available}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}. You can change your authentication credentials below. {{#can_sync}}You may prefer to {{#sync_link}}synchronize accounts and passwords{{/sync_link}}.{{/can_sync}}</p>\\n\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">User name</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"login-custom-user\\\" type=\\\"text\\\" value=\\\"{{machine_user}}\\\" placeholder=\\\"{{ user }}\\\"/>\\n                </td>\\n                <td>\\n                    <a tabindex=\\\"0\\\" role=\\\"button\\\" data-toggle=\\\"popover\\\"\\n                        data-trigger=\\\"focus\\\" data-placement=\\\"bottom\\\" translate=\\\"data-content\\\"\\n                        data-content=\\\"Leave blank to connect to this machine as the currently logged in user{{#user}} ({{user}}){{/user}}. If you enter a different username, that user will always be used connecting to this machine.\\\">\\n                        <span class=\\\"fa fa-lg fa-info-circle\\\"></span>\\n                    </a>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td translatable=\\\"yes\\\">Authentication</td>\\n                <td>\\n                    <div class=\\\"btn-group bootstrap-select dropdown form-control\\\" id=\\\"login-type\\\">\\n                        <button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\"\\n                            data-toggle=\\\"dropdown\\\">\\n                            <span class=\\\"pull-left\\\" translatable=\\\"yes\\\"></span>\\n                            <div class=\\\"caret\\\"></div>\\n                        </button>\\n                        <ul class=\\\"dropdown-menu\\\">\\n                            {{#allows_password}}\\n                            <li value=\\\"password\\\"><a translate>Type a password</a></li>\\n                            {{/allows_password}}\\n                            <li value=\\\"stored\\\"><a translate>Using available credentials</a></li>\\n                        </ul>\\n                    </div>\\n                </td>\\n            </tr>\\n\\n            {{#allows_password}}\\n            <tr id=\\\"login-diff-password\\\">\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">Password</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"login-custom-password\\\" type=\\\"password\\\" />\\n                </td>\\n                <td>\\n                    <a tabindex=\\\"0\\\" role=\\\"button\\\" data-toggle=\\\"popover\\\"\\n                        data-trigger=\\\"focus\\\" data-placement=\\\"bottom\\\" translate=\\\"data-content\\\"\\n                        data-content=\\\"Entering a different password here means you will need to retype it every time you reconnect to this machine\\\">\\n                        <span class=\\\"fa fa-lg fa-info-circle\\\"></span>\\n                    </a>\\n                </td>\\n            </tr>\\n            {{/allows_password}}\\n            <tr id=\\\"login-available\\\">\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">Available</td>\\n                <td class=\\\"top\\\">\\n                        {{#password}}<div translatable=\\\"yes\\\">Login Password</div>{{/password}}\\n                        {{#gssapi-mic}}<div translatable=\\\"yes\\\">Kerberos Ticket</div>{{/gssapi-mic}}\\n                        {{#public-key}}<div class=\\\"keys\\\"><div class='dialog-wait-ct pull-left'><div class='spinner spinner-sm'></div><span translatable=\\\"yes\\\">Checking for public keys</span></div></div>{{/public-key}}\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n    {{/available}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Log In</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-change-auth.html\n// module id = 24\n// module chunks = 0","module.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Could not contact {{host}}</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <p>\\n        <span translatable=\\\"yes\\\">Cockpit was unable to contact {{#strong}}{{host}}{{/strong}}.</span>\\n        {{^allow_connection_string}}\\n        <span translatable=\\\"yes\\\">To try a different port you will need to upgrade cockpit-ws to a newer version.</span>\\n        {{/allow_connection_string}}\\n\\n        {{#allow_connection_string}}\\n        <span translatable=\\\"yes\\\">Is sshd running on a different port?</span>\\n        {{/allow_connection_string}}\\n    </p>\\n\\n    {{#allow_connection_string}}\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td class=\\\"top\\\" translatable=\\\"yes\\\">Port</td>\\n                <td>\\n                <div class=\\\"dialog-wrapper error-keep\\\">\\n                    <input id=\\\"edit-machine-port\\\" class=\\\"form-control\\\"\\n                       type=\\\"test\\\" value=\\\"{{ port }}\\\"\\n                       list=\\\"options\\\"\\n                       placeholder=\\\"22\\\"/>\\n                </div>\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n    {{/allow_connection_string}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    {{#allow_connection_string}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Update</button>\\n    {{/allow_connection_string}}\\n\\n    {{^allow_connection_string}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n    {{/allow_connection_string}}\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-change-port.html\n// module id = 25\n// module chunks = 0","module.exports = \"<div>\\n    <div id=\\\"host-edit-color\\\" data-toggle=\\\"dropdown\\\"></div>\\n    <div id=\\\"host-edit-color-popover\\\" class=\\\"popover in\\\" tabindex=\\\"-1\\\">\\n        <div class=\\\"arrow\\\"></div>\\n        <div class=\\\"popover-content\\\">\\n            {{#colors}}\\n            <div>\\n                {{#list}}\\n                <div class=\\\"color-cell\\\"></div>\\n                {{/list}}\\n            </div>\\n            {{/colors}}\\n        </div>\\n        <div class=\\\"arrow\\\"></div>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-color-picker.html\n// module id = 26\n// module chunks = 0","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Incorrect Host Key</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <div class=\\\"banned\\\">\\n        <i class=\\\"fa fa-ban\\\"></i>\\n    </div>\\n    <p translatable=\\\"yes\\\">The key of {{#strong}}{{host}}{{/strong}} does not match the key previously in use. Unless this machine was recently replaced, it is likely that someone is trying to attack your connection to this machine.</p>\\n\\n    {{#key_host}}\\n    <p translatable=\\\"yes\\\">You can remove the previously stored key by running the following command</p>\\n\\n    <pre class=\\\"center\\\">ssh-keygen -R {{ key_host }} -f {{ path }}</pre>\\n    {{/key_host}}\\n\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-invalid-hostkey.html\n// module id = 27\n// module chunks = 0","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Cockpit is not installed</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <p translatable=\\\"yes\\\">A compatible version of Cockpit is not installed on {{#strong}}{{host}}{{/strong}}.</p>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-not-supported.html\n// module id = 28\n// module chunks = 0","module.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Synchronize users</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <p translatable=\\\"yes\\\">Select the users that you would like to be synchronized with {{#strong}}{{host}}{{/strong}}</p>\\n\\n{{#perm_failed}}\\n    <div class=\\\"alert alert-danger dialog-error\\\">\\n        <span class=\\\"fa fa-exclamation-triangle\\\"></span>\\n        <span translatable=\\\"yes\\\">Error loading users: {{perm_failed}}</span>\\n    </div>\\n{{/perm_failed}}\\n\\n{{^perm_failed}}\\n    <div id=\\\"sync-users\\\">\\n        <table class=\\\"table\\\">\\n        <tbody>\\n        {{^users}}\\n            <tr>\\n                  <td>\\n                    <div class=\\\"center-spinner\\\">\\n                        <div class=\\\"spinner spinner-lg\\\"></div>\\n                    </div>\\n                  </td>\\n            </tr>\\n        {{/users}}\\n\\n        {{#users}}\\n              <tr>\\n                  <td><input type=\\\"checkbox\\\" name=\\\"{{username}}\\\" {{#checked}}checked=checked{{/checked}} /></td>\\n                  <td>{{username}}</td>\\n                  <td>{{name}}</td>\\n                  <td>&#8226;&#8226;&#8226;&#8226;&#8226;</td>\\n                  <td>{{formated_groups}}</td>\\n              </tr>\\n        {{/users}}\\n        </tbody>\\n        </table>\\n    </div>\\n\\n    {{#needs_auth}}\\n    <div>\\n        {{#needs_root}}\\n        <p translatable=\\\"yes\\\">You are connected to {{#strong}}{{host}}{{/strong}}, however in order to synchronize users, a user with superuser privileges is required.</p>\\n        {{/needs_root}}\\n        {{^needs_root}}\\n        <p translatable=\\\"yes\\\">In order to synchronize users, you need to log in to {{#strong}}{{host}}{{/strong}}.</p>\\n        {{/needs_root}}\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\">User name</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"sync-username\\\" type=\\\"text\\\" />\\n                </td>\\n            </tr>\\n            {{#allows_password}}\\n            <tr>\\n                <td translatable=\\\"yes\\\">Password</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"sync-password\\\" type=\\\"password\\\" />\\n                </td>\\n            </tr>\\n            {{/allows_password}}\\n        </table>\\n    </div>\\n    {{/needs_auth}}\\n{{/perm_failed}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary disabled\\\" translatable=\\\"yes\\\">Synchronize</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-sync-users.html\n// module id = 29\n// module chunks = 0","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Unknown Host Key</h4>\\n</div>\\n<div id=\\\"add-unknown-host\\\" class=\\\"modal-body\\\">\\n    {{#key}}\\n        <p translatable=\\\"yes\\\">The authenticity of host {{#strong}}{{host}}{{/strong}} can't be established. Are you sure you want to continue connecting?</p>\\n        <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\">Fingerprint</td>\\n                <td><pre class=\\\"machine-key\\\">{{key}} </pre></td>\\n            </tr>\\n        </table>\\n        </div>\\n    {{/key}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n\\n    {{#key}}\\n        <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Connect</button>\\n    {{/key}}\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-unknown-hostkey.html\n// module id = 30\n// module chunks = 0","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2014 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar $ = require(\"jquery\");\n\n/* Construct a simple image editor inside 'element'.  It can only crop\n * an image to a square region.\n *\n * - editor = image_editor(element, width, height)\n *\n * - editor.load_data(data).done(...).fail(...)\n *\n * - editor.select_file().done(...).fail(...)\n *\n * - editor.get_data(width, height)\n *\n * - editor.changed\n *\n * - editor.start_crop()\n */\n\nfunction image_editor(element, width, height) {\n    var self = {\n        load_data: load_data,\n        get_data: get_data,\n        start_cropping: start_cropping,\n        stop_cropping: stop_cropping,\n        select_file: select_file,\n        changed: false\n    };\n\n    var square_size = Math.min (width, height);\n    var initial_crop_size = square_size;\n    var crop_handle_width = 20;\n\n    var $image_canvas, $overlay_canvas, $file_input;\n    var image_canvas, overlay_canvas;\n    var image_2d, overlay_2d;\n\n\n    function setup() {\n        element.empty().\n            css('width', width).\n            css('height', height).\n            css('position', 'relative').\n            append(\n                $image_canvas = $('<canvas>'),\n                $overlay_canvas = $('<canvas>').\n                    css('position', 'absolute').\n                    css('top', 0).\n                    css('left', 0).\n                    css('z-index', 10));\n        $('body').append(\n            $file_input = $('<input data-role=\"none\" type=\"file\">').hide());\n\n        image_canvas = $image_canvas[0];\n        image_2d = image_canvas.getContext(\"2d\");\n        overlay_canvas = $overlay_canvas[0];\n        overlay_2d = overlay_canvas.getContext(\"2d\");\n        image_canvas.width = overlay_canvas.width = width;\n        image_canvas.height = overlay_canvas.height = height;\n\n        $file_input.on('change', load_file);\n    }\n\n    var cropping = false;\n    var crop_x, crop_y, crop_s;\n\n    function start_cropping() {\n        cropping = true;\n        set_crop ((width - initial_crop_size) / 2, (height - initial_crop_size) / 2, initial_crop_size, true);\n        $overlay_canvas.on('mousedown', mousedown);\n    }\n\n    function stop_cropping() {\n        cropping = false;\n        overlay_2d.clearRect(0, 0, width, height);\n        $overlay_canvas.off('mousedown', mousedown);\n    }\n\n    function set_crop(x, y, s, fix) {\n        function clamp (low, val, high) {\n            if (val < low)\n                return low;\n            if (val > high)\n                return high;\n            return val;\n        }\n\n        x = Math.floor(x);\n        y = Math.floor(y);\n        s = Math.floor(s);\n\n        var min_s = 2 * crop_handle_width;\n\n        if (fix) {\n            // move it until it fits\n            s = clamp (min_s, s, square_size);\n            x = clamp (0, x, width - s);\n            y = clamp (0, y, height - s);\n        } else if (x < 0 || y < 0 || x + s > width || y + s > height || s < min_s)\n            return;\n\n        crop_x = x;\n        crop_y = y;\n        crop_s = s;\n\n        draw_crop (x, y, x+s, y+s);\n    }\n\n    function draw_crop(x1,y1,x2,y2) {\n        var ctxt = overlay_2d;\n\n        function draw_box (x1, y1, x2, y2) {\n            ctxt.strokeStyle = 'black';\n            ctxt.strokeRect(x1+0.5, y1+0.5, x2-x1-1, y2-y1-1);\n            ctxt.strokeStyle = 'white';\n            ctxt.strokeRect(x1+1.5, y1+1.5, x2-x1-3, y2-y1-3);\n        }\n\n        ctxt.clearRect(0, 0, width, height);\n        ctxt.fillStyle = 'rgba(0,0,0,0.8)';\n        ctxt.fillRect(0, 0, width, height);\n        ctxt.clearRect(x1, y1, x2 - x1, y2 - y1);\n\n        var h_w = crop_handle_width;\n        draw_box (x1, y1, x1+h_w, y1+h_w);\n        draw_box (x2-h_w, y1, x2, y1+h_w);\n        draw_box (x1, y2-h_w, x1+h_w, y2);\n        draw_box (x2-h_w, y2-h_w, x2, y2);\n        draw_box (x1, y1, x2, y2);\n    }\n\n    function mousedown(ev) {\n        var offset = $overlay_canvas.offset();\n        var xoff = ev.pageX - offset.left - crop_x;\n        var yoff = ev.pageY - offset.top - crop_y;\n\n        var orig_x = crop_x;\n        var orig_y = crop_y;\n        var orig_s = crop_s;\n\n        var proj_sign, dx_sign, dy_sign, ds_sign;\n\n        var h_w = crop_handle_width;\n\n        function mousemove(ev) {\n            var x = ev.pageX - offset.left - xoff;\n            var y = ev.pageY - offset.top - yoff;\n            if (proj_sign === 0)\n                set_crop (x, y, orig_s, true);\n            else {\n                var d = Math.floor((x - orig_x + proj_sign * (y - orig_y)) / 2);\n                set_crop (orig_x + dx_sign*d, orig_y + dy_sign*d, orig_s + ds_sign*d, false);\n            }\n            self.changed = true;\n        }\n\n        function mouseup(ev) {\n            $('body').off('mousemove', mousemove);\n            $('body').off('mouseup', mouseup);\n        }\n\n        if (xoff > 0 && yoff > 0 && xoff < crop_s && yoff < crop_s) {\n            if (xoff < h_w && yoff < h_w) {\n                // top left\n                proj_sign = 1;\n                dx_sign = 1;\n                dy_sign = 1;\n                ds_sign = -1;\n            } else if (xoff > crop_s - h_w && yoff < h_w) {\n                // top right\n                proj_sign = -1;\n                dx_sign = 0;\n                dy_sign = -1;\n                ds_sign = 1;\n            } else if (xoff < h_w && yoff > crop_s - h_w) {\n                // bottom left\n                proj_sign = -1;\n                dx_sign = 1;\n                dy_sign = 0;\n                ds_sign = -1;\n            } else if (xoff > crop_s - h_w && yoff > crop_s - h_w) {\n                // bottom right\n                proj_sign = 1;\n                dx_sign = 0;\n                dy_sign = 0;\n                ds_sign = 1;\n            } else {\n                // center\n                proj_sign = 0;\n            }\n\n            $('body').on('mousemove', mousemove);\n            $('body').on('mouseup', mouseup);\n        }\n    }\n\n    function load_data(data) {\n        var dfd = $.Deferred();\n        var img = new window.Image();\n        img.onerror = function () {\n            dfd.reject();\n        };\n        img.onload = function () {\n            var dest_w, dest_h;\n            if (img.width > img.height) {\n                dest_w = width;\n                dest_h = dest_w * (img.height/img.width);\n            } else {\n                dest_h = height;\n                dest_w = dest_h * (img.width/img.height);\n            }\n            image_2d.fillStyle = 'rgb(255,255,255)';\n            image_2d.fillRect(0, 0, width, height);\n            image_2d.drawImage(img, (width - dest_w) / 2, (height - dest_h) / 2, dest_w, dest_h);\n            initial_crop_size = Math.min(dest_h, dest_w);\n            dfd.resolve();\n        };\n        img.src = data;\n        return dfd.promise();\n    }\n\n    function get_data(width, height, format) {\n        var dest = $('<canvas/>')[0];\n        dest.width = width;\n        dest.height = height;\n        var ctxt = dest.getContext(\"2d\");\n        if (cropping) {\n            ctxt.drawImage (image_canvas,\n                            crop_x, crop_y, crop_s, crop_s,\n                            0, 0, width, height);\n        } else {\n            ctxt.drawImage (image_canvas,\n                            0, 0, square_size, square_size,\n                            0, 0, width, height);\n        }\n        return dest.toDataURL(format);\n    }\n\n    var select_dfd;\n\n    function load_file()\n    {\n        var files, file, reader;\n        files = $file_input[0].files;\n        if (files.length != 1) {\n            select_dfd.reject();\n            return;\n        }\n        file = files[0];\n        if (!file.type.match(\"image.*\")) {\n            select_dfd.reject();\n            return;\n        }\n        reader = new window.FileReader();\n        reader.onerror = function () {\n            select_dfd.reject();\n        };\n        reader.onload = function () {\n            load_data(reader.result).\n                done(function () {\n                    select_dfd.resolve();\n                }).\n                fail(function () {\n                    select_dfd.reject();\n                });\n        };\n        reader.readAsDataURL(file);\n    }\n\n    function select_file() {\n        select_dfd = $.Deferred();\n        if (window.File && window.FileReader)\n            $file_input.trigger('click');\n        else\n            select_dfd.reject();\n        return select_dfd.promise();\n    }\n\n    setup();\n\n    return self;\n}\n\nmodule.exports = image_editor;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/dashboard/image-editor.js\n// module id = 31\n// module chunks = 0"],"sourceRoot":""}