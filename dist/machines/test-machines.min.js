!function(e) {
    function t(r) {
        if (n[r]) return n[r].exports;
        var i = n[r] = {
            exports: {},
            id: r,
            loaded: !1
        };
        return e[r].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
    }
    var n = {};
    return t.m = e, t.c = n, t.p = "", t(0);
}({
    0: function(e, t, n) {
        "use strict";
        var r = n(847), i = r, o = n(35);
        r.test("toFixedPrecision", function() {
            i.equal("1.0", o.toFixedPrecision("1", 1)), i.equal("1.0", o.toFixedPrecision("1.0", 1)), 
            i.equal("1.0", o.toFixedPrecision("1.01", 1)), i.equal("1.1", o.toFixedPrecision("1.1", 1)), 
            i.equal("1.1", o.toFixedPrecision("1.123", 1)), i.equal("1", o.toFixedPrecision("1", 0)), 
            i.equal("1", o.toFixedPrecision("1.0", 0)), i.equal("1", o.toFixedPrecision("1.01", 0)), 
            i.equal("1", o.toFixedPrecision("1.1", 0)), i.equal("1", o.toFixedPrecision("1.123", 0)), 
            i.equal("1.00", o.toFixedPrecision("1", 2)), i.equal("1.00", o.toFixedPrecision("1.0", 2)), 
            i.equal("1.01", o.toFixedPrecision("1.01", 2)), i.equal("1.10", o.toFixedPrecision("1.1", 2)), 
            i.equal("1.12", o.toFixedPrecision("1.123", 2)), i.equal("12.0", o.toFixedPrecision("12", 1)), 
            i.equal("12.0", o.toFixedPrecision("12.0", 1)), i.equal("12.0", o.toFixedPrecision("12.01", 1)), 
            i.equal("12.0", o.toFixedPrecision("12.010", 1)), i.equal("12.1", o.toFixedPrecision("12.123", 1)), 
            i.equal("12.00", o.toFixedPrecision("12", 2)), i.equal("12.00", o.toFixedPrecision("12.0", 2)), 
            i.equal("12.01", o.toFixedPrecision("12.01", 2)), i.equal("12.01", o.toFixedPrecision("12.010", 2)), 
            i.equal("12.12", o.toFixedPrecision("12.123", 2));
        }), r.start();
    },
    25: function(e, t) {
        e.exports = function(e) {
            return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children = [], 
            e.webpackPolyfill = 1), e;
        };
    },
    34: function(e, t) {
        "use strict";
        Object.defineProperty(t, "__esModule", {
            value: !0
        });
        var n = {
            DefaultRefreshInterval: 1e4,
            LeaveCreateVmDialogVisibleAfterSubmit: 3e3,
            DummyVmsWaitInterval: 6e5,
            WaitForRetryInstallVm: 3e3,
            Virsh: {
                connections: {
                    system: {
                        params: [ "-c", "qemu:///system" ]
                    },
                    session: {
                        params: [ "-c", "qemu:///session" ]
                    }
                }
            },
            isDev: !1
        };
        t.default = n;
    },
    35: function(e, t, n) {
        "use strict";
        function r(e) {
            return e && e.__esModule ? e : {
                default: e
            };
        }
        function i(e) {
            if (e < 1) return e.toFixed(2);
            var t = e.toFixed(1);
            return e - t === 0 ? e.toFixed(0) : t;
        }
        function o(e) {
            return 0 === e ? 1 : Math.pow(1024, e);
        }
        function s(e) {
            return e > 0 ? Math.floor(Math.log(e) / Math.log(1024)) : 0;
        }
        function u(e, t) {
            return l(e, t, S[s(l(e, t, C.B).value)]);
        }
        function a(e, t, n) {
            return l(e, t, n).value;
        }
        function l(e, t, n) {
            var r = {
                value: 0,
                unit: C.B.name
            };
            if (e = Number(e), isNaN(e)) return console.error("input is not a number"), r;
            if (e < 0) return console.error("input == " + e + " cannot be less than zero"), 
            r;
            var i = C["string" == typeof t ? t : t.name], s = C["string" == typeof n ? n : n.name];
            if (!i || !s) return console.error("unknown unit " + (i ? n : t)), r;
            var u = i.base1024Exponent - s.base1024Exponent;
            return u < 0 ? r.value = e / o(-1 * u) : r.value = e * o(u), r.unit = s.name, r;
        }
        function c(e) {
            return !e || 0 === e.length;
        }
        function f(e, t) {
            if (e.length !== t.length) return !1;
            var n = e.filter(function(e, n) {
                return e !== t[n];
            });
            return 0 === n.length;
        }
        function d(e) {
            if (T.default.isDev) {
                for (var t, n = arguments.length, r = Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++) r[i - 1] = arguments[i];
                (t = console).log.apply(t, [ e ].concat(r));
            }
        }
        function p(e) {
            for (var t, n = arguments.length, r = Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++) r[i - 1] = arguments[i];
            (t = console).error.apply(t, [ e ].concat(r));
        }
        function h(e) {
            var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1], n = t && "." === e.key || e.key >= "0" && e.key <= "9" || "Backspace" === e.key || "Delete" === e.key || "Tab" === e.key || "ArrowLeft" === e.key || "ArrowRight" === e.key || "ArrowUp" === e.key || "ArrowDown" === e.key || "Home" === e.key || "End" === e.key;
            return n || e.preventDefault(), n;
        }
        function m(e) {
            var t = new Date();
            return t.setFullYear(t.getFullYear() + e), t;
        }
        function g(e, t) {
            return e in U ? t in U[e] ? U[e][t] : (d("rephraseUI(key='" + e + "', original='" + t + "'): unknown original value"), 
            t) : (d("rephraseUI(key='" + e + "', original='" + t + "'): unknown key"), t);
        }
        function v(e, t) {
            t = t || 0;
            var n = Math.pow(10, t), r = Math.abs(Math.round(e * n)), i = (e < 0 ? "-" : "") + String(Math.floor(r / n));
            if (t > 0) {
                var o = String(r % n), s = new Array(Math.max(t - o.length, 0) + 1).join("0");
                i += "." + s + o;
            }
            return i;
        }
        function b(e) {
            var t = e.data, n = (e.fileName, e.mimeType), r = void 0 === n ? "application/octet-stream" : n;
            if (!t) return console.error("fileDownload(): no data to download"), !1;
            var i = document.createElement("a");
            i.id = "dynamically-generated-file", i.href = "data:" + r + "," + encodeURIComponent(t), 
            document.body.appendChild(i), d("fileDownload() is using IFRAME");
            var o = document.createElement("iframe");
            o.width = "1", o.height = "1", document.body.appendChild(o);
            var s = "\n[...............................GraphicsConsole]\n";
            return o.src = "data:" + r + "," + encodeURIComponent(t + s), window.setTimeout(function() {
                return document.body.removeChild(o);
            }, 333), window.setTimeout(function() {
                d("removing temporary A.HREF for filedownload"), document.body.removeChild(i);
            }, 5e3), !0;
        }
        function y(e) {
            return "vm-" + e;
        }
        function w(e) {
            return function(t) {
                if (t && 0 === t.button) return t.preventDefault(), e(t);
            };
        }
        function x(e, t, n, r) {
            var i = E.default.defer(), o = !1, s = window.setTimeout(function() {
                o || (i.resolve(), o = !0);
            }, t);
            return e.then(function() {
                o ? "function" == typeof n && n.apply(r, arguments) : (o = !0, window.clearTimeout(s), 
                i.resolve.apply(i, arguments));
            }), e.catch(function() {
                o ? "function" == typeof r && r.apply(r, arguments) : (o = !0, window.clearTimeout(s), 
                i.reject.apply(i, arguments));
            }), i.promise;
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.units = void 0, t.toReadableNumber = i, t.convertToBestUnit = u, t.convertToUnit = a, 
        t.convertToUnitVerbose = l, t.isEmpty = c, t.arrayEquals = f, t.logDebug = d, t.logError = p, 
        t.digitFilter = h, t.getTodayYearShifted = m, t.rephraseUI = g, t.toFixedPrecision = v, 
        t.fileDownload = b, t.vmId = y, t.mouseClick = w, t.timeoutedPromise = x;
        var q = n(36), E = r(q), k = n(34), T = r(k), M = E.default.gettext, C = t.units = {
            B: {
                name: "B",
                base1024Exponent: 0
            },
            KiB: {
                name: "KiB",
                base1024Exponent: 1
            },
            MiB: {
                name: "MiB",
                base1024Exponent: 2
            },
            GiB: {
                name: "GiB",
                base1024Exponent: 3
            },
            TiB: {
                name: "TiB",
                base1024Exponent: 4
            },
            PiB: {
                name: "PiB",
                base1024Exponent: 5
            },
            EiB: {
                name: "EiB",
                base1024Exponent: 6
            }
        }, S = {
            "0": C.B,
            "1": C.KiB,
            "2": C.MiB,
            "3": C.GiB,
            "4": C.TiB,
            "5": C.PiB,
            "6": C.EiB
        }, U = {
            autostart: {
                disable: M("disabled"),
                enable: M("enabled")
            },
            connections: {
                system: M("System"),
                session: M("Session")
            },
            vmStates: {
                running: M("running"),
                idle: M("idle"),
                paused: M("paused"),
                shutdown: M("shutdown"),
                "shut off": M("shut off"),
                crashed: M("crashed"),
                dying: M("dying"),
                pmsuspended: M("suspended (PM)")
            },
            bootableDisk: {
                disk: M("disk"),
                cdrom: M("cdrom"),
                interface: M("network"),
                hd: M("disk")
            },
            cpuMode: {
                custom: M("custom"),
                "host-model": M("host")
            },
            networkType: {
                direct: M("direct"),
                network: M("network"),
                bridge: M("bridge"),
                user: M("user"),
                ethernet: M("ethernet"),
                hostdev: M("hostdev"),
                mcast: M("mcast"),
                server: M("server"),
                udp: M("udp"),
                vhostuser: M("vhostuser")
            },
            networkManaged: {
                yes: M("yes"),
                no: M("no")
            },
            networkState: {
                up: M("up"),
                down: M("down")
            }
        };
    },
    36: function(e, t) {
        e.exports = cockpit;
    },
    847: function(e, t, n) {
        "use strict";
        !function() {
            window.QUnit = n(848), window.qunitTap = n(850), n(851), n(852), e.exports = window.QUnit;
        }();
    },
    848: function(e, t, n) {
        var r;
        (function(e, i) {
            /*!
	 * QUnit 1.23.1
	 * https://qunitjs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-04-12T17:29Z
	 */
            !function(e) {
                function o(e, t) {
                    var n, r, i = e.slice();
                    for (n = 0; n < i.length; n++) for (r = 0; r < t.length; r++) if (i[n] === t[r]) {
                        i.splice(n, 1), n--;
                        break;
                    }
                    return i;
                }
                function s(e, t) {
                    if (t.indexOf) return t.indexOf(e);
                    for (var n = 0, r = t.length; n < r; n++) if (t[n] === e) return n;
                    return -1;
                }
                function u(e) {
                    var t, n, r = Q.is("array", e) ? [] : {};
                    for (t in e) G.call(e, t) && (n = e[t], r[t] = n === Object(n) ? u(n) : n);
                    return r;
                }
                function a(t, n, r) {
                    for (var i in n) G.call(n, i) && ("constructor" === i && t === e || (void 0 === n[i] ? delete t[i] : r && "undefined" != typeof t[i] || (t[i] = n[i])));
                    return t;
                }
                function l(e) {
                    if ("undefined" == typeof e) return "undefined";
                    if (null === e) return "null";
                    var t = _.call(e).match(/^\[object\s(.*)\]$/), n = t && t[1];
                    switch (n) {
                      case "Number":
                        return isNaN(e) ? "nan" : "number";

                      case "String":
                      case "Boolean":
                      case "Array":
                      case "Set":
                      case "Map":
                      case "Date":
                      case "RegExp":
                      case "Function":
                      case "Symbol":
                        return n.toLowerCase();
                    }
                    return "object" == typeof e ? "object" : void 0;
                }
                function c(e, t) {
                    return Q.objectType(t) === e;
                }
                function f(e, t) {
                    t = void 0 === t ? 4 : t;
                    var n, r, i;
                    if (e.stack) {
                        if (n = e.stack.split("\n"), /^error$/i.test(n[0]) && n.shift(), B) {
                            for (r = [], i = t; i < n.length && n[i].indexOf(B) === -1; i++) r.push(n[i]);
                            if (r.length) return r.join("\n");
                        }
                        return n[t];
                    }
                    if (e.sourceURL) {
                        if (/qunit.js$/.test(e.sourceURL)) return;
                        return e.sourceURL + ":" + e.line;
                    }
                }
                function d(e) {
                    var t = new Error();
                    if (!t.stack) try {
                        throw t;
                    } catch (e) {
                        t = e;
                    }
                    return f(t, e);
                }
                function p(e) {
                    function t(e) {
                        var t = function(t) {
                            if ("function" !== l(t)) throw new Error("QUnit logging methods require a callback function as their first parameters.");
                            V.callbacks[e].push(t);
                        };
                        return z[e] = t, t;
                    }
                    var n, r, i, o = [ "begin", "done", "log", "testStart", "testDone", "moduleStart", "moduleDone" ];
                    for (n = 0, r = o.length; n < r; n++) i = o[n], "undefined" === l(V.callbacks[i]) && (V.callbacks[i] = []), 
                    e[i] = t(i);
                }
                function h(e, t) {
                    var n, r, i;
                    for (i = V.callbacks[e], n = 0, r = i.length; n < r; n++) i[n](t);
                }
                function m() {
                    var t, n;
                    for (t in z) Q[t] !== z[t] && (n = Q[t], Q[t] = z[t], Q[t](n), e.console && e.console.warn && e.console.warn("QUnit." + t + " was replaced with a new value.\nPlease, check out the documentation on how to apply logging callbacks.\nReference: https://api.qunitjs.com/category/callbacks/"));
                }
                function g() {
                    var e, t, n = [];
                    if (!V.started) {
                        for (V.started = D(), m(), "" === V.modules[0].name && 0 === V.modules[0].tests.length && V.modules.shift(), 
                        e = 0, t = V.modules.length; e < t; e++) n.push({
                            name: V.modules[e].name,
                            tests: V.modules[e].tests
                        });
                        h("begin", {
                            totalTests: q.count,
                            modules: n
                        });
                    }
                    V.blocking = !1, v(!0);
                }
                function v(e) {
                    function t() {
                        v(e);
                    }
                    var n = D();
                    for (V.depth = (V.depth || 0) + 1; V.queue.length && !V.blocking; ) {
                        if (!(!R.setTimeout || V.updateRate <= 0 || D() - n < V.updateRate)) {
                            O(t, 13);
                            break;
                        }
                        V.current && (V.current.usedAsync = !1), V.queue.shift()();
                    }
                    V.depth--, !e || V.blocking || V.queue.length || 0 !== V.depth || w();
                }
                function b() {
                    V.blocking = !0, V.testTimeout && R.setTimeout && (L(V.timeout), V.timeout = O(function() {
                        if (!V.current) throw new Error("Test timed out");
                        V.current.semaphore = 0, Q.pushFailure("Test timed out", d(2)), y();
                    }, V.testTimeout));
                }
                function y() {
                    $ = !0, R.setTimeout ? O(function() {
                        V.current && V.current.semaphore > 0 || (V.timeout && L(V.timeout), g());
                    }, 13) : g();
                }
                function w() {
                    var e, t;
                    V.autorun = !0, V.previousModule && h("moduleDone", {
                        name: V.previousModule.name,
                        tests: V.previousModule.tests,
                        failed: V.moduleStats.bad,
                        passed: V.moduleStats.all - V.moduleStats.bad,
                        total: V.moduleStats.all,
                        runtime: D() - V.moduleStats.started
                    }), delete V.previousModule, e = D() - V.started, t = V.stats.all - V.stats.bad, 
                    h("done", {
                        failed: V.stats.bad,
                        passed: t,
                        total: V.stats.all,
                        runtime: e
                    });
                }
                function x(e, t) {
                    return void 0 === e.testEnvironment && (e.testEnvironment = {}), function(n) {
                        e.testEnvironment[t] = n;
                    };
                }
                function q(e) {
                    var t, n;
                    for (++q.count, a(this, e), this.assertions = [], this.semaphore = 0, this.usedAsync = !1, 
                    this.module = V.currentModule, this.stack = d(3), t = 0, n = this.module.tests; t < n.length; t++) this.module.tests[t].name === this.testName && (this.testName += " ");
                    this.testId = E(this.module.name, this.testName), this.module.tests.push({
                        name: this.testName,
                        testId: this.testId
                    }), e.skip ? (this.callback = function() {}, this.async = !1, this.expected = 0) : this.assert = new P(this);
                }
                function E(e, t) {
                    for (var n, r = 0, i = 0, o = e + "" + t, s = o.length; r < s; r++) i = (i << 5) - i + o.charCodeAt(r), 
                    i |= 0;
                    return n = (4294967296 + i).toString(16), n.length < 8 && (n = "0000000" + n), n.slice(-8);
                }
                function k(e, t, n) {
                    var r, i = !t;
                    if ("array" !== Q.objectType(e)) t ? V.queue.splice(Y++, 0, e) : n ? (W || (W = T(n)), 
                    r = Math.floor(W() * (V.queue.length - Y + 1)), V.queue.splice(Y + r, 0, e)) : V.queue.push(e), 
                    V.autorun && !V.blocking && v(i); else for (;e.length; ) k(e.shift());
                }
                function T(e) {
                    var t = parseInt(E(e), 16) || -1;
                    return function() {
                        return t ^= t << 13, t ^= t >>> 17, t ^= t << 5, t < 0 && (t += 4294967296), t / 4294967296;
                    };
                }
                function M() {
                    if (V.pollution = [], V.noglobals) for (var t in e) if (G.call(e, t)) {
                        if (/^qunit-test-output/.test(t)) continue;
                        V.pollution.push(t);
                    }
                }
                function C() {
                    var e, t, n = V.pollution;
                    M(), e = o(V.pollution, n), e.length > 0 && Q.pushFailure("Introduced global variable(s): " + e.join(", ")), 
                    t = o(n, V.pollution), t.length > 0 && Q.pushFailure("Deleted global variable(s): " + t.join(", "));
                }
                function S(e, t, n) {
                    2 === arguments.length && (n = t, t = null), Q.test(e, t, n, !0);
                }
                function U(e, t, n, r) {
                    if (!K) {
                        var i;
                        2 === arguments.length && (n = t, t = null), i = new q({
                            testName: e,
                            expected: t,
                            async: r,
                            callback: n
                        }), i.queue();
                    }
                }
                function F(e) {
                    if (!K) {
                        var t = new q({
                            testName: e,
                            skip: !0
                        });
                        t.queue();
                    }
                }
                function I(e, t, n, r) {
                    var i;
                    K || (Q.config.queue.length = 0, K = !0, 2 === arguments.length && (n = t, t = null), 
                    i = new q({
                        testName: e,
                        expected: t,
                        async: r,
                        callback: n
                    }), i.queue());
                }
                function P(e) {
                    this.test = e;
                }
                function j(e) {
                    var t, n, r = e.toString();
                    return "[object" === r.substring(0, 7) ? (t = e.name ? e.name.toString() : "Error", 
                    n = e.message ? e.message.toString() : "", t && n ? t + ": " + n : t ? t : n ? n : "Error") : r;
                }
                var Q = {}, N = e.Date, D = N.now || function() {
                    return new N().getTime();
                }, O = e.setTimeout, L = e.clearTimeout, A = e.window, R = {
                    document: A && void 0 !== A.document,
                    setTimeout: void 0 !== O,
                    sessionStorage: function() {
                        var e = "qunit-test-string";
                        try {
                            return sessionStorage.setItem(e, e), sessionStorage.removeItem(e), !0;
                        } catch (e) {
                            return !1;
                        }
                    }()
                }, B = (d(0) || "").replace(/(:\d+)+\)?/, "").replace(/.+\//, ""), H = !1, $ = !1, _ = Object.prototype.toString, G = Object.prototype.hasOwnProperty, V = {
                    queue: [],
                    blocking: !0,
                    reorder: !0,
                    altertitle: !0,
                    collapse: !0,
                    scrolltop: !0,
                    maxDepth: 5,
                    requireExpects: !1,
                    urlConfig: [],
                    modules: [],
                    moduleStack: [],
                    currentModule: {
                        name: "",
                        tests: []
                    },
                    callbacks: {}
                };
                V.modules.push(V.currentModule);
                var z = {};
                !function() {
                    if (R.document) {
                        var e = A.onerror;
                        A.onerror = function(t, n, r) {
                            var i = !1;
                            if (e && (i = e(t, n, r)), i !== !0) {
                                if (Q.config.current) {
                                    if (Q.config.current.ignoreGlobalErrors) return !0;
                                    Q.pushFailure(t, n + ":" + r);
                                } else Q.test("global failure", a(function() {
                                    Q.pushFailure(t, n + ":" + r);
                                }, {
                                    validTest: !0
                                }));
                                return !1;
                            }
                            return i;
                        };
                    }
                }(), Q.isLocal = !(R.document && "file:" !== A.location.protocol), Q.version = "1.23.1", 
                a(Q, {
                    module: function(e, t, n) {
                        function r() {
                            var n = V.moduleStack.length ? V.moduleStack.slice(-1)[0] : null, r = null !== n ? [ n.name, e ].join(" > ") : e, i = {
                                name: r,
                                parentModule: n,
                                tests: [],
                                moduleId: E(r)
                            }, o = {};
                            return n && (a(o, n.testEnvironment), delete o.beforeEach, delete o.afterEach), 
                            a(o, t), i.testEnvironment = o, V.modules.push(i), i;
                        }
                        function i(e) {
                            V.currentModule = e;
                        }
                        var o, s, u = V.currentModule;
                        2 === arguments.length && "function" === l(t) && (n = t, t = void 0), t && t.setup && (t.beforeEach = t.setup, 
                        delete t.setup), t && t.teardown && (t.afterEach = t.teardown, delete t.teardown), 
                        o = r(), s = {
                            beforeEach: x(o, "beforeEach"),
                            afterEach: x(o, "afterEach")
                        }, "function" === l(n) && (V.moduleStack.push(o), i(o), n.call(o.testEnvironment, s), 
                        V.moduleStack.pop(), o = o.parentModule || u), i(o);
                    },
                    asyncTest: S,
                    test: U,
                    skip: F,
                    only: I,
                    start: function(e) {
                        var t = H;
                        if (V.current) {
                            if (V.current.semaphore -= e || 1, isNaN(V.current.semaphore)) return V.current.semaphore = 0, 
                            void Q.pushFailure("Called start() with a non-numeric decrement.", d(2));
                            if (V.current.semaphore > 0) return;
                            if (V.current.semaphore < 0) return V.current.semaphore = 0, void Q.pushFailure("Called start() while already started (test's semaphore was 0 already)", d(2));
                        } else {
                            if (H = !0, $) throw new Error("Called start() outside of a test context while already started");
                            if (t || e > 1) throw new Error("Called start() outside of a test context too many times");
                            if (V.autostart) throw new Error("Called start() outside of a test context when QUnit.config.autostart was true");
                            if (!V.pageLoaded) return void (V.autostart = !0);
                        }
                        y();
                    },
                    stop: function(e) {
                        if (!V.current) throw new Error("Called stop() outside of a test context");
                        V.current.semaphore += e || 1, b();
                    },
                    config: V,
                    is: c,
                    objectType: l,
                    extend: a,
                    load: function() {
                        V.pageLoaded = !0, a(V, {
                            stats: {
                                all: 0,
                                bad: 0
                            },
                            moduleStats: {
                                all: 0,
                                bad: 0
                            },
                            started: 0,
                            updateRate: 1e3,
                            autostart: !0,
                            filter: ""
                        }, !0), V.blocking = !1, V.autostart && y();
                    },
                    stack: function(e) {
                        return e = (e || 0) + 2, d(e);
                    }
                }), p(Q);
                var W, K = !1, Y = 0;
                q.count = 0, q.prototype = {
                    before: function() {
                        this.module === V.previousModule && G.call(V, "previousModule") || (G.call(V, "previousModule") && h("moduleDone", {
                            name: V.previousModule.name,
                            tests: V.previousModule.tests,
                            failed: V.moduleStats.bad,
                            passed: V.moduleStats.all - V.moduleStats.bad,
                            total: V.moduleStats.all,
                            runtime: D() - V.moduleStats.started
                        }), V.previousModule = this.module, V.moduleStats = {
                            all: 0,
                            bad: 0,
                            started: D()
                        }, h("moduleStart", {
                            name: this.module.name,
                            tests: this.module.tests
                        })), V.current = this, this.module.testEnvironment && (delete this.module.testEnvironment.beforeEach, 
                        delete this.module.testEnvironment.afterEach), this.testEnvironment = a({}, this.module.testEnvironment), 
                        this.started = D(), h("testStart", {
                            name: this.testName,
                            module: this.module.name,
                            testId: this.testId
                        }), V.pollution || M();
                    },
                    run: function() {
                        function e(e) {
                            t = e.callback.call(e.testEnvironment, e.assert), e.resolvePromise(t);
                        }
                        var t;
                        if (V.current = this, this.async && Q.stop(), this.callbackStarted = D(), V.notrycatch) return void e(this);
                        try {
                            e(this);
                        } catch (e) {
                            this.pushFailure("Died on test #" + (this.assertions.length + 1) + " " + this.stack + ": " + (e.message || e), f(e, 0)), 
                            M(), V.blocking && Q.start();
                        }
                    },
                    after: function() {
                        C();
                    },
                    queueHook: function(e, t) {
                        var n, r = this;
                        return function() {
                            function i() {
                                n = e.call(r.testEnvironment, r.assert), r.resolvePromise(n, t);
                            }
                            if (V.current = r, V.notrycatch) return void i();
                            try {
                                i();
                            } catch (e) {
                                r.pushFailure(t + " failed on " + r.testName + ": " + (e.message || e), f(e, 0));
                            }
                        };
                    },
                    hooks: function(e) {
                        function t(r, i) {
                            i.parentModule && t(r, i.parentModule), i.testEnvironment && "function" === Q.objectType(i.testEnvironment[e]) && n.push(r.queueHook(i.testEnvironment[e], e));
                        }
                        var n = [];
                        return this.skip || t(this, this.module), n;
                    },
                    finish: function() {
                        V.current = this, V.requireExpects && null === this.expected ? this.pushFailure("Expected number of assertions to be defined, but expect() was not called.", this.stack) : null !== this.expected && this.expected !== this.assertions.length ? this.pushFailure("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run", this.stack) : null !== this.expected || this.assertions.length || this.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
                        var e, t = 0;
                        for (this.runtime = D() - this.started, V.stats.all += this.assertions.length, V.moduleStats.all += this.assertions.length, 
                        e = 0; e < this.assertions.length; e++) this.assertions[e].result || (t++, V.stats.bad++, 
                        V.moduleStats.bad++);
                        h("testDone", {
                            name: this.testName,
                            module: this.module.name,
                            skipped: !!this.skip,
                            failed: t,
                            passed: this.assertions.length - t,
                            total: this.assertions.length,
                            runtime: this.runtime,
                            assertions: this.assertions,
                            testId: this.testId,
                            source: this.stack,
                            duration: this.runtime
                        }), Q.reset(), V.current = void 0;
                    },
                    queue: function() {
                        function e() {
                            k([ function() {
                                n.before();
                            }, n.hooks("beforeEach"), function() {
                                n.run();
                            }, n.hooks("afterEach").reverse(), function() {
                                n.after();
                            }, function() {
                                n.finish();
                            } ]);
                        }
                        var t, n = this;
                        if (this.valid()) return t = Q.config.reorder && R.sessionStorage && +sessionStorage.getItem("qunit-test-" + this.module.name + "-" + this.testName), 
                        k(e, t, V.seed);
                    },
                    pushResult: function(e) {
                        var t, n = {
                            module: this.module.name,
                            name: this.testName,
                            result: e.result,
                            message: e.message,
                            actual: e.actual,
                            expected: e.expected,
                            testId: this.testId,
                            negative: e.negative || !1,
                            runtime: D() - this.started
                        };
                        e.result || (t = d(), t && (n.source = t)), h("log", n), this.assertions.push({
                            result: !!e.result,
                            message: e.message
                        });
                    },
                    pushFailure: function(e, t, n) {
                        if (!(this instanceof q)) throw new Error("pushFailure() assertion outside test context, was " + d(2));
                        var r = {
                            module: this.module.name,
                            name: this.testName,
                            result: !1,
                            message: e || "error",
                            actual: n || null,
                            testId: this.testId,
                            runtime: D() - this.started
                        };
                        t && (r.source = t), h("log", r), this.assertions.push({
                            result: !1,
                            message: e
                        });
                    },
                    resolvePromise: function(e, t) {
                        var n, r, i = this;
                        null != e && (n = e.then, "function" === Q.objectType(n) && (Q.stop(), n.call(e, function() {
                            Q.start();
                        }, function(e) {
                            r = "Promise rejected " + (t ? t.replace(/Each$/, "") : "during") + " " + i.testName + ": " + (e.message || e), 
                            i.pushFailure(r, f(e, 0)), M(), Q.start();
                        })));
                    },
                    valid: function() {
                        function e(t) {
                            var n = t.name ? t.name.toLowerCase() : null;
                            return n === i || !!t.parentModule && e(t.parentModule);
                        }
                        function t(e) {
                            return s(e.moduleId, V.moduleId) > -1 || e.parentModule && t(e.parentModule);
                        }
                        var n = V.filter, r = /^(!?)\/([\w\W]*)\/(i?$)/.exec(n), i = V.module && V.module.toLowerCase(), o = this.module.name + ": " + this.testName;
                        return !(!this.callback || !this.callback.validTest) || !(V.moduleId && V.moduleId.length > 0 && !t(this.module)) && (!(V.testId && V.testId.length > 0 && s(this.testId, V.testId) < 0) && (!(i && !e(this.module)) && (!n || (r ? this.regexFilter(!!r[1], r[2], r[3], o) : this.stringFilter(n, o)))));
                    },
                    regexFilter: function(e, t, n, r) {
                        var i = new RegExp(t, n), o = i.test(r);
                        return o !== e;
                    },
                    stringFilter: function(e, t) {
                        e = e.toLowerCase(), t = t.toLowerCase();
                        var n = "!" !== e.charAt(0);
                        return n || (e = e.slice(1)), t.indexOf(e) !== -1 ? n : !n;
                    }
                }, Q.reset = function() {
                    if (R.document) {
                        var e = R.document && document.getElementById && document.getElementById("qunit-fixture");
                        e && (e.innerHTML = V.fixture);
                    }
                }, Q.pushFailure = function() {
                    if (!Q.config.current) throw new Error("pushFailure() assertion outside test context, in " + d(2));
                    var e = Q.config.current;
                    return e.pushFailure.apply(e, arguments);
                }, Q.assert = P.prototype = {
                    expect: function(e) {
                        return 1 !== arguments.length ? this.test.expected : void (this.test.expected = e);
                    },
                    async: function(e) {
                        var t = this.test, n = !1, r = e;
                        return "undefined" == typeof r && (r = 1), t.semaphore += 1, t.usedAsync = !0, b(), 
                        function() {
                            return n ? void t.pushFailure("Too many calls to the `assert.async` callback", d(2)) : (r -= 1, 
                            void (r > 0 || (t.semaphore -= 1, n = !0, y())));
                        };
                    },
                    push: function(e, t, n, r, i) {
                        var o = this instanceof P ? this : Q.config.current.assert;
                        return o.pushResult({
                            result: e,
                            actual: t,
                            expected: n,
                            message: r,
                            negative: i
                        });
                    },
                    pushResult: function(e) {
                        var t = this, n = t instanceof P && t.test || Q.config.current;
                        if (!n) throw new Error("assertion outside test context, in " + d(2));
                        return n.usedAsync === !0 && 0 === n.semaphore && n.pushFailure("Assertion after the final `assert.async` was resolved", d(2)), 
                        t instanceof P || (t = n.assert), t.test.pushResult(e);
                    },
                    ok: function(e, t) {
                        t = t || (e ? "okay" : "failed, expected argument to be truthy, was: " + Q.dump.parse(e)), 
                        this.pushResult({
                            result: !!e,
                            actual: e,
                            expected: !0,
                            message: t
                        });
                    },
                    notOk: function(e, t) {
                        t = t || (e ? "failed, expected argument to be falsy, was: " + Q.dump.parse(e) : "okay"), 
                        this.pushResult({
                            result: !e,
                            actual: e,
                            expected: !1,
                            message: t
                        });
                    },
                    equal: function(e, t, n) {
                        this.pushResult({
                            result: t == e,
                            actual: e,
                            expected: t,
                            message: n
                        });
                    },
                    notEqual: function(e, t, n) {
                        this.pushResult({
                            result: t != e,
                            actual: e,
                            expected: t,
                            message: n,
                            negative: !0
                        });
                    },
                    propEqual: function(e, t, n) {
                        e = u(e), t = u(t), this.pushResult({
                            result: Q.equiv(e, t),
                            actual: e,
                            expected: t,
                            message: n
                        });
                    },
                    notPropEqual: function(e, t, n) {
                        e = u(e), t = u(t), this.pushResult({
                            result: !Q.equiv(e, t),
                            actual: e,
                            expected: t,
                            message: n,
                            negative: !0
                        });
                    },
                    deepEqual: function(e, t, n) {
                        this.pushResult({
                            result: Q.equiv(e, t),
                            actual: e,
                            expected: t,
                            message: n
                        });
                    },
                    notDeepEqual: function(e, t, n) {
                        this.pushResult({
                            result: !Q.equiv(e, t),
                            actual: e,
                            expected: t,
                            message: n,
                            negative: !0
                        });
                    },
                    strictEqual: function(e, t, n) {
                        this.pushResult({
                            result: t === e,
                            actual: e,
                            expected: t,
                            message: n
                        });
                    },
                    notStrictEqual: function(e, t, n) {
                        this.pushResult({
                            result: t !== e,
                            actual: e,
                            expected: t,
                            message: n,
                            negative: !0
                        });
                    },
                    throws: function(e, t, n) {
                        var r, i, o = t, s = !1, u = this instanceof P && this.test || Q.config.current;
                        null == n && "string" == typeof t && (n = t, t = null), u.ignoreGlobalErrors = !0;
                        try {
                            e.call(u.testEnvironment);
                        } catch (e) {
                            r = e;
                        }
                        u.ignoreGlobalErrors = !1, r && (i = Q.objectType(t), t ? "regexp" === i ? s = t.test(j(r)) : "string" === i ? s = t === j(r) : "function" === i && r instanceof t ? s = !0 : "object" === i ? s = r instanceof t.constructor && r.name === t.name && r.message === t.message : "function" === i && t.call({}, r) === !0 && (o = null, 
                        s = !0) : (s = !0, o = null)), u.assert.pushResult({
                            result: s,
                            actual: r,
                            expected: o,
                            message: n
                        });
                    }
                }, function() {
                    P.prototype.raises = P.prototype.throws;
                }(), Q.equiv = function() {
                    function e(e, t) {
                        return "object" == typeof t && (t = t.valueOf()), "object" == typeof e && (e = e.valueOf()), 
                        t === e;
                    }
                    function t(e, t) {
                        var n = a(e), r = a(t);
                        return e.constructor === t.constructor || (n && null === n.constructor && (n = null), 
                        r && null === r.constructor && (r = null), null === n && r === Object.prototype || null === r && n === Object.prototype);
                    }
                    function n(e) {
                        return "flags" in e ? e.flags : e.toString().match(/[gimuy]*$/)[0];
                    }
                    function r(e, t) {
                        var n = Q.objectType(e);
                        return Q.objectType(t) === n && l[n](t, e);
                    }
                    function i(e, t) {
                        return arguments.length < 2 || (e === t || r(e, t)) && (2 === arguments.length || i.apply(this, [].slice.call(arguments, 1)));
                    }
                    var o = [], s = [], u = [], a = Object.getPrototypeOf || function(e) {
                        return e.__proto__;
                    }, l = {
                        string: e,
                        boolean: e,
                        number: e,
                        null: e,
                        undefined: e,
                        symbol: e,
                        date: e,
                        nan: function() {
                            return !0;
                        },
                        regexp: function(e, t) {
                            return t.source === e.source && n(t) === n(e);
                        },
                        function: function() {
                            var e = o[o.length - 1];
                            return e !== Object && "undefined" != typeof e;
                        },
                        array: function(e, t) {
                            var n, r, o, a, l, c;
                            if (o = t.length, o !== e.length) return !1;
                            for (s.push(t), u.push(e), n = 0; n < o; n++) {
                                for (a = !1, r = 0; r < s.length; r++) if (l = s[r] === t[n], c = u[r] === e[n], 
                                l || c) {
                                    if (!(t[n] === e[n] || l && c)) return s.pop(), u.pop(), !1;
                                    a = !0;
                                }
                                if (!a && !i(t[n], e[n])) return s.pop(), u.pop(), !1;
                            }
                            return s.pop(), u.pop(), !0;
                        },
                        set: function(e, t) {
                            var n, r = !0;
                            return t.size === e.size && (t.forEach(function(t) {
                                n = !1, e.forEach(function(e) {
                                    i(e, t) && (n = !0);
                                }), n || (r = !1);
                            }), r);
                        },
                        map: function(e, t) {
                            var n, r = !0;
                            return t.size === e.size && (t.forEach(function(t, o) {
                                n = !1, e.forEach(function(e, r) {
                                    i([ e, r ], [ t, o ]) && (n = !0);
                                }), n || (r = !1);
                            }), r);
                        },
                        object: function(e, n) {
                            var r, a, l, c, f, d = !0, p = [], h = [];
                            if (t(n, e) === !1) return !1;
                            o.push(n.constructor), s.push(n), u.push(e);
                            for (r in n) {
                                for (l = !1, a = 0; a < s.length; a++) if (c = s[a] === n[r], f = u[a] === e[r], 
                                c || f) {
                                    if (!(n[r] === e[r] || c && f)) {
                                        d = !1;
                                        break;
                                    }
                                    l = !0;
                                }
                                if (p.push(r), !l && !i(n[r], e[r])) {
                                    d = !1;
                                    break;
                                }
                            }
                            s.pop(), u.pop(), o.pop();
                            for (r in e) h.push(r);
                            return d && i(p.sort(), h.sort());
                        }
                    };
                    return i;
                }(), Q.dump = function() {
                    function e(e) {
                        return '"' + e.toString().replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
                    }
                    function t(e) {
                        return e + "";
                    }
                    function n(e, t, n) {
                        var r = o.separator(), i = o.indent(), s = o.indent(1);
                        return t.join && (t = t.join("," + r + s)), t ? [ e, s + t, i + n ].join(r) : e + n;
                    }
                    function r(e, t) {
                        var r = e.length, i = new Array(r);
                        if (o.maxDepth && o.depth > o.maxDepth) return "[object Array]";
                        for (this.up(); r--; ) i[r] = this.parse(e[r], void 0, t);
                        return this.down(), n("[", i, "]");
                    }
                    var i = /^function (\w+)/, o = {
                        parse: function(e, t, n) {
                            n = n || [];
                            var r, i, o, u = s(e, n);
                            return u !== -1 ? "recursion(" + (u - n.length) + ")" : (t = t || this.typeOf(e), 
                            i = this.parsers[t], o = typeof i, "function" === o ? (n.push(e), r = i.call(this, e, n), 
                            n.pop(), r) : "string" === o ? i : this.parsers.error);
                        },
                        typeOf: function(e) {
                            var t;
                            return t = null === e ? "null" : "undefined" == typeof e ? "undefined" : Q.is("regexp", e) ? "regexp" : Q.is("date", e) ? "date" : Q.is("function", e) ? "function" : void 0 !== e.setInterval && void 0 !== e.document && void 0 === e.nodeType ? "window" : 9 === e.nodeType ? "document" : e.nodeType ? "node" : "[object Array]" === _.call(e) || "number" == typeof e.length && void 0 !== e.item && (e.length ? e.item(0) === e[0] : null === e.item(0) && void 0 === e[0]) ? "array" : e.constructor === Error.prototype.constructor ? "error" : typeof e;
                        },
                        separator: function() {
                            return this.multiline ? this.HTML ? "<br />" : "\n" : this.HTML ? "&#160;" : " ";
                        },
                        indent: function(e) {
                            if (!this.multiline) return "";
                            var t = this.indentChar;
                            return this.HTML && (t = t.replace(/\t/g, "   ").replace(/ /g, "&#160;")), new Array(this.depth + (e || 0)).join(t);
                        },
                        up: function(e) {
                            this.depth += e || 1;
                        },
                        down: function(e) {
                            this.depth -= e || 1;
                        },
                        setParser: function(e, t) {
                            this.parsers[e] = t;
                        },
                        quote: e,
                        literal: t,
                        join: n,
                        depth: 1,
                        maxDepth: Q.config.maxDepth,
                        parsers: {
                            window: "[Window]",
                            document: "[Document]",
                            error: function(e) {
                                return 'Error("' + e.message + '")';
                            },
                            unknown: "[Unknown]",
                            null: "null",
                            undefined: "undefined",
                            function: function(e) {
                                var t = "function", r = "name" in e ? e.name : (i.exec(e) || [])[1];
                                return r && (t += " " + r), t += "(", t = [ t, o.parse(e, "functionArgs"), "){" ].join(""), 
                                n(t, o.parse(e, "functionCode"), "}");
                            },
                            array: r,
                            nodelist: r,
                            arguments: r,
                            object: function(e, t) {
                                var r, i, u, a, l, c = [];
                                if (o.maxDepth && o.depth > o.maxDepth) return "[object Object]";
                                o.up(), r = [];
                                for (i in e) r.push(i);
                                l = [ "message", "name" ];
                                for (a in l) i = l[a], i in e && s(i, r) < 0 && r.push(i);
                                for (r.sort(), a = 0; a < r.length; a++) i = r[a], u = e[i], c.push(o.parse(i, "key") + ": " + o.parse(u, void 0, t));
                                return o.down(), n("{", c, "}");
                            },
                            node: function(e) {
                                var t, n, r, i = o.HTML ? "&lt;" : "<", s = o.HTML ? "&gt;" : ">", u = e.nodeName.toLowerCase(), a = i + u, l = e.attributes;
                                if (l) for (n = 0, t = l.length; n < t; n++) r = l[n].nodeValue, r && "inherit" !== r && (a += " " + l[n].nodeName + "=" + o.parse(r, "attribute"));
                                return a += s, 3 !== e.nodeType && 4 !== e.nodeType || (a += e.nodeValue), a + i + "/" + u + s;
                            },
                            functionArgs: function(e) {
                                var t, n = e.length;
                                if (!n) return "";
                                for (t = new Array(n); n--; ) t[n] = String.fromCharCode(97 + n);
                                return " " + t.join(", ") + " ";
                            },
                            key: e,
                            functionCode: "[code]",
                            attribute: e,
                            string: e,
                            date: e,
                            regexp: t,
                            number: t,
                            boolean: t
                        },
                        HTML: !1,
                        indentChar: "  ",
                        multiline: !0
                    };
                    return o;
                }(), Q.jsDump = Q.dump, function() {
                    function e(e) {
                        return function() {
                            var t = new P(Q.config.current);
                            e.apply(t, arguments);
                        };
                    }
                    var t, n = P.prototype;
                    for (t in n) Q[t] = e(n[t]);
                }(), R.document && (!function() {
                    var e, t, n = [ "test", "module", "expect", "asyncTest", "start", "stop", "ok", "notOk", "equal", "notEqual", "propEqual", "notPropEqual", "deepEqual", "notDeepEqual", "strictEqual", "notStrictEqual", "throws", "raises" ];
                    for (e = 0, t = n.length; e < t; e++) A[n[e]] = Q[n[e]];
                }(), A.QUnit = Q), "undefined" != typeof i && i && i.exports && (i.exports = Q, 
                i.exports.QUnit = Q), "undefined" != typeof t && t && (t.QUnit = Q), r = function() {
                    return Q;
                }.call(t, n, t, i), !(void 0 !== r && (i.exports = r)), Q.config.autostart = !1;
            }(function() {
                return this;
            }()), function() {
                function e() {
                    var e, t, n, r, i = {}, o = U.search.slice(1).split("&"), s = o.length;
                    for (e = 0; e < s; e++) o[e] && (t = o[e].split("="), n = decodeURIComponent(t[0]), 
                    r = 1 === t.length || decodeURIComponent(t.slice(1).join("=")), i[n] ? i[n] = [].concat(i[n], r) : i[n] = r);
                    return i;
                }
                function t(e) {
                    return e ? (e += "", e.replace(/['"<>&]/g, function(e) {
                        switch (e) {
                          case "'":
                            return "&#039;";

                          case '"':
                            return "&quot;";

                          case "<":
                            return "&lt;";

                          case ">":
                            return "&gt;";

                          case "&":
                            return "&amp;";
                        }
                    })) : "";
                }
                function n(e, t, n) {
                    e.addEventListener ? e.addEventListener(t, n, !1) : e.attachEvent && e.attachEvent("on" + t, function() {
                        var t = window.event;
                        t.target || (t.target = t.srcElement || P), n.call(e, t);
                    });
                }
                function r(e, t, r) {
                    for (var i = e.length; i--; ) n(e[i], t, r);
                }
                function i(e, t) {
                    return (" " + e.className + " ").indexOf(" " + t + " ") >= 0;
                }
                function o(e, t) {
                    i(e, t) || (e.className += (e.className ? " " : "") + t);
                }
                function s(e, t, n) {
                    n || "undefined" == typeof n && !i(e, t) ? o(e, t) : u(e, t);
                }
                function u(e, t) {
                    for (var n = " " + e.className + " "; n.indexOf(" " + t + " ") >= 0; ) n = n.replace(" " + t + " ", " ");
                    e.className = "function" == typeof n.trim ? n.trim() : n.replace(/^\s+|\s+$/g, "");
                }
                function a(e) {
                    return P.getElementById && P.getElementById(e);
                }
                function l() {
                    var e, n, r, i, o, s = !1, u = I.urlConfig, a = "";
                    for (e = 0; e < u.length; e++) if (r = I.urlConfig[e], "string" == typeof r && (r = {
                        id: r,
                        label: r
                    }), i = t(r.id), o = t(r.tooltip), r.value && "string" != typeof r.value) {
                        if (a += "<label for='qunit-urlconfig-" + i + "' title='" + o + "'>" + r.label + ": </label><select id='qunit-urlconfig-" + i + "' name='" + i + "' title='" + o + "'><option></option>", 
                        QUnit.is("array", r.value)) for (n = 0; n < r.value.length; n++) i = t(r.value[n]), 
                        a += "<option value='" + i + "'" + (I[r.id] === r.value[n] ? (s = !0) && " selected='selected'" : "") + ">" + i + "</option>"; else for (n in r.value) Q.call(r.value, n) && (a += "<option value='" + t(n) + "'" + (I[r.id] === n ? (s = !0) && " selected='selected'" : "") + ">" + t(r.value[n]) + "</option>");
                        I[r.id] && !s && (i = t(I[r.id]), a += "<option value='" + i + "' selected='selected' disabled='disabled'>" + i + "</option>"), 
                        a += "</select>";
                    } else a += "<input id='qunit-urlconfig-" + i + "' name='" + i + "' type='checkbox'" + (r.value ? " value='" + t(r.value) + "'" : "") + (I[r.id] ? " checked='checked'" : "") + " title='" + o + "' /><label for='qunit-urlconfig-" + i + "' title='" + o + "'>" + r.label + "</label>";
                    return a;
                }
                function c() {
                    var e, t, n, r = this, i = {};
                    t = "selectedIndex" in r ? r.options[r.selectedIndex].value || void 0 : r.checked ? r.defaultValue || !0 : void 0, 
                    i[r.name] = t, e = f(i), "hidepassed" === r.name && "replaceState" in window.history ? (QUnit.urlParams[r.name] = t, 
                    I[r.name] = t || !1, n = a("qunit-tests"), n && s(n, "hidepass", t || !1), window.history.replaceState(null, "", e)) : window.location = e;
                }
                function f(e) {
                    var t, n, r, i = "?", o = window.location;
                    e = QUnit.extend(QUnit.extend({}, QUnit.urlParams), e);
                    for (t in e) if (Q.call(e, t) && void 0 !== e[t]) for (n = [].concat(e[t]), r = 0; r < n.length; r++) i += encodeURIComponent(t), 
                    n[r] !== !0 && (i += "=" + encodeURIComponent(n[r])), i += "&";
                    return o.protocol + "//" + o.host + o.pathname + i.slice(0, -1);
                }
                function d() {
                    var e, t = a("qunit-modulefilter"), n = a("qunit-filter-input").value;
                    e = t ? decodeURIComponent(t.options[t.selectedIndex].value) : void 0, window.location = f({
                        module: "" === e ? void 0 : e,
                        filter: "" === n ? void 0 : n,
                        moduleId: void 0,
                        testId: void 0
                    });
                }
                function p() {
                    var e = P.createElement("span");
                    return e.innerHTML = l(), o(e, "qunit-url-config"), r(e.getElementsByTagName("input"), "click", c), 
                    r(e.getElementsByTagName("select"), "change", c), e;
                }
                function h() {
                    var e = P.createElement("form"), t = P.createElement("label"), r = P.createElement("input"), i = P.createElement("button");
                    return o(e, "qunit-filter"), t.innerHTML = "Filter: ", r.type = "text", r.value = I.filter || "", 
                    r.name = "filter", r.id = "qunit-filter-input", i.innerHTML = "Go", t.appendChild(r), 
                    e.appendChild(t), e.appendChild(i), n(e, "submit", function(e) {
                        return d(), e && e.preventDefault && e.preventDefault(), !1;
                    }), e;
                }
                function m() {
                    var e, n = "";
                    if (!O.length) return !1;
                    for (n += "<label for='qunit-modulefilter'>Module: </label><select id='qunit-modulefilter' name='modulefilter'><option value='' " + (void 0 === QUnit.urlParams.module ? "selected='selected'" : "") + ">< All Modules ></option>", 
                    e = 0; e < O.length; e++) n += "<option value='" + t(encodeURIComponent(O[e])) + "' " + (QUnit.urlParams.module === O[e] ? "selected='selected'" : "") + ">" + t(O[e]) + "</option>";
                    return n += "</select>";
                }
                function g() {
                    var e = a("qunit-testrunner-toolbar"), t = P.createElement("span"), r = m();
                    return !(!e || !r) && (t.setAttribute("id", "qunit-modulefilter-container"), t.innerHTML = r, 
                    n(t.lastChild, "change", d), void e.appendChild(t));
                }
                function v() {
                    var e = a("qunit-testrunner-toolbar");
                    e && (e.appendChild(p()), e.appendChild(h()), g());
                }
                function b() {
                    var e = a("qunit-header");
                    e && (e.innerHTML = "<a href='" + t(N) + "'>" + e.innerHTML + "</a> ");
                }
                function y() {
                    var e = a("qunit-banner");
                    e && (e.className = "");
                }
                function w() {
                    var e = a("qunit-tests"), t = a("qunit-testresult");
                    t && t.parentNode.removeChild(t), e && (e.innerHTML = "", t = P.createElement("p"), 
                    t.id = "qunit-testresult", t.className = "result", e.parentNode.insertBefore(t, e), 
                    t.innerHTML = "Running...<br />&#160;");
                }
                function x() {
                    var e = a("qunit-fixture");
                    e && (I.fixture = e.innerHTML);
                }
                function q() {
                    var e = QUnit.config.testId;
                    return !e || e.length <= 0 ? "" : "<div id='qunit-filteredTest'>Rerunning selected tests: " + t(e.join(", ")) + " <a id='qunit-clearFilter' href='" + t(N) + "'>Run all tests</a></div>";
                }
                function E() {
                    var e = a("qunit-userAgent");
                    e && (e.innerHTML = "", e.appendChild(P.createTextNode("QUnit " + QUnit.version + "; " + navigator.userAgent)));
                }
                function k() {
                    var e = a("qunit");
                    e && (e.innerHTML = "<h1 id='qunit-header'>" + t(P.title) + "</h1><h2 id='qunit-banner'></h2><div id='qunit-testrunner-toolbar'></div>" + q() + "<h2 id='qunit-userAgent'></h2><ol id='qunit-tests'></ol>"), 
                    b(), y(), w(), E(), v();
                }
                function T(e) {
                    var t, n, r, i, o, s;
                    for (t = 0, n = e.length; t < n; t++) for (s = e[t], r = 0, i = s.tests.length; r < i; r++) o = s.tests[r], 
                    M(o.name, o.testId, s.name);
                }
                function M(e, t, n) {
                    var r, i, o, s, u = a("qunit-tests");
                    u && (r = P.createElement("strong"), r.innerHTML = C(e, n), i = P.createElement("a"), 
                    i.innerHTML = "Rerun", i.href = f({
                        testId: t
                    }), o = P.createElement("li"), o.appendChild(r), o.appendChild(i), o.id = "qunit-test-output-" + t, 
                    s = P.createElement("ol"), s.className = "qunit-assert-list", o.appendChild(s), 
                    u.appendChild(o));
                }
                function C(e, n) {
                    var r = "";
                    return n && (r = "<span class='module-name'>" + t(n) + "</span>: "), r += "<span class='test-name'>" + t(e) + "</span>";
                }
                function S(e) {
                    return e.replace(/<\/?[^>]+(>|$)/g, "").replace(/\&quot;/g, "").replace(/\s+/g, "");
                }
                var U = "undefined" != typeof window && window.location;
                if (U) {
                    var F = e();
                    if (QUnit.urlParams = F, QUnit.config.moduleId = [].concat(F.moduleId || []), QUnit.config.testId = [].concat(F.testId || []), 
                    QUnit.config.module = F.module, QUnit.config.filter = F.filter, F.seed === !0 ? QUnit.config.seed = Math.random().toString(36).slice(2) : F.seed && (QUnit.config.seed = F.seed), 
                    QUnit.config.urlConfig.push({
                        id: "hidepassed",
                        label: "Hide passed tests",
                        tooltip: "Only show tests and assertions that fail. Stored as query-strings."
                    }, {
                        id: "noglobals",
                        label: "Check for Globals",
                        tooltip: "Enabling this will test if any test introduces new properties on the global object (`window` in Browsers). Stored as query-strings."
                    }, {
                        id: "notrycatch",
                        label: "No try-catch",
                        tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings."
                    }), QUnit.begin(function() {
                        var e, t, n = QUnit.config.urlConfig;
                        for (e = 0; e < n.length; e++) t = QUnit.config.urlConfig[e], "string" != typeof t && (t = t.id), 
                        void 0 === QUnit.config[t] && (QUnit.config[t] = F[t]);
                    }), "undefined" != typeof window && window.document) {
                        QUnit.init = function() {
                            var e = QUnit.config;
                            e.stats = {
                                all: 0,
                                bad: 0
                            }, e.moduleStats = {
                                all: 0,
                                bad: 0
                            }, e.started = 0, e.updateRate = 1e3, e.blocking = !1, e.autostart = !0, e.autorun = !1, 
                            e.filter = "", e.queue = [], k();
                        };
                        var I = QUnit.config, P = window.document, j = !1, Q = Object.prototype.hasOwnProperty, N = f({
                            filter: void 0,
                            module: void 0,
                            moduleId: void 0,
                            testId: void 0
                        }), D = {
                            sessionStorage: function() {
                                var e = "qunit-test-string";
                                try {
                                    return sessionStorage.setItem(e, e), sessionStorage.removeItem(e), !0;
                                } catch (e) {
                                    return !1;
                                }
                            }()
                        }, O = [];
                        QUnit.begin(function(e) {
                            var t, n, r;
                            for (t = 0; t < e.modules.length; t++) n = e.modules[t], n.name && O.push(n.name);
                            O.sort(function(e, t) {
                                return e.localeCompare(t);
                            }), x(), k(), T(e.modules), r = a("qunit-tests"), r && I.hidepassed && o(r, "hidepass");
                        }), QUnit.done(function(e) {
                            var t, n, r = a("qunit-banner"), i = a("qunit-tests"), o = [ "Tests completed in ", e.runtime, " milliseconds.<br />", "<span class='passed'>", e.passed, "</span> assertions of <span class='total'>", e.total, "</span> passed, <span class='failed'>", e.failed, "</span> failed." ].join("");
                            if (r && (r.className = e.failed ? "qunit-fail" : "qunit-pass"), i && (a("qunit-testresult").innerHTML = o), 
                            I.altertitle && P.title && (P.title = [ e.failed ? "✖" : "✔", P.title.replace(/^[\u2714\u2716] /i, "") ].join(" ")), 
                            I.reorder && D.sessionStorage && 0 === e.failed) for (t = 0; t < sessionStorage.length; t++) n = sessionStorage.key(t++), 
                            0 === n.indexOf("qunit-test-") && sessionStorage.removeItem(n);
                            I.scrolltop && window.scrollTo && window.scrollTo(0, 0);
                        }), QUnit.testStart(function(e) {
                            var t, n, r;
                            n = a("qunit-test-output-" + e.testId), n ? n.className = "running" : M(e.name, e.testId, e.module), 
                            t = a("qunit-testresult"), t && (r = QUnit.config.reorder && D.sessionStorage && +sessionStorage.getItem("qunit-test-" + e.module + "-" + e.name), 
                            t.innerHTML = (r ? "Rerunning previously failed test: <br />" : "Running: <br />") + C(e.name, e.module));
                        }), QUnit.log(function(e) {
                            var n, r, i, o, s, u, l = !1, c = a("qunit-test-output-" + e.testId);
                            c && (i = t(e.message) || (e.result ? "okay" : "failed"), i = "<span class='test-message'>" + i + "</span>", 
                            i += "<span class='runtime'>@ " + e.runtime + " ms</span>", !e.result && Q.call(e, "expected") ? (o = e.negative ? "NOT " + QUnit.dump.parse(e.expected) : QUnit.dump.parse(e.expected), 
                            s = QUnit.dump.parse(e.actual), i += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + t(o) + "</pre></td></tr>", 
                            s !== o ? (i += "<tr class='test-actual'><th>Result: </th><td><pre>" + t(s) + "</pre></td></tr>", 
                            /^(true|false)$/.test(s) || /^(true|false)$/.test(o) || (u = QUnit.diff(o, s), l = S(u).length !== S(o).length + S(s).length), 
                            l && (i += "<tr class='test-diff'><th>Diff: </th><td><pre>" + u + "</pre></td></tr>")) : i += o.indexOf("[object Array]") !== -1 || o.indexOf("[object Object]") !== -1 ? "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the depth of object is more than current max depth (" + QUnit.config.maxDepth + ").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to  run with a higher max depth or <a href='" + t(f({
                                maxDepth: -1
                            })) + "'>Rerun</a> without max depth.</p></td></tr>" : "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the expected and actual results have an equivalent serialization</td></tr>", 
                            e.source && (i += "<tr class='test-source'><th>Source: </th><td><pre>" + t(e.source) + "</pre></td></tr>"), 
                            i += "</table>") : !e.result && e.source && (i += "<table><tr class='test-source'><th>Source: </th><td><pre>" + t(e.source) + "</pre></td></tr></table>"), 
                            n = c.getElementsByTagName("ol")[0], r = P.createElement("li"), r.className = e.result ? "pass" : "fail", 
                            r.innerHTML = i, n.appendChild(r));
                        }), QUnit.testDone(function(e) {
                            var t, r, i, u, l, c, f, d, p, h = a("qunit-tests");
                            h && (i = a("qunit-test-output-" + e.testId), u = i.getElementsByTagName("ol")[0], 
                            l = e.passed, c = e.failed, I.reorder && D.sessionStorage && (c ? sessionStorage.setItem("qunit-test-" + e.module + "-" + e.name, c) : sessionStorage.removeItem("qunit-test-" + e.module + "-" + e.name)), 
                            0 === c ? o(u, "qunit-collapsed") : c && I.collapse && !j ? j = !0 : o(u, "qunit-collapsed"), 
                            t = i.firstChild, f = c ? "<b class='failed'>" + c + "</b>, <b class='passed'>" + l + "</b>, " : "", 
                            t.innerHTML += " <b class='counts'>(" + f + e.assertions.length + ")</b>", e.skipped ? (i.className = "skipped", 
                            d = P.createElement("em"), d.className = "qunit-skipped-label", d.innerHTML = "skipped", 
                            i.insertBefore(d, t)) : (n(t, "click", function() {
                                s(u, "qunit-collapsed");
                            }), i.className = c ? "fail" : "pass", r = P.createElement("span"), r.className = "runtime", 
                            r.innerHTML = e.runtime + " ms", i.insertBefore(r, u)), e.source && (p = P.createElement("p"), 
                            p.innerHTML = "<strong>Source: </strong>" + e.source, o(p, "qunit-source"), 0 === c && o(p, "qunit-collapsed"), 
                            n(t, "click", function() {
                                s(p, "qunit-collapsed");
                            }), i.appendChild(p)));
                        });
                        var L = function(e) {
                            return !(e && e.version && e.version.major > 0);
                        }(window.phantom);
                        L && "complete" === P.readyState ? QUnit.load() : n(window, "load", QUnit.load), 
                        QUnit.diff = function() {
                            function e() {}
                            var n = -1, r = 1, i = 0;
                            return e.prototype.DiffMain = function(e, t, n) {
                                var r, o, s, u, a, l;
                                if (r = new Date().getTime() + 1e3, null === e || null === t) throw new Error("Null input. (DiffMain)");
                                return e === t ? e ? [ [ i, e ] ] : [] : ("undefined" == typeof n && (n = !0), o = n, 
                                s = this.diffCommonPrefix(e, t), u = e.substring(0, s), e = e.substring(s), t = t.substring(s), 
                                s = this.diffCommonSuffix(e, t), a = e.substring(e.length - s), e = e.substring(0, e.length - s), 
                                t = t.substring(0, t.length - s), l = this.diffCompute(e, t, o, r), u && l.unshift([ i, u ]), 
                                a && l.push([ i, a ]), this.diffCleanupMerge(l), l);
                            }, e.prototype.diffCleanupEfficiency = function(e) {
                                var t, o, s, u, a, l, c, f, d;
                                for (t = !1, o = [], s = 0, u = null, a = 0, l = !1, c = !1, f = !1, d = !1; a < e.length; ) e[a][0] === i ? (e[a][1].length < 4 && (f || d) ? (o[s++] = a, 
                                l = f, c = d, u = e[a][1]) : (s = 0, u = null), f = d = !1) : (e[a][0] === n ? d = !0 : f = !0, 
                                u && (l && c && f && d || u.length < 2 && l + c + f + d === 3) && (e.splice(o[s - 1], 0, [ n, u ]), 
                                e[o[s - 1] + 1][0] = r, s--, u = null, l && c ? (f = d = !0, s = 0) : (s--, a = s > 0 ? o[s - 1] : -1, 
                                f = d = !1), t = !0)), a++;
                                t && this.diffCleanupMerge(e);
                            }, e.prototype.diffPrettyHtml = function(e) {
                                var o, s, u, a = [];
                                for (u = 0; u < e.length; u++) switch (o = e[u][0], s = e[u][1], o) {
                                  case r:
                                    a[u] = "<ins>" + t(s) + "</ins>";
                                    break;

                                  case n:
                                    a[u] = "<del>" + t(s) + "</del>";
                                    break;

                                  case i:
                                    a[u] = "<span>" + t(s) + "</span>";
                                }
                                return a.join("");
                            }, e.prototype.diffCommonPrefix = function(e, t) {
                                var n, r, i, o;
                                if (!e || !t || e.charAt(0) !== t.charAt(0)) return 0;
                                for (i = 0, r = Math.min(e.length, t.length), n = r, o = 0; i < n; ) e.substring(o, n) === t.substring(o, n) ? (i = n, 
                                o = i) : r = n, n = Math.floor((r - i) / 2 + i);
                                return n;
                            }, e.prototype.diffCommonSuffix = function(e, t) {
                                var n, r, i, o;
                                if (!e || !t || e.charAt(e.length - 1) !== t.charAt(t.length - 1)) return 0;
                                for (i = 0, r = Math.min(e.length, t.length), n = r, o = 0; i < n; ) e.substring(e.length - n, e.length - o) === t.substring(t.length - n, t.length - o) ? (i = n, 
                                o = i) : r = n, n = Math.floor((r - i) / 2 + i);
                                return n;
                            }, e.prototype.diffCompute = function(e, t, o, s) {
                                var u, a, l, c, f, d, p, h, m, g, v, b;
                                return e ? t ? (a = e.length > t.length ? e : t, l = e.length > t.length ? t : e, 
                                c = a.indexOf(l), c !== -1 ? (u = [ [ r, a.substring(0, c) ], [ i, l ], [ r, a.substring(c + l.length) ] ], 
                                e.length > t.length && (u[0][0] = u[2][0] = n), u) : 1 === l.length ? [ [ n, e ], [ r, t ] ] : (f = this.diffHalfMatch(e, t), 
                                f ? (d = f[0], h = f[1], p = f[2], m = f[3], g = f[4], v = this.DiffMain(d, p, o, s), 
                                b = this.DiffMain(h, m, o, s), v.concat([ [ i, g ] ], b)) : o && e.length > 100 && t.length > 100 ? this.diffLineMode(e, t, s) : this.diffBisect(e, t, s))) : [ [ n, e ] ] : [ [ r, t ] ];
                            }, e.prototype.diffHalfMatch = function(e, t) {
                                function n(e, t, n) {
                                    var r, i, s, u, a, l, c, f, d;
                                    for (r = e.substring(n, n + Math.floor(e.length / 4)), i = -1, s = ""; (i = t.indexOf(r, i + 1)) !== -1; ) u = o.diffCommonPrefix(e.substring(n), t.substring(i)), 
                                    a = o.diffCommonSuffix(e.substring(0, n), t.substring(0, i)), s.length < a + u && (s = t.substring(i - a, i) + t.substring(i, i + u), 
                                    l = e.substring(0, n - a), c = e.substring(n + u), f = t.substring(0, i - a), d = t.substring(i + u));
                                    return 2 * s.length >= e.length ? [ l, c, f, d, s ] : null;
                                }
                                var r, i, o, s, u, a, l, c, f, d, p;
                                return r = e.length > t.length ? e : t, i = e.length > t.length ? t : e, r.length < 4 || 2 * i.length < r.length ? null : (o = this, 
                                f = n(r, i, Math.ceil(r.length / 4)), d = n(r, i, Math.ceil(r.length / 2)), f || d ? (p = d ? f && f[4].length > d[4].length ? f : d : f, 
                                e.length > t.length ? (s = p[0], l = p[1], a = p[2], u = p[3]) : (a = p[0], u = p[1], 
                                s = p[2], l = p[3]), c = p[4], [ s, l, a, u, c ]) : null);
                            }, e.prototype.diffLineMode = function(e, t, o) {
                                var s, u, a, l, c, f, d, p, h;
                                for (s = this.diffLinesToChars(e, t), e = s.chars1, t = s.chars2, a = s.lineArray, 
                                u = this.DiffMain(e, t, !1, o), this.diffCharsToLines(u, a), this.diffCleanupSemantic(u), 
                                u.push([ i, "" ]), l = 0, f = 0, c = 0, p = "", d = ""; l < u.length; ) {
                                    switch (u[l][0]) {
                                      case r:
                                        c++, d += u[l][1];
                                        break;

                                      case n:
                                        f++, p += u[l][1];
                                        break;

                                      case i:
                                        if (f >= 1 && c >= 1) {
                                            for (u.splice(l - f - c, f + c), l = l - f - c, s = this.DiffMain(p, d, !1, o), 
                                            h = s.length - 1; h >= 0; h--) u.splice(l, 0, s[h]);
                                            l += s.length;
                                        }
                                        c = 0, f = 0, p = "", d = "";
                                    }
                                    l++;
                                }
                                return u.pop(), u;
                            }, e.prototype.diffBisect = function(e, t, i) {
                                var o, s, u, a, l, c, f, d, p, h, m, g, v, b, y, w, x, q, E, k, T, M, C;
                                for (o = e.length, s = t.length, u = Math.ceil((o + s) / 2), a = u, l = 2 * u, c = new Array(l), 
                                f = new Array(l), d = 0; d < l; d++) c[d] = -1, f[d] = -1;
                                for (c[a + 1] = 0, f[a + 1] = 0, p = o - s, h = p % 2 !== 0, m = 0, g = 0, v = 0, 
                                b = 0, T = 0; T < u && !(new Date().getTime() > i); T++) {
                                    for (M = -T + m; M <= T - g; M += 2) {
                                        for (w = a + M, x = M === -T || M !== T && c[w - 1] < c[w + 1] ? c[w + 1] : c[w - 1] + 1, 
                                        E = x - M; x < o && E < s && e.charAt(x) === t.charAt(E); ) x++, E++;
                                        if (c[w] = x, x > o) g += 2; else if (E > s) m += 2; else if (h && (y = a + p - M, 
                                        y >= 0 && y < l && f[y] !== -1 && (q = o - f[y], x >= q))) return this.diffBisectSplit(e, t, x, E, i);
                                    }
                                    for (C = -T + v; C <= T - b; C += 2) {
                                        for (y = a + C, q = C === -T || C !== T && f[y - 1] < f[y + 1] ? f[y + 1] : f[y - 1] + 1, 
                                        k = q - C; q < o && k < s && e.charAt(o - q - 1) === t.charAt(s - k - 1); ) q++, 
                                        k++;
                                        if (f[y] = q, q > o) b += 2; else if (k > s) v += 2; else if (!h && (w = a + p - C, 
                                        w >= 0 && w < l && c[w] !== -1 && (x = c[w], E = a + x - w, q = o - q, x >= q))) return this.diffBisectSplit(e, t, x, E, i);
                                    }
                                }
                                return [ [ n, e ], [ r, t ] ];
                            }, e.prototype.diffBisectSplit = function(e, t, n, r, i) {
                                var o, s, u, a, l, c;
                                return o = e.substring(0, n), u = t.substring(0, r), s = e.substring(n), a = t.substring(r), 
                                l = this.DiffMain(o, u, !1, i), c = this.DiffMain(s, a, !1, i), l.concat(c);
                            }, e.prototype.diffCleanupSemantic = function(e) {
                                var t, o, s, u, a, l, c, f, d, p, h, m, g;
                                for (t = !1, o = [], s = 0, u = null, a = 0, f = 0, d = 0, l = 0, c = 0; a < e.length; ) e[a][0] === i ? (o[s++] = a, 
                                f = l, d = c, l = 0, c = 0, u = e[a][1]) : (e[a][0] === r ? l += e[a][1].length : c += e[a][1].length, 
                                u && u.length <= Math.max(f, d) && u.length <= Math.max(l, c) && (e.splice(o[s - 1], 0, [ n, u ]), 
                                e[o[s - 1] + 1][0] = r, s--, s--, a = s > 0 ? o[s - 1] : -1, f = 0, d = 0, l = 0, 
                                c = 0, u = null, t = !0)), a++;
                                for (t && this.diffCleanupMerge(e), a = 1; a < e.length; ) e[a - 1][0] === n && e[a][0] === r && (p = e[a - 1][1], 
                                h = e[a][1], m = this.diffCommonOverlap(p, h), g = this.diffCommonOverlap(h, p), 
                                m >= g ? (m >= p.length / 2 || m >= h.length / 2) && (e.splice(a, 0, [ i, h.substring(0, m) ]), 
                                e[a - 1][1] = p.substring(0, p.length - m), e[a + 1][1] = h.substring(m), a++) : (g >= p.length / 2 || g >= h.length / 2) && (e.splice(a, 0, [ i, p.substring(0, g) ]), 
                                e[a - 1][0] = r, e[a - 1][1] = h.substring(0, h.length - g), e[a + 1][0] = n, e[a + 1][1] = p.substring(g), 
                                a++), a++), a++;
                            }, e.prototype.diffCommonOverlap = function(e, t) {
                                var n, r, i, o, s, u, a;
                                if (n = e.length, r = t.length, 0 === n || 0 === r) return 0;
                                if (n > r ? e = e.substring(n - r) : n < r && (t = t.substring(0, n)), i = Math.min(n, r), 
                                e === t) return i;
                                for (o = 0, s = 1; ;) {
                                    if (u = e.substring(i - s), a = t.indexOf(u), a === -1) return o;
                                    s += a, 0 !== a && e.substring(i - s) !== t.substring(0, s) || (o = s, s++);
                                }
                            }, e.prototype.diffLinesToChars = function(e, t) {
                                function n(e) {
                                    var t, n, o, s, u;
                                    for (t = "", n = 0, o = -1, s = r.length; o < e.length - 1; ) o = e.indexOf("\n", n), 
                                    o === -1 && (o = e.length - 1), u = e.substring(n, o + 1), n = o + 1, (i.hasOwnProperty ? i.hasOwnProperty(u) : void 0 !== i[u]) ? t += String.fromCharCode(i[u]) : (t += String.fromCharCode(s), 
                                    i[u] = s, r[s++] = u);
                                    return t;
                                }
                                var r, i, o, s;
                                return r = [], i = {}, r[0] = "", o = n(e), s = n(t), {
                                    chars1: o,
                                    chars2: s,
                                    lineArray: r
                                };
                            }, e.prototype.diffCharsToLines = function(e, t) {
                                var n, r, i, o;
                                for (n = 0; n < e.length; n++) {
                                    for (r = e[n][1], i = [], o = 0; o < r.length; o++) i[o] = t[r.charCodeAt(o)];
                                    e[n][1] = i.join("");
                                }
                            }, e.prototype.diffCleanupMerge = function(e) {
                                var t, o, s, u, a, l, c, f, d;
                                for (e.push([ i, "" ]), t = 0, o = 0, s = 0, a = "", u = ""; t < e.length; ) switch (e[t][0]) {
                                  case r:
                                    s++, u += e[t][1], t++;
                                    break;

                                  case n:
                                    o++, a += e[t][1], t++;
                                    break;

                                  case i:
                                    o + s > 1 ? (0 !== o && 0 !== s && (l = this.diffCommonPrefix(u, a), 0 !== l && (t - o - s > 0 && e[t - o - s - 1][0] === i ? e[t - o - s - 1][1] += u.substring(0, l) : (e.splice(0, 0, [ i, u.substring(0, l) ]), 
                                    t++), u = u.substring(l), a = a.substring(l)), l = this.diffCommonSuffix(u, a), 
                                    0 !== l && (e[t][1] = u.substring(u.length - l) + e[t][1], u = u.substring(0, u.length - l), 
                                    a = a.substring(0, a.length - l))), 0 === o ? e.splice(t - s, o + s, [ r, u ]) : 0 === s ? e.splice(t - o, o + s, [ n, a ]) : e.splice(t - o - s, o + s, [ n, a ], [ r, u ]), 
                                    t = t - o - s + (o ? 1 : 0) + (s ? 1 : 0) + 1) : 0 !== t && e[t - 1][0] === i ? (e[t - 1][1] += e[t][1], 
                                    e.splice(t, 1)) : t++, s = 0, o = 0, a = "", u = "";
                                }
                                for ("" === e[e.length - 1][1] && e.pop(), c = !1, t = 1; t < e.length - 1; ) e[t - 1][0] === i && e[t + 1][0] === i && (f = e[t][1], 
                                d = f.substring(f.length - e[t - 1][1].length), d === e[t - 1][1] ? (e[t][1] = e[t - 1][1] + e[t][1].substring(0, e[t][1].length - e[t - 1][1].length), 
                                e[t + 1][1] = e[t - 1][1] + e[t + 1][1], e.splice(t - 1, 1), c = !0) : f.substring(0, e[t + 1][1].length) === e[t + 1][1] && (e[t - 1][1] += e[t + 1][1], 
                                e[t][1] = e[t][1].substring(e[t + 1][1].length) + e[t + 1][1], e.splice(t + 1, 1), 
                                c = !0)), t++;
                                c && this.diffCleanupMerge(e);
                            }, function(t, n) {
                                var r, i, o;
                                return r = new e(), i = r.DiffMain(t, n), r.diffCleanupEfficiency(i), o = r.diffPrettyHtml(i);
                            };
                        }();
                    }
                }
            }();
        }).call(t, n(849), n(25)(e));
    },
    849: function(e, t) {
        function n() {
            throw new Error("setTimeout has not been defined");
        }
        function r() {
            throw new Error("clearTimeout has not been defined");
        }
        function i(e) {
            if (c === setTimeout) return setTimeout(e, 0);
            if ((c === n || !c) && setTimeout) return c = setTimeout, setTimeout(e, 0);
            try {
                return c(e, 0);
            } catch (t) {
                try {
                    return c.call(null, e, 0);
                } catch (t) {
                    return c.call(this, e, 0);
                }
            }
        }
        function o(e) {
            if (f === clearTimeout) return clearTimeout(e);
            if ((f === r || !f) && clearTimeout) return f = clearTimeout, clearTimeout(e);
            try {
                return f(e);
            } catch (t) {
                try {
                    return f.call(null, e);
                } catch (t) {
                    return f.call(this, e);
                }
            }
        }
        function s() {
            m && p && (m = !1, p.length ? h = p.concat(h) : g = -1, h.length && u());
        }
        function u() {
            if (!m) {
                var e = i(s);
                m = !0;
                for (var t = h.length; t; ) {
                    for (p = h, h = []; ++g < t; ) p && p[g].run();
                    g = -1, t = h.length;
                }
                p = null, m = !1, o(e);
            }
        }
        function a(e, t) {
            this.fun = e, this.array = t;
        }
        function l() {}
        var c, f, d = e.exports = {};
        !function() {
            try {
                c = "function" == typeof setTimeout ? setTimeout : n;
            } catch (e) {
                c = n;
            }
            try {
                f = "function" == typeof clearTimeout ? clearTimeout : r;
            } catch (e) {
                f = r;
            }
        }();
        var p, h = [], m = !1, g = -1;
        d.nextTick = function(e) {
            var t = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
            h.push(new a(e, t)), 1 !== h.length || m || i(u);
        }, a.prototype.run = function() {
            this.fun.apply(null, this.array);
        }, d.title = "browser", d.browser = !0, d.env = {}, d.argv = [], d.version = "", 
        d.versions = {}, d.on = l, d.addListener = l, d.once = l, d.off = l, d.removeListener = l, 
        d.removeAllListeners = l, d.emit = l, d.prependListener = l, d.prependOnceListener = l, 
        d.listeners = function(e) {
            return [];
        }, d.binding = function(e) {
            throw new Error("process.binding is not supported");
        }, d.cwd = function() {
            return "/";
        }, d.chdir = function(e) {
            throw new Error("process.chdir is not supported");
        }, d.umask = function() {
            return 0;
        };
    },
    850: function(e, t, n) {
        var r, i;
        !function(o, s) {
            "use strict";
            r = s, i = "function" == typeof r ? r.call(t, n, t, e) : r, !(void 0 !== i && (e.exports = i));
        }(this, function() {
            "use strict";
            function e(e, t) {
                var n;
                for (n in t) t.hasOwnProperty(n) && ("undefined" == typeof t[n] ? delete e[n] : e[n] = t[n]);
                return e;
            }
            function t(e, t) {
                var n;
                for (n = 0; n < e.length; n += 1) if (e[n] === t) return n;
                return -1;
            }
            function n(e, n) {
                var r = t(e, n);
                return r !== -1 ? e.splice(r, 1) : [];
            }
            function r(e) {
                return "undefined" != typeof e && "undefined" != typeof e.requireExpects && e.requireExpects;
            }
            function i(e) {
                return !!e.result;
            }
            function o(e) {
                return !i(e);
            }
            function s(e) {
                return o(e) && "undefined" == typeof e.expected && "undefined" == typeof e.actual;
            }
            function u(e) {
                return e.replace(/(\r?\n)/g, "$&# ");
            }
            function a(e) {
                return e.replace(/^\s+/, "");
            }
            function l(e) {
                return e;
            }
            function c(e, t, n, r) {
                e.push(t + ": " + r(n));
            }
            function f(e, t, n, r, i) {
                e && "undefined" != typeof r && c(t, n, r, i);
            }
            function d(e, t) {
                return t ? e + " - " + u(t) : e;
            }
            function p(p, v, b) {
                function y(e) {
                    return T.config[e];
                }
                function w(e) {
                    if (i(e)) return e.message;
                    var t = [];
                    return e.message && t.push(e.message), y("showExpectationOnFailure") && !s(e) && (c(t, "expected", e.expected, U), 
                    c(t, "got", e.actual, U)), f(y("showTestNameOnFailure"), t, "test", e.name, l), 
                    f(y("showModuleNameOnFailure"), t, "module", e.module, l), f(y("showSourceOnFailure"), t, "source", e.source, a), 
                    t.join(", ");
                }
                function x(e) {
                    T.puts(T.config.initialCount + ".." + e);
                }
                function q(e) {
                    var r;
                    t(C, e) !== -1 && (r = k.config[e], "undefined" != typeof r && n(r, S[e]));
                }
                function E(e) {
                    var t;
                    for (t = 0; t < e.length; t += 1) q(e[t]);
                }
                if (!p) throw new Error('should pass QUnit object reference. Please check QUnit\'s "require" path if you are using Node.js (or any CommonJS env).');
                if ("function" != typeof v) throw new Error("should pass print-like function");
                var k = p, T = {}, M = function(e, t) {
                    b && "object" == typeof b && "undefined" != typeof b[e] && (v('# WARNING: Option "' + e + '" is deprecated and will be removed in future version.'), 
                    t(b[e]));
                }, C = [ "moduleStart", "testStart", "log", "testDone", "done" ], S = {}, U = function() {
                    return "undefined" != typeof k.dump && "function" == typeof k.dump.parse ? function(e) {
                        return k.dump.parse(e);
                    } : "undefined" != typeof k.jsDump && "function" == typeof k.jsDump.parse ? function(e) {
                        return k.jsDump.parse(e);
                    } : l;
                }();
                return T.config = e({
                    initialCount: 1,
                    showModuleNameOnFailure: !0,
                    showTestNameOnFailure: !0,
                    showExpectationOnFailure: !0,
                    showSourceOnFailure: !0
                }, b), M("noPlan", function(e) {
                    v('# Now QUnit-TAP works as with "noPlan: true" by default. If you want to delare plan explicitly, please use "QUnit.config.requireExpects" option instead.'), 
                    T.config.noPlan = e;
                }), M("count", function(e) {
                    T.config.initialCount = e + 1;
                }), M("showDetailsOnFailure", function(e) {
                    T.config.showModuleNameOnFailure = e, T.config.showTestNameOnFailure = e, T.config.showExpectationOnFailure = e, 
                    T.config.showSourceOnFailure = e;
                }), T.VERSION = h, T.puts = v, T.count = T.config.initialCount - 1, T.expectedCount = T.config.initialCount - 1, 
                T.explain = U, T.note = function(e) {
                    T.puts(u("# " + e));
                }, T.diag = function(e) {
                    return T.note(e), !1;
                }, T.moduleStart = function(e) {
                    var t = "string" == typeof e ? e : e.name;
                    T.note("module: " + t);
                }, T.testStart = function(e) {
                    var t = "string" == typeof e ? e : e.name;
                    T.note("test: " + t);
                }, T.log = function(e) {
                    var t = "";
                    T.count += 1, o(e) && (t += "not "), t += "ok " + T.count, T.puts(d(t, w(e)));
                }, T.testDone = function() {
                    r(k.config) && (T.expectedCount += k.config.current.expected);
                }, T.done = function() {
                    ("undefined" == typeof T.config.noPlan || T.config.noPlan) && x(r(k.config) ? T.expectedCount : T.count);
                }, T.unsubscribe = function() {
                    "undefined" != typeof k.config && E(0 === arguments.length ? C : m.apply(arguments));
                }, function() {
                    var e, t, n, r = g(k);
                    for (t = 0; t < C.length; t += 1) e = C[t], n = r(k, T, e), S[e] = n;
                }(), T;
            }
            var h = "1.5.1", m = Array.prototype.slice, g = function(e) {
                return function(e, t, n) {
                    var r = e[n], i = function() {
                        t[n].apply(t, m.apply(arguments));
                    };
                    return r(i), i;
                };
            };
            return p.qunitTap = function() {
                throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require("qunit-tap") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');
            }, p;
        });
    },
    851: function(e, t, n) {
        (function(e) {
            "use strict";
            var t = !1;
            QUnit.config.autostart = !1;
            var n = window.onerror;
            window.onerror = null, QUnit.begin(function() {
                window.onerror = function(e, t, r) {
                    var i = !1;
                    return n && (i = n(e, t, r)), QUnit.config.current && QUnit.config.current.async && QUnit.start(), 
                    i;
                };
            }), QUnit.moduleStart(function() {
                t = !0;
            }), QUnit.done(function() {
                window.setTimeout(function() {
                    console.log("cockpittest-tap-done");
                }, 0), window.onerror = null;
            });
            var r = /^((not )?ok [0-9]+ (- )?)(.*)$/;
            qunitTap(QUnit, function() {
                if (1 == arguments.length && QUnit.config.current) {
                    var e = r.exec(arguments[0]);
                    if (e) return void console.log(e[1] + QUnit.config.current.testName + ": " + e[4]);
                }
                console.log.apply(console, arguments);
            }), window.setTimeout(function() {
                t || (console.log("QUnit not started by test"), console.log("cockpittest-tap-error"));
            }, 2e4), window.tests_included = !0, e && e.exports && (e.exports = QUnit);
        }).call(t, n(25)(e));
    },
    852: function(e, t) {}
});
//# sourceMappingURL=test-machines.min.js.map