{"version":3,"sources":["webpack:///machines/test-machines.min.js","webpack:///webpack/bootstrap 46570b2712b1dbda5b3f?0dc6","webpack:///../pkg/machines/test-machines.js","webpack:///../~/webpack/buildin/module.js?17a8","webpack:///../pkg/machines/config.es6?b225","webpack:///../pkg/machines/helpers.es6?92a0","webpack:///external \"cockpit\"?478e","webpack:///../pkg/lib/qunit-tests.js","webpack:///../~/qunitjs/qunit/qunit.js","webpack:///../~/process/browser.js","webpack:///../~/qunit-tap/lib/qunit-tap.js","webpack:///../pkg/lib/qunit-config.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","QUnit","assert","helpers","test","equal","toFixedPrecision","start","14","webpackPolyfill","deprecate","paths","children","16","Object","defineProperty","value","VMS_CONFIG","DefaultRefreshInterval","Virsh","connections","system","params","session","isDev","default","17","_interopRequireDefault","obj","__esModule","toGigaBytes","amount","currentUnit","result","console","error","toFixed","fixed1","toKiloBytes","isEmpty","str","length","arrayEquals","arr1","arr2","diff","filter","v","index","logDebug","msg","_config2","_console","_len","arguments","Array","_key","log","apply","concat","logError","_console2","_len2","_key2","rephraseUI","key","original","transform","precision","power","Math","pow","absValue","abs","round","String","floor","fraction","padding","max","join","isFirefox","window","navigator","userAgent","toLowerCase","indexOf","fileDownload","_ref","data","_ref$fileName","fileName","undefined","_ref$mimeType","mimeType","a","document","createElement","href","encodeURIComponent","body","appendChild","setAttribute","click","f","width","height","nicerText","src","setTimeout","removeChild","vmId","vmName","_cockpit","_cockpit2","_config","_","gettext","autostart","disable","enable","vmStates","running","idle","paused","shutdown","shut off","crashed","dying","pmsuspended","bootableDisk","disk","cdrom","interface","hd","cpuMode","custom","host-model","18","cockpit","43","qunitTap","44","__WEBPACK_AMD_DEFINE_RESULT__","process","global","b","i","j","slice","splice","inArray","elem","array","objectValues","val","vals","is","hasOwn","extend","undefOnly","prop","objectType","match","toString","type","isNaN","extractStacktrace","e","offset","stack","include","split","shift","push","sourceURL","line","sourceFromStacktrace","Error","err","registerLoggingCallbacks","registerLoggingCallback","loggingCallback","callback","config","callbacks","loggingCallbacks","l","callbackNames","runLoggingCallbacks","args","verifyLoggingCallbacks","userCallback","warn","begin","modulesLog","started","now","name","tests","totalTests","Test","count","blocking","last","next","depth","queue","defined","updateRate","current","usedAsync","done","pauseProcessing","testTimeout","clearTimeout","timeout","semaphore","pushFailure","resumeProcessing","runStarted","runtime","passed","autorun","previousModule","failed","moduleStats","bad","all","total","stats","setHook","hookName","testEnvironment","settings","this","assertions","currentModule","testName","testId","generateHash","skip","async","expected","Assert","hex","hash","len","charCodeAt","synchronize","priority","seed","priorityCount","unitSampler","unitSamplerGenerator","sample","parseInt","saveGlobal","pollution","noglobals","checkPollution","newGlobals","deletedGlobals","old","asyncTest","focused","newTest","only","testContext","errorString","message","resultErrorString","substring","Date","getTime","sessionStorage","x","setItem","removeItem","replace","globalStartCalled","prototype","hasOwnProperty","reorder","altertitle","collapse","scrolltop","maxDepth","requireExpects","urlConfig","moduleStack","onErrorFnPrev","onerror","filePath","linerNr","ret","ignoreGlobalErrors","validTest","isLocal","location","protocol","version","executeNow","createModule","parentModule","moduleName","env","beforeEach","afterEach","setCurrentModule","moduleFns","setup","teardown","pop","globalStartAlreadyCalled","pageLoaded","stop","load","before","run","runTest","promise","resolvePromise","callbackStarted","notrycatch","after","queueHook","hook","callHook","hooks","handler","processHooks","finish","skipped","source","duration","reset","reverse","valid","getItem","pushResult","resultInfo","details","actual","negative","phase","then","moduleChainNameMatch","testModule","testModuleName","moduleChainIdMatch","regexFilter","exec","fullName","stringFilter","exclude","pattern","flags","regex","RegExp","charAt","fixture","getElementById","innerHTML","currentTest","expect","asserts","popped","acceptCallCount","currentAssert","ok","dump","parse","notOk","notEqual","propEqual","equiv","notPropEqual","deepEqual","notDeepEqual","strictEqual","notStrictEqual","throws","block","expectedType","expectedOutput","constructor","raises","useStrictEquality","valueOf","compareConstructors","protoA","getProto","protoB","getRegExpFlags","regexp","typeEquiv","innerEquiv","callers","parents","parentsB","getPrototypeOf","__proto__","string","boolean","number","null","symbol","date","nan","function","caller","loop","aCircular","bCircular","set","innerEq","outerEq","size","forEach","aVal","bVal","map","aKey","bKey","object","eq","aProperties","bProperties","sort","quote","literal","o","pre","arr","post","s","separator","base","indent","inner","up","down","reName","objType","res","parser","parserType","inStack","typeOf","parsers","setInterval","nodeType","item","multiline","HTML","extra","chr","indentChar","setParser","unknown","fn","nodelist","keys","nonEnumerableProperties","node","open","close","tag","nodeName","attrs","attributes","nodeValue","functionArgs","fromCharCode","functionCode","attribute","jsDump","applyCurrent","getUrlParams","param","urlParams","search","decodeURIComponent","escapeText","addEvent","addEventListener","attachEvent","event","target","srcElement","addEvents","elems","hasClass","className","addClass","toggleClass","force","removeClass","trim","getUrlConfigHtml","escaped","escapedTooltip","selection","urlConfigHtml","label","tooltip","toolbarChanged","updatedUrl","field","options","selectedIndex","checked","defaultValue","setUrl","history","replaceState","arrValue","querystring","host","pathname","applyUrlParams","selectedModule","modulesList","toolbarUrlConfigContainer","urlConfigContainer","getElementsByTagName","toolbarLooseFilter","input","button","ev","preventDefault","toolbarModuleFilterHtml","moduleFilterHtml","toolbarModuleFilter","toolbar","moduleFilter","lastChild","appendToolbar","appendHeader","header","unfilteredUrl","appendBanner","banner","appendTestResults","parentNode","insertBefore","storeFixture","appendFilteredTest","appendUserAgent","createTextNode","appendInterface","qunit","title","appendTestsList","z","moduleObj","appendTest","rerunTrigger","testBlock","assertList","getNameHtml","nameHtml","stripHtml","random","option","init","collapseNext","localeCompare","hidepassed","html","scrollTo","testStart","assertLi","showDiff","testItem","testDone","testTitle","time","good","testCounts","sourceName","firstChild","notPhantom","major","phantom","readyState","DiffMatchPatch","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","DiffMain","text1","text2","optChecklines","deadline","checklines","commonlength","commonprefix","commonsuffix","diffs","diffCommonPrefix","diffCommonSuffix","diffCompute","unshift","diffCleanupMerge","diffCleanupEfficiency","changes","equalities","equalitiesLength","lastequality","pointer","preIns","preDel","postIns","postDel","diffPrettyHtml","op","pointermid","pointermax","pointermin","pointerstart","min","pointerend","longtext","shorttext","hm","text1A","text2A","text1B","text2B","midCommon","diffsA","diffsB","diffHalfMatch","diffLineMode","diffBisect","diffHalfMatchI","bestCommon","prefixLength","suffixLength","bestLongtextA","bestLongtextB","bestShorttextA","bestShorttextB","dmp","hm1","hm2","ceil","linearray","countInsert","countDelete","textInsert","textDelete","diffLinesToChars","chars1","chars2","lineArray","diffCharsToLines","diffCleanupSemantic","text1Length","text2Length","maxD","vOffset","vLength","v1","v2","delta","front","k1start","k1end","k2start","k2end","k2Offset","k1Offset","x1","x2","y1","y2","d","k1","k2","diffBisectSplit","y","text1a","text1b","text2a","text2b","diffsb","lengthInsertions2","lengthDeletions2","lengthInsertions1","lengthDeletions1","deletion","insertion","overlapLength1","overlapLength2","diffCommonOverlap","textLength","best","found","diffLinesToCharsMunge","text","chars","lineStart","lineEnd","lineArrayLength","lineHash","diffPointer","position","n","output","45","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","Item","noop","nextTick","browser","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","46","__WEBPACK_AMD_DEFINE_FACTORY__","root","factory","ary","element","removeElement","isPlanRequired","conf","isPassed","isFailed","isAssertOkFailed","escapeLineEndings","ltrim","render","desc","fieldName","fieldValue","formatter","renderIf","shouldRender","formatTestLine","testLine","rest","qunitObject","printLikeFunction","isEnabled","configName","tap","formatDetails","explain","printPlanLine","toCount","puts","initialCount","unsubscribeEvent","eventName","targetEvents","qu","registeredCallbacks","unsubscribeEvents","eventNames","deprecateOption","optionName","fallback","showModuleNameOnFailure","showTestNameOnFailure","showExpectationOnFailure","showSourceOnFailure","flag","noPlan","VERSION","qunitTapVersion","expectedCount","note","diag","moduleStart","arg","unsubscribe","appendCallback","createCallbackAppenderFor","subject","observer","originalLoggingCallback","47","qunit_started","qunit_onerror","file","tap_regex","tests_included","48"],"mappings":"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","file":"machines/test-machines.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar QUnit = __webpack_require__(43);\n\tvar assert = QUnit;\n\t\n\tvar helpers = __webpack_require__(17);\n\t\n\tQUnit.test(\"toFixedPrecision\", function() {\n\t    assert.equal(\"1.0\", helpers.toFixedPrecision(\"1\", 1));\n\t    assert.equal(\"1.0\", helpers.toFixedPrecision(\"1.0\", 1));\n\t    assert.equal(\"1.0\", helpers.toFixedPrecision(\"1.01\", 1));\n\t    assert.equal(\"1.1\", helpers.toFixedPrecision(\"1.1\", 1));\n\t    assert.equal(\"1.1\", helpers.toFixedPrecision(\"1.123\", 1));\n\t\n\t    assert.equal(\"1\", helpers.toFixedPrecision(\"1\", 0));\n\t    assert.equal(\"1\", helpers.toFixedPrecision(\"1.0\", 0));\n\t    assert.equal(\"1\", helpers.toFixedPrecision(\"1.01\", 0));\n\t    assert.equal(\"1\", helpers.toFixedPrecision(\"1.1\", 0));\n\t    assert.equal(\"1\", helpers.toFixedPrecision(\"1.123\", 0));\n\t\n\t    assert.equal(\"1.00\", helpers.toFixedPrecision(\"1\", 2));\n\t    assert.equal(\"1.00\", helpers.toFixedPrecision(\"1.0\", 2));\n\t    assert.equal(\"1.01\", helpers.toFixedPrecision(\"1.01\", 2));\n\t    assert.equal(\"1.10\", helpers.toFixedPrecision(\"1.1\", 2));\n\t    assert.equal(\"1.12\", helpers.toFixedPrecision(\"1.123\", 2));\n\t\n\t    assert.equal(\"12.0\", helpers.toFixedPrecision(\"12\", 1));\n\t    assert.equal(\"12.0\", helpers.toFixedPrecision(\"12.0\", 1));\n\t    assert.equal(\"12.0\", helpers.toFixedPrecision(\"12.01\", 1));\n\t    assert.equal(\"12.0\", helpers.toFixedPrecision(\"12.010\", 1));\n\t    assert.equal(\"12.1\", helpers.toFixedPrecision(\"12.123\", 1));\n\t\n\t    assert.equal(\"12.00\", helpers.toFixedPrecision(\"12\", 2));\n\t    assert.equal(\"12.00\", helpers.toFixedPrecision(\"12.0\", 2));\n\t    assert.equal(\"12.01\", helpers.toFixedPrecision(\"12.01\", 2));\n\t    assert.equal(\"12.01\", helpers.toFixedPrecision(\"12.010\", 2));\n\t    assert.equal(\"12.12\", helpers.toFixedPrecision(\"12.123\", 2));\n\t});\n\t\n\tQUnit.start();\n\n\n/***/ },\n\n/***/ 14:\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },\n\n/***/ 16:\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t/*jshint esversion: 6 */\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t/**\n\t * Application-wide constants\n\t * TODO: make this configurable by user\n\t */\n\tvar VMS_CONFIG = {\n\t    DefaultRefreshInterval: 10000, // in ms\n\t    Virsh: {\n\t        connections: {\n\t            'system': {\n\t                params: ['-c', 'qemu:///system']\n\t            },\n\t            'session': {\n\t                params: ['-c', 'qemu:///session']\n\t            }\n\t        }\n\t    },\n\t    // TODO: make it configurable via config file\n\t    isDev: false // Never commit with 'true'\n\t};\n\t\n\texports.default = VMS_CONFIG;\n\n/***/ },\n\n/***/ 17:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\texports.toGigaBytes = toGigaBytes;\n\texports.toKiloBytes = toKiloBytes;\n\texports.isEmpty = isEmpty;\n\texports.arrayEquals = arrayEquals;\n\texports.logDebug = logDebug;\n\texports.logError = logError;\n\texports.rephraseUI = rephraseUI;\n\texports.toFixedPrecision = toFixedPrecision;\n\texports.fileDownload = fileDownload;\n\texports.vmId = vmId;\n\t\n\tvar _cockpit = __webpack_require__(18);\n\t\n\tvar _cockpit2 = _interopRequireDefault(_cockpit);\n\t\n\tvar _config = __webpack_require__(16);\n\t\n\tvar _config2 = _interopRequireDefault(_config);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t/*jshint esversion: 6 */\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\tvar _ = _cockpit2.default.gettext;\n\t\n\tfunction toGigaBytes(amount, currentUnit) {\n\t    var result = void 0;\n\t    switch (currentUnit) {\n\t        case 'B':\n\t            result = amount / 1024 / 1024 / 1024;\n\t            break;\n\t        case 'KiB':\n\t            result = amount / 1024 / 1024;\n\t            break;\n\t        default:\n\t            console.error('toGigaBytes(): unknown unit: ' + currentUnit);\n\t            result = amount / 1;\n\t    }\n\t\n\t    if (result < 1) {\n\t        result = result.toFixed(2);\n\t    } else {\n\t        var fixed1 = result.toFixed(1);\n\t        result = result - fixed1 === 0 ? result.toFixed(0) : fixed1;\n\t    }\n\t\n\t    return result;\n\t}\n\t\n\tfunction toKiloBytes(amount, currentUnit) {\n\t    var result = void 0;\n\t    switch (currentUnit) {\n\t        case 'B':\n\t            result = amount / 1024;\n\t            break;\n\t        case 'KiB':\n\t            result = amount;\n\t            break;\n\t        case 'MiB':\n\t            result = amount * 1024;\n\t            break;\n\t        case 'GiB':\n\t            result = amount * 1024;\n\t            break;\n\t        default:\n\t            console.error('toKiloBytes(): unknown unit: ' + currentUnit);\n\t            result = amount / 1;\n\t    }\n\t\n\t    return result;\n\t}\n\t\n\tfunction isEmpty(str) {\n\t    return !str || 0 === str.length;\n\t}\n\t\n\tfunction arrayEquals(arr1, arr2) {\n\t    if (arr1.length !== arr2.length) {\n\t        return false;\n\t    }\n\t\n\t    var diff = arr1.filter(function (v, index) {\n\t        return v !== arr2[index];\n\t    });\n\t    return diff.length === 0;\n\t}\n\t\n\tfunction logDebug(msg) {\n\t    if (_config2.default.isDev) {\n\t        var _console;\n\t\n\t        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t            params[_key - 1] = arguments[_key];\n\t        }\n\t\n\t        (_console = console).log.apply(_console, [msg].concat(params));\n\t    }\n\t}\n\t\n\tfunction logError(msg) {\n\t    var _console2;\n\t\n\t    for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t        params[_key2 - 1] = arguments[_key2];\n\t    }\n\t\n\t    (_console2 = console).error.apply(_console2, [msg].concat(params));\n\t}\n\t\n\tvar transform = {\n\t    'autostart': {\n\t        'disable': _(\"disabled\"),\n\t        'enable': _(\"enabled\")\n\t    },\n\t    'connections': {\n\t        'system': _(\"System\"),\n\t        'session': _(\"Session\")\n\t    },\n\t    'vmStates': {\n\t        'running': _(\"running\"),\n\t        'idle': _(\"idle\"),\n\t        'paused': _(\"paused\"),\n\t        'shutdown': _(\"shutdown\"),\n\t        'shut off': _(\"shut off\"),\n\t        'crashed': _(\"crashed\"),\n\t        'dying': _(\"dying\"),\n\t        'pmsuspended': _(\"suspended (PM)\")\n\t    },\n\t    'bootableDisk': {\n\t        'disk': _(\"disk\"),\n\t        'cdrom': _(\"cdrom\"),\n\t        'interface': _(\"network\"),\n\t        'hd': _(\"disk\")\n\t    },\n\t    'cpuMode': {\n\t        'custom': _(\"custom\"),\n\t        'host-model': _(\"host\")\n\t    }\n\t};\n\t\n\tfunction rephraseUI(key, original) {\n\t    if (!(key in transform)) {\n\t        logDebug('rephraseUI(key=\\'' + key + '\\', original=\\'' + original + '\\'): unknown key');\n\t        return original;\n\t    }\n\t\n\t    if (!(original in transform[key])) {\n\t        logDebug('rephraseUI(key=\\'' + key + '\\', original=\\'' + original + '\\'): unknown original value');\n\t        return original;\n\t    }\n\t\n\t    return transform[key][original];\n\t}\n\t\n\tfunction toFixedPrecision(value, precision) {\n\t    precision = precision || 0;\n\t    var power = Math.pow(10, precision);\n\t    var absValue = Math.abs(Math.round(value * power));\n\t    var result = (value < 0 ? '-' : '') + String(Math.floor(absValue / power));\n\t\n\t    if (precision > 0) {\n\t        var fraction = String(absValue % power);\n\t        var padding = new Array(Math.max(precision - fraction.length, 0) + 1).join('0');\n\t        result += '.' + padding + fraction;\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction isFirefox() {\n\t    return window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\t}\n\t\n\t/**\n\t * Download given content as a file in the browser\n\t *\n\t * @param data Content of the file\n\t * @param fileName\n\t * @param mimeType\n\t * @returns {*}\n\t */\n\tfunction fileDownload(_ref) {\n\t    var data = _ref.data,\n\t        _ref$fileName = _ref.fileName,\n\t        fileName = _ref$fileName === undefined ? 'myFile.dat' : _ref$fileName,\n\t        _ref$mimeType = _ref.mimeType,\n\t        mimeType = _ref$mimeType === undefined ? 'application/octet-stream' : _ref$mimeType;\n\t\n\t    if (!data) {\n\t        console.error('fileDownload(): no data to download');\n\t        return false;\n\t    }\n\t\n\t    var a = document.createElement('a');\n\t    a.id = 'dynamically-generated-file';\n\t    a.href = 'data:' + mimeType + ',' + encodeURIComponent(data);\n\t    document.body.appendChild(a); // if not used further then at least within integration tests\n\t\n\t    // Workaround since I can't get CSP working on newer Firefox versions for this\n\t    if (!isFirefox() && 'download' in a) {\n\t        // html5 A[download]\n\t        logDebug('fileDownload() is using A.HREF');\n\t        a.setAttribute('download', fileName);\n\t        a.click();\n\t    } else {\n\t        // do iframe dataURL download (old ch+FF):\n\t        logDebug('fileDownload() is using IFRAME');\n\t        var f = document.createElement('iframe');\n\t        f.width = '1';\n\t        f.height = '1';\n\t        document.body.appendChild(f);\n\t        var nicerText = '\\n[...............................GraphicsConsole]\\n';\n\t        f.src = 'data:' + mimeType + ',' + encodeURIComponent(data + nicerText);\n\t        window.setTimeout(function () {\n\t            return document.body.removeChild(f);\n\t        }, 333);\n\t    }\n\t\n\t    window.setTimeout(function () {\n\t        // give phantomJS time ...\n\t        logDebug('removing temporary A.HREF for filedownload');\n\t        document.body.removeChild(a);\n\t    }, 5000);\n\t    return true;\n\t}\n\t\n\tfunction vmId(vmName) {\n\t    return 'vm-' + vmName;\n\t}\n\n/***/ },\n\n/***/ 18:\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n\n/***/ 43:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2014 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    /* QUnit needs to have 'window' as 'this' in order to load */\n\t    window.QUnit = __webpack_require__(44);\n\t    window.qunitTap = __webpack_require__(46);\n\t\n\t    __webpack_require__(47);\n\t\n\t    __webpack_require__(48);\n\t\n\t    module.exports = window.QUnit;\n\t\n\t}());\n\n\n/***/ },\n\n/***/ 44:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, module) {/*!\n\t * QUnit 1.23.1\n\t * https://qunitjs.com/\n\t *\n\t * Copyright jQuery Foundation and other contributors\n\t * Released under the MIT license\n\t * https://jquery.org/license\n\t *\n\t * Date: 2016-04-12T17:29Z\n\t */\n\t\n\t( function( global ) {\n\t\n\tvar QUnit = {};\n\t\n\tvar Date = global.Date;\n\tvar now = Date.now || function() {\n\t\treturn new Date().getTime();\n\t};\n\t\n\tvar setTimeout = global.setTimeout;\n\tvar clearTimeout = global.clearTimeout;\n\t\n\t// Store a local window from the global to allow direct references.\n\tvar window = global.window;\n\t\n\tvar defined = {\n\t\tdocument: window && window.document !== undefined,\n\t\tsetTimeout: setTimeout !== undefined,\n\t\tsessionStorage: ( function() {\n\t\t\tvar x = \"qunit-test-string\";\n\t\t\ttry {\n\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\treturn true;\n\t\t\t} catch ( e ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}() )\n\t};\n\t\n\tvar fileName = ( sourceFromStacktrace( 0 ) || \"\" ).replace( /(:\\d+)+\\)?/, \"\" ).replace( /.+\\//, \"\" );\n\tvar globalStartCalled = false;\n\tvar runStarted = false;\n\t\n\tvar toString = Object.prototype.toString,\n\t\thasOwn = Object.prototype.hasOwnProperty;\n\t\n\t// Returns a new Array with the elements that are in a but not in b\n\tfunction diff( a, b ) {\n\t\tvar i, j,\n\t\t\tresult = a.slice();\n\t\n\t\tfor ( i = 0; i < result.length; i++ ) {\n\t\t\tfor ( j = 0; j < b.length; j++ ) {\n\t\t\t\tif ( result[ i ] === b[ j ] ) {\n\t\t\t\t\tresult.splice( i, 1 );\n\t\t\t\t\ti--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t// From jquery.js\n\tfunction inArray( elem, array ) {\n\t\tif ( array.indexOf ) {\n\t\t\treturn array.indexOf( elem );\n\t\t}\n\t\n\t\tfor ( var i = 0, length = array.length; i < length; i++ ) {\n\t\t\tif ( array[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\n\t\treturn -1;\n\t}\n\t\n\t/**\n\t * Makes a clone of an object using only Array or Object as base,\n\t * and copies over the own enumerable properties.\n\t *\n\t * @param {Object} obj\n\t * @return {Object} New object with only the own properties (recursively).\n\t */\n\tfunction objectValues ( obj ) {\n\t\tvar key, val,\n\t\t\tvals = QUnit.is( \"array\", obj ) ? [] : {};\n\t\tfor ( key in obj ) {\n\t\t\tif ( hasOwn.call( obj, key ) ) {\n\t\t\t\tval = obj[ key ];\n\t\t\t\tvals[ key ] = val === Object( val ) ? objectValues( val ) : val;\n\t\t\t}\n\t\t}\n\t\treturn vals;\n\t}\n\t\n\tfunction extend( a, b, undefOnly ) {\n\t\tfor ( var prop in b ) {\n\t\t\tif ( hasOwn.call( b, prop ) ) {\n\t\n\t\t\t\t// Avoid \"Member not found\" error in IE8 caused by messing with window.constructor\n\t\t\t\t// This block runs on every environment, so `global` is being used instead of `window`\n\t\t\t\t// to avoid errors on node.\n\t\t\t\tif ( prop !== \"constructor\" || a !== global ) {\n\t\t\t\t\tif ( b[ prop ] === undefined ) {\n\t\t\t\t\t\tdelete a[ prop ];\n\t\t\t\t\t} else if ( !( undefOnly && typeof a[ prop ] !== \"undefined\" ) ) {\n\t\t\t\t\t\ta[ prop ] = b[ prop ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn a;\n\t}\n\t\n\tfunction objectType( obj ) {\n\t\tif ( typeof obj === \"undefined\" ) {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\n\t\t// Consider: typeof null === object\n\t\tif ( obj === null ) {\n\t\t\treturn \"null\";\n\t\t}\n\t\n\t\tvar match = toString.call( obj ).match( /^\\[object\\s(.*)\\]$/ ),\n\t\t\ttype = match && match[ 1 ];\n\t\n\t\tswitch ( type ) {\n\t\t\tcase \"Number\":\n\t\t\t\tif ( isNaN( obj ) ) {\n\t\t\t\t\treturn \"nan\";\n\t\t\t\t}\n\t\t\t\treturn \"number\";\n\t\t\tcase \"String\":\n\t\t\tcase \"Boolean\":\n\t\t\tcase \"Array\":\n\t\t\tcase \"Set\":\n\t\t\tcase \"Map\":\n\t\t\tcase \"Date\":\n\t\t\tcase \"RegExp\":\n\t\t\tcase \"Function\":\n\t\t\tcase \"Symbol\":\n\t\t\t\treturn type.toLowerCase();\n\t\t}\n\t\tif ( typeof obj === \"object\" ) {\n\t\t\treturn \"object\";\n\t\t}\n\t}\n\t\n\t// Safe object type checking\n\tfunction is( type, obj ) {\n\t\treturn QUnit.objectType( obj ) === type;\n\t}\n\t\n\t// Doesn't support IE6 to IE9, it will return undefined on these browsers\n\t// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\n\tfunction extractStacktrace( e, offset ) {\n\t\toffset = offset === undefined ? 4 : offset;\n\t\n\t\tvar stack, include, i;\n\t\n\t\tif ( e.stack ) {\n\t\t\tstack = e.stack.split( \"\\n\" );\n\t\t\tif ( /^error$/i.test( stack[ 0 ] ) ) {\n\t\t\t\tstack.shift();\n\t\t\t}\n\t\t\tif ( fileName ) {\n\t\t\t\tinclude = [];\n\t\t\t\tfor ( i = offset; i < stack.length; i++ ) {\n\t\t\t\t\tif ( stack[ i ].indexOf( fileName ) !== -1 ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tinclude.push( stack[ i ] );\n\t\t\t\t}\n\t\t\t\tif ( include.length ) {\n\t\t\t\t\treturn include.join( \"\\n\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn stack[ offset ];\n\t\n\t\t// Support: Safari <=6 only\n\t\t} else if ( e.sourceURL ) {\n\t\n\t\t\t// Exclude useless self-reference for generated Error objects\n\t\t\tif ( /qunit.js$/.test( e.sourceURL ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// For actual exceptions, this is useful\n\t\t\treturn e.sourceURL + \":\" + e.line;\n\t\t}\n\t}\n\t\n\tfunction sourceFromStacktrace( offset ) {\n\t\tvar error = new Error();\n\t\n\t\t// Support: Safari <=7 only, IE <=10 - 11 only\n\t\t// Not all browsers generate the `stack` property for `new Error()`, see also #636\n\t\tif ( !error.stack ) {\n\t\t\ttry {\n\t\t\t\tthrow error;\n\t\t\t} catch ( err ) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t}\n\t\n\t\treturn extractStacktrace( error, offset );\n\t}\n\t\n\t/**\n\t * Config object: Maintain internal state\n\t * Later exposed as QUnit.config\n\t * `config` initialized at top of scope\n\t */\n\tvar config = {\n\t\n\t\t// The queue of tests to run\n\t\tqueue: [],\n\t\n\t\t// Block until document ready\n\t\tblocking: true,\n\t\n\t\t// By default, run previously failed tests first\n\t\t// very useful in combination with \"Hide passed tests\" checked\n\t\treorder: true,\n\t\n\t\t// By default, modify document.title when suite is done\n\t\taltertitle: true,\n\t\n\t\t// HTML Reporter: collapse every test except the first failing test\n\t\t// If false, all failing tests will be expanded\n\t\tcollapse: true,\n\t\n\t\t// By default, scroll to top of the page when suite is done\n\t\tscrolltop: true,\n\t\n\t\t// Depth up-to which object will be dumped\n\t\tmaxDepth: 5,\n\t\n\t\t// When enabled, all tests must call expect()\n\t\trequireExpects: false,\n\t\n\t\t// Placeholder for user-configurable form-exposed URL parameters\n\t\turlConfig: [],\n\t\n\t\t// Set of all modules.\n\t\tmodules: [],\n\t\n\t\t// Stack of nested modules\n\t\tmoduleStack: [],\n\t\n\t\t// The first unnamed module\n\t\tcurrentModule: {\n\t\t\tname: \"\",\n\t\t\ttests: []\n\t\t},\n\t\n\t\tcallbacks: {}\n\t};\n\t\n\t// Push a loose unnamed module to the modules collection\n\tconfig.modules.push( config.currentModule );\n\t\n\tvar loggingCallbacks = {};\n\t\n\t// Register logging callbacks\n\tfunction registerLoggingCallbacks( obj ) {\n\t\tvar i, l, key,\n\t\t\tcallbackNames = [ \"begin\", \"done\", \"log\", \"testStart\", \"testDone\",\n\t\t\t\t\"moduleStart\", \"moduleDone\" ];\n\t\n\t\tfunction registerLoggingCallback( key ) {\n\t\t\tvar loggingCallback = function( callback ) {\n\t\t\t\tif ( objectType( callback ) !== \"function\" ) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"QUnit logging methods require a callback function as their first parameters.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\n\t\t\t\tconfig.callbacks[ key ].push( callback );\n\t\t\t};\n\t\n\t\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t\t// Stores the registered functions allowing restoring\n\t\t\t// at verifyLoggingCallbacks() if modified\n\t\t\tloggingCallbacks[ key ] = loggingCallback;\n\t\n\t\t\treturn loggingCallback;\n\t\t}\n\t\n\t\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\n\t\t\tkey = callbackNames[ i ];\n\t\n\t\t\t// Initialize key collection of logging callback\n\t\t\tif ( objectType( config.callbacks[ key ] ) === \"undefined\" ) {\n\t\t\t\tconfig.callbacks[ key ] = [];\n\t\t\t}\n\t\n\t\t\tobj[ key ] = registerLoggingCallback( key );\n\t\t}\n\t}\n\t\n\tfunction runLoggingCallbacks( key, args ) {\n\t\tvar i, l, callbacks;\n\t\n\t\tcallbacks = config.callbacks[ key ];\n\t\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\n\t\t\tcallbacks[ i ]( args );\n\t\t}\n\t}\n\t\n\t// DEPRECATED: This will be removed on 2.0.0+\n\t// This function verifies if the loggingCallbacks were modified by the user\n\t// If so, it will restore it, assign the given callback and print a console warning\n\tfunction verifyLoggingCallbacks() {\n\t\tvar loggingCallback, userCallback;\n\t\n\t\tfor ( loggingCallback in loggingCallbacks ) {\n\t\t\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\n\t\n\t\t\t\tuserCallback = QUnit[ loggingCallback ];\n\t\n\t\t\t\t// Restore the callback function\n\t\t\t\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\n\t\n\t\t\t\t// Assign the deprecated given callback\n\t\t\t\tQUnit[ loggingCallback ]( userCallback );\n\t\n\t\t\t\tif ( global.console && global.console.warn ) {\n\t\t\t\t\tglobal.console.warn(\n\t\t\t\t\t\t\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" +\n\t\t\t\t\t\t\"Please, check out the documentation on how to apply logging callbacks.\\n\" +\n\t\t\t\t\t\t\"Reference: https://api.qunitjs.com/category/callbacks/\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t( function() {\n\t\tif ( !defined.document ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\t// `onErrorFnPrev` initialized at top of scope\n\t\t// Preserve other handlers\n\t\tvar onErrorFnPrev = window.onerror;\n\t\n\t\t// Cover uncaught exceptions\n\t\t// Returning true will suppress the default browser handler,\n\t\t// returning false will let it run.\n\t\twindow.onerror = function( error, filePath, linerNr ) {\n\t\t\tvar ret = false;\n\t\t\tif ( onErrorFnPrev ) {\n\t\t\t\tret = onErrorFnPrev( error, filePath, linerNr );\n\t\t\t}\n\t\n\t\t\t// Treat return value as window.onerror itself does,\n\t\t\t// Only do our handling if not suppressed.\n\t\t\tif ( ret !== true ) {\n\t\t\t\tif ( QUnit.config.current ) {\n\t\t\t\t\tif ( QUnit.config.current.ignoreGlobalErrors ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.test( \"global failure\", extend( function() {\n\t\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t\t}, { validTest: true } ) );\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\treturn ret;\n\t\t};\n\t}() );\n\t\n\t// Figure out if we're running the tests from a server or not\n\tQUnit.isLocal = !( defined.document && window.location.protocol !== \"file:\" );\n\t\n\t// Expose the current QUnit version\n\tQUnit.version = \"1.23.1\";\n\t\n\textend( QUnit, {\n\t\n\t\t// Call on start of module test to prepend name to all tests\n\t\tmodule: function( name, testEnvironment, executeNow ) {\n\t\t\tvar module, moduleFns;\n\t\t\tvar currentModule = config.currentModule;\n\t\n\t\t\tif ( arguments.length === 2 ) {\n\t\t\t\tif ( objectType( testEnvironment ) === \"function\" ) {\n\t\t\t\t\texecuteNow = testEnvironment;\n\t\t\t\t\ttestEnvironment = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// DEPRECATED: handles setup/teardown functions,\n\t\t\t// beforeEach and afterEach should be used instead\n\t\t\tif ( testEnvironment && testEnvironment.setup ) {\n\t\t\t\ttestEnvironment.beforeEach = testEnvironment.setup;\n\t\t\t\tdelete testEnvironment.setup;\n\t\t\t}\n\t\t\tif ( testEnvironment && testEnvironment.teardown ) {\n\t\t\t\ttestEnvironment.afterEach = testEnvironment.teardown;\n\t\t\t\tdelete testEnvironment.teardown;\n\t\t\t}\n\t\n\t\t\tmodule = createModule();\n\t\n\t\t\tmoduleFns = {\n\t\t\t\tbeforeEach: setHook( module, \"beforeEach\" ),\n\t\t\t\tafterEach: setHook( module, \"afterEach\" )\n\t\t\t};\n\t\n\t\t\tif ( objectType( executeNow ) === \"function\" ) {\n\t\t\t\tconfig.moduleStack.push( module );\n\t\t\t\tsetCurrentModule( module );\n\t\t\t\texecuteNow.call( module.testEnvironment, moduleFns );\n\t\t\t\tconfig.moduleStack.pop();\n\t\t\t\tmodule = module.parentModule || currentModule;\n\t\t\t}\n\t\n\t\t\tsetCurrentModule( module );\n\t\n\t\t\tfunction createModule() {\n\t\t\t\tvar parentModule = config.moduleStack.length ?\n\t\t\t\t\tconfig.moduleStack.slice( -1 )[ 0 ] : null;\n\t\t\t\tvar moduleName = parentModule !== null ?\n\t\t\t\t\t[ parentModule.name, name ].join( \" > \" ) : name;\n\t\t\t\tvar module = {\n\t\t\t\t\tname: moduleName,\n\t\t\t\t\tparentModule: parentModule,\n\t\t\t\t\ttests: [],\n\t\t\t\t\tmoduleId: generateHash( moduleName )\n\t\t\t\t};\n\t\n\t\t\t\tvar env = {};\n\t\t\t\tif ( parentModule ) {\n\t\t\t\t\textend( env, parentModule.testEnvironment );\n\t\t\t\t\tdelete env.beforeEach;\n\t\t\t\t\tdelete env.afterEach;\n\t\t\t\t}\n\t\t\t\textend( env, testEnvironment );\n\t\t\t\tmodule.testEnvironment = env;\n\t\n\t\t\t\tconfig.modules.push( module );\n\t\t\t\treturn module;\n\t\t\t}\n\t\n\t\t\tfunction setCurrentModule( module ) {\n\t\t\t\tconfig.currentModule = module;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// DEPRECATED: QUnit.asyncTest() will be removed in QUnit 2.0.\n\t\tasyncTest: asyncTest,\n\t\n\t\ttest: test,\n\t\n\t\tskip: skip,\n\t\n\t\tonly: only,\n\t\n\t\t// DEPRECATED: The functionality of QUnit.start() will be altered in QUnit 2.0.\n\t\t// In QUnit 2.0, invoking it will ONLY affect the `QUnit.config.autostart` blocking behavior.\n\t\tstart: function( count ) {\n\t\t\tvar globalStartAlreadyCalled = globalStartCalled;\n\t\n\t\t\tif ( !config.current ) {\n\t\t\t\tglobalStartCalled = true;\n\t\n\t\t\t\tif ( runStarted ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context while already started\" );\n\t\t\t\t} else if ( globalStartAlreadyCalled || count > 1 ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context too many times\" );\n\t\t\t\t} else if ( config.autostart ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context when \" +\n\t\t\t\t\t\t\"QUnit.config.autostart was true\" );\n\t\t\t\t} else if ( !config.pageLoaded ) {\n\t\n\t\t\t\t\t// The page isn't completely loaded yet, so bail out and let `QUnit.load` handle it\n\t\t\t\t\tconfig.autostart = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\n\t\t\t\t// If a test is running, adjust its semaphore\n\t\t\t\tconfig.current.semaphore -= count || 1;\n\t\n\t\t\t\t// If semaphore is non-numeric, throw error\n\t\t\t\tif ( isNaN( config.current.semaphore ) ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\n\t\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\t\"Called start() with a non-numeric decrement.\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Don't start until equal number of stop-calls\n\t\t\t\tif ( config.current.semaphore > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Throw an Error if start is called more often than stop\n\t\t\t\tif ( config.current.semaphore < 0 ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\n\t\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\t\"Called start() while already started (test's semaphore was 0 already)\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tresumeProcessing();\n\t\t},\n\t\n\t\t// DEPRECATED: QUnit.stop() will be removed in QUnit 2.0.\n\t\tstop: function( count ) {\n\t\n\t\t\t// If there isn't a test running, don't allow QUnit.stop() to be called\n\t\t\tif ( !config.current ) {\n\t\t\t\tthrow new Error( \"Called stop() outside of a test context\" );\n\t\t\t}\n\t\n\t\t\t// If a test is running, adjust its semaphore\n\t\t\tconfig.current.semaphore += count || 1;\n\t\n\t\t\tpauseProcessing();\n\t\t},\n\t\n\t\tconfig: config,\n\t\n\t\tis: is,\n\t\n\t\tobjectType: objectType,\n\t\n\t\textend: extend,\n\t\n\t\tload: function() {\n\t\t\tconfig.pageLoaded = true;\n\t\n\t\t\t// Initialize the configuration options\n\t\t\textend( config, {\n\t\t\t\tstats: { all: 0, bad: 0 },\n\t\t\t\tmoduleStats: { all: 0, bad: 0 },\n\t\t\t\tstarted: 0,\n\t\t\t\tupdateRate: 1000,\n\t\t\t\tautostart: true,\n\t\t\t\tfilter: \"\"\n\t\t\t}, true );\n\t\n\t\t\tconfig.blocking = false;\n\t\n\t\t\tif ( config.autostart ) {\n\t\t\t\tresumeProcessing();\n\t\t\t}\n\t\t},\n\t\n\t\tstack: function( offset ) {\n\t\t\toffset = ( offset || 0 ) + 2;\n\t\t\treturn sourceFromStacktrace( offset );\n\t\t}\n\t} );\n\t\n\tregisterLoggingCallbacks( QUnit );\n\t\n\tfunction begin() {\n\t\tvar i, l,\n\t\t\tmodulesLog = [];\n\t\n\t\t// If the test run hasn't officially begun yet\n\t\tif ( !config.started ) {\n\t\n\t\t\t// Record the time of the test run's beginning\n\t\t\tconfig.started = now();\n\t\n\t\t\tverifyLoggingCallbacks();\n\t\n\t\t\t// Delete the loose unnamed module if unused.\n\t\t\tif ( config.modules[ 0 ].name === \"\" && config.modules[ 0 ].tests.length === 0 ) {\n\t\t\t\tconfig.modules.shift();\n\t\t\t}\n\t\n\t\t\t// Avoid unnecessary information by not logging modules' test environments\n\t\t\tfor ( i = 0, l = config.modules.length; i < l; i++ ) {\n\t\t\t\tmodulesLog.push( {\n\t\t\t\t\tname: config.modules[ i ].name,\n\t\t\t\t\ttests: config.modules[ i ].tests\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// The test run is officially beginning now\n\t\t\trunLoggingCallbacks( \"begin\", {\n\t\t\t\ttotalTests: Test.count,\n\t\t\t\tmodules: modulesLog\n\t\t\t} );\n\t\t}\n\t\n\t\tconfig.blocking = false;\n\t\tprocess( true );\n\t}\n\t\n\tfunction process( last ) {\n\t\tfunction next() {\n\t\t\tprocess( last );\n\t\t}\n\t\tvar start = now();\n\t\tconfig.depth = ( config.depth || 0 ) + 1;\n\t\n\t\twhile ( config.queue.length && !config.blocking ) {\n\t\t\tif ( !defined.setTimeout || config.updateRate <= 0 ||\n\t\t\t\t\t( ( now() - start ) < config.updateRate ) ) {\n\t\t\t\tif ( config.current ) {\n\t\n\t\t\t\t\t// Reset async tracking for each phase of the Test lifecycle\n\t\t\t\t\tconfig.current.usedAsync = false;\n\t\t\t\t}\n\t\t\t\tconfig.queue.shift()();\n\t\t\t} else {\n\t\t\t\tsetTimeout( next, 13 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconfig.depth--;\n\t\tif ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\n\t\t\tdone();\n\t\t}\n\t}\n\t\n\tfunction pauseProcessing() {\n\t\tconfig.blocking = true;\n\t\n\t\tif ( config.testTimeout && defined.setTimeout ) {\n\t\t\tclearTimeout( config.timeout );\n\t\t\tconfig.timeout = setTimeout( function() {\n\t\t\t\tif ( config.current ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\t\t\t\tQUnit.pushFailure( \"Test timed out\", sourceFromStacktrace( 2 ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error( \"Test timed out\" );\n\t\t\t\t}\n\t\t\t\tresumeProcessing();\n\t\t\t}, config.testTimeout );\n\t\t}\n\t}\n\t\n\tfunction resumeProcessing() {\n\t\trunStarted = true;\n\t\n\t\t// A slight delay to allow this iteration of the event loop to finish (more assertions, etc.)\n\t\tif ( defined.setTimeout ) {\n\t\t\tsetTimeout( function() {\n\t\t\t\tif ( config.current && config.current.semaphore > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( config.timeout ) {\n\t\t\t\t\tclearTimeout( config.timeout );\n\t\t\t\t}\n\t\n\t\t\t\tbegin();\n\t\t\t}, 13 );\n\t\t} else {\n\t\t\tbegin();\n\t\t}\n\t}\n\t\n\tfunction done() {\n\t\tvar runtime, passed;\n\t\n\t\tconfig.autorun = true;\n\t\n\t\t// Log the last module results\n\t\tif ( config.previousModule ) {\n\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\tname: config.previousModule.name,\n\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t} );\n\t\t}\n\t\tdelete config.previousModule;\n\t\n\t\truntime = now() - config.started;\n\t\tpassed = config.stats.all - config.stats.bad;\n\t\n\t\trunLoggingCallbacks( \"done\", {\n\t\t\tfailed: config.stats.bad,\n\t\t\tpassed: passed,\n\t\t\ttotal: config.stats.all,\n\t\t\truntime: runtime\n\t\t} );\n\t}\n\t\n\tfunction setHook( module, hookName ) {\n\t\tif ( module.testEnvironment === undefined ) {\n\t\t\tmodule.testEnvironment = {};\n\t\t}\n\t\n\t\treturn function( callback ) {\n\t\t\tmodule.testEnvironment[ hookName ] = callback;\n\t\t};\n\t}\n\t\n\tvar focused = false;\n\tvar priorityCount = 0;\n\tvar unitSampler;\n\t\n\tfunction Test( settings ) {\n\t\tvar i, l;\n\t\n\t\t++Test.count;\n\t\n\t\textend( this, settings );\n\t\tthis.assertions = [];\n\t\tthis.semaphore = 0;\n\t\tthis.usedAsync = false;\n\t\tthis.module = config.currentModule;\n\t\tthis.stack = sourceFromStacktrace( 3 );\n\t\n\t\t// Register unique strings\n\t\tfor ( i = 0, l = this.module.tests; i < l.length; i++ ) {\n\t\t\tif ( this.module.tests[ i ].name === this.testName ) {\n\t\t\t\tthis.testName += \" \";\n\t\t\t}\n\t\t}\n\t\n\t\tthis.testId = generateHash( this.module.name, this.testName );\n\t\n\t\tthis.module.tests.push( {\n\t\t\tname: this.testName,\n\t\t\ttestId: this.testId\n\t\t} );\n\t\n\t\tif ( settings.skip ) {\n\t\n\t\t\t// Skipped tests will fully ignore any sent callback\n\t\t\tthis.callback = function() {};\n\t\t\tthis.async = false;\n\t\t\tthis.expected = 0;\n\t\t} else {\n\t\t\tthis.assert = new Assert( this );\n\t\t}\n\t}\n\t\n\tTest.count = 0;\n\t\n\tTest.prototype = {\n\t\tbefore: function() {\n\t\t\tif (\n\t\n\t\t\t\t// Emit moduleStart when we're switching from one module to another\n\t\t\t\tthis.module !== config.previousModule ||\n\t\n\t\t\t\t\t// They could be equal (both undefined) but if the previousModule property doesn't\n\t\t\t\t\t// yet exist it means this is the first test in a suite that isn't wrapped in a\n\t\t\t\t\t// module, in which case we'll just emit a moduleStart event for 'undefined'.\n\t\t\t\t\t// Without this, reporters can get testStart before moduleStart  which is a problem.\n\t\t\t\t\t!hasOwn.call( config, \"previousModule\" )\n\t\t\t) {\n\t\t\t\tif ( hasOwn.call( config, \"previousModule\" ) ) {\n\t\t\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\t\t\tname: config.previousModule.name,\n\t\t\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tconfig.previousModule = this.module;\n\t\t\t\tconfig.moduleStats = { all: 0, bad: 0, started: now() };\n\t\t\t\trunLoggingCallbacks( \"moduleStart\", {\n\t\t\t\t\tname: this.module.name,\n\t\t\t\t\ttests: this.module.tests\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\tconfig.current = this;\n\t\n\t\t\tif ( this.module.testEnvironment ) {\n\t\t\t\tdelete this.module.testEnvironment.beforeEach;\n\t\t\t\tdelete this.module.testEnvironment.afterEach;\n\t\t\t}\n\t\t\tthis.testEnvironment = extend( {}, this.module.testEnvironment );\n\t\n\t\t\tthis.started = now();\n\t\t\trunLoggingCallbacks( \"testStart\", {\n\t\t\t\tname: this.testName,\n\t\t\t\tmodule: this.module.name,\n\t\t\t\ttestId: this.testId\n\t\t\t} );\n\t\n\t\t\tif ( !config.pollution ) {\n\t\t\t\tsaveGlobal();\n\t\t\t}\n\t\t},\n\t\n\t\trun: function() {\n\t\t\tvar promise;\n\t\n\t\t\tconfig.current = this;\n\t\n\t\t\tif ( this.async ) {\n\t\t\t\tQUnit.stop();\n\t\t\t}\n\t\n\t\t\tthis.callbackStarted = now();\n\t\n\t\t\tif ( config.notrycatch ) {\n\t\t\t\trunTest( this );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\ttry {\n\t\t\t\trunTest( this );\n\t\t\t} catch ( e ) {\n\t\t\t\tthis.pushFailure( \"Died on test #\" + ( this.assertions.length + 1 ) + \" \" +\n\t\t\t\t\tthis.stack + \": \" + ( e.message || e ), extractStacktrace( e, 0 ) );\n\t\n\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\tsaveGlobal();\n\t\n\t\t\t\t// Restart the tests if they're blocking\n\t\t\t\tif ( config.blocking ) {\n\t\t\t\t\tQUnit.start();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction runTest( test ) {\n\t\t\t\tpromise = test.callback.call( test.testEnvironment, test.assert );\n\t\t\t\ttest.resolvePromise( promise );\n\t\t\t}\n\t\t},\n\t\n\t\tafter: function() {\n\t\t\tcheckPollution();\n\t\t},\n\t\n\t\tqueueHook: function( hook, hookName ) {\n\t\t\tvar promise,\n\t\t\t\ttest = this;\n\t\t\treturn function runHook() {\n\t\t\t\tconfig.current = test;\n\t\t\t\tif ( config.notrycatch ) {\n\t\t\t\t\tcallHook();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tcallHook();\n\t\t\t\t} catch ( error ) {\n\t\t\t\t\ttest.pushFailure( hookName + \" failed on \" + test.testName + \": \" +\n\t\t\t\t\t( error.message || error ), extractStacktrace( error, 0 ) );\n\t\t\t\t}\n\t\n\t\t\t\tfunction callHook() {\n\t\t\t\t\tpromise = hook.call( test.testEnvironment, test.assert );\n\t\t\t\t\ttest.resolvePromise( promise, hookName );\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\n\t\t// Currently only used for module level hooks, can be used to add global level ones\n\t\thooks: function( handler ) {\n\t\t\tvar hooks = [];\n\t\n\t\t\tfunction processHooks( test, module ) {\n\t\t\t\tif ( module.parentModule ) {\n\t\t\t\t\tprocessHooks( test, module.parentModule );\n\t\t\t\t}\n\t\t\t\tif ( module.testEnvironment &&\n\t\t\t\t\tQUnit.objectType( module.testEnvironment[ handler ] ) === \"function\" ) {\n\t\t\t\t\thooks.push( test.queueHook( module.testEnvironment[ handler ], handler ) );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Hooks are ignored on skipped tests\n\t\t\tif ( !this.skip ) {\n\t\t\t\tprocessHooks( this, this.module );\n\t\t\t}\n\t\t\treturn hooks;\n\t\t},\n\t\n\t\tfinish: function() {\n\t\t\tconfig.current = this;\n\t\t\tif ( config.requireExpects && this.expected === null ) {\n\t\t\t\tthis.pushFailure( \"Expected number of assertions to be defined, but expect() was \" +\n\t\t\t\t\t\"not called.\", this.stack );\n\t\t\t} else if ( this.expected !== null && this.expected !== this.assertions.length ) {\n\t\t\t\tthis.pushFailure( \"Expected \" + this.expected + \" assertions, but \" +\n\t\t\t\t\tthis.assertions.length + \" were run\", this.stack );\n\t\t\t} else if ( this.expected === null && !this.assertions.length ) {\n\t\t\t\tthis.pushFailure( \"Expected at least one assertion, but none were run - call \" +\n\t\t\t\t\t\"expect(0) to accept zero assertions.\", this.stack );\n\t\t\t}\n\t\n\t\t\tvar i,\n\t\t\t\tbad = 0;\n\t\n\t\t\tthis.runtime = now() - this.started;\n\t\t\tconfig.stats.all += this.assertions.length;\n\t\t\tconfig.moduleStats.all += this.assertions.length;\n\t\n\t\t\tfor ( i = 0; i < this.assertions.length; i++ ) {\n\t\t\t\tif ( !this.assertions[ i ].result ) {\n\t\t\t\t\tbad++;\n\t\t\t\t\tconfig.stats.bad++;\n\t\t\t\t\tconfig.moduleStats.bad++;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"testDone\", {\n\t\t\t\tname: this.testName,\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tskipped: !!this.skip,\n\t\t\t\tfailed: bad,\n\t\t\t\tpassed: this.assertions.length - bad,\n\t\t\t\ttotal: this.assertions.length,\n\t\t\t\truntime: this.runtime,\n\t\n\t\t\t\t// HTML Reporter use\n\t\t\t\tassertions: this.assertions,\n\t\t\t\ttestId: this.testId,\n\t\n\t\t\t\t// Source of Test\n\t\t\t\tsource: this.stack,\n\t\n\t\t\t\t// DEPRECATED: this property will be removed in 2.0.0, use runtime instead\n\t\t\t\tduration: this.runtime\n\t\t\t} );\n\t\n\t\t\t// QUnit.reset() is deprecated and will be replaced for a new\n\t\t\t// fixture reset function on QUnit 2.0/2.1.\n\t\t\t// It's still called here for backwards compatibility handling\n\t\t\tQUnit.reset();\n\t\n\t\t\tconfig.current = undefined;\n\t\t},\n\t\n\t\tqueue: function() {\n\t\t\tvar priority,\n\t\t\t\ttest = this;\n\t\n\t\t\tif ( !this.valid() ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tfunction run() {\n\t\n\t\t\t\t// Each of these can by async\n\t\t\t\tsynchronize( [\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.before();\n\t\t\t\t\t},\n\t\n\t\t\t\t\ttest.hooks( \"beforeEach\" ),\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.run();\n\t\t\t\t\t},\n\t\n\t\t\t\t\ttest.hooks( \"afterEach\" ).reverse(),\n\t\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.after();\n\t\t\t\t\t},\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.finish();\n\t\t\t\t\t}\n\t\t\t\t] );\n\t\t\t}\n\t\n\t\t\t// Prioritize previously failed tests, detected from sessionStorage\n\t\t\tpriority = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + this.module.name + \"-\" + this.testName );\n\t\n\t\t\treturn synchronize( run, priority, config.seed );\n\t\t},\n\t\n\t\tpushResult: function( resultInfo ) {\n\t\n\t\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\t\tvar source,\n\t\t\t\tdetails = {\n\t\t\t\t\tmodule: this.module.name,\n\t\t\t\t\tname: this.testName,\n\t\t\t\t\tresult: resultInfo.result,\n\t\t\t\t\tmessage: resultInfo.message,\n\t\t\t\t\tactual: resultInfo.actual,\n\t\t\t\t\texpected: resultInfo.expected,\n\t\t\t\t\ttestId: this.testId,\n\t\t\t\t\tnegative: resultInfo.negative || false,\n\t\t\t\t\truntime: now() - this.started\n\t\t\t\t};\n\t\n\t\t\tif ( !resultInfo.result ) {\n\t\t\t\tsource = sourceFromStacktrace();\n\t\n\t\t\t\tif ( source ) {\n\t\t\t\t\tdetails.source = source;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"log\", details );\n\t\n\t\t\tthis.assertions.push( {\n\t\t\t\tresult: !!resultInfo.result,\n\t\t\t\tmessage: resultInfo.message\n\t\t\t} );\n\t\t},\n\t\n\t\tpushFailure: function( message, source, actual ) {\n\t\t\tif ( !( this instanceof Test ) ) {\n\t\t\t\tthrow new Error( \"pushFailure() assertion outside test context, was \" +\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t}\n\t\n\t\t\tvar details = {\n\t\t\t\t\tmodule: this.module.name,\n\t\t\t\t\tname: this.testName,\n\t\t\t\t\tresult: false,\n\t\t\t\t\tmessage: message || \"error\",\n\t\t\t\t\tactual: actual || null,\n\t\t\t\t\ttestId: this.testId,\n\t\t\t\t\truntime: now() - this.started\n\t\t\t\t};\n\t\n\t\t\tif ( source ) {\n\t\t\t\tdetails.source = source;\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"log\", details );\n\t\n\t\t\tthis.assertions.push( {\n\t\t\t\tresult: false,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tresolvePromise: function( promise, phase ) {\n\t\t\tvar then, message,\n\t\t\t\ttest = this;\n\t\t\tif ( promise != null ) {\n\t\t\t\tthen = promise.then;\n\t\t\t\tif ( QUnit.objectType( then ) === \"function\" ) {\n\t\t\t\t\tQUnit.stop();\n\t\t\t\t\tthen.call(\n\t\t\t\t\t\tpromise,\n\t\t\t\t\t\tfunction() { QUnit.start(); },\n\t\t\t\t\t\tfunction( error ) {\n\t\t\t\t\t\t\tmessage = \"Promise rejected \" +\n\t\t\t\t\t\t\t\t( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) +\n\t\t\t\t\t\t\t\t\" \" + test.testName + \": \" + ( error.message || error );\n\t\t\t\t\t\t\ttest.pushFailure( message, extractStacktrace( error, 0 ) );\n\t\n\t\t\t\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\t\t\t\tsaveGlobal();\n\t\n\t\t\t\t\t\t\t// Unblock\n\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tvalid: function() {\n\t\t\tvar filter = config.filter,\n\t\t\t\tregexFilter = /^(!?)\\/([\\w\\W]*)\\/(i?$)/.exec( filter ),\n\t\t\t\tmodule = config.module && config.module.toLowerCase(),\n\t\t\t\tfullName = ( this.module.name + \": \" + this.testName );\n\t\n\t\t\tfunction moduleChainNameMatch( testModule ) {\n\t\t\t\tvar testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\n\t\t\t\tif ( testModuleName === module ) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if ( testModule.parentModule ) {\n\t\t\t\t\treturn moduleChainNameMatch( testModule.parentModule );\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction moduleChainIdMatch( testModule ) {\n\t\t\t\treturn inArray( testModule.moduleId, config.moduleId ) > -1 ||\n\t\t\t\t\ttestModule.parentModule && moduleChainIdMatch( testModule.parentModule );\n\t\t\t}\n\t\n\t\t\t// Internally-generated tests are always valid\n\t\t\tif ( this.callback && this.callback.validTest ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\tif ( config.moduleId && config.moduleId.length > 0 &&\n\t\t\t\t!moduleChainIdMatch( this.module ) ) {\n\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( config.testId && config.testId.length > 0 &&\n\t\t\t\tinArray( this.testId, config.testId ) < 0 ) {\n\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( module && !moduleChainNameMatch( this.module ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( !filter ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\treturn regexFilter ?\n\t\t\t\tthis.regexFilter( !!regexFilter[ 1 ], regexFilter[ 2 ], regexFilter[ 3 ], fullName ) :\n\t\t\t\tthis.stringFilter( filter, fullName );\n\t\t},\n\t\n\t\tregexFilter: function( exclude, pattern, flags, fullName ) {\n\t\t\tvar regex = new RegExp( pattern, flags );\n\t\t\tvar match = regex.test( fullName );\n\t\n\t\t\treturn match !== exclude;\n\t\t},\n\t\n\t\tstringFilter: function( filter, fullName ) {\n\t\t\tfilter = filter.toLowerCase();\n\t\t\tfullName = fullName.toLowerCase();\n\t\n\t\t\tvar include = filter.charAt( 0 ) !== \"!\";\n\t\t\tif ( !include ) {\n\t\t\t\tfilter = filter.slice( 1 );\n\t\t\t}\n\t\n\t\t\t// If the filter matches, we need to honour include\n\t\t\tif ( fullName.indexOf( filter ) !== -1 ) {\n\t\t\t\treturn include;\n\t\t\t}\n\t\n\t\t\t// Otherwise, do the opposite\n\t\t\treturn !include;\n\t\t}\n\t};\n\t\n\t// Resets the test setup. Useful for tests that modify the DOM.\n\t/*\n\tDEPRECATED: Use multiple tests instead of resetting inside a test.\n\tUse testStart or testDone for custom cleanup.\n\tThis method will throw an error in 2.0, and will be removed in 2.1\n\t*/\n\tQUnit.reset = function() {\n\t\n\t\t// Return on non-browser environments\n\t\t// This is necessary to not break on node tests\n\t\tif ( !defined.document ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar fixture = defined.document && document.getElementById &&\n\t\t\t\tdocument.getElementById( \"qunit-fixture\" );\n\t\n\t\tif ( fixture ) {\n\t\t\tfixture.innerHTML = config.fixture;\n\t\t}\n\t};\n\t\n\tQUnit.pushFailure = function() {\n\t\tif ( !QUnit.config.current ) {\n\t\t\tthrow new Error( \"pushFailure() assertion outside test context, in \" +\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t}\n\t\n\t\t// Gets current test obj\n\t\tvar currentTest = QUnit.config.current;\n\t\n\t\treturn currentTest.pushFailure.apply( currentTest, arguments );\n\t};\n\t\n\t// Based on Java's String.hashCode, a simple but not\n\t// rigorously collision resistant hashing function\n\tfunction generateHash( module, testName ) {\n\t\tvar hex,\n\t\t\ti = 0,\n\t\t\thash = 0,\n\t\t\tstr = module + \"\\x1C\" + testName,\n\t\t\tlen = str.length;\n\t\n\t\tfor ( ; i < len; i++ ) {\n\t\t\thash  = ( ( hash << 5 ) - hash ) + str.charCodeAt( i );\n\t\t\thash |= 0;\n\t\t}\n\t\n\t\t// Convert the possibly negative integer hash code into an 8 character hex string, which isn't\n\t\t// strictly necessary but increases user understanding that the id is a SHA-like hash\n\t\thex = ( 0x100000000 + hash ).toString( 16 );\n\t\tif ( hex.length < 8 ) {\n\t\t\thex = \"0000000\" + hex;\n\t\t}\n\t\n\t\treturn hex.slice( -8 );\n\t}\n\t\n\tfunction synchronize( callback, priority, seed ) {\n\t\tvar last = !priority,\n\t\t\tindex;\n\t\n\t\tif ( QUnit.objectType( callback ) === \"array\" ) {\n\t\t\twhile ( callback.length ) {\n\t\t\t\tsynchronize( callback.shift() );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( priority ) {\n\t\t\tconfig.queue.splice( priorityCount++, 0, callback );\n\t\t} else if ( seed ) {\n\t\t\tif ( !unitSampler ) {\n\t\t\t\tunitSampler = unitSamplerGenerator( seed );\n\t\t\t}\n\t\n\t\t\t// Insert into a random position after all priority items\n\t\t\tindex = Math.floor( unitSampler() * ( config.queue.length - priorityCount + 1 ) );\n\t\t\tconfig.queue.splice( priorityCount + index, 0, callback );\n\t\t} else {\n\t\t\tconfig.queue.push( callback );\n\t\t}\n\t\n\t\tif ( config.autorun && !config.blocking ) {\n\t\t\tprocess( last );\n\t\t}\n\t}\n\t\n\tfunction unitSamplerGenerator( seed ) {\n\t\n\t\t// 32-bit xorshift, requires only a nonzero seed\n\t\t// http://excamera.com/sphinx/article-xorshift.html\n\t\tvar sample = parseInt( generateHash( seed ), 16 ) || -1;\n\t\treturn function() {\n\t\t\tsample ^= sample << 13;\n\t\t\tsample ^= sample >>> 17;\n\t\t\tsample ^= sample << 5;\n\t\n\t\t\t// ECMAScript has no unsigned number type\n\t\t\tif ( sample < 0 ) {\n\t\t\t\tsample += 0x100000000;\n\t\t\t}\n\t\n\t\t\treturn sample / 0x100000000;\n\t\t};\n\t}\n\t\n\tfunction saveGlobal() {\n\t\tconfig.pollution = [];\n\t\n\t\tif ( config.noglobals ) {\n\t\t\tfor ( var key in global ) {\n\t\t\t\tif ( hasOwn.call( global, key ) ) {\n\t\n\t\t\t\t\t// In Opera sometimes DOM element ids show up here, ignore them\n\t\t\t\t\tif ( /^qunit-test-output/.test( key ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconfig.pollution.push( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction checkPollution() {\n\t\tvar newGlobals,\n\t\t\tdeletedGlobals,\n\t\t\told = config.pollution;\n\t\n\t\tsaveGlobal();\n\t\n\t\tnewGlobals = diff( config.pollution, old );\n\t\tif ( newGlobals.length > 0 ) {\n\t\t\tQUnit.pushFailure( \"Introduced global variable(s): \" + newGlobals.join( \", \" ) );\n\t\t}\n\t\n\t\tdeletedGlobals = diff( old, config.pollution );\n\t\tif ( deletedGlobals.length > 0 ) {\n\t\t\tQUnit.pushFailure( \"Deleted global variable(s): \" + deletedGlobals.join( \", \" ) );\n\t\t}\n\t}\n\t\n\t// Will be exposed as QUnit.asyncTest\n\tfunction asyncTest( testName, expected, callback ) {\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tQUnit.test( testName, expected, callback, true );\n\t}\n\t\n\t// Will be exposed as QUnit.test\n\tfunction test( testName, expected, callback, async ) {\n\t\tif ( focused )  { return; }\n\t\n\t\tvar newTest;\n\t\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tnewTest = new Test( {\n\t\t\ttestName: testName,\n\t\t\texpected: expected,\n\t\t\tasync: async,\n\t\t\tcallback: callback\n\t\t} );\n\t\n\t\tnewTest.queue();\n\t}\n\t\n\t// Will be exposed as QUnit.skip\n\tfunction skip( testName ) {\n\t\tif ( focused )  { return; }\n\t\n\t\tvar test = new Test( {\n\t\t\ttestName: testName,\n\t\t\tskip: true\n\t\t} );\n\t\n\t\ttest.queue();\n\t}\n\t\n\t// Will be exposed as QUnit.only\n\tfunction only( testName, expected, callback, async ) {\n\t\tvar newTest;\n\t\n\t\tif ( focused )  { return; }\n\t\n\t\tQUnit.config.queue.length = 0;\n\t\tfocused = true;\n\t\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tnewTest = new Test( {\n\t\t\ttestName: testName,\n\t\t\texpected: expected,\n\t\t\tasync: async,\n\t\t\tcallback: callback\n\t\t} );\n\t\n\t\tnewTest.queue();\n\t}\n\t\n\tfunction Assert( testContext ) {\n\t\tthis.test = testContext;\n\t}\n\t\n\t// Assert helpers\n\tQUnit.assert = Assert.prototype = {\n\t\n\t\t// Specify the number of expected assertions to guarantee that failed test\n\t\t// (no assertions are run at all) don't slip through.\n\t\texpect: function( asserts ) {\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tthis.test.expected = asserts;\n\t\t\t} else {\n\t\t\t\treturn this.test.expected;\n\t\t\t}\n\t\t},\n\t\n\t\t// Increment this Test's semaphore counter, then return a function that\n\t\t// decrements that counter a maximum of once.\n\t\tasync: function( count ) {\n\t\t\tvar test = this.test,\n\t\t\t\tpopped = false,\n\t\t\t\tacceptCallCount = count;\n\t\n\t\t\tif ( typeof acceptCallCount === \"undefined\" ) {\n\t\t\t\tacceptCallCount = 1;\n\t\t\t}\n\t\n\t\t\ttest.semaphore += 1;\n\t\t\ttest.usedAsync = true;\n\t\t\tpauseProcessing();\n\t\n\t\t\treturn function done() {\n\t\n\t\t\t\tif ( popped ) {\n\t\t\t\t\ttest.pushFailure( \"Too many calls to the `assert.async` callback\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tacceptCallCount -= 1;\n\t\t\t\tif ( acceptCallCount > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\ttest.semaphore -= 1;\n\t\t\t\tpopped = true;\n\t\t\t\tresumeProcessing();\n\t\t\t};\n\t\t},\n\t\n\t\t// Exports test.push() to the user API\n\t\t// Alias of pushResult.\n\t\tpush: function( result, actual, expected, message, negative ) {\n\t\t\tvar currentAssert = this instanceof Assert ? this : QUnit.config.current.assert;\n\t\t\treturn currentAssert.pushResult( {\n\t\t\t\tresult: result,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: negative\n\t\t\t} );\n\t\t},\n\t\n\t\tpushResult: function( resultInfo ) {\n\t\n\t\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\t\tvar assert = this,\n\t\t\t\tcurrentTest = ( assert instanceof Assert && assert.test ) || QUnit.config.current;\n\t\n\t\t\t// Backwards compatibility fix.\n\t\t\t// Allows the direct use of global exported assertions and QUnit.assert.*\n\t\t\t// Although, it's use is not recommended as it can leak assertions\n\t\t\t// to other tests from async tests, because we only get a reference to the current test,\n\t\t\t// not exactly the test where assertion were intended to be called.\n\t\t\tif ( !currentTest ) {\n\t\t\t\tthrow new Error( \"assertion outside test context, in \" + sourceFromStacktrace( 2 ) );\n\t\t\t}\n\t\n\t\t\tif ( currentTest.usedAsync === true && currentTest.semaphore === 0 ) {\n\t\t\t\tcurrentTest.pushFailure( \"Assertion after the final `assert.async` was resolved\",\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\n\t\t\t\t// Allow this assertion to continue running anyway...\n\t\t\t}\n\t\n\t\t\tif ( !( assert instanceof Assert ) ) {\n\t\t\t\tassert = currentTest.assert;\n\t\t\t}\n\t\n\t\t\treturn assert.test.pushResult( resultInfo );\n\t\t},\n\t\n\t\tok: function( result, message ) {\n\t\t\tmessage = message || ( result ? \"okay\" : \"failed, expected argument to be truthy, was: \" +\n\t\t\t\tQUnit.dump.parse( result ) );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !!result,\n\t\t\t\tactual: result,\n\t\t\t\texpected: true,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotOk: function( result, message ) {\n\t\t\tmessage = message || ( !result ? \"okay\" : \"failed, expected argument to be falsy, was: \" +\n\t\t\t\tQUnit.dump.parse( result ) );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !result,\n\t\t\t\tactual: result,\n\t\t\t\texpected: false,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tequal: function( actual, expected, message ) {\n\t\t\t/*jshint eqeqeq:false */\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected == actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotEqual: function( actual, expected, message ) {\n\t\t\t/*jshint eqeqeq:false */\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected != actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tpropEqual: function( actual, expected, message ) {\n\t\t\tactual = objectValues( actual );\n\t\t\texpected = objectValues( expected );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotPropEqual: function( actual, expected, message ) {\n\t\t\tactual = objectValues( actual );\n\t\t\texpected = objectValues( expected );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tdeepEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotDeepEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tstrictEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected === actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotStrictEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected !== actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\t\"throws\": function( block, expected, message ) {\n\t\t\tvar actual, expectedType,\n\t\t\t\texpectedOutput = expected,\n\t\t\t\tok = false,\n\t\t\t\tcurrentTest = ( this instanceof Assert && this.test ) || QUnit.config.current;\n\t\n\t\t\t// 'expected' is optional unless doing string comparison\n\t\t\tif ( message == null && typeof expected === \"string\" ) {\n\t\t\t\tmessage = expected;\n\t\t\t\texpected = null;\n\t\t\t}\n\t\n\t\t\tcurrentTest.ignoreGlobalErrors = true;\n\t\t\ttry {\n\t\t\t\tblock.call( currentTest.testEnvironment );\n\t\t\t} catch ( e ) {\n\t\t\t\tactual = e;\n\t\t\t}\n\t\t\tcurrentTest.ignoreGlobalErrors = false;\n\t\n\t\t\tif ( actual ) {\n\t\t\t\texpectedType = QUnit.objectType( expected );\n\t\n\t\t\t\t// We don't want to validate thrown error\n\t\t\t\tif ( !expected ) {\n\t\t\t\t\tok = true;\n\t\t\t\t\texpectedOutput = null;\n\t\n\t\t\t\t// Expected is a regexp\n\t\t\t\t} else if ( expectedType === \"regexp\" ) {\n\t\t\t\t\tok = expected.test( errorString( actual ) );\n\t\n\t\t\t\t// Expected is a string\n\t\t\t\t} else if ( expectedType === \"string\" ) {\n\t\t\t\t\tok = expected === errorString( actual );\n\t\n\t\t\t\t// Expected is a constructor, maybe an Error constructor\n\t\t\t\t} else if ( expectedType === \"function\" && actual instanceof expected ) {\n\t\t\t\t\tok = true;\n\t\n\t\t\t\t// Expected is an Error object\n\t\t\t\t} else if ( expectedType === \"object\" ) {\n\t\t\t\t\tok = actual instanceof expected.constructor &&\n\t\t\t\t\t\tactual.name === expected.name &&\n\t\t\t\t\t\tactual.message === expected.message;\n\t\n\t\t\t\t// Expected is a validation function which returns true if validation passed\n\t\t\t\t} else if ( expectedType === \"function\" && expected.call( {}, actual ) === true ) {\n\t\t\t\t\texpectedOutput = null;\n\t\t\t\t\tok = true;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tcurrentTest.assert.pushResult( {\n\t\t\t\tresult: ok,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expectedOutput,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t// Provide an alternative to assert.throws(), for environments that consider throws a reserved word\n\t// Known to us are: Closure Compiler, Narwhal\n\t( function() {\n\t\t/*jshint sub:true */\n\t\tAssert.prototype.raises = Assert.prototype [ \"throws\" ]; //jscs:ignore requireDotNotation\n\t}() );\n\t\n\tfunction errorString( error ) {\n\t\tvar name, message,\n\t\t\tresultErrorString = error.toString();\n\t\tif ( resultErrorString.substring( 0, 7 ) === \"[object\" ) {\n\t\t\tname = error.name ? error.name.toString() : \"Error\";\n\t\t\tmessage = error.message ? error.message.toString() : \"\";\n\t\t\tif ( name && message ) {\n\t\t\t\treturn name + \": \" + message;\n\t\t\t} else if ( name ) {\n\t\t\t\treturn name;\n\t\t\t} else if ( message ) {\n\t\t\t\treturn message;\n\t\t\t} else {\n\t\t\t\treturn \"Error\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn resultErrorString;\n\t\t}\n\t}\n\t\n\t// Test for equality any JavaScript type.\n\t// Author: Philippe Rathé <prathe@gmail.com>\n\tQUnit.equiv = ( function() {\n\t\n\t\t// Stack to decide between skip/abort functions\n\t\tvar callers = [];\n\t\n\t\t// Stack to avoiding loops from circular referencing\n\t\tvar parents = [];\n\t\tvar parentsB = [];\n\t\n\t\tvar getProto = Object.getPrototypeOf || function( obj ) {\n\t\n\t\t\t/*jshint proto: true */\n\t\t\treturn obj.__proto__;\n\t\t};\n\t\n\t\tfunction useStrictEquality( b, a ) {\n\t\n\t\t\t// To catch short annotation VS 'new' annotation of a declaration. e.g.:\n\t\t\t// `var i = 1;`\n\t\t\t// `var j = new Number(1);`\n\t\t\tif ( typeof a === \"object\" ) {\n\t\t\t\ta = a.valueOf();\n\t\t\t}\n\t\t\tif ( typeof b === \"object\" ) {\n\t\t\t\tb = b.valueOf();\n\t\t\t}\n\t\n\t\t\treturn a === b;\n\t\t}\n\t\n\t\tfunction compareConstructors( a, b ) {\n\t\t\tvar protoA = getProto( a );\n\t\t\tvar protoB = getProto( b );\n\t\n\t\t\t// Comparing constructors is more strict than using `instanceof`\n\t\t\tif ( a.constructor === b.constructor ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\t// Ref #851\n\t\t\t// If the obj prototype descends from a null constructor, treat it\n\t\t\t// as a null prototype.\n\t\t\tif ( protoA && protoA.constructor === null ) {\n\t\t\t\tprotoA = null;\n\t\t\t}\n\t\t\tif ( protoB && protoB.constructor === null ) {\n\t\t\t\tprotoB = null;\n\t\t\t}\n\t\n\t\t\t// Allow objects with no prototype to be equivalent to\n\t\t\t// objects with Object as their constructor.\n\t\t\tif ( ( protoA === null && protoB === Object.prototype ) ||\n\t\t\t\t\t( protoB === null && protoA === Object.prototype ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\t}\n\t\n\t\tfunction getRegExpFlags( regexp ) {\n\t\t\treturn \"flags\" in regexp ? regexp.flags : regexp.toString().match( /[gimuy]*$/ )[ 0 ];\n\t\t}\n\t\n\t\tvar callbacks = {\n\t\t\t\"string\": useStrictEquality,\n\t\t\t\"boolean\": useStrictEquality,\n\t\t\t\"number\": useStrictEquality,\n\t\t\t\"null\": useStrictEquality,\n\t\t\t\"undefined\": useStrictEquality,\n\t\t\t\"symbol\": useStrictEquality,\n\t\t\t\"date\": useStrictEquality,\n\t\n\t\t\t\"nan\": function() {\n\t\t\t\treturn true;\n\t\t\t},\n\t\n\t\t\t\"regexp\": function( b, a ) {\n\t\t\t\treturn a.source === b.source &&\n\t\n\t\t\t\t\t// Include flags in the comparison\n\t\t\t\t\tgetRegExpFlags( a ) === getRegExpFlags( b );\n\t\t\t},\n\t\n\t\t\t// - skip when the property is a method of an instance (OOP)\n\t\t\t// - abort otherwise,\n\t\t\t// initial === would have catch identical references anyway\n\t\t\t\"function\": function() {\n\t\t\t\tvar caller = callers[ callers.length - 1 ];\n\t\t\t\treturn caller !== Object && typeof caller !== \"undefined\";\n\t\t\t},\n\t\n\t\t\t\"array\": function( b, a ) {\n\t\t\t\tvar i, j, len, loop, aCircular, bCircular;\n\t\n\t\t\t\tlen = a.length;\n\t\t\t\tif ( len !== b.length ) {\n\t\n\t\t\t\t\t// Safe and faster\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\t// Track reference to avoid circular references\n\t\t\t\tparents.push( a );\n\t\t\t\tparentsB.push( b );\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tloop = false;\n\t\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparents.pop();\n\t\t\t\tparentsB.pop();\n\t\t\t\treturn true;\n\t\t\t},\n\t\n\t\t\t\"set\": function( b, a ) {\n\t\t\t\tvar innerEq,\n\t\t\t\t\touterEq = true;\n\t\n\t\t\t\tif ( a.size !== b.size ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\ta.forEach( function( aVal ) {\n\t\t\t\t\tinnerEq = false;\n\t\n\t\t\t\t\tb.forEach( function( bVal ) {\n\t\t\t\t\t\tif ( innerEquiv( bVal, aVal ) ) {\n\t\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\t\touterEq = false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\n\t\t\t\treturn outerEq;\n\t\t\t},\n\t\n\t\t\t\"map\": function( b, a ) {\n\t\t\t\tvar innerEq,\n\t\t\t\t\touterEq = true;\n\t\n\t\t\t\tif ( a.size !== b.size ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\ta.forEach( function( aVal, aKey ) {\n\t\t\t\t\tinnerEq = false;\n\t\n\t\t\t\t\tb.forEach( function( bVal, bKey ) {\n\t\t\t\t\t\tif ( innerEquiv( [ bVal, bKey ], [ aVal, aKey ] ) ) {\n\t\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\t\touterEq = false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\n\t\t\t\treturn outerEq;\n\t\t\t},\n\t\n\t\t\t\"object\": function( b, a ) {\n\t\t\t\tvar i, j, loop, aCircular, bCircular;\n\t\n\t\t\t\t// Default to true\n\t\t\t\tvar eq = true;\n\t\t\t\tvar aProperties = [];\n\t\t\t\tvar bProperties = [];\n\t\n\t\t\t\tif ( compareConstructors( a, b ) === false ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\t// Stack constructor before traversing properties\n\t\t\t\tcallers.push( a.constructor );\n\t\n\t\t\t\t// Track reference to avoid circular references\n\t\t\t\tparents.push( a );\n\t\t\t\tparentsB.push( b );\n\t\n\t\t\t\t// Be strict: don't ensure hasOwnProperty and go deep\n\t\t\t\tfor ( i in a ) {\n\t\t\t\t\tloop = false;\n\t\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\teq = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\taProperties.push( i );\n\t\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\t\teq = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tparents.pop();\n\t\t\t\tparentsB.pop();\n\t\n\t\t\t\t// Unstack, we are done\n\t\t\t\tcallers.pop();\n\t\n\t\t\t\tfor ( i in b ) {\n\t\n\t\t\t\t\t// Collect b's properties\n\t\t\t\t\tbProperties.push( i );\n\t\t\t\t}\n\t\n\t\t\t\t// Ensures identical properties name\n\t\t\t\treturn eq && innerEquiv( aProperties.sort(), bProperties.sort() );\n\t\t\t}\n\t\t};\n\t\n\t\tfunction typeEquiv( a, b ) {\n\t\t\tvar type = QUnit.objectType( a );\n\t\t\treturn QUnit.objectType( b ) === type && callbacks[ type ]( b, a );\n\t\t}\n\t\n\t\t// The real equiv function\n\t\tfunction innerEquiv( a, b ) {\n\t\n\t\t\t// We're done when there's nothing more to compare\n\t\t\tif ( arguments.length < 2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\t// Require type-specific equality\n\t\t\treturn ( a === b || typeEquiv( a, b ) ) &&\n\t\n\t\t\t\t// ...across all consecutive argument pairs\n\t\t\t\t( arguments.length === 2 || innerEquiv.apply( this, [].slice.call( arguments, 1 ) ) );\n\t\t}\n\t\n\t\treturn innerEquiv;\n\t}() );\n\t\n\t// Based on jsDump by Ariel Flesler\n\t// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html\n\tQUnit.dump = ( function() {\n\t\tfunction quote( str ) {\n\t\t\treturn \"\\\"\" + str.toString().replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\"/g, \"\\\\\\\"\" ) + \"\\\"\";\n\t\t}\n\t\tfunction literal( o ) {\n\t\t\treturn o + \"\";\n\t\t}\n\t\tfunction join( pre, arr, post ) {\n\t\t\tvar s = dump.separator(),\n\t\t\t\tbase = dump.indent(),\n\t\t\t\tinner = dump.indent( 1 );\n\t\t\tif ( arr.join ) {\n\t\t\t\tarr = arr.join( \",\" + s + inner );\n\t\t\t}\n\t\t\tif ( !arr ) {\n\t\t\t\treturn pre + post;\n\t\t\t}\n\t\t\treturn [ pre, inner + arr, base + post ].join( s );\n\t\t}\n\t\tfunction array( arr, stack ) {\n\t\t\tvar i = arr.length,\n\t\t\t\tret = new Array( i );\n\t\n\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\treturn \"[object Array]\";\n\t\t\t}\n\t\n\t\t\tthis.up();\n\t\t\twhile ( i-- ) {\n\t\t\t\tret[ i ] = this.parse( arr[ i ], undefined, stack );\n\t\t\t}\n\t\t\tthis.down();\n\t\t\treturn join( \"[\", ret, \"]\" );\n\t\t}\n\t\n\t\tvar reName = /^function (\\w+)/,\n\t\t\tdump = {\n\t\n\t\t\t\t// The objType is used mostly internally, you can fix a (custom) type in advance\n\t\t\t\tparse: function( obj, objType, stack ) {\n\t\t\t\t\tstack = stack || [];\n\t\t\t\t\tvar res, parser, parserType,\n\t\t\t\t\t\tinStack = inArray( obj, stack );\n\t\n\t\t\t\t\tif ( inStack !== -1 ) {\n\t\t\t\t\t\treturn \"recursion(\" + ( inStack - stack.length ) + \")\";\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobjType = objType || this.typeOf( obj  );\n\t\t\t\t\tparser = this.parsers[ objType ];\n\t\t\t\t\tparserType = typeof parser;\n\t\n\t\t\t\t\tif ( parserType === \"function\" ) {\n\t\t\t\t\t\tstack.push( obj );\n\t\t\t\t\t\tres = parser.call( this, obj, stack );\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t\treturn ( parserType === \"string\" ) ? parser : this.parsers.error;\n\t\t\t\t},\n\t\t\t\ttypeOf: function( obj ) {\n\t\t\t\t\tvar type;\n\t\t\t\t\tif ( obj === null ) {\n\t\t\t\t\t\ttype = \"null\";\n\t\t\t\t\t} else if ( typeof obj === \"undefined\" ) {\n\t\t\t\t\t\ttype = \"undefined\";\n\t\t\t\t\t} else if ( QUnit.is( \"regexp\", obj ) ) {\n\t\t\t\t\t\ttype = \"regexp\";\n\t\t\t\t\t} else if ( QUnit.is( \"date\", obj ) ) {\n\t\t\t\t\t\ttype = \"date\";\n\t\t\t\t\t} else if ( QUnit.is( \"function\", obj ) ) {\n\t\t\t\t\t\ttype = \"function\";\n\t\t\t\t\t} else if ( obj.setInterval !== undefined &&\n\t\t\t\t\t\t\tobj.document !== undefined &&\n\t\t\t\t\t\t\tobj.nodeType === undefined ) {\n\t\t\t\t\t\ttype = \"window\";\n\t\t\t\t\t} else if ( obj.nodeType === 9 ) {\n\t\t\t\t\t\ttype = \"document\";\n\t\t\t\t\t} else if ( obj.nodeType ) {\n\t\t\t\t\t\ttype = \"node\";\n\t\t\t\t\t} else if (\n\t\n\t\t\t\t\t\t// Native arrays\n\t\t\t\t\t\ttoString.call( obj ) === \"[object Array]\" ||\n\t\n\t\t\t\t\t\t// NodeList objects\n\t\t\t\t\t\t( typeof obj.length === \"number\" && obj.item !== undefined &&\n\t\t\t\t\t\t( obj.length ? obj.item( 0 ) === obj[ 0 ] : ( obj.item( 0 ) === null &&\n\t\t\t\t\t\tobj[ 0 ] === undefined ) ) )\n\t\t\t\t\t) {\n\t\t\t\t\t\ttype = \"array\";\n\t\t\t\t\t} else if ( obj.constructor === Error.prototype.constructor ) {\n\t\t\t\t\t\ttype = \"error\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = typeof obj;\n\t\t\t\t\t}\n\t\t\t\t\treturn type;\n\t\t\t\t},\n\t\n\t\t\t\tseparator: function() {\n\t\t\t\t\treturn this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&#160;\" : \" \";\n\t\t\t\t},\n\t\n\t\t\t\t// Extra can be a number, shortcut for increasing-calling-decreasing\n\t\t\t\tindent: function( extra ) {\n\t\t\t\t\tif ( !this.multiline ) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\tvar chr = this.indentChar;\n\t\t\t\t\tif ( this.HTML ) {\n\t\t\t\t\t\tchr = chr.replace( /\\t/g, \"   \" ).replace( / /g, \"&#160;\" );\n\t\t\t\t\t}\n\t\t\t\t\treturn new Array( this.depth + ( extra || 0 ) ).join( chr );\n\t\t\t\t},\n\t\t\t\tup: function( a ) {\n\t\t\t\t\tthis.depth += a || 1;\n\t\t\t\t},\n\t\t\t\tdown: function( a ) {\n\t\t\t\t\tthis.depth -= a || 1;\n\t\t\t\t},\n\t\t\t\tsetParser: function( name, parser ) {\n\t\t\t\t\tthis.parsers[ name ] = parser;\n\t\t\t\t},\n\t\n\t\t\t\t// The next 3 are exposed so you can use them\n\t\t\t\tquote: quote,\n\t\t\t\tliteral: literal,\n\t\t\t\tjoin: join,\n\t\t\t\tdepth: 1,\n\t\t\t\tmaxDepth: QUnit.config.maxDepth,\n\t\n\t\t\t\t// This is the list of parsers, to modify them, use dump.setParser\n\t\t\t\tparsers: {\n\t\t\t\t\twindow: \"[Window]\",\n\t\t\t\t\tdocument: \"[Document]\",\n\t\t\t\t\terror: function( error ) {\n\t\t\t\t\t\treturn \"Error(\\\"\" + error.message + \"\\\")\";\n\t\t\t\t\t},\n\t\t\t\t\tunknown: \"[Unknown]\",\n\t\t\t\t\t\"null\": \"null\",\n\t\t\t\t\t\"undefined\": \"undefined\",\n\t\t\t\t\t\"function\": function( fn ) {\n\t\t\t\t\t\tvar ret = \"function\",\n\t\n\t\t\t\t\t\t\t// Functions never have name in IE\n\t\t\t\t\t\t\tname = \"name\" in fn ? fn.name : ( reName.exec( fn ) || [] )[ 1 ];\n\t\n\t\t\t\t\t\tif ( name ) {\n\t\t\t\t\t\t\tret += \" \" + name;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tret += \"(\";\n\t\n\t\t\t\t\t\tret = [ ret, dump.parse( fn, \"functionArgs\" ), \"){\" ].join( \"\" );\n\t\t\t\t\t\treturn join( ret, dump.parse( fn, \"functionCode\" ), \"}\" );\n\t\t\t\t\t},\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnodelist: array,\n\t\t\t\t\t\"arguments\": array,\n\t\t\t\t\tobject: function( map, stack ) {\n\t\t\t\t\t\tvar keys, key, val, i, nonEnumerableProperties,\n\t\t\t\t\t\t\tret = [];\n\t\n\t\t\t\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\t\t\t\treturn \"[object Object]\";\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tdump.up();\n\t\t\t\t\t\tkeys = [];\n\t\t\t\t\t\tfor ( key in map ) {\n\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Some properties are not always enumerable on Error objects.\n\t\t\t\t\t\tnonEnumerableProperties = [ \"message\", \"name\" ];\n\t\t\t\t\t\tfor ( i in nonEnumerableProperties ) {\n\t\t\t\t\t\t\tkey = nonEnumerableProperties[ i ];\n\t\t\t\t\t\t\tif ( key in map && inArray( key, keys ) < 0 ) {\n\t\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tkeys.sort();\n\t\t\t\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\t\t\tval = map[ key ];\n\t\t\t\t\t\t\tret.push( dump.parse( key, \"key\" ) + \": \" +\n\t\t\t\t\t\t\t\tdump.parse( val, undefined, stack ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdump.down();\n\t\t\t\t\t\treturn join( \"{\", ret, \"}\" );\n\t\t\t\t\t},\n\t\t\t\t\tnode: function( node ) {\n\t\t\t\t\t\tvar len, i, val,\n\t\t\t\t\t\t\topen = dump.HTML ? \"&lt;\" : \"<\",\n\t\t\t\t\t\t\tclose = dump.HTML ? \"&gt;\" : \">\",\n\t\t\t\t\t\t\ttag = node.nodeName.toLowerCase(),\n\t\t\t\t\t\t\tret = open + tag,\n\t\t\t\t\t\t\tattrs = node.attributes;\n\t\n\t\t\t\t\t\tif ( attrs ) {\n\t\t\t\t\t\t\tfor ( i = 0, len = attrs.length; i < len; i++ ) {\n\t\t\t\t\t\t\t\tval = attrs[ i ].nodeValue;\n\t\n\t\t\t\t\t\t\t\t// IE6 includes all attributes in .attributes, even ones not explicitly\n\t\t\t\t\t\t\t\t// set. Those have values like undefined, null, 0, false, \"\" or\n\t\t\t\t\t\t\t\t// \"inherit\".\n\t\t\t\t\t\t\t\tif ( val && val !== \"inherit\" ) {\n\t\t\t\t\t\t\t\t\tret += \" \" + attrs[ i ].nodeName + \"=\" +\n\t\t\t\t\t\t\t\t\t\tdump.parse( val, \"attribute\" );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tret += close;\n\t\n\t\t\t\t\t\t// Show content of TextNode or CDATASection\n\t\t\t\t\t\tif ( node.nodeType === 3 || node.nodeType === 4 ) {\n\t\t\t\t\t\t\tret += node.nodeValue;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn ret + open + \"/\" + tag + close;\n\t\t\t\t\t},\n\t\n\t\t\t\t\t// Function calls it internally, it's the arguments part of the function\n\t\t\t\t\tfunctionArgs: function( fn ) {\n\t\t\t\t\t\tvar args,\n\t\t\t\t\t\t\tl = fn.length;\n\t\n\t\t\t\t\t\tif ( !l ) {\n\t\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\targs = new Array( l );\n\t\t\t\t\t\twhile ( l-- ) {\n\t\n\t\t\t\t\t\t\t// 97 is 'a'\n\t\t\t\t\t\t\targs[ l ] = String.fromCharCode( 97 + l );\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn \" \" + args.join( \", \" ) + \" \";\n\t\t\t\t\t},\n\t\n\t\t\t\t\t// Object calls it internally, the key part of an item in a map\n\t\t\t\t\tkey: quote,\n\t\n\t\t\t\t\t// Function calls it internally, it's the content of the function\n\t\t\t\t\tfunctionCode: \"[code]\",\n\t\n\t\t\t\t\t// Node calls it internally, it's a html attribute value\n\t\t\t\t\tattribute: quote,\n\t\t\t\t\tstring: quote,\n\t\t\t\t\tdate: quote,\n\t\t\t\t\tregexp: literal,\n\t\t\t\t\tnumber: literal,\n\t\t\t\t\t\"boolean\": literal\n\t\t\t\t},\n\t\n\t\t\t\t// If true, entities are escaped ( <, >, \\t, space and \\n )\n\t\t\t\tHTML: false,\n\t\n\t\t\t\t// Indentation unit\n\t\t\t\tindentChar: \"  \",\n\t\n\t\t\t\t// If true, items in a collection, are separated by a \\n, else just a space.\n\t\t\t\tmultiline: true\n\t\t\t};\n\t\n\t\treturn dump;\n\t}() );\n\t\n\t// Back compat\n\tQUnit.jsDump = QUnit.dump;\n\t\n\t// Deprecated\n\t// Extend assert methods to QUnit for Backwards compatibility\n\t( function() {\n\t\tvar i,\n\t\t\tassertions = Assert.prototype;\n\t\n\t\tfunction applyCurrent( current ) {\n\t\t\treturn function() {\n\t\t\t\tvar assert = new Assert( QUnit.config.current );\n\t\t\t\tcurrent.apply( assert, arguments );\n\t\t\t};\n\t\t}\n\t\n\t\tfor ( i in assertions ) {\n\t\t\tQUnit[ i ] = applyCurrent( assertions[ i ] );\n\t\t}\n\t}() );\n\t\n\t// For browser, export only select globals\n\tif ( defined.document ) {\n\t\n\t\t( function() {\n\t\t\tvar i, l,\n\t\t\t\tkeys = [\n\t\t\t\t\t\"test\",\n\t\t\t\t\t\"module\",\n\t\t\t\t\t\"expect\",\n\t\t\t\t\t\"asyncTest\",\n\t\t\t\t\t\"start\",\n\t\t\t\t\t\"stop\",\n\t\t\t\t\t\"ok\",\n\t\t\t\t\t\"notOk\",\n\t\t\t\t\t\"equal\",\n\t\t\t\t\t\"notEqual\",\n\t\t\t\t\t\"propEqual\",\n\t\t\t\t\t\"notPropEqual\",\n\t\t\t\t\t\"deepEqual\",\n\t\t\t\t\t\"notDeepEqual\",\n\t\t\t\t\t\"strictEqual\",\n\t\t\t\t\t\"notStrictEqual\",\n\t\t\t\t\t\"throws\",\n\t\t\t\t\t\"raises\"\n\t\t\t\t];\n\t\n\t\t\tfor ( i = 0, l = keys.length; i < l; i++ ) {\n\t\t\t\twindow[ keys[ i ] ] = QUnit[ keys[ i ] ];\n\t\t\t}\n\t\t}() );\n\t\n\t\twindow.QUnit = QUnit;\n\t}\n\t\n\t// For nodejs\n\tif ( typeof module !== \"undefined\" && module && module.exports ) {\n\t\tmodule.exports = QUnit;\n\t\n\t\t// For consistency with CommonJS environments' exports\n\t\tmodule.exports.QUnit = QUnit;\n\t}\n\t\n\t// For CommonJS with exports, but without module.exports, like Rhino\n\tif ( typeof exports !== \"undefined\" && exports ) {\n\t\texports.QUnit = QUnit;\n\t}\n\t\n\tif ( true ) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn QUnit;\n\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\tQUnit.config.autostart = false;\n\t}\n\t\n\t// Get a reference to the global object, like window in browsers\n\t}( ( function() {\n\t\treturn this;\n\t}() ) ) );\n\t\n\t( function() {\n\t\n\t// Only interact with URLs via window.location\n\tvar location = typeof window !== \"undefined\" && window.location;\n\tif ( !location ) {\n\t\treturn;\n\t}\n\t\n\tvar urlParams = getUrlParams();\n\t\n\tQUnit.urlParams = urlParams;\n\t\n\t// Match module/test by inclusion in an array\n\tQUnit.config.moduleId = [].concat( urlParams.moduleId || [] );\n\tQUnit.config.testId = [].concat( urlParams.testId || [] );\n\t\n\t// Exact case-insensitive match of the module name\n\tQUnit.config.module = urlParams.module;\n\t\n\t// Regular expression or case-insenstive substring match against \"moduleName: testName\"\n\tQUnit.config.filter = urlParams.filter;\n\t\n\t// Test order randomization\n\tif ( urlParams.seed === true ) {\n\t\n\t\t// Generate a random seed if the option is specified without a value\n\t\tQUnit.config.seed = Math.random().toString( 36 ).slice( 2 );\n\t} else if ( urlParams.seed ) {\n\t\tQUnit.config.seed = urlParams.seed;\n\t}\n\t\n\t// Add URL-parameter-mapped config values with UI form rendering data\n\tQUnit.config.urlConfig.push(\n\t\t{\n\t\t\tid: \"hidepassed\",\n\t\t\tlabel: \"Hide passed tests\",\n\t\t\ttooltip: \"Only show tests and assertions that fail. Stored as query-strings.\"\n\t\t},\n\t\t{\n\t\t\tid: \"noglobals\",\n\t\t\tlabel: \"Check for Globals\",\n\t\t\ttooltip: \"Enabling this will test if any test introduces new properties on the \" +\n\t\t\t\t\"global object (`window` in Browsers). Stored as query-strings.\"\n\t\t},\n\t\t{\n\t\t\tid: \"notrycatch\",\n\t\t\tlabel: \"No try-catch\",\n\t\t\ttooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging \" +\n\t\t\t\t\"exceptions in IE reasonable. Stored as query-strings.\"\n\t\t}\n\t);\n\t\n\tQUnit.begin( function() {\n\t\tvar i, option,\n\t\t\turlConfig = QUnit.config.urlConfig;\n\t\n\t\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\t\n\t\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\t\toption = QUnit.config.urlConfig[ i ];\n\t\t\tif ( typeof option !== \"string\" ) {\n\t\t\t\toption = option.id;\n\t\t\t}\n\t\n\t\t\tif ( QUnit.config[ option ] === undefined ) {\n\t\t\t\tQUnit.config[ option ] = urlParams[ option ];\n\t\t\t}\n\t\t}\n\t} );\n\t\n\tfunction getUrlParams() {\n\t\tvar i, param, name, value;\n\t\tvar urlParams = {};\n\t\tvar params = location.search.slice( 1 ).split( \"&\" );\n\t\tvar length = params.length;\n\t\n\t\tfor ( i = 0; i < length; i++ ) {\n\t\t\tif ( params[ i ] ) {\n\t\t\t\tparam = params[ i ].split( \"=\" );\n\t\t\t\tname = decodeURIComponent( param[ 0 ] );\n\t\n\t\t\t\t// Allow just a key to turn on a flag, e.g., test.html?noglobals\n\t\t\t\tvalue = param.length === 1 ||\n\t\t\t\t\tdecodeURIComponent( param.slice( 1 ).join( \"=\" ) ) ;\n\t\t\t\tif ( urlParams[ name ] ) {\n\t\t\t\t\turlParams[ name ] = [].concat( urlParams[ name ], value );\n\t\t\t\t} else {\n\t\t\t\t\turlParams[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn urlParams;\n\t}\n\t\n\t// Don't load the HTML Reporter on non-browser environments\n\tif ( typeof window === \"undefined\" || !window.document ) {\n\t\treturn;\n\t}\n\t\n\t// Deprecated QUnit.init - Ref #530\n\t// Re-initialize the configuration options\n\tQUnit.init = function() {\n\t\tvar config = QUnit.config;\n\t\n\t\tconfig.stats = { all: 0, bad: 0 };\n\t\tconfig.moduleStats = { all: 0, bad: 0 };\n\t\tconfig.started = 0;\n\t\tconfig.updateRate = 1000;\n\t\tconfig.blocking = false;\n\t\tconfig.autostart = true;\n\t\tconfig.autorun = false;\n\t\tconfig.filter = \"\";\n\t\tconfig.queue = [];\n\t\n\t\tappendInterface();\n\t};\n\t\n\tvar config = QUnit.config,\n\t\tdocument = window.document,\n\t\tcollapseNext = false,\n\t\thasOwn = Object.prototype.hasOwnProperty,\n\t\tunfilteredUrl = setUrl( { filter: undefined, module: undefined,\n\t\t\tmoduleId: undefined, testId: undefined } ),\n\t\tdefined = {\n\t\t\tsessionStorage: ( function() {\n\t\t\t\tvar x = \"qunit-test-string\";\n\t\t\t\ttry {\n\t\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\t\treturn true;\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}() )\n\t\t},\n\t\tmodulesList = [];\n\t\n\t/**\n\t* Escape text for attribute or text content.\n\t*/\n\tfunction escapeText( s ) {\n\t\tif ( !s ) {\n\t\t\treturn \"\";\n\t\t}\n\t\ts = s + \"\";\n\t\n\t\t// Both single quotes and double quotes (for attributes)\n\t\treturn s.replace( /['\"<>&]/g, function( s ) {\n\t\t\tswitch ( s ) {\n\t\t\tcase \"'\":\n\t\t\t\treturn \"&#039;\";\n\t\t\tcase \"\\\"\":\n\t\t\t\treturn \"&quot;\";\n\t\t\tcase \"<\":\n\t\t\t\treturn \"&lt;\";\n\t\t\tcase \">\":\n\t\t\t\treturn \"&gt;\";\n\t\t\tcase \"&\":\n\t\t\t\treturn \"&amp;\";\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t/**\n\t * @param {HTMLElement} elem\n\t * @param {string} type\n\t * @param {Function} fn\n\t */\n\tfunction addEvent( elem, type, fn ) {\n\t\tif ( elem.addEventListener ) {\n\t\n\t\t\t// Standards-based browsers\n\t\t\telem.addEventListener( type, fn, false );\n\t\t} else if ( elem.attachEvent ) {\n\t\n\t\t\t// Support: IE <9\n\t\t\telem.attachEvent( \"on\" + type, function() {\n\t\t\t\tvar event = window.event;\n\t\t\t\tif ( !event.target ) {\n\t\t\t\t\tevent.target = event.srcElement || document;\n\t\t\t\t}\n\t\n\t\t\t\tfn.call( elem, event );\n\t\t\t} );\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {Array|NodeList} elems\n\t * @param {string} type\n\t * @param {Function} fn\n\t */\n\tfunction addEvents( elems, type, fn ) {\n\t\tvar i = elems.length;\n\t\twhile ( i-- ) {\n\t\t\taddEvent( elems[ i ], type, fn );\n\t\t}\n\t}\n\t\n\tfunction hasClass( elem, name ) {\n\t\treturn ( \" \" + elem.className + \" \" ).indexOf( \" \" + name + \" \" ) >= 0;\n\t}\n\t\n\tfunction addClass( elem, name ) {\n\t\tif ( !hasClass( elem, name ) ) {\n\t\t\telem.className += ( elem.className ? \" \" : \"\" ) + name;\n\t\t}\n\t}\n\t\n\tfunction toggleClass( elem, name, force ) {\n\t\tif ( force || typeof force === \"undefined\" && !hasClass( elem, name ) ) {\n\t\t\taddClass( elem, name );\n\t\t} else {\n\t\t\tremoveClass( elem, name );\n\t\t}\n\t}\n\t\n\tfunction removeClass( elem, name ) {\n\t\tvar set = \" \" + elem.className + \" \";\n\t\n\t\t// Class name may appear multiple times\n\t\twhile ( set.indexOf( \" \" + name + \" \" ) >= 0 ) {\n\t\t\tset = set.replace( \" \" + name + \" \", \" \" );\n\t\t}\n\t\n\t\t// Trim for prettiness\n\t\telem.className = typeof set.trim === \"function\" ? set.trim() : set.replace( /^\\s+|\\s+$/g, \"\" );\n\t}\n\t\n\tfunction id( name ) {\n\t\treturn document.getElementById && document.getElementById( name );\n\t}\n\t\n\tfunction getUrlConfigHtml() {\n\t\tvar i, j, val,\n\t\t\tescaped, escapedTooltip,\n\t\t\tselection = false,\n\t\t\turlConfig = config.urlConfig,\n\t\t\turlConfigHtml = \"\";\n\t\n\t\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\t\n\t\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\t\tval = config.urlConfig[ i ];\n\t\t\tif ( typeof val === \"string\" ) {\n\t\t\t\tval = {\n\t\t\t\t\tid: val,\n\t\t\t\t\tlabel: val\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\tescaped = escapeText( val.id );\n\t\t\tescapedTooltip = escapeText( val.tooltip );\n\t\n\t\t\tif ( !val.value || typeof val.value === \"string\" ) {\n\t\t\t\turlConfigHtml += \"<input id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' name='\" + escaped + \"' type='checkbox'\" +\n\t\t\t\t\t( val.value ? \" value='\" + escapeText( val.value ) + \"'\" : \"\" ) +\n\t\t\t\t\t( config[ val.id ] ? \" checked='checked'\" : \"\" ) +\n\t\t\t\t\t\" title='\" + escapedTooltip + \"' /><label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label + \"</label>\";\n\t\t\t} else {\n\t\t\t\turlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label +\n\t\t\t\t\t\": </label><select id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' name='\" + escaped + \"' title='\" + escapedTooltip + \"'><option></option>\";\n\t\n\t\t\t\tif ( QUnit.is( \"array\", val.value ) ) {\n\t\t\t\t\tfor ( j = 0; j < val.value.length; j++ ) {\n\t\t\t\t\t\tescaped = escapeText( val.value[ j ] );\n\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped + \"'\" +\n\t\t\t\t\t\t\t( config[ val.id ] === val.value[ j ] ?\n\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\">\" + escaped + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( j in val.value ) {\n\t\t\t\t\t\tif ( hasOwn.call( val.value, j ) ) {\n\t\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escapeText( j ) + \"'\" +\n\t\t\t\t\t\t\t\t( config[ val.id ] === j ?\n\t\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\t\">\" + escapeText( val.value[ j ] ) + \"</option>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( config[ val.id ] && !selection ) {\n\t\t\t\t\tescaped = escapeText( config[ val.id ] );\n\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped +\n\t\t\t\t\t\t\"' selected='selected' disabled='disabled'>\" + escaped + \"</option>\";\n\t\t\t\t}\n\t\t\t\turlConfigHtml += \"</select>\";\n\t\t\t}\n\t\t}\n\t\n\t\treturn urlConfigHtml;\n\t}\n\t\n\t// Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.\n\t// Updates the URL with the new state of `config.urlConfig` values.\n\tfunction toolbarChanged() {\n\t\tvar updatedUrl, value, tests,\n\t\t\tfield = this,\n\t\t\tparams = {};\n\t\n\t\t// Detect if field is a select menu or a checkbox\n\t\tif ( \"selectedIndex\" in field ) {\n\t\t\tvalue = field.options[ field.selectedIndex ].value || undefined;\n\t\t} else {\n\t\t\tvalue = field.checked ? ( field.defaultValue || true ) : undefined;\n\t\t}\n\t\n\t\tparams[ field.name ] = value;\n\t\tupdatedUrl = setUrl( params );\n\t\n\t\t// Check if we can apply the change without a page refresh\n\t\tif ( \"hidepassed\" === field.name && \"replaceState\" in window.history ) {\n\t\t\tQUnit.urlParams[ field.name ] = value;\n\t\t\tconfig[ field.name ] = value || false;\n\t\t\ttests = id( \"qunit-tests\" );\n\t\t\tif ( tests ) {\n\t\t\t\ttoggleClass( tests, \"hidepass\", value || false );\n\t\t\t}\n\t\t\twindow.history.replaceState( null, \"\", updatedUrl );\n\t\t} else {\n\t\t\twindow.location = updatedUrl;\n\t\t}\n\t}\n\t\n\tfunction setUrl( params ) {\n\t\tvar key, arrValue, i,\n\t\t\tquerystring = \"?\",\n\t\t\tlocation = window.location;\n\t\n\t\tparams = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\n\t\n\t\tfor ( key in params ) {\n\t\n\t\t\t// Skip inherited or undefined properties\n\t\t\tif ( hasOwn.call( params, key ) && params[ key ] !== undefined ) {\n\t\n\t\t\t\t// Output a parameter for each value of this key (but usually just one)\n\t\t\t\tarrValue = [].concat( params[ key ] );\n\t\t\t\tfor ( i = 0; i < arrValue.length; i++ ) {\n\t\t\t\t\tquerystring += encodeURIComponent( key );\n\t\t\t\t\tif ( arrValue[ i ] !== true ) {\n\t\t\t\t\t\tquerystring += \"=\" + encodeURIComponent( arrValue[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tquerystring += \"&\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn location.protocol + \"//\" + location.host +\n\t\t\tlocation.pathname + querystring.slice( 0, -1 );\n\t}\n\t\n\tfunction applyUrlParams() {\n\t\tvar selectedModule,\n\t\t\tmodulesList = id( \"qunit-modulefilter\" ),\n\t\t\tfilter = id( \"qunit-filter-input\" ).value;\n\t\n\t\tselectedModule = modulesList ?\n\t\t\tdecodeURIComponent( modulesList.options[ modulesList.selectedIndex ].value ) :\n\t\t\tundefined;\n\t\n\t\twindow.location = setUrl( {\n\t\t\tmodule: ( selectedModule === \"\" ) ? undefined : selectedModule,\n\t\t\tfilter: ( filter === \"\" ) ? undefined : filter,\n\t\n\t\t\t// Remove moduleId and testId filters\n\t\t\tmoduleId: undefined,\n\t\t\ttestId: undefined\n\t\t} );\n\t}\n\t\n\tfunction toolbarUrlConfigContainer() {\n\t\tvar urlConfigContainer = document.createElement( \"span\" );\n\t\n\t\turlConfigContainer.innerHTML = getUrlConfigHtml();\n\t\taddClass( urlConfigContainer, \"qunit-url-config\" );\n\t\n\t\t// For oldIE support:\n\t\t// * Add handlers to the individual elements instead of the container\n\t\t// * Use \"click\" instead of \"change\" for checkboxes\n\t\taddEvents( urlConfigContainer.getElementsByTagName( \"input\" ), \"click\", toolbarChanged );\n\t\taddEvents( urlConfigContainer.getElementsByTagName( \"select\" ), \"change\", toolbarChanged );\n\t\n\t\treturn urlConfigContainer;\n\t}\n\t\n\tfunction toolbarLooseFilter() {\n\t\tvar filter = document.createElement( \"form\" ),\n\t\t\tlabel = document.createElement( \"label\" ),\n\t\t\tinput = document.createElement( \"input\" ),\n\t\t\tbutton = document.createElement( \"button\" );\n\t\n\t\taddClass( filter, \"qunit-filter\" );\n\t\n\t\tlabel.innerHTML = \"Filter: \";\n\t\n\t\tinput.type = \"text\";\n\t\tinput.value = config.filter || \"\";\n\t\tinput.name = \"filter\";\n\t\tinput.id = \"qunit-filter-input\";\n\t\n\t\tbutton.innerHTML = \"Go\";\n\t\n\t\tlabel.appendChild( input );\n\t\n\t\tfilter.appendChild( label );\n\t\tfilter.appendChild( button );\n\t\taddEvent( filter, \"submit\", function( ev ) {\n\t\t\tapplyUrlParams();\n\t\n\t\t\tif ( ev && ev.preventDefault ) {\n\t\t\t\tev.preventDefault();\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\t} );\n\t\n\t\treturn filter;\n\t}\n\t\n\tfunction toolbarModuleFilterHtml() {\n\t\tvar i,\n\t\t\tmoduleFilterHtml = \"\";\n\t\n\t\tif ( !modulesList.length ) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tmoduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label>\" +\n\t\t\t\"<select id='qunit-modulefilter' name='modulefilter'><option value='' \" +\n\t\t\t( QUnit.urlParams.module === undefined ? \"selected='selected'\" : \"\" ) +\n\t\t\t\">< All Modules ></option>\";\n\t\n\t\tfor ( i = 0; i < modulesList.length; i++ ) {\n\t\t\tmoduleFilterHtml += \"<option value='\" +\n\t\t\t\tescapeText( encodeURIComponent( modulesList[ i ] ) ) + \"' \" +\n\t\t\t\t( QUnit.urlParams.module === modulesList[ i ] ? \"selected='selected'\" : \"\" ) +\n\t\t\t\t\">\" + escapeText( modulesList[ i ] ) + \"</option>\";\n\t\t}\n\t\tmoduleFilterHtml += \"</select>\";\n\t\n\t\treturn moduleFilterHtml;\n\t}\n\t\n\tfunction toolbarModuleFilter() {\n\t\tvar toolbar = id( \"qunit-testrunner-toolbar\" ),\n\t\t\tmoduleFilter = document.createElement( \"span\" ),\n\t\t\tmoduleFilterHtml = toolbarModuleFilterHtml();\n\t\n\t\tif ( !toolbar || !moduleFilterHtml ) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tmoduleFilter.setAttribute( \"id\", \"qunit-modulefilter-container\" );\n\t\tmoduleFilter.innerHTML = moduleFilterHtml;\n\t\n\t\taddEvent( moduleFilter.lastChild, \"change\", applyUrlParams );\n\t\n\t\ttoolbar.appendChild( moduleFilter );\n\t}\n\t\n\tfunction appendToolbar() {\n\t\tvar toolbar = id( \"qunit-testrunner-toolbar\" );\n\t\n\t\tif ( toolbar ) {\n\t\t\ttoolbar.appendChild( toolbarUrlConfigContainer() );\n\t\t\ttoolbar.appendChild( toolbarLooseFilter() );\n\t\t\ttoolbarModuleFilter();\n\t\t}\n\t}\n\t\n\tfunction appendHeader() {\n\t\tvar header = id( \"qunit-header\" );\n\t\n\t\tif ( header ) {\n\t\t\theader.innerHTML = \"<a href='\" + escapeText( unfilteredUrl ) + \"'>\" + header.innerHTML +\n\t\t\t\t\"</a> \";\n\t\t}\n\t}\n\t\n\tfunction appendBanner() {\n\t\tvar banner = id( \"qunit-banner\" );\n\t\n\t\tif ( banner ) {\n\t\t\tbanner.className = \"\";\n\t\t}\n\t}\n\t\n\tfunction appendTestResults() {\n\t\tvar tests = id( \"qunit-tests\" ),\n\t\t\tresult = id( \"qunit-testresult\" );\n\t\n\t\tif ( result ) {\n\t\t\tresult.parentNode.removeChild( result );\n\t\t}\n\t\n\t\tif ( tests ) {\n\t\t\ttests.innerHTML = \"\";\n\t\t\tresult = document.createElement( \"p\" );\n\t\t\tresult.id = \"qunit-testresult\";\n\t\t\tresult.className = \"result\";\n\t\t\ttests.parentNode.insertBefore( result, tests );\n\t\t\tresult.innerHTML = \"Running...<br />&#160;\";\n\t\t}\n\t}\n\t\n\tfunction storeFixture() {\n\t\tvar fixture = id( \"qunit-fixture\" );\n\t\tif ( fixture ) {\n\t\t\tconfig.fixture = fixture.innerHTML;\n\t\t}\n\t}\n\t\n\tfunction appendFilteredTest() {\n\t\tvar testId = QUnit.config.testId;\n\t\tif ( !testId || testId.length <= 0 ) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn \"<div id='qunit-filteredTest'>Rerunning selected tests: \" +\n\t\t\tescapeText( testId.join( \", \" ) ) +\n\t\t\t\" <a id='qunit-clearFilter' href='\" +\n\t\t\tescapeText( unfilteredUrl ) +\n\t\t\t\"'>Run all tests</a></div>\";\n\t}\n\t\n\tfunction appendUserAgent() {\n\t\tvar userAgent = id( \"qunit-userAgent\" );\n\t\n\t\tif ( userAgent ) {\n\t\t\tuserAgent.innerHTML = \"\";\n\t\t\tuserAgent.appendChild(\n\t\t\t\tdocument.createTextNode(\n\t\t\t\t\t\"QUnit \" + QUnit.version + \"; \" + navigator.userAgent\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\t\n\tfunction appendInterface() {\n\t\tvar qunit = id( \"qunit\" );\n\t\n\t\tif ( qunit ) {\n\t\t\tqunit.innerHTML =\n\t\t\t\t\"<h1 id='qunit-header'>\" + escapeText( document.title ) + \"</h1>\" +\n\t\t\t\t\"<h2 id='qunit-banner'></h2>\" +\n\t\t\t\t\"<div id='qunit-testrunner-toolbar'></div>\" +\n\t\t\t\tappendFilteredTest() +\n\t\t\t\t\"<h2 id='qunit-userAgent'></h2>\" +\n\t\t\t\t\"<ol id='qunit-tests'></ol>\";\n\t\t}\n\t\n\t\tappendHeader();\n\t\tappendBanner();\n\t\tappendTestResults();\n\t\tappendUserAgent();\n\t\tappendToolbar();\n\t}\n\t\n\tfunction appendTestsList( modules ) {\n\t\tvar i, l, x, z, test, moduleObj;\n\t\n\t\tfor ( i = 0, l = modules.length; i < l; i++ ) {\n\t\t\tmoduleObj = modules[ i ];\n\t\n\t\t\tfor ( x = 0, z = moduleObj.tests.length; x < z; x++ ) {\n\t\t\t\ttest = moduleObj.tests[ x ];\n\t\n\t\t\t\tappendTest( test.name, test.testId, moduleObj.name );\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction appendTest( name, testId, moduleName ) {\n\t\tvar title, rerunTrigger, testBlock, assertList,\n\t\t\ttests = id( \"qunit-tests\" );\n\t\n\t\tif ( !tests ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\ttitle = document.createElement( \"strong\" );\n\t\ttitle.innerHTML = getNameHtml( name, moduleName );\n\t\n\t\trerunTrigger = document.createElement( \"a\" );\n\t\trerunTrigger.innerHTML = \"Rerun\";\n\t\trerunTrigger.href = setUrl( { testId: testId } );\n\t\n\t\ttestBlock = document.createElement( \"li\" );\n\t\ttestBlock.appendChild( title );\n\t\ttestBlock.appendChild( rerunTrigger );\n\t\ttestBlock.id = \"qunit-test-output-\" + testId;\n\t\n\t\tassertList = document.createElement( \"ol\" );\n\t\tassertList.className = \"qunit-assert-list\";\n\t\n\t\ttestBlock.appendChild( assertList );\n\t\n\t\ttests.appendChild( testBlock );\n\t}\n\t\n\t// HTML Reporter initialization and load\n\tQUnit.begin( function( details ) {\n\t\tvar i, moduleObj, tests;\n\t\n\t\t// Sort modules by name for the picker\n\t\tfor ( i = 0; i < details.modules.length; i++ ) {\n\t\t\tmoduleObj = details.modules[ i ];\n\t\t\tif ( moduleObj.name ) {\n\t\t\t\tmodulesList.push( moduleObj.name );\n\t\t\t}\n\t\t}\n\t\tmodulesList.sort( function( a, b ) {\n\t\t\treturn a.localeCompare( b );\n\t\t} );\n\t\n\t\t// Capture fixture HTML from the page\n\t\tstoreFixture();\n\t\n\t\t// Initialize QUnit elements\n\t\tappendInterface();\n\t\tappendTestsList( details.modules );\n\t\ttests = id( \"qunit-tests\" );\n\t\tif ( tests && config.hidepassed ) {\n\t\t\taddClass( tests, \"hidepass\" );\n\t\t}\n\t} );\n\t\n\tQUnit.done( function( details ) {\n\t\tvar i, key,\n\t\t\tbanner = id( \"qunit-banner\" ),\n\t\t\ttests = id( \"qunit-tests\" ),\n\t\t\thtml = [\n\t\t\t\t\"Tests completed in \",\n\t\t\t\tdetails.runtime,\n\t\t\t\t\" milliseconds.<br />\",\n\t\t\t\t\"<span class='passed'>\",\n\t\t\t\tdetails.passed,\n\t\t\t\t\"</span> assertions of <span class='total'>\",\n\t\t\t\tdetails.total,\n\t\t\t\t\"</span> passed, <span class='failed'>\",\n\t\t\t\tdetails.failed,\n\t\t\t\t\"</span> failed.\"\n\t\t\t].join( \"\" );\n\t\n\t\tif ( banner ) {\n\t\t\tbanner.className = details.failed ? \"qunit-fail\" : \"qunit-pass\";\n\t\t}\n\t\n\t\tif ( tests ) {\n\t\t\tid( \"qunit-testresult\" ).innerHTML = html;\n\t\t}\n\t\n\t\tif ( config.altertitle && document.title ) {\n\t\n\t\t\t// Show ✖ for good, ✔ for bad suite result in title\n\t\t\t// use escape sequences in case file gets loaded with non-utf-8-charset\n\t\t\tdocument.title = [\n\t\t\t\t( details.failed ? \"\\u2716\" : \"\\u2714\" ),\n\t\t\t\tdocument.title.replace( /^[\\u2714\\u2716] /i, \"\" )\n\t\t\t].join( \" \" );\n\t\t}\n\t\n\t\t// Clear own sessionStorage items if all tests passed\n\t\tif ( config.reorder && defined.sessionStorage && details.failed === 0 ) {\n\t\t\tfor ( i = 0; i < sessionStorage.length; i++ ) {\n\t\t\t\tkey = sessionStorage.key( i++ );\n\t\t\t\tif ( key.indexOf( \"qunit-test-\" ) === 0 ) {\n\t\t\t\t\tsessionStorage.removeItem( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Scroll back to top to show results\n\t\tif ( config.scrolltop && window.scrollTo ) {\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t}\n\t} );\n\t\n\tfunction getNameHtml( name, module ) {\n\t\tvar nameHtml = \"\";\n\t\n\t\tif ( module ) {\n\t\t\tnameHtml = \"<span class='module-name'>\" + escapeText( module ) + \"</span>: \";\n\t\t}\n\t\n\t\tnameHtml += \"<span class='test-name'>\" + escapeText( name ) + \"</span>\";\n\t\n\t\treturn nameHtml;\n\t}\n\t\n\tQUnit.testStart( function( details ) {\n\t\tvar running, testBlock, bad;\n\t\n\t\ttestBlock = id( \"qunit-test-output-\" + details.testId );\n\t\tif ( testBlock ) {\n\t\t\ttestBlock.className = \"running\";\n\t\t} else {\n\t\n\t\t\t// Report later registered tests\n\t\t\tappendTest( details.name, details.testId, details.module );\n\t\t}\n\t\n\t\trunning = id( \"qunit-testresult\" );\n\t\tif ( running ) {\n\t\t\tbad = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\n\t\t\trunning.innerHTML = ( bad ?\n\t\t\t\t\"Rerunning previously failed test: <br />\" :\n\t\t\t\t\"Running: <br />\" ) +\n\t\t\t\tgetNameHtml( details.name, details.module );\n\t\t}\n\t\n\t} );\n\t\n\tfunction stripHtml( string ) {\n\t\n\t\t// Strip tags, html entity and whitespaces\n\t\treturn string.replace( /<\\/?[^>]+(>|$)/g, \"\" ).replace( /\\&quot;/g, \"\" ).replace( /\\s+/g, \"\" );\n\t}\n\t\n\tQUnit.log( function( details ) {\n\t\tvar assertList, assertLi,\n\t\t\tmessage, expected, actual, diff,\n\t\t\tshowDiff = false,\n\t\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\t\n\t\tif ( !testItem ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tmessage = escapeText( details.message ) || ( details.result ? \"okay\" : \"failed\" );\n\t\tmessage = \"<span class='test-message'>\" + message + \"</span>\";\n\t\tmessage += \"<span class='runtime'>@ \" + details.runtime + \" ms</span>\";\n\t\n\t\t// The pushFailure doesn't provide details.expected\n\t\t// when it calls, it's implicit to also not show expected and diff stuff\n\t\t// Also, we need to check details.expected existence, as it can exist and be undefined\n\t\tif ( !details.result && hasOwn.call( details, \"expected\" ) ) {\n\t\t\tif ( details.negative ) {\n\t\t\t\texpected = \"NOT \" + QUnit.dump.parse( details.expected );\n\t\t\t} else {\n\t\t\t\texpected = QUnit.dump.parse( details.expected );\n\t\t\t}\n\t\n\t\t\tactual = QUnit.dump.parse( details.actual );\n\t\t\tmessage += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" +\n\t\t\t\tescapeText( expected ) +\n\t\t\t\t\"</pre></td></tr>\";\n\t\n\t\t\tif ( actual !== expected ) {\n\t\n\t\t\t\tmessage += \"<tr class='test-actual'><th>Result: </th><td><pre>\" +\n\t\t\t\t\tescapeText( actual ) + \"</pre></td></tr>\";\n\t\n\t\t\t\t// Don't show diff if actual or expected are booleans\n\t\t\t\tif ( !( /^(true|false)$/.test( actual ) ) &&\n\t\t\t\t\t\t!( /^(true|false)$/.test( expected ) ) ) {\n\t\t\t\t\tdiff = QUnit.diff( expected, actual );\n\t\t\t\t\tshowDiff = stripHtml( diff ).length !==\n\t\t\t\t\t\tstripHtml( expected ).length +\n\t\t\t\t\t\tstripHtml( actual ).length;\n\t\t\t\t}\n\t\n\t\t\t\t// Don't show diff if expected and actual are totally different\n\t\t\t\tif ( showDiff ) {\n\t\t\t\t\tmessage += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" +\n\t\t\t\t\t\tdiff + \"</pre></td></tr>\";\n\t\t\t\t}\n\t\t\t} else if ( expected.indexOf( \"[object Array]\" ) !== -1 ||\n\t\t\t\t\texpected.indexOf( \"[object Object]\" ) !== -1 ) {\n\t\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\t\"Diff suppressed as the depth of object is more than current max depth (\" +\n\t\t\t\t\tQUnit.config.maxDepth + \").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \" +\n\t\t\t\t\t\" run with a higher max depth or <a href='\" +\n\t\t\t\t\tescapeText( setUrl( { maxDepth: -1 } ) ) + \"'>\" +\n\t\t\t\t\t\"Rerun</a> without max depth.</p></td></tr>\";\n\t\t\t} else {\n\t\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\t\"Diff suppressed as the expected and actual results have an equivalent\" +\n\t\t\t\t\t\" serialization</td></tr>\";\n\t\t\t}\n\t\n\t\t\tif ( details.source ) {\n\t\t\t\tmessage += \"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\";\n\t\t\t}\n\t\n\t\t\tmessage += \"</table>\";\n\t\n\t\t// This occurs when pushFailure is set and we have an extracted stack trace\n\t\t} else if ( !details.result && details.source ) {\n\t\t\tmessage += \"<table>\" +\n\t\t\t\t\"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\" +\n\t\t\t\t\"</table>\";\n\t\t}\n\t\n\t\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\t\n\t\tassertLi = document.createElement( \"li\" );\n\t\tassertLi.className = details.result ? \"pass\" : \"fail\";\n\t\tassertLi.innerHTML = message;\n\t\tassertList.appendChild( assertLi );\n\t} );\n\t\n\tQUnit.testDone( function( details ) {\n\t\tvar testTitle, time, testItem, assertList,\n\t\t\tgood, bad, testCounts, skipped, sourceName,\n\t\t\ttests = id( \"qunit-tests\" );\n\t\n\t\tif ( !tests ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\t\n\t\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\t\n\t\tgood = details.passed;\n\t\tbad = details.failed;\n\t\n\t\t// Store result when possible\n\t\tif ( config.reorder && defined.sessionStorage ) {\n\t\t\tif ( bad ) {\n\t\t\t\tsessionStorage.setItem( \"qunit-test-\" + details.module + \"-\" + details.name, bad );\n\t\t\t} else {\n\t\t\t\tsessionStorage.removeItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\t\t}\n\t\t}\n\t\n\t\tif ( bad === 0 ) {\n\t\n\t\t\t// Collapse the passing tests\n\t\t\taddClass( assertList, \"qunit-collapsed\" );\n\t\t} else if ( bad && config.collapse && !collapseNext ) {\n\t\n\t\t\t// Skip collapsing the first failing test\n\t\t\tcollapseNext = true;\n\t\t} else {\n\t\n\t\t\t// Collapse remaining tests\n\t\t\taddClass( assertList, \"qunit-collapsed\" );\n\t\t}\n\t\n\t\t// The testItem.firstChild is the test name\n\t\ttestTitle = testItem.firstChild;\n\t\n\t\ttestCounts = bad ?\n\t\t\t\"<b class='failed'>\" + bad + \"</b>, \" + \"<b class='passed'>\" + good + \"</b>, \" :\n\t\t\t\"\";\n\t\n\t\ttestTitle.innerHTML += \" <b class='counts'>(\" + testCounts +\n\t\t\tdetails.assertions.length + \")</b>\";\n\t\n\t\tif ( details.skipped ) {\n\t\t\ttestItem.className = \"skipped\";\n\t\t\tskipped = document.createElement( \"em\" );\n\t\t\tskipped.className = \"qunit-skipped-label\";\n\t\t\tskipped.innerHTML = \"skipped\";\n\t\t\ttestItem.insertBefore( skipped, testTitle );\n\t\t} else {\n\t\t\taddEvent( testTitle, \"click\", function() {\n\t\t\t\ttoggleClass( assertList, \"qunit-collapsed\" );\n\t\t\t} );\n\t\n\t\t\ttestItem.className = bad ? \"fail\" : \"pass\";\n\t\n\t\t\ttime = document.createElement( \"span\" );\n\t\t\ttime.className = \"runtime\";\n\t\t\ttime.innerHTML = details.runtime + \" ms\";\n\t\t\ttestItem.insertBefore( time, assertList );\n\t\t}\n\t\n\t\t// Show the source of the test when showing assertions\n\t\tif ( details.source ) {\n\t\t\tsourceName = document.createElement( \"p\" );\n\t\t\tsourceName.innerHTML = \"<strong>Source: </strong>\" + details.source;\n\t\t\taddClass( sourceName, \"qunit-source\" );\n\t\t\tif ( bad === 0 ) {\n\t\t\t\taddClass( sourceName, \"qunit-collapsed\" );\n\t\t\t}\n\t\t\taddEvent( testTitle, \"click\", function() {\n\t\t\t\ttoggleClass( sourceName, \"qunit-collapsed\" );\n\t\t\t} );\n\t\t\ttestItem.appendChild( sourceName );\n\t\t}\n\t} );\n\t\n\t// Avoid readyState issue with phantomjs\n\t// Ref: #818\n\tvar notPhantom = ( function( p ) {\n\t\treturn !( p && p.version && p.version.major > 0 );\n\t} )( window.phantom );\n\t\n\tif ( notPhantom && document.readyState === \"complete\" ) {\n\t\tQUnit.load();\n\t} else {\n\t\taddEvent( window, \"load\", QUnit.load );\n\t}\n\t\n\t/*\n\t * This file is a modified version of google-diff-match-patch's JavaScript implementation\n\t * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\n\t * modifications are licensed as more fully set forth in LICENSE.txt.\n\t *\n\t * The original source of google-diff-match-patch is attributable and licensed as follows:\n\t *\n\t * Copyright 2006 Google Inc.\n\t * https://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * https://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t * More Info:\n\t *  https://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Usage: QUnit.diff(expected, actual)\n\t *\n\t */\n\tQUnit.diff = ( function() {\n\t\tfunction DiffMatchPatch() {\n\t\t}\n\t\n\t\t//  DIFF FUNCTIONS\n\t\n\t\t/**\n\t\t * The data structure representing a diff is an array of tuples:\n\t\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t\t */\n\t\tvar DIFF_DELETE = -1,\n\t\t\tDIFF_INSERT = 1,\n\t\t\tDIFF_EQUAL = 0;\n\t\n\t\t/**\n\t\t * Find the differences between two texts.  Simplifies the problem by stripping\n\t\t * any common prefix or suffix off the texts before diffing.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {boolean=} optChecklines Optional speedup flag. If present and false,\n\t\t *     then don't run a line-level diff first to identify the changed areas.\n\t\t *     Defaults to true, which does a faster, slightly less optimal diff.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.DiffMain = function( text1, text2, optChecklines ) {\n\t\t\tvar deadline, checklines, commonlength,\n\t\t\t\tcommonprefix, commonsuffix, diffs;\n\t\n\t\t\t// The diff must be complete in up to 1 second.\n\t\t\tdeadline = ( new Date() ).getTime() + 1000;\n\t\n\t\t\t// Check for null inputs.\n\t\t\tif ( text1 === null || text2 === null ) {\n\t\t\t\tthrow new Error( \"Null input. (DiffMain)\" );\n\t\t\t}\n\t\n\t\t\t// Check for equality (speedup).\n\t\t\tif ( text1 === text2 ) {\n\t\t\t\tif ( text1 ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t[ DIFF_EQUAL, text1 ]\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\n\t\t\tif ( typeof optChecklines === \"undefined\" ) {\n\t\t\t\toptChecklines = true;\n\t\t\t}\n\t\n\t\t\tchecklines = optChecklines;\n\t\n\t\t\t// Trim off common prefix (speedup).\n\t\t\tcommonlength = this.diffCommonPrefix( text1, text2 );\n\t\t\tcommonprefix = text1.substring( 0, commonlength );\n\t\t\ttext1 = text1.substring( commonlength );\n\t\t\ttext2 = text2.substring( commonlength );\n\t\n\t\t\t// Trim off common suffix (speedup).\n\t\t\tcommonlength = this.diffCommonSuffix( text1, text2 );\n\t\t\tcommonsuffix = text1.substring( text1.length - commonlength );\n\t\t\ttext1 = text1.substring( 0, text1.length - commonlength );\n\t\t\ttext2 = text2.substring( 0, text2.length - commonlength );\n\t\n\t\t\t// Compute the diff on the middle block.\n\t\t\tdiffs = this.diffCompute( text1, text2, checklines, deadline );\n\t\n\t\t\t// Restore the prefix and suffix.\n\t\t\tif ( commonprefix ) {\n\t\t\t\tdiffs.unshift( [ DIFF_EQUAL, commonprefix ] );\n\t\t\t}\n\t\t\tif ( commonsuffix ) {\n\t\t\t\tdiffs.push( [ DIFF_EQUAL, commonsuffix ] );\n\t\t\t}\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\treturn diffs;\n\t\t};\n\t\n\t\t/**\n\t\t * Reduce the number of edits by eliminating operationally trivial equalities.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupEfficiency = function( diffs ) {\n\t\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\t\tpointer, preIns, preDel, postIns, postDel;\n\t\t\tchanges = false;\n\t\t\tequalities = []; // Stack of indices where equalities are found.\n\t\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t\t/** @type {?string} */\n\t\t\tlastequality = null;\n\t\n\t\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\t\tpointer = 0; // Index of current position.\n\t\n\t\t\t// Is there an insertion operation before the last equality.\n\t\t\tpreIns = false;\n\t\n\t\t\t// Is there a deletion operation before the last equality.\n\t\t\tpreDel = false;\n\t\n\t\t\t// Is there an insertion operation after the last equality.\n\t\t\tpostIns = false;\n\t\n\t\t\t// Is there a deletion operation after the last equality.\n\t\t\tpostDel = false;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\n\t\t\t\t// Equality found.\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) {\n\t\t\t\t\tif ( diffs[ pointer ][ 1 ].length < 4 && ( postIns || postDel ) ) {\n\t\n\t\t\t\t\t\t// Candidate found.\n\t\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\t\tpreIns = postIns;\n\t\t\t\t\t\tpreDel = postDel;\n\t\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// Not a candidate, and can never become one.\n\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t}\n\t\t\t\t\tpostIns = postDel = false;\n\t\n\t\t\t\t// An insertion or deletion.\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_DELETE ) {\n\t\t\t\t\t\tpostDel = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpostIns = true;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/*\n\t\t\t\t\t * Five types to be split:\n\t\t\t\t\t * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins>X<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins><del>B</del>X<ins>C</ins>\n\t\t\t\t\t * <ins>A</del>X<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins><del>B</del>X<del>C</del>\n\t\t\t\t\t */\n\t\t\t\t\tif ( lastequality && ( ( preIns && preDel && postIns && postDel ) ||\n\t\t\t\t\t\t\t( ( lastequality.length < 2 ) &&\n\t\t\t\t\t\t\t( preIns + preDel + postIns + postDel ) === 3 ) ) ) {\n\t\n\t\t\t\t\t\t// Duplicate record.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\tequalitiesLength--; // Throw away the equality we just deleted;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t\tif ( preIns && preDel ) {\n\t\n\t\t\t\t\t\t\t// No changes made which could affect previous entry, keep going.\n\t\t\t\t\t\t\tpostIns = postDel = true;\n\t\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tequalitiesLength--; // Throw away the previous equality.\n\t\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\t\t\t\t\t\tpostIns = postDel = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Convert a diff array into a pretty HTML report.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t * @param {integer} string to be beautified.\n\t\t * @return {string} HTML representation.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffPrettyHtml = function( diffs ) {\n\t\t\tvar op, data, x,\n\t\t\t\thtml = [];\n\t\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\t\top = diffs[ x ][ 0 ]; // Operation (insert, delete, equal)\n\t\t\t\tdata = diffs[ x ][ 1 ]; // Text of change.\n\t\t\t\tswitch ( op ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\thtml[ x ] = \"<ins>\" + escapeText( data ) + \"</ins>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\thtml[ x ] = \"<del>\" + escapeText( data ) + \"</del>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\t\t\t\thtml[ x ] = \"<span>\" + escapeText( data ) + \"</span>\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn html.join( \"\" );\n\t\t};\n\t\n\t\t/**\n\t\t * Determine the common prefix of two strings.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the start of each\n\t\t *     string.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonPrefix = function( text1, text2 ) {\n\t\t\tvar pointermid, pointermax, pointermin, pointerstart;\n\t\n\t\t\t// Quick check for common null cases.\n\t\t\tif ( !text1 || !text2 || text1.charAt( 0 ) !== text2.charAt( 0 ) ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Binary search.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\t\tpointermin = 0;\n\t\t\tpointermax = Math.min( text1.length, text2.length );\n\t\t\tpointermid = pointermax;\n\t\t\tpointerstart = 0;\n\t\t\twhile ( pointermin < pointermid ) {\n\t\t\t\tif ( text1.substring( pointerstart, pointermid ) ===\n\t\t\t\t\t\ttext2.substring( pointerstart, pointermid ) ) {\n\t\t\t\t\tpointermin = pointermid;\n\t\t\t\t\tpointerstart = pointermin;\n\t\t\t\t} else {\n\t\t\t\t\tpointermax = pointermid;\n\t\t\t\t}\n\t\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t\t}\n\t\t\treturn pointermid;\n\t\t};\n\t\n\t\t/**\n\t\t * Determine the common suffix of two strings.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the end of each string.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonSuffix = function( text1, text2 ) {\n\t\t\tvar pointermid, pointermax, pointermin, pointerend;\n\t\n\t\t\t// Quick check for common null cases.\n\t\t\tif ( !text1 ||\n\t\t\t\t\t!text2 ||\n\t\t\t\t\ttext1.charAt( text1.length - 1 ) !== text2.charAt( text2.length - 1 ) ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Binary search.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\t\tpointermin = 0;\n\t\t\tpointermax = Math.min( text1.length, text2.length );\n\t\t\tpointermid = pointermax;\n\t\t\tpointerend = 0;\n\t\t\twhile ( pointermin < pointermid ) {\n\t\t\t\tif ( text1.substring( text1.length - pointermid, text1.length - pointerend ) ===\n\t\t\t\t\t\ttext2.substring( text2.length - pointermid, text2.length - pointerend ) ) {\n\t\t\t\t\tpointermin = pointermid;\n\t\t\t\t\tpointerend = pointermin;\n\t\t\t\t} else {\n\t\t\t\t\tpointermax = pointermid;\n\t\t\t\t}\n\t\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t\t}\n\t\t\treturn pointermid;\n\t\t};\n\t\n\t\t/**\n\t\t * Find the differences between two texts.  Assumes that the texts do not\n\t\t * have any common prefix or suffix.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {boolean} checklines Speedup flag.  If false, then don't run a\n\t\t *     line-level diff first to identify the changed areas.\n\t\t *     If true, then run a faster, slightly less optimal diff.\n\t\t * @param {number} deadline Time when the diff should be complete by.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCompute = function( text1, text2, checklines, deadline ) {\n\t\t\tvar diffs, longtext, shorttext, i, hm,\n\t\t\t\ttext1A, text2A, text1B, text2B,\n\t\t\t\tmidCommon, diffsA, diffsB;\n\t\n\t\t\tif ( !text1 ) {\n\t\n\t\t\t\t// Just add some text (speedup).\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\tif ( !text2 ) {\n\t\n\t\t\t\t// Just delete some text (speedup).\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_DELETE, text1 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\t\ti = longtext.indexOf( shorttext );\n\t\t\tif ( i !== -1 ) {\n\t\n\t\t\t\t// Shorter text is inside the longer text (speedup).\n\t\t\t\tdiffs = [\n\t\t\t\t\t[ DIFF_INSERT, longtext.substring( 0, i ) ],\n\t\t\t\t\t[ DIFF_EQUAL, shorttext ],\n\t\t\t\t\t[ DIFF_INSERT, longtext.substring( i + shorttext.length ) ]\n\t\t\t\t];\n\t\n\t\t\t\t// Swap insertions for deletions if diff is reversed.\n\t\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\t\tdiffs[ 0 ][ 0 ] = diffs[ 2 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t}\n\t\t\t\treturn diffs;\n\t\t\t}\n\t\n\t\t\tif ( shorttext.length === 1 ) {\n\t\n\t\t\t\t// Single character string.\n\t\t\t\t// After the previous speedup, the character can't be an equality.\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\t// Check to see if the problem can be split in two.\n\t\t\thm = this.diffHalfMatch( text1, text2 );\n\t\t\tif ( hm ) {\n\t\n\t\t\t\t// A half-match was found, sort out the return data.\n\t\t\t\ttext1A = hm[ 0 ];\n\t\t\t\ttext1B = hm[ 1 ];\n\t\t\t\ttext2A = hm[ 2 ];\n\t\t\t\ttext2B = hm[ 3 ];\n\t\t\t\tmidCommon = hm[ 4 ];\n\t\n\t\t\t\t// Send both pairs off for separate processing.\n\t\t\t\tdiffsA = this.DiffMain( text1A, text2A, checklines, deadline );\n\t\t\t\tdiffsB = this.DiffMain( text1B, text2B, checklines, deadline );\n\t\n\t\t\t\t// Merge the results.\n\t\t\t\treturn diffsA.concat( [\n\t\t\t\t\t[ DIFF_EQUAL, midCommon ]\n\t\t\t\t], diffsB );\n\t\t\t}\n\t\n\t\t\tif ( checklines && text1.length > 100 && text2.length > 100 ) {\n\t\t\t\treturn this.diffLineMode( text1, text2, deadline );\n\t\t\t}\n\t\n\t\t\treturn this.diffBisect( text1, text2, deadline );\n\t\t};\n\t\n\t\t/**\n\t\t * Do the two texts share a substring which is at least half the length of the\n\t\t * longer text?\n\t\t * This speedup can produce non-minimal diffs.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t\t *     text2 and the common middle.  Or null if there was no match.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffHalfMatch = function( text1, text2 ) {\n\t\t\tvar longtext, shorttext, dmp,\n\t\t\t\ttext1A, text2B, text2A, text1B, midCommon,\n\t\t\t\thm1, hm2, hm;\n\t\n\t\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\t\tif ( longtext.length < 4 || shorttext.length * 2 < longtext.length ) {\n\t\t\t\treturn null; // Pointless.\n\t\t\t}\n\t\t\tdmp = this; // 'this' becomes 'window' in a closure.\n\t\n\t\t\t/**\n\t\t\t * Does a substring of shorttext exist within longtext such that the substring\n\t\t\t * is at least half the length of longtext?\n\t\t\t * Closure, but does not reference any external variables.\n\t\t\t * @param {string} longtext Longer string.\n\t\t\t * @param {string} shorttext Shorter string.\n\t\t\t * @param {number} i Start index of quarter length substring within longtext.\n\t\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t\t *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t\t\t *     of shorttext and the common middle.  Or null if there was no match.\n\t\t\t * @private\n\t\t\t */\n\t\t\tfunction diffHalfMatchI( longtext, shorttext, i ) {\n\t\t\t\tvar seed, j, bestCommon, prefixLength, suffixLength,\n\t\t\t\t\tbestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;\n\t\n\t\t\t\t// Start with a 1/4 length substring at position i as a seed.\n\t\t\t\tseed = longtext.substring( i, i + Math.floor( longtext.length / 4 ) );\n\t\t\t\tj = -1;\n\t\t\t\tbestCommon = \"\";\n\t\t\t\twhile ( ( j = shorttext.indexOf( seed, j + 1 ) ) !== -1 ) {\n\t\t\t\t\tprefixLength = dmp.diffCommonPrefix( longtext.substring( i ),\n\t\t\t\t\t\tshorttext.substring( j ) );\n\t\t\t\t\tsuffixLength = dmp.diffCommonSuffix( longtext.substring( 0, i ),\n\t\t\t\t\t\tshorttext.substring( 0, j ) );\n\t\t\t\t\tif ( bestCommon.length < suffixLength + prefixLength ) {\n\t\t\t\t\t\tbestCommon = shorttext.substring( j - suffixLength, j ) +\n\t\t\t\t\t\t\tshorttext.substring( j, j + prefixLength );\n\t\t\t\t\t\tbestLongtextA = longtext.substring( 0, i - suffixLength );\n\t\t\t\t\t\tbestLongtextB = longtext.substring( i + prefixLength );\n\t\t\t\t\t\tbestShorttextA = shorttext.substring( 0, j - suffixLength );\n\t\t\t\t\t\tbestShorttextB = shorttext.substring( j + prefixLength );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( bestCommon.length * 2 >= longtext.length ) {\n\t\t\t\t\treturn [ bestLongtextA, bestLongtextB,\n\t\t\t\t\t\tbestShorttextA, bestShorttextB, bestCommon\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// First check if the second quarter is the seed for a half-match.\n\t\t\thm1 = diffHalfMatchI( longtext, shorttext,\n\t\t\t\tMath.ceil( longtext.length / 4 ) );\n\t\n\t\t\t// Check again based on the third quarter.\n\t\t\thm2 = diffHalfMatchI( longtext, shorttext,\n\t\t\t\tMath.ceil( longtext.length / 2 ) );\n\t\t\tif ( !hm1 && !hm2 ) {\n\t\t\t\treturn null;\n\t\t\t} else if ( !hm2 ) {\n\t\t\t\thm = hm1;\n\t\t\t} else if ( !hm1 ) {\n\t\t\t\thm = hm2;\n\t\t\t} else {\n\t\n\t\t\t\t// Both matched.  Select the longest.\n\t\t\t\thm = hm1[ 4 ].length > hm2[ 4 ].length ? hm1 : hm2;\n\t\t\t}\n\t\n\t\t\t// A half-match was found, sort out the return data.\n\t\t\ttext1A, text1B, text2A, text2B;\n\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\ttext1A = hm[ 0 ];\n\t\t\t\ttext1B = hm[ 1 ];\n\t\t\t\ttext2A = hm[ 2 ];\n\t\t\t\ttext2B = hm[ 3 ];\n\t\t\t} else {\n\t\t\t\ttext2A = hm[ 0 ];\n\t\t\t\ttext2B = hm[ 1 ];\n\t\t\t\ttext1A = hm[ 2 ];\n\t\t\t\ttext1B = hm[ 3 ];\n\t\t\t}\n\t\t\tmidCommon = hm[ 4 ];\n\t\t\treturn [ text1A, text1B, text2A, text2B, midCommon ];\n\t\t};\n\t\n\t\t/**\n\t\t * Do a quick line-level diff on both strings, then rediff the parts for\n\t\t * greater accuracy.\n\t\t * This speedup can produce non-minimal diffs.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} deadline Time when the diff should be complete by.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffLineMode = function( text1, text2, deadline ) {\n\t\t\tvar a, diffs, linearray, pointer, countInsert,\n\t\t\t\tcountDelete, textInsert, textDelete, j;\n\t\n\t\t\t// Scan the text on a line-by-line basis first.\n\t\t\ta = this.diffLinesToChars( text1, text2 );\n\t\t\ttext1 = a.chars1;\n\t\t\ttext2 = a.chars2;\n\t\t\tlinearray = a.lineArray;\n\t\n\t\t\tdiffs = this.DiffMain( text1, text2, false, deadline );\n\t\n\t\t\t// Convert the diff back to original text.\n\t\t\tthis.diffCharsToLines( diffs, linearray );\n\t\n\t\t\t// Eliminate freak matches (e.g. blank lines)\n\t\t\tthis.diffCleanupSemantic( diffs );\n\t\n\t\t\t// Rediff any replacement blocks, this time character-by-character.\n\t\t\t// Add a dummy entry at the end.\n\t\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] );\n\t\t\tpointer = 0;\n\t\t\tcountDelete = 0;\n\t\t\tcountInsert = 0;\n\t\t\ttextDelete = \"\";\n\t\t\ttextInsert = \"\";\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\tcountInsert++;\n\t\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\tcountDelete++;\n\t\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\n\t\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\t\tif ( countDelete >= 1 && countInsert >= 1 ) {\n\t\n\t\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\t\tdiffs.splice( pointer - countDelete - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert );\n\t\t\t\t\t\tpointer = pointer - countDelete - countInsert;\n\t\t\t\t\t\ta = this.DiffMain( textDelete, textInsert, false, deadline );\n\t\t\t\t\t\tfor ( j = a.length - 1; j >= 0; j-- ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer, 0, a[ j ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpointer = pointer + a.length;\n\t\t\t\t\t}\n\t\t\t\t\tcountInsert = 0;\n\t\t\t\t\tcountDelete = 0;\n\t\t\t\t\ttextDelete = \"\";\n\t\t\t\t\ttextInsert = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\n\t\t\treturn diffs;\n\t\t};\n\t\n\t\t/**\n\t\t * Find the 'middle snake' of a diff, split the problem in two\n\t\t * and return the recursively constructed diff.\n\t\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} deadline Time at which to bail if not yet complete.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffBisect = function( text1, text2, deadline ) {\n\t\t\tvar text1Length, text2Length, maxD, vOffset, vLength,\n\t\t\t\tv1, v2, x, delta, front, k1start, k1end, k2start,\n\t\t\t\tk2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;\n\t\n\t\t\t// Cache the text lengths to prevent multiple calls.\n\t\t\ttext1Length = text1.length;\n\t\t\ttext2Length = text2.length;\n\t\t\tmaxD = Math.ceil( ( text1Length + text2Length ) / 2 );\n\t\t\tvOffset = maxD;\n\t\t\tvLength = 2 * maxD;\n\t\t\tv1 = new Array( vLength );\n\t\t\tv2 = new Array( vLength );\n\t\n\t\t\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t\t\t// integers and undefined.\n\t\t\tfor ( x = 0; x < vLength; x++ ) {\n\t\t\t\tv1[ x ] = -1;\n\t\t\t\tv2[ x ] = -1;\n\t\t\t}\n\t\t\tv1[ vOffset + 1 ] = 0;\n\t\t\tv2[ vOffset + 1 ] = 0;\n\t\t\tdelta = text1Length - text2Length;\n\t\n\t\t\t// If the total number of characters is odd, then the front path will collide\n\t\t\t// with the reverse path.\n\t\t\tfront = ( delta % 2 !== 0 );\n\t\n\t\t\t// Offsets for start and end of k loop.\n\t\t\t// Prevents mapping of space beyond the grid.\n\t\t\tk1start = 0;\n\t\t\tk1end = 0;\n\t\t\tk2start = 0;\n\t\t\tk2end = 0;\n\t\t\tfor ( d = 0; d < maxD; d++ ) {\n\t\n\t\t\t\t// Bail out if deadline is reached.\n\t\t\t\tif ( ( new Date() ).getTime() > deadline ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\n\t\t\t\t// Walk the front path one step.\n\t\t\t\tfor ( k1 = -d + k1start; k1 <= d - k1end; k1 += 2 ) {\n\t\t\t\t\tk1Offset = vOffset + k1;\n\t\t\t\t\tif ( k1 === -d || ( k1 !== d && v1[ k1Offset - 1 ] < v1[ k1Offset + 1 ] ) ) {\n\t\t\t\t\t\tx1 = v1[ k1Offset + 1 ];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx1 = v1[ k1Offset - 1 ] + 1;\n\t\t\t\t\t}\n\t\t\t\t\ty1 = x1 - k1;\n\t\t\t\t\twhile ( x1 < text1Length && y1 < text2Length &&\n\t\t\t\t\t\ttext1.charAt( x1 ) === text2.charAt( y1 ) ) {\n\t\t\t\t\t\tx1++;\n\t\t\t\t\t\ty1++;\n\t\t\t\t\t}\n\t\t\t\t\tv1[ k1Offset ] = x1;\n\t\t\t\t\tif ( x1 > text1Length ) {\n\t\n\t\t\t\t\t\t// Ran off the right of the graph.\n\t\t\t\t\t\tk1end += 2;\n\t\t\t\t\t} else if ( y1 > text2Length ) {\n\t\n\t\t\t\t\t\t// Ran off the bottom of the graph.\n\t\t\t\t\t\tk1start += 2;\n\t\t\t\t\t} else if ( front ) {\n\t\t\t\t\t\tk2Offset = vOffset + delta - k1;\n\t\t\t\t\t\tif ( k2Offset >= 0 && k2Offset < vLength && v2[ k2Offset ] !== -1 ) {\n\t\n\t\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\t\tx2 = text1Length - v2[ k2Offset ];\n\t\t\t\t\t\t\tif ( x1 >= x2 ) {\n\t\n\t\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Walk the reverse path one step.\n\t\t\t\tfor ( k2 = -d + k2start; k2 <= d - k2end; k2 += 2 ) {\n\t\t\t\t\tk2Offset = vOffset + k2;\n\t\t\t\t\tif ( k2 === -d || ( k2 !== d && v2[ k2Offset - 1 ] < v2[ k2Offset + 1 ] ) ) {\n\t\t\t\t\t\tx2 = v2[ k2Offset + 1 ];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx2 = v2[ k2Offset - 1 ] + 1;\n\t\t\t\t\t}\n\t\t\t\t\ty2 = x2 - k2;\n\t\t\t\t\twhile ( x2 < text1Length && y2 < text2Length &&\n\t\t\t\t\t\ttext1.charAt( text1Length - x2 - 1 ) ===\n\t\t\t\t\t\ttext2.charAt( text2Length - y2 - 1 ) ) {\n\t\t\t\t\t\tx2++;\n\t\t\t\t\t\ty2++;\n\t\t\t\t\t}\n\t\t\t\t\tv2[ k2Offset ] = x2;\n\t\t\t\t\tif ( x2 > text1Length ) {\n\t\n\t\t\t\t\t\t// Ran off the left of the graph.\n\t\t\t\t\t\tk2end += 2;\n\t\t\t\t\t} else if ( y2 > text2Length ) {\n\t\n\t\t\t\t\t\t// Ran off the top of the graph.\n\t\t\t\t\t\tk2start += 2;\n\t\t\t\t\t} else if ( !front ) {\n\t\t\t\t\t\tk1Offset = vOffset + delta - k2;\n\t\t\t\t\t\tif ( k1Offset >= 0 && k1Offset < vLength && v1[ k1Offset ] !== -1 ) {\n\t\t\t\t\t\t\tx1 = v1[ k1Offset ];\n\t\t\t\t\t\t\ty1 = vOffset + x1 - k1Offset;\n\t\n\t\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\t\tx2 = text1Length - x2;\n\t\t\t\t\t\t\tif ( x1 >= x2 ) {\n\t\n\t\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Diff took too long and hit the deadline or\n\t\t\t// number of diffs equals number of characters, no commonality at all.\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t};\n\t\n\t\t/**\n\t\t * Given the location of the 'middle snake', split the diff in two parts\n\t\t * and recurse.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} x Index of split point in text1.\n\t\t * @param {number} y Index of split point in text2.\n\t\t * @param {number} deadline Time at which to bail if not yet complete.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffBisectSplit = function( text1, text2, x, y, deadline ) {\n\t\t\tvar text1a, text1b, text2a, text2b, diffs, diffsb;\n\t\t\ttext1a = text1.substring( 0, x );\n\t\t\ttext2a = text2.substring( 0, y );\n\t\t\ttext1b = text1.substring( x );\n\t\t\ttext2b = text2.substring( y );\n\t\n\t\t\t// Compute both diffs serially.\n\t\t\tdiffs = this.DiffMain( text1a, text2a, false, deadline );\n\t\t\tdiffsb = this.DiffMain( text1b, text2b, false, deadline );\n\t\n\t\t\treturn diffs.concat( diffsb );\n\t\t};\n\t\n\t\t/**\n\t\t * Reduce the number of edits by eliminating semantically trivial equalities.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupSemantic = function( diffs ) {\n\t\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\t\tpointer, lengthInsertions2, lengthDeletions2, lengthInsertions1,\n\t\t\t\tlengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\n\t\t\tchanges = false;\n\t\t\tequalities = []; // Stack of indices where equalities are found.\n\t\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t\t/** @type {?string} */\n\t\t\tlastequality = null;\n\t\n\t\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\t\tpointer = 0; // Index of current position.\n\t\n\t\t\t// Number of characters that changed prior to the equality.\n\t\t\tlengthInsertions1 = 0;\n\t\t\tlengthDeletions1 = 0;\n\t\n\t\t\t// Number of characters that changed after the equality.\n\t\t\tlengthInsertions2 = 0;\n\t\t\tlengthDeletions2 = 0;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) { // Equality found.\n\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\tlengthInsertions1 = lengthInsertions2;\n\t\t\t\t\tlengthDeletions1 = lengthDeletions2;\n\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t} else { // An insertion or deletion.\n\t\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\t\tlengthInsertions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlengthDeletions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Eliminate an equality that is smaller or equal to the edits on both\n\t\t\t\t\t// sides of it.\n\t\t\t\t\tif ( lastequality && ( lastequality.length <=\n\t\t\t\t\t\t\tMath.max( lengthInsertions1, lengthDeletions1 ) ) &&\n\t\t\t\t\t\t\t( lastequality.length <= Math.max( lengthInsertions2,\n\t\t\t\t\t\t\t\tlengthDeletions2 ) ) ) {\n\t\n\t\t\t\t\t\t// Duplicate record.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\n\t\t\t\t\t\t// Throw away the equality we just deleted.\n\t\t\t\t\t\tequalitiesLength--;\n\t\n\t\t\t\t\t\t// Throw away the previous equality (it needs to be reevaluated).\n\t\t\t\t\t\tequalitiesLength--;\n\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\n\t\t\t\t\t\t// Reset the counters.\n\t\t\t\t\t\tlengthInsertions1 = 0;\n\t\t\t\t\t\tlengthDeletions1 = 0;\n\t\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\t// Normalize the diff.\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\n\t\t\t// Find any overlaps between deletions and insertions.\n\t\t\t// e.g: <del>abcxxx</del><ins>xxxdef</ins>\n\t\t\t//   -> <del>abc</del>xxx<ins>def</ins>\n\t\t\t// e.g: <del>xxxabc</del><ins>defxxx</ins>\n\t\t\t//   -> <ins>def</ins>xxx<del>abc</del>\n\t\t\t// Only extract an overlap if it is as big as the edit ahead or behind it.\n\t\t\tpointer = 1;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_DELETE &&\n\t\t\t\t\t\tdiffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\tdeletion = diffs[ pointer - 1 ][ 1 ];\n\t\t\t\t\tinsertion = diffs[ pointer ][ 1 ];\n\t\t\t\t\toverlapLength1 = this.diffCommonOverlap( deletion, insertion );\n\t\t\t\t\toverlapLength2 = this.diffCommonOverlap( insertion, deletion );\n\t\t\t\t\tif ( overlapLength1 >= overlapLength2 ) {\n\t\t\t\t\t\tif ( overlapLength1 >= deletion.length / 2 ||\n\t\t\t\t\t\t\t\toverlapLength1 >= insertion.length / 2 ) {\n\t\n\t\t\t\t\t\t\t// Overlap found.  Insert an equality and trim the surrounding edits.\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t[ DIFF_EQUAL, insertion.substring( 0, overlapLength1 ) ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tdeletion.substring( 0, deletion.length - overlapLength1 );\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] = insertion.substring( overlapLength1 );\n\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( overlapLength2 >= deletion.length / 2 ||\n\t\t\t\t\t\t\t\toverlapLength2 >= insertion.length / 2 ) {\n\t\n\t\t\t\t\t\t\t// Reverse overlap found.\n\t\t\t\t\t\t\t// Insert an equality and swap and trim the surrounding edits.\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t[ DIFF_EQUAL, deletion.substring( 0, overlapLength2 ) ]\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tinsertion.substring( 0, insertion.length - overlapLength2 );\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tdeletion.substring( overlapLength2 );\n\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpointer++;\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Determine if the suffix of one string is the prefix of another.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the end of the first\n\t\t *     string and the start of the second string.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonOverlap = function( text1, text2 ) {\n\t\t\tvar text1Length, text2Length, textLength,\n\t\t\t\tbest, length, pattern, found;\n\t\n\t\t\t// Cache the text lengths to prevent multiple calls.\n\t\t\ttext1Length = text1.length;\n\t\t\ttext2Length = text2.length;\n\t\n\t\t\t// Eliminate the null case.\n\t\t\tif ( text1Length === 0 || text2Length === 0 ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Truncate the longer string.\n\t\t\tif ( text1Length > text2Length ) {\n\t\t\t\ttext1 = text1.substring( text1Length - text2Length );\n\t\t\t} else if ( text1Length < text2Length ) {\n\t\t\t\ttext2 = text2.substring( 0, text1Length );\n\t\t\t}\n\t\t\ttextLength = Math.min( text1Length, text2Length );\n\t\n\t\t\t// Quick check for the worst case.\n\t\t\tif ( text1 === text2 ) {\n\t\t\t\treturn textLength;\n\t\t\t}\n\t\n\t\t\t// Start by looking for a single character match\n\t\t\t// and increase length until no match is found.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\t\t\tbest = 0;\n\t\t\tlength = 1;\n\t\t\twhile ( true ) {\n\t\t\t\tpattern = text1.substring( textLength - length );\n\t\t\t\tfound = text2.indexOf( pattern );\n\t\t\t\tif ( found === -1 ) {\n\t\t\t\t\treturn best;\n\t\t\t\t}\n\t\t\t\tlength += found;\n\t\t\t\tif ( found === 0 || text1.substring( textLength - length ) ===\n\t\t\t\t\t\ttext2.substring( 0, length ) ) {\n\t\t\t\t\tbest = length;\n\t\t\t\t\tlength++;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Split two texts into an array of strings.  Reduce the texts to a string of\n\t\t * hashes where each Unicode character represents one line.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n\t\t *     An object containing the encoded text1, the encoded text2 and\n\t\t *     the array of unique strings.\n\t\t *     The zeroth element of the array of unique strings is intentionally blank.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffLinesToChars = function( text1, text2 ) {\n\t\t\tvar lineArray, lineHash, chars1, chars2;\n\t\t\tlineArray = []; // E.g. lineArray[4] === 'Hello\\n'\n\t\t\tlineHash = {};  // E.g. lineHash['Hello\\n'] === 4\n\t\n\t\t\t// '\\x00' is a valid character, but various debuggers don't like it.\n\t\t\t// So we'll insert a junk entry to avoid generating a null character.\n\t\t\tlineArray[ 0 ] = \"\";\n\t\n\t\t\t/**\n\t\t\t * Split a text into an array of strings.  Reduce the texts to a string of\n\t\t\t * hashes where each Unicode character represents one line.\n\t\t\t * Modifies linearray and linehash through being a closure.\n\t\t\t * @param {string} text String to encode.\n\t\t\t * @return {string} Encoded string.\n\t\t\t * @private\n\t\t\t */\n\t\t\tfunction diffLinesToCharsMunge( text ) {\n\t\t\t\tvar chars, lineStart, lineEnd, lineArrayLength, line;\n\t\t\t\tchars = \"\";\n\t\n\t\t\t\t// Walk the text, pulling out a substring for each line.\n\t\t\t\t// text.split('\\n') would would temporarily double our memory footprint.\n\t\t\t\t// Modifying text would create many large strings to garbage collect.\n\t\t\t\tlineStart = 0;\n\t\t\t\tlineEnd = -1;\n\t\n\t\t\t\t// Keeping our own length variable is faster than looking it up.\n\t\t\t\tlineArrayLength = lineArray.length;\n\t\t\t\twhile ( lineEnd < text.length - 1 ) {\n\t\t\t\t\tlineEnd = text.indexOf( \"\\n\", lineStart );\n\t\t\t\t\tif ( lineEnd === -1 ) {\n\t\t\t\t\t\tlineEnd = text.length - 1;\n\t\t\t\t\t}\n\t\t\t\t\tline = text.substring( lineStart, lineEnd + 1 );\n\t\t\t\t\tlineStart = lineEnd + 1;\n\t\n\t\t\t\t\tif ( lineHash.hasOwnProperty ? lineHash.hasOwnProperty( line ) :\n\t\t\t\t\t\t\t\t( lineHash[ line ] !== undefined ) ) {\n\t\t\t\t\t\tchars += String.fromCharCode( lineHash[ line ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchars += String.fromCharCode( lineArrayLength );\n\t\t\t\t\t\tlineHash[ line ] = lineArrayLength;\n\t\t\t\t\t\tlineArray[ lineArrayLength++ ] = line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn chars;\n\t\t\t}\n\t\n\t\t\tchars1 = diffLinesToCharsMunge( text1 );\n\t\t\tchars2 = diffLinesToCharsMunge( text2 );\n\t\t\treturn {\n\t\t\t\tchars1: chars1,\n\t\t\t\tchars2: chars2,\n\t\t\t\tlineArray: lineArray\n\t\t\t};\n\t\t};\n\t\n\t\t/**\n\t\t * Rehydrate the text in a diff from a string of line hashes to real lines of\n\t\t * text.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t * @param {!Array.<string>} lineArray Array of unique strings.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCharsToLines = function( diffs, lineArray ) {\n\t\t\tvar x, chars, text, y;\n\t\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\t\tchars = diffs[ x ][ 1 ];\n\t\t\t\ttext = [];\n\t\t\t\tfor ( y = 0; y < chars.length; y++ ) {\n\t\t\t\t\ttext[ y ] = lineArray[ chars.charCodeAt( y ) ];\n\t\t\t\t}\n\t\t\t\tdiffs[ x ][ 1 ] = text.join( \"\" );\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Reorder and merge like edit sections.  Merge equalities.\n\t\t * Any edit section can move as long as it doesn't cross an equality.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupMerge = function( diffs ) {\n\t\t\tvar pointer, countDelete, countInsert, textInsert, textDelete,\n\t\t\t\tcommonlength, changes, diffPointer, position;\n\t\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] ); // Add a dummy entry at the end.\n\t\t\tpointer = 0;\n\t\t\tcountDelete = 0;\n\t\t\tcountInsert = 0;\n\t\t\ttextDelete = \"\";\n\t\t\ttextInsert = \"\";\n\t\t\tcommonlength;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\tcountInsert++;\n\t\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\t\tpointer++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\tcountDelete++;\n\t\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\t\tpointer++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\n\t\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\t\tif ( countDelete + countInsert > 1 ) {\n\t\t\t\t\t\tif ( countDelete !== 0 && countInsert !== 0 ) {\n\t\n\t\t\t\t\t\t\t// Factor out any common prefixes.\n\t\t\t\t\t\t\tcommonlength = this.diffCommonPrefix( textInsert, textDelete );\n\t\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\t\tif ( ( pointer - countDelete - countInsert ) > 0 &&\n\t\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 0 ] ===\n\t\t\t\t\t\t\t\t\t\tDIFF_EQUAL ) {\n\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 1 ] +=\n\t\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdiffs.splice( 0, 0, [ DIFF_EQUAL,\n\t\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength )\n\t\t\t\t\t\t\t\t\t] );\n\t\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttextInsert = textInsert.substring( commonlength );\n\t\t\t\t\t\t\t\ttextDelete = textDelete.substring( commonlength );\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Factor out any common suffixies.\n\t\t\t\t\t\t\tcommonlength = this.diffCommonSuffix( textInsert, textDelete );\n\t\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = textInsert.substring( textInsert.length -\n\t\t\t\t\t\t\t\t\t\tcommonlength ) + diffs[ pointer ][ 1 ];\n\t\t\t\t\t\t\t\ttextInsert = textInsert.substring( 0, textInsert.length -\n\t\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\t\ttextDelete = textDelete.substring( 0, textDelete.length -\n\t\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\t\tif ( countDelete === 0 ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer - countInsert,\n\t\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_INSERT, textInsert ] );\n\t\t\t\t\t\t} else if ( countInsert === 0 ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer - countDelete,\n\t\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_DELETE, textDelete ] );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer - countDelete - countInsert,\n\t\t\t\t\t\t\t\tcountDelete + countInsert,\n\t\t\t\t\t\t\t\t[ DIFF_DELETE, textDelete ], [ DIFF_INSERT, textInsert ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpointer = pointer - countDelete - countInsert +\n\t\t\t\t\t\t\t( countDelete ? 1 : 0 ) + ( countInsert ? 1 : 0 ) + 1;\n\t\t\t\t\t} else if ( pointer !== 0 && diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL ) {\n\t\n\t\t\t\t\t\t// Merge this equality with the previous one.\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer, 1 );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t\tcountInsert = 0;\n\t\t\t\t\tcountDelete = 0;\n\t\t\t\t\ttextDelete = \"\";\n\t\t\t\t\ttextInsert = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( diffs[ diffs.length - 1 ][ 1 ] === \"\" ) {\n\t\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\t\t}\n\t\n\t\t\t// Second pass: look for single edits surrounded on both sides by equalities\n\t\t\t// which can be shifted sideways to eliminate an equality.\n\t\t\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t\t\tchanges = false;\n\t\t\tpointer = 1;\n\t\n\t\t\t// Intentionally ignore the first and last element (don't need checking).\n\t\t\twhile ( pointer < diffs.length - 1 ) {\n\t\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL &&\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] === DIFF_EQUAL ) {\n\t\n\t\t\t\t\tdiffPointer = diffs[ pointer ][ 1 ];\n\t\t\t\t\tposition = diffPointer.substring(\n\t\t\t\t\t\tdiffPointer.length - diffs[ pointer - 1 ][ 1 ].length\n\t\t\t\t\t);\n\t\n\t\t\t\t\t// This is a single edit surrounded by equalities.\n\t\t\t\t\tif ( position === diffs[ pointer - 1 ][ 1 ] ) {\n\t\n\t\t\t\t\t\t// Shift the edit over the previous equality.\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = diffs[ pointer - 1 ][ 1 ] +\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( 0, diffs[ pointer ][ 1 ].length -\n\t\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ].length );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] + diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer - 1, 1 );\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t} else if ( diffPointer.substring( 0, diffs[ pointer + 1 ][ 1 ].length ) ===\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] ) {\n\t\n\t\t\t\t\t\t// Shift the edit over the next equality.\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ] =\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( diffs[ pointer + 1 ][ 1 ].length ) +\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer + 1, 1 );\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\t// If shifts were made, the diff needs reordering and another shift sweep.\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\t};\n\t\n\t\treturn function( o, n ) {\n\t\t\tvar diff, output, text;\n\t\t\tdiff = new DiffMatchPatch();\n\t\t\toutput = diff.DiffMain( o, n );\n\t\t\tdiff.diffCleanupEfficiency( output );\n\t\t\ttext = diff.diffPrettyHtml( output );\n\t\n\t\t\treturn text;\n\t\t};\n\t}() );\n\t\n\t}() );\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(45), __webpack_require__(14)(module)))\n\n/***/ },\n\n/***/ 45:\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\t\n\tprocess.listeners = function (name) { return [] }\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n\n/***/ 46:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n\t *\n\t * https://github.com/twada/qunit-tap\n\t * version: 1.5.1\n\t *\n\t * Copyright (c) 2010-2016 Takuto Wada\n\t * Dual licensed under the MIT and GPLv2 licenses.\n\t *   https://raw.github.com/twada/qunit-tap/master/MIT-LICENSE.txt\n\t *   https://raw.github.com/twada/qunit-tap/master/GPL-LICENSE.txt\n\t *\n\t * A part of extend function is:\n\t *   Copyright 2012 jQuery Foundation and other contributors\n\t *   Released under the MIT license.\n\t *   http://jquery.org/license\n\t */\n\t(function (root, factory) {\n\t    'use strict';\n\t\n\t    // using returnExports UMD pattern\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === 'object') {\n\t        module.exports = factory();\n\t    } else {\n\t        root.qunitTap = factory();\n\t    }\n\t}(this, function () {\n\t    'use strict';\n\t\n\t    var qunitTapVersion = '1.5.1',\n\t        slice = Array.prototype.slice;\n\t\n\t    // borrowed from qunit.js\n\t    function extend (a, b) {\n\t        var prop;\n\t        for (prop in b) {\n\t            if (b.hasOwnProperty(prop)) {\n\t                if (typeof b[prop] === 'undefined') {\n\t                    delete a[prop];\n\t                } else {\n\t                    a[prop] = b[prop];\n\t                }\n\t            }\n\t        }\n\t        return a;\n\t    }\n\t\n\t    function indexOf (ary, element) {\n\t        var i;\n\t        for (i = 0; i < ary.length; i += 1) {\n\t            if (ary[i] === element) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t\n\t    function removeElement (ary, element) {\n\t        var index = indexOf(ary, element);\n\t        if (index !== -1) {\n\t            return ary.splice(index, 1);\n\t        } else {\n\t            return [];\n\t        }\n\t    }\n\t\n\t    function isPlanRequired (conf) {\n\t        return (typeof conf !== 'undefined' && typeof conf.requireExpects !== 'undefined' && conf.requireExpects);\n\t    }\n\t\n\t    function isPassed (details) {\n\t        return !!(details.result);\n\t    }\n\t\n\t    function isFailed (details) {\n\t        return !(isPassed(details));\n\t    }\n\t\n\t    function isAssertOkFailed (details) {\n\t        return isFailed(details) && typeof details.expected === 'undefined' && typeof details.actual === 'undefined';\n\t    }\n\t\n\t    function escapeLineEndings (str) {\n\t        return str.replace(/(\\r?\\n)/g, '$&# ');\n\t    }\n\t\n\t    function ltrim (str) {\n\t        return str.replace(/^\\s+/, '');\n\t    }\n\t\n\t    function noop (obj) {\n\t        return obj;\n\t    }\n\t\n\t    function render (desc, fieldName, fieldValue, formatter) {\n\t        desc.push(fieldName + ': ' + formatter(fieldValue));\n\t    }\n\t\n\t    function renderIf (shouldRender, desc, fieldName, fieldValue, formatter) {\n\t        if (!shouldRender || typeof fieldValue === 'undefined') {\n\t            return;\n\t        }\n\t        render(desc, fieldName, fieldValue, formatter);\n\t    }\n\t\n\t    function formatTestLine (testLine, rest) {\n\t        if (!rest) {\n\t            return testLine;\n\t        }\n\t        return testLine + ' - ' + escapeLineEndings(rest);\n\t    }\n\t\n\t    var createCallbackAppenderFor = function (qu) {\n\t        return function (subject, observer, event) {\n\t            var originalLoggingCallback = subject[event],\n\t                callback = function () {\n\t                    // make listener methods (moduleStart,testStart,log, ...) overridable.\n\t                    observer[event].apply(observer, slice.apply(arguments));\n\t                };\n\t            originalLoggingCallback(callback);\n\t            return callback;\n\t        };\n\t    };\n\t\n\t\n\t    /**\n\t     * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n\t     * @param qunitObject QUnit object reference.\n\t     * @param printLikeFunction print-like function for TAP output (assumes line-separator is added by this function for each call).\n\t     * @param options configuration options to customize default behavior.\n\t     * @return object to provide QUnit-TAP API and customization subject.\n\t     */\n\t    function qunitTap(qunitObject, printLikeFunction, options) {\n\t        if (!qunitObject) {\n\t            throw new Error('should pass QUnit object reference. Please check QUnit\\'s \"require\" path if you are using Node.js (or any CommonJS env).');\n\t        } else if (typeof printLikeFunction !== 'function') {\n\t            throw new Error('should pass print-like function');\n\t        }\n\t\n\t        var qu = qunitObject,\n\t            tap = {},\n\t            deprecateOption = function deprecateOption (optionName, fallback) {\n\t                // option deprecation and fallback function\n\t                if (!options || typeof options !== 'object') {\n\t                    return;\n\t                }\n\t                if (typeof options[optionName] === 'undefined') {\n\t                    return;\n\t                }\n\t                printLikeFunction('# WARNING: Option \"' + optionName + '\" is deprecated and will be removed in future version.');\n\t                fallback(options[optionName]);\n\t            },\n\t            targetEvents = [\n\t                'moduleStart',\n\t                'testStart',\n\t                'log',\n\t                'testDone',\n\t                'done'\n\t            ],\n\t            registeredCallbacks = {},\n\t            explain = (function () {\n\t                if (typeof qu.dump !== 'undefined' && typeof qu.dump.parse === 'function') {\n\t                    return function explain (obj) {\n\t                        return qu.dump.parse(obj);\n\t                    };\n\t                }\n\t                if (typeof qu.jsDump !== 'undefined' && typeof qu.jsDump.parse === 'function') {\n\t                    return function explain (obj) {\n\t                        return qu.jsDump.parse(obj);\n\t                    };\n\t                }\n\t                return noop;\n\t            })();\n\t\n\t        tap.config = extend(\n\t            {\n\t                initialCount: 1,\n\t                showModuleNameOnFailure: true,\n\t                showTestNameOnFailure: true,\n\t                showExpectationOnFailure: true,\n\t                showSourceOnFailure: true\n\t            },\n\t            options\n\t        );\n\t        deprecateOption('noPlan', function (flag) {\n\t            printLikeFunction('# Now QUnit-TAP works as with \"noPlan: true\" by default. If you want to delare plan explicitly, please use \"QUnit.config.requireExpects\" option instead.');\n\t            tap.config.noPlan = flag;\n\t        });\n\t        deprecateOption('count', function (count) {\n\t            tap.config.initialCount = (count + 1);\n\t        });\n\t        deprecateOption('showDetailsOnFailure', function (flag) {\n\t            tap.config.showModuleNameOnFailure = flag;\n\t            tap.config.showTestNameOnFailure = flag;\n\t            tap.config.showExpectationOnFailure = flag;\n\t            tap.config.showSourceOnFailure = flag;\n\t        });\n\t        tap.VERSION = qunitTapVersion;\n\t        tap.puts = printLikeFunction;\n\t        tap.count = tap.config.initialCount - 1;\n\t        tap.expectedCount = tap.config.initialCount - 1;\n\t\n\t        function isEnabled (configName) {\n\t            return tap.config[configName];\n\t        }\n\t\n\t        function formatDetails (details) {\n\t            if (isPassed(details)) {\n\t                return details.message;\n\t            }\n\t            var desc = [];\n\t            if (details.message) {\n\t                desc.push(details.message);\n\t            }\n\t            if (isEnabled('showExpectationOnFailure') && !(isAssertOkFailed(details))) {\n\t                render(desc, 'expected', details.expected, explain);\n\t                render(desc, 'got', details.actual, explain);\n\t            }\n\t            renderIf(isEnabled('showTestNameOnFailure'), desc, 'test', details.name, noop);\n\t            renderIf(isEnabled('showModuleNameOnFailure'), desc, 'module', details.module, noop);\n\t            renderIf(isEnabled('showSourceOnFailure'), desc, 'source', details.source, ltrim);\n\t            return desc.join(', ');\n\t        }\n\t\n\t        function printPlanLine (toCount) {\n\t            tap.puts(tap.config.initialCount + '..' + toCount);\n\t        }\n\t\n\t        function unsubscribeEvent (eventName) {\n\t            var listeners;\n\t            if (indexOf(targetEvents, eventName) === -1) {\n\t                return;\n\t            }\n\t            listeners = qu.config[eventName];\n\t            if (typeof listeners === 'undefined') {\n\t                return;\n\t            }\n\t            removeElement(listeners, registeredCallbacks[eventName]);\n\t        }\n\t\n\t        function unsubscribeEvents (eventNames) {\n\t            var i;\n\t            for (i = 0; i < eventNames.length; i += 1) {\n\t                unsubscribeEvent(eventNames[i]);\n\t            }\n\t        }\n\t\n\t        tap.explain = explain;\n\t\n\t        tap.note = function note (obj) {\n\t            tap.puts(escapeLineEndings('# ' + obj));\n\t        };\n\t\n\t        tap.diag = function diag (obj) {\n\t            tap.note(obj);\n\t            return false;\n\t        };\n\t\n\t        tap.moduleStart = function moduleStart (arg) {\n\t            var name = (typeof arg === 'string') ? arg : arg.name;\n\t            tap.note('module: ' + name);\n\t        };\n\t\n\t        tap.testStart = function testStart (arg) {\n\t            var name = (typeof arg === 'string') ? arg : arg.name;\n\t            tap.note('test: ' + name);\n\t        };\n\t\n\t        tap.log = function log (details) {\n\t            var testLine = '';\n\t            tap.count += 1;\n\t            if (isFailed(details)) {\n\t                testLine += 'not ';\n\t            }\n\t            testLine += ('ok ' + tap.count);\n\t            tap.puts(formatTestLine(testLine, formatDetails(details)));\n\t        };\n\t\n\t        tap.testDone = function testDone () {\n\t            if (isPlanRequired(qu.config)) {\n\t                tap.expectedCount += qu.config.current.expected;\n\t            }\n\t        };\n\t\n\t        tap.done = function done () {\n\t            if (typeof tap.config.noPlan !== 'undefined' && !(tap.config.noPlan)) {\n\t                // Do nothing until removal of 'noPlan' option.\n\t            } else if (isPlanRequired(qu.config)) {\n\t                printPlanLine(tap.expectedCount);\n\t            } else {\n\t                printPlanLine(tap.count);\n\t            }\n\t        };\n\t\n\t        tap.unsubscribe = function unsubscribe () {\n\t            if (typeof qu.config === 'undefined') {\n\t                return;\n\t            }\n\t            if (arguments.length === 0) {\n\t                unsubscribeEvents(targetEvents);\n\t            } else {\n\t                unsubscribeEvents(slice.apply(arguments));\n\t            }\n\t        };\n\t\n\t        (function () {\n\t            var appendCallback = createCallbackAppenderFor(qu),\n\t                eventName, i, callback;\n\t            for (i = 0; i < targetEvents.length; i += 1) {\n\t                eventName = targetEvents[i];\n\t                callback = appendCallback(qu, tap, eventName);\n\t                registeredCallbacks[eventName] = callback;\n\t            }\n\t        })();\n\t\n\t        return tap;\n\t    }\n\t\n\t    qunitTap.qunitTap = function () {\n\t        throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require(\"qunit-tap\") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');\n\t    };\n\t\n\t    // using substack pattern (export single function)\n\t    return qunitTap;\n\t}));\n\n\n/***/ },\n\n/***/ 47:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\t\n\t/* global QUnit, qunitTap */\n\t\n\tvar qunit_started = false;\n\t\n\t/* Always use explicit start */\n\tQUnit.config.autostart = false;\n\t\n\t/*\n\t * HACK: phantomjs doesn't handle uncaught exceptions as it should if\n\t * window.onerror is non-null, even when that handler returns false\n\t * (expecting that the browser default behavior will occur).\n\t *\n\t * So remove the qunit window.onerror handler until the tests actually\n\t * start, and any errors become part of the test suite results.\n\t */\n\tvar qunit_onerror = window.onerror;\n\twindow.onerror = null;\n\tQUnit.begin(function() {\n\t    window.onerror = function(error, file, line) {\n\t        var ret = false;\n\t        if (qunit_onerror)\n\t            ret = qunit_onerror(error, file, line);\n\t\n\t        /*\n\t         * If a global exception happens during an async test\n\t         * then that test won't be able to call the start() function\n\t         * to move to the next test, so call it here.\n\t         */\n\t        if (QUnit.config.current && QUnit.config.current.async)\n\t            QUnit.start();\n\t\n\t        return ret;\n\t    };\n\t});\n\t\n\tQUnit.moduleStart(function() {\n\t    qunit_started = true;\n\t});\n\t\n\tQUnit.done(function() {\n\t    console.log(\"phantom-tap-done\");\n\t    window.onerror = null;\n\t});\n\t/*\n\t * Now initialize qunit-tap\n\t *\n\t * When not running under tap-phantom this stuff will just show up in\n\t * the console. We print out a special canary at the end of the tests\n\t * so that tap-phantom can know when the testing is done.\n\t *\n\t * In addition double check for a test file that doesn't properly call\n\t * QUnit.start() after its done setting up its tests.\n\t *\n\t * We also want to insert the current test name into all tap lines.\n\t */\n\tvar tap_regex = /^((not )?ok [0-9]+ (- )?)(.*)$/;\n\tqunitTap(QUnit, function() {\n\t    if (arguments.length == 1 && QUnit.config.current) {\n\t        var match = tap_regex.exec(arguments[0]);\n\t        if (match) {\n\t            console.log(match[1] + QUnit.config.current.testName + \": \" + match[4]);\n\t            return;\n\t        }\n\t    }\n\t    console.log.apply(console, arguments);\n\t});\n\t\n\twindow.setTimeout(function() {\n\t    if (!qunit_started) {\n\t        console.log(\"QUnit not started by test\");\n\t        console.log(\"phantom-tap-error\");\n\t    }\n\t}, 20000);\n\t\n\twindow.tests_included = true;\n\t\n\tif (module && module.exports)\n\t    module.exports = QUnit;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)(module)))\n\n/***/ },\n\n/***/ 48:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// machines/test-machines.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 46570b2712b1dbda5b3f","'use strict';\n\nvar QUnit = require(\"qunit-tests\");\nvar assert = QUnit;\n\nvar helpers = require(\"./helpers.es6\");\n\nQUnit.test(\"toFixedPrecision\", function() {\n    assert.equal(\"1.0\", helpers.toFixedPrecision(\"1\", 1));\n    assert.equal(\"1.0\", helpers.toFixedPrecision(\"1.0\", 1));\n    assert.equal(\"1.0\", helpers.toFixedPrecision(\"1.01\", 1));\n    assert.equal(\"1.1\", helpers.toFixedPrecision(\"1.1\", 1));\n    assert.equal(\"1.1\", helpers.toFixedPrecision(\"1.123\", 1));\n\n    assert.equal(\"1\", helpers.toFixedPrecision(\"1\", 0));\n    assert.equal(\"1\", helpers.toFixedPrecision(\"1.0\", 0));\n    assert.equal(\"1\", helpers.toFixedPrecision(\"1.01\", 0));\n    assert.equal(\"1\", helpers.toFixedPrecision(\"1.1\", 0));\n    assert.equal(\"1\", helpers.toFixedPrecision(\"1.123\", 0));\n\n    assert.equal(\"1.00\", helpers.toFixedPrecision(\"1\", 2));\n    assert.equal(\"1.00\", helpers.toFixedPrecision(\"1.0\", 2));\n    assert.equal(\"1.01\", helpers.toFixedPrecision(\"1.01\", 2));\n    assert.equal(\"1.10\", helpers.toFixedPrecision(\"1.1\", 2));\n    assert.equal(\"1.12\", helpers.toFixedPrecision(\"1.123\", 2));\n\n    assert.equal(\"12.0\", helpers.toFixedPrecision(\"12\", 1));\n    assert.equal(\"12.0\", helpers.toFixedPrecision(\"12.0\", 1));\n    assert.equal(\"12.0\", helpers.toFixedPrecision(\"12.01\", 1));\n    assert.equal(\"12.0\", helpers.toFixedPrecision(\"12.010\", 1));\n    assert.equal(\"12.1\", helpers.toFixedPrecision(\"12.123\", 1));\n\n    assert.equal(\"12.00\", helpers.toFixedPrecision(\"12\", 2));\n    assert.equal(\"12.00\", helpers.toFixedPrecision(\"12.0\", 2));\n    assert.equal(\"12.01\", helpers.toFixedPrecision(\"12.01\", 2));\n    assert.equal(\"12.01\", helpers.toFixedPrecision(\"12.010\", 2));\n    assert.equal(\"12.12\", helpers.toFixedPrecision(\"12.123\", 2));\n});\n\nQUnit.start();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/machines/test-machines.js\n// module id = 0\n// module chunks = 1","module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/buildin/module.js\n// module id = 14\n// module chunks = 0 1","/*jshint esversion: 6 */\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n/**\n * Application-wide constants\n * TODO: make this configurable by user\n */\nconst VMS_CONFIG = {\n    DefaultRefreshInterval: 10000, // in ms\n    Virsh: {\n        connections: {\n            'system': {\n                params: ['-c', 'qemu:///system']\n            },\n            'session': {\n                params: ['-c', 'qemu:///session']\n            }\n        }\n    },\n    // TODO: make it configurable via config file\n    isDev: false, // Never commit with 'true'\n};\n\nexport default VMS_CONFIG;\n\n\n\n// WEBPACK FOOTER //\n// ../pkg/machines/config.es6","/*jshint esversion: 6 */\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\nimport cockpit from 'cockpit';\nimport VMS_CONFIG from './config.es6';\n\nconst _ = cockpit.gettext;\n\nexport function toGigaBytes(amount, currentUnit) {\n    let result;\n    switch (currentUnit) {\n        case 'B':\n            result = amount / 1024 / 1024 / 1024;\n            break;\n        case 'KiB':\n            result = amount / 1024 / 1024;\n            break;\n        default:\n            console.error(`toGigaBytes(): unknown unit: ${currentUnit}`);\n            result = amount / 1;\n    }\n\n    if (result < 1) {\n        result = result.toFixed(2);\n    } else {\n        const fixed1 = result.toFixed(1);\n        result = (result - fixed1 === 0) ? result.toFixed(0) : fixed1;\n    }\n\n    return result;\n}\n\nexport function toKiloBytes(amount, currentUnit) {\n    let result;\n    switch (currentUnit) {\n        case 'B':\n            result = amount / 1024;\n            break;\n        case 'KiB':\n            result = amount;\n            break;\n        case 'MiB':\n            result = amount * 1024;\n            break;\n        case 'GiB':\n            result = amount * 1024;\n            break;\n        default:\n            console.error(`toKiloBytes(): unknown unit: ${currentUnit}`);\n            result = amount / 1;\n    }\n\n    return result;\n}\n\nexport function isEmpty(str) {\n    return (!str || 0 === str.length);\n}\n\nexport function arrayEquals(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n\n    const diff = arr1.filter((v, index) => {\n        return v !== arr2[index];\n    });\n    return diff.length === 0;\n}\n\nexport function logDebug(msg, ...params) {\n    if (VMS_CONFIG.isDev) {\n        console.log(msg, ...params);\n    }\n}\n\nexport function logError(msg, ...params) {\n    console.error(msg, ...params);\n}\n\nconst transform = {\n    'autostart': {\n        'disable': _(\"disabled\"),\n        'enable': _(\"enabled\"),\n    },\n    'connections': {\n        'system': _(\"System\"),\n        'session': _(\"Session\"),\n    },\n    'vmStates': {\n        'running': _(\"running\"),\n        'idle': _(\"idle\"),\n        'paused': _(\"paused\"),\n        'shutdown': _(\"shutdown\"),\n        'shut off': _(\"shut off\"),\n        'crashed': _(\"crashed\"),\n        'dying': _(\"dying\"),\n        'pmsuspended': _(\"suspended (PM)\"),\n    },\n    'bootableDisk': {\n        'disk': _(\"disk\"),\n        'cdrom': _(\"cdrom\"),\n        'interface': _(\"network\"),\n        'hd': _(\"disk\"),\n    },\n    'cpuMode': {\n        'custom': _(\"custom\"),\n        'host-model': _(\"host\"),\n    },\n};\n\nexport function rephraseUI(key, original) {\n    if (!(key in transform)) {\n        logDebug(`rephraseUI(key='${key}', original='${original}'): unknown key`);\n        return original;\n    }\n\n    if (!(original in transform[key])) {\n        logDebug(`rephraseUI(key='${key}', original='${original}'): unknown original value`);\n        return original;\n    }\n\n    return transform[key][original];\n}\n\nexport function toFixedPrecision(value, precision) {\n    precision = precision || 0;\n    const power = Math.pow(10, precision);\n    const absValue = Math.abs(Math.round(value * power));\n    let result = (value < 0 ? '-' : '') + String(Math.floor(absValue / power));\n\n    if (precision > 0) {\n        const fraction = String(absValue % power);\n        const padding = new Array(Math.max(precision - fraction.length, 0) + 1).join('0');\n        result += '.' + padding + fraction;\n    }\n    return result;\n}\n\n\nfunction isFirefox () {\n    return window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n}\n\n/**\n * Download given content as a file in the browser\n *\n * @param data Content of the file\n * @param fileName\n * @param mimeType\n * @returns {*}\n */\nexport function fileDownload ({ data, fileName = 'myFile.dat', mimeType = 'application/octet-stream' }) {\n    if (!data) {\n        console.error('fileDownload(): no data to download');\n        return false;\n    }\n\n    const a = document.createElement('a');\n    a.id = 'dynamically-generated-file';\n    a.href = `data:${mimeType},${encodeURIComponent(data)}`;\n    document.body.appendChild(a); // if not used further then at least within integration tests\n\n    // Workaround since I can't get CSP working on newer Firefox versions for this\n    if (!isFirefox() && 'download' in a) { // html5 A[download]\n        logDebug('fileDownload() is using A.HREF');\n        a.setAttribute('download', fileName);\n        a.click();\n    } else { // do iframe dataURL download (old ch+FF):\n        logDebug('fileDownload() is using IFRAME');\n        const f = document.createElement('iframe');\n        f.width = '1';\n        f.height = '1';\n        document.body.appendChild(f);\n        const nicerText = '\\n[...............................GraphicsConsole]\\n';\n        f.src = `data:${mimeType},${encodeURIComponent(data + nicerText)}`;\n        window.setTimeout(() => document.body.removeChild(f), 333);\n    }\n\n    window.setTimeout(() => { // give phantomJS time ...\n        logDebug('removing temporary A.HREF for filedownload');\n        document.body.removeChild(a);\n    }, 5000);\n    return true;\n}\n\nexport function vmId(vmName) {\n    return `vm-${vmName}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ../pkg/machines/helpers.es6","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 18\n// module chunks = 0 1","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2014 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    /* QUnit needs to have 'window' as 'this' in order to load */\n    window.QUnit = require(\"qunitjs/qunit/qunit.js\");\n    window.qunitTap = require(\"qunit-tap/lib/qunit-tap.js\");\n\n    require(\"./qunit-config.js\");\n\n    require(\"qunitjs/qunit/qunit.css\");\n\n    module.exports = window.QUnit;\n\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/qunit-tests.js\n// module id = 43\n// module chunks = 1","/*!\n * QUnit 1.23.1\n * https://qunitjs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-04-12T17:29Z\n */\n\n( function( global ) {\n\nvar QUnit = {};\n\nvar Date = global.Date;\nvar now = Date.now || function() {\n\treturn new Date().getTime();\n};\n\nvar setTimeout = global.setTimeout;\nvar clearTimeout = global.clearTimeout;\n\n// Store a local window from the global to allow direct references.\nvar window = global.window;\n\nvar defined = {\n\tdocument: window && window.document !== undefined,\n\tsetTimeout: setTimeout !== undefined,\n\tsessionStorage: ( function() {\n\t\tvar x = \"qunit-test-string\";\n\t\ttry {\n\t\t\tsessionStorage.setItem( x, x );\n\t\t\tsessionStorage.removeItem( x );\n\t\t\treturn true;\n\t\t} catch ( e ) {\n\t\t\treturn false;\n\t\t}\n\t}() )\n};\n\nvar fileName = ( sourceFromStacktrace( 0 ) || \"\" ).replace( /(:\\d+)+\\)?/, \"\" ).replace( /.+\\//, \"\" );\nvar globalStartCalled = false;\nvar runStarted = false;\n\nvar toString = Object.prototype.toString,\n\thasOwn = Object.prototype.hasOwnProperty;\n\n// Returns a new Array with the elements that are in a but not in b\nfunction diff( a, b ) {\n\tvar i, j,\n\t\tresult = a.slice();\n\n\tfor ( i = 0; i < result.length; i++ ) {\n\t\tfor ( j = 0; j < b.length; j++ ) {\n\t\t\tif ( result[ i ] === b[ j ] ) {\n\t\t\t\tresult.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n// From jquery.js\nfunction inArray( elem, array ) {\n\tif ( array.indexOf ) {\n\t\treturn array.indexOf( elem );\n\t}\n\n\tfor ( var i = 0, length = array.length; i < length; i++ ) {\n\t\tif ( array[ i ] === elem ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * Makes a clone of an object using only Array or Object as base,\n * and copies over the own enumerable properties.\n *\n * @param {Object} obj\n * @return {Object} New object with only the own properties (recursively).\n */\nfunction objectValues ( obj ) {\n\tvar key, val,\n\t\tvals = QUnit.is( \"array\", obj ) ? [] : {};\n\tfor ( key in obj ) {\n\t\tif ( hasOwn.call( obj, key ) ) {\n\t\t\tval = obj[ key ];\n\t\t\tvals[ key ] = val === Object( val ) ? objectValues( val ) : val;\n\t\t}\n\t}\n\treturn vals;\n}\n\nfunction extend( a, b, undefOnly ) {\n\tfor ( var prop in b ) {\n\t\tif ( hasOwn.call( b, prop ) ) {\n\n\t\t\t// Avoid \"Member not found\" error in IE8 caused by messing with window.constructor\n\t\t\t// This block runs on every environment, so `global` is being used instead of `window`\n\t\t\t// to avoid errors on node.\n\t\t\tif ( prop !== \"constructor\" || a !== global ) {\n\t\t\t\tif ( b[ prop ] === undefined ) {\n\t\t\t\t\tdelete a[ prop ];\n\t\t\t\t} else if ( !( undefOnly && typeof a[ prop ] !== \"undefined\" ) ) {\n\t\t\t\t\ta[ prop ] = b[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a;\n}\n\nfunction objectType( obj ) {\n\tif ( typeof obj === \"undefined\" ) {\n\t\treturn \"undefined\";\n\t}\n\n\t// Consider: typeof null === object\n\tif ( obj === null ) {\n\t\treturn \"null\";\n\t}\n\n\tvar match = toString.call( obj ).match( /^\\[object\\s(.*)\\]$/ ),\n\t\ttype = match && match[ 1 ];\n\n\tswitch ( type ) {\n\t\tcase \"Number\":\n\t\t\tif ( isNaN( obj ) ) {\n\t\t\t\treturn \"nan\";\n\t\t\t}\n\t\t\treturn \"number\";\n\t\tcase \"String\":\n\t\tcase \"Boolean\":\n\t\tcase \"Array\":\n\t\tcase \"Set\":\n\t\tcase \"Map\":\n\t\tcase \"Date\":\n\t\tcase \"RegExp\":\n\t\tcase \"Function\":\n\t\tcase \"Symbol\":\n\t\t\treturn type.toLowerCase();\n\t}\n\tif ( typeof obj === \"object\" ) {\n\t\treturn \"object\";\n\t}\n}\n\n// Safe object type checking\nfunction is( type, obj ) {\n\treturn QUnit.objectType( obj ) === type;\n}\n\n// Doesn't support IE6 to IE9, it will return undefined on these browsers\n// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\nfunction extractStacktrace( e, offset ) {\n\toffset = offset === undefined ? 4 : offset;\n\n\tvar stack, include, i;\n\n\tif ( e.stack ) {\n\t\tstack = e.stack.split( \"\\n\" );\n\t\tif ( /^error$/i.test( stack[ 0 ] ) ) {\n\t\t\tstack.shift();\n\t\t}\n\t\tif ( fileName ) {\n\t\t\tinclude = [];\n\t\t\tfor ( i = offset; i < stack.length; i++ ) {\n\t\t\t\tif ( stack[ i ].indexOf( fileName ) !== -1 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tinclude.push( stack[ i ] );\n\t\t\t}\n\t\t\tif ( include.length ) {\n\t\t\t\treturn include.join( \"\\n\" );\n\t\t\t}\n\t\t}\n\t\treturn stack[ offset ];\n\n\t// Support: Safari <=6 only\n\t} else if ( e.sourceURL ) {\n\n\t\t// Exclude useless self-reference for generated Error objects\n\t\tif ( /qunit.js$/.test( e.sourceURL ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// For actual exceptions, this is useful\n\t\treturn e.sourceURL + \":\" + e.line;\n\t}\n}\n\nfunction sourceFromStacktrace( offset ) {\n\tvar error = new Error();\n\n\t// Support: Safari <=7 only, IE <=10 - 11 only\n\t// Not all browsers generate the `stack` property for `new Error()`, see also #636\n\tif ( !error.stack ) {\n\t\ttry {\n\t\t\tthrow error;\n\t\t} catch ( err ) {\n\t\t\terror = err;\n\t\t}\n\t}\n\n\treturn extractStacktrace( error, offset );\n}\n\n/**\n * Config object: Maintain internal state\n * Later exposed as QUnit.config\n * `config` initialized at top of scope\n */\nvar config = {\n\n\t// The queue of tests to run\n\tqueue: [],\n\n\t// Block until document ready\n\tblocking: true,\n\n\t// By default, run previously failed tests first\n\t// very useful in combination with \"Hide passed tests\" checked\n\treorder: true,\n\n\t// By default, modify document.title when suite is done\n\taltertitle: true,\n\n\t// HTML Reporter: collapse every test except the first failing test\n\t// If false, all failing tests will be expanded\n\tcollapse: true,\n\n\t// By default, scroll to top of the page when suite is done\n\tscrolltop: true,\n\n\t// Depth up-to which object will be dumped\n\tmaxDepth: 5,\n\n\t// When enabled, all tests must call expect()\n\trequireExpects: false,\n\n\t// Placeholder for user-configurable form-exposed URL parameters\n\turlConfig: [],\n\n\t// Set of all modules.\n\tmodules: [],\n\n\t// Stack of nested modules\n\tmoduleStack: [],\n\n\t// The first unnamed module\n\tcurrentModule: {\n\t\tname: \"\",\n\t\ttests: []\n\t},\n\n\tcallbacks: {}\n};\n\n// Push a loose unnamed module to the modules collection\nconfig.modules.push( config.currentModule );\n\nvar loggingCallbacks = {};\n\n// Register logging callbacks\nfunction registerLoggingCallbacks( obj ) {\n\tvar i, l, key,\n\t\tcallbackNames = [ \"begin\", \"done\", \"log\", \"testStart\", \"testDone\",\n\t\t\t\"moduleStart\", \"moduleDone\" ];\n\n\tfunction registerLoggingCallback( key ) {\n\t\tvar loggingCallback = function( callback ) {\n\t\t\tif ( objectType( callback ) !== \"function\" ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"QUnit logging methods require a callback function as their first parameters.\"\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconfig.callbacks[ key ].push( callback );\n\t\t};\n\n\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t// Stores the registered functions allowing restoring\n\t\t// at verifyLoggingCallbacks() if modified\n\t\tloggingCallbacks[ key ] = loggingCallback;\n\n\t\treturn loggingCallback;\n\t}\n\n\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\n\t\tkey = callbackNames[ i ];\n\n\t\t// Initialize key collection of logging callback\n\t\tif ( objectType( config.callbacks[ key ] ) === \"undefined\" ) {\n\t\t\tconfig.callbacks[ key ] = [];\n\t\t}\n\n\t\tobj[ key ] = registerLoggingCallback( key );\n\t}\n}\n\nfunction runLoggingCallbacks( key, args ) {\n\tvar i, l, callbacks;\n\n\tcallbacks = config.callbacks[ key ];\n\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\n\t\tcallbacks[ i ]( args );\n\t}\n}\n\n// DEPRECATED: This will be removed on 2.0.0+\n// This function verifies if the loggingCallbacks were modified by the user\n// If so, it will restore it, assign the given callback and print a console warning\nfunction verifyLoggingCallbacks() {\n\tvar loggingCallback, userCallback;\n\n\tfor ( loggingCallback in loggingCallbacks ) {\n\t\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\n\n\t\t\tuserCallback = QUnit[ loggingCallback ];\n\n\t\t\t// Restore the callback function\n\t\t\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\n\n\t\t\t// Assign the deprecated given callback\n\t\t\tQUnit[ loggingCallback ]( userCallback );\n\n\t\t\tif ( global.console && global.console.warn ) {\n\t\t\t\tglobal.console.warn(\n\t\t\t\t\t\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" +\n\t\t\t\t\t\"Please, check out the documentation on how to apply logging callbacks.\\n\" +\n\t\t\t\t\t\"Reference: https://api.qunitjs.com/category/callbacks/\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n( function() {\n\tif ( !defined.document ) {\n\t\treturn;\n\t}\n\n\t// `onErrorFnPrev` initialized at top of scope\n\t// Preserve other handlers\n\tvar onErrorFnPrev = window.onerror;\n\n\t// Cover uncaught exceptions\n\t// Returning true will suppress the default browser handler,\n\t// returning false will let it run.\n\twindow.onerror = function( error, filePath, linerNr ) {\n\t\tvar ret = false;\n\t\tif ( onErrorFnPrev ) {\n\t\t\tret = onErrorFnPrev( error, filePath, linerNr );\n\t\t}\n\n\t\t// Treat return value as window.onerror itself does,\n\t\t// Only do our handling if not suppressed.\n\t\tif ( ret !== true ) {\n\t\t\tif ( QUnit.config.current ) {\n\t\t\t\tif ( QUnit.config.current.ignoreGlobalErrors ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t} else {\n\t\t\t\tQUnit.test( \"global failure\", extend( function() {\n\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t}, { validTest: true } ) );\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ret;\n\t};\n}() );\n\n// Figure out if we're running the tests from a server or not\nQUnit.isLocal = !( defined.document && window.location.protocol !== \"file:\" );\n\n// Expose the current QUnit version\nQUnit.version = \"1.23.1\";\n\nextend( QUnit, {\n\n\t// Call on start of module test to prepend name to all tests\n\tmodule: function( name, testEnvironment, executeNow ) {\n\t\tvar module, moduleFns;\n\t\tvar currentModule = config.currentModule;\n\n\t\tif ( arguments.length === 2 ) {\n\t\t\tif ( objectType( testEnvironment ) === \"function\" ) {\n\t\t\t\texecuteNow = testEnvironment;\n\t\t\t\ttestEnvironment = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// DEPRECATED: handles setup/teardown functions,\n\t\t// beforeEach and afterEach should be used instead\n\t\tif ( testEnvironment && testEnvironment.setup ) {\n\t\t\ttestEnvironment.beforeEach = testEnvironment.setup;\n\t\t\tdelete testEnvironment.setup;\n\t\t}\n\t\tif ( testEnvironment && testEnvironment.teardown ) {\n\t\t\ttestEnvironment.afterEach = testEnvironment.teardown;\n\t\t\tdelete testEnvironment.teardown;\n\t\t}\n\n\t\tmodule = createModule();\n\n\t\tmoduleFns = {\n\t\t\tbeforeEach: setHook( module, \"beforeEach\" ),\n\t\t\tafterEach: setHook( module, \"afterEach\" )\n\t\t};\n\n\t\tif ( objectType( executeNow ) === \"function\" ) {\n\t\t\tconfig.moduleStack.push( module );\n\t\t\tsetCurrentModule( module );\n\t\t\texecuteNow.call( module.testEnvironment, moduleFns );\n\t\t\tconfig.moduleStack.pop();\n\t\t\tmodule = module.parentModule || currentModule;\n\t\t}\n\n\t\tsetCurrentModule( module );\n\n\t\tfunction createModule() {\n\t\t\tvar parentModule = config.moduleStack.length ?\n\t\t\t\tconfig.moduleStack.slice( -1 )[ 0 ] : null;\n\t\t\tvar moduleName = parentModule !== null ?\n\t\t\t\t[ parentModule.name, name ].join( \" > \" ) : name;\n\t\t\tvar module = {\n\t\t\t\tname: moduleName,\n\t\t\t\tparentModule: parentModule,\n\t\t\t\ttests: [],\n\t\t\t\tmoduleId: generateHash( moduleName )\n\t\t\t};\n\n\t\t\tvar env = {};\n\t\t\tif ( parentModule ) {\n\t\t\t\textend( env, parentModule.testEnvironment );\n\t\t\t\tdelete env.beforeEach;\n\t\t\t\tdelete env.afterEach;\n\t\t\t}\n\t\t\textend( env, testEnvironment );\n\t\t\tmodule.testEnvironment = env;\n\n\t\t\tconfig.modules.push( module );\n\t\t\treturn module;\n\t\t}\n\n\t\tfunction setCurrentModule( module ) {\n\t\t\tconfig.currentModule = module;\n\t\t}\n\n\t},\n\n\t// DEPRECATED: QUnit.asyncTest() will be removed in QUnit 2.0.\n\tasyncTest: asyncTest,\n\n\ttest: test,\n\n\tskip: skip,\n\n\tonly: only,\n\n\t// DEPRECATED: The functionality of QUnit.start() will be altered in QUnit 2.0.\n\t// In QUnit 2.0, invoking it will ONLY affect the `QUnit.config.autostart` blocking behavior.\n\tstart: function( count ) {\n\t\tvar globalStartAlreadyCalled = globalStartCalled;\n\n\t\tif ( !config.current ) {\n\t\t\tglobalStartCalled = true;\n\n\t\t\tif ( runStarted ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context while already started\" );\n\t\t\t} else if ( globalStartAlreadyCalled || count > 1 ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context too many times\" );\n\t\t\t} else if ( config.autostart ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context when \" +\n\t\t\t\t\t\"QUnit.config.autostart was true\" );\n\t\t\t} else if ( !config.pageLoaded ) {\n\n\t\t\t\t// The page isn't completely loaded yet, so bail out and let `QUnit.load` handle it\n\t\t\t\tconfig.autostart = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\n\t\t\t// If a test is running, adjust its semaphore\n\t\t\tconfig.current.semaphore -= count || 1;\n\n\t\t\t// If semaphore is non-numeric, throw error\n\t\t\tif ( isNaN( config.current.semaphore ) ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\n\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\"Called start() with a non-numeric decrement.\",\n\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't start until equal number of stop-calls\n\t\t\tif ( config.current.semaphore > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Throw an Error if start is called more often than stop\n\t\t\tif ( config.current.semaphore < 0 ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\n\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\"Called start() while already started (test's semaphore was 0 already)\",\n\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tresumeProcessing();\n\t},\n\n\t// DEPRECATED: QUnit.stop() will be removed in QUnit 2.0.\n\tstop: function( count ) {\n\n\t\t// If there isn't a test running, don't allow QUnit.stop() to be called\n\t\tif ( !config.current ) {\n\t\t\tthrow new Error( \"Called stop() outside of a test context\" );\n\t\t}\n\n\t\t// If a test is running, adjust its semaphore\n\t\tconfig.current.semaphore += count || 1;\n\n\t\tpauseProcessing();\n\t},\n\n\tconfig: config,\n\n\tis: is,\n\n\tobjectType: objectType,\n\n\textend: extend,\n\n\tload: function() {\n\t\tconfig.pageLoaded = true;\n\n\t\t// Initialize the configuration options\n\t\textend( config, {\n\t\t\tstats: { all: 0, bad: 0 },\n\t\t\tmoduleStats: { all: 0, bad: 0 },\n\t\t\tstarted: 0,\n\t\t\tupdateRate: 1000,\n\t\t\tautostart: true,\n\t\t\tfilter: \"\"\n\t\t}, true );\n\n\t\tconfig.blocking = false;\n\n\t\tif ( config.autostart ) {\n\t\t\tresumeProcessing();\n\t\t}\n\t},\n\n\tstack: function( offset ) {\n\t\toffset = ( offset || 0 ) + 2;\n\t\treturn sourceFromStacktrace( offset );\n\t}\n} );\n\nregisterLoggingCallbacks( QUnit );\n\nfunction begin() {\n\tvar i, l,\n\t\tmodulesLog = [];\n\n\t// If the test run hasn't officially begun yet\n\tif ( !config.started ) {\n\n\t\t// Record the time of the test run's beginning\n\t\tconfig.started = now();\n\n\t\tverifyLoggingCallbacks();\n\n\t\t// Delete the loose unnamed module if unused.\n\t\tif ( config.modules[ 0 ].name === \"\" && config.modules[ 0 ].tests.length === 0 ) {\n\t\t\tconfig.modules.shift();\n\t\t}\n\n\t\t// Avoid unnecessary information by not logging modules' test environments\n\t\tfor ( i = 0, l = config.modules.length; i < l; i++ ) {\n\t\t\tmodulesLog.push( {\n\t\t\t\tname: config.modules[ i ].name,\n\t\t\t\ttests: config.modules[ i ].tests\n\t\t\t} );\n\t\t}\n\n\t\t// The test run is officially beginning now\n\t\trunLoggingCallbacks( \"begin\", {\n\t\t\ttotalTests: Test.count,\n\t\t\tmodules: modulesLog\n\t\t} );\n\t}\n\n\tconfig.blocking = false;\n\tprocess( true );\n}\n\nfunction process( last ) {\n\tfunction next() {\n\t\tprocess( last );\n\t}\n\tvar start = now();\n\tconfig.depth = ( config.depth || 0 ) + 1;\n\n\twhile ( config.queue.length && !config.blocking ) {\n\t\tif ( !defined.setTimeout || config.updateRate <= 0 ||\n\t\t\t\t( ( now() - start ) < config.updateRate ) ) {\n\t\t\tif ( config.current ) {\n\n\t\t\t\t// Reset async tracking for each phase of the Test lifecycle\n\t\t\t\tconfig.current.usedAsync = false;\n\t\t\t}\n\t\t\tconfig.queue.shift()();\n\t\t} else {\n\t\t\tsetTimeout( next, 13 );\n\t\t\tbreak;\n\t\t}\n\t}\n\tconfig.depth--;\n\tif ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\n\t\tdone();\n\t}\n}\n\nfunction pauseProcessing() {\n\tconfig.blocking = true;\n\n\tif ( config.testTimeout && defined.setTimeout ) {\n\t\tclearTimeout( config.timeout );\n\t\tconfig.timeout = setTimeout( function() {\n\t\t\tif ( config.current ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\t\t\t\tQUnit.pushFailure( \"Test timed out\", sourceFromStacktrace( 2 ) );\n\t\t\t} else {\n\t\t\t\tthrow new Error( \"Test timed out\" );\n\t\t\t}\n\t\t\tresumeProcessing();\n\t\t}, config.testTimeout );\n\t}\n}\n\nfunction resumeProcessing() {\n\trunStarted = true;\n\n\t// A slight delay to allow this iteration of the event loop to finish (more assertions, etc.)\n\tif ( defined.setTimeout ) {\n\t\tsetTimeout( function() {\n\t\t\tif ( config.current && config.current.semaphore > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( config.timeout ) {\n\t\t\t\tclearTimeout( config.timeout );\n\t\t\t}\n\n\t\t\tbegin();\n\t\t}, 13 );\n\t} else {\n\t\tbegin();\n\t}\n}\n\nfunction done() {\n\tvar runtime, passed;\n\n\tconfig.autorun = true;\n\n\t// Log the last module results\n\tif ( config.previousModule ) {\n\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\tname: config.previousModule.name,\n\t\t\ttests: config.previousModule.tests,\n\t\t\tfailed: config.moduleStats.bad,\n\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\ttotal: config.moduleStats.all,\n\t\t\truntime: now() - config.moduleStats.started\n\t\t} );\n\t}\n\tdelete config.previousModule;\n\n\truntime = now() - config.started;\n\tpassed = config.stats.all - config.stats.bad;\n\n\trunLoggingCallbacks( \"done\", {\n\t\tfailed: config.stats.bad,\n\t\tpassed: passed,\n\t\ttotal: config.stats.all,\n\t\truntime: runtime\n\t} );\n}\n\nfunction setHook( module, hookName ) {\n\tif ( module.testEnvironment === undefined ) {\n\t\tmodule.testEnvironment = {};\n\t}\n\n\treturn function( callback ) {\n\t\tmodule.testEnvironment[ hookName ] = callback;\n\t};\n}\n\nvar focused = false;\nvar priorityCount = 0;\nvar unitSampler;\n\nfunction Test( settings ) {\n\tvar i, l;\n\n\t++Test.count;\n\n\textend( this, settings );\n\tthis.assertions = [];\n\tthis.semaphore = 0;\n\tthis.usedAsync = false;\n\tthis.module = config.currentModule;\n\tthis.stack = sourceFromStacktrace( 3 );\n\n\t// Register unique strings\n\tfor ( i = 0, l = this.module.tests; i < l.length; i++ ) {\n\t\tif ( this.module.tests[ i ].name === this.testName ) {\n\t\t\tthis.testName += \" \";\n\t\t}\n\t}\n\n\tthis.testId = generateHash( this.module.name, this.testName );\n\n\tthis.module.tests.push( {\n\t\tname: this.testName,\n\t\ttestId: this.testId\n\t} );\n\n\tif ( settings.skip ) {\n\n\t\t// Skipped tests will fully ignore any sent callback\n\t\tthis.callback = function() {};\n\t\tthis.async = false;\n\t\tthis.expected = 0;\n\t} else {\n\t\tthis.assert = new Assert( this );\n\t}\n}\n\nTest.count = 0;\n\nTest.prototype = {\n\tbefore: function() {\n\t\tif (\n\n\t\t\t// Emit moduleStart when we're switching from one module to another\n\t\t\tthis.module !== config.previousModule ||\n\n\t\t\t\t// They could be equal (both undefined) but if the previousModule property doesn't\n\t\t\t\t// yet exist it means this is the first test in a suite that isn't wrapped in a\n\t\t\t\t// module, in which case we'll just emit a moduleStart event for 'undefined'.\n\t\t\t\t// Without this, reporters can get testStart before moduleStart  which is a problem.\n\t\t\t\t!hasOwn.call( config, \"previousModule\" )\n\t\t) {\n\t\t\tif ( hasOwn.call( config, \"previousModule\" ) ) {\n\t\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\t\tname: config.previousModule.name,\n\t\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t\t} );\n\t\t\t}\n\t\t\tconfig.previousModule = this.module;\n\t\t\tconfig.moduleStats = { all: 0, bad: 0, started: now() };\n\t\t\trunLoggingCallbacks( \"moduleStart\", {\n\t\t\t\tname: this.module.name,\n\t\t\t\ttests: this.module.tests\n\t\t\t} );\n\t\t}\n\n\t\tconfig.current = this;\n\n\t\tif ( this.module.testEnvironment ) {\n\t\t\tdelete this.module.testEnvironment.beforeEach;\n\t\t\tdelete this.module.testEnvironment.afterEach;\n\t\t}\n\t\tthis.testEnvironment = extend( {}, this.module.testEnvironment );\n\n\t\tthis.started = now();\n\t\trunLoggingCallbacks( \"testStart\", {\n\t\t\tname: this.testName,\n\t\t\tmodule: this.module.name,\n\t\t\ttestId: this.testId\n\t\t} );\n\n\t\tif ( !config.pollution ) {\n\t\t\tsaveGlobal();\n\t\t}\n\t},\n\n\trun: function() {\n\t\tvar promise;\n\n\t\tconfig.current = this;\n\n\t\tif ( this.async ) {\n\t\t\tQUnit.stop();\n\t\t}\n\n\t\tthis.callbackStarted = now();\n\n\t\tif ( config.notrycatch ) {\n\t\t\trunTest( this );\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\trunTest( this );\n\t\t} catch ( e ) {\n\t\t\tthis.pushFailure( \"Died on test #\" + ( this.assertions.length + 1 ) + \" \" +\n\t\t\t\tthis.stack + \": \" + ( e.message || e ), extractStacktrace( e, 0 ) );\n\n\t\t\t// Else next test will carry the responsibility\n\t\t\tsaveGlobal();\n\n\t\t\t// Restart the tests if they're blocking\n\t\t\tif ( config.blocking ) {\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t}\n\n\t\tfunction runTest( test ) {\n\t\t\tpromise = test.callback.call( test.testEnvironment, test.assert );\n\t\t\ttest.resolvePromise( promise );\n\t\t}\n\t},\n\n\tafter: function() {\n\t\tcheckPollution();\n\t},\n\n\tqueueHook: function( hook, hookName ) {\n\t\tvar promise,\n\t\t\ttest = this;\n\t\treturn function runHook() {\n\t\t\tconfig.current = test;\n\t\t\tif ( config.notrycatch ) {\n\t\t\t\tcallHook();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tcallHook();\n\t\t\t} catch ( error ) {\n\t\t\t\ttest.pushFailure( hookName + \" failed on \" + test.testName + \": \" +\n\t\t\t\t( error.message || error ), extractStacktrace( error, 0 ) );\n\t\t\t}\n\n\t\t\tfunction callHook() {\n\t\t\t\tpromise = hook.call( test.testEnvironment, test.assert );\n\t\t\t\ttest.resolvePromise( promise, hookName );\n\t\t\t}\n\t\t};\n\t},\n\n\t// Currently only used for module level hooks, can be used to add global level ones\n\thooks: function( handler ) {\n\t\tvar hooks = [];\n\n\t\tfunction processHooks( test, module ) {\n\t\t\tif ( module.parentModule ) {\n\t\t\t\tprocessHooks( test, module.parentModule );\n\t\t\t}\n\t\t\tif ( module.testEnvironment &&\n\t\t\t\tQUnit.objectType( module.testEnvironment[ handler ] ) === \"function\" ) {\n\t\t\t\thooks.push( test.queueHook( module.testEnvironment[ handler ], handler ) );\n\t\t\t}\n\t\t}\n\n\t\t// Hooks are ignored on skipped tests\n\t\tif ( !this.skip ) {\n\t\t\tprocessHooks( this, this.module );\n\t\t}\n\t\treturn hooks;\n\t},\n\n\tfinish: function() {\n\t\tconfig.current = this;\n\t\tif ( config.requireExpects && this.expected === null ) {\n\t\t\tthis.pushFailure( \"Expected number of assertions to be defined, but expect() was \" +\n\t\t\t\t\"not called.\", this.stack );\n\t\t} else if ( this.expected !== null && this.expected !== this.assertions.length ) {\n\t\t\tthis.pushFailure( \"Expected \" + this.expected + \" assertions, but \" +\n\t\t\t\tthis.assertions.length + \" were run\", this.stack );\n\t\t} else if ( this.expected === null && !this.assertions.length ) {\n\t\t\tthis.pushFailure( \"Expected at least one assertion, but none were run - call \" +\n\t\t\t\t\"expect(0) to accept zero assertions.\", this.stack );\n\t\t}\n\n\t\tvar i,\n\t\t\tbad = 0;\n\n\t\tthis.runtime = now() - this.started;\n\t\tconfig.stats.all += this.assertions.length;\n\t\tconfig.moduleStats.all += this.assertions.length;\n\n\t\tfor ( i = 0; i < this.assertions.length; i++ ) {\n\t\t\tif ( !this.assertions[ i ].result ) {\n\t\t\t\tbad++;\n\t\t\t\tconfig.stats.bad++;\n\t\t\t\tconfig.moduleStats.bad++;\n\t\t\t}\n\t\t}\n\n\t\trunLoggingCallbacks( \"testDone\", {\n\t\t\tname: this.testName,\n\t\t\tmodule: this.module.name,\n\t\t\tskipped: !!this.skip,\n\t\t\tfailed: bad,\n\t\t\tpassed: this.assertions.length - bad,\n\t\t\ttotal: this.assertions.length,\n\t\t\truntime: this.runtime,\n\n\t\t\t// HTML Reporter use\n\t\t\tassertions: this.assertions,\n\t\t\ttestId: this.testId,\n\n\t\t\t// Source of Test\n\t\t\tsource: this.stack,\n\n\t\t\t// DEPRECATED: this property will be removed in 2.0.0, use runtime instead\n\t\t\tduration: this.runtime\n\t\t} );\n\n\t\t// QUnit.reset() is deprecated and will be replaced for a new\n\t\t// fixture reset function on QUnit 2.0/2.1.\n\t\t// It's still called here for backwards compatibility handling\n\t\tQUnit.reset();\n\n\t\tconfig.current = undefined;\n\t},\n\n\tqueue: function() {\n\t\tvar priority,\n\t\t\ttest = this;\n\n\t\tif ( !this.valid() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction run() {\n\n\t\t\t// Each of these can by async\n\t\t\tsynchronize( [\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.before();\n\t\t\t\t},\n\n\t\t\t\ttest.hooks( \"beforeEach\" ),\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.run();\n\t\t\t\t},\n\n\t\t\t\ttest.hooks( \"afterEach\" ).reverse(),\n\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.after();\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.finish();\n\t\t\t\t}\n\t\t\t] );\n\t\t}\n\n\t\t// Prioritize previously failed tests, detected from sessionStorage\n\t\tpriority = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + this.module.name + \"-\" + this.testName );\n\n\t\treturn synchronize( run, priority, config.seed );\n\t},\n\n\tpushResult: function( resultInfo ) {\n\n\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\tvar source,\n\t\t\tdetails = {\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tname: this.testName,\n\t\t\t\tresult: resultInfo.result,\n\t\t\t\tmessage: resultInfo.message,\n\t\t\t\tactual: resultInfo.actual,\n\t\t\t\texpected: resultInfo.expected,\n\t\t\t\ttestId: this.testId,\n\t\t\t\tnegative: resultInfo.negative || false,\n\t\t\t\truntime: now() - this.started\n\t\t\t};\n\n\t\tif ( !resultInfo.result ) {\n\t\t\tsource = sourceFromStacktrace();\n\n\t\t\tif ( source ) {\n\t\t\t\tdetails.source = source;\n\t\t\t}\n\t\t}\n\n\t\trunLoggingCallbacks( \"log\", details );\n\n\t\tthis.assertions.push( {\n\t\t\tresult: !!resultInfo.result,\n\t\t\tmessage: resultInfo.message\n\t\t} );\n\t},\n\n\tpushFailure: function( message, source, actual ) {\n\t\tif ( !( this instanceof Test ) ) {\n\t\t\tthrow new Error( \"pushFailure() assertion outside test context, was \" +\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t}\n\n\t\tvar details = {\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tname: this.testName,\n\t\t\t\tresult: false,\n\t\t\t\tmessage: message || \"error\",\n\t\t\t\tactual: actual || null,\n\t\t\t\ttestId: this.testId,\n\t\t\t\truntime: now() - this.started\n\t\t\t};\n\n\t\tif ( source ) {\n\t\t\tdetails.source = source;\n\t\t}\n\n\t\trunLoggingCallbacks( \"log\", details );\n\n\t\tthis.assertions.push( {\n\t\t\tresult: false,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tresolvePromise: function( promise, phase ) {\n\t\tvar then, message,\n\t\t\ttest = this;\n\t\tif ( promise != null ) {\n\t\t\tthen = promise.then;\n\t\t\tif ( QUnit.objectType( then ) === \"function\" ) {\n\t\t\t\tQUnit.stop();\n\t\t\t\tthen.call(\n\t\t\t\t\tpromise,\n\t\t\t\t\tfunction() { QUnit.start(); },\n\t\t\t\t\tfunction( error ) {\n\t\t\t\t\t\tmessage = \"Promise rejected \" +\n\t\t\t\t\t\t\t( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) +\n\t\t\t\t\t\t\t\" \" + test.testName + \": \" + ( error.message || error );\n\t\t\t\t\t\ttest.pushFailure( message, extractStacktrace( error, 0 ) );\n\n\t\t\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\t\t\tsaveGlobal();\n\n\t\t\t\t\t\t// Unblock\n\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\n\tvalid: function() {\n\t\tvar filter = config.filter,\n\t\t\tregexFilter = /^(!?)\\/([\\w\\W]*)\\/(i?$)/.exec( filter ),\n\t\t\tmodule = config.module && config.module.toLowerCase(),\n\t\t\tfullName = ( this.module.name + \": \" + this.testName );\n\n\t\tfunction moduleChainNameMatch( testModule ) {\n\t\t\tvar testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\n\t\t\tif ( testModuleName === module ) {\n\t\t\t\treturn true;\n\t\t\t} else if ( testModule.parentModule ) {\n\t\t\t\treturn moduleChainNameMatch( testModule.parentModule );\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfunction moduleChainIdMatch( testModule ) {\n\t\t\treturn inArray( testModule.moduleId, config.moduleId ) > -1 ||\n\t\t\t\ttestModule.parentModule && moduleChainIdMatch( testModule.parentModule );\n\t\t}\n\n\t\t// Internally-generated tests are always valid\n\t\tif ( this.callback && this.callback.validTest ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( config.moduleId && config.moduleId.length > 0 &&\n\t\t\t!moduleChainIdMatch( this.module ) ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( config.testId && config.testId.length > 0 &&\n\t\t\tinArray( this.testId, config.testId ) < 0 ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( module && !moduleChainNameMatch( this.module ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !filter ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn regexFilter ?\n\t\t\tthis.regexFilter( !!regexFilter[ 1 ], regexFilter[ 2 ], regexFilter[ 3 ], fullName ) :\n\t\t\tthis.stringFilter( filter, fullName );\n\t},\n\n\tregexFilter: function( exclude, pattern, flags, fullName ) {\n\t\tvar regex = new RegExp( pattern, flags );\n\t\tvar match = regex.test( fullName );\n\n\t\treturn match !== exclude;\n\t},\n\n\tstringFilter: function( filter, fullName ) {\n\t\tfilter = filter.toLowerCase();\n\t\tfullName = fullName.toLowerCase();\n\n\t\tvar include = filter.charAt( 0 ) !== \"!\";\n\t\tif ( !include ) {\n\t\t\tfilter = filter.slice( 1 );\n\t\t}\n\n\t\t// If the filter matches, we need to honour include\n\t\tif ( fullName.indexOf( filter ) !== -1 ) {\n\t\t\treturn include;\n\t\t}\n\n\t\t// Otherwise, do the opposite\n\t\treturn !include;\n\t}\n};\n\n// Resets the test setup. Useful for tests that modify the DOM.\n/*\nDEPRECATED: Use multiple tests instead of resetting inside a test.\nUse testStart or testDone for custom cleanup.\nThis method will throw an error in 2.0, and will be removed in 2.1\n*/\nQUnit.reset = function() {\n\n\t// Return on non-browser environments\n\t// This is necessary to not break on node tests\n\tif ( !defined.document ) {\n\t\treturn;\n\t}\n\n\tvar fixture = defined.document && document.getElementById &&\n\t\t\tdocument.getElementById( \"qunit-fixture\" );\n\n\tif ( fixture ) {\n\t\tfixture.innerHTML = config.fixture;\n\t}\n};\n\nQUnit.pushFailure = function() {\n\tif ( !QUnit.config.current ) {\n\t\tthrow new Error( \"pushFailure() assertion outside test context, in \" +\n\t\t\tsourceFromStacktrace( 2 ) );\n\t}\n\n\t// Gets current test obj\n\tvar currentTest = QUnit.config.current;\n\n\treturn currentTest.pushFailure.apply( currentTest, arguments );\n};\n\n// Based on Java's String.hashCode, a simple but not\n// rigorously collision resistant hashing function\nfunction generateHash( module, testName ) {\n\tvar hex,\n\t\ti = 0,\n\t\thash = 0,\n\t\tstr = module + \"\\x1C\" + testName,\n\t\tlen = str.length;\n\n\tfor ( ; i < len; i++ ) {\n\t\thash  = ( ( hash << 5 ) - hash ) + str.charCodeAt( i );\n\t\thash |= 0;\n\t}\n\n\t// Convert the possibly negative integer hash code into an 8 character hex string, which isn't\n\t// strictly necessary but increases user understanding that the id is a SHA-like hash\n\thex = ( 0x100000000 + hash ).toString( 16 );\n\tif ( hex.length < 8 ) {\n\t\thex = \"0000000\" + hex;\n\t}\n\n\treturn hex.slice( -8 );\n}\n\nfunction synchronize( callback, priority, seed ) {\n\tvar last = !priority,\n\t\tindex;\n\n\tif ( QUnit.objectType( callback ) === \"array\" ) {\n\t\twhile ( callback.length ) {\n\t\t\tsynchronize( callback.shift() );\n\t\t}\n\t\treturn;\n\t}\n\n\tif ( priority ) {\n\t\tconfig.queue.splice( priorityCount++, 0, callback );\n\t} else if ( seed ) {\n\t\tif ( !unitSampler ) {\n\t\t\tunitSampler = unitSamplerGenerator( seed );\n\t\t}\n\n\t\t// Insert into a random position after all priority items\n\t\tindex = Math.floor( unitSampler() * ( config.queue.length - priorityCount + 1 ) );\n\t\tconfig.queue.splice( priorityCount + index, 0, callback );\n\t} else {\n\t\tconfig.queue.push( callback );\n\t}\n\n\tif ( config.autorun && !config.blocking ) {\n\t\tprocess( last );\n\t}\n}\n\nfunction unitSamplerGenerator( seed ) {\n\n\t// 32-bit xorshift, requires only a nonzero seed\n\t// http://excamera.com/sphinx/article-xorshift.html\n\tvar sample = parseInt( generateHash( seed ), 16 ) || -1;\n\treturn function() {\n\t\tsample ^= sample << 13;\n\t\tsample ^= sample >>> 17;\n\t\tsample ^= sample << 5;\n\n\t\t// ECMAScript has no unsigned number type\n\t\tif ( sample < 0 ) {\n\t\t\tsample += 0x100000000;\n\t\t}\n\n\t\treturn sample / 0x100000000;\n\t};\n}\n\nfunction saveGlobal() {\n\tconfig.pollution = [];\n\n\tif ( config.noglobals ) {\n\t\tfor ( var key in global ) {\n\t\t\tif ( hasOwn.call( global, key ) ) {\n\n\t\t\t\t// In Opera sometimes DOM element ids show up here, ignore them\n\t\t\t\tif ( /^qunit-test-output/.test( key ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconfig.pollution.push( key );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction checkPollution() {\n\tvar newGlobals,\n\t\tdeletedGlobals,\n\t\told = config.pollution;\n\n\tsaveGlobal();\n\n\tnewGlobals = diff( config.pollution, old );\n\tif ( newGlobals.length > 0 ) {\n\t\tQUnit.pushFailure( \"Introduced global variable(s): \" + newGlobals.join( \", \" ) );\n\t}\n\n\tdeletedGlobals = diff( old, config.pollution );\n\tif ( deletedGlobals.length > 0 ) {\n\t\tQUnit.pushFailure( \"Deleted global variable(s): \" + deletedGlobals.join( \", \" ) );\n\t}\n}\n\n// Will be exposed as QUnit.asyncTest\nfunction asyncTest( testName, expected, callback ) {\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tQUnit.test( testName, expected, callback, true );\n}\n\n// Will be exposed as QUnit.test\nfunction test( testName, expected, callback, async ) {\n\tif ( focused )  { return; }\n\n\tvar newTest;\n\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tnewTest = new Test( {\n\t\ttestName: testName,\n\t\texpected: expected,\n\t\tasync: async,\n\t\tcallback: callback\n\t} );\n\n\tnewTest.queue();\n}\n\n// Will be exposed as QUnit.skip\nfunction skip( testName ) {\n\tif ( focused )  { return; }\n\n\tvar test = new Test( {\n\t\ttestName: testName,\n\t\tskip: true\n\t} );\n\n\ttest.queue();\n}\n\n// Will be exposed as QUnit.only\nfunction only( testName, expected, callback, async ) {\n\tvar newTest;\n\n\tif ( focused )  { return; }\n\n\tQUnit.config.queue.length = 0;\n\tfocused = true;\n\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tnewTest = new Test( {\n\t\ttestName: testName,\n\t\texpected: expected,\n\t\tasync: async,\n\t\tcallback: callback\n\t} );\n\n\tnewTest.queue();\n}\n\nfunction Assert( testContext ) {\n\tthis.test = testContext;\n}\n\n// Assert helpers\nQUnit.assert = Assert.prototype = {\n\n\t// Specify the number of expected assertions to guarantee that failed test\n\t// (no assertions are run at all) don't slip through.\n\texpect: function( asserts ) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\tthis.test.expected = asserts;\n\t\t} else {\n\t\t\treturn this.test.expected;\n\t\t}\n\t},\n\n\t// Increment this Test's semaphore counter, then return a function that\n\t// decrements that counter a maximum of once.\n\tasync: function( count ) {\n\t\tvar test = this.test,\n\t\t\tpopped = false,\n\t\t\tacceptCallCount = count;\n\n\t\tif ( typeof acceptCallCount === \"undefined\" ) {\n\t\t\tacceptCallCount = 1;\n\t\t}\n\n\t\ttest.semaphore += 1;\n\t\ttest.usedAsync = true;\n\t\tpauseProcessing();\n\n\t\treturn function done() {\n\n\t\t\tif ( popped ) {\n\t\t\t\ttest.pushFailure( \"Too many calls to the `assert.async` callback\",\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tacceptCallCount -= 1;\n\t\t\tif ( acceptCallCount > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttest.semaphore -= 1;\n\t\t\tpopped = true;\n\t\t\tresumeProcessing();\n\t\t};\n\t},\n\n\t// Exports test.push() to the user API\n\t// Alias of pushResult.\n\tpush: function( result, actual, expected, message, negative ) {\n\t\tvar currentAssert = this instanceof Assert ? this : QUnit.config.current.assert;\n\t\treturn currentAssert.pushResult( {\n\t\t\tresult: result,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: negative\n\t\t} );\n\t},\n\n\tpushResult: function( resultInfo ) {\n\n\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\tvar assert = this,\n\t\t\tcurrentTest = ( assert instanceof Assert && assert.test ) || QUnit.config.current;\n\n\t\t// Backwards compatibility fix.\n\t\t// Allows the direct use of global exported assertions and QUnit.assert.*\n\t\t// Although, it's use is not recommended as it can leak assertions\n\t\t// to other tests from async tests, because we only get a reference to the current test,\n\t\t// not exactly the test where assertion were intended to be called.\n\t\tif ( !currentTest ) {\n\t\t\tthrow new Error( \"assertion outside test context, in \" + sourceFromStacktrace( 2 ) );\n\t\t}\n\n\t\tif ( currentTest.usedAsync === true && currentTest.semaphore === 0 ) {\n\t\t\tcurrentTest.pushFailure( \"Assertion after the final `assert.async` was resolved\",\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\n\t\t\t// Allow this assertion to continue running anyway...\n\t\t}\n\n\t\tif ( !( assert instanceof Assert ) ) {\n\t\t\tassert = currentTest.assert;\n\t\t}\n\n\t\treturn assert.test.pushResult( resultInfo );\n\t},\n\n\tok: function( result, message ) {\n\t\tmessage = message || ( result ? \"okay\" : \"failed, expected argument to be truthy, was: \" +\n\t\t\tQUnit.dump.parse( result ) );\n\t\tthis.pushResult( {\n\t\t\tresult: !!result,\n\t\t\tactual: result,\n\t\t\texpected: true,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotOk: function( result, message ) {\n\t\tmessage = message || ( !result ? \"okay\" : \"failed, expected argument to be falsy, was: \" +\n\t\t\tQUnit.dump.parse( result ) );\n\t\tthis.pushResult( {\n\t\t\tresult: !result,\n\t\t\tactual: result,\n\t\t\texpected: false,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tequal: function( actual, expected, message ) {\n\t\t/*jshint eqeqeq:false */\n\t\tthis.pushResult( {\n\t\t\tresult: expected == actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotEqual: function( actual, expected, message ) {\n\t\t/*jshint eqeqeq:false */\n\t\tthis.pushResult( {\n\t\t\tresult: expected != actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tpropEqual: function( actual, expected, message ) {\n\t\tactual = objectValues( actual );\n\t\texpected = objectValues( expected );\n\t\tthis.pushResult( {\n\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotPropEqual: function( actual, expected, message ) {\n\t\tactual = objectValues( actual );\n\t\texpected = objectValues( expected );\n\t\tthis.pushResult( {\n\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tdeepEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotDeepEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tstrictEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: expected === actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotStrictEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: expected !== actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\t\"throws\": function( block, expected, message ) {\n\t\tvar actual, expectedType,\n\t\t\texpectedOutput = expected,\n\t\t\tok = false,\n\t\t\tcurrentTest = ( this instanceof Assert && this.test ) || QUnit.config.current;\n\n\t\t// 'expected' is optional unless doing string comparison\n\t\tif ( message == null && typeof expected === \"string\" ) {\n\t\t\tmessage = expected;\n\t\t\texpected = null;\n\t\t}\n\n\t\tcurrentTest.ignoreGlobalErrors = true;\n\t\ttry {\n\t\t\tblock.call( currentTest.testEnvironment );\n\t\t} catch ( e ) {\n\t\t\tactual = e;\n\t\t}\n\t\tcurrentTest.ignoreGlobalErrors = false;\n\n\t\tif ( actual ) {\n\t\t\texpectedType = QUnit.objectType( expected );\n\n\t\t\t// We don't want to validate thrown error\n\t\t\tif ( !expected ) {\n\t\t\t\tok = true;\n\t\t\t\texpectedOutput = null;\n\n\t\t\t// Expected is a regexp\n\t\t\t} else if ( expectedType === \"regexp\" ) {\n\t\t\t\tok = expected.test( errorString( actual ) );\n\n\t\t\t// Expected is a string\n\t\t\t} else if ( expectedType === \"string\" ) {\n\t\t\t\tok = expected === errorString( actual );\n\n\t\t\t// Expected is a constructor, maybe an Error constructor\n\t\t\t} else if ( expectedType === \"function\" && actual instanceof expected ) {\n\t\t\t\tok = true;\n\n\t\t\t// Expected is an Error object\n\t\t\t} else if ( expectedType === \"object\" ) {\n\t\t\t\tok = actual instanceof expected.constructor &&\n\t\t\t\t\tactual.name === expected.name &&\n\t\t\t\t\tactual.message === expected.message;\n\n\t\t\t// Expected is a validation function which returns true if validation passed\n\t\t\t} else if ( expectedType === \"function\" && expected.call( {}, actual ) === true ) {\n\t\t\t\texpectedOutput = null;\n\t\t\t\tok = true;\n\t\t\t}\n\t\t}\n\n\t\tcurrentTest.assert.pushResult( {\n\t\t\tresult: ok,\n\t\t\tactual: actual,\n\t\t\texpected: expectedOutput,\n\t\t\tmessage: message\n\t\t} );\n\t}\n};\n\n// Provide an alternative to assert.throws(), for environments that consider throws a reserved word\n// Known to us are: Closure Compiler, Narwhal\n( function() {\n\t/*jshint sub:true */\n\tAssert.prototype.raises = Assert.prototype [ \"throws\" ]; //jscs:ignore requireDotNotation\n}() );\n\nfunction errorString( error ) {\n\tvar name, message,\n\t\tresultErrorString = error.toString();\n\tif ( resultErrorString.substring( 0, 7 ) === \"[object\" ) {\n\t\tname = error.name ? error.name.toString() : \"Error\";\n\t\tmessage = error.message ? error.message.toString() : \"\";\n\t\tif ( name && message ) {\n\t\t\treturn name + \": \" + message;\n\t\t} else if ( name ) {\n\t\t\treturn name;\n\t\t} else if ( message ) {\n\t\t\treturn message;\n\t\t} else {\n\t\t\treturn \"Error\";\n\t\t}\n\t} else {\n\t\treturn resultErrorString;\n\t}\n}\n\n// Test for equality any JavaScript type.\n// Author: Philippe Rathé <prathe@gmail.com>\nQUnit.equiv = ( function() {\n\n\t// Stack to decide between skip/abort functions\n\tvar callers = [];\n\n\t// Stack to avoiding loops from circular referencing\n\tvar parents = [];\n\tvar parentsB = [];\n\n\tvar getProto = Object.getPrototypeOf || function( obj ) {\n\n\t\t/*jshint proto: true */\n\t\treturn obj.__proto__;\n\t};\n\n\tfunction useStrictEquality( b, a ) {\n\n\t\t// To catch short annotation VS 'new' annotation of a declaration. e.g.:\n\t\t// `var i = 1;`\n\t\t// `var j = new Number(1);`\n\t\tif ( typeof a === \"object\" ) {\n\t\t\ta = a.valueOf();\n\t\t}\n\t\tif ( typeof b === \"object\" ) {\n\t\t\tb = b.valueOf();\n\t\t}\n\n\t\treturn a === b;\n\t}\n\n\tfunction compareConstructors( a, b ) {\n\t\tvar protoA = getProto( a );\n\t\tvar protoB = getProto( b );\n\n\t\t// Comparing constructors is more strict than using `instanceof`\n\t\tif ( a.constructor === b.constructor ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ref #851\n\t\t// If the obj prototype descends from a null constructor, treat it\n\t\t// as a null prototype.\n\t\tif ( protoA && protoA.constructor === null ) {\n\t\t\tprotoA = null;\n\t\t}\n\t\tif ( protoB && protoB.constructor === null ) {\n\t\t\tprotoB = null;\n\t\t}\n\n\t\t// Allow objects with no prototype to be equivalent to\n\t\t// objects with Object as their constructor.\n\t\tif ( ( protoA === null && protoB === Object.prototype ) ||\n\t\t\t\t( protoB === null && protoA === Object.prototype ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction getRegExpFlags( regexp ) {\n\t\treturn \"flags\" in regexp ? regexp.flags : regexp.toString().match( /[gimuy]*$/ )[ 0 ];\n\t}\n\n\tvar callbacks = {\n\t\t\"string\": useStrictEquality,\n\t\t\"boolean\": useStrictEquality,\n\t\t\"number\": useStrictEquality,\n\t\t\"null\": useStrictEquality,\n\t\t\"undefined\": useStrictEquality,\n\t\t\"symbol\": useStrictEquality,\n\t\t\"date\": useStrictEquality,\n\n\t\t\"nan\": function() {\n\t\t\treturn true;\n\t\t},\n\n\t\t\"regexp\": function( b, a ) {\n\t\t\treturn a.source === b.source &&\n\n\t\t\t\t// Include flags in the comparison\n\t\t\t\tgetRegExpFlags( a ) === getRegExpFlags( b );\n\t\t},\n\n\t\t// - skip when the property is a method of an instance (OOP)\n\t\t// - abort otherwise,\n\t\t// initial === would have catch identical references anyway\n\t\t\"function\": function() {\n\t\t\tvar caller = callers[ callers.length - 1 ];\n\t\t\treturn caller !== Object && typeof caller !== \"undefined\";\n\t\t},\n\n\t\t\"array\": function( b, a ) {\n\t\t\tvar i, j, len, loop, aCircular, bCircular;\n\n\t\t\tlen = a.length;\n\t\t\tif ( len !== b.length ) {\n\n\t\t\t\t// Safe and faster\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Track reference to avoid circular references\n\t\t\tparents.push( a );\n\t\t\tparentsB.push( b );\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tloop = false;\n\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\tparents.pop();\n\t\t\t\t\tparentsB.pop();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparents.pop();\n\t\t\tparentsB.pop();\n\t\t\treturn true;\n\t\t},\n\n\t\t\"set\": function( b, a ) {\n\t\t\tvar innerEq,\n\t\t\t\touterEq = true;\n\n\t\t\tif ( a.size !== b.size ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ta.forEach( function( aVal ) {\n\t\t\t\tinnerEq = false;\n\n\t\t\t\tb.forEach( function( bVal ) {\n\t\t\t\t\tif ( innerEquiv( bVal, aVal ) ) {\n\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\touterEq = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn outerEq;\n\t\t},\n\n\t\t\"map\": function( b, a ) {\n\t\t\tvar innerEq,\n\t\t\t\touterEq = true;\n\n\t\t\tif ( a.size !== b.size ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ta.forEach( function( aVal, aKey ) {\n\t\t\t\tinnerEq = false;\n\n\t\t\t\tb.forEach( function( bVal, bKey ) {\n\t\t\t\t\tif ( innerEquiv( [ bVal, bKey ], [ aVal, aKey ] ) ) {\n\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\touterEq = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn outerEq;\n\t\t},\n\n\t\t\"object\": function( b, a ) {\n\t\t\tvar i, j, loop, aCircular, bCircular;\n\n\t\t\t// Default to true\n\t\t\tvar eq = true;\n\t\t\tvar aProperties = [];\n\t\t\tvar bProperties = [];\n\n\t\t\tif ( compareConstructors( a, b ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Stack constructor before traversing properties\n\t\t\tcallers.push( a.constructor );\n\n\t\t\t// Track reference to avoid circular references\n\t\t\tparents.push( a );\n\t\t\tparentsB.push( b );\n\n\t\t\t// Be strict: don't ensure hasOwnProperty and go deep\n\t\t\tfor ( i in a ) {\n\t\t\t\tloop = false;\n\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teq = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\taProperties.push( i );\n\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\teq = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparents.pop();\n\t\t\tparentsB.pop();\n\n\t\t\t// Unstack, we are done\n\t\t\tcallers.pop();\n\n\t\t\tfor ( i in b ) {\n\n\t\t\t\t// Collect b's properties\n\t\t\t\tbProperties.push( i );\n\t\t\t}\n\n\t\t\t// Ensures identical properties name\n\t\t\treturn eq && innerEquiv( aProperties.sort(), bProperties.sort() );\n\t\t}\n\t};\n\n\tfunction typeEquiv( a, b ) {\n\t\tvar type = QUnit.objectType( a );\n\t\treturn QUnit.objectType( b ) === type && callbacks[ type ]( b, a );\n\t}\n\n\t// The real equiv function\n\tfunction innerEquiv( a, b ) {\n\n\t\t// We're done when there's nothing more to compare\n\t\tif ( arguments.length < 2 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Require type-specific equality\n\t\treturn ( a === b || typeEquiv( a, b ) ) &&\n\n\t\t\t// ...across all consecutive argument pairs\n\t\t\t( arguments.length === 2 || innerEquiv.apply( this, [].slice.call( arguments, 1 ) ) );\n\t}\n\n\treturn innerEquiv;\n}() );\n\n// Based on jsDump by Ariel Flesler\n// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html\nQUnit.dump = ( function() {\n\tfunction quote( str ) {\n\t\treturn \"\\\"\" + str.toString().replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\"/g, \"\\\\\\\"\" ) + \"\\\"\";\n\t}\n\tfunction literal( o ) {\n\t\treturn o + \"\";\n\t}\n\tfunction join( pre, arr, post ) {\n\t\tvar s = dump.separator(),\n\t\t\tbase = dump.indent(),\n\t\t\tinner = dump.indent( 1 );\n\t\tif ( arr.join ) {\n\t\t\tarr = arr.join( \",\" + s + inner );\n\t\t}\n\t\tif ( !arr ) {\n\t\t\treturn pre + post;\n\t\t}\n\t\treturn [ pre, inner + arr, base + post ].join( s );\n\t}\n\tfunction array( arr, stack ) {\n\t\tvar i = arr.length,\n\t\t\tret = new Array( i );\n\n\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\treturn \"[object Array]\";\n\t\t}\n\n\t\tthis.up();\n\t\twhile ( i-- ) {\n\t\t\tret[ i ] = this.parse( arr[ i ], undefined, stack );\n\t\t}\n\t\tthis.down();\n\t\treturn join( \"[\", ret, \"]\" );\n\t}\n\n\tvar reName = /^function (\\w+)/,\n\t\tdump = {\n\n\t\t\t// The objType is used mostly internally, you can fix a (custom) type in advance\n\t\t\tparse: function( obj, objType, stack ) {\n\t\t\t\tstack = stack || [];\n\t\t\t\tvar res, parser, parserType,\n\t\t\t\t\tinStack = inArray( obj, stack );\n\n\t\t\t\tif ( inStack !== -1 ) {\n\t\t\t\t\treturn \"recursion(\" + ( inStack - stack.length ) + \")\";\n\t\t\t\t}\n\n\t\t\t\tobjType = objType || this.typeOf( obj  );\n\t\t\t\tparser = this.parsers[ objType ];\n\t\t\t\tparserType = typeof parser;\n\n\t\t\t\tif ( parserType === \"function\" ) {\n\t\t\t\t\tstack.push( obj );\n\t\t\t\t\tres = parser.call( this, obj, stack );\n\t\t\t\t\tstack.pop();\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t\treturn ( parserType === \"string\" ) ? parser : this.parsers.error;\n\t\t\t},\n\t\t\ttypeOf: function( obj ) {\n\t\t\t\tvar type;\n\t\t\t\tif ( obj === null ) {\n\t\t\t\t\ttype = \"null\";\n\t\t\t\t} else if ( typeof obj === \"undefined\" ) {\n\t\t\t\t\ttype = \"undefined\";\n\t\t\t\t} else if ( QUnit.is( \"regexp\", obj ) ) {\n\t\t\t\t\ttype = \"regexp\";\n\t\t\t\t} else if ( QUnit.is( \"date\", obj ) ) {\n\t\t\t\t\ttype = \"date\";\n\t\t\t\t} else if ( QUnit.is( \"function\", obj ) ) {\n\t\t\t\t\ttype = \"function\";\n\t\t\t\t} else if ( obj.setInterval !== undefined &&\n\t\t\t\t\t\tobj.document !== undefined &&\n\t\t\t\t\t\tobj.nodeType === undefined ) {\n\t\t\t\t\ttype = \"window\";\n\t\t\t\t} else if ( obj.nodeType === 9 ) {\n\t\t\t\t\ttype = \"document\";\n\t\t\t\t} else if ( obj.nodeType ) {\n\t\t\t\t\ttype = \"node\";\n\t\t\t\t} else if (\n\n\t\t\t\t\t// Native arrays\n\t\t\t\t\ttoString.call( obj ) === \"[object Array]\" ||\n\n\t\t\t\t\t// NodeList objects\n\t\t\t\t\t( typeof obj.length === \"number\" && obj.item !== undefined &&\n\t\t\t\t\t( obj.length ? obj.item( 0 ) === obj[ 0 ] : ( obj.item( 0 ) === null &&\n\t\t\t\t\tobj[ 0 ] === undefined ) ) )\n\t\t\t\t) {\n\t\t\t\t\ttype = \"array\";\n\t\t\t\t} else if ( obj.constructor === Error.prototype.constructor ) {\n\t\t\t\t\ttype = \"error\";\n\t\t\t\t} else {\n\t\t\t\t\ttype = typeof obj;\n\t\t\t\t}\n\t\t\t\treturn type;\n\t\t\t},\n\n\t\t\tseparator: function() {\n\t\t\t\treturn this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&#160;\" : \" \";\n\t\t\t},\n\n\t\t\t// Extra can be a number, shortcut for increasing-calling-decreasing\n\t\t\tindent: function( extra ) {\n\t\t\t\tif ( !this.multiline ) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\tvar chr = this.indentChar;\n\t\t\t\tif ( this.HTML ) {\n\t\t\t\t\tchr = chr.replace( /\\t/g, \"   \" ).replace( / /g, \"&#160;\" );\n\t\t\t\t}\n\t\t\t\treturn new Array( this.depth + ( extra || 0 ) ).join( chr );\n\t\t\t},\n\t\t\tup: function( a ) {\n\t\t\t\tthis.depth += a || 1;\n\t\t\t},\n\t\t\tdown: function( a ) {\n\t\t\t\tthis.depth -= a || 1;\n\t\t\t},\n\t\t\tsetParser: function( name, parser ) {\n\t\t\t\tthis.parsers[ name ] = parser;\n\t\t\t},\n\n\t\t\t// The next 3 are exposed so you can use them\n\t\t\tquote: quote,\n\t\t\tliteral: literal,\n\t\t\tjoin: join,\n\t\t\tdepth: 1,\n\t\t\tmaxDepth: QUnit.config.maxDepth,\n\n\t\t\t// This is the list of parsers, to modify them, use dump.setParser\n\t\t\tparsers: {\n\t\t\t\twindow: \"[Window]\",\n\t\t\t\tdocument: \"[Document]\",\n\t\t\t\terror: function( error ) {\n\t\t\t\t\treturn \"Error(\\\"\" + error.message + \"\\\")\";\n\t\t\t\t},\n\t\t\t\tunknown: \"[Unknown]\",\n\t\t\t\t\"null\": \"null\",\n\t\t\t\t\"undefined\": \"undefined\",\n\t\t\t\t\"function\": function( fn ) {\n\t\t\t\t\tvar ret = \"function\",\n\n\t\t\t\t\t\t// Functions never have name in IE\n\t\t\t\t\t\tname = \"name\" in fn ? fn.name : ( reName.exec( fn ) || [] )[ 1 ];\n\n\t\t\t\t\tif ( name ) {\n\t\t\t\t\t\tret += \" \" + name;\n\t\t\t\t\t}\n\t\t\t\t\tret += \"(\";\n\n\t\t\t\t\tret = [ ret, dump.parse( fn, \"functionArgs\" ), \"){\" ].join( \"\" );\n\t\t\t\t\treturn join( ret, dump.parse( fn, \"functionCode\" ), \"}\" );\n\t\t\t\t},\n\t\t\t\tarray: array,\n\t\t\t\tnodelist: array,\n\t\t\t\t\"arguments\": array,\n\t\t\t\tobject: function( map, stack ) {\n\t\t\t\t\tvar keys, key, val, i, nonEnumerableProperties,\n\t\t\t\t\t\tret = [];\n\n\t\t\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\t\t\treturn \"[object Object]\";\n\t\t\t\t\t}\n\n\t\t\t\t\tdump.up();\n\t\t\t\t\tkeys = [];\n\t\t\t\t\tfor ( key in map ) {\n\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Some properties are not always enumerable on Error objects.\n\t\t\t\t\tnonEnumerableProperties = [ \"message\", \"name\" ];\n\t\t\t\t\tfor ( i in nonEnumerableProperties ) {\n\t\t\t\t\t\tkey = nonEnumerableProperties[ i ];\n\t\t\t\t\t\tif ( key in map && inArray( key, keys ) < 0 ) {\n\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tkeys.sort();\n\t\t\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\t\tval = map[ key ];\n\t\t\t\t\t\tret.push( dump.parse( key, \"key\" ) + \": \" +\n\t\t\t\t\t\t\tdump.parse( val, undefined, stack ) );\n\t\t\t\t\t}\n\t\t\t\t\tdump.down();\n\t\t\t\t\treturn join( \"{\", ret, \"}\" );\n\t\t\t\t},\n\t\t\t\tnode: function( node ) {\n\t\t\t\t\tvar len, i, val,\n\t\t\t\t\t\topen = dump.HTML ? \"&lt;\" : \"<\",\n\t\t\t\t\t\tclose = dump.HTML ? \"&gt;\" : \">\",\n\t\t\t\t\t\ttag = node.nodeName.toLowerCase(),\n\t\t\t\t\t\tret = open + tag,\n\t\t\t\t\t\tattrs = node.attributes;\n\n\t\t\t\t\tif ( attrs ) {\n\t\t\t\t\t\tfor ( i = 0, len = attrs.length; i < len; i++ ) {\n\t\t\t\t\t\t\tval = attrs[ i ].nodeValue;\n\n\t\t\t\t\t\t\t// IE6 includes all attributes in .attributes, even ones not explicitly\n\t\t\t\t\t\t\t// set. Those have values like undefined, null, 0, false, \"\" or\n\t\t\t\t\t\t\t// \"inherit\".\n\t\t\t\t\t\t\tif ( val && val !== \"inherit\" ) {\n\t\t\t\t\t\t\t\tret += \" \" + attrs[ i ].nodeName + \"=\" +\n\t\t\t\t\t\t\t\t\tdump.parse( val, \"attribute\" );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tret += close;\n\n\t\t\t\t\t// Show content of TextNode or CDATASection\n\t\t\t\t\tif ( node.nodeType === 3 || node.nodeType === 4 ) {\n\t\t\t\t\t\tret += node.nodeValue;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ret + open + \"/\" + tag + close;\n\t\t\t\t},\n\n\t\t\t\t// Function calls it internally, it's the arguments part of the function\n\t\t\t\tfunctionArgs: function( fn ) {\n\t\t\t\t\tvar args,\n\t\t\t\t\t\tl = fn.length;\n\n\t\t\t\t\tif ( !l ) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\targs = new Array( l );\n\t\t\t\t\twhile ( l-- ) {\n\n\t\t\t\t\t\t// 97 is 'a'\n\t\t\t\t\t\targs[ l ] = String.fromCharCode( 97 + l );\n\t\t\t\t\t}\n\t\t\t\t\treturn \" \" + args.join( \", \" ) + \" \";\n\t\t\t\t},\n\n\t\t\t\t// Object calls it internally, the key part of an item in a map\n\t\t\t\tkey: quote,\n\n\t\t\t\t// Function calls it internally, it's the content of the function\n\t\t\t\tfunctionCode: \"[code]\",\n\n\t\t\t\t// Node calls it internally, it's a html attribute value\n\t\t\t\tattribute: quote,\n\t\t\t\tstring: quote,\n\t\t\t\tdate: quote,\n\t\t\t\tregexp: literal,\n\t\t\t\tnumber: literal,\n\t\t\t\t\"boolean\": literal\n\t\t\t},\n\n\t\t\t// If true, entities are escaped ( <, >, \\t, space and \\n )\n\t\t\tHTML: false,\n\n\t\t\t// Indentation unit\n\t\t\tindentChar: \"  \",\n\n\t\t\t// If true, items in a collection, are separated by a \\n, else just a space.\n\t\t\tmultiline: true\n\t\t};\n\n\treturn dump;\n}() );\n\n// Back compat\nQUnit.jsDump = QUnit.dump;\n\n// Deprecated\n// Extend assert methods to QUnit for Backwards compatibility\n( function() {\n\tvar i,\n\t\tassertions = Assert.prototype;\n\n\tfunction applyCurrent( current ) {\n\t\treturn function() {\n\t\t\tvar assert = new Assert( QUnit.config.current );\n\t\t\tcurrent.apply( assert, arguments );\n\t\t};\n\t}\n\n\tfor ( i in assertions ) {\n\t\tQUnit[ i ] = applyCurrent( assertions[ i ] );\n\t}\n}() );\n\n// For browser, export only select globals\nif ( defined.document ) {\n\n\t( function() {\n\t\tvar i, l,\n\t\t\tkeys = [\n\t\t\t\t\"test\",\n\t\t\t\t\"module\",\n\t\t\t\t\"expect\",\n\t\t\t\t\"asyncTest\",\n\t\t\t\t\"start\",\n\t\t\t\t\"stop\",\n\t\t\t\t\"ok\",\n\t\t\t\t\"notOk\",\n\t\t\t\t\"equal\",\n\t\t\t\t\"notEqual\",\n\t\t\t\t\"propEqual\",\n\t\t\t\t\"notPropEqual\",\n\t\t\t\t\"deepEqual\",\n\t\t\t\t\"notDeepEqual\",\n\t\t\t\t\"strictEqual\",\n\t\t\t\t\"notStrictEqual\",\n\t\t\t\t\"throws\",\n\t\t\t\t\"raises\"\n\t\t\t];\n\n\t\tfor ( i = 0, l = keys.length; i < l; i++ ) {\n\t\t\twindow[ keys[ i ] ] = QUnit[ keys[ i ] ];\n\t\t}\n\t}() );\n\n\twindow.QUnit = QUnit;\n}\n\n// For nodejs\nif ( typeof module !== \"undefined\" && module && module.exports ) {\n\tmodule.exports = QUnit;\n\n\t// For consistency with CommonJS environments' exports\n\tmodule.exports.QUnit = QUnit;\n}\n\n// For CommonJS with exports, but without module.exports, like Rhino\nif ( typeof exports !== \"undefined\" && exports ) {\n\texports.QUnit = QUnit;\n}\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( function() {\n\t\treturn QUnit;\n\t} );\n\tQUnit.config.autostart = false;\n}\n\n// Get a reference to the global object, like window in browsers\n}( ( function() {\n\treturn this;\n}() ) ) );\n\n( function() {\n\n// Only interact with URLs via window.location\nvar location = typeof window !== \"undefined\" && window.location;\nif ( !location ) {\n\treturn;\n}\n\nvar urlParams = getUrlParams();\n\nQUnit.urlParams = urlParams;\n\n// Match module/test by inclusion in an array\nQUnit.config.moduleId = [].concat( urlParams.moduleId || [] );\nQUnit.config.testId = [].concat( urlParams.testId || [] );\n\n// Exact case-insensitive match of the module name\nQUnit.config.module = urlParams.module;\n\n// Regular expression or case-insenstive substring match against \"moduleName: testName\"\nQUnit.config.filter = urlParams.filter;\n\n// Test order randomization\nif ( urlParams.seed === true ) {\n\n\t// Generate a random seed if the option is specified without a value\n\tQUnit.config.seed = Math.random().toString( 36 ).slice( 2 );\n} else if ( urlParams.seed ) {\n\tQUnit.config.seed = urlParams.seed;\n}\n\n// Add URL-parameter-mapped config values with UI form rendering data\nQUnit.config.urlConfig.push(\n\t{\n\t\tid: \"hidepassed\",\n\t\tlabel: \"Hide passed tests\",\n\t\ttooltip: \"Only show tests and assertions that fail. Stored as query-strings.\"\n\t},\n\t{\n\t\tid: \"noglobals\",\n\t\tlabel: \"Check for Globals\",\n\t\ttooltip: \"Enabling this will test if any test introduces new properties on the \" +\n\t\t\t\"global object (`window` in Browsers). Stored as query-strings.\"\n\t},\n\t{\n\t\tid: \"notrycatch\",\n\t\tlabel: \"No try-catch\",\n\t\ttooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging \" +\n\t\t\t\"exceptions in IE reasonable. Stored as query-strings.\"\n\t}\n);\n\nQUnit.begin( function() {\n\tvar i, option,\n\t\turlConfig = QUnit.config.urlConfig;\n\n\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\n\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\toption = QUnit.config.urlConfig[ i ];\n\t\tif ( typeof option !== \"string\" ) {\n\t\t\toption = option.id;\n\t\t}\n\n\t\tif ( QUnit.config[ option ] === undefined ) {\n\t\t\tQUnit.config[ option ] = urlParams[ option ];\n\t\t}\n\t}\n} );\n\nfunction getUrlParams() {\n\tvar i, param, name, value;\n\tvar urlParams = {};\n\tvar params = location.search.slice( 1 ).split( \"&\" );\n\tvar length = params.length;\n\n\tfor ( i = 0; i < length; i++ ) {\n\t\tif ( params[ i ] ) {\n\t\t\tparam = params[ i ].split( \"=\" );\n\t\t\tname = decodeURIComponent( param[ 0 ] );\n\n\t\t\t// Allow just a key to turn on a flag, e.g., test.html?noglobals\n\t\t\tvalue = param.length === 1 ||\n\t\t\t\tdecodeURIComponent( param.slice( 1 ).join( \"=\" ) ) ;\n\t\t\tif ( urlParams[ name ] ) {\n\t\t\t\turlParams[ name ] = [].concat( urlParams[ name ], value );\n\t\t\t} else {\n\t\t\t\turlParams[ name ] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn urlParams;\n}\n\n// Don't load the HTML Reporter on non-browser environments\nif ( typeof window === \"undefined\" || !window.document ) {\n\treturn;\n}\n\n// Deprecated QUnit.init - Ref #530\n// Re-initialize the configuration options\nQUnit.init = function() {\n\tvar config = QUnit.config;\n\n\tconfig.stats = { all: 0, bad: 0 };\n\tconfig.moduleStats = { all: 0, bad: 0 };\n\tconfig.started = 0;\n\tconfig.updateRate = 1000;\n\tconfig.blocking = false;\n\tconfig.autostart = true;\n\tconfig.autorun = false;\n\tconfig.filter = \"\";\n\tconfig.queue = [];\n\n\tappendInterface();\n};\n\nvar config = QUnit.config,\n\tdocument = window.document,\n\tcollapseNext = false,\n\thasOwn = Object.prototype.hasOwnProperty,\n\tunfilteredUrl = setUrl( { filter: undefined, module: undefined,\n\t\tmoduleId: undefined, testId: undefined } ),\n\tdefined = {\n\t\tsessionStorage: ( function() {\n\t\t\tvar x = \"qunit-test-string\";\n\t\t\ttry {\n\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\treturn true;\n\t\t\t} catch ( e ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}() )\n\t},\n\tmodulesList = [];\n\n/**\n* Escape text for attribute or text content.\n*/\nfunction escapeText( s ) {\n\tif ( !s ) {\n\t\treturn \"\";\n\t}\n\ts = s + \"\";\n\n\t// Both single quotes and double quotes (for attributes)\n\treturn s.replace( /['\"<>&]/g, function( s ) {\n\t\tswitch ( s ) {\n\t\tcase \"'\":\n\t\t\treturn \"&#039;\";\n\t\tcase \"\\\"\":\n\t\t\treturn \"&quot;\";\n\t\tcase \"<\":\n\t\t\treturn \"&lt;\";\n\t\tcase \">\":\n\t\t\treturn \"&gt;\";\n\t\tcase \"&\":\n\t\t\treturn \"&amp;\";\n\t\t}\n\t} );\n}\n\n/**\n * @param {HTMLElement} elem\n * @param {string} type\n * @param {Function} fn\n */\nfunction addEvent( elem, type, fn ) {\n\tif ( elem.addEventListener ) {\n\n\t\t// Standards-based browsers\n\t\telem.addEventListener( type, fn, false );\n\t} else if ( elem.attachEvent ) {\n\n\t\t// Support: IE <9\n\t\telem.attachEvent( \"on\" + type, function() {\n\t\t\tvar event = window.event;\n\t\t\tif ( !event.target ) {\n\t\t\t\tevent.target = event.srcElement || document;\n\t\t\t}\n\n\t\t\tfn.call( elem, event );\n\t\t} );\n\t}\n}\n\n/**\n * @param {Array|NodeList} elems\n * @param {string} type\n * @param {Function} fn\n */\nfunction addEvents( elems, type, fn ) {\n\tvar i = elems.length;\n\twhile ( i-- ) {\n\t\taddEvent( elems[ i ], type, fn );\n\t}\n}\n\nfunction hasClass( elem, name ) {\n\treturn ( \" \" + elem.className + \" \" ).indexOf( \" \" + name + \" \" ) >= 0;\n}\n\nfunction addClass( elem, name ) {\n\tif ( !hasClass( elem, name ) ) {\n\t\telem.className += ( elem.className ? \" \" : \"\" ) + name;\n\t}\n}\n\nfunction toggleClass( elem, name, force ) {\n\tif ( force || typeof force === \"undefined\" && !hasClass( elem, name ) ) {\n\t\taddClass( elem, name );\n\t} else {\n\t\tremoveClass( elem, name );\n\t}\n}\n\nfunction removeClass( elem, name ) {\n\tvar set = \" \" + elem.className + \" \";\n\n\t// Class name may appear multiple times\n\twhile ( set.indexOf( \" \" + name + \" \" ) >= 0 ) {\n\t\tset = set.replace( \" \" + name + \" \", \" \" );\n\t}\n\n\t// Trim for prettiness\n\telem.className = typeof set.trim === \"function\" ? set.trim() : set.replace( /^\\s+|\\s+$/g, \"\" );\n}\n\nfunction id( name ) {\n\treturn document.getElementById && document.getElementById( name );\n}\n\nfunction getUrlConfigHtml() {\n\tvar i, j, val,\n\t\tescaped, escapedTooltip,\n\t\tselection = false,\n\t\turlConfig = config.urlConfig,\n\t\turlConfigHtml = \"\";\n\n\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\n\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\tval = config.urlConfig[ i ];\n\t\tif ( typeof val === \"string\" ) {\n\t\t\tval = {\n\t\t\t\tid: val,\n\t\t\t\tlabel: val\n\t\t\t};\n\t\t}\n\n\t\tescaped = escapeText( val.id );\n\t\tescapedTooltip = escapeText( val.tooltip );\n\n\t\tif ( !val.value || typeof val.value === \"string\" ) {\n\t\t\turlConfigHtml += \"<input id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' name='\" + escaped + \"' type='checkbox'\" +\n\t\t\t\t( val.value ? \" value='\" + escapeText( val.value ) + \"'\" : \"\" ) +\n\t\t\t\t( config[ val.id ] ? \" checked='checked'\" : \"\" ) +\n\t\t\t\t\" title='\" + escapedTooltip + \"' /><label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label + \"</label>\";\n\t\t} else {\n\t\t\turlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label +\n\t\t\t\t\": </label><select id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' name='\" + escaped + \"' title='\" + escapedTooltip + \"'><option></option>\";\n\n\t\t\tif ( QUnit.is( \"array\", val.value ) ) {\n\t\t\t\tfor ( j = 0; j < val.value.length; j++ ) {\n\t\t\t\t\tescaped = escapeText( val.value[ j ] );\n\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped + \"'\" +\n\t\t\t\t\t\t( config[ val.id ] === val.value[ j ] ?\n\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\">\" + escaped + \"</option>\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( j in val.value ) {\n\t\t\t\t\tif ( hasOwn.call( val.value, j ) ) {\n\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escapeText( j ) + \"'\" +\n\t\t\t\t\t\t\t( config[ val.id ] === j ?\n\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\">\" + escapeText( val.value[ j ] ) + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( config[ val.id ] && !selection ) {\n\t\t\t\tescaped = escapeText( config[ val.id ] );\n\t\t\t\turlConfigHtml += \"<option value='\" + escaped +\n\t\t\t\t\t\"' selected='selected' disabled='disabled'>\" + escaped + \"</option>\";\n\t\t\t}\n\t\t\turlConfigHtml += \"</select>\";\n\t\t}\n\t}\n\n\treturn urlConfigHtml;\n}\n\n// Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.\n// Updates the URL with the new state of `config.urlConfig` values.\nfunction toolbarChanged() {\n\tvar updatedUrl, value, tests,\n\t\tfield = this,\n\t\tparams = {};\n\n\t// Detect if field is a select menu or a checkbox\n\tif ( \"selectedIndex\" in field ) {\n\t\tvalue = field.options[ field.selectedIndex ].value || undefined;\n\t} else {\n\t\tvalue = field.checked ? ( field.defaultValue || true ) : undefined;\n\t}\n\n\tparams[ field.name ] = value;\n\tupdatedUrl = setUrl( params );\n\n\t// Check if we can apply the change without a page refresh\n\tif ( \"hidepassed\" === field.name && \"replaceState\" in window.history ) {\n\t\tQUnit.urlParams[ field.name ] = value;\n\t\tconfig[ field.name ] = value || false;\n\t\ttests = id( \"qunit-tests\" );\n\t\tif ( tests ) {\n\t\t\ttoggleClass( tests, \"hidepass\", value || false );\n\t\t}\n\t\twindow.history.replaceState( null, \"\", updatedUrl );\n\t} else {\n\t\twindow.location = updatedUrl;\n\t}\n}\n\nfunction setUrl( params ) {\n\tvar key, arrValue, i,\n\t\tquerystring = \"?\",\n\t\tlocation = window.location;\n\n\tparams = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\n\n\tfor ( key in params ) {\n\n\t\t// Skip inherited or undefined properties\n\t\tif ( hasOwn.call( params, key ) && params[ key ] !== undefined ) {\n\n\t\t\t// Output a parameter for each value of this key (but usually just one)\n\t\t\tarrValue = [].concat( params[ key ] );\n\t\t\tfor ( i = 0; i < arrValue.length; i++ ) {\n\t\t\t\tquerystring += encodeURIComponent( key );\n\t\t\t\tif ( arrValue[ i ] !== true ) {\n\t\t\t\t\tquerystring += \"=\" + encodeURIComponent( arrValue[ i ] );\n\t\t\t\t}\n\t\t\t\tquerystring += \"&\";\n\t\t\t}\n\t\t}\n\t}\n\treturn location.protocol + \"//\" + location.host +\n\t\tlocation.pathname + querystring.slice( 0, -1 );\n}\n\nfunction applyUrlParams() {\n\tvar selectedModule,\n\t\tmodulesList = id( \"qunit-modulefilter\" ),\n\t\tfilter = id( \"qunit-filter-input\" ).value;\n\n\tselectedModule = modulesList ?\n\t\tdecodeURIComponent( modulesList.options[ modulesList.selectedIndex ].value ) :\n\t\tundefined;\n\n\twindow.location = setUrl( {\n\t\tmodule: ( selectedModule === \"\" ) ? undefined : selectedModule,\n\t\tfilter: ( filter === \"\" ) ? undefined : filter,\n\n\t\t// Remove moduleId and testId filters\n\t\tmoduleId: undefined,\n\t\ttestId: undefined\n\t} );\n}\n\nfunction toolbarUrlConfigContainer() {\n\tvar urlConfigContainer = document.createElement( \"span\" );\n\n\turlConfigContainer.innerHTML = getUrlConfigHtml();\n\taddClass( urlConfigContainer, \"qunit-url-config\" );\n\n\t// For oldIE support:\n\t// * Add handlers to the individual elements instead of the container\n\t// * Use \"click\" instead of \"change\" for checkboxes\n\taddEvents( urlConfigContainer.getElementsByTagName( \"input\" ), \"click\", toolbarChanged );\n\taddEvents( urlConfigContainer.getElementsByTagName( \"select\" ), \"change\", toolbarChanged );\n\n\treturn urlConfigContainer;\n}\n\nfunction toolbarLooseFilter() {\n\tvar filter = document.createElement( \"form\" ),\n\t\tlabel = document.createElement( \"label\" ),\n\t\tinput = document.createElement( \"input\" ),\n\t\tbutton = document.createElement( \"button\" );\n\n\taddClass( filter, \"qunit-filter\" );\n\n\tlabel.innerHTML = \"Filter: \";\n\n\tinput.type = \"text\";\n\tinput.value = config.filter || \"\";\n\tinput.name = \"filter\";\n\tinput.id = \"qunit-filter-input\";\n\n\tbutton.innerHTML = \"Go\";\n\n\tlabel.appendChild( input );\n\n\tfilter.appendChild( label );\n\tfilter.appendChild( button );\n\taddEvent( filter, \"submit\", function( ev ) {\n\t\tapplyUrlParams();\n\n\t\tif ( ev && ev.preventDefault ) {\n\t\t\tev.preventDefault();\n\t\t}\n\n\t\treturn false;\n\t} );\n\n\treturn filter;\n}\n\nfunction toolbarModuleFilterHtml() {\n\tvar i,\n\t\tmoduleFilterHtml = \"\";\n\n\tif ( !modulesList.length ) {\n\t\treturn false;\n\t}\n\n\tmoduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label>\" +\n\t\t\"<select id='qunit-modulefilter' name='modulefilter'><option value='' \" +\n\t\t( QUnit.urlParams.module === undefined ? \"selected='selected'\" : \"\" ) +\n\t\t\">< All Modules ></option>\";\n\n\tfor ( i = 0; i < modulesList.length; i++ ) {\n\t\tmoduleFilterHtml += \"<option value='\" +\n\t\t\tescapeText( encodeURIComponent( modulesList[ i ] ) ) + \"' \" +\n\t\t\t( QUnit.urlParams.module === modulesList[ i ] ? \"selected='selected'\" : \"\" ) +\n\t\t\t\">\" + escapeText( modulesList[ i ] ) + \"</option>\";\n\t}\n\tmoduleFilterHtml += \"</select>\";\n\n\treturn moduleFilterHtml;\n}\n\nfunction toolbarModuleFilter() {\n\tvar toolbar = id( \"qunit-testrunner-toolbar\" ),\n\t\tmoduleFilter = document.createElement( \"span\" ),\n\t\tmoduleFilterHtml = toolbarModuleFilterHtml();\n\n\tif ( !toolbar || !moduleFilterHtml ) {\n\t\treturn false;\n\t}\n\n\tmoduleFilter.setAttribute( \"id\", \"qunit-modulefilter-container\" );\n\tmoduleFilter.innerHTML = moduleFilterHtml;\n\n\taddEvent( moduleFilter.lastChild, \"change\", applyUrlParams );\n\n\ttoolbar.appendChild( moduleFilter );\n}\n\nfunction appendToolbar() {\n\tvar toolbar = id( \"qunit-testrunner-toolbar\" );\n\n\tif ( toolbar ) {\n\t\ttoolbar.appendChild( toolbarUrlConfigContainer() );\n\t\ttoolbar.appendChild( toolbarLooseFilter() );\n\t\ttoolbarModuleFilter();\n\t}\n}\n\nfunction appendHeader() {\n\tvar header = id( \"qunit-header\" );\n\n\tif ( header ) {\n\t\theader.innerHTML = \"<a href='\" + escapeText( unfilteredUrl ) + \"'>\" + header.innerHTML +\n\t\t\t\"</a> \";\n\t}\n}\n\nfunction appendBanner() {\n\tvar banner = id( \"qunit-banner\" );\n\n\tif ( banner ) {\n\t\tbanner.className = \"\";\n\t}\n}\n\nfunction appendTestResults() {\n\tvar tests = id( \"qunit-tests\" ),\n\t\tresult = id( \"qunit-testresult\" );\n\n\tif ( result ) {\n\t\tresult.parentNode.removeChild( result );\n\t}\n\n\tif ( tests ) {\n\t\ttests.innerHTML = \"\";\n\t\tresult = document.createElement( \"p\" );\n\t\tresult.id = \"qunit-testresult\";\n\t\tresult.className = \"result\";\n\t\ttests.parentNode.insertBefore( result, tests );\n\t\tresult.innerHTML = \"Running...<br />&#160;\";\n\t}\n}\n\nfunction storeFixture() {\n\tvar fixture = id( \"qunit-fixture\" );\n\tif ( fixture ) {\n\t\tconfig.fixture = fixture.innerHTML;\n\t}\n}\n\nfunction appendFilteredTest() {\n\tvar testId = QUnit.config.testId;\n\tif ( !testId || testId.length <= 0 ) {\n\t\treturn \"\";\n\t}\n\treturn \"<div id='qunit-filteredTest'>Rerunning selected tests: \" +\n\t\tescapeText( testId.join( \", \" ) ) +\n\t\t\" <a id='qunit-clearFilter' href='\" +\n\t\tescapeText( unfilteredUrl ) +\n\t\t\"'>Run all tests</a></div>\";\n}\n\nfunction appendUserAgent() {\n\tvar userAgent = id( \"qunit-userAgent\" );\n\n\tif ( userAgent ) {\n\t\tuserAgent.innerHTML = \"\";\n\t\tuserAgent.appendChild(\n\t\t\tdocument.createTextNode(\n\t\t\t\t\"QUnit \" + QUnit.version + \"; \" + navigator.userAgent\n\t\t\t)\n\t\t);\n\t}\n}\n\nfunction appendInterface() {\n\tvar qunit = id( \"qunit\" );\n\n\tif ( qunit ) {\n\t\tqunit.innerHTML =\n\t\t\t\"<h1 id='qunit-header'>\" + escapeText( document.title ) + \"</h1>\" +\n\t\t\t\"<h2 id='qunit-banner'></h2>\" +\n\t\t\t\"<div id='qunit-testrunner-toolbar'></div>\" +\n\t\t\tappendFilteredTest() +\n\t\t\t\"<h2 id='qunit-userAgent'></h2>\" +\n\t\t\t\"<ol id='qunit-tests'></ol>\";\n\t}\n\n\tappendHeader();\n\tappendBanner();\n\tappendTestResults();\n\tappendUserAgent();\n\tappendToolbar();\n}\n\nfunction appendTestsList( modules ) {\n\tvar i, l, x, z, test, moduleObj;\n\n\tfor ( i = 0, l = modules.length; i < l; i++ ) {\n\t\tmoduleObj = modules[ i ];\n\n\t\tfor ( x = 0, z = moduleObj.tests.length; x < z; x++ ) {\n\t\t\ttest = moduleObj.tests[ x ];\n\n\t\t\tappendTest( test.name, test.testId, moduleObj.name );\n\t\t}\n\t}\n}\n\nfunction appendTest( name, testId, moduleName ) {\n\tvar title, rerunTrigger, testBlock, assertList,\n\t\ttests = id( \"qunit-tests\" );\n\n\tif ( !tests ) {\n\t\treturn;\n\t}\n\n\ttitle = document.createElement( \"strong\" );\n\ttitle.innerHTML = getNameHtml( name, moduleName );\n\n\trerunTrigger = document.createElement( \"a\" );\n\trerunTrigger.innerHTML = \"Rerun\";\n\trerunTrigger.href = setUrl( { testId: testId } );\n\n\ttestBlock = document.createElement( \"li\" );\n\ttestBlock.appendChild( title );\n\ttestBlock.appendChild( rerunTrigger );\n\ttestBlock.id = \"qunit-test-output-\" + testId;\n\n\tassertList = document.createElement( \"ol\" );\n\tassertList.className = \"qunit-assert-list\";\n\n\ttestBlock.appendChild( assertList );\n\n\ttests.appendChild( testBlock );\n}\n\n// HTML Reporter initialization and load\nQUnit.begin( function( details ) {\n\tvar i, moduleObj, tests;\n\n\t// Sort modules by name for the picker\n\tfor ( i = 0; i < details.modules.length; i++ ) {\n\t\tmoduleObj = details.modules[ i ];\n\t\tif ( moduleObj.name ) {\n\t\t\tmodulesList.push( moduleObj.name );\n\t\t}\n\t}\n\tmodulesList.sort( function( a, b ) {\n\t\treturn a.localeCompare( b );\n\t} );\n\n\t// Capture fixture HTML from the page\n\tstoreFixture();\n\n\t// Initialize QUnit elements\n\tappendInterface();\n\tappendTestsList( details.modules );\n\ttests = id( \"qunit-tests\" );\n\tif ( tests && config.hidepassed ) {\n\t\taddClass( tests, \"hidepass\" );\n\t}\n} );\n\nQUnit.done( function( details ) {\n\tvar i, key,\n\t\tbanner = id( \"qunit-banner\" ),\n\t\ttests = id( \"qunit-tests\" ),\n\t\thtml = [\n\t\t\t\"Tests completed in \",\n\t\t\tdetails.runtime,\n\t\t\t\" milliseconds.<br />\",\n\t\t\t\"<span class='passed'>\",\n\t\t\tdetails.passed,\n\t\t\t\"</span> assertions of <span class='total'>\",\n\t\t\tdetails.total,\n\t\t\t\"</span> passed, <span class='failed'>\",\n\t\t\tdetails.failed,\n\t\t\t\"</span> failed.\"\n\t\t].join( \"\" );\n\n\tif ( banner ) {\n\t\tbanner.className = details.failed ? \"qunit-fail\" : \"qunit-pass\";\n\t}\n\n\tif ( tests ) {\n\t\tid( \"qunit-testresult\" ).innerHTML = html;\n\t}\n\n\tif ( config.altertitle && document.title ) {\n\n\t\t// Show ✖ for good, ✔ for bad suite result in title\n\t\t// use escape sequences in case file gets loaded with non-utf-8-charset\n\t\tdocument.title = [\n\t\t\t( details.failed ? \"\\u2716\" : \"\\u2714\" ),\n\t\t\tdocument.title.replace( /^[\\u2714\\u2716] /i, \"\" )\n\t\t].join( \" \" );\n\t}\n\n\t// Clear own sessionStorage items if all tests passed\n\tif ( config.reorder && defined.sessionStorage && details.failed === 0 ) {\n\t\tfor ( i = 0; i < sessionStorage.length; i++ ) {\n\t\t\tkey = sessionStorage.key( i++ );\n\t\t\tif ( key.indexOf( \"qunit-test-\" ) === 0 ) {\n\t\t\t\tsessionStorage.removeItem( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Scroll back to top to show results\n\tif ( config.scrolltop && window.scrollTo ) {\n\t\twindow.scrollTo( 0, 0 );\n\t}\n} );\n\nfunction getNameHtml( name, module ) {\n\tvar nameHtml = \"\";\n\n\tif ( module ) {\n\t\tnameHtml = \"<span class='module-name'>\" + escapeText( module ) + \"</span>: \";\n\t}\n\n\tnameHtml += \"<span class='test-name'>\" + escapeText( name ) + \"</span>\";\n\n\treturn nameHtml;\n}\n\nQUnit.testStart( function( details ) {\n\tvar running, testBlock, bad;\n\n\ttestBlock = id( \"qunit-test-output-\" + details.testId );\n\tif ( testBlock ) {\n\t\ttestBlock.className = \"running\";\n\t} else {\n\n\t\t// Report later registered tests\n\t\tappendTest( details.name, details.testId, details.module );\n\t}\n\n\trunning = id( \"qunit-testresult\" );\n\tif ( running ) {\n\t\tbad = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t+sessionStorage.getItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\n\t\trunning.innerHTML = ( bad ?\n\t\t\t\"Rerunning previously failed test: <br />\" :\n\t\t\t\"Running: <br />\" ) +\n\t\t\tgetNameHtml( details.name, details.module );\n\t}\n\n} );\n\nfunction stripHtml( string ) {\n\n\t// Strip tags, html entity and whitespaces\n\treturn string.replace( /<\\/?[^>]+(>|$)/g, \"\" ).replace( /\\&quot;/g, \"\" ).replace( /\\s+/g, \"\" );\n}\n\nQUnit.log( function( details ) {\n\tvar assertList, assertLi,\n\t\tmessage, expected, actual, diff,\n\t\tshowDiff = false,\n\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\n\tif ( !testItem ) {\n\t\treturn;\n\t}\n\n\tmessage = escapeText( details.message ) || ( details.result ? \"okay\" : \"failed\" );\n\tmessage = \"<span class='test-message'>\" + message + \"</span>\";\n\tmessage += \"<span class='runtime'>@ \" + details.runtime + \" ms</span>\";\n\n\t// The pushFailure doesn't provide details.expected\n\t// when it calls, it's implicit to also not show expected and diff stuff\n\t// Also, we need to check details.expected existence, as it can exist and be undefined\n\tif ( !details.result && hasOwn.call( details, \"expected\" ) ) {\n\t\tif ( details.negative ) {\n\t\t\texpected = \"NOT \" + QUnit.dump.parse( details.expected );\n\t\t} else {\n\t\t\texpected = QUnit.dump.parse( details.expected );\n\t\t}\n\n\t\tactual = QUnit.dump.parse( details.actual );\n\t\tmessage += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" +\n\t\t\tescapeText( expected ) +\n\t\t\t\"</pre></td></tr>\";\n\n\t\tif ( actual !== expected ) {\n\n\t\t\tmessage += \"<tr class='test-actual'><th>Result: </th><td><pre>\" +\n\t\t\t\tescapeText( actual ) + \"</pre></td></tr>\";\n\n\t\t\t// Don't show diff if actual or expected are booleans\n\t\t\tif ( !( /^(true|false)$/.test( actual ) ) &&\n\t\t\t\t\t!( /^(true|false)$/.test( expected ) ) ) {\n\t\t\t\tdiff = QUnit.diff( expected, actual );\n\t\t\t\tshowDiff = stripHtml( diff ).length !==\n\t\t\t\t\tstripHtml( expected ).length +\n\t\t\t\t\tstripHtml( actual ).length;\n\t\t\t}\n\n\t\t\t// Don't show diff if expected and actual are totally different\n\t\t\tif ( showDiff ) {\n\t\t\t\tmessage += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" +\n\t\t\t\t\tdiff + \"</pre></td></tr>\";\n\t\t\t}\n\t\t} else if ( expected.indexOf( \"[object Array]\" ) !== -1 ||\n\t\t\t\texpected.indexOf( \"[object Object]\" ) !== -1 ) {\n\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\"Diff suppressed as the depth of object is more than current max depth (\" +\n\t\t\t\tQUnit.config.maxDepth + \").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \" +\n\t\t\t\t\" run with a higher max depth or <a href='\" +\n\t\t\t\tescapeText( setUrl( { maxDepth: -1 } ) ) + \"'>\" +\n\t\t\t\t\"Rerun</a> without max depth.</p></td></tr>\";\n\t\t} else {\n\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\"Diff suppressed as the expected and actual results have an equivalent\" +\n\t\t\t\t\" serialization</td></tr>\";\n\t\t}\n\n\t\tif ( details.source ) {\n\t\t\tmessage += \"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\";\n\t\t}\n\n\t\tmessage += \"</table>\";\n\n\t// This occurs when pushFailure is set and we have an extracted stack trace\n\t} else if ( !details.result && details.source ) {\n\t\tmessage += \"<table>\" +\n\t\t\t\"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\tescapeText( details.source ) + \"</pre></td></tr>\" +\n\t\t\t\"</table>\";\n\t}\n\n\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\n\tassertLi = document.createElement( \"li\" );\n\tassertLi.className = details.result ? \"pass\" : \"fail\";\n\tassertLi.innerHTML = message;\n\tassertList.appendChild( assertLi );\n} );\n\nQUnit.testDone( function( details ) {\n\tvar testTitle, time, testItem, assertList,\n\t\tgood, bad, testCounts, skipped, sourceName,\n\t\ttests = id( \"qunit-tests\" );\n\n\tif ( !tests ) {\n\t\treturn;\n\t}\n\n\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\n\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\n\tgood = details.passed;\n\tbad = details.failed;\n\n\t// Store result when possible\n\tif ( config.reorder && defined.sessionStorage ) {\n\t\tif ( bad ) {\n\t\t\tsessionStorage.setItem( \"qunit-test-\" + details.module + \"-\" + details.name, bad );\n\t\t} else {\n\t\t\tsessionStorage.removeItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\t}\n\t}\n\n\tif ( bad === 0 ) {\n\n\t\t// Collapse the passing tests\n\t\taddClass( assertList, \"qunit-collapsed\" );\n\t} else if ( bad && config.collapse && !collapseNext ) {\n\n\t\t// Skip collapsing the first failing test\n\t\tcollapseNext = true;\n\t} else {\n\n\t\t// Collapse remaining tests\n\t\taddClass( assertList, \"qunit-collapsed\" );\n\t}\n\n\t// The testItem.firstChild is the test name\n\ttestTitle = testItem.firstChild;\n\n\ttestCounts = bad ?\n\t\t\"<b class='failed'>\" + bad + \"</b>, \" + \"<b class='passed'>\" + good + \"</b>, \" :\n\t\t\"\";\n\n\ttestTitle.innerHTML += \" <b class='counts'>(\" + testCounts +\n\t\tdetails.assertions.length + \")</b>\";\n\n\tif ( details.skipped ) {\n\t\ttestItem.className = \"skipped\";\n\t\tskipped = document.createElement( \"em\" );\n\t\tskipped.className = \"qunit-skipped-label\";\n\t\tskipped.innerHTML = \"skipped\";\n\t\ttestItem.insertBefore( skipped, testTitle );\n\t} else {\n\t\taddEvent( testTitle, \"click\", function() {\n\t\t\ttoggleClass( assertList, \"qunit-collapsed\" );\n\t\t} );\n\n\t\ttestItem.className = bad ? \"fail\" : \"pass\";\n\n\t\ttime = document.createElement( \"span\" );\n\t\ttime.className = \"runtime\";\n\t\ttime.innerHTML = details.runtime + \" ms\";\n\t\ttestItem.insertBefore( time, assertList );\n\t}\n\n\t// Show the source of the test when showing assertions\n\tif ( details.source ) {\n\t\tsourceName = document.createElement( \"p\" );\n\t\tsourceName.innerHTML = \"<strong>Source: </strong>\" + details.source;\n\t\taddClass( sourceName, \"qunit-source\" );\n\t\tif ( bad === 0 ) {\n\t\t\taddClass( sourceName, \"qunit-collapsed\" );\n\t\t}\n\t\taddEvent( testTitle, \"click\", function() {\n\t\t\ttoggleClass( sourceName, \"qunit-collapsed\" );\n\t\t} );\n\t\ttestItem.appendChild( sourceName );\n\t}\n} );\n\n// Avoid readyState issue with phantomjs\n// Ref: #818\nvar notPhantom = ( function( p ) {\n\treturn !( p && p.version && p.version.major > 0 );\n} )( window.phantom );\n\nif ( notPhantom && document.readyState === \"complete\" ) {\n\tQUnit.load();\n} else {\n\taddEvent( window, \"load\", QUnit.load );\n}\n\n/*\n * This file is a modified version of google-diff-match-patch's JavaScript implementation\n * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\n * modifications are licensed as more fully set forth in LICENSE.txt.\n *\n * The original source of google-diff-match-patch is attributable and licensed as follows:\n *\n * Copyright 2006 Google Inc.\n * https://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * More Info:\n *  https://code.google.com/p/google-diff-match-patch/\n *\n * Usage: QUnit.diff(expected, actual)\n *\n */\nQUnit.diff = ( function() {\n\tfunction DiffMatchPatch() {\n\t}\n\n\t//  DIFF FUNCTIONS\n\n\t/**\n\t * The data structure representing a diff is an array of tuples:\n\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t */\n\tvar DIFF_DELETE = -1,\n\t\tDIFF_INSERT = 1,\n\t\tDIFF_EQUAL = 0;\n\n\t/**\n\t * Find the differences between two texts.  Simplifies the problem by stripping\n\t * any common prefix or suffix off the texts before diffing.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {boolean=} optChecklines Optional speedup flag. If present and false,\n\t *     then don't run a line-level diff first to identify the changed areas.\n\t *     Defaults to true, which does a faster, slightly less optimal diff.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.DiffMain = function( text1, text2, optChecklines ) {\n\t\tvar deadline, checklines, commonlength,\n\t\t\tcommonprefix, commonsuffix, diffs;\n\n\t\t// The diff must be complete in up to 1 second.\n\t\tdeadline = ( new Date() ).getTime() + 1000;\n\n\t\t// Check for null inputs.\n\t\tif ( text1 === null || text2 === null ) {\n\t\t\tthrow new Error( \"Null input. (DiffMain)\" );\n\t\t}\n\n\t\t// Check for equality (speedup).\n\t\tif ( text1 === text2 ) {\n\t\t\tif ( text1 ) {\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_EQUAL, text1 ]\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn [];\n\t\t}\n\n\t\tif ( typeof optChecklines === \"undefined\" ) {\n\t\t\toptChecklines = true;\n\t\t}\n\n\t\tchecklines = optChecklines;\n\n\t\t// Trim off common prefix (speedup).\n\t\tcommonlength = this.diffCommonPrefix( text1, text2 );\n\t\tcommonprefix = text1.substring( 0, commonlength );\n\t\ttext1 = text1.substring( commonlength );\n\t\ttext2 = text2.substring( commonlength );\n\n\t\t// Trim off common suffix (speedup).\n\t\tcommonlength = this.diffCommonSuffix( text1, text2 );\n\t\tcommonsuffix = text1.substring( text1.length - commonlength );\n\t\ttext1 = text1.substring( 0, text1.length - commonlength );\n\t\ttext2 = text2.substring( 0, text2.length - commonlength );\n\n\t\t// Compute the diff on the middle block.\n\t\tdiffs = this.diffCompute( text1, text2, checklines, deadline );\n\n\t\t// Restore the prefix and suffix.\n\t\tif ( commonprefix ) {\n\t\t\tdiffs.unshift( [ DIFF_EQUAL, commonprefix ] );\n\t\t}\n\t\tif ( commonsuffix ) {\n\t\t\tdiffs.push( [ DIFF_EQUAL, commonsuffix ] );\n\t\t}\n\t\tthis.diffCleanupMerge( diffs );\n\t\treturn diffs;\n\t};\n\n\t/**\n\t * Reduce the number of edits by eliminating operationally trivial equalities.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupEfficiency = function( diffs ) {\n\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\tpointer, preIns, preDel, postIns, postDel;\n\t\tchanges = false;\n\t\tequalities = []; // Stack of indices where equalities are found.\n\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t/** @type {?string} */\n\t\tlastequality = null;\n\n\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\tpointer = 0; // Index of current position.\n\n\t\t// Is there an insertion operation before the last equality.\n\t\tpreIns = false;\n\n\t\t// Is there a deletion operation before the last equality.\n\t\tpreDel = false;\n\n\t\t// Is there an insertion operation after the last equality.\n\t\tpostIns = false;\n\n\t\t// Is there a deletion operation after the last equality.\n\t\tpostDel = false;\n\t\twhile ( pointer < diffs.length ) {\n\n\t\t\t// Equality found.\n\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) {\n\t\t\t\tif ( diffs[ pointer ][ 1 ].length < 4 && ( postIns || postDel ) ) {\n\n\t\t\t\t\t// Candidate found.\n\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\tpreIns = postIns;\n\t\t\t\t\tpreDel = postDel;\n\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// Not a candidate, and can never become one.\n\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t}\n\t\t\t\tpostIns = postDel = false;\n\n\t\t\t// An insertion or deletion.\n\t\t\t} else {\n\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_DELETE ) {\n\t\t\t\t\tpostDel = true;\n\t\t\t\t} else {\n\t\t\t\t\tpostIns = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Five types to be split:\n\t\t\t\t * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins>X<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins><del>B</del>X<ins>C</ins>\n\t\t\t\t * <ins>A</del>X<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins><del>B</del>X<del>C</del>\n\t\t\t\t */\n\t\t\t\tif ( lastequality && ( ( preIns && preDel && postIns && postDel ) ||\n\t\t\t\t\t\t( ( lastequality.length < 2 ) &&\n\t\t\t\t\t\t( preIns + preDel + postIns + postDel ) === 3 ) ) ) {\n\n\t\t\t\t\t// Duplicate record.\n\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t);\n\n\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\tequalitiesLength--; // Throw away the equality we just deleted;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t\tif ( preIns && preDel ) {\n\n\t\t\t\t\t\t// No changes made which could affect previous entry, keep going.\n\t\t\t\t\t\tpostIns = postDel = true;\n\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tequalitiesLength--; // Throw away the previous equality.\n\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\t\t\t\t\tpostIns = postDel = false;\n\t\t\t\t\t}\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\t};\n\n\t/**\n\t * Convert a diff array into a pretty HTML report.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t * @param {integer} string to be beautified.\n\t * @return {string} HTML representation.\n\t */\n\tDiffMatchPatch.prototype.diffPrettyHtml = function( diffs ) {\n\t\tvar op, data, x,\n\t\t\thtml = [];\n\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\top = diffs[ x ][ 0 ]; // Operation (insert, delete, equal)\n\t\t\tdata = diffs[ x ][ 1 ]; // Text of change.\n\t\t\tswitch ( op ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\thtml[ x ] = \"<ins>\" + escapeText( data ) + \"</ins>\";\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\thtml[ x ] = \"<del>\" + escapeText( data ) + \"</del>\";\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\t\t\t\thtml[ x ] = \"<span>\" + escapeText( data ) + \"</span>\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn html.join( \"\" );\n\t};\n\n\t/**\n\t * Determine the common prefix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the start of each\n\t *     string.\n\t */\n\tDiffMatchPatch.prototype.diffCommonPrefix = function( text1, text2 ) {\n\t\tvar pointermid, pointermax, pointermin, pointerstart;\n\n\t\t// Quick check for common null cases.\n\t\tif ( !text1 || !text2 || text1.charAt( 0 ) !== text2.charAt( 0 ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Binary search.\n\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\tpointermin = 0;\n\t\tpointermax = Math.min( text1.length, text2.length );\n\t\tpointermid = pointermax;\n\t\tpointerstart = 0;\n\t\twhile ( pointermin < pointermid ) {\n\t\t\tif ( text1.substring( pointerstart, pointermid ) ===\n\t\t\t\t\ttext2.substring( pointerstart, pointermid ) ) {\n\t\t\t\tpointermin = pointermid;\n\t\t\t\tpointerstart = pointermin;\n\t\t\t} else {\n\t\t\t\tpointermax = pointermid;\n\t\t\t}\n\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t}\n\t\treturn pointermid;\n\t};\n\n\t/**\n\t * Determine the common suffix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of each string.\n\t */\n\tDiffMatchPatch.prototype.diffCommonSuffix = function( text1, text2 ) {\n\t\tvar pointermid, pointermax, pointermin, pointerend;\n\n\t\t// Quick check for common null cases.\n\t\tif ( !text1 ||\n\t\t\t\t!text2 ||\n\t\t\t\ttext1.charAt( text1.length - 1 ) !== text2.charAt( text2.length - 1 ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Binary search.\n\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\tpointermin = 0;\n\t\tpointermax = Math.min( text1.length, text2.length );\n\t\tpointermid = pointermax;\n\t\tpointerend = 0;\n\t\twhile ( pointermin < pointermid ) {\n\t\t\tif ( text1.substring( text1.length - pointermid, text1.length - pointerend ) ===\n\t\t\t\t\ttext2.substring( text2.length - pointermid, text2.length - pointerend ) ) {\n\t\t\t\tpointermin = pointermid;\n\t\t\t\tpointerend = pointermin;\n\t\t\t} else {\n\t\t\t\tpointermax = pointermid;\n\t\t\t}\n\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t}\n\t\treturn pointermid;\n\t};\n\n\t/**\n\t * Find the differences between two texts.  Assumes that the texts do not\n\t * have any common prefix or suffix.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {boolean} checklines Speedup flag.  If false, then don't run a\n\t *     line-level diff first to identify the changed areas.\n\t *     If true, then run a faster, slightly less optimal diff.\n\t * @param {number} deadline Time when the diff should be complete by.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCompute = function( text1, text2, checklines, deadline ) {\n\t\tvar diffs, longtext, shorttext, i, hm,\n\t\t\ttext1A, text2A, text1B, text2B,\n\t\t\tmidCommon, diffsA, diffsB;\n\n\t\tif ( !text1 ) {\n\n\t\t\t// Just add some text (speedup).\n\t\t\treturn [\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t}\n\n\t\tif ( !text2 ) {\n\n\t\t\t// Just delete some text (speedup).\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ]\n\t\t\t];\n\t\t}\n\n\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\ti = longtext.indexOf( shorttext );\n\t\tif ( i !== -1 ) {\n\n\t\t\t// Shorter text is inside the longer text (speedup).\n\t\t\tdiffs = [\n\t\t\t\t[ DIFF_INSERT, longtext.substring( 0, i ) ],\n\t\t\t\t[ DIFF_EQUAL, shorttext ],\n\t\t\t\t[ DIFF_INSERT, longtext.substring( i + shorttext.length ) ]\n\t\t\t];\n\n\t\t\t// Swap insertions for deletions if diff is reversed.\n\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\tdiffs[ 0 ][ 0 ] = diffs[ 2 ][ 0 ] = DIFF_DELETE;\n\t\t\t}\n\t\t\treturn diffs;\n\t\t}\n\n\t\tif ( shorttext.length === 1 ) {\n\n\t\t\t// Single character string.\n\t\t\t// After the previous speedup, the character can't be an equality.\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t}\n\n\t\t// Check to see if the problem can be split in two.\n\t\thm = this.diffHalfMatch( text1, text2 );\n\t\tif ( hm ) {\n\n\t\t\t// A half-match was found, sort out the return data.\n\t\t\ttext1A = hm[ 0 ];\n\t\t\ttext1B = hm[ 1 ];\n\t\t\ttext2A = hm[ 2 ];\n\t\t\ttext2B = hm[ 3 ];\n\t\t\tmidCommon = hm[ 4 ];\n\n\t\t\t// Send both pairs off for separate processing.\n\t\t\tdiffsA = this.DiffMain( text1A, text2A, checklines, deadline );\n\t\t\tdiffsB = this.DiffMain( text1B, text2B, checklines, deadline );\n\n\t\t\t// Merge the results.\n\t\t\treturn diffsA.concat( [\n\t\t\t\t[ DIFF_EQUAL, midCommon ]\n\t\t\t], diffsB );\n\t\t}\n\n\t\tif ( checklines && text1.length > 100 && text2.length > 100 ) {\n\t\t\treturn this.diffLineMode( text1, text2, deadline );\n\t\t}\n\n\t\treturn this.diffBisect( text1, text2, deadline );\n\t};\n\n\t/**\n\t * Do the two texts share a substring which is at least half the length of the\n\t * longer text?\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t *     text2 and the common middle.  Or null if there was no match.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffHalfMatch = function( text1, text2 ) {\n\t\tvar longtext, shorttext, dmp,\n\t\t\ttext1A, text2B, text2A, text1B, midCommon,\n\t\t\thm1, hm2, hm;\n\n\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\tif ( longtext.length < 4 || shorttext.length * 2 < longtext.length ) {\n\t\t\treturn null; // Pointless.\n\t\t}\n\t\tdmp = this; // 'this' becomes 'window' in a closure.\n\n\t\t/**\n\t\t * Does a substring of shorttext exist within longtext such that the substring\n\t\t * is at least half the length of longtext?\n\t\t * Closure, but does not reference any external variables.\n\t\t * @param {string} longtext Longer string.\n\t\t * @param {string} shorttext Shorter string.\n\t\t * @param {number} i Start index of quarter length substring within longtext.\n\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t\t *     of shorttext and the common middle.  Or null if there was no match.\n\t\t * @private\n\t\t */\n\t\tfunction diffHalfMatchI( longtext, shorttext, i ) {\n\t\t\tvar seed, j, bestCommon, prefixLength, suffixLength,\n\t\t\t\tbestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;\n\n\t\t\t// Start with a 1/4 length substring at position i as a seed.\n\t\t\tseed = longtext.substring( i, i + Math.floor( longtext.length / 4 ) );\n\t\t\tj = -1;\n\t\t\tbestCommon = \"\";\n\t\t\twhile ( ( j = shorttext.indexOf( seed, j + 1 ) ) !== -1 ) {\n\t\t\t\tprefixLength = dmp.diffCommonPrefix( longtext.substring( i ),\n\t\t\t\t\tshorttext.substring( j ) );\n\t\t\t\tsuffixLength = dmp.diffCommonSuffix( longtext.substring( 0, i ),\n\t\t\t\t\tshorttext.substring( 0, j ) );\n\t\t\t\tif ( bestCommon.length < suffixLength + prefixLength ) {\n\t\t\t\t\tbestCommon = shorttext.substring( j - suffixLength, j ) +\n\t\t\t\t\t\tshorttext.substring( j, j + prefixLength );\n\t\t\t\t\tbestLongtextA = longtext.substring( 0, i - suffixLength );\n\t\t\t\t\tbestLongtextB = longtext.substring( i + prefixLength );\n\t\t\t\t\tbestShorttextA = shorttext.substring( 0, j - suffixLength );\n\t\t\t\t\tbestShorttextB = shorttext.substring( j + prefixLength );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( bestCommon.length * 2 >= longtext.length ) {\n\t\t\t\treturn [ bestLongtextA, bestLongtextB,\n\t\t\t\t\tbestShorttextA, bestShorttextB, bestCommon\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// First check if the second quarter is the seed for a half-match.\n\t\thm1 = diffHalfMatchI( longtext, shorttext,\n\t\t\tMath.ceil( longtext.length / 4 ) );\n\n\t\t// Check again based on the third quarter.\n\t\thm2 = diffHalfMatchI( longtext, shorttext,\n\t\t\tMath.ceil( longtext.length / 2 ) );\n\t\tif ( !hm1 && !hm2 ) {\n\t\t\treturn null;\n\t\t} else if ( !hm2 ) {\n\t\t\thm = hm1;\n\t\t} else if ( !hm1 ) {\n\t\t\thm = hm2;\n\t\t} else {\n\n\t\t\t// Both matched.  Select the longest.\n\t\t\thm = hm1[ 4 ].length > hm2[ 4 ].length ? hm1 : hm2;\n\t\t}\n\n\t\t// A half-match was found, sort out the return data.\n\t\ttext1A, text1B, text2A, text2B;\n\t\tif ( text1.length > text2.length ) {\n\t\t\ttext1A = hm[ 0 ];\n\t\t\ttext1B = hm[ 1 ];\n\t\t\ttext2A = hm[ 2 ];\n\t\t\ttext2B = hm[ 3 ];\n\t\t} else {\n\t\t\ttext2A = hm[ 0 ];\n\t\t\ttext2B = hm[ 1 ];\n\t\t\ttext1A = hm[ 2 ];\n\t\t\ttext1B = hm[ 3 ];\n\t\t}\n\t\tmidCommon = hm[ 4 ];\n\t\treturn [ text1A, text1B, text2A, text2B, midCommon ];\n\t};\n\n\t/**\n\t * Do a quick line-level diff on both strings, then rediff the parts for\n\t * greater accuracy.\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} deadline Time when the diff should be complete by.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffLineMode = function( text1, text2, deadline ) {\n\t\tvar a, diffs, linearray, pointer, countInsert,\n\t\t\tcountDelete, textInsert, textDelete, j;\n\n\t\t// Scan the text on a line-by-line basis first.\n\t\ta = this.diffLinesToChars( text1, text2 );\n\t\ttext1 = a.chars1;\n\t\ttext2 = a.chars2;\n\t\tlinearray = a.lineArray;\n\n\t\tdiffs = this.DiffMain( text1, text2, false, deadline );\n\n\t\t// Convert the diff back to original text.\n\t\tthis.diffCharsToLines( diffs, linearray );\n\n\t\t// Eliminate freak matches (e.g. blank lines)\n\t\tthis.diffCleanupSemantic( diffs );\n\n\t\t// Rediff any replacement blocks, this time character-by-character.\n\t\t// Add a dummy entry at the end.\n\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] );\n\t\tpointer = 0;\n\t\tcountDelete = 0;\n\t\tcountInsert = 0;\n\t\ttextDelete = \"\";\n\t\ttextInsert = \"\";\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\tcountInsert++;\n\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\tcountDelete++;\n\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\n\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\tif ( countDelete >= 1 && countInsert >= 1 ) {\n\n\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\tdiffs.splice( pointer - countDelete - countInsert,\n\t\t\t\t\t\tcountDelete + countInsert );\n\t\t\t\t\tpointer = pointer - countDelete - countInsert;\n\t\t\t\t\ta = this.DiffMain( textDelete, textInsert, false, deadline );\n\t\t\t\t\tfor ( j = a.length - 1; j >= 0; j-- ) {\n\t\t\t\t\t\tdiffs.splice( pointer, 0, a[ j ] );\n\t\t\t\t\t}\n\t\t\t\t\tpointer = pointer + a.length;\n\t\t\t\t}\n\t\t\t\tcountInsert = 0;\n\t\t\t\tcountDelete = 0;\n\t\t\t\ttextDelete = \"\";\n\t\t\t\ttextInsert = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\n\t\treturn diffs;\n\t};\n\n\t/**\n\t * Find the 'middle snake' of a diff, split the problem in two\n\t * and return the recursively constructed diff.\n\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} deadline Time at which to bail if not yet complete.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffBisect = function( text1, text2, deadline ) {\n\t\tvar text1Length, text2Length, maxD, vOffset, vLength,\n\t\t\tv1, v2, x, delta, front, k1start, k1end, k2start,\n\t\t\tk2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;\n\n\t\t// Cache the text lengths to prevent multiple calls.\n\t\ttext1Length = text1.length;\n\t\ttext2Length = text2.length;\n\t\tmaxD = Math.ceil( ( text1Length + text2Length ) / 2 );\n\t\tvOffset = maxD;\n\t\tvLength = 2 * maxD;\n\t\tv1 = new Array( vLength );\n\t\tv2 = new Array( vLength );\n\n\t\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t\t// integers and undefined.\n\t\tfor ( x = 0; x < vLength; x++ ) {\n\t\t\tv1[ x ] = -1;\n\t\t\tv2[ x ] = -1;\n\t\t}\n\t\tv1[ vOffset + 1 ] = 0;\n\t\tv2[ vOffset + 1 ] = 0;\n\t\tdelta = text1Length - text2Length;\n\n\t\t// If the total number of characters is odd, then the front path will collide\n\t\t// with the reverse path.\n\t\tfront = ( delta % 2 !== 0 );\n\n\t\t// Offsets for start and end of k loop.\n\t\t// Prevents mapping of space beyond the grid.\n\t\tk1start = 0;\n\t\tk1end = 0;\n\t\tk2start = 0;\n\t\tk2end = 0;\n\t\tfor ( d = 0; d < maxD; d++ ) {\n\n\t\t\t// Bail out if deadline is reached.\n\t\t\tif ( ( new Date() ).getTime() > deadline ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Walk the front path one step.\n\t\t\tfor ( k1 = -d + k1start; k1 <= d - k1end; k1 += 2 ) {\n\t\t\t\tk1Offset = vOffset + k1;\n\t\t\t\tif ( k1 === -d || ( k1 !== d && v1[ k1Offset - 1 ] < v1[ k1Offset + 1 ] ) ) {\n\t\t\t\t\tx1 = v1[ k1Offset + 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tx1 = v1[ k1Offset - 1 ] + 1;\n\t\t\t\t}\n\t\t\t\ty1 = x1 - k1;\n\t\t\t\twhile ( x1 < text1Length && y1 < text2Length &&\n\t\t\t\t\ttext1.charAt( x1 ) === text2.charAt( y1 ) ) {\n\t\t\t\t\tx1++;\n\t\t\t\t\ty1++;\n\t\t\t\t}\n\t\t\t\tv1[ k1Offset ] = x1;\n\t\t\t\tif ( x1 > text1Length ) {\n\n\t\t\t\t\t// Ran off the right of the graph.\n\t\t\t\t\tk1end += 2;\n\t\t\t\t} else if ( y1 > text2Length ) {\n\n\t\t\t\t\t// Ran off the bottom of the graph.\n\t\t\t\t\tk1start += 2;\n\t\t\t\t} else if ( front ) {\n\t\t\t\t\tk2Offset = vOffset + delta - k1;\n\t\t\t\t\tif ( k2Offset >= 0 && k2Offset < vLength && v2[ k2Offset ] !== -1 ) {\n\n\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\tx2 = text1Length - v2[ k2Offset ];\n\t\t\t\t\t\tif ( x1 >= x2 ) {\n\n\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Walk the reverse path one step.\n\t\t\tfor ( k2 = -d + k2start; k2 <= d - k2end; k2 += 2 ) {\n\t\t\t\tk2Offset = vOffset + k2;\n\t\t\t\tif ( k2 === -d || ( k2 !== d && v2[ k2Offset - 1 ] < v2[ k2Offset + 1 ] ) ) {\n\t\t\t\t\tx2 = v2[ k2Offset + 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tx2 = v2[ k2Offset - 1 ] + 1;\n\t\t\t\t}\n\t\t\t\ty2 = x2 - k2;\n\t\t\t\twhile ( x2 < text1Length && y2 < text2Length &&\n\t\t\t\t\ttext1.charAt( text1Length - x2 - 1 ) ===\n\t\t\t\t\ttext2.charAt( text2Length - y2 - 1 ) ) {\n\t\t\t\t\tx2++;\n\t\t\t\t\ty2++;\n\t\t\t\t}\n\t\t\t\tv2[ k2Offset ] = x2;\n\t\t\t\tif ( x2 > text1Length ) {\n\n\t\t\t\t\t// Ran off the left of the graph.\n\t\t\t\t\tk2end += 2;\n\t\t\t\t} else if ( y2 > text2Length ) {\n\n\t\t\t\t\t// Ran off the top of the graph.\n\t\t\t\t\tk2start += 2;\n\t\t\t\t} else if ( !front ) {\n\t\t\t\t\tk1Offset = vOffset + delta - k2;\n\t\t\t\t\tif ( k1Offset >= 0 && k1Offset < vLength && v1[ k1Offset ] !== -1 ) {\n\t\t\t\t\t\tx1 = v1[ k1Offset ];\n\t\t\t\t\t\ty1 = vOffset + x1 - k1Offset;\n\n\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\tx2 = text1Length - x2;\n\t\t\t\t\t\tif ( x1 >= x2 ) {\n\n\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Diff took too long and hit the deadline or\n\t\t// number of diffs equals number of characters, no commonality at all.\n\t\treturn [\n\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t[ DIFF_INSERT, text2 ]\n\t\t];\n\t};\n\n\t/**\n\t * Given the location of the 'middle snake', split the diff in two parts\n\t * and recurse.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} x Index of split point in text1.\n\t * @param {number} y Index of split point in text2.\n\t * @param {number} deadline Time at which to bail if not yet complete.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffBisectSplit = function( text1, text2, x, y, deadline ) {\n\t\tvar text1a, text1b, text2a, text2b, diffs, diffsb;\n\t\ttext1a = text1.substring( 0, x );\n\t\ttext2a = text2.substring( 0, y );\n\t\ttext1b = text1.substring( x );\n\t\ttext2b = text2.substring( y );\n\n\t\t// Compute both diffs serially.\n\t\tdiffs = this.DiffMain( text1a, text2a, false, deadline );\n\t\tdiffsb = this.DiffMain( text1b, text2b, false, deadline );\n\n\t\treturn diffs.concat( diffsb );\n\t};\n\n\t/**\n\t * Reduce the number of edits by eliminating semantically trivial equalities.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupSemantic = function( diffs ) {\n\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\tpointer, lengthInsertions2, lengthDeletions2, lengthInsertions1,\n\t\t\tlengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\n\t\tchanges = false;\n\t\tequalities = []; // Stack of indices where equalities are found.\n\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t/** @type {?string} */\n\t\tlastequality = null;\n\n\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\tpointer = 0; // Index of current position.\n\n\t\t// Number of characters that changed prior to the equality.\n\t\tlengthInsertions1 = 0;\n\t\tlengthDeletions1 = 0;\n\n\t\t// Number of characters that changed after the equality.\n\t\tlengthInsertions2 = 0;\n\t\tlengthDeletions2 = 0;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) { // Equality found.\n\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\tlengthInsertions1 = lengthInsertions2;\n\t\t\t\tlengthDeletions1 = lengthDeletions2;\n\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t} else { // An insertion or deletion.\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\tlengthInsertions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t} else {\n\t\t\t\t\tlengthDeletions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t}\n\n\t\t\t\t// Eliminate an equality that is smaller or equal to the edits on both\n\t\t\t\t// sides of it.\n\t\t\t\tif ( lastequality && ( lastequality.length <=\n\t\t\t\t\t\tMath.max( lengthInsertions1, lengthDeletions1 ) ) &&\n\t\t\t\t\t\t( lastequality.length <= Math.max( lengthInsertions2,\n\t\t\t\t\t\t\tlengthDeletions2 ) ) ) {\n\n\t\t\t\t\t// Duplicate record.\n\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t);\n\n\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\n\t\t\t\t\t// Throw away the equality we just deleted.\n\t\t\t\t\tequalitiesLength--;\n\n\t\t\t\t\t// Throw away the previous equality (it needs to be reevaluated).\n\t\t\t\t\tequalitiesLength--;\n\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\n\t\t\t\t\t// Reset the counters.\n\t\t\t\t\tlengthInsertions1 = 0;\n\t\t\t\t\tlengthDeletions1 = 0;\n\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\t// Normalize the diff.\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\n\t\t// Find any overlaps between deletions and insertions.\n\t\t// e.g: <del>abcxxx</del><ins>xxxdef</ins>\n\t\t//   -> <del>abc</del>xxx<ins>def</ins>\n\t\t// e.g: <del>xxxabc</del><ins>defxxx</ins>\n\t\t//   -> <ins>def</ins>xxx<del>abc</del>\n\t\t// Only extract an overlap if it is as big as the edit ahead or behind it.\n\t\tpointer = 1;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_DELETE &&\n\t\t\t\t\tdiffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\tdeletion = diffs[ pointer - 1 ][ 1 ];\n\t\t\t\tinsertion = diffs[ pointer ][ 1 ];\n\t\t\t\toverlapLength1 = this.diffCommonOverlap( deletion, insertion );\n\t\t\t\toverlapLength2 = this.diffCommonOverlap( insertion, deletion );\n\t\t\t\tif ( overlapLength1 >= overlapLength2 ) {\n\t\t\t\t\tif ( overlapLength1 >= deletion.length / 2 ||\n\t\t\t\t\t\t\toverlapLength1 >= insertion.length / 2 ) {\n\n\t\t\t\t\t\t// Overlap found.  Insert an equality and trim the surrounding edits.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_EQUAL, insertion.substring( 0, overlapLength1 ) ]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\tdeletion.substring( 0, deletion.length - overlapLength1 );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] = insertion.substring( overlapLength1 );\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( overlapLength2 >= deletion.length / 2 ||\n\t\t\t\t\t\t\toverlapLength2 >= insertion.length / 2 ) {\n\n\t\t\t\t\t\t// Reverse overlap found.\n\t\t\t\t\t\t// Insert an equality and swap and trim the surrounding edits.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_EQUAL, deletion.substring( 0, overlapLength2 ) ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\tinsertion.substring( 0, insertion.length - overlapLength2 );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\tdeletion.substring( overlapLength2 );\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t};\n\n\t/**\n\t * Determine if the suffix of one string is the prefix of another.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of the first\n\t *     string and the start of the second string.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCommonOverlap = function( text1, text2 ) {\n\t\tvar text1Length, text2Length, textLength,\n\t\t\tbest, length, pattern, found;\n\n\t\t// Cache the text lengths to prevent multiple calls.\n\t\ttext1Length = text1.length;\n\t\ttext2Length = text2.length;\n\n\t\t// Eliminate the null case.\n\t\tif ( text1Length === 0 || text2Length === 0 ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Truncate the longer string.\n\t\tif ( text1Length > text2Length ) {\n\t\t\ttext1 = text1.substring( text1Length - text2Length );\n\t\t} else if ( text1Length < text2Length ) {\n\t\t\ttext2 = text2.substring( 0, text1Length );\n\t\t}\n\t\ttextLength = Math.min( text1Length, text2Length );\n\n\t\t// Quick check for the worst case.\n\t\tif ( text1 === text2 ) {\n\t\t\treturn textLength;\n\t\t}\n\n\t\t// Start by looking for a single character match\n\t\t// and increase length until no match is found.\n\t\t// Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\t\tbest = 0;\n\t\tlength = 1;\n\t\twhile ( true ) {\n\t\t\tpattern = text1.substring( textLength - length );\n\t\t\tfound = text2.indexOf( pattern );\n\t\t\tif ( found === -1 ) {\n\t\t\t\treturn best;\n\t\t\t}\n\t\t\tlength += found;\n\t\t\tif ( found === 0 || text1.substring( textLength - length ) ===\n\t\t\t\t\ttext2.substring( 0, length ) ) {\n\t\t\t\tbest = length;\n\t\t\t\tlength++;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Split two texts into an array of strings.  Reduce the texts to a string of\n\t * hashes where each Unicode character represents one line.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n\t *     An object containing the encoded text1, the encoded text2 and\n\t *     the array of unique strings.\n\t *     The zeroth element of the array of unique strings is intentionally blank.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffLinesToChars = function( text1, text2 ) {\n\t\tvar lineArray, lineHash, chars1, chars2;\n\t\tlineArray = []; // E.g. lineArray[4] === 'Hello\\n'\n\t\tlineHash = {};  // E.g. lineHash['Hello\\n'] === 4\n\n\t\t// '\\x00' is a valid character, but various debuggers don't like it.\n\t\t// So we'll insert a junk entry to avoid generating a null character.\n\t\tlineArray[ 0 ] = \"\";\n\n\t\t/**\n\t\t * Split a text into an array of strings.  Reduce the texts to a string of\n\t\t * hashes where each Unicode character represents one line.\n\t\t * Modifies linearray and linehash through being a closure.\n\t\t * @param {string} text String to encode.\n\t\t * @return {string} Encoded string.\n\t\t * @private\n\t\t */\n\t\tfunction diffLinesToCharsMunge( text ) {\n\t\t\tvar chars, lineStart, lineEnd, lineArrayLength, line;\n\t\t\tchars = \"\";\n\n\t\t\t// Walk the text, pulling out a substring for each line.\n\t\t\t// text.split('\\n') would would temporarily double our memory footprint.\n\t\t\t// Modifying text would create many large strings to garbage collect.\n\t\t\tlineStart = 0;\n\t\t\tlineEnd = -1;\n\n\t\t\t// Keeping our own length variable is faster than looking it up.\n\t\t\tlineArrayLength = lineArray.length;\n\t\t\twhile ( lineEnd < text.length - 1 ) {\n\t\t\t\tlineEnd = text.indexOf( \"\\n\", lineStart );\n\t\t\t\tif ( lineEnd === -1 ) {\n\t\t\t\t\tlineEnd = text.length - 1;\n\t\t\t\t}\n\t\t\t\tline = text.substring( lineStart, lineEnd + 1 );\n\t\t\t\tlineStart = lineEnd + 1;\n\n\t\t\t\tif ( lineHash.hasOwnProperty ? lineHash.hasOwnProperty( line ) :\n\t\t\t\t\t\t\t( lineHash[ line ] !== undefined ) ) {\n\t\t\t\t\tchars += String.fromCharCode( lineHash[ line ] );\n\t\t\t\t} else {\n\t\t\t\t\tchars += String.fromCharCode( lineArrayLength );\n\t\t\t\t\tlineHash[ line ] = lineArrayLength;\n\t\t\t\t\tlineArray[ lineArrayLength++ ] = line;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn chars;\n\t\t}\n\n\t\tchars1 = diffLinesToCharsMunge( text1 );\n\t\tchars2 = diffLinesToCharsMunge( text2 );\n\t\treturn {\n\t\t\tchars1: chars1,\n\t\t\tchars2: chars2,\n\t\t\tlineArray: lineArray\n\t\t};\n\t};\n\n\t/**\n\t * Rehydrate the text in a diff from a string of line hashes to real lines of\n\t * text.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t * @param {!Array.<string>} lineArray Array of unique strings.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCharsToLines = function( diffs, lineArray ) {\n\t\tvar x, chars, text, y;\n\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\tchars = diffs[ x ][ 1 ];\n\t\t\ttext = [];\n\t\t\tfor ( y = 0; y < chars.length; y++ ) {\n\t\t\t\ttext[ y ] = lineArray[ chars.charCodeAt( y ) ];\n\t\t\t}\n\t\t\tdiffs[ x ][ 1 ] = text.join( \"\" );\n\t\t}\n\t};\n\n\t/**\n\t * Reorder and merge like edit sections.  Merge equalities.\n\t * Any edit section can move as long as it doesn't cross an equality.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupMerge = function( diffs ) {\n\t\tvar pointer, countDelete, countInsert, textInsert, textDelete,\n\t\t\tcommonlength, changes, diffPointer, position;\n\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] ); // Add a dummy entry at the end.\n\t\tpointer = 0;\n\t\tcountDelete = 0;\n\t\tcountInsert = 0;\n\t\ttextDelete = \"\";\n\t\ttextInsert = \"\";\n\t\tcommonlength;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\tcountInsert++;\n\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\tpointer++;\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\tcountDelete++;\n\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\tpointer++;\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\n\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\tif ( countDelete + countInsert > 1 ) {\n\t\t\t\t\tif ( countDelete !== 0 && countInsert !== 0 ) {\n\n\t\t\t\t\t\t// Factor out any common prefixes.\n\t\t\t\t\t\tcommonlength = this.diffCommonPrefix( textInsert, textDelete );\n\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\tif ( ( pointer - countDelete - countInsert ) > 0 &&\n\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 0 ] ===\n\t\t\t\t\t\t\t\t\tDIFF_EQUAL ) {\n\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 1 ] +=\n\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdiffs.splice( 0, 0, [ DIFF_EQUAL,\n\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength )\n\t\t\t\t\t\t\t\t] );\n\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttextInsert = textInsert.substring( commonlength );\n\t\t\t\t\t\t\ttextDelete = textDelete.substring( commonlength );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Factor out any common suffixies.\n\t\t\t\t\t\tcommonlength = this.diffCommonSuffix( textInsert, textDelete );\n\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = textInsert.substring( textInsert.length -\n\t\t\t\t\t\t\t\t\tcommonlength ) + diffs[ pointer ][ 1 ];\n\t\t\t\t\t\t\ttextInsert = textInsert.substring( 0, textInsert.length -\n\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\ttextDelete = textDelete.substring( 0, textDelete.length -\n\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\tif ( countDelete === 0 ) {\n\t\t\t\t\t\tdiffs.splice( pointer - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_INSERT, textInsert ] );\n\t\t\t\t\t} else if ( countInsert === 0 ) {\n\t\t\t\t\t\tdiffs.splice( pointer - countDelete,\n\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_DELETE, textDelete ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer - countDelete - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert,\n\t\t\t\t\t\t\t[ DIFF_DELETE, textDelete ], [ DIFF_INSERT, textInsert ]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tpointer = pointer - countDelete - countInsert +\n\t\t\t\t\t\t( countDelete ? 1 : 0 ) + ( countInsert ? 1 : 0 ) + 1;\n\t\t\t\t} else if ( pointer !== 0 && diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL ) {\n\n\t\t\t\t\t// Merge this equality with the previous one.\n\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer, 1 );\n\t\t\t\t} else {\n\t\t\t\t\tpointer++;\n\t\t\t\t}\n\t\t\t\tcountInsert = 0;\n\t\t\t\tcountDelete = 0;\n\t\t\t\ttextDelete = \"\";\n\t\t\t\ttextInsert = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( diffs[ diffs.length - 1 ][ 1 ] === \"\" ) {\n\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\t}\n\n\t\t// Second pass: look for single edits surrounded on both sides by equalities\n\t\t// which can be shifted sideways to eliminate an equality.\n\t\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t\tchanges = false;\n\t\tpointer = 1;\n\n\t\t// Intentionally ignore the first and last element (don't need checking).\n\t\twhile ( pointer < diffs.length - 1 ) {\n\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL &&\n\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] === DIFF_EQUAL ) {\n\n\t\t\t\tdiffPointer = diffs[ pointer ][ 1 ];\n\t\t\t\tposition = diffPointer.substring(\n\t\t\t\t\tdiffPointer.length - diffs[ pointer - 1 ][ 1 ].length\n\t\t\t\t);\n\n\t\t\t\t// This is a single edit surrounded by equalities.\n\t\t\t\tif ( position === diffs[ pointer - 1 ][ 1 ] ) {\n\n\t\t\t\t\t// Shift the edit over the previous equality.\n\t\t\t\t\tdiffs[ pointer ][ 1 ] = diffs[ pointer - 1 ][ 1 ] +\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( 0, diffs[ pointer ][ 1 ].length -\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ].length );\n\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] + diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer - 1, 1 );\n\t\t\t\t\tchanges = true;\n\t\t\t\t} else if ( diffPointer.substring( 0, diffs[ pointer + 1 ][ 1 ].length ) ===\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] ) {\n\n\t\t\t\t\t// Shift the edit over the next equality.\n\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs[ pointer ][ 1 ] =\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( diffs[ pointer + 1 ][ 1 ].length ) +\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer + 1, 1 );\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\t// If shifts were made, the diff needs reordering and another shift sweep.\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\t};\n\n\treturn function( o, n ) {\n\t\tvar diff, output, text;\n\t\tdiff = new DiffMatchPatch();\n\t\toutput = diff.DiffMain( o, n );\n\t\tdiff.diffCleanupEfficiency( output );\n\t\ttext = diff.diffPrettyHtml( output );\n\n\t\treturn text;\n\t};\n}() );\n\n}() );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/qunitjs/qunit/qunit.js\n// module id = 44\n// module chunks = 1","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/process/browser.js\n// module id = 45\n// module chunks = 1","/**\n * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n *\n * https://github.com/twada/qunit-tap\n * version: 1.5.1\n *\n * Copyright (c) 2010-2016 Takuto Wada\n * Dual licensed under the MIT and GPLv2 licenses.\n *   https://raw.github.com/twada/qunit-tap/master/MIT-LICENSE.txt\n *   https://raw.github.com/twada/qunit-tap/master/GPL-LICENSE.txt\n *\n * A part of extend function is:\n *   Copyright 2012 jQuery Foundation and other contributors\n *   Released under the MIT license.\n *   http://jquery.org/license\n */\n(function (root, factory) {\n    'use strict';\n\n    // using returnExports UMD pattern\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.qunitTap = factory();\n    }\n}(this, function () {\n    'use strict';\n\n    var qunitTapVersion = '1.5.1',\n        slice = Array.prototype.slice;\n\n    // borrowed from qunit.js\n    function extend (a, b) {\n        var prop;\n        for (prop in b) {\n            if (b.hasOwnProperty(prop)) {\n                if (typeof b[prop] === 'undefined') {\n                    delete a[prop];\n                } else {\n                    a[prop] = b[prop];\n                }\n            }\n        }\n        return a;\n    }\n\n    function indexOf (ary, element) {\n        var i;\n        for (i = 0; i < ary.length; i += 1) {\n            if (ary[i] === element) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function removeElement (ary, element) {\n        var index = indexOf(ary, element);\n        if (index !== -1) {\n            return ary.splice(index, 1);\n        } else {\n            return [];\n        }\n    }\n\n    function isPlanRequired (conf) {\n        return (typeof conf !== 'undefined' && typeof conf.requireExpects !== 'undefined' && conf.requireExpects);\n    }\n\n    function isPassed (details) {\n        return !!(details.result);\n    }\n\n    function isFailed (details) {\n        return !(isPassed(details));\n    }\n\n    function isAssertOkFailed (details) {\n        return isFailed(details) && typeof details.expected === 'undefined' && typeof details.actual === 'undefined';\n    }\n\n    function escapeLineEndings (str) {\n        return str.replace(/(\\r?\\n)/g, '$&# ');\n    }\n\n    function ltrim (str) {\n        return str.replace(/^\\s+/, '');\n    }\n\n    function noop (obj) {\n        return obj;\n    }\n\n    function render (desc, fieldName, fieldValue, formatter) {\n        desc.push(fieldName + ': ' + formatter(fieldValue));\n    }\n\n    function renderIf (shouldRender, desc, fieldName, fieldValue, formatter) {\n        if (!shouldRender || typeof fieldValue === 'undefined') {\n            return;\n        }\n        render(desc, fieldName, fieldValue, formatter);\n    }\n\n    function formatTestLine (testLine, rest) {\n        if (!rest) {\n            return testLine;\n        }\n        return testLine + ' - ' + escapeLineEndings(rest);\n    }\n\n    var createCallbackAppenderFor = function (qu) {\n        return function (subject, observer, event) {\n            var originalLoggingCallback = subject[event],\n                callback = function () {\n                    // make listener methods (moduleStart,testStart,log, ...) overridable.\n                    observer[event].apply(observer, slice.apply(arguments));\n                };\n            originalLoggingCallback(callback);\n            return callback;\n        };\n    };\n\n\n    /**\n     * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n     * @param qunitObject QUnit object reference.\n     * @param printLikeFunction print-like function for TAP output (assumes line-separator is added by this function for each call).\n     * @param options configuration options to customize default behavior.\n     * @return object to provide QUnit-TAP API and customization subject.\n     */\n    function qunitTap(qunitObject, printLikeFunction, options) {\n        if (!qunitObject) {\n            throw new Error('should pass QUnit object reference. Please check QUnit\\'s \"require\" path if you are using Node.js (or any CommonJS env).');\n        } else if (typeof printLikeFunction !== 'function') {\n            throw new Error('should pass print-like function');\n        }\n\n        var qu = qunitObject,\n            tap = {},\n            deprecateOption = function deprecateOption (optionName, fallback) {\n                // option deprecation and fallback function\n                if (!options || typeof options !== 'object') {\n                    return;\n                }\n                if (typeof options[optionName] === 'undefined') {\n                    return;\n                }\n                printLikeFunction('# WARNING: Option \"' + optionName + '\" is deprecated and will be removed in future version.');\n                fallback(options[optionName]);\n            },\n            targetEvents = [\n                'moduleStart',\n                'testStart',\n                'log',\n                'testDone',\n                'done'\n            ],\n            registeredCallbacks = {},\n            explain = (function () {\n                if (typeof qu.dump !== 'undefined' && typeof qu.dump.parse === 'function') {\n                    return function explain (obj) {\n                        return qu.dump.parse(obj);\n                    };\n                }\n                if (typeof qu.jsDump !== 'undefined' && typeof qu.jsDump.parse === 'function') {\n                    return function explain (obj) {\n                        return qu.jsDump.parse(obj);\n                    };\n                }\n                return noop;\n            })();\n\n        tap.config = extend(\n            {\n                initialCount: 1,\n                showModuleNameOnFailure: true,\n                showTestNameOnFailure: true,\n                showExpectationOnFailure: true,\n                showSourceOnFailure: true\n            },\n            options\n        );\n        deprecateOption('noPlan', function (flag) {\n            printLikeFunction('# Now QUnit-TAP works as with \"noPlan: true\" by default. If you want to delare plan explicitly, please use \"QUnit.config.requireExpects\" option instead.');\n            tap.config.noPlan = flag;\n        });\n        deprecateOption('count', function (count) {\n            tap.config.initialCount = (count + 1);\n        });\n        deprecateOption('showDetailsOnFailure', function (flag) {\n            tap.config.showModuleNameOnFailure = flag;\n            tap.config.showTestNameOnFailure = flag;\n            tap.config.showExpectationOnFailure = flag;\n            tap.config.showSourceOnFailure = flag;\n        });\n        tap.VERSION = qunitTapVersion;\n        tap.puts = printLikeFunction;\n        tap.count = tap.config.initialCount - 1;\n        tap.expectedCount = tap.config.initialCount - 1;\n\n        function isEnabled (configName) {\n            return tap.config[configName];\n        }\n\n        function formatDetails (details) {\n            if (isPassed(details)) {\n                return details.message;\n            }\n            var desc = [];\n            if (details.message) {\n                desc.push(details.message);\n            }\n            if (isEnabled('showExpectationOnFailure') && !(isAssertOkFailed(details))) {\n                render(desc, 'expected', details.expected, explain);\n                render(desc, 'got', details.actual, explain);\n            }\n            renderIf(isEnabled('showTestNameOnFailure'), desc, 'test', details.name, noop);\n            renderIf(isEnabled('showModuleNameOnFailure'), desc, 'module', details.module, noop);\n            renderIf(isEnabled('showSourceOnFailure'), desc, 'source', details.source, ltrim);\n            return desc.join(', ');\n        }\n\n        function printPlanLine (toCount) {\n            tap.puts(tap.config.initialCount + '..' + toCount);\n        }\n\n        function unsubscribeEvent (eventName) {\n            var listeners;\n            if (indexOf(targetEvents, eventName) === -1) {\n                return;\n            }\n            listeners = qu.config[eventName];\n            if (typeof listeners === 'undefined') {\n                return;\n            }\n            removeElement(listeners, registeredCallbacks[eventName]);\n        }\n\n        function unsubscribeEvents (eventNames) {\n            var i;\n            for (i = 0; i < eventNames.length; i += 1) {\n                unsubscribeEvent(eventNames[i]);\n            }\n        }\n\n        tap.explain = explain;\n\n        tap.note = function note (obj) {\n            tap.puts(escapeLineEndings('# ' + obj));\n        };\n\n        tap.diag = function diag (obj) {\n            tap.note(obj);\n            return false;\n        };\n\n        tap.moduleStart = function moduleStart (arg) {\n            var name = (typeof arg === 'string') ? arg : arg.name;\n            tap.note('module: ' + name);\n        };\n\n        tap.testStart = function testStart (arg) {\n            var name = (typeof arg === 'string') ? arg : arg.name;\n            tap.note('test: ' + name);\n        };\n\n        tap.log = function log (details) {\n            var testLine = '';\n            tap.count += 1;\n            if (isFailed(details)) {\n                testLine += 'not ';\n            }\n            testLine += ('ok ' + tap.count);\n            tap.puts(formatTestLine(testLine, formatDetails(details)));\n        };\n\n        tap.testDone = function testDone () {\n            if (isPlanRequired(qu.config)) {\n                tap.expectedCount += qu.config.current.expected;\n            }\n        };\n\n        tap.done = function done () {\n            if (typeof tap.config.noPlan !== 'undefined' && !(tap.config.noPlan)) {\n                // Do nothing until removal of 'noPlan' option.\n            } else if (isPlanRequired(qu.config)) {\n                printPlanLine(tap.expectedCount);\n            } else {\n                printPlanLine(tap.count);\n            }\n        };\n\n        tap.unsubscribe = function unsubscribe () {\n            if (typeof qu.config === 'undefined') {\n                return;\n            }\n            if (arguments.length === 0) {\n                unsubscribeEvents(targetEvents);\n            } else {\n                unsubscribeEvents(slice.apply(arguments));\n            }\n        };\n\n        (function () {\n            var appendCallback = createCallbackAppenderFor(qu),\n                eventName, i, callback;\n            for (i = 0; i < targetEvents.length; i += 1) {\n                eventName = targetEvents[i];\n                callback = appendCallback(qu, tap, eventName);\n                registeredCallbacks[eventName] = callback;\n            }\n        })();\n\n        return tap;\n    }\n\n    qunitTap.qunitTap = function () {\n        throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require(\"qunit-tap\") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');\n    };\n\n    // using substack pattern (export single function)\n    return qunitTap;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/qunit-tap/lib/qunit-tap.js\n// module id = 46\n// module chunks = 1","'use strict';\n\n/* global QUnit, qunitTap */\n\nvar qunit_started = false;\n\n/* Always use explicit start */\nQUnit.config.autostart = false;\n\n/*\n * HACK: phantomjs doesn't handle uncaught exceptions as it should if\n * window.onerror is non-null, even when that handler returns false\n * (expecting that the browser default behavior will occur).\n *\n * So remove the qunit window.onerror handler until the tests actually\n * start, and any errors become part of the test suite results.\n */\nvar qunit_onerror = window.onerror;\nwindow.onerror = null;\nQUnit.begin(function() {\n    window.onerror = function(error, file, line) {\n        var ret = false;\n        if (qunit_onerror)\n            ret = qunit_onerror(error, file, line);\n\n        /*\n         * If a global exception happens during an async test\n         * then that test won't be able to call the start() function\n         * to move to the next test, so call it here.\n         */\n        if (QUnit.config.current && QUnit.config.current.async)\n            QUnit.start();\n\n        return ret;\n    };\n});\n\nQUnit.moduleStart(function() {\n    qunit_started = true;\n});\n\nQUnit.done(function() {\n    console.log(\"phantom-tap-done\");\n    window.onerror = null;\n});\n/*\n * Now initialize qunit-tap\n *\n * When not running under tap-phantom this stuff will just show up in\n * the console. We print out a special canary at the end of the tests\n * so that tap-phantom can know when the testing is done.\n *\n * In addition double check for a test file that doesn't properly call\n * QUnit.start() after its done setting up its tests.\n *\n * We also want to insert the current test name into all tap lines.\n */\nvar tap_regex = /^((not )?ok [0-9]+ (- )?)(.*)$/;\nqunitTap(QUnit, function() {\n    if (arguments.length == 1 && QUnit.config.current) {\n        var match = tap_regex.exec(arguments[0]);\n        if (match) {\n            console.log(match[1] + QUnit.config.current.testName + \": \" + match[4]);\n            return;\n        }\n    }\n    console.log.apply(console, arguments);\n});\n\nwindow.setTimeout(function() {\n    if (!qunit_started) {\n        console.log(\"QUnit not started by test\");\n        console.log(\"phantom-tap-error\");\n    }\n}, 20000);\n\nwindow.tests_included = true;\n\nif (module && module.exports)\n    module.exports = QUnit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/qunit-config.js\n// module id = 47\n// module chunks = 1"],"sourceRoot":""}