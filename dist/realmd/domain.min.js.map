{"version":3,"sources":["webpack:///realmd/domain.min.js","webpack:///webpack/bootstrap 81b84b95c3a4c71da4af","webpack:///../pkg/realmd/operation.js","webpack:///../~/webpack/buildin/module.js","webpack:///external \"jQuery\"","webpack:///external \"cockpit\"","webpack:///../pkg/lib/patterns.js","webpack:///../pkg/realmd/operation.html"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","instance","realmd","mode","realm","button","auth_changed","item","auth","attr","$","text","parts","split","type","owner","hide","show","check","name","dfd","Deferred","undefined","val","always","MANAGER","PROVIDER","reject","error","path","result","this","state","arguments","empty","message","kerberos_membership","proxy","KERBEROS_MEMBERSHIP","on","update","kerberos","KERBEROS","REALM","wait","resolve","cockpit","format","_","Error","checking","promise","checked","ensure","find_detail","field","Details","forEach","value","add_choice","choice","i","length","supported","append","list","first","count","toggle","operation","prop","server","valid","Name","removeAttr","placeholder","SuggestedAdministrator","SupportedJoinCredentials","push","credentials","creds","secret","variant","utf8_encoder","encode","install_ws_credentials","transport","host","console","log","user","password","script","RealmName","proc","superuser","err","environ","input","cleanup_ws_credentials","defer","done","fail","ex","JSON","stringify","perform","unique","busy","options","computer_ou","diagnostics","sub","subscribe","member","iface","signal","args","then","Deconfigure","dialog","modal","remove","cancel","SERVICE","jQuery","parseHTML","selector","context","fn","init","prototype","extend","ev","which","timeout","window","clearTimeout","setTimeout","title","label","setup","update_realms","joined","realms","Configured","map","x","join","link","element","dbus","watch","proxies","permission","problem","addClass","tooltip","container","update_realm_privileged","update_privileged","admin","appendTo","translate","close","gettext","find","webpackPolyfill","deprecate","paths","children","unique_number","Date","clear_errors","sel","removeClass","off","field_error","target","next","refresh","wrapper","parent","is","insertBefore","selectpicker","hasClass","css","global_error","alert","toString","prependTo","warn","footer","display_errors","errors","isArray","any","DialogWait","handle","disabled","clear_wait","data","ctl","display_wait","restore","cancelled","arg","before","cancellation","controls","add","not","each","apply","progress","onoff_refresh","addBack","filter","el","self","onoff","buttons","document","createTextNode","onoff_change","onoff_value","toggleClass","last","resize_flex","slider","flex","total","part","isNaN","update_value","check_overflow","offsetWidth","scrollWidth","setup_slider","Object","defineProperty","get","parseFloat","getAttribute","set","v","s","String","setAttribute","hasAttribute","toLowerCase","offset","left","hitx","offsetX","clientX","outerWidth","width","pageX","trigger","setup_sliders","action","Array","slice","addEventListener","ready","perm","denied_message","placement","tooltip_element","allowed","allowed_key","html"],"mappings":"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","file":"realmd/domain.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var jQuery = __webpack_require__(3);\n\t    var cockpit = __webpack_require__(4);\n\t    __webpack_require__(5);\n\t\n\t    var _ = cockpit.gettext;\n\t\n\t    var MANAGER = \"/org/freedesktop/realmd\";\n\t\n\t    var SERVICE = \"org.freedesktop.realmd.Service\";\n\t    var PROVIDER = \"org.freedesktop.realmd.Provider\";\n\t    var KERBEROS = \"org.freedesktop.realmd.Kerberos\";\n\t    var KERBEROS_MEMBERSHIP = \"org.freedesktop.realmd.KerberosMembership\";\n\t    var REALM = \"org.freedesktop.realmd.Realm\";\n\t\n\t    function instance(realmd, mode, realm, button) {\n\t        var dialog = jQuery.parseHTML(__webpack_require__(6))[0];\n\t\n\t        /* Scope the jQuery selector to our dialog */\n\t        var $ = function(selector, context) {\n\t            return new jQuery.fn.init(selector, context || dialog);\n\t        };\n\t        $.fn = $.prototype = jQuery.fn;\n\t        jQuery.extend($, jQuery);\n\t\n\t        var operation = null;\n\t        var checking = null;\n\t        var checked = null;\n\t        var kerberos_membership = null;\n\t        var kerberos = null;\n\t\n\t        /* If in an operation first time cancel is clicked, cancel operation */\n\t        $(\".realms-op-cancel\").on(\"click\", function() {\n\t            if (!cancel())\n\t                $(dialog).modal('hide');\n\t        });\n\t\n\t        /* When we're hidden some other way, cancel any operations */\n\t        $(dialog).on(\"hide.bs.modal\", function() {\n\t            cancel();\n\t        });\n\t\n\t        $(\".realms-op-apply\").on(\"click\", perform);\n\t        $(\".realms-op-field\")\n\t            .on(\"keydown\", function(ev) {\n\t                if (ev.which == 13)\n\t                    perform();\n\t            });\n\t\n\t        $(dialog).on(\"click\", \".realms-op-more-diagnostics\", function() {\n\t            $(\".realms-op-error\").hide();\n\t            $(\".realms-op-diagnostics\").show();\n\t        });\n\t\n\t        var timeout = null;\n\t        $(\".realms-op-address\").on(\"keyup change\", function() {\n\t            if ($(\".realms-op-address\").val() != checked) {\n\t                $(\".realms-op-address-error\").hide();\n\t                window.clearTimeout(timeout);\n\t                timeout = window.setTimeout(check, 1000);\n\t            }\n\t        });\n\t\n\t        var auth = null;\n\t        function auth_changed(item) {\n\t            auth = item.attr('data-value');\n\t            $(\".realms-op-auth span\").text(item.text());\n\t            var parts = (auth || \"\").split(\"/\");\n\t            var type = parts[0];\n\t            var owner = parts[1];\n\t\n\t            $(\".realms-op-admin-row\").hide();\n\t            $(\".realms-op-admin-password-row\").hide();\n\t            $(\".realms-op-user-row\").hide();\n\t            $(\".realms-op-user-password-row\").hide();\n\t            $(\".realms-op-otp-row\").hide();\n\t\n\t            if (type == \"password\" && owner == \"administrator\") {\n\t                $(\".realms-op-admin-row\").show();\n\t                $(\".realms-op-admin-password-row\").show();\n\t            } else if (type == \"password\" && owner == \"user\") {\n\t                $(\".realms-op-user-row\").show();\n\t                $(\".realms-op-user-password-row\").show();\n\t            } else if (type == \"secret\") {\n\t                $(\".realms-op-otp-row\").show();\n\t            }\n\t        }\n\t\n\t        $(\".realms-op-auth\").on('click', 'li', function() {\n\t            auth_changed($(this));\n\t        });\n\t\n\t        var title, label, text;\n\t        if (mode == 'join') {\n\t            title = _(\"page-title\", _(\"Join a Domain\"));\n\t            label = _(\"Join\");\n\t            $(\".realms-op-join-only-row\").show();\n\t            $(\".realms-op-leave-only-row\").hide();\n\t            check(\"\");\n\t        } else {\n\t            title = _(\"page-title\", _(\"Leave Domain\"));\n\t            label = _(\"Leave\");\n\t            text = _(\"Are you sure you want to leave this domain?\");\n\t            if (realm && realm.Name) {\n\t                text = cockpit.format(_(\"Are you sure you want to leave the '$0' domain?\"), realm.Name);\n\t            }\n\t\n\t            text = cockpit.format(_(\"$0 Only users with local credentials will be able to log into this machine. This may also effect other services as DNS resolution settings and the list of trusted CAs may change.\"), text);\n\t\n\t            $(\".realms-op-leave-only-row\").text(text);\n\t            $(\".realms-op-join-only-row\").hide();\n\t            $(\".realms-op-leave-only-row\").show();\n\t        }\n\t\n\t        $(\".realms-op-title\").text(title);\n\t        $(\".realms-op-apply\").text(label);\n\t        $(\".realms-op-field\").val(\"\");\n\t\n\t        function check(name) {\n\t            var dfd = $.Deferred();\n\t\n\t            if (name === undefined)\n\t                name = $(\".realms-op-address\").val();\n\t\n\t            if (name)\n\t                $(\".realms-op-address-spinner\").show();\n\t\n\t            dfd.always(function() {\n\t                if (name)\n\t                    $(\".realms-op-address-spinner\").hide();\n\t            });\n\t\n\t            realmd.call(MANAGER, PROVIDER, \"Discover\", [ name, { } ])\n\t                .always(function() {\n\t\n\t                    if ($(\".realms-op-address\").val() != name) {\n\t                        dfd.reject();\n\t                        check();\n\t                        return;\n\t                    }\n\t\n\t                    var error, result = [], path;\n\t                    if (this.state() == \"rejected\") {\n\t                        error = arguments[0];\n\t                        $(\".realms-op-message\")\n\t                            .empty()\n\t                            .text(error.message);\n\t                        dfd.reject(error);\n\t                    }\n\t\n\t                    var message;\n\t                    if (arguments[0][1])\n\t                        result = arguments[0][1];\n\t                    path = result[0]; /* the first realm */\n\t\n\t                    if (!path) {\n\t                        if (name) {\n\t                            message = cockpit.format(_(\"Domain $0 could not be contacted\"), name);\n\t                            $(\".realms-op-address-error\").show().attr('title', message);\n\t                        }\n\t\n\t                        realm = null;\n\t                        kerberos_membership = null;\n\t                        kerberos = null;\n\t\n\t                        dfd.reject(new Error(message));\n\t                    } else {\n\t                        kerberos_membership = realmd.proxy(KERBEROS_MEMBERSHIP, path);\n\t                        $(kerberos_membership).on(\"changed\", update);\n\t\n\t                        kerberos = realmd.proxy(KERBEROS, path);\n\t\n\t                        realm = realmd.proxy(REALM, path);\n\t                        $(realm).on(\"changed\", update);\n\t                        realm.wait(function() {\n\t                            dfd.resolve(realm);\n\t                        });\n\t                    }\n\t\n\t                    update();\n\t                });\n\t\n\t            checking = dfd.promise();\n\t            checked = name;\n\t            return checking;\n\t        }\n\t\n\t        function ensure() {\n\t            if (mode != 'join') {\n\t                var dfd = $.Deferred();\n\t                dfd.resolve(realm);\n\t                return dfd.promise();\n\t            }\n\t\n\t            if ($(\".realms-op-address\").val() === checked) {\n\t                if (checking)\n\t                    return checking;\n\t            }\n\t\n\t            return check();\n\t        }\n\t\n\t        /*\n\t         * The realmd dbus interface has an a(ss) Details\n\t         * property. Lookup the right value for the given\n\t         * field key.\n\t         */\n\t        function find_detail(realm, field) {\n\t            var result = null;\n\t            if (realm && realm.Details) {\n\t                realm.Details.forEach(function(value) {\n\t                    if (value[0] === field)\n\t                        result = value[1];\n\t                });\n\t            }\n\t            return result;\n\t        }\n\t\n\t\n\t        function update() {\n\t            var message;\n\t\n\t            $(\".realms-op-spinner\").toggle(!!operation);\n\t            $(\".realms-op-wait-message\").toggle(!!operation);\n\t            $(\".realms-op-field\").prop('disabled', !!operation);\n\t            $(\".realms-op-apply\").prop('disabled', !!operation);\n\t            $(\".realm-active-directory-only\").hide();\n\t\n\t            var server = find_detail(realm, \"server-software\");\n\t\n\t            if (realm && kerberos_membership && !kerberos_membership.valid) {\n\t                message = cockpit.format(_(\"Domain $0 is not supported\"), realm.Name);\n\t                $(\".realms-op-address-spinner\").hide();\n\t                $(\".realms-op-address-error\").show().attr('title', message);\n\t            } else {\n\t                $(\".realms-op-address-error\").hide();\n\t            }\n\t\n\t            if (operation)\n\t                button.attr('disabled', 'disabled');\n\t            else\n\t                button.removeAttr('disabled');\n\t\n\t            if (mode != 'join')\n\t                return;\n\t\n\t            $(\".realm-active-directory-only\").toggle(!server || server == \"active-directory\");\n\t\n\t            if (realm && realm.Name && !$(\".realms-op-address\")[0].placeholder) {\n\t                $(\".realms-op-address\")[0].placeholder = cockpit.format(_(\"e.g. \\\"$0\\\"\"), realm.Name);\n\t            }\n\t\n\t            var placeholder = \"\";\n\t            if (kerberos_membership) {\n\t                if (kerberos_membership.SuggestedAdministrator)\n\t                    placeholder = cockpit.format(_(\"e.g. \\\"$0\\\"\"), kerberos_membership.SuggestedAdministrator);\n\t            }\n\t            $(\".realms-op-admin\")[0].placeholder = placeholder;\n\t\n\t            var list = $(\".realms-op-auth .dropdown-menu\");\n\t            var supported = (kerberos_membership && kerberos_membership.SupportedJoinCredentials) || [ ];\n\t            supported.push([\"password\", \"administrator\"]);\n\t\n\t            var first = true;\n\t            var count = 0;\n\t\n\t            function add_choice(owner, type, text) {\n\t                var item, choice, i, length = supported.length;\n\t                for (i = 0; i < length; i++) {\n\t                    if ((!owner || owner == supported[i][1]) && type == supported[i][0]) {\n\t                        choice = type + \"/\" + supported[i][1];\n\t                        item = $(\"<li>\").attr(\"data-value\", choice).append($(\"<a>\").text(text));\n\t                        list.append(item);\n\t                        if (first) {\n\t                            auth_changed(item);\n\t                            first = false;\n\t                        }\n\t                        count += 1;\n\t                        break;\n\t                    }\n\t                }\n\t            }\n\t\n\t            list.empty();\n\t            add_choice('administrator', \"password\", _(\"Administrator Password\"));\n\t            add_choice('user', \"password\", _(\"User Password\"));\n\t            add_choice(null, \"secret\", _(\"One Time Password\"));\n\t            add_choice(null, \"automatic\", _(\"Automatic\"));\n\t            $(\".realms-authentification-row\").toggle(count > 1);\n\t            list.prop('disabled', !!operation).val(!first);\n\t        }\n\t\n\t        function credentials() {\n\t            var creds, secret;\n\t\n\t            var parts = (auth || \"\").split(\"/\");\n\t            var type = parts[0];\n\t            var owner = parts[1];\n\t\n\t            if (owner == \"user\" && type == \"password\") {\n\t                creds = [\n\t                    type, owner,\n\t                    cockpit.variant('(ss)', [ $(\".realms-op-user\").val(), $(\".realms-op-user-password\").val() ])\n\t                ];\n\t            } else if (owner == \"administrator\" && type == \"password\") {\n\t                creds = [\n\t                    type, owner,\n\t                    cockpit.variant('(ss)', [ $(\".realms-op-admin\").val(), $(\".realms-op-admin-password\").val() ])\n\t                ];\n\t            } else if (type == \"secret\") {\n\t                secret = $(\".realms-op-ot-password\").val();\n\t                creds = [\n\t                    type, owner,\n\t                    cockpit.variant('ay', cockpit.utf8_encoder().encode(secret))\n\t                ];\n\t            } else {\n\t                creds = [\n\t                    \"automatic\", owner,\n\t                    cockpit.variant('s', \"\")\n\t                ];\n\t            }\n\t\n\t            return creds;\n\t        }\n\t\n\t        // Request and install a kerberos keytab and an SSL certificate for cockpit-ws (with IPA)\n\t        // This is opportunistic: Some realms might not use IPA, or an unsupported auth mechanism\n\t        function install_ws_credentials() {\n\t            // skip this on remote ssh hosts, only set up ws hosts\n\t            if (cockpit.transport.host !== \"localhost\")\n\t                return cockpit.resolve();\n\t\n\t            if (auth !== \"password/administrator\") {\n\t                console.log(\"Installing kerberos keytab and SSL certificate not supported for auth mode\", auth);\n\t                return cockpit.resolve();\n\t            }\n\t\n\t            var user = $(\".realms-op-admin\").val();\n\t            var password = $(\".realms-op-admin-password\").val();\n\t\n\t            // ipa-getkeytab needs root to create the file, same for cert installation\n\t            var script = 'set -eu; [ $(id -u) = 0 ] || exit 0; ';\n\t            // not an IPA setup? cannot handle this\n\t            script += 'type ipa >/dev/null 2>&1 || exit 0; ';\n\t\n\t            script += 'HOST=$(hostname -f); ';\n\t\n\t            // IPA operations require auth; read password from stdin to avoid quoting issues\n\t            // if kinit fails, we can't handle this setup, exit cleanly\n\t            script += 'kinit ' + user + '@' + kerberos.RealmName + ' || exit 0; ';\n\t\n\t            // create a kerberos Service Principal Name for cockpit-ws, unless already present\n\t            script += 'service=\"HTTP/${HOST}@' + kerberos.RealmName + '\"; ' +\n\t                      'ipa service-show \"$service\" || ipa service-add --ok-as-delegate=true --force \"$service\"; ';\n\t\n\t            // add cockpit-ws key, unless already present\n\t            script += 'mkdir -p /etc/cockpit; ';\n\t            script += 'klist -k /etc/cockpit/krb5.keytab | grep -qF \"$service\" || ' +\n\t                      'ipa-getkeytab -p HTTP/$HOST -k /etc/cockpit/krb5.keytab; ';\n\t\n\t            // request an SSL certificate; be sure to not leave traces of the .key on disk or\n\t            // get race conditions with file permissions; also, ipa-getcert\n\t            // cannot directly write into /etc/cockpit due to SELinux\n\t            script += 'if ipa-getcert request -f /run/cockpit/ipa.crt -k /run/cockpit/ipa.key -K HTTP/$HOST -w -v; then ' +\n\t                      '    mv /run/cockpit/ipa.crt /etc/cockpit/ws-certs.d/10-ipa.cert; ' +\n\t                      '    cat /run/cockpit/ipa.key  >> /etc/cockpit/ws-certs.d/10-ipa.cert; ' +\n\t                      '    rm -f /run/cockpit/ipa.key; ' +\n\t                      'fi; ';\n\t\n\t            // use a temporary keytab to avoid interfering with the system one\n\t            var proc = cockpit.script(script, [], { superuser: \"require\", err: \"message\",\n\t                                                    environ: [\"KRB5CCNAME=/run/cockpit/keytab-setup\"] });\n\t            proc.input(password);\n\t            return proc;\n\t        }\n\t\n\t        // Remove SPN from cockpit-ws keytab and SSL cert\n\t        function cleanup_ws_credentials() {\n\t            // skip this on remote ssh hosts, only set up ws hosts\n\t            if (cockpit.transport.host !== \"localhost\")\n\t                return cockpit.resolve();\n\t\n\t            var dfd = cockpit.defer();\n\t\n\t            kerberos = realmd.proxy(KERBEROS, realm.path);\n\t            kerberos.wait()\n\t                .done(function() {\n\t                    // ipa-rmkeytab needs root\n\t                    var script = 'set -eu; [ $(id -u) = 0 ] || exit 0; ';\n\t\n\t                    // clean up keytab\n\t                    script += '[ ! -e /etc/cockpit/krb5.keytab ] || ipa-rmkeytab -k /etc/cockpit/krb5.keytab -p ' +\n\t                        '\"HTTP/$(hostname -f)@' + kerberos.RealmName + '\"; ';\n\t\n\t                    // clean up certificate\n\t                    script += 'ipa-getcert stop-tracking -f /run/cockpit/ipa.crt -k /run/cockpit/ipa.key; ' +\n\t                              'rm -f /etc/cockpit/ws-certs.d/10-ipa.cert; ';\n\t\n\t                    cockpit.script(script, [], { superuser: \"require\", err: \"message\" })\n\t                        .done(dfd.resolve)\n\t                        .fail(function(ex) {\n\t                            console.log(\"Failed to clean up SPN from /etc/cockpit/krb5.keytab:\", JSON.stringify(ex));\n\t                            dfd.resolve();\n\t                        });\n\t                })\n\t                .fail(dfd.resolve); // no Kerberos domain? nevermind then\n\t\n\t            return dfd.promise();\n\t        }\n\t\n\t        var unique = 1;\n\t\n\t        function perform() {\n\t            var id = \"cockpit-\" + unique;\n\t            unique += 1;\n\t            busy(id);\n\t            $(\".realms-op-error\").hide();\n\t\n\t            ensure()\n\t                .fail(function() {\n\t                    busy(null);\n\t                })\n\t                .done(function(realm) {\n\t                    var options = { operation: cockpit.variant('s', id) };\n\t\n\t                    $(\".realms-op-message\").empty();\n\t                    $(\".realms-op-diagnostics\").empty().hide();\n\t\n\t                    var diagnostics = \"\";\n\t                    var sub = realmd.subscribe({ member: \"Diagnostics\" }, function(path, iface, signal, args) {\n\t                        if (args[1] === id) {\n\t                            diagnostics += args[0];\n\t                        }\n\t                    });\n\t\n\t                    var call, computer_ou;\n\t                    if (mode == 'join') {\n\t                        computer_ou = $(\".realms-join-computer-ou\").val();\n\t                        if (computer_ou)\n\t                            options[\"computer-ou\"] = cockpit.variant('s', computer_ou);\n\t                        if (kerberos_membership.valid) {\n\t                            call = kerberos_membership.call(\"Join\", [ credentials(), options ]).then(install_ws_credentials);\n\t                        } else {\n\t                            busy(null);\n\t                            $(\".realms-op-message\").empty().text(_(\"Joining this domain is not supported\"));\n\t                            $(\".realms-op-error\").show();\n\t                        }\n\t                    } else if (mode == 'leave') {\n\t                        call = cleanup_ws_credentials().then(function() { realm.Deconfigure(options); });\n\t                    }\n\t\n\t                    if (!call) {\n\t                        sub.remove();\n\t                        return;\n\t                    }\n\t\n\t                    call\n\t                        .fail(function(ex) {\n\t                            busy(null);\n\t                            if (ex.name == \"org.freedesktop.realmd.Error.Cancelled\") {\n\t                                $(dialog).modal(\"hide\");\n\t                            } else {\n\t                                console.log(\"Failed to \" + mode + \" domain: \" + realm.Name + \": \" + ex);\n\t                                $(\".realms-op-message\").empty().text(ex + \" \");\n\t                                $(\".realms-op-error\").show();\n\t                                if (diagnostics) {\n\t                                    $(\".realms-op-message\")\n\t                                        .append('<a class=\"realms-op-more-diagnostics\">' + _(\"More\") + '</a>');\n\t                                    $(\".realms-op-diagnostics\").text(diagnostics);\n\t                                }\n\t                            }\n\t                        })\n\t                        .done(function() {\n\t                            busy(null);\n\t                            $(dialog).modal(\"hide\");\n\t                        })\n\t                        .always(function() {\n\t                            sub.remove();\n\t                        });\n\t                });\n\t        }\n\t\n\t        function busy(id) {\n\t            operation = id;\n\t            update();\n\t        }\n\t\n\t        function cancel() {\n\t            if (operation) {\n\t                realmd.call(MANAGER, SERVICE, \"Cancel\", [ operation ]);\n\t                busy(null);\n\t                return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        update();\n\t        return dialog;\n\t    }\n\t\n\t    function setup() {\n\t        var $ = jQuery;\n\t\n\t        var element = $(\"<span>\");\n\t        var link = $(\"<a>\");\n\t        element.append(link);\n\t\n\t        var realmd = cockpit.dbus(\"org.freedesktop.realmd\");\n\t        realmd.watch(MANAGER);\n\t\n\t        var realms = realmd.proxies(\"org.freedesktop.realmd.Realm\");\n\t\n\t        /* The realm we are joined to */\n\t        var joined = null;\n\t\n\t        var permission = null;\n\t\n\t        $(realmd).on(\"close\", function(ev, options) {\n\t            var message;\n\t            if (options.problem == \"not-found\")\n\t                message = _(\"Cannot join a domain because realmd is not available on this system\");\n\t            else\n\t                message = cockpit.message(options);\n\t            link.addClass(\"disabled\");\n\t            element\n\t                .attr('title', message)\n\t                .tooltip({ container: 'body'})\n\t                .tooltip('fixTitle');\n\t            realmd = null;\n\t        });\n\t\n\t        realms.wait(function() {\n\t            if (!realmd)\n\t                return;\n\t\n\t            permission = cockpit.permission({ admin: true });\n\t\n\t            function update_realm_privileged() {\n\t                $(link).update_privileged(permission,\n\t                        cockpit.format(_(\"The user <b>$0</b> is not permitted to modify realms\"),\n\t                            permission.user ? permission.user.name : ''), null, element);\n\t            }\n\t\n\t            $(permission).on(\"changed\", update_realm_privileged);\n\t        });\n\t\n\t        function update_realms() {\n\t            var text, path, realm;\n\t            joined = [];\n\t            for (path in realms) {\n\t                realm = realms[path];\n\t                if (realm.Configured)\n\t                    joined.push(realm);\n\t            }\n\t\n\t            if (!joined || !joined.length)\n\t                text = _(\"Join Domain\");\n\t            else\n\t                text = joined.map(function(x) { return x.Name; }).join(\", \");\n\t            link.text(text);\n\t        }\n\t\n\t        $(realms).on(\"changed\", update_realms);\n\t        update_realms();\n\t\n\t        var dialog = null;\n\t        link.on(\"click\", function() {\n\t            if (dialog)\n\t                $(dialog).remove();\n\t\n\t            if (joined && joined.length)\n\t                dialog = instance(realmd, 'leave', joined[0], link);\n\t            else\n\t                dialog = instance(realmd, 'join', null, link);\n\t\n\t            $(dialog)\n\t                .attr(\"id\", \"realms-op\")\n\t                .appendTo(\"body\")\n\t                .modal('show');\n\t            cockpit.translate();\n\t        });\n\t\n\t        element.close = function close() {\n\t            if (dialog)\n\t                dialog.cancel();\n\t            element.remove();\n\t            if (realmd)\n\t                realmd.close();\n\t            if (permission)\n\t                permission.close();\n\t        };\n\t\n\t        return element;\n\t    }\n\t\n\t    /* Hook this in when loaded */\n\t    jQuery(function() {\n\t        var placeholder = jQuery(\"#system-info-domain\");\n\t        if (placeholder.length) {\n\t            placeholder.find(\".button-location\").append(setup());\n\t            placeholder.removeAttr('hidden');\n\t        }\n\t    });\n\t\n\t    return module;\n\t}());\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = jQuery;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(3);\n\t    var cockpit = __webpack_require__(4);\n\t\n\t    var unique_number = 0;\n\t    function unique() {\n\t        unique_number += 1;\n\t        return \"unique\" + -(new Date()) + -unique_number;\n\t    }\n\t\n\t    /* Dialog Patterns */\n\t\n\t    function clear_errors(sel) {\n\t        sel.find(\".dialog-error\").remove();\n\t        sel.find(\".has-error\").removeClass(\"has-error\");\n\t        sel.find(\".dialog-wrapper\").off(\".dialog-error\");\n\t        sel.off(\".dialog-error\");\n\t    }\n\t\n\t    function field_error(target, error) {\n\t        var wrapper = target.parent();\n\t        var next, refresh;\n\t\n\t        if (!wrapper.is(\".dialog-wrapper\")) {\n\t            wrapper = $(\"<div class='dialog-wrapper'>\").insertBefore(target);\n\t\n\t            /*\n\t             * Some bootstrap plugins replace html controls with their own\n\t             * stuff, so we have to account for that here.\n\t             */\n\t\n\t            next = target.next();\n\t            if (next.is(\".bootstrap-select\") && next.selectpicker) {\n\t                next.remove();\n\t                refresh = next.selectpicker;\n\t            }\n\t\n\t            target.remove().appendTo(wrapper);\n\t\n\t            if (refresh)\n\t                refresh.call(target);\n\t        }\n\t\n\t        var message;\n\t        if (error.message)\n\t            message = $(\"<div class='dialog-error help-block'>\").text(error.message);\n\t        wrapper.addClass(\"has-error\").append(message);\n\t\n\t        if (!wrapper.hasClass(\"error-keep\")) {\n\t            wrapper.on(\"keypress.dialog-error change.dialog-error\", function() {\n\t                wrapper.removeClass(\"has-error\")\n\t                    .find(\".dialog-error.help-block\").css(\"visibility\", \"hidden\");\n\t            });\n\t        }\n\t    }\n\t\n\t    function global_error(sel, error) {\n\t        var alert = $(\"<div class='alert alert-danger dialog-error'>\");\n\t        var text = error.message || error.toString();\n\t        alert.text(text);\n\t        $(\"<span class='fa fa-exclamation-triangle'>\").prependTo(alert);\n\t\n\t        /* Always log global dialog errors for easier debugging */\n\t        console.warn(text);\n\t\n\t        var footer = sel.find(\".modal-footer\");\n\t        if (footer.length)\n\t            alert.prependTo(footer);\n\t        else\n\t            alert.appendTo(sel);\n\t    }\n\t\n\t    function display_errors(sel, errors) {\n\t        clear_errors(sel);\n\t\n\t        /* The list of errors can also be passed as an array */\n\t        if (errors.length == 1 && $.isArray(errors[0]))\n\t            errors = errors[0];\n\t\n\t        var any = false;\n\t        errors.forEach(function(error) {\n\t            var target;\n\t            if (error) {\n\t                target = sel.find(error.target);\n\t\n\t                /* Errors for a specific field added below that field */\n\t                if (target && target.length)\n\t                    field_error(target, error);\n\t                else\n\t                    global_error(sel, error);\n\t\n\t                any = true;\n\t            }\n\t        });\n\t\n\t        if (!any)\n\t            return;\n\t\n\t        /* When dialog is shown again, remove all mods */\n\t        sel.on(\"show.bs.modal.dialog-error\", function() {\n\t            clear_errors(sel);\n\t        });\n\t    }\n\t\n\t    function DialogWait(promise, handle) {\n\t        this.promise = promise;\n\t        this.disabled = [];\n\t        this.handle = handle;\n\t    }\n\t\n\t    function clear_wait(sel) {\n\t        var data = sel.data(\"dialog-wait\");\n\t        sel.data(\"dialog-wait\", null);\n\t\n\t        sel.find(\".dialog-wait-ct\").remove();\n\t        sel.find(\".btn\").off(\".dialog-wait\");\n\t        sel.off(\".dialog-wait\");\n\t\n\t        if (data) {\n\t            data.disabled.forEach(function(ctl) {\n\t                ctl.removeAttr(\"disabled\");\n\t            });\n\t        }\n\t    }\n\t\n\t    function display_wait(sel, promise, handle) {\n\t        clear_wait(sel);\n\t\n\t        if (!promise) {\n\t            if (handle)\n\t                sel.modal(\"hide\");\n\t            return sel;\n\t        }\n\t\n\t        /* Clear all errors in the dialog */\n\t        if (handle)\n\t            display_errors(sel, []);\n\t\n\t        var wait = $(\"<div class='dialog-wait-ct pull-left'>\");\n\t        $(\"<div class='spinner spinner-sm'>\").appendTo(wait);\n\t        var message = $(\"<span>\").appendTo(wait);\n\t\n\t        sel.find(\".modal-footer button\").first().before(wait);\n\t\n\t        var data = new DialogWait(promise, handle);\n\t        sel.data(\"dialog-wait\", data);\n\t\n\t        var cancellation = promise.cancel || promise.close;\n\t        var cancelled = false;\n\t\n\t        /* Disable everything and stash previous disabled state */\n\t        var controls = sel.find(\".form-control\").add(\".btn\", sel);\n\t        if (cancellation)\n\t            controls = controls.not(\"[data-dismiss]\").not(\".btn-cancel\");\n\t        controls.each(function() {\n\t            var ctl = $(this);\n\t            if (!ctl.attr(\"disabled\")) {\n\t                data.disabled.push(ctl);\n\t                ctl.attr(\"disabled\", \"disabled\");\n\t            }\n\t        });\n\t\n\t        sel.find(\".btn[data-dismiss], .btn-cancel\").on(\"click.dialog-wait\", function() {\n\t            cancelled = true;\n\t            if (cancellation)\n\t                cancellation.apply(promise);\n\t            return false;\n\t        });\n\t\n\t        /* When dialog is shown again, remove all mods */\n\t        sel.on(\"hide.bs.modal.dialog-wait\", function() {\n\t            clear_wait(sel);\n\t        });\n\t\n\t        /*\n\t         * There is no way to remove a callback from a promise\n\t         * so we have to be careful to only react if still\n\t         * processing the same promise.\n\t         */\n\t        function restore() {\n\t            var state, data = sel.data(\"dialog-wait\");\n\t            if (data && data.promise === promise) {\n\t                clear_wait(sel);\n\t                state = promise.state();\n\t                if (cancelled || (state == \"resolved\" && data.handle))\n\t                    sel.modal('hide');\n\t                else if (state == \"rejected\" && data.handle)\n\t                    display_errors(sel, [ arguments[0] ]);\n\t            }\n\t        }\n\t\n\t        function update(arg) {\n\t            var data = sel.data(\"dialog-wait\");\n\t            if (data && data.promise === promise) {\n\t                if (typeof arg !== \"string\")\n\t                    arg = \"\";\n\t                message.text(arg);\n\t            }\n\t        }\n\t\n\t        promise\n\t            .always(restore)\n\t            .progress(update);\n\t\n\t        return sel;\n\t    }\n\t\n\t    $.fn.dialog = function dialog(action /* ... */) {\n\t        if (action === \"failure\")\n\t            return display_errors(this, Array.prototype.slice.call(arguments, 1));\n\t        else if (action === \"wait\")\n\t            return display_wait(this, arguments[1]);\n\t        else if (action === \"promise\")\n\t            return display_wait(this, arguments[1], true);\n\t        else\n\t            console.warn(\"unknown dialog action: \" + action);\n\t    };\n\t\n\t    window.addEventListener(\"hashchange\", function() {\n\t        $(\".modal\").modal(\"hide\");\n\t    });\n\t\n\t    /*\n\t     * OnOff switch pattern\n\t     */\n\t\n\t    function onoff_refresh(sel) {\n\t        /* During testing, no Cockpit dependency */\n\t        var _ = cockpit.gettext || function(x) { return x; };\n\t\n\t        sel = sel.find(\".btn-onoff-ct\").addBack().filter(\".btn-onoff-ct\");\n\t        sel.each(function(x, el) {\n\t            var self = $(el)\n\t                .attr(\"data-toggle\", \"buttons\")\n\t                .addClass(\"btn-group\");\n\t            var value = self.onoff(\"value\");\n\t            var buttons = self.find(\".btn\");\n\t            var name = self.find(\"input\").first().attr(\"name\") || unique();\n\t            var i, input, text;\n\t            for (i = buttons.length; i < 2; i++) {\n\t                input = $('<input type=\"radio\" autocomplete=\"off\">');\n\t                text = document.createTextNode(i === 0 ? _(\"On\") : _(\"Off\"));\n\t                self.append($('<label class=\"btn\">').append(input, text));\n\t                buttons = null;\n\t            }\n\t            buttons = buttons || self.find(\".btn\");\n\t            buttons.find(\"input\").attr(\"name\", name);\n\t            onoff_change(self, !!value);\n\t        });\n\t        return sel;\n\t    }\n\t\n\t    function onoff_value(sel) {\n\t        return sel.find(\".btn\").first().hasClass(\"active\");\n\t    }\n\t\n\t    function onoff_change(sel, value) {\n\t        return sel.each(function(i, el) {\n\t            var buttons = $(el).find(\".btn\");\n\t            buttons.first().toggleClass(\"active\", !!value).find(\"input\").prop(\"checked\", !!value);\n\t            buttons.last().toggleClass(\"active\", !value).find(\"input\").prop(\"checked\", !value);\n\t        });\n\t    }\n\t\n\t    $.fn.onoff = function onoff(action /* ... */) {\n\t        if (arguments.length === 0 || action == \"refresh\") {\n\t            return onoff_refresh(this);\n\t        } else if (action === \"value\") {\n\t            if (arguments.length === 1)\n\t                return onoff_value(this);\n\t            else\n\t                return onoff_change(this, arguments[1]);\n\t        } else if (action == \"disabled\") {\n\t            return this.find(\".btn\").toggleClass(\"disabled\", arguments[1]);\n\t        } else {\n\t            console.warn(\"unknown switch action: \" + action);\n\t        }\n\t    };\n\t\n\t    /* ----------------------------------------------------------------------------\n\t     * Sliders\n\t     *\n\t     * <div class=\"slider\" value=\"0.5\">\n\t     *    <div class=\"slider-bar\">\n\t     *        <div class=\"slider-thumb\"></div>\n\t     *    </div>\n\t     *    <div class=\"slider-bar\">\n\t     *        <!-- optional left overs -->\n\t     *    </div>\n\t     * </div>\n\t     *\n\t     * A slider control. The first div.slider-bar is the one that is resized.\n\t     * The value will be bounded between 0 and 1 as a floating point number.\n\t     *\n\t     * The following div.slider-bar if present is resized to fill the remainder\n\t     * of the slider if not given a specific size. You can put more div.slider-bar\n\t     * inside it to reflect squashing other prevous allocations.\n\t     *\n\t     * If the following div.slider-bar have a width specified, then the\n\t     * slider supports the concept of overflowing. If the slider overflows\n\t     * it will get the .slider-warning class and go a bit red.\n\t     *\n\t     * On document creation any div.slider are automatically turned into\n\t     * Bar graphs.\n\t     *\n\t     * Slider has the following extra read/write properties:\n\t     *\n\t     * .value: the floating point value the slider is set to.\n\t     * .disabled: whether to display slider as disabled and refuse interacton.\n\t     *\n\t     * Slider has this event:\n\t     *\n\t     * on('change'): fired when the slider changes, passes value as additional arg.\n\t     */\n\t\n\t    function resize_flex(slider, flex, total, part) {\n\t        var value = 0;\n\t        if (part > total)\n\t            value = 1;\n\t        else if (part < 0 || isNaN(part))\n\t            value = 0;\n\t        else if (!isNaN(total) && total > 0 && part >= 0)\n\t            value = (part / total);\n\t        $(flex).css('width', (value * 100) + \"%\").\n\t            next(\"div\").css('margin-left', $(flex).css('width'));\n\t\n\t        /* Set the property and the attribute */\n\t        slider.value = value;\n\t    }\n\t\n\t    function update_value(slider) {\n\t        resize_flex(slider, $(slider).children(\"div.slider-bar\").first()[0], 1, slider.value);\n\t    }\n\t\n\t    function check_overflow(slider) {\n\t        $(slider).toggleClass(\"slider-warning\",\n\t                              slider.offsetWidth < slider.scrollWidth);\n\t    }\n\t\n\t    function setup_slider(slider) {\n\t        $(slider).attr('unselectable', 'on');\n\t\n\t        Object.defineProperty(slider, \"value\", {\n\t            get: function() {\n\t                return parseFloat(this.getAttribute(\"value\"));\n\t            },\n\t            set: function(v) {\n\t                var s = String(v);\n\t                if (s != this.getAttribute(\"value\")) {\n\t                    this.setAttribute(\"value\", v);\n\t                    update_value(slider);\n\t                    check_overflow(slider);\n\t                }\n\t            }\n\t        });\n\t\n\t        Object.defineProperty(slider, \"disabled\", {\n\t            get: function() {\n\t                if (!this.hasAttribute(\"disabled\"))\n\t                    return false;\n\t                return this.getAttribute(\"disabled\").toLowerCase() != \"false\";\n\t            },\n\t            set: function(v) {\n\t                this.setAttribute(\"disabled\", v ? \"true\" : \"false\");\n\t            }\n\t        });\n\t\n\t        update_value(slider);\n\t        check_overflow(slider);\n\t\n\t        $(slider).on(\"change\", function() {\n\t            update_value(slider);\n\t            $(slider).toggleClass(\"slider-disabled\", slider.disabled);\n\t        });\n\t\n\t        if (slider.disabled)\n\t            $(slider).addClass(\"slider-disabled\");\n\t\n\t        $(slider).on(\"mousedown\", function(ev) {\n\t            if (slider.disabled)\n\t                return true; /* default action */\n\t            var flex;\n\t            var offset = $(slider).offset().left;\n\t            if ($(ev.target).hasClass(\"slider-thumb\")) {\n\t                var hitx  = (ev.offsetX || ev.clientX - $(ev.target).offset().left);\n\t                offset += (hitx - $(ev.target).outerWidth() / 2);\n\t                flex = $(ev.target).parent()[0];\n\t            } else {\n\t                flex = $(slider).children(\"div.slider-bar\").first()[0];\n\t                resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n\t                $(slider).trigger(\"change\", [slider.value]);\n\t                check_overflow(slider);\n\t            }\n\t\n\t            $(document).\n\t                on(\"mousemove.slider\", function(ev) {\n\t                    resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n\t                    $(slider).trigger(\"change\", [slider.value]);\n\t                    check_overflow(slider);\n\t                    return false;\n\t                }).\n\t                on(\"mouseup.slider\", function(ev) {\n\t                    $(document).\n\t                        off(\"mousemove.slider\").\n\t                        off(\"mouseup.slider\");\n\t                    return false;\n\t                });\n\t            return false; /* no default action */\n\t        });\n\t    }\n\t\n\t    function setup_sliders() {\n\t        $(\"div.slider\").each(function() {\n\t            setup_slider(this);\n\t        });\n\t    }\n\t\n\t    $.fn.slider = function Slider(action) {\n\t        var sel = this;\n\t        if (arguments.length === 0 || action == \"refresh\") {\n\t            sel.each(function() {\n\t                setup_slider(this);\n\t            });\n\t            return sel;\n\t        } else {\n\t            console.warn(\"unknown slider action: \" + action);\n\t        }\n\t    };\n\t\n\t    $(document).ready(setup_sliders);\n\t\n\t    /* -----------------------------------------------------------------------------\n\t     * Privileged UI actions.\n\t     */\n\t\n\t    // placement is optional, \"top\", \"left\", \"bottom\", \"right\"\n\t    // by default, tooltip is attached to \"this\" element; can be attached to\n\t    // another one with setting \"tooltip_element\" (for <a> links)\n\t    $.fn.update_privileged = function update_privileged(perm, denied_message, placement, tooltip_element) {\n\t        var allowed = (perm.allowed !== false);\n\t        var selector = this;\n\t        if (!tooltip_element)\n\t            tooltip_element = $(this);\n\t\n\t        selector.each(function() {\n\t            // preserve old title first time to use when allowed\n\t            // activate tooltip\n\t            var allowed_key = 'allowed-title';\n\t            if (typeof $(this).data(allowed_key) === 'undefined' ||\n\t                   $(this).data(allowed_key) === false)\n\t                $(this).data(allowed_key, $(this).attr('title') || \"\");\n\t\n\t            var options = { html: true };\n\t            if (placement)\n\t                options['placement'] = placement;\n\t\n\t            tooltip_element.tooltip(options);\n\t\n\t            if ($(this).hasClass(\"disabled\") === allowed) {\n\t              $(this).toggleClass(\"disabled\", !allowed);\n\t              tooltip_element.attr('data-original-title', null);\n\t\n\t              if (allowed)\n\t                  tooltip_element.attr('title', $(this).data(allowed_key));\n\t              else\n\t                  tooltip_element.attr('title', denied_message);\n\t              tooltip_element.tooltip('fixTitle');\n\t            }\n\t            $(this).attr('data-stable', 'yes');\n\t        });\n\t\n\t        return selector;\n\t    };\n\t}());\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" data-backdrop=\\\"static\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title realms-op-title\\\"></h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <div class=\\\"realms-op-fields\\\">\\n          <p class=\\\"realms-op-leave-only-row\\\"></p>\\n          <table class=\\\"form-table-ct realms-op-form\\\">\\n            <tr class=\\\"realms-op-join-only-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Domain Address</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-address\\\" type=\\\"text\\\" value=\\\"\\\"/>\\n              </td>\\n              <td class=\\\"realms-op-zero-width\\\">\\n                <div class=\\\"realms-op-address-spinner\\\" hidden>\\n                  <span class=\\\"spinner spinner-xs spinner-inline\\\"></span>\\n                </div>\\n                <div class=\\\"realms-op-address-error\\\" hidden>\\n                  <span class=\\\"fa fa-lg fa-exclamation\\\"></span>\\n                </div>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row\\\">\\n              <td class=\\\"header\\\"></td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realm-active-directory-only\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Computer OU</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-computer-ou\\\" type=\\\"text\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-authentification-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Authentication</label></td>\\n              <td>\\n                  <div class=\\\"btn-group bootstrap-select dropdown form-control realms-op-auth\\\">\\n                      <button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\">\\n                          <span class=\\\"pull-left\\\"></span>\\n                          <div class=\\\"caret\\\"></div>\\n                      </button>\\n                      <ul class=\\\"dropdown-menu\\\">\\n                      </ul>\\n                  </div>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-user-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">User Name</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-user\\\" type=\\\"text\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-user-password-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">User Password</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-user-password\\\" type=\\\"password\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-admin-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Domain Administrator Name</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-admin\\\" type=\\\"text\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-admin-password-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Domain Administrator Password</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-admin-password\\\" type=\\\"password\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-otp-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">One Time Password</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-ot-password\\\" type=\\\"password\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr>\\n              <td colspan=\\\"3\\\">\\n                <pre class=\\\"realms-op-diagnostics\\\" hidden></pre>\\n              </td>\\n            </tr>\\n          </table>\\n        </div>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <div class=\\\"realms-op-error alert alert-danger\\\" hidden>\\n          <span class=\\\"fa fa-exclamation-triangle\\\"></span>\\n          <span class=\\\"realms-op-message\\\"></span>\\n        </div>\\n        <div class=\\\"realms-op-spinner spinner pull-left\\\"></div>\\n        <span class=\\\"realms-op-wait-message\\\" translatable=\\\"yes\\\" hidden>This may take a while</span>\\n        <button class=\\\"btn btn-default realms-op-cancel\\\" translatable=\\\"yes\\\">Cancel</button>\\n        <button class=\\\"btn btn-primary realms-op-apply\\\" translatable=\\\"yes\\\">Next</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// realmd/domain.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 81b84b95c3a4c71da4af","'use strict';\n\n(function() {\n    \"use strict\";\n\n    var jQuery = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n    require(\"patterns\");\n\n    var _ = cockpit.gettext;\n\n    var MANAGER = \"/org/freedesktop/realmd\";\n\n    var SERVICE = \"org.freedesktop.realmd.Service\";\n    var PROVIDER = \"org.freedesktop.realmd.Provider\";\n    var KERBEROS = \"org.freedesktop.realmd.Kerberos\";\n    var KERBEROS_MEMBERSHIP = \"org.freedesktop.realmd.KerberosMembership\";\n    var REALM = \"org.freedesktop.realmd.Realm\";\n\n    function instance(realmd, mode, realm, button) {\n        var dialog = jQuery.parseHTML(require(\"raw!./operation.html\"))[0];\n\n        /* Scope the jQuery selector to our dialog */\n        var $ = function(selector, context) {\n            return new jQuery.fn.init(selector, context || dialog);\n        };\n        $.fn = $.prototype = jQuery.fn;\n        jQuery.extend($, jQuery);\n\n        var operation = null;\n        var checking = null;\n        var checked = null;\n        var kerberos_membership = null;\n        var kerberos = null;\n\n        /* If in an operation first time cancel is clicked, cancel operation */\n        $(\".realms-op-cancel\").on(\"click\", function() {\n            if (!cancel())\n                $(dialog).modal('hide');\n        });\n\n        /* When we're hidden some other way, cancel any operations */\n        $(dialog).on(\"hide.bs.modal\", function() {\n            cancel();\n        });\n\n        $(\".realms-op-apply\").on(\"click\", perform);\n        $(\".realms-op-field\")\n            .on(\"keydown\", function(ev) {\n                if (ev.which == 13)\n                    perform();\n            });\n\n        $(dialog).on(\"click\", \".realms-op-more-diagnostics\", function() {\n            $(\".realms-op-error\").hide();\n            $(\".realms-op-diagnostics\").show();\n        });\n\n        var timeout = null;\n        $(\".realms-op-address\").on(\"keyup change\", function() {\n            if ($(\".realms-op-address\").val() != checked) {\n                $(\".realms-op-address-error\").hide();\n                window.clearTimeout(timeout);\n                timeout = window.setTimeout(check, 1000);\n            }\n        });\n\n        var auth = null;\n        function auth_changed(item) {\n            auth = item.attr('data-value');\n            $(\".realms-op-auth span\").text(item.text());\n            var parts = (auth || \"\").split(\"/\");\n            var type = parts[0];\n            var owner = parts[1];\n\n            $(\".realms-op-admin-row\").hide();\n            $(\".realms-op-admin-password-row\").hide();\n            $(\".realms-op-user-row\").hide();\n            $(\".realms-op-user-password-row\").hide();\n            $(\".realms-op-otp-row\").hide();\n\n            if (type == \"password\" && owner == \"administrator\") {\n                $(\".realms-op-admin-row\").show();\n                $(\".realms-op-admin-password-row\").show();\n            } else if (type == \"password\" && owner == \"user\") {\n                $(\".realms-op-user-row\").show();\n                $(\".realms-op-user-password-row\").show();\n            } else if (type == \"secret\") {\n                $(\".realms-op-otp-row\").show();\n            }\n        }\n\n        $(\".realms-op-auth\").on('click', 'li', function() {\n            auth_changed($(this));\n        });\n\n        var title, label, text;\n        if (mode == 'join') {\n            title = _(\"page-title\", _(\"Join a Domain\"));\n            label = _(\"Join\");\n            $(\".realms-op-join-only-row\").show();\n            $(\".realms-op-leave-only-row\").hide();\n            check(\"\");\n        } else {\n            title = _(\"page-title\", _(\"Leave Domain\"));\n            label = _(\"Leave\");\n            text = _(\"Are you sure you want to leave this domain?\");\n            if (realm && realm.Name) {\n                text = cockpit.format(_(\"Are you sure you want to leave the '$0' domain?\"), realm.Name);\n            }\n\n            text = cockpit.format(_(\"$0 Only users with local credentials will be able to log into this machine. This may also effect other services as DNS resolution settings and the list of trusted CAs may change.\"), text);\n\n            $(\".realms-op-leave-only-row\").text(text);\n            $(\".realms-op-join-only-row\").hide();\n            $(\".realms-op-leave-only-row\").show();\n        }\n\n        $(\".realms-op-title\").text(title);\n        $(\".realms-op-apply\").text(label);\n        $(\".realms-op-field\").val(\"\");\n\n        function check(name) {\n            var dfd = $.Deferred();\n\n            if (name === undefined)\n                name = $(\".realms-op-address\").val();\n\n            if (name)\n                $(\".realms-op-address-spinner\").show();\n\n            dfd.always(function() {\n                if (name)\n                    $(\".realms-op-address-spinner\").hide();\n            });\n\n            realmd.call(MANAGER, PROVIDER, \"Discover\", [ name, { } ])\n                .always(function() {\n\n                    if ($(\".realms-op-address\").val() != name) {\n                        dfd.reject();\n                        check();\n                        return;\n                    }\n\n                    var error, result = [], path;\n                    if (this.state() == \"rejected\") {\n                        error = arguments[0];\n                        $(\".realms-op-message\")\n                            .empty()\n                            .text(error.message);\n                        dfd.reject(error);\n                    }\n\n                    var message;\n                    if (arguments[0][1])\n                        result = arguments[0][1];\n                    path = result[0]; /* the first realm */\n\n                    if (!path) {\n                        if (name) {\n                            message = cockpit.format(_(\"Domain $0 could not be contacted\"), name);\n                            $(\".realms-op-address-error\").show().attr('title', message);\n                        }\n\n                        realm = null;\n                        kerberos_membership = null;\n                        kerberos = null;\n\n                        dfd.reject(new Error(message));\n                    } else {\n                        kerberos_membership = realmd.proxy(KERBEROS_MEMBERSHIP, path);\n                        $(kerberos_membership).on(\"changed\", update);\n\n                        kerberos = realmd.proxy(KERBEROS, path);\n\n                        realm = realmd.proxy(REALM, path);\n                        $(realm).on(\"changed\", update);\n                        realm.wait(function() {\n                            dfd.resolve(realm);\n                        });\n                    }\n\n                    update();\n                });\n\n            checking = dfd.promise();\n            checked = name;\n            return checking;\n        }\n\n        function ensure() {\n            if (mode != 'join') {\n                var dfd = $.Deferred();\n                dfd.resolve(realm);\n                return dfd.promise();\n            }\n\n            if ($(\".realms-op-address\").val() === checked) {\n                if (checking)\n                    return checking;\n            }\n\n            return check();\n        }\n\n        /*\n         * The realmd dbus interface has an a(ss) Details\n         * property. Lookup the right value for the given\n         * field key.\n         */\n        function find_detail(realm, field) {\n            var result = null;\n            if (realm && realm.Details) {\n                realm.Details.forEach(function(value) {\n                    if (value[0] === field)\n                        result = value[1];\n                });\n            }\n            return result;\n        }\n\n\n        function update() {\n            var message;\n\n            $(\".realms-op-spinner\").toggle(!!operation);\n            $(\".realms-op-wait-message\").toggle(!!operation);\n            $(\".realms-op-field\").prop('disabled', !!operation);\n            $(\".realms-op-apply\").prop('disabled', !!operation);\n            $(\".realm-active-directory-only\").hide();\n\n            var server = find_detail(realm, \"server-software\");\n\n            if (realm && kerberos_membership && !kerberos_membership.valid) {\n                message = cockpit.format(_(\"Domain $0 is not supported\"), realm.Name);\n                $(\".realms-op-address-spinner\").hide();\n                $(\".realms-op-address-error\").show().attr('title', message);\n            } else {\n                $(\".realms-op-address-error\").hide();\n            }\n\n            if (operation)\n                button.attr('disabled', 'disabled');\n            else\n                button.removeAttr('disabled');\n\n            if (mode != 'join')\n                return;\n\n            $(\".realm-active-directory-only\").toggle(!server || server == \"active-directory\");\n\n            if (realm && realm.Name && !$(\".realms-op-address\")[0].placeholder) {\n                $(\".realms-op-address\")[0].placeholder = cockpit.format(_(\"e.g. \\\"$0\\\"\"), realm.Name);\n            }\n\n            var placeholder = \"\";\n            if (kerberos_membership) {\n                if (kerberos_membership.SuggestedAdministrator)\n                    placeholder = cockpit.format(_(\"e.g. \\\"$0\\\"\"), kerberos_membership.SuggestedAdministrator);\n            }\n            $(\".realms-op-admin\")[0].placeholder = placeholder;\n\n            var list = $(\".realms-op-auth .dropdown-menu\");\n            var supported = (kerberos_membership && kerberos_membership.SupportedJoinCredentials) || [ ];\n            supported.push([\"password\", \"administrator\"]);\n\n            var first = true;\n            var count = 0;\n\n            function add_choice(owner, type, text) {\n                var item, choice, i, length = supported.length;\n                for (i = 0; i < length; i++) {\n                    if ((!owner || owner == supported[i][1]) && type == supported[i][0]) {\n                        choice = type + \"/\" + supported[i][1];\n                        item = $(\"<li>\").attr(\"data-value\", choice).append($(\"<a>\").text(text));\n                        list.append(item);\n                        if (first) {\n                            auth_changed(item);\n                            first = false;\n                        }\n                        count += 1;\n                        break;\n                    }\n                }\n            }\n\n            list.empty();\n            add_choice('administrator', \"password\", _(\"Administrator Password\"));\n            add_choice('user', \"password\", _(\"User Password\"));\n            add_choice(null, \"secret\", _(\"One Time Password\"));\n            add_choice(null, \"automatic\", _(\"Automatic\"));\n            $(\".realms-authentification-row\").toggle(count > 1);\n            list.prop('disabled', !!operation).val(!first);\n        }\n\n        function credentials() {\n            var creds, secret;\n\n            var parts = (auth || \"\").split(\"/\");\n            var type = parts[0];\n            var owner = parts[1];\n\n            if (owner == \"user\" && type == \"password\") {\n                creds = [\n                    type, owner,\n                    cockpit.variant('(ss)', [ $(\".realms-op-user\").val(), $(\".realms-op-user-password\").val() ])\n                ];\n            } else if (owner == \"administrator\" && type == \"password\") {\n                creds = [\n                    type, owner,\n                    cockpit.variant('(ss)', [ $(\".realms-op-admin\").val(), $(\".realms-op-admin-password\").val() ])\n                ];\n            } else if (type == \"secret\") {\n                secret = $(\".realms-op-ot-password\").val();\n                creds = [\n                    type, owner,\n                    cockpit.variant('ay', cockpit.utf8_encoder().encode(secret))\n                ];\n            } else {\n                creds = [\n                    \"automatic\", owner,\n                    cockpit.variant('s', \"\")\n                ];\n            }\n\n            return creds;\n        }\n\n        // Request and install a kerberos keytab and an SSL certificate for cockpit-ws (with IPA)\n        // This is opportunistic: Some realms might not use IPA, or an unsupported auth mechanism\n        function install_ws_credentials() {\n            // skip this on remote ssh hosts, only set up ws hosts\n            if (cockpit.transport.host !== \"localhost\")\n                return cockpit.resolve();\n\n            if (auth !== \"password/administrator\") {\n                console.log(\"Installing kerberos keytab and SSL certificate not supported for auth mode\", auth);\n                return cockpit.resolve();\n            }\n\n            var user = $(\".realms-op-admin\").val();\n            var password = $(\".realms-op-admin-password\").val();\n\n            // ipa-getkeytab needs root to create the file, same for cert installation\n            var script = 'set -eu; [ $(id -u) = 0 ] || exit 0; ';\n            // not an IPA setup? cannot handle this\n            script += 'type ipa >/dev/null 2>&1 || exit 0; ';\n\n            script += 'HOST=$(hostname -f); ';\n\n            // IPA operations require auth; read password from stdin to avoid quoting issues\n            // if kinit fails, we can't handle this setup, exit cleanly\n            script += 'kinit ' + user + '@' + kerberos.RealmName + ' || exit 0; ';\n\n            // create a kerberos Service Principal Name for cockpit-ws, unless already present\n            script += 'service=\"HTTP/${HOST}@' + kerberos.RealmName + '\"; ' +\n                      'ipa service-show \"$service\" || ipa service-add --ok-as-delegate=true --force \"$service\"; ';\n\n            // add cockpit-ws key, unless already present\n            script += 'mkdir -p /etc/cockpit; ';\n            script += 'klist -k /etc/cockpit/krb5.keytab | grep -qF \"$service\" || ' +\n                      'ipa-getkeytab -p HTTP/$HOST -k /etc/cockpit/krb5.keytab; ';\n\n            // request an SSL certificate; be sure to not leave traces of the .key on disk or\n            // get race conditions with file permissions; also, ipa-getcert\n            // cannot directly write into /etc/cockpit due to SELinux\n            script += 'if ipa-getcert request -f /run/cockpit/ipa.crt -k /run/cockpit/ipa.key -K HTTP/$HOST -w -v; then ' +\n                      '    mv /run/cockpit/ipa.crt /etc/cockpit/ws-certs.d/10-ipa.cert; ' +\n                      '    cat /run/cockpit/ipa.key  >> /etc/cockpit/ws-certs.d/10-ipa.cert; ' +\n                      '    rm -f /run/cockpit/ipa.key; ' +\n                      'fi; ';\n\n            // use a temporary keytab to avoid interfering with the system one\n            var proc = cockpit.script(script, [], { superuser: \"require\", err: \"message\",\n                                                    environ: [\"KRB5CCNAME=/run/cockpit/keytab-setup\"] });\n            proc.input(password);\n            return proc;\n        }\n\n        // Remove SPN from cockpit-ws keytab and SSL cert\n        function cleanup_ws_credentials() {\n            // skip this on remote ssh hosts, only set up ws hosts\n            if (cockpit.transport.host !== \"localhost\")\n                return cockpit.resolve();\n\n            var dfd = cockpit.defer();\n\n            kerberos = realmd.proxy(KERBEROS, realm.path);\n            kerberos.wait()\n                .done(function() {\n                    // ipa-rmkeytab needs root\n                    var script = 'set -eu; [ $(id -u) = 0 ] || exit 0; ';\n\n                    // clean up keytab\n                    script += '[ ! -e /etc/cockpit/krb5.keytab ] || ipa-rmkeytab -k /etc/cockpit/krb5.keytab -p ' +\n                        '\"HTTP/$(hostname -f)@' + kerberos.RealmName + '\"; ';\n\n                    // clean up certificate\n                    script += 'ipa-getcert stop-tracking -f /run/cockpit/ipa.crt -k /run/cockpit/ipa.key; ' +\n                              'rm -f /etc/cockpit/ws-certs.d/10-ipa.cert; ';\n\n                    cockpit.script(script, [], { superuser: \"require\", err: \"message\" })\n                        .done(dfd.resolve)\n                        .fail(function(ex) {\n                            console.log(\"Failed to clean up SPN from /etc/cockpit/krb5.keytab:\", JSON.stringify(ex));\n                            dfd.resolve();\n                        });\n                })\n                .fail(dfd.resolve); // no Kerberos domain? nevermind then\n\n            return dfd.promise();\n        }\n\n        var unique = 1;\n\n        function perform() {\n            var id = \"cockpit-\" + unique;\n            unique += 1;\n            busy(id);\n            $(\".realms-op-error\").hide();\n\n            ensure()\n                .fail(function() {\n                    busy(null);\n                })\n                .done(function(realm) {\n                    var options = { operation: cockpit.variant('s', id) };\n\n                    $(\".realms-op-message\").empty();\n                    $(\".realms-op-diagnostics\").empty().hide();\n\n                    var diagnostics = \"\";\n                    var sub = realmd.subscribe({ member: \"Diagnostics\" }, function(path, iface, signal, args) {\n                        if (args[1] === id) {\n                            diagnostics += args[0];\n                        }\n                    });\n\n                    var call, computer_ou;\n                    if (mode == 'join') {\n                        computer_ou = $(\".realms-join-computer-ou\").val();\n                        if (computer_ou)\n                            options[\"computer-ou\"] = cockpit.variant('s', computer_ou);\n                        if (kerberos_membership.valid) {\n                            call = kerberos_membership.call(\"Join\", [ credentials(), options ]).then(install_ws_credentials);\n                        } else {\n                            busy(null);\n                            $(\".realms-op-message\").empty().text(_(\"Joining this domain is not supported\"));\n                            $(\".realms-op-error\").show();\n                        }\n                    } else if (mode == 'leave') {\n                        call = cleanup_ws_credentials().then(function() { realm.Deconfigure(options); });\n                    }\n\n                    if (!call) {\n                        sub.remove();\n                        return;\n                    }\n\n                    call\n                        .fail(function(ex) {\n                            busy(null);\n                            if (ex.name == \"org.freedesktop.realmd.Error.Cancelled\") {\n                                $(dialog).modal(\"hide\");\n                            } else {\n                                console.log(\"Failed to \" + mode + \" domain: \" + realm.Name + \": \" + ex);\n                                $(\".realms-op-message\").empty().text(ex + \" \");\n                                $(\".realms-op-error\").show();\n                                if (diagnostics) {\n                                    $(\".realms-op-message\")\n                                        .append('<a class=\"realms-op-more-diagnostics\">' + _(\"More\") + '</a>');\n                                    $(\".realms-op-diagnostics\").text(diagnostics);\n                                }\n                            }\n                        })\n                        .done(function() {\n                            busy(null);\n                            $(dialog).modal(\"hide\");\n                        })\n                        .always(function() {\n                            sub.remove();\n                        });\n                });\n        }\n\n        function busy(id) {\n            operation = id;\n            update();\n        }\n\n        function cancel() {\n            if (operation) {\n                realmd.call(MANAGER, SERVICE, \"Cancel\", [ operation ]);\n                busy(null);\n                return true;\n            }\n            return false;\n        }\n\n        update();\n        return dialog;\n    }\n\n    function setup() {\n        var $ = jQuery;\n\n        var element = $(\"<span>\");\n        var link = $(\"<a>\");\n        element.append(link);\n\n        var realmd = cockpit.dbus(\"org.freedesktop.realmd\");\n        realmd.watch(MANAGER);\n\n        var realms = realmd.proxies(\"org.freedesktop.realmd.Realm\");\n\n        /* The realm we are joined to */\n        var joined = null;\n\n        var permission = null;\n\n        $(realmd).on(\"close\", function(ev, options) {\n            var message;\n            if (options.problem == \"not-found\")\n                message = _(\"Cannot join a domain because realmd is not available on this system\");\n            else\n                message = cockpit.message(options);\n            link.addClass(\"disabled\");\n            element\n                .attr('title', message)\n                .tooltip({ container: 'body'})\n                .tooltip('fixTitle');\n            realmd = null;\n        });\n\n        realms.wait(function() {\n            if (!realmd)\n                return;\n\n            permission = cockpit.permission({ admin: true });\n\n            function update_realm_privileged() {\n                $(link).update_privileged(permission,\n                        cockpit.format(_(\"The user <b>$0</b> is not permitted to modify realms\"),\n                            permission.user ? permission.user.name : ''), null, element);\n            }\n\n            $(permission).on(\"changed\", update_realm_privileged);\n        });\n\n        function update_realms() {\n            var text, path, realm;\n            joined = [];\n            for (path in realms) {\n                realm = realms[path];\n                if (realm.Configured)\n                    joined.push(realm);\n            }\n\n            if (!joined || !joined.length)\n                text = _(\"Join Domain\");\n            else\n                text = joined.map(function(x) { return x.Name; }).join(\", \");\n            link.text(text);\n        }\n\n        $(realms).on(\"changed\", update_realms);\n        update_realms();\n\n        var dialog = null;\n        link.on(\"click\", function() {\n            if (dialog)\n                $(dialog).remove();\n\n            if (joined && joined.length)\n                dialog = instance(realmd, 'leave', joined[0], link);\n            else\n                dialog = instance(realmd, 'join', null, link);\n\n            $(dialog)\n                .attr(\"id\", \"realms-op\")\n                .appendTo(\"body\")\n                .modal('show');\n            cockpit.translate();\n        });\n\n        element.close = function close() {\n            if (dialog)\n                dialog.cancel();\n            element.remove();\n            if (realmd)\n                realmd.close();\n            if (permission)\n                permission.close();\n        };\n\n        return element;\n    }\n\n    /* Hook this in when loaded */\n    jQuery(function() {\n        var placeholder = jQuery(\"#system-info-domain\");\n        if (placeholder.length) {\n            placeholder.find(\".button-location\").append(setup());\n            placeholder.removeAttr('hidden');\n        }\n    });\n\n    return module;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/realmd/operation.js\n// module id = 1\n// module chunks = 0","module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/buildin/module.js\n// module id = 2\n// module chunks = 0","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 3\n// module chunks = 0","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 4\n// module chunks = 0","'use strict';\n\n(function() {\n    \"use strict\";\n\n    var $ = require('jquery');\n    var cockpit = require('cockpit');\n\n    var unique_number = 0;\n    function unique() {\n        unique_number += 1;\n        return \"unique\" + -(new Date()) + -unique_number;\n    }\n\n    /* Dialog Patterns */\n\n    function clear_errors(sel) {\n        sel.find(\".dialog-error\").remove();\n        sel.find(\".has-error\").removeClass(\"has-error\");\n        sel.find(\".dialog-wrapper\").off(\".dialog-error\");\n        sel.off(\".dialog-error\");\n    }\n\n    function field_error(target, error) {\n        var wrapper = target.parent();\n        var next, refresh;\n\n        if (!wrapper.is(\".dialog-wrapper\")) {\n            wrapper = $(\"<div class='dialog-wrapper'>\").insertBefore(target);\n\n            /*\n             * Some bootstrap plugins replace html controls with their own\n             * stuff, so we have to account for that here.\n             */\n\n            next = target.next();\n            if (next.is(\".bootstrap-select\") && next.selectpicker) {\n                next.remove();\n                refresh = next.selectpicker;\n            }\n\n            target.remove().appendTo(wrapper);\n\n            if (refresh)\n                refresh.call(target);\n        }\n\n        var message;\n        if (error.message)\n            message = $(\"<div class='dialog-error help-block'>\").text(error.message);\n        wrapper.addClass(\"has-error\").append(message);\n\n        if (!wrapper.hasClass(\"error-keep\")) {\n            wrapper.on(\"keypress.dialog-error change.dialog-error\", function() {\n                wrapper.removeClass(\"has-error\")\n                    .find(\".dialog-error.help-block\").css(\"visibility\", \"hidden\");\n            });\n        }\n    }\n\n    function global_error(sel, error) {\n        var alert = $(\"<div class='alert alert-danger dialog-error'>\");\n        var text = error.message || error.toString();\n        alert.text(text);\n        $(\"<span class='fa fa-exclamation-triangle'>\").prependTo(alert);\n\n        /* Always log global dialog errors for easier debugging */\n        console.warn(text);\n\n        var footer = sel.find(\".modal-footer\");\n        if (footer.length)\n            alert.prependTo(footer);\n        else\n            alert.appendTo(sel);\n    }\n\n    function display_errors(sel, errors) {\n        clear_errors(sel);\n\n        /* The list of errors can also be passed as an array */\n        if (errors.length == 1 && $.isArray(errors[0]))\n            errors = errors[0];\n\n        var any = false;\n        errors.forEach(function(error) {\n            var target;\n            if (error) {\n                target = sel.find(error.target);\n\n                /* Errors for a specific field added below that field */\n                if (target && target.length)\n                    field_error(target, error);\n                else\n                    global_error(sel, error);\n\n                any = true;\n            }\n        });\n\n        if (!any)\n            return;\n\n        /* When dialog is shown again, remove all mods */\n        sel.on(\"show.bs.modal.dialog-error\", function() {\n            clear_errors(sel);\n        });\n    }\n\n    function DialogWait(promise, handle) {\n        this.promise = promise;\n        this.disabled = [];\n        this.handle = handle;\n    }\n\n    function clear_wait(sel) {\n        var data = sel.data(\"dialog-wait\");\n        sel.data(\"dialog-wait\", null);\n\n        sel.find(\".dialog-wait-ct\").remove();\n        sel.find(\".btn\").off(\".dialog-wait\");\n        sel.off(\".dialog-wait\");\n\n        if (data) {\n            data.disabled.forEach(function(ctl) {\n                ctl.removeAttr(\"disabled\");\n            });\n        }\n    }\n\n    function display_wait(sel, promise, handle) {\n        clear_wait(sel);\n\n        if (!promise) {\n            if (handle)\n                sel.modal(\"hide\");\n            return sel;\n        }\n\n        /* Clear all errors in the dialog */\n        if (handle)\n            display_errors(sel, []);\n\n        var wait = $(\"<div class='dialog-wait-ct pull-left'>\");\n        $(\"<div class='spinner spinner-sm'>\").appendTo(wait);\n        var message = $(\"<span>\").appendTo(wait);\n\n        sel.find(\".modal-footer button\").first().before(wait);\n\n        var data = new DialogWait(promise, handle);\n        sel.data(\"dialog-wait\", data);\n\n        var cancellation = promise.cancel || promise.close;\n        var cancelled = false;\n\n        /* Disable everything and stash previous disabled state */\n        var controls = sel.find(\".form-control\").add(\".btn\", sel);\n        if (cancellation)\n            controls = controls.not(\"[data-dismiss]\").not(\".btn-cancel\");\n        controls.each(function() {\n            var ctl = $(this);\n            if (!ctl.attr(\"disabled\")) {\n                data.disabled.push(ctl);\n                ctl.attr(\"disabled\", \"disabled\");\n            }\n        });\n\n        sel.find(\".btn[data-dismiss], .btn-cancel\").on(\"click.dialog-wait\", function() {\n            cancelled = true;\n            if (cancellation)\n                cancellation.apply(promise);\n            return false;\n        });\n\n        /* When dialog is shown again, remove all mods */\n        sel.on(\"hide.bs.modal.dialog-wait\", function() {\n            clear_wait(sel);\n        });\n\n        /*\n         * There is no way to remove a callback from a promise\n         * so we have to be careful to only react if still\n         * processing the same promise.\n         */\n        function restore() {\n            var state, data = sel.data(\"dialog-wait\");\n            if (data && data.promise === promise) {\n                clear_wait(sel);\n                state = promise.state();\n                if (cancelled || (state == \"resolved\" && data.handle))\n                    sel.modal('hide');\n                else if (state == \"rejected\" && data.handle)\n                    display_errors(sel, [ arguments[0] ]);\n            }\n        }\n\n        function update(arg) {\n            var data = sel.data(\"dialog-wait\");\n            if (data && data.promise === promise) {\n                if (typeof arg !== \"string\")\n                    arg = \"\";\n                message.text(arg);\n            }\n        }\n\n        promise\n            .always(restore)\n            .progress(update);\n\n        return sel;\n    }\n\n    $.fn.dialog = function dialog(action /* ... */) {\n        if (action === \"failure\")\n            return display_errors(this, Array.prototype.slice.call(arguments, 1));\n        else if (action === \"wait\")\n            return display_wait(this, arguments[1]);\n        else if (action === \"promise\")\n            return display_wait(this, arguments[1], true);\n        else\n            console.warn(\"unknown dialog action: \" + action);\n    };\n\n    window.addEventListener(\"hashchange\", function() {\n        $(\".modal\").modal(\"hide\");\n    });\n\n    /*\n     * OnOff switch pattern\n     */\n\n    function onoff_refresh(sel) {\n        /* During testing, no Cockpit dependency */\n        var _ = cockpit.gettext || function(x) { return x; };\n\n        sel = sel.find(\".btn-onoff-ct\").addBack().filter(\".btn-onoff-ct\");\n        sel.each(function(x, el) {\n            var self = $(el)\n                .attr(\"data-toggle\", \"buttons\")\n                .addClass(\"btn-group\");\n            var value = self.onoff(\"value\");\n            var buttons = self.find(\".btn\");\n            var name = self.find(\"input\").first().attr(\"name\") || unique();\n            var i, input, text;\n            for (i = buttons.length; i < 2; i++) {\n                input = $('<input type=\"radio\" autocomplete=\"off\">');\n                text = document.createTextNode(i === 0 ? _(\"On\") : _(\"Off\"));\n                self.append($('<label class=\"btn\">').append(input, text));\n                buttons = null;\n            }\n            buttons = buttons || self.find(\".btn\");\n            buttons.find(\"input\").attr(\"name\", name);\n            onoff_change(self, !!value);\n        });\n        return sel;\n    }\n\n    function onoff_value(sel) {\n        return sel.find(\".btn\").first().hasClass(\"active\");\n    }\n\n    function onoff_change(sel, value) {\n        return sel.each(function(i, el) {\n            var buttons = $(el).find(\".btn\");\n            buttons.first().toggleClass(\"active\", !!value).find(\"input\").prop(\"checked\", !!value);\n            buttons.last().toggleClass(\"active\", !value).find(\"input\").prop(\"checked\", !value);\n        });\n    }\n\n    $.fn.onoff = function onoff(action /* ... */) {\n        if (arguments.length === 0 || action == \"refresh\") {\n            return onoff_refresh(this);\n        } else if (action === \"value\") {\n            if (arguments.length === 1)\n                return onoff_value(this);\n            else\n                return onoff_change(this, arguments[1]);\n        } else if (action == \"disabled\") {\n            return this.find(\".btn\").toggleClass(\"disabled\", arguments[1]);\n        } else {\n            console.warn(\"unknown switch action: \" + action);\n        }\n    };\n\n    /* ----------------------------------------------------------------------------\n     * Sliders\n     *\n     * <div class=\"slider\" value=\"0.5\">\n     *    <div class=\"slider-bar\">\n     *        <div class=\"slider-thumb\"></div>\n     *    </div>\n     *    <div class=\"slider-bar\">\n     *        <!-- optional left overs -->\n     *    </div>\n     * </div>\n     *\n     * A slider control. The first div.slider-bar is the one that is resized.\n     * The value will be bounded between 0 and 1 as a floating point number.\n     *\n     * The following div.slider-bar if present is resized to fill the remainder\n     * of the slider if not given a specific size. You can put more div.slider-bar\n     * inside it to reflect squashing other prevous allocations.\n     *\n     * If the following div.slider-bar have a width specified, then the\n     * slider supports the concept of overflowing. If the slider overflows\n     * it will get the .slider-warning class and go a bit red.\n     *\n     * On document creation any div.slider are automatically turned into\n     * Bar graphs.\n     *\n     * Slider has the following extra read/write properties:\n     *\n     * .value: the floating point value the slider is set to.\n     * .disabled: whether to display slider as disabled and refuse interacton.\n     *\n     * Slider has this event:\n     *\n     * on('change'): fired when the slider changes, passes value as additional arg.\n     */\n\n    function resize_flex(slider, flex, total, part) {\n        var value = 0;\n        if (part > total)\n            value = 1;\n        else if (part < 0 || isNaN(part))\n            value = 0;\n        else if (!isNaN(total) && total > 0 && part >= 0)\n            value = (part / total);\n        $(flex).css('width', (value * 100) + \"%\").\n            next(\"div\").css('margin-left', $(flex).css('width'));\n\n        /* Set the property and the attribute */\n        slider.value = value;\n    }\n\n    function update_value(slider) {\n        resize_flex(slider, $(slider).children(\"div.slider-bar\").first()[0], 1, slider.value);\n    }\n\n    function check_overflow(slider) {\n        $(slider).toggleClass(\"slider-warning\",\n                              slider.offsetWidth < slider.scrollWidth);\n    }\n\n    function setup_slider(slider) {\n        $(slider).attr('unselectable', 'on');\n\n        Object.defineProperty(slider, \"value\", {\n            get: function() {\n                return parseFloat(this.getAttribute(\"value\"));\n            },\n            set: function(v) {\n                var s = String(v);\n                if (s != this.getAttribute(\"value\")) {\n                    this.setAttribute(\"value\", v);\n                    update_value(slider);\n                    check_overflow(slider);\n                }\n            }\n        });\n\n        Object.defineProperty(slider, \"disabled\", {\n            get: function() {\n                if (!this.hasAttribute(\"disabled\"))\n                    return false;\n                return this.getAttribute(\"disabled\").toLowerCase() != \"false\";\n            },\n            set: function(v) {\n                this.setAttribute(\"disabled\", v ? \"true\" : \"false\");\n            }\n        });\n\n        update_value(slider);\n        check_overflow(slider);\n\n        $(slider).on(\"change\", function() {\n            update_value(slider);\n            $(slider).toggleClass(\"slider-disabled\", slider.disabled);\n        });\n\n        if (slider.disabled)\n            $(slider).addClass(\"slider-disabled\");\n\n        $(slider).on(\"mousedown\", function(ev) {\n            if (slider.disabled)\n                return true; /* default action */\n            var flex;\n            var offset = $(slider).offset().left;\n            if ($(ev.target).hasClass(\"slider-thumb\")) {\n                var hitx  = (ev.offsetX || ev.clientX - $(ev.target).offset().left);\n                offset += (hitx - $(ev.target).outerWidth() / 2);\n                flex = $(ev.target).parent()[0];\n            } else {\n                flex = $(slider).children(\"div.slider-bar\").first()[0];\n                resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n                $(slider).trigger(\"change\", [slider.value]);\n                check_overflow(slider);\n            }\n\n            $(document).\n                on(\"mousemove.slider\", function(ev) {\n                    resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n                    $(slider).trigger(\"change\", [slider.value]);\n                    check_overflow(slider);\n                    return false;\n                }).\n                on(\"mouseup.slider\", function(ev) {\n                    $(document).\n                        off(\"mousemove.slider\").\n                        off(\"mouseup.slider\");\n                    return false;\n                });\n            return false; /* no default action */\n        });\n    }\n\n    function setup_sliders() {\n        $(\"div.slider\").each(function() {\n            setup_slider(this);\n        });\n    }\n\n    $.fn.slider = function Slider(action) {\n        var sel = this;\n        if (arguments.length === 0 || action == \"refresh\") {\n            sel.each(function() {\n                setup_slider(this);\n            });\n            return sel;\n        } else {\n            console.warn(\"unknown slider action: \" + action);\n        }\n    };\n\n    $(document).ready(setup_sliders);\n\n    /* -----------------------------------------------------------------------------\n     * Privileged UI actions.\n     */\n\n    // placement is optional, \"top\", \"left\", \"bottom\", \"right\"\n    // by default, tooltip is attached to \"this\" element; can be attached to\n    // another one with setting \"tooltip_element\" (for <a> links)\n    $.fn.update_privileged = function update_privileged(perm, denied_message, placement, tooltip_element) {\n        var allowed = (perm.allowed !== false);\n        var selector = this;\n        if (!tooltip_element)\n            tooltip_element = $(this);\n\n        selector.each(function() {\n            // preserve old title first time to use when allowed\n            // activate tooltip\n            var allowed_key = 'allowed-title';\n            if (typeof $(this).data(allowed_key) === 'undefined' ||\n                   $(this).data(allowed_key) === false)\n                $(this).data(allowed_key, $(this).attr('title') || \"\");\n\n            var options = { html: true };\n            if (placement)\n                options['placement'] = placement;\n\n            tooltip_element.tooltip(options);\n\n            if ($(this).hasClass(\"disabled\") === allowed) {\n              $(this).toggleClass(\"disabled\", !allowed);\n              tooltip_element.attr('data-original-title', null);\n\n              if (allowed)\n                  tooltip_element.attr('title', $(this).data(allowed_key));\n              else\n                  tooltip_element.attr('title', denied_message);\n              tooltip_element.tooltip('fixTitle');\n            }\n            $(this).attr('data-stable', 'yes');\n        });\n\n        return selector;\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/patterns.js\n// module id = 5\n// module chunks = 0","module.exports = \"<div class=\\\"modal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" data-backdrop=\\\"static\\\">\\n  <div class=\\\"modal-dialog\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title realms-op-title\\\"></h4>\\n      </div>\\n      <div class=\\\"modal-body\\\">\\n        <div class=\\\"realms-op-fields\\\">\\n          <p class=\\\"realms-op-leave-only-row\\\"></p>\\n          <table class=\\\"form-table-ct realms-op-form\\\">\\n            <tr class=\\\"realms-op-join-only-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Domain Address</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-address\\\" type=\\\"text\\\" value=\\\"\\\"/>\\n              </td>\\n              <td class=\\\"realms-op-zero-width\\\">\\n                <div class=\\\"realms-op-address-spinner\\\" hidden>\\n                  <span class=\\\"spinner spinner-xs spinner-inline\\\"></span>\\n                </div>\\n                <div class=\\\"realms-op-address-error\\\" hidden>\\n                  <span class=\\\"fa fa-lg fa-exclamation\\\"></span>\\n                </div>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row\\\">\\n              <td class=\\\"header\\\"></td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realm-active-directory-only\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Computer OU</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-computer-ou\\\" type=\\\"text\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-authentification-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Authentication</label></td>\\n              <td>\\n                  <div class=\\\"btn-group bootstrap-select dropdown form-control realms-op-auth\\\">\\n                      <button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\">\\n                          <span class=\\\"pull-left\\\"></span>\\n                          <div class=\\\"caret\\\"></div>\\n                      </button>\\n                      <ul class=\\\"dropdown-menu\\\">\\n                      </ul>\\n                  </div>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-user-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">User Name</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-user\\\" type=\\\"text\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-user-password-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">User Password</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-user-password\\\" type=\\\"password\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-admin-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Domain Administrator Name</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-admin\\\" type=\\\"text\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-admin-password-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">Domain Administrator Password</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-admin-password\\\" type=\\\"password\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr class=\\\"realms-op-join-only-row realms-op-otp-row\\\">\\n              <td><label class=\\\"control-label\\\" translatable=\\\"yes\\\">One Time Password</label></td>\\n              <td>\\n                <input class=\\\"realms-op-field form-control realms-op-ot-password\\\" type=\\\"password\\\" value=\\\"\\\"/>\\n              </td>\\n            </tr>\\n            <tr>\\n              <td colspan=\\\"3\\\">\\n                <pre class=\\\"realms-op-diagnostics\\\" hidden></pre>\\n              </td>\\n            </tr>\\n          </table>\\n        </div>\\n      </div>\\n      <div class=\\\"modal-footer\\\">\\n        <div class=\\\"realms-op-error alert alert-danger\\\" hidden>\\n          <span class=\\\"fa fa-exclamation-triangle\\\"></span>\\n          <span class=\\\"realms-op-message\\\"></span>\\n        </div>\\n        <div class=\\\"realms-op-spinner spinner pull-left\\\"></div>\\n        <span class=\\\"realms-op-wait-message\\\" translatable=\\\"yes\\\" hidden>This may take a while</span>\\n        <button class=\\\"btn btn-default realms-op-cancel\\\" translatable=\\\"yes\\\">Cancel</button>\\n        <button class=\\\"btn btn-primary realms-op-apply\\\" translatable=\\\"yes\\\">Next</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/realmd/operation.html\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}