!function(e) {
    function t(i) {
        if (n[i]) return n[i].exports;
        var r = n[i] = {
            exports: {},
            id: i,
            loaded: !1
        };
        return e[i].call(r.exports, r, r.exports, t), r.loaded = !0, r.exports;
    }
    var n = {};
    return t.m = e, t.c = n, t.p = "", t(0);
}([ function(e, t, n) {
    "use strict";
    var i = n(20), r = n(2), o = i, s = n(15), u = [ "# top comment", "", "foo bar", " indented value", "", "will disappear", "key value #comment" ].join("\n"), a = [ "# top comment", "", "foo moo", "indented value", "", "#key value #comment", "hooray value" ].join("\n");
    i.asyncTest("config_update", function() {
        o.expect(10);
        var e, t = r.defer(), n = function(n, i) {
            o.equal(i.foo.value, "moo", "value changed correctly"), o.equal("key" in i, !1, "setting with comment deleted correctly"), 
            o.equal("will" in i, !1, "setting without comment deleted correctly"), o.equal(i.hooray.value, "value", "value added correctly"), 
            o.equal(e._rawContent, a, "raw text for changed config is correct"), t.resolve();
        }, l = "cockpit_config_read", c = r.file(l);
        c.replace(u).always(function() {
            o.equal(this.state(), "resolved", "writing initial config didn't fail"), o.equal(c.path, l, "file has correct path"), 
            e = new s.ConfigFile(l), e.wait().always(function() {
                o.equal(this.state(), "resolved", "waiting for config didn't fail"), e.settings.foo.value = "moo", 
                delete e.settings.key, delete e.settings.will, e.settings.hooray = {
                    value: "value"
                }, e.addEventListener("kdumpConfigChanged", n), e.write(e.settings).always(function() {
                    o.equal(this.state(), "resolved", "writing to config didn't fail"), t.promise().done(function() {
                        o.equal(this.state(), "resolved", "waiting for config change didn't fail"), i.start();
                    });
                });
            });
        });
    }), window.setTimeout(function() {
        i.start();
    });
}, , function(e, t) {
    e.exports = cockpit;
}, , , , , , , , , , , , , function(e, t, n) {
    "use strict";
    function i(e) {
        return e && e.__esModule ? e : {
            default: e
        };
    }
    function r(e, t) {
        if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var o = function() {
        function e(e, t) {
            for (var n = 0; n < t.length; n++) {
                var i = t[n];
                i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), 
                Object.defineProperty(e, i.key, i);
            }
        }
        return function(t, n, i) {
            return n && e(t.prototype, n), i && e(t, i), t;
        };
    }(), s = n(2), u = i(s), a = function() {
        function e(t) {
            var n = this, i = !(arguments.length <= 1 || void 0 === arguments[1]) && arguments[1];
            r(this, e), this.filename = t, this._rawContent = void 0, this._lines = [], this._originalSettings = {}, 
            this._dataAvailable = u.default.defer(), this.settings = {}, u.default.event_target(this), 
            this._fileHandle = u.default.file(t, {
                superuser: i
            }), this._fileHandle.watch(function(e) {
                n._parseText(e);
            });
        }
        return o(e, [ {
            key: "close",
            value: function() {
                this._fileHandle && (this._fileHandle.remove(), this._fileHandle = void 0);
            }
        }, {
            key: "wait",
            value: function() {
                return this._dataAvailable.promise();
            }
        }, {
            key: "_parseText",
            value: function(e) {
                var t = this, n = !(arguments.length <= 1 || void 0 === arguments[1]) && arguments[1];
                return this._dataAvailable && this._dataAvailable.resolve(), e ? void (e != this._rawContent && (this._rawContent = e, 
                this._lines = e.split(/\r?\n/), this.settings = {}, this._lines.forEach(function(e, n) {
                    var i = e.trimLeft();
                    if (0 !== i.indexOf("#") && 0 !== i.length) {
                        var r = i.indexOf(" ");
                        if (r !== -1) {
                            var o = i.substring(0, r), s = i.substring(r + 1).trim(), u = s.indexOf("#"), a = void 0;
                            u !== -1 && (a = s.substring(u).trim(), s = s.substring(0, u).trim()), t.settings[o] = {
                                index: n,
                                value: s,
                                origLine: e,
                                comment: a
                            };
                        }
                    }
                }), this._originalSettings = {}, Object.keys(this.settings).forEach(function(e) {
                    t._originalSettings[e] = u.default.extend({}, t.settings[e]);
                }), n || this.dispatchEvent("kdumpConfigChanged", this.settings))) : (this._originalSettings = null, 
                this.settings = null, void (n || this.dispatchEvent("kdumpConfigChanged", this.settings)));
            }
        }, {
            key: "_generateConfig",
            value: function(e) {
                var t = this, n = this._lines.slice(0), i = [];
                return Object.keys(this._originalSettings).forEach(function(r) {
                    if (!(r in e)) {
                        var o = t._originalSettings[r];
                        void 0 !== o.comment ? n[o.index] = "#" + o.origLine : i.push(o.index);
                    }
                }), Object.keys(e).forEach(function(i) {
                    var r = e[i], o = i + " " + r.value;
                    if (r.comment && (o = o + " " + r.comment), !(i in t._originalSettings)) return void n.push(o);
                    var s = t._originalSettings[i];
                    n[s.index] = o;
                }), i.sort().reverse().forEach(function(e) {
                    n.splice(e, 1);
                }), n.join("\n");
            }
        }, {
            key: "write",
            value: function(e) {
                var t = this;
                return this._fileHandle.modify(function(n) {
                    return t._parseText(n, !0), t._generateConfig(e);
                });
            }
        } ]), e;
    }();
    t.ConfigFile = a;
}, , , , , function(e, t, n) {
    "use strict";
    !function() {
        window.QUnit = n(21), window.qunitTap = n(24), n(25), n(26), e.exports = window.QUnit;
    }();
}, function(e, t, n) {
    var i;
    (function(e, r) {
        /*!
	 * QUnit 1.23.1
	 * https://qunitjs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-04-12T17:29Z
	 */
        !function(e) {
            function o(e, t) {
                var n, i, r = e.slice();
                for (n = 0; n < r.length; n++) for (i = 0; i < t.length; i++) if (r[n] === t[i]) {
                    r.splice(n, 1), n--;
                    break;
                }
                return r;
            }
            function s(e, t) {
                if (t.indexOf) return t.indexOf(e);
                for (var n = 0, i = t.length; n < i; n++) if (t[n] === e) return n;
                return -1;
            }
            function u(e) {
                var t, n, i = N.is("array", e) ? [] : {};
                for (t in e) z.call(e, t) && (n = e[t], i[t] = n === Object(n) ? u(n) : n);
                return i;
            }
            function a(t, n, i) {
                for (var r in n) z.call(n, r) && ("constructor" === r && t === e || (void 0 === n[r] ? delete t[r] : i && "undefined" != typeof t[r] || (t[r] = n[r])));
                return t;
            }
            function l(e) {
                if ("undefined" == typeof e) return "undefined";
                if (null === e) return "null";
                var t = $.call(e).match(/^\[object\s(.*)\]$/), n = t && t[1];
                switch (n) {
                  case "Number":
                    return isNaN(e) ? "nan" : "number";

                  case "String":
                  case "Boolean":
                  case "Array":
                  case "Set":
                  case "Map":
                  case "Date":
                  case "RegExp":
                  case "Function":
                  case "Symbol":
                    return n.toLowerCase();
                }
                return "object" == typeof e ? "object" : void 0;
            }
            function c(e, t) {
                return N.objectType(t) === e;
            }
            function f(e, t) {
                t = void 0 === t ? 4 : t;
                var n, i, r;
                if (e.stack) {
                    if (n = e.stack.split("\n"), /^error$/i.test(n[0]) && n.shift(), H) {
                        for (i = [], r = t; r < n.length && n[r].indexOf(H) === -1; r++) i.push(n[r]);
                        if (i.length) return i.join("\n");
                    }
                    return n[t];
                }
                if (e.sourceURL) {
                    if (/qunit.js$/.test(e.sourceURL)) return;
                    return e.sourceURL + ":" + e.line;
                }
            }
            function d(e) {
                var t = new Error();
                if (!t.stack) try {
                    throw t;
                } catch (e) {
                    t = e;
                }
                return f(t, e);
            }
            function h(e) {
                function t(e) {
                    var t = function(t) {
                        if ("function" !== l(t)) throw new Error("QUnit logging methods require a callback function as their first parameters.");
                        G.callbacks[e].push(t);
                    };
                    return V[e] = t, t;
                }
                var n, i, r, o = [ "begin", "done", "log", "testStart", "testDone", "moduleStart", "moduleDone" ];
                for (n = 0, i = o.length; n < i; n++) r = o[n], "undefined" === l(G.callbacks[r]) && (G.callbacks[r] = []), 
                e[r] = t(r);
            }
            function p(e, t) {
                var n, i, r;
                for (r = G.callbacks[e], n = 0, i = r.length; n < i; n++) r[n](t);
            }
            function g() {
                var t, n;
                for (t in V) N[t] !== V[t] && (n = N[t], N[t] = V[t], N[t](n), e.console && e.console.warn && e.console.warn("QUnit." + t + " was replaced with a new value.\nPlease, check out the documentation on how to apply logging callbacks.\nReference: https://api.qunitjs.com/category/callbacks/"));
            }
            function m() {
                var e, t, n = [];
                if (!G.started) {
                    for (G.started = D(), g(), "" === G.modules[0].name && 0 === G.modules[0].tests.length && G.modules.shift(), 
                    e = 0, t = G.modules.length; e < t; e++) n.push({
                        name: G.modules[e].name,
                        tests: G.modules[e].tests
                    });
                    p("begin", {
                        totalTests: E.count,
                        modules: n
                    });
                }
                G.blocking = !1, v(!0);
            }
            function v(e) {
                function t() {
                    v(e);
                }
                var n = D();
                for (G.depth = (G.depth || 0) + 1; G.queue.length && !G.blocking; ) {
                    if (!(!R.setTimeout || G.updateRate <= 0 || D() - n < G.updateRate)) {
                        A(t, 13);
                        break;
                    }
                    G.current && (G.current.usedAsync = !1), G.queue.shift()();
                }
                G.depth--, !e || G.blocking || G.queue.length || 0 !== G.depth || w();
            }
            function b() {
                G.blocking = !0, G.testTimeout && R.setTimeout && (_(G.timeout), G.timeout = A(function() {
                    if (!G.current) throw new Error("Test timed out");
                    G.current.semaphore = 0, N.pushFailure("Test timed out", d(2)), y();
                }, G.testTimeout));
            }
            function y() {
                B = !0, R.setTimeout ? A(function() {
                    G.current && G.current.semaphore > 0 || (G.timeout && _(G.timeout), m());
                }, 13) : m();
            }
            function w() {
                var e, t;
                G.autorun = !0, G.previousModule && p("moduleDone", {
                    name: G.previousModule.name,
                    tests: G.previousModule.tests,
                    failed: G.moduleStats.bad,
                    passed: G.moduleStats.all - G.moduleStats.bad,
                    total: G.moduleStats.all,
                    runtime: D() - G.moduleStats.started
                }), delete G.previousModule, e = D() - G.started, t = G.stats.all - G.stats.bad, 
                p("done", {
                    failed: G.stats.bad,
                    passed: t,
                    total: G.stats.all,
                    runtime: e
                });
            }
            function x(e, t) {
                return void 0 === e.testEnvironment && (e.testEnvironment = {}), function(n) {
                    e.testEnvironment[t] = n;
                };
            }
            function E(e) {
                var t, n;
                for (++E.count, a(this, e), this.assertions = [], this.semaphore = 0, this.usedAsync = !1, 
                this.module = G.currentModule, this.stack = d(3), t = 0, n = this.module.tests; t < n.length; t++) this.module.tests[t].name === this.testName && (this.testName += " ");
                this.testId = q(this.module.name, this.testName), this.module.tests.push({
                    name: this.testName,
                    testId: this.testId
                }), e.skip ? (this.callback = function() {}, this.async = !1, this.expected = 0) : this.assert = new I(this);
            }
            function q(e, t) {
                for (var n, i = 0, r = 0, o = e + "" + t, s = o.length; i < s; i++) r = (r << 5) - r + o.charCodeAt(i), 
                r |= 0;
                return n = (4294967296 + r).toString(16), n.length < 8 && (n = "0000000" + n), n.slice(-8);
            }
            function k(e, t, n) {
                var i, r = !t;
                if ("array" !== N.objectType(e)) t ? G.queue.splice(K++, 0, e) : n ? (W || (W = T(n)), 
                i = Math.floor(W() * (G.queue.length - K + 1)), G.queue.splice(K + i, 0, e)) : G.queue.push(e), 
                G.autorun && !G.blocking && v(r); else for (;e.length; ) k(e.shift());
            }
            function T(e) {
                var t = parseInt(q(e), 16) || -1;
                return function() {
                    return t ^= t << 13, t ^= t >>> 17, t ^= t << 5, t < 0 && (t += 4294967296), t / 4294967296;
                };
            }
            function C() {
                if (G.pollution = [], G.noglobals) for (var t in e) if (z.call(e, t)) {
                    if (/^qunit-test-output/.test(t)) continue;
                    G.pollution.push(t);
                }
            }
            function S() {
                var e, t, n = G.pollution;
                C(), e = o(G.pollution, n), e.length > 0 && N.pushFailure("Introduced global variable(s): " + e.join(", ")), 
                t = o(n, G.pollution), t.length > 0 && N.pushFailure("Deleted global variable(s): " + t.join(", "));
            }
            function M(e, t, n) {
                2 === arguments.length && (n = t, t = null), N.test(e, t, n, !0);
            }
            function U(e, t, n, i) {
                if (!J) {
                    var r;
                    2 === arguments.length && (n = t, t = null), r = new E({
                        testName: e,
                        expected: t,
                        async: i,
                        callback: n
                    }), r.queue();
                }
            }
            function j(e) {
                if (!J) {
                    var t = new E({
                        testName: e,
                        skip: !0
                    });
                    t.queue();
                }
            }
            function Q(e, t, n, i) {
                var r;
                J || (N.config.queue.length = 0, J = !0, 2 === arguments.length && (n = t, t = null), 
                r = new E({
                    testName: e,
                    expected: t,
                    async: i,
                    callback: n
                }), r.queue());
            }
            function I(e) {
                this.test = e;
            }
            function O(e) {
                var t, n, i = e.toString();
                return "[object" === i.substring(0, 7) ? (t = e.name ? e.name.toString() : "Error", 
                n = e.message ? e.message.toString() : "", t && n ? t + ": " + n : t ? t : n ? n : "Error") : i;
            }
            var N = {}, L = e.Date, D = L.now || function() {
                return new L().getTime();
            }, A = e.setTimeout, _ = e.clearTimeout, F = e.window, R = {
                document: F && void 0 !== F.document,
                setTimeout: void 0 !== A,
                sessionStorage: function() {
                    var e = "qunit-test-string";
                    try {
                        return sessionStorage.setItem(e, e), sessionStorage.removeItem(e), !0;
                    } catch (e) {
                        return !1;
                    }
                }()
            }, H = (d(0) || "").replace(/(:\d+)+\)?/, "").replace(/.+\//, ""), P = !1, B = !1, $ = Object.prototype.toString, z = Object.prototype.hasOwnProperty, G = {
                queue: [],
                blocking: !0,
                reorder: !0,
                altertitle: !0,
                collapse: !0,
                scrolltop: !0,
                maxDepth: 5,
                requireExpects: !1,
                urlConfig: [],
                modules: [],
                moduleStack: [],
                currentModule: {
                    name: "",
                    tests: []
                },
                callbacks: {}
            };
            G.modules.push(G.currentModule);
            var V = {};
            !function() {
                if (R.document) {
                    var e = F.onerror;
                    F.onerror = function(t, n, i) {
                        var r = !1;
                        if (e && (r = e(t, n, i)), r !== !0) {
                            if (N.config.current) {
                                if (N.config.current.ignoreGlobalErrors) return !0;
                                N.pushFailure(t, n + ":" + i);
                            } else N.test("global failure", a(function() {
                                N.pushFailure(t, n + ":" + i);
                            }, {
                                validTest: !0
                            }));
                            return !1;
                        }
                        return r;
                    };
                }
            }(), N.isLocal = !(R.document && "file:" !== F.location.protocol), N.version = "1.23.1", 
            a(N, {
                module: function(e, t, n) {
                    function i() {
                        var n = G.moduleStack.length ? G.moduleStack.slice(-1)[0] : null, i = null !== n ? [ n.name, e ].join(" > ") : e, r = {
                            name: i,
                            parentModule: n,
                            tests: [],
                            moduleId: q(i)
                        }, o = {};
                        return n && (a(o, n.testEnvironment), delete o.beforeEach, delete o.afterEach), 
                        a(o, t), r.testEnvironment = o, G.modules.push(r), r;
                    }
                    function r(e) {
                        G.currentModule = e;
                    }
                    var o, s, u = G.currentModule;
                    2 === arguments.length && "function" === l(t) && (n = t, t = void 0), t && t.setup && (t.beforeEach = t.setup, 
                    delete t.setup), t && t.teardown && (t.afterEach = t.teardown, delete t.teardown), 
                    o = i(), s = {
                        beforeEach: x(o, "beforeEach"),
                        afterEach: x(o, "afterEach")
                    }, "function" === l(n) && (G.moduleStack.push(o), r(o), n.call(o.testEnvironment, s), 
                    G.moduleStack.pop(), o = o.parentModule || u), r(o);
                },
                asyncTest: M,
                test: U,
                skip: j,
                only: Q,
                start: function(e) {
                    var t = P;
                    if (G.current) {
                        if (G.current.semaphore -= e || 1, isNaN(G.current.semaphore)) return G.current.semaphore = 0, 
                        void N.pushFailure("Called start() with a non-numeric decrement.", d(2));
                        if (G.current.semaphore > 0) return;
                        if (G.current.semaphore < 0) return G.current.semaphore = 0, void N.pushFailure("Called start() while already started (test's semaphore was 0 already)", d(2));
                    } else {
                        if (P = !0, B) throw new Error("Called start() outside of a test context while already started");
                        if (t || e > 1) throw new Error("Called start() outside of a test context too many times");
                        if (G.autostart) throw new Error("Called start() outside of a test context when QUnit.config.autostart was true");
                        if (!G.pageLoaded) return void (G.autostart = !0);
                    }
                    y();
                },
                stop: function(e) {
                    if (!G.current) throw new Error("Called stop() outside of a test context");
                    G.current.semaphore += e || 1, b();
                },
                config: G,
                is: c,
                objectType: l,
                extend: a,
                load: function() {
                    G.pageLoaded = !0, a(G, {
                        stats: {
                            all: 0,
                            bad: 0
                        },
                        moduleStats: {
                            all: 0,
                            bad: 0
                        },
                        started: 0,
                        updateRate: 1e3,
                        autostart: !0,
                        filter: ""
                    }, !0), G.blocking = !1, G.autostart && y();
                },
                stack: function(e) {
                    return e = (e || 0) + 2, d(e);
                }
            }), h(N);
            var W, J = !1, K = 0;
            E.count = 0, E.prototype = {
                before: function() {
                    this.module === G.previousModule && z.call(G, "previousModule") || (z.call(G, "previousModule") && p("moduleDone", {
                        name: G.previousModule.name,
                        tests: G.previousModule.tests,
                        failed: G.moduleStats.bad,
                        passed: G.moduleStats.all - G.moduleStats.bad,
                        total: G.moduleStats.all,
                        runtime: D() - G.moduleStats.started
                    }), G.previousModule = this.module, G.moduleStats = {
                        all: 0,
                        bad: 0,
                        started: D()
                    }, p("moduleStart", {
                        name: this.module.name,
                        tests: this.module.tests
                    })), G.current = this, this.module.testEnvironment && (delete this.module.testEnvironment.beforeEach, 
                    delete this.module.testEnvironment.afterEach), this.testEnvironment = a({}, this.module.testEnvironment), 
                    this.started = D(), p("testStart", {
                        name: this.testName,
                        module: this.module.name,
                        testId: this.testId
                    }), G.pollution || C();
                },
                run: function() {
                    function e(e) {
                        t = e.callback.call(e.testEnvironment, e.assert), e.resolvePromise(t);
                    }
                    var t;
                    if (G.current = this, this.async && N.stop(), this.callbackStarted = D(), G.notrycatch) return void e(this);
                    try {
                        e(this);
                    } catch (e) {
                        this.pushFailure("Died on test #" + (this.assertions.length + 1) + " " + this.stack + ": " + (e.message || e), f(e, 0)), 
                        C(), G.blocking && N.start();
                    }
                },
                after: function() {
                    S();
                },
                queueHook: function(e, t) {
                    var n, i = this;
                    return function() {
                        function r() {
                            n = e.call(i.testEnvironment, i.assert), i.resolvePromise(n, t);
                        }
                        if (G.current = i, G.notrycatch) return void r();
                        try {
                            r();
                        } catch (e) {
                            i.pushFailure(t + " failed on " + i.testName + ": " + (e.message || e), f(e, 0));
                        }
                    };
                },
                hooks: function(e) {
                    function t(i, r) {
                        r.parentModule && t(i, r.parentModule), r.testEnvironment && "function" === N.objectType(r.testEnvironment[e]) && n.push(i.queueHook(r.testEnvironment[e], e));
                    }
                    var n = [];
                    return this.skip || t(this, this.module), n;
                },
                finish: function() {
                    G.current = this, G.requireExpects && null === this.expected ? this.pushFailure("Expected number of assertions to be defined, but expect() was not called.", this.stack) : null !== this.expected && this.expected !== this.assertions.length ? this.pushFailure("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run", this.stack) : null !== this.expected || this.assertions.length || this.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
                    var e, t = 0;
                    for (this.runtime = D() - this.started, G.stats.all += this.assertions.length, G.moduleStats.all += this.assertions.length, 
                    e = 0; e < this.assertions.length; e++) this.assertions[e].result || (t++, G.stats.bad++, 
                    G.moduleStats.bad++);
                    p("testDone", {
                        name: this.testName,
                        module: this.module.name,
                        skipped: !!this.skip,
                        failed: t,
                        passed: this.assertions.length - t,
                        total: this.assertions.length,
                        runtime: this.runtime,
                        assertions: this.assertions,
                        testId: this.testId,
                        source: this.stack,
                        duration: this.runtime
                    }), N.reset(), G.current = void 0;
                },
                queue: function() {
                    function e() {
                        k([ function() {
                            n.before();
                        }, n.hooks("beforeEach"), function() {
                            n.run();
                        }, n.hooks("afterEach").reverse(), function() {
                            n.after();
                        }, function() {
                            n.finish();
                        } ]);
                    }
                    var t, n = this;
                    if (this.valid()) return t = N.config.reorder && R.sessionStorage && +sessionStorage.getItem("qunit-test-" + this.module.name + "-" + this.testName), 
                    k(e, t, G.seed);
                },
                pushResult: function(e) {
                    var t, n = {
                        module: this.module.name,
                        name: this.testName,
                        result: e.result,
                        message: e.message,
                        actual: e.actual,
                        expected: e.expected,
                        testId: this.testId,
                        negative: e.negative || !1,
                        runtime: D() - this.started
                    };
                    e.result || (t = d(), t && (n.source = t)), p("log", n), this.assertions.push({
                        result: !!e.result,
                        message: e.message
                    });
                },
                pushFailure: function(e, t, n) {
                    if (!(this instanceof E)) throw new Error("pushFailure() assertion outside test context, was " + d(2));
                    var i = {
                        module: this.module.name,
                        name: this.testName,
                        result: !1,
                        message: e || "error",
                        actual: n || null,
                        testId: this.testId,
                        runtime: D() - this.started
                    };
                    t && (i.source = t), p("log", i), this.assertions.push({
                        result: !1,
                        message: e
                    });
                },
                resolvePromise: function(e, t) {
                    var n, i, r = this;
                    null != e && (n = e.then, "function" === N.objectType(n) && (N.stop(), n.call(e, function() {
                        N.start();
                    }, function(e) {
                        i = "Promise rejected " + (t ? t.replace(/Each$/, "") : "during") + " " + r.testName + ": " + (e.message || e), 
                        r.pushFailure(i, f(e, 0)), C(), N.start();
                    })));
                },
                valid: function() {
                    function e(t) {
                        var n = t.name ? t.name.toLowerCase() : null;
                        return n === r || !!t.parentModule && e(t.parentModule);
                    }
                    function t(e) {
                        return s(e.moduleId, G.moduleId) > -1 || e.parentModule && t(e.parentModule);
                    }
                    var n = G.filter, i = /^(!?)\/([\w\W]*)\/(i?$)/.exec(n), r = G.module && G.module.toLowerCase(), o = this.module.name + ": " + this.testName;
                    return !(!this.callback || !this.callback.validTest) || !(G.moduleId && G.moduleId.length > 0 && !t(this.module)) && (!(G.testId && G.testId.length > 0 && s(this.testId, G.testId) < 0) && (!(r && !e(this.module)) && (!n || (i ? this.regexFilter(!!i[1], i[2], i[3], o) : this.stringFilter(n, o)))));
                },
                regexFilter: function(e, t, n, i) {
                    var r = new RegExp(t, n), o = r.test(i);
                    return o !== e;
                },
                stringFilter: function(e, t) {
                    e = e.toLowerCase(), t = t.toLowerCase();
                    var n = "!" !== e.charAt(0);
                    return n || (e = e.slice(1)), t.indexOf(e) !== -1 ? n : !n;
                }
            }, N.reset = function() {
                if (R.document) {
                    var e = R.document && document.getElementById && document.getElementById("qunit-fixture");
                    e && (e.innerHTML = G.fixture);
                }
            }, N.pushFailure = function() {
                if (!N.config.current) throw new Error("pushFailure() assertion outside test context, in " + d(2));
                var e = N.config.current;
                return e.pushFailure.apply(e, arguments);
            }, N.assert = I.prototype = {
                expect: function(e) {
                    return 1 !== arguments.length ? this.test.expected : void (this.test.expected = e);
                },
                async: function(e) {
                    var t = this.test, n = !1, i = e;
                    return "undefined" == typeof i && (i = 1), t.semaphore += 1, t.usedAsync = !0, b(), 
                    function() {
                        return n ? void t.pushFailure("Too many calls to the `assert.async` callback", d(2)) : (i -= 1, 
                        void (i > 0 || (t.semaphore -= 1, n = !0, y())));
                    };
                },
                push: function(e, t, n, i, r) {
                    var o = this instanceof I ? this : N.config.current.assert;
                    return o.pushResult({
                        result: e,
                        actual: t,
                        expected: n,
                        message: i,
                        negative: r
                    });
                },
                pushResult: function(e) {
                    var t = this, n = t instanceof I && t.test || N.config.current;
                    if (!n) throw new Error("assertion outside test context, in " + d(2));
                    return n.usedAsync === !0 && 0 === n.semaphore && n.pushFailure("Assertion after the final `assert.async` was resolved", d(2)), 
                    t instanceof I || (t = n.assert), t.test.pushResult(e);
                },
                ok: function(e, t) {
                    t = t || (e ? "okay" : "failed, expected argument to be truthy, was: " + N.dump.parse(e)), 
                    this.pushResult({
                        result: !!e,
                        actual: e,
                        expected: !0,
                        message: t
                    });
                },
                notOk: function(e, t) {
                    t = t || (e ? "failed, expected argument to be falsy, was: " + N.dump.parse(e) : "okay"), 
                    this.pushResult({
                        result: !e,
                        actual: e,
                        expected: !1,
                        message: t
                    });
                },
                equal: function(e, t, n) {
                    this.pushResult({
                        result: t == e,
                        actual: e,
                        expected: t,
                        message: n
                    });
                },
                notEqual: function(e, t, n) {
                    this.pushResult({
                        result: t != e,
                        actual: e,
                        expected: t,
                        message: n,
                        negative: !0
                    });
                },
                propEqual: function(e, t, n) {
                    e = u(e), t = u(t), this.pushResult({
                        result: N.equiv(e, t),
                        actual: e,
                        expected: t,
                        message: n
                    });
                },
                notPropEqual: function(e, t, n) {
                    e = u(e), t = u(t), this.pushResult({
                        result: !N.equiv(e, t),
                        actual: e,
                        expected: t,
                        message: n,
                        negative: !0
                    });
                },
                deepEqual: function(e, t, n) {
                    this.pushResult({
                        result: N.equiv(e, t),
                        actual: e,
                        expected: t,
                        message: n
                    });
                },
                notDeepEqual: function(e, t, n) {
                    this.pushResult({
                        result: !N.equiv(e, t),
                        actual: e,
                        expected: t,
                        message: n,
                        negative: !0
                    });
                },
                strictEqual: function(e, t, n) {
                    this.pushResult({
                        result: t === e,
                        actual: e,
                        expected: t,
                        message: n
                    });
                },
                notStrictEqual: function(e, t, n) {
                    this.pushResult({
                        result: t !== e,
                        actual: e,
                        expected: t,
                        message: n,
                        negative: !0
                    });
                },
                throws: function(e, t, n) {
                    var i, r, o = t, s = !1, u = this instanceof I && this.test || N.config.current;
                    null == n && "string" == typeof t && (n = t, t = null), u.ignoreGlobalErrors = !0;
                    try {
                        e.call(u.testEnvironment);
                    } catch (e) {
                        i = e;
                    }
                    u.ignoreGlobalErrors = !1, i && (r = N.objectType(t), t ? "regexp" === r ? s = t.test(O(i)) : "string" === r ? s = t === O(i) : "function" === r && i instanceof t ? s = !0 : "object" === r ? s = i instanceof t.constructor && i.name === t.name && i.message === t.message : "function" === r && t.call({}, i) === !0 && (o = null, 
                    s = !0) : (s = !0, o = null)), u.assert.pushResult({
                        result: s,
                        actual: i,
                        expected: o,
                        message: n
                    });
                }
            }, function() {
                I.prototype.raises = I.prototype.throws;
            }(), N.equiv = function() {
                function e(e, t) {
                    return "object" == typeof t && (t = t.valueOf()), "object" == typeof e && (e = e.valueOf()), 
                    t === e;
                }
                function t(e, t) {
                    var n = a(e), i = a(t);
                    return e.constructor === t.constructor || (n && null === n.constructor && (n = null), 
                    i && null === i.constructor && (i = null), null === n && i === Object.prototype || null === i && n === Object.prototype);
                }
                function n(e) {
                    return "flags" in e ? e.flags : e.toString().match(/[gimuy]*$/)[0];
                }
                function i(e, t) {
                    var n = N.objectType(e);
                    return N.objectType(t) === n && l[n](t, e);
                }
                function r(e, t) {
                    return arguments.length < 2 || (e === t || i(e, t)) && (2 === arguments.length || r.apply(this, [].slice.call(arguments, 1)));
                }
                var o = [], s = [], u = [], a = Object.getPrototypeOf || function(e) {
                    return e.__proto__;
                }, l = {
                    string: e,
                    boolean: e,
                    number: e,
                    null: e,
                    undefined: e,
                    symbol: e,
                    date: e,
                    nan: function() {
                        return !0;
                    },
                    regexp: function(e, t) {
                        return t.source === e.source && n(t) === n(e);
                    },
                    function: function() {
                        var e = o[o.length - 1];
                        return e !== Object && "undefined" != typeof e;
                    },
                    array: function(e, t) {
                        var n, i, o, a, l, c;
                        if (o = t.length, o !== e.length) return !1;
                        for (s.push(t), u.push(e), n = 0; n < o; n++) {
                            for (a = !1, i = 0; i < s.length; i++) if (l = s[i] === t[n], c = u[i] === e[n], 
                            l || c) {
                                if (!(t[n] === e[n] || l && c)) return s.pop(), u.pop(), !1;
                                a = !0;
                            }
                            if (!a && !r(t[n], e[n])) return s.pop(), u.pop(), !1;
                        }
                        return s.pop(), u.pop(), !0;
                    },
                    set: function(e, t) {
                        var n, i = !0;
                        return t.size === e.size && (t.forEach(function(t) {
                            n = !1, e.forEach(function(e) {
                                r(e, t) && (n = !0);
                            }), n || (i = !1);
                        }), i);
                    },
                    map: function(e, t) {
                        var n, i = !0;
                        return t.size === e.size && (t.forEach(function(t, o) {
                            n = !1, e.forEach(function(e, i) {
                                r([ e, i ], [ t, o ]) && (n = !0);
                            }), n || (i = !1);
                        }), i);
                    },
                    object: function(e, n) {
                        var i, a, l, c, f, d = !0, h = [], p = [];
                        if (t(n, e) === !1) return !1;
                        o.push(n.constructor), s.push(n), u.push(e);
                        for (i in n) {
                            for (l = !1, a = 0; a < s.length; a++) if (c = s[a] === n[i], f = u[a] === e[i], 
                            c || f) {
                                if (!(n[i] === e[i] || c && f)) {
                                    d = !1;
                                    break;
                                }
                                l = !0;
                            }
                            if (h.push(i), !l && !r(n[i], e[i])) {
                                d = !1;
                                break;
                            }
                        }
                        s.pop(), u.pop(), o.pop();
                        for (i in e) p.push(i);
                        return d && r(h.sort(), p.sort());
                    }
                };
                return r;
            }(), N.dump = function() {
                function e(e) {
                    return '"' + e.toString().replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
                }
                function t(e) {
                    return e + "";
                }
                function n(e, t, n) {
                    var i = o.separator(), r = o.indent(), s = o.indent(1);
                    return t.join && (t = t.join("," + i + s)), t ? [ e, s + t, r + n ].join(i) : e + n;
                }
                function i(e, t) {
                    var i = e.length, r = new Array(i);
                    if (o.maxDepth && o.depth > o.maxDepth) return "[object Array]";
                    for (this.up(); i--; ) r[i] = this.parse(e[i], void 0, t);
                    return this.down(), n("[", r, "]");
                }
                var r = /^function (\w+)/, o = {
                    parse: function(e, t, n) {
                        n = n || [];
                        var i, r, o, u = s(e, n);
                        return u !== -1 ? "recursion(" + (u - n.length) + ")" : (t = t || this.typeOf(e), 
                        r = this.parsers[t], o = typeof r, "function" === o ? (n.push(e), i = r.call(this, e, n), 
                        n.pop(), i) : "string" === o ? r : this.parsers.error);
                    },
                    typeOf: function(e) {
                        var t;
                        return t = null === e ? "null" : "undefined" == typeof e ? "undefined" : N.is("regexp", e) ? "regexp" : N.is("date", e) ? "date" : N.is("function", e) ? "function" : void 0 !== e.setInterval && void 0 !== e.document && void 0 === e.nodeType ? "window" : 9 === e.nodeType ? "document" : e.nodeType ? "node" : "[object Array]" === $.call(e) || "number" == typeof e.length && void 0 !== e.item && (e.length ? e.item(0) === e[0] : null === e.item(0) && void 0 === e[0]) ? "array" : e.constructor === Error.prototype.constructor ? "error" : typeof e;
                    },
                    separator: function() {
                        return this.multiline ? this.HTML ? "<br />" : "\n" : this.HTML ? "&#160;" : " ";
                    },
                    indent: function(e) {
                        if (!this.multiline) return "";
                        var t = this.indentChar;
                        return this.HTML && (t = t.replace(/\t/g, "   ").replace(/ /g, "&#160;")), new Array(this.depth + (e || 0)).join(t);
                    },
                    up: function(e) {
                        this.depth += e || 1;
                    },
                    down: function(e) {
                        this.depth -= e || 1;
                    },
                    setParser: function(e, t) {
                        this.parsers[e] = t;
                    },
                    quote: e,
                    literal: t,
                    join: n,
                    depth: 1,
                    maxDepth: N.config.maxDepth,
                    parsers: {
                        window: "[Window]",
                        document: "[Document]",
                        error: function(e) {
                            return 'Error("' + e.message + '")';
                        },
                        unknown: "[Unknown]",
                        null: "null",
                        undefined: "undefined",
                        function: function(e) {
                            var t = "function", i = "name" in e ? e.name : (r.exec(e) || [])[1];
                            return i && (t += " " + i), t += "(", t = [ t, o.parse(e, "functionArgs"), "){" ].join(""), 
                            n(t, o.parse(e, "functionCode"), "}");
                        },
                        array: i,
                        nodelist: i,
                        arguments: i,
                        object: function(e, t) {
                            var i, r, u, a, l, c = [];
                            if (o.maxDepth && o.depth > o.maxDepth) return "[object Object]";
                            o.up(), i = [];
                            for (r in e) i.push(r);
                            l = [ "message", "name" ];
                            for (a in l) r = l[a], r in e && s(r, i) < 0 && i.push(r);
                            for (i.sort(), a = 0; a < i.length; a++) r = i[a], u = e[r], c.push(o.parse(r, "key") + ": " + o.parse(u, void 0, t));
                            return o.down(), n("{", c, "}");
                        },
                        node: function(e) {
                            var t, n, i, r = o.HTML ? "&lt;" : "<", s = o.HTML ? "&gt;" : ">", u = e.nodeName.toLowerCase(), a = r + u, l = e.attributes;
                            if (l) for (n = 0, t = l.length; n < t; n++) i = l[n].nodeValue, i && "inherit" !== i && (a += " " + l[n].nodeName + "=" + o.parse(i, "attribute"));
                            return a += s, 3 !== e.nodeType && 4 !== e.nodeType || (a += e.nodeValue), a + r + "/" + u + s;
                        },
                        functionArgs: function(e) {
                            var t, n = e.length;
                            if (!n) return "";
                            for (t = new Array(n); n--; ) t[n] = String.fromCharCode(97 + n);
                            return " " + t.join(", ") + " ";
                        },
                        key: e,
                        functionCode: "[code]",
                        attribute: e,
                        string: e,
                        date: e,
                        regexp: t,
                        number: t,
                        boolean: t
                    },
                    HTML: !1,
                    indentChar: "  ",
                    multiline: !0
                };
                return o;
            }(), N.jsDump = N.dump, function() {
                function e(e) {
                    return function() {
                        var t = new I(N.config.current);
                        e.apply(t, arguments);
                    };
                }
                var t, n = I.prototype;
                for (t in n) N[t] = e(n[t]);
            }(), R.document && (!function() {
                var e, t, n = [ "test", "module", "expect", "asyncTest", "start", "stop", "ok", "notOk", "equal", "notEqual", "propEqual", "notPropEqual", "deepEqual", "notDeepEqual", "strictEqual", "notStrictEqual", "throws", "raises" ];
                for (e = 0, t = n.length; e < t; e++) F[n[e]] = N[n[e]];
            }(), F.QUnit = N), "undefined" != typeof r && r && r.exports && (r.exports = N, 
            r.exports.QUnit = N), "undefined" != typeof t && t && (t.QUnit = N), i = function() {
                return N;
            }.call(t, n, t, r), !(void 0 !== i && (r.exports = i)), N.config.autostart = !1;
        }(function() {
            return this;
        }()), function() {
            function e() {
                var e, t, n, i, r = {}, o = U.search.slice(1).split("&"), s = o.length;
                for (e = 0; e < s; e++) o[e] && (t = o[e].split("="), n = decodeURIComponent(t[0]), 
                i = 1 === t.length || decodeURIComponent(t.slice(1).join("=")), r[n] ? r[n] = [].concat(r[n], i) : r[n] = i);
                return r;
            }
            function t(e) {
                return e ? (e += "", e.replace(/['"<>&]/g, function(e) {
                    switch (e) {
                      case "'":
                        return "&#039;";

                      case '"':
                        return "&quot;";

                      case "<":
                        return "&lt;";

                      case ">":
                        return "&gt;";

                      case "&":
                        return "&amp;";
                    }
                })) : "";
            }
            function n(e, t, n) {
                e.addEventListener ? e.addEventListener(t, n, !1) : e.attachEvent && e.attachEvent("on" + t, function() {
                    var t = window.event;
                    t.target || (t.target = t.srcElement || I), n.call(e, t);
                });
            }
            function i(e, t, i) {
                for (var r = e.length; r--; ) n(e[r], t, i);
            }
            function r(e, t) {
                return (" " + e.className + " ").indexOf(" " + t + " ") >= 0;
            }
            function o(e, t) {
                r(e, t) || (e.className += (e.className ? " " : "") + t);
            }
            function s(e, t, n) {
                n || "undefined" == typeof n && !r(e, t) ? o(e, t) : u(e, t);
            }
            function u(e, t) {
                for (var n = " " + e.className + " "; n.indexOf(" " + t + " ") >= 0; ) n = n.replace(" " + t + " ", " ");
                e.className = "function" == typeof n.trim ? n.trim() : n.replace(/^\s+|\s+$/g, "");
            }
            function a(e) {
                return I.getElementById && I.getElementById(e);
            }
            function l() {
                var e, n, i, r, o, s = !1, u = Q.urlConfig, a = "";
                for (e = 0; e < u.length; e++) if (i = Q.urlConfig[e], "string" == typeof i && (i = {
                    id: i,
                    label: i
                }), r = t(i.id), o = t(i.tooltip), i.value && "string" != typeof i.value) {
                    if (a += "<label for='qunit-urlconfig-" + r + "' title='" + o + "'>" + i.label + ": </label><select id='qunit-urlconfig-" + r + "' name='" + r + "' title='" + o + "'><option></option>", 
                    QUnit.is("array", i.value)) for (n = 0; n < i.value.length; n++) r = t(i.value[n]), 
                    a += "<option value='" + r + "'" + (Q[i.id] === i.value[n] ? (s = !0) && " selected='selected'" : "") + ">" + r + "</option>"; else for (n in i.value) N.call(i.value, n) && (a += "<option value='" + t(n) + "'" + (Q[i.id] === n ? (s = !0) && " selected='selected'" : "") + ">" + t(i.value[n]) + "</option>");
                    Q[i.id] && !s && (r = t(Q[i.id]), a += "<option value='" + r + "' selected='selected' disabled='disabled'>" + r + "</option>"), 
                    a += "</select>";
                } else a += "<input id='qunit-urlconfig-" + r + "' name='" + r + "' type='checkbox'" + (i.value ? " value='" + t(i.value) + "'" : "") + (Q[i.id] ? " checked='checked'" : "") + " title='" + o + "' /><label for='qunit-urlconfig-" + r + "' title='" + o + "'>" + i.label + "</label>";
                return a;
            }
            function c() {
                var e, t, n, i = this, r = {};
                t = "selectedIndex" in i ? i.options[i.selectedIndex].value || void 0 : i.checked ? i.defaultValue || !0 : void 0, 
                r[i.name] = t, e = f(r), "hidepassed" === i.name && "replaceState" in window.history ? (QUnit.urlParams[i.name] = t, 
                Q[i.name] = t || !1, n = a("qunit-tests"), n && s(n, "hidepass", t || !1), window.history.replaceState(null, "", e)) : window.location = e;
            }
            function f(e) {
                var t, n, i, r = "?", o = window.location;
                e = QUnit.extend(QUnit.extend({}, QUnit.urlParams), e);
                for (t in e) if (N.call(e, t) && void 0 !== e[t]) for (n = [].concat(e[t]), i = 0; i < n.length; i++) r += encodeURIComponent(t), 
                n[i] !== !0 && (r += "=" + encodeURIComponent(n[i])), r += "&";
                return o.protocol + "//" + o.host + o.pathname + r.slice(0, -1);
            }
            function d() {
                var e, t = a("qunit-modulefilter"), n = a("qunit-filter-input").value;
                e = t ? decodeURIComponent(t.options[t.selectedIndex].value) : void 0, window.location = f({
                    module: "" === e ? void 0 : e,
                    filter: "" === n ? void 0 : n,
                    moduleId: void 0,
                    testId: void 0
                });
            }
            function h() {
                var e = I.createElement("span");
                return e.innerHTML = l(), o(e, "qunit-url-config"), i(e.getElementsByTagName("input"), "click", c), 
                i(e.getElementsByTagName("select"), "change", c), e;
            }
            function p() {
                var e = I.createElement("form"), t = I.createElement("label"), i = I.createElement("input"), r = I.createElement("button");
                return o(e, "qunit-filter"), t.innerHTML = "Filter: ", i.type = "text", i.value = Q.filter || "", 
                i.name = "filter", i.id = "qunit-filter-input", r.innerHTML = "Go", t.appendChild(i), 
                e.appendChild(t), e.appendChild(r), n(e, "submit", function(e) {
                    return d(), e && e.preventDefault && e.preventDefault(), !1;
                }), e;
            }
            function g() {
                var e, n = "";
                if (!A.length) return !1;
                for (n += "<label for='qunit-modulefilter'>Module: </label><select id='qunit-modulefilter' name='modulefilter'><option value='' " + (void 0 === QUnit.urlParams.module ? "selected='selected'" : "") + ">< All Modules ></option>", 
                e = 0; e < A.length; e++) n += "<option value='" + t(encodeURIComponent(A[e])) + "' " + (QUnit.urlParams.module === A[e] ? "selected='selected'" : "") + ">" + t(A[e]) + "</option>";
                return n += "</select>";
            }
            function m() {
                var e = a("qunit-testrunner-toolbar"), t = I.createElement("span"), i = g();
                return !(!e || !i) && (t.setAttribute("id", "qunit-modulefilter-container"), t.innerHTML = i, 
                n(t.lastChild, "change", d), void e.appendChild(t));
            }
            function v() {
                var e = a("qunit-testrunner-toolbar");
                e && (e.appendChild(h()), e.appendChild(p()), m());
            }
            function b() {
                var e = a("qunit-header");
                e && (e.innerHTML = "<a href='" + t(L) + "'>" + e.innerHTML + "</a> ");
            }
            function y() {
                var e = a("qunit-banner");
                e && (e.className = "");
            }
            function w() {
                var e = a("qunit-tests"), t = a("qunit-testresult");
                t && t.parentNode.removeChild(t), e && (e.innerHTML = "", t = I.createElement("p"), 
                t.id = "qunit-testresult", t.className = "result", e.parentNode.insertBefore(t, e), 
                t.innerHTML = "Running...<br />&#160;");
            }
            function x() {
                var e = a("qunit-fixture");
                e && (Q.fixture = e.innerHTML);
            }
            function E() {
                var e = QUnit.config.testId;
                return !e || e.length <= 0 ? "" : "<div id='qunit-filteredTest'>Rerunning selected tests: " + t(e.join(", ")) + " <a id='qunit-clearFilter' href='" + t(L) + "'>Run all tests</a></div>";
            }
            function q() {
                var e = a("qunit-userAgent");
                e && (e.innerHTML = "", e.appendChild(I.createTextNode("QUnit " + QUnit.version + "; " + navigator.userAgent)));
            }
            function k() {
                var e = a("qunit");
                e && (e.innerHTML = "<h1 id='qunit-header'>" + t(I.title) + "</h1><h2 id='qunit-banner'></h2><div id='qunit-testrunner-toolbar'></div>" + E() + "<h2 id='qunit-userAgent'></h2><ol id='qunit-tests'></ol>"), 
                b(), y(), w(), q(), v();
            }
            function T(e) {
                var t, n, i, r, o, s;
                for (t = 0, n = e.length; t < n; t++) for (s = e[t], i = 0, r = s.tests.length; i < r; i++) o = s.tests[i], 
                C(o.name, o.testId, s.name);
            }
            function C(e, t, n) {
                var i, r, o, s, u = a("qunit-tests");
                u && (i = I.createElement("strong"), i.innerHTML = S(e, n), r = I.createElement("a"), 
                r.innerHTML = "Rerun", r.href = f({
                    testId: t
                }), o = I.createElement("li"), o.appendChild(i), o.appendChild(r), o.id = "qunit-test-output-" + t, 
                s = I.createElement("ol"), s.className = "qunit-assert-list", o.appendChild(s), 
                u.appendChild(o));
            }
            function S(e, n) {
                var i = "";
                return n && (i = "<span class='module-name'>" + t(n) + "</span>: "), i += "<span class='test-name'>" + t(e) + "</span>";
            }
            function M(e) {
                return e.replace(/<\/?[^>]+(>|$)/g, "").replace(/\&quot;/g, "").replace(/\s+/g, "");
            }
            var U = "undefined" != typeof window && window.location;
            if (U) {
                var j = e();
                if (QUnit.urlParams = j, QUnit.config.moduleId = [].concat(j.moduleId || []), QUnit.config.testId = [].concat(j.testId || []), 
                QUnit.config.module = j.module, QUnit.config.filter = j.filter, j.seed === !0 ? QUnit.config.seed = Math.random().toString(36).slice(2) : j.seed && (QUnit.config.seed = j.seed), 
                QUnit.config.urlConfig.push({
                    id: "hidepassed",
                    label: "Hide passed tests",
                    tooltip: "Only show tests and assertions that fail. Stored as query-strings."
                }, {
                    id: "noglobals",
                    label: "Check for Globals",
                    tooltip: "Enabling this will test if any test introduces new properties on the global object (`window` in Browsers). Stored as query-strings."
                }, {
                    id: "notrycatch",
                    label: "No try-catch",
                    tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings."
                }), QUnit.begin(function() {
                    var e, t, n = QUnit.config.urlConfig;
                    for (e = 0; e < n.length; e++) t = QUnit.config.urlConfig[e], "string" != typeof t && (t = t.id), 
                    void 0 === QUnit.config[t] && (QUnit.config[t] = j[t]);
                }), "undefined" != typeof window && window.document) {
                    QUnit.init = function() {
                        var e = QUnit.config;
                        e.stats = {
                            all: 0,
                            bad: 0
                        }, e.moduleStats = {
                            all: 0,
                            bad: 0
                        }, e.started = 0, e.updateRate = 1e3, e.blocking = !1, e.autostart = !0, e.autorun = !1, 
                        e.filter = "", e.queue = [], k();
                    };
                    var Q = QUnit.config, I = window.document, O = !1, N = Object.prototype.hasOwnProperty, L = f({
                        filter: void 0,
                        module: void 0,
                        moduleId: void 0,
                        testId: void 0
                    }), D = {
                        sessionStorage: function() {
                            var e = "qunit-test-string";
                            try {
                                return sessionStorage.setItem(e, e), sessionStorage.removeItem(e), !0;
                            } catch (e) {
                                return !1;
                            }
                        }()
                    }, A = [];
                    QUnit.begin(function(e) {
                        var t, n, i;
                        for (t = 0; t < e.modules.length; t++) n = e.modules[t], n.name && A.push(n.name);
                        A.sort(function(e, t) {
                            return e.localeCompare(t);
                        }), x(), k(), T(e.modules), i = a("qunit-tests"), i && Q.hidepassed && o(i, "hidepass");
                    }), QUnit.done(function(e) {
                        var t, n, i = a("qunit-banner"), r = a("qunit-tests"), o = [ "Tests completed in ", e.runtime, " milliseconds.<br />", "<span class='passed'>", e.passed, "</span> assertions of <span class='total'>", e.total, "</span> passed, <span class='failed'>", e.failed, "</span> failed." ].join("");
                        if (i && (i.className = e.failed ? "qunit-fail" : "qunit-pass"), r && (a("qunit-testresult").innerHTML = o), 
                        Q.altertitle && I.title && (I.title = [ e.failed ? "✖" : "✔", I.title.replace(/^[\u2714\u2716] /i, "") ].join(" ")), 
                        Q.reorder && D.sessionStorage && 0 === e.failed) for (t = 0; t < sessionStorage.length; t++) n = sessionStorage.key(t++), 
                        0 === n.indexOf("qunit-test-") && sessionStorage.removeItem(n);
                        Q.scrolltop && window.scrollTo && window.scrollTo(0, 0);
                    }), QUnit.testStart(function(e) {
                        var t, n, i;
                        n = a("qunit-test-output-" + e.testId), n ? n.className = "running" : C(e.name, e.testId, e.module), 
                        t = a("qunit-testresult"), t && (i = QUnit.config.reorder && D.sessionStorage && +sessionStorage.getItem("qunit-test-" + e.module + "-" + e.name), 
                        t.innerHTML = (i ? "Rerunning previously failed test: <br />" : "Running: <br />") + S(e.name, e.module));
                    }), QUnit.log(function(e) {
                        var n, i, r, o, s, u, l = !1, c = a("qunit-test-output-" + e.testId);
                        c && (r = t(e.message) || (e.result ? "okay" : "failed"), r = "<span class='test-message'>" + r + "</span>", 
                        r += "<span class='runtime'>@ " + e.runtime + " ms</span>", !e.result && N.call(e, "expected") ? (o = e.negative ? "NOT " + QUnit.dump.parse(e.expected) : QUnit.dump.parse(e.expected), 
                        s = QUnit.dump.parse(e.actual), r += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + t(o) + "</pre></td></tr>", 
                        s !== o ? (r += "<tr class='test-actual'><th>Result: </th><td><pre>" + t(s) + "</pre></td></tr>", 
                        /^(true|false)$/.test(s) || /^(true|false)$/.test(o) || (u = QUnit.diff(o, s), l = M(u).length !== M(o).length + M(s).length), 
                        l && (r += "<tr class='test-diff'><th>Diff: </th><td><pre>" + u + "</pre></td></tr>")) : r += o.indexOf("[object Array]") !== -1 || o.indexOf("[object Object]") !== -1 ? "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the depth of object is more than current max depth (" + QUnit.config.maxDepth + ").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to  run with a higher max depth or <a href='" + t(f({
                            maxDepth: -1
                        })) + "'>Rerun</a> without max depth.</p></td></tr>" : "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the expected and actual results have an equivalent serialization</td></tr>", 
                        e.source && (r += "<tr class='test-source'><th>Source: </th><td><pre>" + t(e.source) + "</pre></td></tr>"), 
                        r += "</table>") : !e.result && e.source && (r += "<table><tr class='test-source'><th>Source: </th><td><pre>" + t(e.source) + "</pre></td></tr></table>"), 
                        n = c.getElementsByTagName("ol")[0], i = I.createElement("li"), i.className = e.result ? "pass" : "fail", 
                        i.innerHTML = r, n.appendChild(i));
                    }), QUnit.testDone(function(e) {
                        var t, i, r, u, l, c, f, d, h, p = a("qunit-tests");
                        p && (r = a("qunit-test-output-" + e.testId), u = r.getElementsByTagName("ol")[0], 
                        l = e.passed, c = e.failed, Q.reorder && D.sessionStorage && (c ? sessionStorage.setItem("qunit-test-" + e.module + "-" + e.name, c) : sessionStorage.removeItem("qunit-test-" + e.module + "-" + e.name)), 
                        0 === c ? o(u, "qunit-collapsed") : c && Q.collapse && !O ? O = !0 : o(u, "qunit-collapsed"), 
                        t = r.firstChild, f = c ? "<b class='failed'>" + c + "</b>, <b class='passed'>" + l + "</b>, " : "", 
                        t.innerHTML += " <b class='counts'>(" + f + e.assertions.length + ")</b>", e.skipped ? (r.className = "skipped", 
                        d = I.createElement("em"), d.className = "qunit-skipped-label", d.innerHTML = "skipped", 
                        r.insertBefore(d, t)) : (n(t, "click", function() {
                            s(u, "qunit-collapsed");
                        }), r.className = c ? "fail" : "pass", i = I.createElement("span"), i.className = "runtime", 
                        i.innerHTML = e.runtime + " ms", r.insertBefore(i, u)), e.source && (h = I.createElement("p"), 
                        h.innerHTML = "<strong>Source: </strong>" + e.source, o(h, "qunit-source"), 0 === c && o(h, "qunit-collapsed"), 
                        n(t, "click", function() {
                            s(h, "qunit-collapsed");
                        }), r.appendChild(h)));
                    });
                    var _ = function(e) {
                        return !(e && e.version && e.version.major > 0);
                    }(window.phantom);
                    _ && "complete" === I.readyState ? QUnit.load() : n(window, "load", QUnit.load), 
                    QUnit.diff = function() {
                        function e() {}
                        var n = -1, i = 1, r = 0;
                        return e.prototype.DiffMain = function(e, t, n) {
                            var i, o, s, u, a, l;
                            if (i = new Date().getTime() + 1e3, null === e || null === t) throw new Error("Null input. (DiffMain)");
                            return e === t ? e ? [ [ r, e ] ] : [] : ("undefined" == typeof n && (n = !0), o = n, 
                            s = this.diffCommonPrefix(e, t), u = e.substring(0, s), e = e.substring(s), t = t.substring(s), 
                            s = this.diffCommonSuffix(e, t), a = e.substring(e.length - s), e = e.substring(0, e.length - s), 
                            t = t.substring(0, t.length - s), l = this.diffCompute(e, t, o, i), u && l.unshift([ r, u ]), 
                            a && l.push([ r, a ]), this.diffCleanupMerge(l), l);
                        }, e.prototype.diffCleanupEfficiency = function(e) {
                            var t, o, s, u, a, l, c, f, d;
                            for (t = !1, o = [], s = 0, u = null, a = 0, l = !1, c = !1, f = !1, d = !1; a < e.length; ) e[a][0] === r ? (e[a][1].length < 4 && (f || d) ? (o[s++] = a, 
                            l = f, c = d, u = e[a][1]) : (s = 0, u = null), f = d = !1) : (e[a][0] === n ? d = !0 : f = !0, 
                            u && (l && c && f && d || u.length < 2 && l + c + f + d === 3) && (e.splice(o[s - 1], 0, [ n, u ]), 
                            e[o[s - 1] + 1][0] = i, s--, u = null, l && c ? (f = d = !0, s = 0) : (s--, a = s > 0 ? o[s - 1] : -1, 
                            f = d = !1), t = !0)), a++;
                            t && this.diffCleanupMerge(e);
                        }, e.prototype.diffPrettyHtml = function(e) {
                            var o, s, u, a = [];
                            for (u = 0; u < e.length; u++) switch (o = e[u][0], s = e[u][1], o) {
                              case i:
                                a[u] = "<ins>" + t(s) + "</ins>";
                                break;

                              case n:
                                a[u] = "<del>" + t(s) + "</del>";
                                break;

                              case r:
                                a[u] = "<span>" + t(s) + "</span>";
                            }
                            return a.join("");
                        }, e.prototype.diffCommonPrefix = function(e, t) {
                            var n, i, r, o;
                            if (!e || !t || e.charAt(0) !== t.charAt(0)) return 0;
                            for (r = 0, i = Math.min(e.length, t.length), n = i, o = 0; r < n; ) e.substring(o, n) === t.substring(o, n) ? (r = n, 
                            o = r) : i = n, n = Math.floor((i - r) / 2 + r);
                            return n;
                        }, e.prototype.diffCommonSuffix = function(e, t) {
                            var n, i, r, o;
                            if (!e || !t || e.charAt(e.length - 1) !== t.charAt(t.length - 1)) return 0;
                            for (r = 0, i = Math.min(e.length, t.length), n = i, o = 0; r < n; ) e.substring(e.length - n, e.length - o) === t.substring(t.length - n, t.length - o) ? (r = n, 
                            o = r) : i = n, n = Math.floor((i - r) / 2 + r);
                            return n;
                        }, e.prototype.diffCompute = function(e, t, o, s) {
                            var u, a, l, c, f, d, h, p, g, m, v, b;
                            return e ? t ? (a = e.length > t.length ? e : t, l = e.length > t.length ? t : e, 
                            c = a.indexOf(l), c !== -1 ? (u = [ [ i, a.substring(0, c) ], [ r, l ], [ i, a.substring(c + l.length) ] ], 
                            e.length > t.length && (u[0][0] = u[2][0] = n), u) : 1 === l.length ? [ [ n, e ], [ i, t ] ] : (f = this.diffHalfMatch(e, t), 
                            f ? (d = f[0], p = f[1], h = f[2], g = f[3], m = f[4], v = this.DiffMain(d, h, o, s), 
                            b = this.DiffMain(p, g, o, s), v.concat([ [ r, m ] ], b)) : o && e.length > 100 && t.length > 100 ? this.diffLineMode(e, t, s) : this.diffBisect(e, t, s))) : [ [ n, e ] ] : [ [ i, t ] ];
                        }, e.prototype.diffHalfMatch = function(e, t) {
                            function n(e, t, n) {
                                var i, r, s, u, a, l, c, f, d;
                                for (i = e.substring(n, n + Math.floor(e.length / 4)), r = -1, s = ""; (r = t.indexOf(i, r + 1)) !== -1; ) u = o.diffCommonPrefix(e.substring(n), t.substring(r)), 
                                a = o.diffCommonSuffix(e.substring(0, n), t.substring(0, r)), s.length < a + u && (s = t.substring(r - a, r) + t.substring(r, r + u), 
                                l = e.substring(0, n - a), c = e.substring(n + u), f = t.substring(0, r - a), d = t.substring(r + u));
                                return 2 * s.length >= e.length ? [ l, c, f, d, s ] : null;
                            }
                            var i, r, o, s, u, a, l, c, f, d, h;
                            return i = e.length > t.length ? e : t, r = e.length > t.length ? t : e, i.length < 4 || 2 * r.length < i.length ? null : (o = this, 
                            f = n(i, r, Math.ceil(i.length / 4)), d = n(i, r, Math.ceil(i.length / 2)), f || d ? (h = d ? f && f[4].length > d[4].length ? f : d : f, 
                            e.length > t.length ? (s = h[0], l = h[1], a = h[2], u = h[3]) : (a = h[0], u = h[1], 
                            s = h[2], l = h[3]), c = h[4], [ s, l, a, u, c ]) : null);
                        }, e.prototype.diffLineMode = function(e, t, o) {
                            var s, u, a, l, c, f, d, h, p;
                            for (s = this.diffLinesToChars(e, t), e = s.chars1, t = s.chars2, a = s.lineArray, 
                            u = this.DiffMain(e, t, !1, o), this.diffCharsToLines(u, a), this.diffCleanupSemantic(u), 
                            u.push([ r, "" ]), l = 0, f = 0, c = 0, h = "", d = ""; l < u.length; ) {
                                switch (u[l][0]) {
                                  case i:
                                    c++, d += u[l][1];
                                    break;

                                  case n:
                                    f++, h += u[l][1];
                                    break;

                                  case r:
                                    if (f >= 1 && c >= 1) {
                                        for (u.splice(l - f - c, f + c), l = l - f - c, s = this.DiffMain(h, d, !1, o), 
                                        p = s.length - 1; p >= 0; p--) u.splice(l, 0, s[p]);
                                        l += s.length;
                                    }
                                    c = 0, f = 0, h = "", d = "";
                                }
                                l++;
                            }
                            return u.pop(), u;
                        }, e.prototype.diffBisect = function(e, t, r) {
                            var o, s, u, a, l, c, f, d, h, p, g, m, v, b, y, w, x, E, q, k, T, C, S;
                            for (o = e.length, s = t.length, u = Math.ceil((o + s) / 2), a = u, l = 2 * u, c = new Array(l), 
                            f = new Array(l), d = 0; d < l; d++) c[d] = -1, f[d] = -1;
                            for (c[a + 1] = 0, f[a + 1] = 0, h = o - s, p = h % 2 !== 0, g = 0, m = 0, v = 0, 
                            b = 0, T = 0; T < u && !(new Date().getTime() > r); T++) {
                                for (C = -T + g; C <= T - m; C += 2) {
                                    for (w = a + C, x = C === -T || C !== T && c[w - 1] < c[w + 1] ? c[w + 1] : c[w - 1] + 1, 
                                    q = x - C; x < o && q < s && e.charAt(x) === t.charAt(q); ) x++, q++;
                                    if (c[w] = x, x > o) m += 2; else if (q > s) g += 2; else if (p && (y = a + h - C, 
                                    y >= 0 && y < l && f[y] !== -1 && (E = o - f[y], x >= E))) return this.diffBisectSplit(e, t, x, q, r);
                                }
                                for (S = -T + v; S <= T - b; S += 2) {
                                    for (y = a + S, E = S === -T || S !== T && f[y - 1] < f[y + 1] ? f[y + 1] : f[y - 1] + 1, 
                                    k = E - S; E < o && k < s && e.charAt(o - E - 1) === t.charAt(s - k - 1); ) E++, 
                                    k++;
                                    if (f[y] = E, E > o) b += 2; else if (k > s) v += 2; else if (!p && (w = a + h - S, 
                                    w >= 0 && w < l && c[w] !== -1 && (x = c[w], q = a + x - w, E = o - E, x >= E))) return this.diffBisectSplit(e, t, x, q, r);
                                }
                            }
                            return [ [ n, e ], [ i, t ] ];
                        }, e.prototype.diffBisectSplit = function(e, t, n, i, r) {
                            var o, s, u, a, l, c;
                            return o = e.substring(0, n), u = t.substring(0, i), s = e.substring(n), a = t.substring(i), 
                            l = this.DiffMain(o, u, !1, r), c = this.DiffMain(s, a, !1, r), l.concat(c);
                        }, e.prototype.diffCleanupSemantic = function(e) {
                            var t, o, s, u, a, l, c, f, d, h, p, g, m;
                            for (t = !1, o = [], s = 0, u = null, a = 0, f = 0, d = 0, l = 0, c = 0; a < e.length; ) e[a][0] === r ? (o[s++] = a, 
                            f = l, d = c, l = 0, c = 0, u = e[a][1]) : (e[a][0] === i ? l += e[a][1].length : c += e[a][1].length, 
                            u && u.length <= Math.max(f, d) && u.length <= Math.max(l, c) && (e.splice(o[s - 1], 0, [ n, u ]), 
                            e[o[s - 1] + 1][0] = i, s--, s--, a = s > 0 ? o[s - 1] : -1, f = 0, d = 0, l = 0, 
                            c = 0, u = null, t = !0)), a++;
                            for (t && this.diffCleanupMerge(e), a = 1; a < e.length; ) e[a - 1][0] === n && e[a][0] === i && (h = e[a - 1][1], 
                            p = e[a][1], g = this.diffCommonOverlap(h, p), m = this.diffCommonOverlap(p, h), 
                            g >= m ? (g >= h.length / 2 || g >= p.length / 2) && (e.splice(a, 0, [ r, p.substring(0, g) ]), 
                            e[a - 1][1] = h.substring(0, h.length - g), e[a + 1][1] = p.substring(g), a++) : (m >= h.length / 2 || m >= p.length / 2) && (e.splice(a, 0, [ r, h.substring(0, m) ]), 
                            e[a - 1][0] = i, e[a - 1][1] = p.substring(0, p.length - m), e[a + 1][0] = n, e[a + 1][1] = h.substring(m), 
                            a++), a++), a++;
                        }, e.prototype.diffCommonOverlap = function(e, t) {
                            var n, i, r, o, s, u, a;
                            if (n = e.length, i = t.length, 0 === n || 0 === i) return 0;
                            if (n > i ? e = e.substring(n - i) : n < i && (t = t.substring(0, n)), r = Math.min(n, i), 
                            e === t) return r;
                            for (o = 0, s = 1; ;) {
                                if (u = e.substring(r - s), a = t.indexOf(u), a === -1) return o;
                                s += a, 0 !== a && e.substring(r - s) !== t.substring(0, s) || (o = s, s++);
                            }
                        }, e.prototype.diffLinesToChars = function(e, t) {
                            function n(e) {
                                var t, n, o, s, u;
                                for (t = "", n = 0, o = -1, s = i.length; o < e.length - 1; ) o = e.indexOf("\n", n), 
                                o === -1 && (o = e.length - 1), u = e.substring(n, o + 1), n = o + 1, (r.hasOwnProperty ? r.hasOwnProperty(u) : void 0 !== r[u]) ? t += String.fromCharCode(r[u]) : (t += String.fromCharCode(s), 
                                r[u] = s, i[s++] = u);
                                return t;
                            }
                            var i, r, o, s;
                            return i = [], r = {}, i[0] = "", o = n(e), s = n(t), {
                                chars1: o,
                                chars2: s,
                                lineArray: i
                            };
                        }, e.prototype.diffCharsToLines = function(e, t) {
                            var n, i, r, o;
                            for (n = 0; n < e.length; n++) {
                                for (i = e[n][1], r = [], o = 0; o < i.length; o++) r[o] = t[i.charCodeAt(o)];
                                e[n][1] = r.join("");
                            }
                        }, e.prototype.diffCleanupMerge = function(e) {
                            var t, o, s, u, a, l, c, f, d;
                            for (e.push([ r, "" ]), t = 0, o = 0, s = 0, a = "", u = ""; t < e.length; ) switch (e[t][0]) {
                              case i:
                                s++, u += e[t][1], t++;
                                break;

                              case n:
                                o++, a += e[t][1], t++;
                                break;

                              case r:
                                o + s > 1 ? (0 !== o && 0 !== s && (l = this.diffCommonPrefix(u, a), 0 !== l && (t - o - s > 0 && e[t - o - s - 1][0] === r ? e[t - o - s - 1][1] += u.substring(0, l) : (e.splice(0, 0, [ r, u.substring(0, l) ]), 
                                t++), u = u.substring(l), a = a.substring(l)), l = this.diffCommonSuffix(u, a), 
                                0 !== l && (e[t][1] = u.substring(u.length - l) + e[t][1], u = u.substring(0, u.length - l), 
                                a = a.substring(0, a.length - l))), 0 === o ? e.splice(t - s, o + s, [ i, u ]) : 0 === s ? e.splice(t - o, o + s, [ n, a ]) : e.splice(t - o - s, o + s, [ n, a ], [ i, u ]), 
                                t = t - o - s + (o ? 1 : 0) + (s ? 1 : 0) + 1) : 0 !== t && e[t - 1][0] === r ? (e[t - 1][1] += e[t][1], 
                                e.splice(t, 1)) : t++, s = 0, o = 0, a = "", u = "";
                            }
                            for ("" === e[e.length - 1][1] && e.pop(), c = !1, t = 1; t < e.length - 1; ) e[t - 1][0] === r && e[t + 1][0] === r && (f = e[t][1], 
                            d = f.substring(f.length - e[t - 1][1].length), d === e[t - 1][1] ? (e[t][1] = e[t - 1][1] + e[t][1].substring(0, e[t][1].length - e[t - 1][1].length), 
                            e[t + 1][1] = e[t - 1][1] + e[t + 1][1], e.splice(t - 1, 1), c = !0) : f.substring(0, e[t + 1][1].length) === e[t + 1][1] && (e[t - 1][1] += e[t + 1][1], 
                            e[t][1] = e[t][1].substring(e[t + 1][1].length) + e[t + 1][1], e.splice(t + 1, 1), 
                            c = !0)), t++;
                            c && this.diffCleanupMerge(e);
                        }, function(t, n) {
                            var i, r, o;
                            return i = new e(), r = i.DiffMain(t, n), i.diffCleanupEfficiency(r), o = i.diffPrettyHtml(r);
                        };
                    }();
                }
            }
        }();
    }).call(t, n(22), n(23)(e));
}, function(e, t) {
    function n() {
        throw new Error("setTimeout has not been defined");
    }
    function i() {
        throw new Error("clearTimeout has not been defined");
    }
    function r(e) {
        if (c === setTimeout) return setTimeout(e, 0);
        if ((c === n || !c) && setTimeout) return c = setTimeout, setTimeout(e, 0);
        try {
            return c(e, 0);
        } catch (t) {
            try {
                return c.call(null, e, 0);
            } catch (t) {
                return c.call(this, e, 0);
            }
        }
    }
    function o(e) {
        if (f === clearTimeout) return clearTimeout(e);
        if ((f === i || !f) && clearTimeout) return f = clearTimeout, clearTimeout(e);
        try {
            return f(e);
        } catch (t) {
            try {
                return f.call(null, e);
            } catch (t) {
                return f.call(this, e);
            }
        }
    }
    function s() {
        g && h && (g = !1, h.length ? p = h.concat(p) : m = -1, p.length && u());
    }
    function u() {
        if (!g) {
            var e = r(s);
            g = !0;
            for (var t = p.length; t; ) {
                for (h = p, p = []; ++m < t; ) h && h[m].run();
                m = -1, t = p.length;
            }
            h = null, g = !1, o(e);
        }
    }
    function a(e, t) {
        this.fun = e, this.array = t;
    }
    function l() {}
    var c, f, d = e.exports = {};
    !function() {
        try {
            c = "function" == typeof setTimeout ? setTimeout : n;
        } catch (e) {
            c = n;
        }
        try {
            f = "function" == typeof clearTimeout ? clearTimeout : i;
        } catch (e) {
            f = i;
        }
    }();
    var h, p = [], g = !1, m = -1;
    d.nextTick = function(e) {
        var t = new Array(arguments.length - 1);
        if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
        p.push(new a(e, t)), 1 !== p.length || g || r(u);
    }, a.prototype.run = function() {
        this.fun.apply(null, this.array);
    }, d.title = "browser", d.browser = !0, d.env = {}, d.argv = [], d.version = "", 
    d.versions = {}, d.on = l, d.addListener = l, d.once = l, d.off = l, d.removeListener = l, 
    d.removeAllListeners = l, d.emit = l, d.binding = function(e) {
        throw new Error("process.binding is not supported");
    }, d.cwd = function() {
        return "/";
    }, d.chdir = function(e) {
        throw new Error("process.chdir is not supported");
    }, d.umask = function() {
        return 0;
    };
}, function(e, t) {
    e.exports = function(e) {
        return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children = [], 
        e.webpackPolyfill = 1), e;
    };
}, function(e, t, n) {
    var i, r;
    !function(o, s) {
        "use strict";
        i = s, r = "function" == typeof i ? i.call(t, n, t, e) : i, !(void 0 !== r && (e.exports = r));
    }(this, function() {
        "use strict";
        function e(e, t) {
            var n;
            for (n in t) t.hasOwnProperty(n) && ("undefined" == typeof t[n] ? delete e[n] : e[n] = t[n]);
            return e;
        }
        function t(e, t) {
            var n;
            for (n = 0; n < e.length; n += 1) if (e[n] === t) return n;
            return -1;
        }
        function n(e, n) {
            var i = t(e, n);
            return i !== -1 ? e.splice(i, 1) : [];
        }
        function i(e) {
            return "undefined" != typeof e && "undefined" != typeof e.requireExpects && e.requireExpects;
        }
        function r(e) {
            return !!e.result;
        }
        function o(e) {
            return !r(e);
        }
        function s(e) {
            return o(e) && "undefined" == typeof e.expected && "undefined" == typeof e.actual;
        }
        function u(e) {
            return e.replace(/(\r?\n)/g, "$&# ");
        }
        function a(e) {
            return e.replace(/^\s+/, "");
        }
        function l(e) {
            return e;
        }
        function c(e, t, n, i) {
            e.push(t + ": " + i(n));
        }
        function f(e, t, n, i, r) {
            e && "undefined" != typeof i && c(t, n, i, r);
        }
        function d(e, t) {
            return t ? e + " - " + u(t) : e;
        }
        function h(h, v, b) {
            function y(e) {
                return T.config[e];
            }
            function w(e) {
                if (r(e)) return e.message;
                var t = [];
                return e.message && t.push(e.message), y("showExpectationOnFailure") && !s(e) && (c(t, "expected", e.expected, U), 
                c(t, "got", e.actual, U)), f(y("showTestNameOnFailure"), t, "test", e.name, l), 
                f(y("showModuleNameOnFailure"), t, "module", e.module, l), f(y("showSourceOnFailure"), t, "source", e.source, a), 
                t.join(", ");
            }
            function x(e) {
                T.puts(T.config.initialCount + ".." + e);
            }
            function E(e) {
                var i;
                t(S, e) !== -1 && (i = k.config[e], "undefined" != typeof i && n(i, M[e]));
            }
            function q(e) {
                var t;
                for (t = 0; t < e.length; t += 1) E(e[t]);
            }
            if (!h) throw new Error('should pass QUnit object reference. Please check QUnit\'s "require" path if you are using Node.js (or any CommonJS env).');
            if ("function" != typeof v) throw new Error("should pass print-like function");
            var k = h, T = {}, C = function(e, t) {
                b && "object" == typeof b && "undefined" != typeof b[e] && (v('# WARNING: Option "' + e + '" is deprecated and will be removed in future version.'), 
                t(b[e]));
            }, S = [ "moduleStart", "testStart", "log", "testDone", "done" ], M = {}, U = function() {
                return "undefined" != typeof k.dump && "function" == typeof k.dump.parse ? function(e) {
                    return k.dump.parse(e);
                } : "undefined" != typeof k.jsDump && "function" == typeof k.jsDump.parse ? function(e) {
                    return k.jsDump.parse(e);
                } : l;
            }();
            return T.config = e({
                initialCount: 1,
                showModuleNameOnFailure: !0,
                showTestNameOnFailure: !0,
                showExpectationOnFailure: !0,
                showSourceOnFailure: !0
            }, b), C("noPlan", function(e) {
                v('# Now QUnit-TAP works as with "noPlan: true" by default. If you want to delare plan explicitly, please use "QUnit.config.requireExpects" option instead.'), 
                T.config.noPlan = e;
            }), C("count", function(e) {
                T.config.initialCount = e + 1;
            }), C("showDetailsOnFailure", function(e) {
                T.config.showModuleNameOnFailure = e, T.config.showTestNameOnFailure = e, T.config.showExpectationOnFailure = e, 
                T.config.showSourceOnFailure = e;
            }), T.VERSION = p, T.puts = v, T.count = T.config.initialCount - 1, T.expectedCount = T.config.initialCount - 1, 
            T.explain = U, T.note = function(e) {
                T.puts(u("# " + e));
            }, T.diag = function(e) {
                return T.note(e), !1;
            }, T.moduleStart = function(e) {
                var t = "string" == typeof e ? e : e.name;
                T.note("module: " + t);
            }, T.testStart = function(e) {
                var t = "string" == typeof e ? e : e.name;
                T.note("test: " + t);
            }, T.log = function(e) {
                var t = "";
                T.count += 1, o(e) && (t += "not "), t += "ok " + T.count, T.puts(d(t, w(e)));
            }, T.testDone = function() {
                i(k.config) && (T.expectedCount += k.config.current.expected);
            }, T.done = function() {
                ("undefined" == typeof T.config.noPlan || T.config.noPlan) && x(i(k.config) ? T.expectedCount : T.count);
            }, T.unsubscribe = function() {
                "undefined" != typeof k.config && q(0 === arguments.length ? S : g.apply(arguments));
            }, function() {
                var e, t, n, i = m(k);
                for (t = 0; t < S.length; t += 1) e = S[t], n = i(k, T, e), M[e] = n;
            }(), T;
        }
        var p = "1.5.1", g = Array.prototype.slice, m = function(e) {
            return function(e, t, n) {
                var i = e[n], r = function() {
                    t[n].apply(t, g.apply(arguments));
                };
                return i(r), r;
            };
        };
        return h.qunitTap = function() {
            throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require("qunit-tap") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');
        }, h;
    });
}, function(e, t, n) {
    (function(e) {
        "use strict";
        var t = !1;
        QUnit.config.autostart = !1;
        var n = window.onerror;
        window.onerror = null, QUnit.begin(function() {
            window.onerror = function(e, t, i) {
                var r = !1;
                return n && (r = n(e, t, i)), QUnit.config.current && QUnit.config.current.async && QUnit.start(), 
                r;
            };
        }), QUnit.moduleStart(function() {
            t = !0;
        }), QUnit.done(function() {
            console.log("phantom-tap-done"), window.onerror = null;
        });
        var i = /^((not )?ok [0-9]+ (- )?)(.*)$/;
        qunitTap(QUnit, function() {
            if (1 == arguments.length && QUnit.config.current) {
                var e = i.exec(arguments[0]);
                if (e) return void console.log(e[1] + QUnit.config.current.testName + ": " + e[4]);
            }
            console.log.apply(console, arguments);
        }), window.setTimeout(function() {
            t || (console.log("QUnit not started by test"), console.log("phantom-tap-error"));
        }, 2e4), window.tests_included = !0, e && e.exports && (e.exports = QUnit);
    }).call(t, n(23)(e));
}, function(e, t) {} ]);
//# sourceMappingURL=test-config-client.min.js.map