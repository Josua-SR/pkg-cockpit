!function(e) {
    function t(r) {
        if (n[r]) return n[r].exports;
        var i = n[r] = {
            exports: {},
            id: r,
            loaded: !1
        };
        return e[r].call(i.exports, i, i.exports, t), i.loaded = !0, i.exports;
    }
    var n = {};
    return t.m = e, t.c = n, t.p = "", t(0);
}({
    0: function(e, t, n) {
        "use strict";
        var r = n(908), i = n(2), s = n(903), o = [ "# top comment", "", "foo bar", " indented value", "", "will disappear", "key value #comment" ].join("\n"), u = [ "# top comment", "", "foo moo", "indented value", "", "#key value #comment", "hooray value", "" ].join("\n");
        r.test("config_update", function(e) {
            var t = e.async();
            e.expect(10);
            var n, r = i.defer(), a = function(t, i) {
                e.equal(i.foo.value, "moo", "value changed correctly"), e.equal("key" in i, !1, "setting with comment deleted correctly"), 
                e.equal("will" in i, !1, "setting without comment deleted correctly"), e.equal(i.hooray.value, "value", "value added correctly"), 
                e.equal(n._rawContent, u, "raw text for changed config is correct"), r.resolve();
            }, l = "cockpit_config_read", c = i.file(l);
            c.replace(o).always(function() {
                e.equal(this.state(), "resolved", "writing initial config didn't fail"), e.equal(c.path, l, "file has correct path"), 
                n = new s.ConfigFile(l), n.wait().always(function() {
                    e.equal(this.state(), "resolved", "waiting for config didn't fail"), n.settings.foo.value = "moo", 
                    delete n.settings.key, delete n.settings.will, n.settings.hooray = {
                        value: "value"
                    }, n.addEventListener("kdumpConfigChanged", a), n.write(n.settings).always(function() {
                        e.equal(this.state(), "resolved", "writing to config didn't fail"), r.promise().done(function() {
                            e.equal(this.state(), "resolved", "waiting for config change didn't fail"), t();
                        });
                    });
                });
            });
        }), window.setTimeout(function() {
            r.start();
        });
    },
    2: function(e, t) {
        e.exports = cockpit;
    },
    294: function(e, t) {
        e.exports = function(e) {
            return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children = [], 
            e.webpackPolyfill = 1), e;
        };
    },
    435: function(e, t) {
        function n() {
            throw new Error("setTimeout has not been defined");
        }
        function r() {
            throw new Error("clearTimeout has not been defined");
        }
        function i(e) {
            if (c === setTimeout) return setTimeout(e, 0);
            if ((c === n || !c) && setTimeout) return c = setTimeout, setTimeout(e, 0);
            try {
                return c(e, 0);
            } catch (t) {
                try {
                    return c.call(null, e, 0);
                } catch (t) {
                    return c.call(this, e, 0);
                }
            }
        }
        function s(e) {
            if (f === clearTimeout) return clearTimeout(e);
            if ((f === r || !f) && clearTimeout) return f = clearTimeout, clearTimeout(e);
            try {
                return f(e);
            } catch (t) {
                try {
                    return f.call(null, e);
                } catch (t) {
                    return f.call(this, e);
                }
            }
        }
        function o() {
            m && h && (m = !1, h.length ? p = h.concat(p) : g = -1, p.length && u());
        }
        function u() {
            if (!m) {
                var e = i(o);
                m = !0;
                for (var t = p.length; t; ) {
                    for (h = p, p = []; ++g < t; ) h && h[g].run();
                    g = -1, t = p.length;
                }
                h = null, m = !1, s(e);
            }
        }
        function a(e, t) {
            this.fun = e, this.array = t;
        }
        function l() {}
        var c, f, d = e.exports = {};
        !function() {
            try {
                c = "function" == typeof setTimeout ? setTimeout : n;
            } catch (e) {
                c = n;
            }
            try {
                f = "function" == typeof clearTimeout ? clearTimeout : r;
            } catch (e) {
                f = r;
            }
        }();
        var h, p = [], m = !1, g = -1;
        d.nextTick = function(e) {
            var t = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
            p.push(new a(e, t)), 1 !== p.length || m || i(u);
        }, a.prototype.run = function() {
            this.fun.apply(null, this.array);
        }, d.title = "browser", d.browser = !0, d.env = {}, d.argv = [], d.version = "", 
        d.versions = {}, d.on = l, d.addListener = l, d.once = l, d.off = l, d.removeListener = l, 
        d.removeAllListeners = l, d.emit = l, d.prependListener = l, d.prependOnceListener = l, 
        d.listeners = function(e) {
            return [];
        }, d.binding = function(e) {
            throw new Error("process.binding is not supported");
        }, d.cwd = function() {
            return "/";
        }, d.chdir = function(e) {
            throw new Error("process.chdir is not supported");
        }, d.umask = function() {
            return 0;
        };
    },
    903: function(e, t, n) {
        "use strict";
        function r(e) {
            return e && e.__esModule ? e : {
                default: e
            };
        }
        function i(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }
        Object.defineProperty(t, "__esModule", {
            value: !0
        }), t.ConfigFile = void 0;
        var s = function() {
            function e(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), 
                    Object.defineProperty(e, r.key, r);
                }
            }
            return function(t, n, r) {
                return n && e(t.prototype, n), r && e(t, r), t;
            };
        }(), o = n(2), u = r(o);
        t.ConfigFile = function() {
            function e(t) {
                var n = this, r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                i(this, e), this.filename = t, this._rawContent = void 0, this._lines = [], this._originalSettings = {}, 
                this._dataAvailable = u.default.defer(), this.settings = {}, u.default.event_target(this), 
                this._fileHandle = u.default.file(t, {
                    superuser: r
                }), this._fileHandle.watch(function(e) {
                    n._parseText(e);
                });
            }
            return s(e, [ {
                key: "close",
                value: function() {
                    this._fileHandle && (this._fileHandle.remove(), this._fileHandle = void 0);
                }
            }, {
                key: "wait",
                value: function() {
                    return this._dataAvailable.promise();
                }
            }, {
                key: "_parseText",
                value: function(e) {
                    var t = this, n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
                    return this._dataAvailable && this._dataAvailable.resolve(), e ? void (e != this._rawContent && (this._rawContent = e, 
                    this._lines = e.split(/\r?\n/), this.settings = {}, this._lines.forEach(function(e, n) {
                        var r = e.trim();
                        if (0 !== r.indexOf("#") && 0 !== r.length) {
                            var i = r.indexOf(" ");
                            if (i !== -1) {
                                var s = r.substring(0, i), o = r.substring(i + 1).trim(), u = o.indexOf("#"), a = void 0;
                                u !== -1 && (a = o.substring(u).trim(), o = o.substring(0, u).trim()), t.settings[s] = {
                                    index: n,
                                    value: o,
                                    origLine: e,
                                    comment: a
                                };
                            }
                        }
                    }), this._originalSettings = {}, Object.keys(this.settings).forEach(function(e) {
                        t._originalSettings[e] = u.default.extend({}, t.settings[e]);
                    }), n || this.dispatchEvent("kdumpConfigChanged", this.settings))) : (this._originalSettings = null, 
                    this.settings = null, void (n || this.dispatchEvent("kdumpConfigChanged", this.settings)));
                }
            }, {
                key: "_generateConfig",
                value: function(e) {
                    var t = this, n = this._lines.slice(0), r = [];
                    return Object.keys(this._originalSettings).forEach(function(i) {
                        if (!(i in e && i in e && e[i].value)) {
                            var s = t._originalSettings[i];
                            void 0 !== s.comment ? n[s.index] = "#" + s.origLine : r.push(s.index);
                        }
                    }), Object.keys(e).forEach(function(r) {
                        var i = e[r], s = r + " " + i.value;
                        if (i.comment && (s = s + " " + i.comment), !(r in t._originalSettings)) return void n.push(s);
                        var o = t._originalSettings[r];
                        n[o.index] = s;
                    }), r.sort().reverse().forEach(function(e) {
                        n.splice(e, 1);
                    }), n.join("\n") + "\n";
                }
            }, {
                key: "write",
                value: function(e) {
                    var t = this;
                    return this._fileHandle.modify(function(n) {
                        return t._parseText(n, !0), t._generateConfig(e);
                    });
                }
            } ]), e;
        }();
    },
    908: function(e, t, n) {
        "use strict";
        !function() {
            window.QUnit = n(909), window.qunitTap = n(910), n(911), n(912), e.exports = window.QUnit;
        }();
    },
    909: function(e, t, n) {
        var r;
        (function(e, i, s) {
            /*!
	 * QUnit 2.8.0
	 * https://qunitjs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2018-11-02T16:17Z
	 */
            !function(o) {
                "use strict";
                function u(e) {
                    return function() {
                        Ye && Ye[e].apply(Ye, arguments);
                    };
                }
                function a() {
                    return $e && "undefined" != typeof $e.performance && "function" == typeof $e.performance.mark && "function" == typeof $e.performance.measure;
                }
                function l(e, t, n) {
                    try {
                        ut.measure(e, t, n);
                    } catch (e) {
                        Xe.warn("performance.measure could not be executed because of ", e.message);
                    }
                }
                function c(e, t) {
                    var n, r, i = e.slice();
                    for (n = 0; n < i.length; n++) for (r = 0; r < t.length; r++) if (i[n] === t[r]) {
                        i.splice(n, 1), n--;
                        break;
                    }
                    return i;
                }
                function f(e, t) {
                    return t.indexOf(e) !== -1;
                }
                function d(e) {
                    var t, n, r = m("array", e) ? [] : {};
                    for (t in e) it.call(e, t) && (n = e[t], r[t] = n === Object(n) ? d(n) : n);
                    return r;
                }
                function h(e, t, n) {
                    for (var r in t) it.call(t, r) && (void 0 === t[r] ? delete e[r] : n && "undefined" != typeof e[r] || (e[r] = t[r]));
                    return e;
                }
                function p(e) {
                    if ("undefined" == typeof e) return "undefined";
                    if (null === e) return "null";
                    var t = rt.call(e).match(/^\[object\s(.*)\]$/), n = t && t[1];
                    switch (n) {
                      case "Number":
                        return isNaN(e) ? "nan" : "number";

                      case "String":
                      case "Boolean":
                      case "Array":
                      case "Set":
                      case "Map":
                      case "Date":
                      case "RegExp":
                      case "Function":
                      case "Symbol":
                        return n.toLowerCase();

                      default:
                        return "undefined" == typeof e ? "undefined" : Ze(e);
                    }
                }
                function m(e, t) {
                    return p(t) === e;
                }
                function g(e, t) {
                    for (var n = e + "" + t, r = 0, i = 0; i < n.length; i++) r = (r << 5) - r + n.charCodeAt(i), 
                    r |= 0;
                    var s = (4294967296 + r).toString(16);
                    return s.length < 8 && (s = "0000000" + s), s.slice(-8);
                }
                function v(e, t, n) {
                    var r = gt.length ? gt.slice(-1)[0] : null, i = null !== r ? [ r.name, e ].join(" > ") : e, s = r ? r.suiteReport : Jt, o = null !== r && r.skip || n.skip, u = null !== r && r.todo || n.todo, a = {
                        name: i,
                        parentModule: r,
                        tests: [],
                        moduleId: g(i),
                        testsRun: 0,
                        unskippedTestsRun: 0,
                        childModules: [],
                        suiteReport: new pt(e, s),
                        skip: o,
                        todo: !o && u
                    }, l = {};
                    return r && (r.childModules.push(a), h(l, r.testEnvironment)), h(l, t), a.testEnvironment = l, 
                    ft.modules.push(a), a;
                }
                function y(e, t, n) {
                    function r(e, t, n) {
                        var r = t[n];
                        e[n] = "function" == typeof r ? [ r ] : [], delete t[n];
                    }
                    function i(e, t) {
                        return function(n) {
                            e.hooks[t].push(n);
                        };
                    }
                    var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                    "function" === p(t) && (n = t, t = void 0);
                    var o = v(e, t, s), u = o.testEnvironment, a = o.hooks = {};
                    r(a, u, "before"), r(a, u, "beforeEach"), r(a, u, "afterEach"), r(a, u, "after");
                    var l = {
                        before: i(o, "before"),
                        beforeEach: i(o, "beforeEach"),
                        afterEach: i(o, "afterEach"),
                        after: i(o, "after")
                    }, c = ft.currentModule;
                    "function" === p(n) && (gt.push(o), ft.currentModule = o, n.call(o.testEnvironment, l), 
                    gt.pop(), o = o.parentModule || c), ft.currentModule = o;
                }
                function b(e, t, n) {
                    mt || y(e, t, n);
                }
                function w(e, t) {
                    if ("string" !== p(e)) throw new TypeError("eventName must be a string when emitting an event");
                    for (var n = vt[e], r = n ? [].concat(nt(n)) : [], i = 0; i < r.length; i++) r[i](t);
                }
                function k(e, t) {
                    if ("string" !== p(e)) throw new TypeError("eventName must be a string when registering a listener");
                    if (!f(e, yt)) {
                        var n = yt.join(", ");
                        throw new Error('"' + e + '" is not a valid event; must be one of: ' + n + ".");
                    }
                    if ("function" !== p(t)) throw new TypeError("callback must be a function when registering a listener");
                    vt[e] || (vt[e] = []), f(t, vt[e]) || vt[e].push(t);
                }
                function x(e) {
                    var t = "undefined" == typeof e ? "undefined" : Ze(e);
                    return null !== e && ("object" === t || "function" === t);
                }
                function T(e) {
                    return "function" == typeof e;
                }
                function E(e) {
                    Tt = e;
                }
                function C(e) {
                    Et = e;
                }
                function _() {
                    return function() {
                        return e.nextTick(j);
                    };
                }
                function q() {
                    return "undefined" != typeof xt ? function() {
                        xt(j);
                    } : M();
                }
                function N() {
                    var e = 0, t = new qt(j), n = document.createTextNode("");
                    return t.observe(n, {
                        characterData: !0
                    }), function() {
                        n.data = e = ++e % 2;
                    };
                }
                function S() {
                    var e = new MessageChannel();
                    return e.port1.onmessage = j, function() {
                        return e.port2.postMessage(0);
                    };
                }
                function M() {
                    var e = setTimeout;
                    return function() {
                        return e(j, 1);
                    };
                }
                function j() {
                    for (var e = 0; e < kt; e += 2) {
                        var t = Mt[e], n = Mt[e + 1];
                        t(n), Mt[e] = void 0, Mt[e + 1] = void 0;
                    }
                    kt = 0;
                }
                function A() {
                    try {
                        var e = Function("return this")().require("vertx");
                        return xt = e.runOnLoop || e.runOnContext, q();
                    } catch (e) {
                        return M();
                    }
                }
                function O(e, t) {
                    var n = this, r = new this.constructor(I);
                    void 0 === r[At] && Z(r);
                    var i = n._state;
                    if (i) {
                        var s = arguments[i - 1];
                        Et(function() {
                            return J(i, r, s, n._result);
                        });
                    } else z(n, r, e, t);
                    return r;
                }
                function R(e) {
                    var t = this;
                    if (e && "object" === ("undefined" == typeof e ? "undefined" : Ze(e)) && e.constructor === t) return e;
                    var n = new t(I);
                    return B(n, e), n;
                }
                function I() {}
                function L() {
                    return new TypeError("You cannot resolve a promise with itself");
                }
                function U() {
                    return new TypeError("A promises callback cannot return that same promise.");
                }
                function F(e) {
                    try {
                        return e.then;
                    } catch (e) {
                        return Lt.error = e, Lt;
                    }
                }
                function H(e, t, n, r) {
                    try {
                        e.call(t, n, r);
                    } catch (e) {
                        return e;
                    }
                }
                function P(e, t, n) {
                    Et(function(e) {
                        var r = !1, i = H(n, t, function(n) {
                            r || (r = !0, t !== n ? B(e, n) : G(e, n));
                        }, function(t) {
                            r || (r = !0, Y(e, t));
                        }, "Settle: " + (e._label || " unknown promise"));
                        !r && i && (r = !0, Y(e, i));
                    }, e);
                }
                function D(e, t) {
                    t._state === Rt ? G(e, t._result) : t._state === It ? Y(e, t._result) : z(t, void 0, function(t) {
                        return B(e, t);
                    }, function(t) {
                        return Y(e, t);
                    });
                }
                function Q(e, t, n) {
                    t.constructor === e.constructor && n === O && t.constructor.resolve === R ? D(e, t) : n === Lt ? (Y(e, Lt.error), 
                    Lt.error = null) : void 0 === n ? G(e, t) : T(n) ? P(e, t, n) : G(e, t);
                }
                function B(e, t) {
                    e === t ? Y(e, L()) : x(t) ? Q(e, t, F(t)) : G(e, t);
                }
                function $(e) {
                    e._onerror && e._onerror(e._result), W(e);
                }
                function G(e, t) {
                    e._state === Ot && (e._result = t, e._state = Rt, 0 !== e._subscribers.length && Et(W, e));
                }
                function Y(e, t) {
                    e._state === Ot && (e._state = It, e._result = t, Et($, e));
                }
                function z(e, t, n, r) {
                    var i = e._subscribers, s = i.length;
                    e._onerror = null, i[s] = t, i[s + Rt] = n, i[s + It] = r, 0 === s && e._state && Et(W, e);
                }
                function W(e) {
                    var t = e._subscribers, n = e._state;
                    if (0 !== t.length) {
                        for (var r = void 0, i = void 0, s = e._result, o = 0; o < t.length; o += 3) r = t[o], 
                        i = t[o + n], r ? J(n, r, i, s) : i(s);
                        e._subscribers.length = 0;
                    }
                }
                function V(e, t) {
                    try {
                        return e(t);
                    } catch (e) {
                        return Lt.error = e, Lt;
                    }
                }
                function J(e, t, n, r) {
                    var i = T(n), s = void 0, o = void 0, u = void 0, a = void 0;
                    if (i) {
                        if (s = V(n, r), s === Lt ? (a = !0, o = s.error, s.error = null) : u = !0, t === s) return void Y(t, U());
                    } else s = r, u = !0;
                    t._state !== Ot || (i && u ? B(t, s) : a ? Y(t, o) : e === Rt ? G(t, s) : e === It && Y(t, s));
                }
                function K(e, t) {
                    try {
                        t(function(t) {
                            B(e, t);
                        }, function(t) {
                            Y(e, t);
                        });
                    } catch (t) {
                        Y(e, t);
                    }
                }
                function X() {
                    return Ut++;
                }
                function Z(e) {
                    e[At] = Ut++, e._state = void 0, e._result = void 0, e._subscribers = [];
                }
                function ee() {
                    return new Error("Array Methods must be provided an Array");
                }
                function te(e) {
                    return new Ft(this, e).promise;
                }
                function ne(e) {
                    var t = this;
                    return new t(wt(e) ? function(n, r) {
                        for (var i = e.length, s = 0; s < i; s++) t.resolve(e[s]).then(n, r);
                    } : function(e, t) {
                        return t(new TypeError("You must pass an array to race."));
                    });
                }
                function re(e) {
                    var t = this, n = new t(I);
                    return Y(n, e), n;
                }
                function ie() {
                    throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                }
                function se() {
                    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                }
                function oe() {
                    var e = void 0;
                    if ("undefined" != typeof i) e = i; else if ("undefined" != typeof self) e = self; else try {
                        e = Function("return this")();
                    } catch (e) {
                        throw new Error("polyfill failed because global object is unavailable in this environment");
                    }
                    var t = e.Promise;
                    if (t) {
                        var n = null;
                        try {
                            n = Object.prototype.toString.call(t.resolve());
                        } catch (e) {}
                        if ("[object Promise]" === n && !t.cast) return;
                    }
                    e.Promise = Ht;
                }
                function ue(e) {
                    function t(e) {
                        var t = function(t) {
                            if ("function" !== p(t)) throw new Error("QUnit logging methods require a callback function as their first parameters.");
                            ft.callbacks[e].push(t);
                        };
                        return t;
                    }
                    var n, r, i, s = [ "begin", "done", "log", "testStart", "testDone", "moduleStart", "moduleDone" ];
                    for (n = 0, r = s.length; n < r; n++) i = s[n], "undefined" === p(ft.callbacks[i]) && (ft.callbacks[i] = []), 
                    e[i] = t(i);
                }
                function ae(e, t) {
                    var n = ft.callbacks[e];
                    return "log" === e ? void n.map(function(e) {
                        return e(t);
                    }) : n.reduce(function(e, n) {
                        return e.then(function() {
                            return Pt.resolve(n(t));
                        });
                    }, Pt.resolve([]));
                }
                function le(e, t) {
                    t = void 0 === t ? 4 : t;
                    var n, r, i;
                    if (e && e.stack) {
                        if (n = e.stack.split("\n"), /^error$/i.test(n[0]) && n.shift(), Dt) {
                            for (r = [], i = t; i < n.length && n[i].indexOf(Dt) === -1; i++) r.push(n[i]);
                            if (r.length) return r.join("\n");
                        }
                        return n[t];
                    }
                }
                function ce(e) {
                    var t = new Error();
                    if (!t.stack) try {
                        throw t;
                    } catch (e) {
                        t = e;
                    }
                    return le(t, e);
                }
                function fe() {
                    de(), $t.length || ft.blocking || ft.current || pe();
                }
                function de() {
                    var e = st();
                    ft.depth = (ft.depth || 0) + 1, he(e), ft.depth--;
                }
                function he(e) {
                    if ($t.length && !ft.blocking) {
                        var t = st() - e;
                        if (!lt.setTimeout || ft.updateRate <= 0 || t < ft.updateRate) {
                            var n = $t.shift();
                            Pt.resolve(n()).then(function() {
                                $t.length ? he(e) : fe();
                            });
                        } else ze(fe);
                    }
                }
                function pe() {
                    if (!ft.blocking && !ft.queue.length && 0 === ft.depth) return void be();
                    var e = ft.queue.shift();
                    me(e()), Qt > 0 && Qt--, fe();
                }
                function me(e) {
                    $t.push.apply($t, nt(e));
                }
                function ge() {
                    return $t.length;
                }
                function ve(e, t, n) {
                    if (t) ft.queue.splice(Qt++, 0, e); else if (n) {
                        Bt || (Bt = ye(n));
                        var r = Math.floor(Bt() * (ft.queue.length - Qt + 1));
                        ft.queue.splice(Qt + r, 0, e);
                    } else ft.queue.push(e);
                }
                function ye(e) {
                    var t = parseInt(g(e), 16) || -1;
                    return function() {
                        return t ^= t << 13, t ^= t >>> 17, t ^= t << 5, t < 0 && (t += 4294967296), t / 4294967296;
                    };
                }
                function be() {
                    var e = ft.storage;
                    Gt.finished = !0;
                    var t = st() - ft.started, n = ft.stats.all - ft.stats.bad;
                    if (0 === ft.stats.all) {
                        if (ft.filter && ft.filter.length) throw new Error('No tests matched the filter "' + ft.filter + '".');
                        if (ft.module && ft.module.length) throw new Error('No tests matched the module "' + ft.module + '".');
                        if (ft.moduleId && ft.moduleId.length) throw new Error('No tests matched the moduleId "' + ft.moduleId + '".');
                        if (ft.testId && ft.testId.length) throw new Error('No tests matched the testId "' + ft.testId + '".');
                        throw new Error("No tests were run.");
                    }
                    w("runEnd", Jt.end(!0)), ae("done", {
                        passed: n,
                        failed: ft.stats.bad,
                        total: ft.stats.all,
                        runtime: t
                    }).then(function() {
                        if (e && 0 === ft.stats.bad) for (var t = e.length - 1; t >= 0; t--) {
                            var n = e.key(t);
                            0 === n.indexOf("qunit-test-") && e.removeItem(n);
                        }
                    });
                }
                function we(e) {
                    var t, n;
                    for (++we.count, this.expected = null, this.assertions = [], this.semaphore = 0, 
                    this.module = ft.currentModule, this.stack = ce(3), this.steps = [], this.timeout = void 0, 
                    this.module.skip ? (e.skip = !0, e.todo = !1) : this.module.todo && !e.skip && (e.todo = !0), 
                    h(this, e), this.testReport = new Yt(e.testName, this.module.suiteReport, {
                        todo: e.todo,
                        skip: e.skip,
                        valid: this.valid()
                    }), t = 0, n = this.module.tests; t < n.length; t++) this.module.tests[t].name === this.testName && (this.testName += " ");
                    if (this.testId = g(this.module.name, this.testName), this.module.tests.push({
                        name: this.testName,
                        testId: this.testId,
                        skip: !!e.skip
                    }), e.skip) this.callback = function() {}, this.async = !1, this.expected = 0; else {
                        if ("function" != typeof this.callback) {
                            var r = this.todo ? "todo" : "test";
                            throw new TypeError("You must provide a function as a test callback to QUnit." + r + '("' + e.testName + '")');
                        }
                        this.assert = new Wt(this);
                    }
                }
                function ke(e) {
                    for (var t = e, n = []; t && 0 === t.testsRun; ) n.push(t), t = t.parentModule;
                    return n.reverse();
                }
                function xe() {
                    if (!ft.current) throw new Error("pushFailure() assertion outside test context, in " + ce(2));
                    var e = ft.current;
                    return e.pushFailure.apply(e, arguments);
                }
                function Te() {
                    if (ft.pollution = [], ft.noglobals) for (var e in o) if (it.call(o, e)) {
                        if (/^qunit-test-output/.test(e)) continue;
                        ft.pollution.push(e);
                    }
                }
                function Ee() {
                    var e, t, n = ft.pollution;
                    Te(), e = c(ft.pollution, n), e.length > 0 && xe("Introduced global variable(s): " + e.join(", ")), 
                    t = c(n, ft.pollution), t.length > 0 && xe("Deleted global variable(s): " + t.join(", "));
                }
                function Ce(e, t) {
                    if (!zt) {
                        var n = new we({
                            testName: e,
                            callback: t
                        });
                        n.queue();
                    }
                }
                function _e(e, t) {
                    if (!zt) {
                        var n = new we({
                            testName: e,
                            callback: t,
                            todo: !0
                        });
                        n.queue();
                    }
                }
                function qe(e) {
                    if (!zt) {
                        var t = new we({
                            testName: e,
                            skip: !0
                        });
                        t.queue();
                    }
                }
                function Ne(e, t) {
                    if (!zt) {
                        ft.queue.length = 0, zt = !0;
                        var n = new we({
                            testName: e,
                            callback: t
                        });
                        n.queue();
                    }
                }
                function Se(e) {
                    if (e.semaphore += 1, ft.blocking = !0, lt.setTimeout) {
                        var t = void 0;
                        "number" == typeof e.timeout ? t = e.timeout : "number" == typeof ft.testTimeout && (t = ft.testTimeout), 
                        "number" == typeof t && t > 0 && (We(ft.timeout), ft.timeout = ze(function() {
                            xe("Test took longer than " + t + "ms; test timed out.", ce(2)), Me(e);
                        }, t));
                    }
                    var n = !1;
                    return function() {
                        n || (n = !0, e.semaphore -= 1, je(e));
                    };
                }
                function Me(e) {
                    e.semaphore = 0, je(e);
                }
                function je(e) {
                    if (isNaN(e.semaphore)) return e.semaphore = 0, void xe("Invalid value on test.semaphore", ce(2));
                    if (!(e.semaphore > 0)) return e.semaphore < 0 ? (e.semaphore = 0, void xe("Tried to restart test while already started (test's semaphore was 0 already)", ce(2))) : void (lt.setTimeout ? (ft.timeout && We(ft.timeout), 
                    ft.timeout = ze(function() {
                        e.semaphore > 0 || (ft.timeout && We(ft.timeout), Qe());
                    })) : Qe());
                }
                function Ae(e) {
                    for (var t = [].concat(e.tests), n = [].concat(nt(e.childModules)); n.length; ) {
                        var r = n.shift();
                        t.push.apply(t, r.tests), n.push.apply(n, nt(r.childModules));
                    }
                    return t;
                }
                function Oe(e) {
                    return Ae(e).length;
                }
                function Re(e) {
                    return Ae(e).filter(function(e) {
                        return !e.skip;
                    }).length;
                }
                function Ie(e, t) {
                    for (e.testsRun++, t || e.unskippedTestsRun++; e = e.parentModule; ) e.testsRun++, 
                    t || e.unskippedTestsRun++;
                }
                function Le(e) {
                    var t = e.toString();
                    if ("[object" === t.substring(0, 7)) {
                        var n = e.name ? e.name.toString() : "Error", r = e.message ? e.message.toString() : "";
                        return n && r ? n + ": " + r : n ? n : r ? r : "Error";
                    }
                    return t;
                }
                function Ue(e) {
                    if (lt.document) {
                        if ($e.QUnit && $e.QUnit.version) throw new Error("QUnit has already been defined.");
                        $e.QUnit = e;
                    }
                    "undefined" != typeof s && s && s.exports && (s.exports = e, s.exports.QUnit = e), 
                    "undefined" != typeof t && t && (t.QUnit = e), r = function() {
                        return e;
                    }.call(t, n, t, s), !(void 0 !== r && (s.exports = r)), e.config.autostart = !1, 
                    Ge && Ge.WorkerGlobalScope && Ge instanceof Ge.WorkerGlobalScope && (Ge.QUnit = e);
                }
                function Fe(e) {
                    for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) n[r - 1] = arguments[r];
                    if (ft.current) {
                        if (ft.current.ignoreGlobalErrors) return !0;
                        xe.apply(void 0, [ e.message, e.stacktrace || e.fileName + ":" + e.lineNumber ].concat(n));
                    } else Ce("global failure", h(function() {
                        xe.apply(void 0, [ e.message, e.stacktrace || e.fileName + ":" + e.lineNumber ].concat(n));
                    }, {
                        validTest: !0
                    }));
                    return !1;
                }
                function He(e) {
                    var t = {
                        result: !1,
                        message: e.message || "error",
                        actual: e,
                        source: e.stack || ce(3)
                    }, n = ft.current;
                    n ? n.assert.pushResult(t) : Ce("global failure", h(function(e) {
                        e.pushResult(t);
                    }, {
                        validTest: !0
                    }));
                }
                function Pe() {
                    Xt = !0, lt.setTimeout ? ze(function() {
                        Qe();
                    }) : Qe();
                }
                function De() {
                    ft.blocking = !1, Gt.advance();
                }
                function Qe() {
                    var e, t, n = [];
                    if (ft.started) De(); else {
                        for (ft.started = st(), "" === ft.modules[0].name && 0 === ft.modules[0].tests.length && ft.modules.shift(), 
                        e = 0, t = ft.modules.length; e < t; e++) n.push({
                            name: ft.modules[e].name,
                            tests: ft.modules[e].tests
                        });
                        w("runStart", Jt.start(!0)), ae("begin", {
                            totalTests: we.count,
                            modules: n
                        }).then(De);
                    }
                }
                function Be(e) {
                    return e ? (e += "", e.replace(/['"<>&]/g, function(e) {
                        switch (e) {
                          case "'":
                            return "&#039;";

                          case '"':
                            return "&quot;";

                          case "<":
                            return "&lt;";

                          case ">":
                            return "&gt;";

                          case "&":
                            return "&amp;";
                        }
                    })) : "";
                }
                o = o && o.hasOwnProperty("default") ? o.default : o;
                var $e = o.window, Ge = o.self, Ye = o.console, ze = o.setTimeout, We = o.clearTimeout, Ve = $e && $e.document, Je = $e && $e.navigator, Ke = function() {
                    var e = "qunit-test-string";
                    try {
                        return o.sessionStorage.setItem(e, e), o.sessionStorage.removeItem(e), o.sessionStorage;
                    } catch (e) {
                        return;
                    }
                }(), Xe = {
                    warn: u("warn")
                }, Ze = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                }, et = function(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }, tt = function() {
                    function e(e, t) {
                        for (var n = 0; n < t.length; n++) {
                            var r = t[n];
                            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), 
                            Object.defineProperty(e, r.key, r);
                        }
                    }
                    return function(t, n, r) {
                        return n && e(t.prototype, n), r && e(t, r), t;
                    };
                }(), nt = function(e) {
                    if (Array.isArray(e)) {
                        for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
                        return n;
                    }
                    return Array.from(e);
                }, rt = Object.prototype.toString, it = Object.prototype.hasOwnProperty, st = Date.now || function() {
                    return new Date().getTime();
                }, ot = a(), ut = ot ? $e.performance : void 0, at = ot ? ut.now.bind(ut) : st, lt = {
                    document: $e && void 0 !== $e.document,
                    setTimeout: void 0 !== ze
                }, ct = function() {
                    function e(e, t) {
                        return "object" === ("undefined" == typeof e ? "undefined" : Ze(e)) && (e = e.valueOf()), 
                        "object" === ("undefined" == typeof t ? "undefined" : Ze(t)) && (t = t.valueOf()), 
                        e === t;
                    }
                    function t(e, t) {
                        var n = a(e), r = a(t);
                        return e.constructor === t.constructor || (n && null === n.constructor && (n = null), 
                        r && null === r.constructor && (r = null), null === n && r === Object.prototype || null === r && n === Object.prototype);
                    }
                    function n(e) {
                        return "flags" in e ? e.flags : e.toString().match(/[gimuy]*$/)[0];
                    }
                    function r(e) {
                        return [ "object", "array", "map", "set" ].indexOf(p(e)) !== -1;
                    }
                    function i(e, t) {
                        return e === t || (r(e) ? (u.every(function(n) {
                            return n.a !== e || n.b !== t;
                        }) && u.push({
                            a: e,
                            b: t
                        }), !0) : s(e, t));
                    }
                    function s(e, t) {
                        var n = p(e);
                        return p(t) === n && l[n](e, t);
                    }
                    function o(e, t) {
                        var n, r;
                        if (arguments.length < 2) return !0;
                        for (u = [ {
                            a: e,
                            b: t
                        } ], n = 0; n < u.length; n++) if (r = u[n], r.a !== r.b && !s(r.a, r.b)) return !1;
                        return 2 === arguments.length || o.apply(this, [].slice.call(arguments, 1));
                    }
                    var u = [], a = Object.getPrototypeOf || function(e) {
                        return e.__proto__;
                    }, l = {
                        string: e,
                        boolean: e,
                        number: e,
                        null: e,
                        undefined: e,
                        symbol: e,
                        date: e,
                        nan: function() {
                            return !0;
                        },
                        regexp: function(e, t) {
                            return e.source === t.source && n(e) === n(t);
                        },
                        function: function() {
                            return !1;
                        },
                        array: function(e, t) {
                            var n, r;
                            if (r = e.length, r !== t.length) return !1;
                            for (n = 0; n < r; n++) if (!i(e[n], t[n])) return !1;
                            return !0;
                        },
                        set: function(e, t) {
                            var n, r = !0;
                            return e.size === t.size && (e.forEach(function(e) {
                                r && (n = !1, t.forEach(function(t) {
                                    var r;
                                    n || (r = u, o(t, e) && (n = !0), u = r);
                                }), n || (r = !1));
                            }), r);
                        },
                        map: function(e, t) {
                            var n, r = !0;
                            return e.size === t.size && (e.forEach(function(e, i) {
                                r && (n = !1, t.forEach(function(t, r) {
                                    var s;
                                    n || (s = u, o([ t, r ], [ e, i ]) && (n = !0), u = s);
                                }), n || (r = !1));
                            }), r);
                        },
                        object: function(e, n) {
                            var r, o = [], u = [];
                            if (t(e, n) === !1) return !1;
                            for (r in e) if (o.push(r), (e.constructor === Object || "undefined" == typeof e.constructor || "function" != typeof e[r] || "function" != typeof n[r] || e[r].toString() !== n[r].toString()) && !i(e[r], n[r])) return !1;
                            for (r in n) u.push(r);
                            return s(o.sort(), u.sort());
                        }
                    };
                    return function() {
                        var e = o.apply(void 0, arguments);
                        return u.length = 0, e;
                    };
                }(), ft = {
                    queue: [],
                    blocking: !0,
                    reorder: !0,
                    altertitle: !0,
                    collapse: !0,
                    scrolltop: !0,
                    maxDepth: 5,
                    requireExpects: !1,
                    urlConfig: [],
                    modules: [],
                    currentModule: {
                        name: "",
                        tests: [],
                        childModules: [],
                        testsRun: 0,
                        unskippedTestsRun: 0,
                        hooks: {
                            before: [],
                            beforeEach: [],
                            afterEach: [],
                            after: []
                        }
                    },
                    callbacks: {},
                    storage: Ke
                }, dt = $e && $e.QUnit && $e.QUnit.config;
                $e && $e.QUnit && !$e.QUnit.version && h(ft, dt), ft.modules.push(ft.currentModule);
                var ht = function() {
                    function e(e) {
                        return '"' + e.toString().replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
                    }
                    function t(e) {
                        return e + "";
                    }
                    function n(e, t, n) {
                        var r = o.separator(), i = o.indent(), s = o.indent(1);
                        return t.join && (t = t.join("," + r + s)), t ? [ e, s + t, i + n ].join(r) : e + n;
                    }
                    function r(e, t) {
                        var r = e.length, i = new Array(r);
                        if (o.maxDepth && o.depth > o.maxDepth) return "[object Array]";
                        for (this.up(); r--; ) i[r] = this.parse(e[r], void 0, t);
                        return this.down(), n("[", i, "]");
                    }
                    function i(e) {
                        return "[object Array]" === rt.call(e) || "number" == typeof e.length && void 0 !== e.item && (e.length ? e.item(0) === e[0] : null === e.item(0) && void 0 === e[0]);
                    }
                    var s = /^function (\w+)/, o = {
                        parse: function(e, t, n) {
                            n = n || [];
                            var r, i, s, o = n.indexOf(e);
                            return o !== -1 ? "recursion(" + (o - n.length) + ")" : (t = t || this.typeOf(e), 
                            i = this.parsers[t], s = "undefined" == typeof i ? "undefined" : Ze(i), "function" === s ? (n.push(e), 
                            r = i.call(this, e, n), n.pop(), r) : "string" === s ? i : this.parsers.error);
                        },
                        typeOf: function(e) {
                            var t;
                            return t = null === e ? "null" : "undefined" == typeof e ? "undefined" : m("regexp", e) ? "regexp" : m("date", e) ? "date" : m("function", e) ? "function" : void 0 !== e.setInterval && void 0 !== e.document && void 0 === e.nodeType ? "window" : 9 === e.nodeType ? "document" : e.nodeType ? "node" : i(e) ? "array" : e.constructor === Error.prototype.constructor ? "error" : "undefined" == typeof e ? "undefined" : Ze(e);
                        },
                        separator: function() {
                            return this.multiline ? this.HTML ? "<br />" : "\n" : this.HTML ? "&#160;" : " ";
                        },
                        indent: function(e) {
                            if (!this.multiline) return "";
                            var t = this.indentChar;
                            return this.HTML && (t = t.replace(/\t/g, "   ").replace(/ /g, "&#160;")), new Array(this.depth + (e || 0)).join(t);
                        },
                        up: function(e) {
                            this.depth += e || 1;
                        },
                        down: function(e) {
                            this.depth -= e || 1;
                        },
                        setParser: function(e, t) {
                            this.parsers[e] = t;
                        },
                        quote: e,
                        literal: t,
                        join: n,
                        depth: 1,
                        maxDepth: ft.maxDepth,
                        parsers: {
                            window: "[Window]",
                            document: "[Document]",
                            error: function(e) {
                                return 'Error("' + e.message + '")';
                            },
                            unknown: "[Unknown]",
                            null: "null",
                            undefined: "undefined",
                            function: function(e) {
                                var t = "function", r = "name" in e ? e.name : (s.exec(e) || [])[1];
                                return r && (t += " " + r), t += "(", t = [ t, o.parse(e, "functionArgs"), "){" ].join(""), 
                                n(t, o.parse(e, "functionCode"), "}");
                            },
                            array: r,
                            nodelist: r,
                            arguments: r,
                            object: function(e, t) {
                                var r, i, s, u, a, l = [];
                                if (o.maxDepth && o.depth > o.maxDepth) return "[object Object]";
                                o.up(), r = [];
                                for (i in e) r.push(i);
                                a = [ "message", "name" ];
                                for (u in a) i = a[u], i in e && !f(i, r) && r.push(i);
                                for (r.sort(), u = 0; u < r.length; u++) i = r[u], s = e[i], l.push(o.parse(i, "key") + ": " + o.parse(s, void 0, t));
                                return o.down(), n("{", l, "}");
                            },
                            node: function(e) {
                                var t, n, r, i = o.HTML ? "&lt;" : "<", s = o.HTML ? "&gt;" : ">", u = e.nodeName.toLowerCase(), a = i + u, l = e.attributes;
                                if (l) for (n = 0, t = l.length; n < t; n++) r = l[n].nodeValue, r && "inherit" !== r && (a += " " + l[n].nodeName + "=" + o.parse(r, "attribute"));
                                return a += s, 3 !== e.nodeType && 4 !== e.nodeType || (a += e.nodeValue), a + i + "/" + u + s;
                            },
                            functionArgs: function(e) {
                                var t, n = e.length;
                                if (!n) return "";
                                for (t = new Array(n); n--; ) t[n] = String.fromCharCode(97 + n);
                                return " " + t.join(", ") + " ";
                            },
                            key: e,
                            functionCode: "[code]",
                            attribute: e,
                            string: e,
                            date: e,
                            regexp: t,
                            number: t,
                            boolean: t,
                            symbol: function(e) {
                                return e.toString();
                            }
                        },
                        HTML: !1,
                        indentChar: "  ",
                        multiline: !0
                    };
                    return o;
                }(), pt = function() {
                    function e(t, n) {
                        et(this, e), this.name = t, this.fullName = n ? n.fullName.concat(t) : [], this.tests = [], 
                        this.childSuites = [], n && n.pushChildSuite(this);
                    }
                    return tt(e, [ {
                        key: "start",
                        value: function(e) {
                            if (e && (this._startTime = at(), ut)) {
                                var t = this.fullName.length;
                                ut.mark("qunit_suite_" + t + "_start");
                            }
                            return {
                                name: this.name,
                                fullName: this.fullName.slice(),
                                tests: this.tests.map(function(e) {
                                    return e.start();
                                }),
                                childSuites: this.childSuites.map(function(e) {
                                    return e.start();
                                }),
                                testCounts: {
                                    total: this.getTestCounts().total
                                }
                            };
                        }
                    }, {
                        key: "end",
                        value: function(e) {
                            if (e && (this._endTime = at(), ut)) {
                                var t = this.fullName.length;
                                ut.mark("qunit_suite_" + t + "_end");
                                var n = this.fullName.join(" – ");
                                l(0 === t ? "QUnit Test Run" : "QUnit Test Suite: " + n, "qunit_suite_" + t + "_start", "qunit_suite_" + t + "_end");
                            }
                            return {
                                name: this.name,
                                fullName: this.fullName.slice(),
                                tests: this.tests.map(function(e) {
                                    return e.end();
                                }),
                                childSuites: this.childSuites.map(function(e) {
                                    return e.end();
                                }),
                                testCounts: this.getTestCounts(),
                                runtime: this.getRuntime(),
                                status: this.getStatus()
                            };
                        }
                    }, {
                        key: "pushChildSuite",
                        value: function(e) {
                            this.childSuites.push(e);
                        }
                    }, {
                        key: "pushTest",
                        value: function(e) {
                            this.tests.push(e);
                        }
                    }, {
                        key: "getRuntime",
                        value: function() {
                            return this._endTime - this._startTime;
                        }
                    }, {
                        key: "getTestCounts",
                        value: function() {
                            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                                passed: 0,
                                failed: 0,
                                skipped: 0,
                                todo: 0,
                                total: 0
                            };
                            return e = this.tests.reduce(function(e, t) {
                                return t.valid && (e[t.getStatus()]++, e.total++), e;
                            }, e), this.childSuites.reduce(function(e, t) {
                                return t.getTestCounts(e);
                            }, e);
                        }
                    }, {
                        key: "getStatus",
                        value: function() {
                            var e = this.getTestCounts(), t = e.total, n = e.failed, r = e.skipped, i = e.todo;
                            return n ? "failed" : r === t ? "skipped" : i === t ? "todo" : "passed";
                        }
                    } ]), e;
                }(), mt = !1, gt = [];
                b.only = function() {
                    mt || (ft.modules.length = 0, ft.queue.length = 0, b.apply(void 0, arguments), mt = !0);
                }, b.skip = function(e, t, n) {
                    mt || y(e, t, n, {
                        skip: !0
                    });
                }, b.todo = function(e, t, n) {
                    mt || y(e, t, n, {
                        todo: !0
                    });
                };
                var vt = Object.create(null), yt = [ "runStart", "suiteStart", "testStart", "assertion", "testEnd", "suiteEnd", "runEnd" ], bt = void 0;
                bt = Array.isArray ? Array.isArray : function(e) {
                    return "[object Array]" === Object.prototype.toString.call(e);
                };
                var wt = bt, kt = 0, xt = void 0, Tt = void 0, Et = function(e, t) {
                    Mt[kt] = e, Mt[kt + 1] = t, kt += 2, 2 === kt && (Tt ? Tt(j) : jt());
                }, Ct = "undefined" != typeof window ? window : void 0, _t = Ct || {}, qt = _t.MutationObserver || _t.WebKitMutationObserver, Nt = "undefined" == typeof self && "undefined" != typeof e && "[object process]" === {}.toString.call(e), St = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel, Mt = new Array(1e3), jt = void 0;
                jt = Nt ? _() : qt ? N() : St ? S() : void 0 === Ct ? A() : M();
                var At = Math.random().toString(36).substring(2), Ot = void 0, Rt = 1, It = 2, Lt = {
                    error: null
                }, Ut = 0, Ft = function() {
                    function e(t, n) {
                        et(this, e), this._instanceConstructor = t, this.promise = new t(I), this.promise[At] || Z(this.promise), 
                        wt(n) ? (this.length = n.length, this._remaining = n.length, this._result = new Array(this.length), 
                        0 === this.length ? G(this.promise, this._result) : (this.length = this.length || 0, 
                        this._enumerate(n), 0 === this._remaining && G(this.promise, this._result))) : Y(this.promise, ee());
                    }
                    return tt(e, [ {
                        key: "_enumerate",
                        value: function(e) {
                            for (var t = 0; this._state === Ot && t < e.length; t++) this._eachEntry(e[t], t);
                        }
                    }, {
                        key: "_eachEntry",
                        value: function(e, t) {
                            var n = this._instanceConstructor, r = n.resolve;
                            if (r === R) {
                                var i = F(e);
                                if (i === O && e._state !== Ot) this._settledAt(e._state, t, e._result); else if ("function" != typeof i) this._remaining--, 
                                this._result[t] = e; else if (n === Ht) {
                                    var s = new n(I);
                                    Q(s, e, i), this._willSettleAt(s, t);
                                } else this._willSettleAt(new n(function(t) {
                                    return t(e);
                                }), t);
                            } else this._willSettleAt(r(e), t);
                        }
                    }, {
                        key: "_settledAt",
                        value: function(e, t, n) {
                            var r = this.promise;
                            r._state === Ot && (this._remaining--, e === It ? Y(r, n) : this._result[t] = n), 
                            0 === this._remaining && G(r, this._result);
                        }
                    }, {
                        key: "_willSettleAt",
                        value: function(e, t) {
                            var n = this;
                            z(e, void 0, function(e) {
                                return n._settledAt(Rt, t, e);
                            }, function(e) {
                                return n._settledAt(It, t, e);
                            });
                        }
                    } ]), e;
                }(), Ht = function() {
                    function e(t) {
                        et(this, e), this[At] = X(), this._result = this._state = void 0, this._subscribers = [], 
                        I !== t && ("function" != typeof t && ie(), this instanceof e ? K(this, t) : se());
                    }
                    return tt(e, [ {
                        key: "catch",
                        value: function(e) {
                            return this.then(null, e);
                        }
                    }, {
                        key: "finally",
                        value: function(e) {
                            var t = this, n = t.constructor;
                            return T(e) ? t.then(function(t) {
                                return n.resolve(e()).then(function() {
                                    return t;
                                });
                            }, function(t) {
                                return n.resolve(e()).then(function() {
                                    throw t;
                                });
                            }) : t.then(e, e);
                        }
                    } ]), e;
                }();
                Ht.prototype.then = O, Ht.all = te, Ht.race = ne, Ht.resolve = R, Ht.reject = re, 
                Ht._setScheduler = E, Ht._setAsap = C, Ht._asap = Et, Ht.polyfill = oe, Ht.Promise = Ht;
                var Pt = "undefined" != typeof Promise ? Promise : Ht, Dt = (ce(0) || "").replace(/(:\d+)+\)?/, "").replace(/.+\//, ""), Qt = 0, Bt = void 0, $t = [], Gt = {
                    finished: !1,
                    add: ve,
                    advance: fe,
                    taskCount: ge
                }, Yt = function() {
                    function e(t, n, r) {
                        et(this, e), this.name = t, this.suiteName = n.name, this.fullName = n.fullName.concat(t), 
                        this.runtime = 0, this.assertions = [], this.skipped = !!r.skip, this.todo = !!r.todo, 
                        this.valid = r.valid, this._startTime = 0, this._endTime = 0, n.pushTest(this);
                    }
                    return tt(e, [ {
                        key: "start",
                        value: function(e) {
                            return e && (this._startTime = at(), ut && ut.mark("qunit_test_start")), {
                                name: this.name,
                                suiteName: this.suiteName,
                                fullName: this.fullName.slice()
                            };
                        }
                    }, {
                        key: "end",
                        value: function(e) {
                            if (e && (this._endTime = at(), ut)) {
                                ut.mark("qunit_test_end");
                                var t = this.fullName.join(" – ");
                                l("QUnit Test: " + t, "qunit_test_start", "qunit_test_end");
                            }
                            return h(this.start(), {
                                runtime: this.getRuntime(),
                                status: this.getStatus(),
                                errors: this.getFailedAssertions(),
                                assertions: this.getAssertions()
                            });
                        }
                    }, {
                        key: "pushAssertion",
                        value: function(e) {
                            this.assertions.push(e);
                        }
                    }, {
                        key: "getRuntime",
                        value: function() {
                            return this._endTime - this._startTime;
                        }
                    }, {
                        key: "getStatus",
                        value: function() {
                            if (this.skipped) return "skipped";
                            var e = this.getFailedAssertions().length > 0 ? this.todo : !this.todo;
                            return e ? this.todo ? "todo" : "passed" : "failed";
                        }
                    }, {
                        key: "getFailedAssertions",
                        value: function() {
                            return this.assertions.filter(function(e) {
                                return !e.passed;
                            });
                        }
                    }, {
                        key: "getAssertions",
                        value: function() {
                            return this.assertions.slice();
                        }
                    }, {
                        key: "slimAssertions",
                        value: function() {
                            this.assertions = this.assertions.map(function(e) {
                                return delete e.actual, delete e.expected, e;
                            });
                        }
                    } ]), e;
                }(), zt = !1;
                we.count = 0, we.prototype = {
                    before: function() {
                        var e = this, t = this.module, n = ke(t), r = n.reduce(function(e, t) {
                            return e.then(function() {
                                return t.stats = {
                                    all: 0,
                                    bad: 0,
                                    started: st()
                                }, w("suiteStart", t.suiteReport.start(!0)), ae("moduleStart", {
                                    name: t.name,
                                    tests: t.tests
                                });
                            });
                        }, Pt.resolve([]));
                        return r.then(function() {
                            return ft.current = e, e.testEnvironment = h({}, t.testEnvironment), e.started = st(), 
                            w("testStart", e.testReport.start(!0)), ae("testStart", {
                                name: e.testName,
                                module: t.name,
                                testId: e.testId,
                                previousFailure: e.previousFailure
                            }).then(function() {
                                ft.pollution || Te();
                            });
                        });
                    },
                    run: function() {
                        function e(e) {
                            t = e.callback.call(e.testEnvironment, e.assert), e.resolvePromise(t), 0 === e.timeout && 0 !== e.semaphore && xe("Test did not finish synchronously even though assert.timeout( 0 ) was used.", ce(2));
                        }
                        var t;
                        if (ft.current = this, this.callbackStarted = st(), ft.notrycatch) return void e(this);
                        try {
                            e(this);
                        } catch (e) {
                            this.pushFailure("Died on test #" + (this.assertions.length + 1) + " " + this.stack + ": " + (e.message || e), le(e, 0)), 
                            Te(), ft.blocking && Me(this);
                        }
                    },
                    after: function() {
                        Ee();
                    },
                    queueHook: function(e, t, n) {
                        var r = this, i = function() {
                            var n = e.call(r.testEnvironment, r.assert);
                            r.resolvePromise(n, t);
                        }, s = function() {
                            if ("before" === t) {
                                if (0 !== n.unskippedTestsRun) return;
                                r.preserveEnvironment = !0;
                            }
                            if ("after" !== t || n.unskippedTestsRun === Re(n) - 1 || !(ft.queue.length > 0 || Gt.taskCount() > 2)) {
                                if (ft.current = r, ft.notrycatch) return void i();
                                try {
                                    i();
                                } catch (e) {
                                    r.pushFailure(t + " failed on " + r.testName + ": " + (e.message || e), le(e, 0));
                                }
                            }
                        };
                        return s;
                    },
                    hooks: function e(t) {
                        function n(r, i) {
                            if (i.parentModule && n(r, i.parentModule), i.hooks[t].length) for (var s = 0; s < i.hooks[t].length; s++) e.push(r.queueHook(i.hooks[t][s], t, i));
                        }
                        var e = [];
                        return this.skip || n(this, this.module), e;
                    },
                    finish: function() {
                        function e(e) {
                            return e.hooks = {}, w("suiteEnd", e.suiteReport.end(!0)), ae("moduleDone", {
                                name: e.name,
                                tests: e.tests,
                                failed: e.stats.bad,
                                passed: e.stats.all - e.stats.bad,
                                total: e.stats.all,
                                runtime: st() - e.stats.started
                            });
                        }
                        if (ft.current = this, this.callback = void 0, this.steps.length) {
                            var t = this.steps.join(", ");
                            this.pushFailure("Expected assert.verifySteps() to be called before end of test after using assert.step(). Unverified steps: " + t, this.stack);
                        }
                        ft.requireExpects && null === this.expected ? this.pushFailure("Expected number of assertions to be defined, but expect() was not called.", this.stack) : null !== this.expected && this.expected !== this.assertions.length ? this.pushFailure("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run", this.stack) : null !== this.expected || this.assertions.length || this.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
                        var n, r = this.module, i = r.name, s = this.testName, o = !!this.skip, u = !!this.todo, a = 0, l = ft.storage;
                        for (this.runtime = st() - this.started, ft.stats.all += this.assertions.length, 
                        r.stats.all += this.assertions.length, n = 0; n < this.assertions.length; n++) this.assertions[n].result || (a++, 
                        ft.stats.bad++, r.stats.bad++);
                        return Ie(r, o), l && (a ? l.setItem("qunit-test-" + i + "-" + s, a) : l.removeItem("qunit-test-" + i + "-" + s)), 
                        w("testEnd", this.testReport.end(!0)), this.testReport.slimAssertions(), ae("testDone", {
                            name: s,
                            module: i,
                            skipped: o,
                            todo: u,
                            failed: a,
                            passed: this.assertions.length - a,
                            total: this.assertions.length,
                            runtime: o ? 0 : this.runtime,
                            assertions: this.assertions,
                            testId: this.testId,
                            source: this.stack
                        }).then(function() {
                            if (r.testsRun === Oe(r)) {
                                for (var t = [ r ], n = r.parentModule; n && n.testsRun === Oe(n); ) t.push(n), 
                                n = n.parentModule;
                                return t.reduce(function(t, n) {
                                    return t.then(function() {
                                        return e(n);
                                    });
                                }, Pt.resolve([]));
                            }
                        }).then(function() {
                            ft.current = void 0;
                        });
                    },
                    preserveTestEnvironment: function() {
                        this.preserveEnvironment && (this.module.testEnvironment = this.testEnvironment, 
                        this.testEnvironment = h({}, this.module.testEnvironment));
                    },
                    queue: function() {
                        function e() {
                            return [ function() {
                                return t.before();
                            } ].concat(nt(t.hooks("before")), [ function() {
                                t.preserveTestEnvironment();
                            } ], nt(t.hooks("beforeEach")), [ function() {
                                t.run();
                            } ], nt(t.hooks("afterEach").reverse()), nt(t.hooks("after").reverse()), [ function() {
                                t.after();
                            }, function() {
                                return t.finish();
                            } ]);
                        }
                        var t = this;
                        if (this.valid()) {
                            var n = ft.storage && +ft.storage.getItem("qunit-test-" + this.module.name + "-" + this.testName), r = ft.reorder && !!n;
                            this.previousFailure = !!n, Gt.add(e, r, ft.seed), Gt.finished && Gt.advance();
                        }
                    },
                    pushResult: function(e) {
                        if (this !== ft.current) throw new Error("Assertion occurred after test had finished.");
                        var t, n = {
                            module: this.module.name,
                            name: this.testName,
                            result: e.result,
                            message: e.message,
                            actual: e.actual,
                            testId: this.testId,
                            negative: e.negative || !1,
                            runtime: st() - this.started,
                            todo: !!this.todo
                        };
                        it.call(e, "expected") && (n.expected = e.expected), e.result || (t = e.source || ce(), 
                        t && (n.source = t)), this.logAssertion(n), this.assertions.push({
                            result: !!e.result,
                            message: e.message
                        });
                    },
                    pushFailure: function(e, t, n) {
                        if (!(this instanceof we)) throw new Error("pushFailure() assertion outside test context, was " + ce(2));
                        this.pushResult({
                            result: !1,
                            message: e || "error",
                            actual: n || null,
                            source: t
                        });
                    },
                    logAssertion: function(e) {
                        ae("log", e);
                        var t = {
                            passed: e.result,
                            actual: e.actual,
                            expected: e.expected,
                            message: e.message,
                            stack: e.source,
                            todo: e.todo
                        };
                        this.testReport.pushAssertion(t), w("assertion", t);
                    },
                    resolvePromise: function(e, t) {
                        var n, r, i, s = this;
                        null != e && (n = e.then, "function" === p(n) && (r = Se(s), ft.notrycatch ? n.call(e, function() {
                            r();
                        }) : n.call(e, function() {
                            r();
                        }, function(e) {
                            i = "Promise rejected " + (t ? t.replace(/Each$/, "") : "during") + ' "' + s.testName + '": ' + (e && e.message || e), 
                            s.pushFailure(i, le(e, 0)), Te(), Me(s);
                        })));
                    },
                    valid: function() {
                        function e(t) {
                            var n = t.name ? t.name.toLowerCase() : null;
                            return n === i || !!t.parentModule && e(t.parentModule);
                        }
                        function t(e) {
                            return f(e.moduleId, ft.moduleId) || e.parentModule && t(e.parentModule);
                        }
                        var n = ft.filter, r = /^(!?)\/([\w\W]*)\/(i?$)/.exec(n), i = ft.module && ft.module.toLowerCase(), s = this.module.name + ": " + this.testName;
                        return !(!this.callback || !this.callback.validTest) || !(ft.moduleId && ft.moduleId.length > 0 && !t(this.module)) && (!(ft.testId && ft.testId.length > 0 && !f(this.testId, ft.testId)) && (!(i && !e(this.module)) && (!n || (r ? this.regexFilter(!!r[1], r[2], r[3], s) : this.stringFilter(n, s)))));
                    },
                    regexFilter: function(e, t, n, r) {
                        var i = new RegExp(t, n), s = i.test(r);
                        return s !== e;
                    },
                    stringFilter: function(e, t) {
                        e = e.toLowerCase(), t = t.toLowerCase();
                        var n = "!" !== e.charAt(0);
                        return n || (e = e.slice(1)), t.indexOf(e) !== -1 ? n : !n;
                    }
                };
                var Wt = function() {
                    function e(t) {
                        et(this, e), this.test = t;
                    }
                    return tt(e, [ {
                        key: "timeout",
                        value: function(e) {
                            if ("number" != typeof e) throw new Error("You must pass a number as the duration to assert.timeout");
                            this.test.timeout = e;
                        }
                    }, {
                        key: "step",
                        value: function(e) {
                            var t = e, n = !!e;
                            this.test.steps.push(e), "undefined" === p(e) || "" === e ? t = "You must provide a message to assert.step" : "string" !== p(e) && (t = "You must provide a string value to assert.step", 
                            n = !1), this.pushResult({
                                result: n,
                                message: t
                            });
                        }
                    }, {
                        key: "verifySteps",
                        value: function(e, t) {
                            var n = this.test.steps.slice();
                            this.deepEqual(n, e, t), this.test.steps.length = 0;
                        }
                    }, {
                        key: "expect",
                        value: function(e) {
                            return 1 !== arguments.length ? this.test.expected : void (this.test.expected = e);
                        }
                    }, {
                        key: "async",
                        value: function(e) {
                            var t = this.test, n = !1, r = e;
                            "undefined" == typeof r && (r = 1);
                            var i = Se(t);
                            return function() {
                                if (ft.current !== t) throw Error("assert.async callback called after test finished.");
                                return n ? void t.pushFailure("Too many calls to the `assert.async` callback", ce(2)) : (r -= 1, 
                                void (r > 0 || (n = !0, i())));
                            };
                        }
                    }, {
                        key: "push",
                        value: function(t, n, r, i, s) {
                            Xe.warn("assert.push is deprecated and will be removed in QUnit 3.0. Please use assert.pushResult instead (https://api.qunitjs.com/assert/pushResult).");
                            var o = this instanceof e ? this : ft.current.assert;
                            return o.pushResult({
                                result: t,
                                actual: n,
                                expected: r,
                                message: i,
                                negative: s
                            });
                        }
                    }, {
                        key: "pushResult",
                        value: function(t) {
                            var n = this, r = n instanceof e && n.test || ft.current;
                            if (!r) throw new Error("assertion outside test context, in " + ce(2));
                            return n instanceof e || (n = r.assert), n.test.pushResult(t);
                        }
                    }, {
                        key: "ok",
                        value: function(e, t) {
                            t || (t = e ? "okay" : "failed, expected argument to be truthy, was: " + ht.parse(e)), 
                            this.pushResult({
                                result: !!e,
                                actual: e,
                                expected: !0,
                                message: t
                            });
                        }
                    }, {
                        key: "notOk",
                        value: function(e, t) {
                            t || (t = e ? "failed, expected argument to be falsy, was: " + ht.parse(e) : "okay"), 
                            this.pushResult({
                                result: !e,
                                actual: e,
                                expected: !1,
                                message: t
                            });
                        }
                    }, {
                        key: "equal",
                        value: function(e, t, n) {
                            var r = t == e;
                            this.pushResult({
                                result: r,
                                actual: e,
                                expected: t,
                                message: n
                            });
                        }
                    }, {
                        key: "notEqual",
                        value: function(e, t, n) {
                            var r = t != e;
                            this.pushResult({
                                result: r,
                                actual: e,
                                expected: t,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "propEqual",
                        value: function(e, t, n) {
                            e = d(e), t = d(t), this.pushResult({
                                result: ct(e, t),
                                actual: e,
                                expected: t,
                                message: n
                            });
                        }
                    }, {
                        key: "notPropEqual",
                        value: function(e, t, n) {
                            e = d(e), t = d(t), this.pushResult({
                                result: !ct(e, t),
                                actual: e,
                                expected: t,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "deepEqual",
                        value: function(e, t, n) {
                            this.pushResult({
                                result: ct(e, t),
                                actual: e,
                                expected: t,
                                message: n
                            });
                        }
                    }, {
                        key: "notDeepEqual",
                        value: function(e, t, n) {
                            this.pushResult({
                                result: !ct(e, t),
                                actual: e,
                                expected: t,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "strictEqual",
                        value: function(e, t, n) {
                            this.pushResult({
                                result: t === e,
                                actual: e,
                                expected: t,
                                message: n
                            });
                        }
                    }, {
                        key: "notStrictEqual",
                        value: function(e, t, n) {
                            this.pushResult({
                                result: t !== e,
                                actual: e,
                                expected: t,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "throws",
                        value: function(t, n, r) {
                            var i = void 0, s = !1, o = this instanceof e && this.test || ft.current;
                            if ("string" === p(n)) {
                                if (null != r) throw new Error("throws/raises does not accept a string value for the expected argument.\nUse a non-string object value (e.g. regExp) instead if it's necessary.");
                                r = n, n = null;
                            }
                            o.ignoreGlobalErrors = !0;
                            try {
                                t.call(o.testEnvironment);
                            } catch (e) {
                                i = e;
                            }
                            if (o.ignoreGlobalErrors = !1, i) {
                                var u = p(n);
                                n ? "regexp" === u ? s = n.test(Le(i)) : "function" === u && i instanceof n ? s = !0 : "object" === u ? s = i instanceof n.constructor && i.name === n.name && i.message === n.message : "function" === u && n.call({}, i) === !0 && (n = null, 
                                s = !0) : (s = !0, n = null);
                            }
                            o.assert.pushResult({
                                result: s,
                                actual: i,
                                expected: n,
                                message: r
                            });
                        }
                    }, {
                        key: "rejects",
                        value: function(t, n, r) {
                            var i = !1, s = this instanceof e && this.test || ft.current;
                            if ("string" === p(n)) {
                                if (void 0 !== r) return r = "assert.rejects does not accept a string value for the expected argument.\nUse a non-string object value (e.g. validator function) instead if necessary.", 
                                void s.assert.pushResult({
                                    result: !1,
                                    message: r
                                });
                                r = n, n = void 0;
                            }
                            var o = t && t.then;
                            if ("function" !== p(o)) {
                                var u = 'The value provided to `assert.rejects` in "' + s.testName + '" was not a promise.';
                                return void s.assert.pushResult({
                                    result: !1,
                                    message: u,
                                    actual: t
                                });
                            }
                            var a = this.async();
                            return o.call(t, function() {
                                var e = 'The promise returned by the `assert.rejects` callback in "' + s.testName + '" did not reject.';
                                s.assert.pushResult({
                                    result: !1,
                                    message: e,
                                    actual: t
                                }), a();
                            }, function(e) {
                                var t = p(n);
                                void 0 === n ? (i = !0, n = e) : "regexp" === t ? i = n.test(Le(e)) : "function" === t && e instanceof n ? i = !0 : "object" === t ? i = e instanceof n.constructor && e.name === n.name && e.message === n.message : "function" === t ? (i = n.call({}, e) === !0, 
                                n = null) : (i = !1, r = 'invalid expected value provided to `assert.rejects` callback in "' + s.testName + '": ' + t + "."), 
                                s.assert.pushResult({
                                    result: i,
                                    actual: e,
                                    expected: n,
                                    message: r
                                }), a();
                            });
                        }
                    } ]), e;
                }();
                Wt.prototype.raises = Wt.prototype.throws;
                var Vt = {}, Jt = new pt();
                ft.currentModule.suiteReport = Jt;
                var Kt = !1, Xt = !1;
                Vt.isLocal = !(lt.document && "file:" !== $e.location.protocol), Vt.version = "2.8.0", 
                h(Vt, {
                    on: k,
                    module: b,
                    test: Ce,
                    todo: _e,
                    skip: qe,
                    only: Ne,
                    start: function(e) {
                        var t = Kt;
                        if (ft.current) throw new Error("QUnit.start cannot be called inside a test context.");
                        if (Kt = !0, Xt) throw new Error("Called start() while test already started running");
                        if (t || e > 1) throw new Error("Called start() outside of a test context too many times");
                        if (ft.autostart) throw new Error("Called start() outside of a test context when QUnit.config.autostart was true");
                        return ft.pageLoaded ? void Pe() : (ft.autostart = !0, void (lt.document || Vt.load()));
                    },
                    config: ft,
                    is: m,
                    objectType: p,
                    extend: h,
                    load: function() {
                        ft.pageLoaded = !0, h(ft, {
                            stats: {
                                all: 0,
                                bad: 0
                            },
                            started: 0,
                            updateRate: 1e3,
                            autostart: !0,
                            filter: ""
                        }, !0), Xt || (ft.blocking = !1, ft.autostart && Pe());
                    },
                    stack: function(e) {
                        return e = (e || 0) + 2, ce(e);
                    },
                    onError: Fe,
                    onUnhandledRejection: He
                }), Vt.pushFailure = xe, Vt.assert = Wt.prototype, Vt.equiv = ct, Vt.dump = ht, 
                ue(Vt), Ue(Vt), function() {
                    function e() {
                        if (!r.call(n, "fixture")) {
                            var e = Ve.getElementById("qunit-fixture");
                            e && (n.fixture = e.cloneNode(!0));
                        }
                    }
                    function t() {
                        if (null != n.fixture) {
                            var e = Ve.getElementById("qunit-fixture"), t = Ze(n.fixture);
                            if ("string" === t) {
                                var r = Ve.createElement("div");
                                r.setAttribute("id", "qunit-fixture"), r.innerHTML = n.fixture, e.parentNode.replaceChild(r, e);
                            } else {
                                var i = n.fixture.cloneNode(!0);
                                e.parentNode.replaceChild(i, e);
                            }
                        }
                    }
                    if ("undefined" != typeof $e && "undefined" != typeof Ve) {
                        var n = Vt.config, r = Object.prototype.hasOwnProperty;
                        Vt.begin(e), Vt.testStart(t);
                    }
                }(), function() {
                    function e() {
                        var e, r, i, s, o = Object.create(null), u = n.search.slice(1).split("&"), a = u.length;
                        for (e = 0; e < a; e++) u[e] && (r = u[e].split("="), i = t(r[0]), s = 1 === r.length || t(r.slice(1).join("=")), 
                        i in o ? o[i] = [].concat(o[i], s) : o[i] = s);
                        return o;
                    }
                    function t(e) {
                        return decodeURIComponent(e.replace(/\+/g, "%20"));
                    }
                    var n = "undefined" != typeof $e && $e.location;
                    if (n) {
                        var r = e();
                        Vt.urlParams = r, Vt.config.moduleId = [].concat(r.moduleId || []), Vt.config.testId = [].concat(r.testId || []), 
                        Vt.config.module = r.module, Vt.config.filter = r.filter, r.seed === !0 ? Vt.config.seed = Math.random().toString(36).slice(2) : r.seed && (Vt.config.seed = r.seed), 
                        Vt.config.urlConfig.push({
                            id: "hidepassed",
                            label: "Hide passed tests",
                            tooltip: "Only show tests and assertions that fail. Stored as query-strings."
                        }, {
                            id: "noglobals",
                            label: "Check for Globals",
                            tooltip: "Enabling this will test if any test introduces new properties on the global object (`window` in Browsers). Stored as query-strings."
                        }, {
                            id: "notrycatch",
                            label: "No try-catch",
                            tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings."
                        }), Vt.begin(function() {
                            var e, t, n = Vt.config.urlConfig;
                            for (e = 0; e < n.length; e++) t = Vt.config.urlConfig[e], "string" != typeof t && (t = t.id), 
                            void 0 === Vt.config[t] && (Vt.config[t] = r[t]);
                        });
                    }
                }();
                var Zt = {
                    passedTests: 0,
                    failedTests: 0,
                    skippedTests: 0,
                    todoTests: 0
                };
                !function() {
                    function e(e, t, n) {
                        e.addEventListener(t, n, !1);
                    }
                    function t(e, t, n) {
                        e.removeEventListener(t, n, !1);
                    }
                    function n(t, n, r) {
                        for (var i = t.length; i--; ) e(t[i], n, r);
                    }
                    function r(e, t) {
                        return (" " + e.className + " ").indexOf(" " + t + " ") >= 0;
                    }
                    function i(e, t) {
                        r(e, t) || (e.className += (e.className ? " " : "") + t);
                    }
                    function s(e, t, n) {
                        n || "undefined" == typeof n && !r(e, t) ? i(e, t) : o(e, t);
                    }
                    function o(e, t) {
                        for (var n = " " + e.className + " "; n.indexOf(" " + t + " ") >= 0; ) n = n.replace(" " + t + " ", " ");
                        e.className = "function" == typeof n.trim ? n.trim() : n.replace(/^\s+|\s+$/g, "");
                    }
                    function u(e) {
                        return j.getElementById && j.getElementById(e);
                    }
                    function a() {
                        var e = u("qunit-abort-tests-button");
                        return e && (e.disabled = !0, e.innerHTML = "Aborting..."), Vt.config.queue.length = 0, 
                        !1;
                    }
                    function l(e) {
                        return h(), e && e.preventDefault && e.preventDefault(), !1;
                    }
                    function c() {
                        var e, t, n, r, i, s = !1, o = S.urlConfig, u = "";
                        for (e = 0; e < o.length; e++) if (n = S.urlConfig[e], "string" == typeof n && (n = {
                            id: n,
                            label: n
                        }), r = Be(n.id), i = Be(n.tooltip), n.value && "string" != typeof n.value) {
                            if (u += "<label for='qunit-urlconfig-" + r + "' title='" + i + "'>" + n.label + ": </label><select id='qunit-urlconfig-" + r + "' name='" + r + "' title='" + i + "'><option></option>", 
                            Vt.is("array", n.value)) for (t = 0; t < n.value.length; t++) r = Be(n.value[t]), 
                            u += "<option value='" + r + "'" + (S[n.id] === n.value[t] ? (s = !0) && " selected='selected'" : "") + ">" + r + "</option>"; else for (t in n.value) O.call(n.value, t) && (u += "<option value='" + Be(t) + "'" + (S[n.id] === t ? (s = !0) && " selected='selected'" : "") + ">" + Be(n.value[t]) + "</option>");
                            S[n.id] && !s && (r = Be(S[n.id]), u += "<option value='" + r + "' selected='selected' disabled='disabled'>" + r + "</option>"), 
                            u += "</select>";
                        } else u += "<label for='qunit-urlconfig-" + r + "' title='" + i + "'><input id='qunit-urlconfig-" + r + "' name='" + r + "' type='checkbox'" + (n.value ? " value='" + Be(n.value) + "'" : "") + (S[n.id] ? " checked='checked'" : "") + " title='" + i + "' />" + Be(n.label) + "</label>";
                        return u;
                    }
                    function f() {
                        var e, t, n, r = this, i = {};
                        if (t = "selectedIndex" in r ? r.options[r.selectedIndex].value || void 0 : r.checked ? r.defaultValue || !0 : void 0, 
                        i[r.name] = t, e = d(i), "hidepassed" === r.name && "replaceState" in $e.history) {
                            if (Vt.urlParams[r.name] = t, S[r.name] = t || !1, n = u("qunit-tests")) {
                                var s = n.children.length, o = n.children;
                                if (r.checked) {
                                    for (var a = 0; a < s; a++) {
                                        var l = o[a];
                                        l && l.className.indexOf("pass") > -1 && M.push(l);
                                    }
                                    var c = !0, f = !1, h = void 0;
                                    try {
                                        for (var p, m = M[Symbol.iterator](); !(c = (p = m.next()).done); c = !0) {
                                            var g = p.value;
                                            n.removeChild(g);
                                        }
                                    } catch (e) {
                                        f = !0, h = e;
                                    } finally {
                                        try {
                                            !c && m.return && m.return();
                                        } finally {
                                            if (f) throw h;
                                        }
                                    }
                                } else for (;null != (l = M.pop()); ) n.appendChild(l);
                            }
                            $e.history.replaceState(null, "", e);
                        } else $e.location = e;
                    }
                    function d(e) {
                        var t, n, r, i = "?", s = $e.location;
                        e = Vt.extend(Vt.extend({}, Vt.urlParams), e);
                        for (t in e) if (O.call(e, t) && void 0 !== e[t]) for (n = [].concat(e[t]), r = 0; r < n.length; r++) i += encodeURIComponent(t), 
                        n[r] !== !0 && (i += "=" + encodeURIComponent(n[r])), i += "&";
                        return s.protocol + "//" + s.host + s.pathname + i.slice(0, -1);
                    }
                    function h() {
                        var e, t = [], n = u("qunit-modulefilter-dropdown-list").getElementsByTagName("input"), r = u("qunit-filter-input").value;
                        for (e = 0; e < n.length; e++) n[e].checked && t.push(n[e].value);
                        $e.location = d({
                            filter: "" === r ? void 0 : r,
                            moduleId: 0 === t.length ? void 0 : t,
                            module: void 0,
                            testId: void 0
                        });
                    }
                    function p() {
                        var e = j.createElement("span");
                        return e.innerHTML = c(), i(e, "qunit-url-config"), n(e.getElementsByTagName("input"), "change", f), 
                        n(e.getElementsByTagName("select"), "change", f), e;
                    }
                    function m() {
                        var t = j.createElement("button");
                        return t.id = "qunit-abort-tests-button", t.innerHTML = "Abort", e(t, "click", a), 
                        t;
                    }
                    function g() {
                        var t = j.createElement("form"), n = j.createElement("label"), r = j.createElement("input"), s = j.createElement("button");
                        return i(t, "qunit-filter"), n.innerHTML = "Filter: ", r.type = "text", r.value = S.filter || "", 
                        r.name = "filter", r.id = "qunit-filter-input", s.innerHTML = "Go", n.appendChild(r), 
                        t.appendChild(n), t.appendChild(j.createTextNode(" ")), t.appendChild(s), e(t, "submit", l), 
                        t;
                    }
                    function v() {
                        var e, t, n = "";
                        for (e = 0; e < S.modules.length; e++) "" !== S.modules[e].name && (t = S.moduleId.indexOf(S.modules[e].moduleId) > -1, 
                        n += "<li><label class='clickable" + (t ? " checked" : "") + "'><input type='checkbox' value='" + S.modules[e].moduleId + "'" + (t ? " checked='checked'" : "") + " />" + Be(S.modules[e].name) + "</label></li>");
                        return n;
                    }
                    function y() {
                        function n() {
                            function n(e) {
                                var i = f.contains(e.target);
                                27 !== e.keyCode && i || (27 === e.keyCode && i && p.focus(), m.style.display = "none", 
                                t(j, "click", n), t(j, "keydown", n), p.value = "", r());
                            }
                            "none" === m.style.display && (m.style.display = "block", e(j, "click", n), e(j, "keydown", n));
                        }
                        function r() {
                            var e, t, n = p.value.toLowerCase(), r = y.children;
                            for (e = 0; e < r.length; e++) t = r[e], !n || t.textContent.toLowerCase().indexOf(n) > -1 ? t.style.display = "" : t.style.display = "none";
                        }
                        function i(e) {
                            var t, n, r = e && e.target || u, i = y.getElementsByTagName("input"), l = [];
                            for (s(r.parentNode, "checked", r.checked), b = !1, r.checked && r !== u && (u.checked = !1, 
                            o(u.parentNode, "checked")), t = 0; t < i.length; t++) n = i[t], e ? r === u && r.checked && (n.checked = !1, 
                            o(n.parentNode, "checked")) : s(n.parentNode, "checked", n.checked), b = b || n.checked !== n.defaultChecked, 
                            n.checked && l.push(n.parentNode.textContent);
                            a.style.display = c.style.display = b ? "" : "none", p.placeholder = l.join(", ") || u.parentNode.textContent, 
                            p.title = "Type to filter list. Current selection:\n" + (l.join("\n") || u.parentNode.textContent);
                        }
                        var u, a, c, f = j.createElement("form"), d = j.createElement("label"), p = j.createElement("input"), m = j.createElement("div"), g = j.createElement("span"), y = j.createElement("ul"), b = !1;
                        return p.id = "qunit-modulefilter-search", p.autocomplete = "off", e(p, "input", r), 
                        e(p, "input", n), e(p, "focus", n), e(p, "click", n), d.id = "qunit-modulefilter-search-container", 
                        d.innerHTML = "Module: ", d.appendChild(p), g.id = "qunit-modulefilter-actions", 
                        g.innerHTML = "<button style='display:none'>Apply</button><button type='reset' style='display:none'>Reset</button><label class='clickable" + (S.moduleId.length ? "" : " checked") + "'><input type='checkbox'" + (S.moduleId.length ? "" : " checked='checked'") + " />All modules</label>", 
                        u = g.lastChild.firstChild, a = g.firstChild, c = a.nextSibling, e(a, "click", h), 
                        y.id = "qunit-modulefilter-dropdown-list", y.innerHTML = v(), m.id = "qunit-modulefilter-dropdown", 
                        m.style.display = "none", m.appendChild(g), m.appendChild(y), e(m, "change", i), 
                        i(), f.id = "qunit-modulefilter", f.appendChild(d), f.appendChild(m), e(f, "submit", l), 
                        e(f, "reset", function() {
                            $e.setTimeout(i);
                        }), f;
                    }
                    function b() {
                        var e = u("qunit-testrunner-toolbar");
                        e && (e.appendChild(p()), e.appendChild(y()), e.appendChild(g()), e.appendChild(j.createElement("div")).className = "clearfix");
                    }
                    function w() {
                        var e = u("qunit-header");
                        e && (e.innerHTML = "<a href='" + Be(R) + "'>" + e.innerHTML + "</a> ");
                    }
                    function k() {
                        var e = u("qunit-banner");
                        e && (e.className = "");
                    }
                    function x() {
                        var e, t = u("qunit-tests"), n = u("qunit-testresult");
                        n && n.parentNode.removeChild(n), t && (t.innerHTML = "", n = j.createElement("p"), 
                        n.id = "qunit-testresult", n.className = "result", t.parentNode.insertBefore(n, t), 
                        n.innerHTML = '<div id="qunit-testresult-display">Running...<br />&#160;</div><div id="qunit-testresult-controls"></div><div class="clearfix"></div>', 
                        e = u("qunit-testresult-controls")), e && e.appendChild(m());
                    }
                    function T() {
                        var e = Vt.config.testId;
                        return !e || e.length <= 0 ? "" : "<div id='qunit-filteredTest'>Rerunning selected tests: " + Be(e.join(", ")) + " <a id='qunit-clearFilter' href='" + Be(R) + "'>Run all tests</a></div>";
                    }
                    function E() {
                        var e = u("qunit-userAgent");
                        e && (e.innerHTML = "", e.appendChild(j.createTextNode("QUnit " + Vt.version + "; " + Je.userAgent)));
                    }
                    function C() {
                        var e = u("qunit");
                        e && (e.innerHTML = "<h1 id='qunit-header'>" + Be(j.title) + "</h1><h2 id='qunit-banner'></h2><div id='qunit-testrunner-toolbar'></div>" + T() + "<h2 id='qunit-userAgent'></h2><ol id='qunit-tests'></ol>"), 
                        w(), k(), x(), E(), b();
                    }
                    function _(e, t, n) {
                        var r, i, s, o, a = u("qunit-tests");
                        a && (r = j.createElement("strong"), r.innerHTML = q(e, n), i = j.createElement("a"), 
                        i.innerHTML = "Rerun", i.href = d({
                            testId: t
                        }), s = j.createElement("li"), s.appendChild(r), s.appendChild(i), s.id = "qunit-test-output-" + t, 
                        o = j.createElement("ol"), o.className = "qunit-assert-list", s.appendChild(o), 
                        a.appendChild(s));
                    }
                    function q(e, t) {
                        var n = "";
                        return t && (n = "<span class='module-name'>" + Be(t) + "</span>: "), n += "<span class='test-name'>" + Be(e) + "</span>";
                    }
                    function N(e) {
                        return e.replace(/<\/?[^>]+(>|$)/g, "").replace(/&quot;/g, "").replace(/\s+/g, "");
                    }
                    if ("undefined" != typeof $e && $e.document) {
                        var S = Vt.config, M = [], j = $e.document, A = !1, O = Object.prototype.hasOwnProperty, R = d({
                            filter: void 0,
                            module: void 0,
                            moduleId: void 0,
                            testId: void 0
                        }), I = [];
                        Vt.begin(function(e) {
                            var t, n;
                            for (t = 0; t < e.modules.length; t++) n = e.modules[t], n.name && I.push(n.name);
                            I.sort(function(e, t) {
                                return e.localeCompare(t);
                            }), C();
                        }), Vt.done(function(e) {
                            var t, n, r, i = u("qunit-banner"), s = u("qunit-tests"), o = u("qunit-abort-tests-button"), a = Zt.passedTests + Zt.skippedTests + Zt.todoTests + Zt.failedTests, l = [ a, " tests completed in ", e.runtime, " milliseconds, with ", Zt.failedTests, " failed, ", Zt.skippedTests, " skipped, and ", Zt.todoTests, " todo.<br />", "<span class='passed'>", e.passed, "</span> assertions of <span class='total'>", e.total, "</span> passed, <span class='failed'>", e.failed, "</span> failed." ].join("");
                            if (o && o.disabled) {
                                l = "Tests aborted after " + e.runtime + " milliseconds.";
                                for (var c = 0; c < s.children.length; c++) t = s.children[c], "" !== t.className && "running" !== t.className || (t.className = "aborted", 
                                r = t.getElementsByTagName("ol")[0], n = j.createElement("li"), n.className = "fail", 
                                n.innerHTML = "Test aborted.", r.appendChild(n));
                            }
                            !i || o && o.disabled !== !1 || (i.className = Zt.failedTests ? "qunit-fail" : "qunit-pass"), 
                            o && o.parentNode.removeChild(o), s && (u("qunit-testresult-display").innerHTML = l), 
                            S.altertitle && j.title && (j.title = [ Zt.failedTests ? "✖" : "✔", j.title.replace(/^[\u2714\u2716] /i, "") ].join(" ")), 
                            S.scrolltop && $e.scrollTo && $e.scrollTo(0, 0);
                        }), Vt.testStart(function(e) {
                            var t, n;
                            _(e.name, e.testId, e.module), t = u("qunit-testresult-display"), t && (i(t, "running"), 
                            n = Vt.config.reorder && e.previousFailure, t.innerHTML = [ n ? "Rerunning previously failed test: <br />" : "Running: <br />", q(e.name, e.module) ].join(""));
                        }), Vt.log(function(e) {
                            var t, n, r, i, s, o, a = !1, l = u("qunit-test-output-" + e.testId);
                            l && (r = Be(e.message) || (e.result ? "okay" : "failed"), r = "<span class='test-message'>" + r + "</span>", 
                            r += "<span class='runtime'>@ " + e.runtime + " ms</span>", !e.result && O.call(e, "expected") ? (i = e.negative ? "NOT " + Vt.dump.parse(e.expected) : Vt.dump.parse(e.expected), 
                            s = Vt.dump.parse(e.actual), r += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + Be(i) + "</pre></td></tr>", 
                            s !== i ? (r += "<tr class='test-actual'><th>Result: </th><td><pre>" + Be(s) + "</pre></td></tr>", 
                            "number" == typeof e.actual && "number" == typeof e.expected ? isNaN(e.actual) || isNaN(e.expected) || (a = !0, 
                            o = e.actual - e.expected, o = (o > 0 ? "+" : "") + o) : "boolean" != typeof e.actual && "boolean" != typeof e.expected && (o = Vt.diff(i, s), 
                            a = N(o).length !== N(i).length + N(s).length), a && (r += "<tr class='test-diff'><th>Diff: </th><td><pre>" + o + "</pre></td></tr>")) : r += i.indexOf("[object Array]") !== -1 || i.indexOf("[object Object]") !== -1 ? "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the depth of object is more than current max depth (" + Vt.config.maxDepth + ").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to  run with a higher max depth or <a href='" + Be(d({
                                maxDepth: -1
                            })) + "'>Rerun</a> without max depth.</p></td></tr>" : "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the expected and actual results have an equivalent serialization</td></tr>", 
                            e.source && (r += "<tr class='test-source'><th>Source: </th><td><pre>" + Be(e.source) + "</pre></td></tr>"), 
                            r += "</table>") : !e.result && e.source && (r += "<table><tr class='test-source'><th>Source: </th><td><pre>" + Be(e.source) + "</pre></td></tr></table>"), 
                            t = l.getElementsByTagName("ol")[0], n = j.createElement("li"), n.className = e.result ? "pass" : "fail", 
                            n.innerHTML = r, t.appendChild(n));
                        }), Vt.testDone(function(t) {
                            var n, r, a, l, c, f, d, h, p, m, g = u("qunit-tests");
                            if (g) {
                                a = u("qunit-test-output-" + t.testId), o(a, "running"), c = t.failed > 0 ? "failed" : t.todo ? "todo" : t.skipped ? "skipped" : "passed", 
                                l = a.getElementsByTagName("ol")[0], f = t.passed, d = t.failed;
                                var v = t.failed > 0 ? t.todo : !t.todo;
                                if (v ? i(l, "qunit-collapsed") : S.collapse && (A ? i(l, "qunit-collapsed") : A = !0), 
                                n = a.firstChild, h = d ? "<b class='failed'>" + d + "</b>, <b class='passed'>" + f + "</b>, " : "", 
                                n.innerHTML += " <b class='counts'>(" + h + t.assertions.length + ")</b>", t.skipped) Zt.skippedTests++, 
                                a.className = "skipped", p = j.createElement("em"), p.className = "qunit-skipped-label", 
                                p.innerHTML = "skipped", a.insertBefore(p, n); else {
                                    if (e(n, "click", function() {
                                        s(l, "qunit-collapsed");
                                    }), a.className = v ? "pass" : "fail", t.todo) {
                                        var y = j.createElement("em");
                                        y.className = "qunit-todo-label", y.innerHTML = "todo", a.className += " todo", 
                                        a.insertBefore(y, n);
                                    }
                                    r = j.createElement("span"), r.className = "runtime", r.innerHTML = t.runtime + " ms", 
                                    a.insertBefore(r, l), v ? t.todo ? Zt.todoTests++ : Zt.passedTests++ : Zt.failedTests++;
                                }
                                t.source && (m = j.createElement("p"), m.innerHTML = "<strong>Source: </strong>" + t.source, 
                                i(m, "qunit-source"), v && i(m, "qunit-collapsed"), e(n, "click", function() {
                                    s(m, "qunit-collapsed");
                                }), a.appendChild(m)), S.hidepassed && "passed" === c && (M.push(a), g.removeChild(a));
                            }
                        });
                        var L = function(e) {
                            return !(e && e.version && e.version.major > 0);
                        }($e.phantom);
                        L && "complete" === j.readyState ? Vt.load() : e($e, "load", Vt.load);
                        var U = $e.onerror;
                        $e.onerror = function(e, t, n, r, i) {
                            var s = !1;
                            if (U) {
                                for (var o = arguments.length, u = Array(o > 5 ? o - 5 : 0), a = 5; a < o; a++) u[a - 5] = arguments[a];
                                s = U.call.apply(U, [ this, e, t, n, r, i ].concat(u));
                            }
                            if (s !== !0) {
                                var l = {
                                    message: e,
                                    fileName: t,
                                    lineNumber: n
                                };
                                i && i.stack && (l.stacktrace = le(i, 0)), s = Vt.onError(l);
                            }
                            return s;
                        }, $e.addEventListener("unhandledrejection", function(e) {
                            Vt.onUnhandledRejection(e.reason);
                        });
                    }
                }(), Vt.diff = function() {
                    function e() {}
                    var t = -1, n = 1, r = 0;
                    return e.prototype.DiffMain = function(e, t, n) {
                        var i, s, o, u, a, l;
                        if (i = new Date().getTime() + 1e3, null === e || null === t) throw new Error("Null input. (DiffMain)");
                        return e === t ? e ? [ [ r, e ] ] : [] : ("undefined" == typeof n && (n = !0), s = n, 
                        o = this.diffCommonPrefix(e, t), u = e.substring(0, o), e = e.substring(o), t = t.substring(o), 
                        o = this.diffCommonSuffix(e, t), a = e.substring(e.length - o), e = e.substring(0, e.length - o), 
                        t = t.substring(0, t.length - o), l = this.diffCompute(e, t, s, i), u && l.unshift([ r, u ]), 
                        a && l.push([ r, a ]), this.diffCleanupMerge(l), l);
                    }, e.prototype.diffCleanupEfficiency = function(e) {
                        var i, s, o, u, a, l, c, f, d;
                        for (i = !1, s = [], o = 0, u = null, a = 0, l = !1, c = !1, f = !1, d = !1; a < e.length; ) e[a][0] === r ? (e[a][1].length < 4 && (f || d) ? (s[o++] = a, 
                        l = f, c = d, u = e[a][1]) : (o = 0, u = null), f = d = !1) : (e[a][0] === t ? d = !0 : f = !0, 
                        u && (l && c && f && d || u.length < 2 && l + c + f + d === 3) && (e.splice(s[o - 1], 0, [ t, u ]), 
                        e[s[o - 1] + 1][0] = n, o--, u = null, l && c ? (f = d = !0, o = 0) : (o--, a = o > 0 ? s[o - 1] : -1, 
                        f = d = !1), i = !0)), a++;
                        i && this.diffCleanupMerge(e);
                    }, e.prototype.diffPrettyHtml = function(e) {
                        var i, s, o, u = [];
                        for (o = 0; o < e.length; o++) switch (i = e[o][0], s = e[o][1], i) {
                          case n:
                            u[o] = "<ins>" + Be(s) + "</ins>";
                            break;

                          case t:
                            u[o] = "<del>" + Be(s) + "</del>";
                            break;

                          case r:
                            u[o] = "<span>" + Be(s) + "</span>";
                        }
                        return u.join("");
                    }, e.prototype.diffCommonPrefix = function(e, t) {
                        var n, r, i, s;
                        if (!e || !t || e.charAt(0) !== t.charAt(0)) return 0;
                        for (i = 0, r = Math.min(e.length, t.length), n = r, s = 0; i < n; ) e.substring(s, n) === t.substring(s, n) ? (i = n, 
                        s = i) : r = n, n = Math.floor((r - i) / 2 + i);
                        return n;
                    }, e.prototype.diffCommonSuffix = function(e, t) {
                        var n, r, i, s;
                        if (!e || !t || e.charAt(e.length - 1) !== t.charAt(t.length - 1)) return 0;
                        for (i = 0, r = Math.min(e.length, t.length), n = r, s = 0; i < n; ) e.substring(e.length - n, e.length - s) === t.substring(t.length - n, t.length - s) ? (i = n, 
                        s = i) : r = n, n = Math.floor((r - i) / 2 + i);
                        return n;
                    }, e.prototype.diffCompute = function(e, i, s, o) {
                        var u, a, l, c, f, d, h, p, m, g, v, y;
                        return e ? i ? (a = e.length > i.length ? e : i, l = e.length > i.length ? i : e, 
                        c = a.indexOf(l), c !== -1 ? (u = [ [ n, a.substring(0, c) ], [ r, l ], [ n, a.substring(c + l.length) ] ], 
                        e.length > i.length && (u[0][0] = u[2][0] = t), u) : 1 === l.length ? [ [ t, e ], [ n, i ] ] : (f = this.diffHalfMatch(e, i), 
                        f ? (d = f[0], p = f[1], h = f[2], m = f[3], g = f[4], v = this.DiffMain(d, h, s, o), 
                        y = this.DiffMain(p, m, s, o), v.concat([ [ r, g ] ], y)) : s && e.length > 100 && i.length > 100 ? this.diffLineMode(e, i, o) : this.diffBisect(e, i, o))) : [ [ t, e ] ] : [ [ n, i ] ];
                    }, e.prototype.diffHalfMatch = function(e, t) {
                        function n(e, t, n) {
                            var r, i, o, u, a, l, c, f, d;
                            for (r = e.substring(n, n + Math.floor(e.length / 4)), i = -1, o = ""; (i = t.indexOf(r, i + 1)) !== -1; ) u = s.diffCommonPrefix(e.substring(n), t.substring(i)), 
                            a = s.diffCommonSuffix(e.substring(0, n), t.substring(0, i)), o.length < a + u && (o = t.substring(i - a, i) + t.substring(i, i + u), 
                            l = e.substring(0, n - a), c = e.substring(n + u), f = t.substring(0, i - a), d = t.substring(i + u));
                            return 2 * o.length >= e.length ? [ l, c, f, d, o ] : null;
                        }
                        var r, i, s, o, u, a, l, c, f, d, h;
                        return r = e.length > t.length ? e : t, i = e.length > t.length ? t : e, r.length < 4 || 2 * i.length < r.length ? null : (s = this, 
                        f = n(r, i, Math.ceil(r.length / 4)), d = n(r, i, Math.ceil(r.length / 2)), f || d ? (h = d ? f && f[4].length > d[4].length ? f : d : f, 
                        e.length > t.length ? (o = h[0], l = h[1], a = h[2], u = h[3]) : (a = h[0], u = h[1], 
                        o = h[2], l = h[3]), c = h[4], [ o, l, a, u, c ]) : null);
                    }, e.prototype.diffLineMode = function(e, i, s) {
                        var o, u, a, l, c, f, d, h, p;
                        for (o = this.diffLinesToChars(e, i), e = o.chars1, i = o.chars2, a = o.lineArray, 
                        u = this.DiffMain(e, i, !1, s), this.diffCharsToLines(u, a), this.diffCleanupSemantic(u), 
                        u.push([ r, "" ]), l = 0, f = 0, c = 0, h = "", d = ""; l < u.length; ) {
                            switch (u[l][0]) {
                              case n:
                                c++, d += u[l][1];
                                break;

                              case t:
                                f++, h += u[l][1];
                                break;

                              case r:
                                if (f >= 1 && c >= 1) {
                                    for (u.splice(l - f - c, f + c), l = l - f - c, o = this.DiffMain(h, d, !1, s), 
                                    p = o.length - 1; p >= 0; p--) u.splice(l, 0, o[p]);
                                    l += o.length;
                                }
                                c = 0, f = 0, h = "", d = "";
                            }
                            l++;
                        }
                        return u.pop(), u;
                    }, e.prototype.diffBisect = function(e, r, i) {
                        var s, o, u, a, l, c, f, d, h, p, m, g, v, y, b, w, k, x, T, E, C, _, q;
                        for (s = e.length, o = r.length, u = Math.ceil((s + o) / 2), a = u, l = 2 * u, c = new Array(l), 
                        f = new Array(l), d = 0; d < l; d++) c[d] = -1, f[d] = -1;
                        for (c[a + 1] = 0, f[a + 1] = 0, h = s - o, p = h % 2 !== 0, m = 0, g = 0, v = 0, 
                        y = 0, C = 0; C < u && !(new Date().getTime() > i); C++) {
                            for (_ = -C + m; _ <= C - g; _ += 2) {
                                for (w = a + _, k = _ === -C || _ !== C && c[w - 1] < c[w + 1] ? c[w + 1] : c[w - 1] + 1, 
                                T = k - _; k < s && T < o && e.charAt(k) === r.charAt(T); ) k++, T++;
                                if (c[w] = k, k > s) g += 2; else if (T > o) m += 2; else if (p && (b = a + h - _, 
                                b >= 0 && b < l && f[b] !== -1 && (x = s - f[b], k >= x))) return this.diffBisectSplit(e, r, k, T, i);
                            }
                            for (q = -C + v; q <= C - y; q += 2) {
                                for (b = a + q, x = q === -C || q !== C && f[b - 1] < f[b + 1] ? f[b + 1] : f[b - 1] + 1, 
                                E = x - q; x < s && E < o && e.charAt(s - x - 1) === r.charAt(o - E - 1); ) x++, 
                                E++;
                                if (f[b] = x, x > s) y += 2; else if (E > o) v += 2; else if (!p && (w = a + h - q, 
                                w >= 0 && w < l && c[w] !== -1 && (k = c[w], T = a + k - w, x = s - x, k >= x))) return this.diffBisectSplit(e, r, k, T, i);
                            }
                        }
                        return [ [ t, e ], [ n, r ] ];
                    }, e.prototype.diffBisectSplit = function(e, t, n, r, i) {
                        var s, o, u, a, l, c;
                        return s = e.substring(0, n), u = t.substring(0, r), o = e.substring(n), a = t.substring(r), 
                        l = this.DiffMain(s, u, !1, i), c = this.DiffMain(o, a, !1, i), l.concat(c);
                    }, e.prototype.diffCleanupSemantic = function(e) {
                        var i, s, o, u, a, l, c, f, d, h, p, m, g;
                        for (i = !1, s = [], o = 0, u = null, a = 0, f = 0, d = 0, l = 0, c = 0; a < e.length; ) e[a][0] === r ? (s[o++] = a, 
                        f = l, d = c, l = 0, c = 0, u = e[a][1]) : (e[a][0] === n ? l += e[a][1].length : c += e[a][1].length, 
                        u && u.length <= Math.max(f, d) && u.length <= Math.max(l, c) && (e.splice(s[o - 1], 0, [ t, u ]), 
                        e[s[o - 1] + 1][0] = n, o--, o--, a = o > 0 ? s[o - 1] : -1, f = 0, d = 0, l = 0, 
                        c = 0, u = null, i = !0)), a++;
                        for (i && this.diffCleanupMerge(e), a = 1; a < e.length; ) e[a - 1][0] === t && e[a][0] === n && (h = e[a - 1][1], 
                        p = e[a][1], m = this.diffCommonOverlap(h, p), g = this.diffCommonOverlap(p, h), 
                        m >= g ? (m >= h.length / 2 || m >= p.length / 2) && (e.splice(a, 0, [ r, p.substring(0, m) ]), 
                        e[a - 1][1] = h.substring(0, h.length - m), e[a + 1][1] = p.substring(m), a++) : (g >= h.length / 2 || g >= p.length / 2) && (e.splice(a, 0, [ r, h.substring(0, g) ]), 
                        e[a - 1][0] = n, e[a - 1][1] = p.substring(0, p.length - g), e[a + 1][0] = t, e[a + 1][1] = h.substring(g), 
                        a++), a++), a++;
                    }, e.prototype.diffCommonOverlap = function(e, t) {
                        var n, r, i, s, o, u, a;
                        if (n = e.length, r = t.length, 0 === n || 0 === r) return 0;
                        if (n > r ? e = e.substring(n - r) : n < r && (t = t.substring(0, n)), i = Math.min(n, r), 
                        e === t) return i;
                        for (s = 0, o = 1; ;) {
                            if (u = e.substring(i - o), a = t.indexOf(u), a === -1) return s;
                            o += a, 0 !== a && e.substring(i - o) !== t.substring(0, o) || (s = o, o++);
                        }
                    }, e.prototype.diffLinesToChars = function(e, t) {
                        function n(e) {
                            var t, n, s, o, u;
                            for (t = "", n = 0, s = -1, o = r.length; s < e.length - 1; ) {
                                s = e.indexOf("\n", n), s === -1 && (s = e.length - 1), u = e.substring(n, s + 1), 
                                n = s + 1;
                                var a = i.hasOwnProperty ? i.hasOwnProperty(u) : void 0 !== i[u];
                                a ? t += String.fromCharCode(i[u]) : (t += String.fromCharCode(o), i[u] = o, r[o++] = u);
                            }
                            return t;
                        }
                        var r, i, s, o;
                        return r = [], i = {}, r[0] = "", s = n(e), o = n(t), {
                            chars1: s,
                            chars2: o,
                            lineArray: r
                        };
                    }, e.prototype.diffCharsToLines = function(e, t) {
                        var n, r, i, s;
                        for (n = 0; n < e.length; n++) {
                            for (r = e[n][1], i = [], s = 0; s < r.length; s++) i[s] = t[r.charCodeAt(s)];
                            e[n][1] = i.join("");
                        }
                    }, e.prototype.diffCleanupMerge = function(e) {
                        var i, s, o, u, a, l, c, f, d;
                        for (e.push([ r, "" ]), i = 0, s = 0, o = 0, a = "", u = ""; i < e.length; ) switch (e[i][0]) {
                          case n:
                            o++, u += e[i][1], i++;
                            break;

                          case t:
                            s++, a += e[i][1], i++;
                            break;

                          case r:
                            s + o > 1 ? (0 !== s && 0 !== o && (l = this.diffCommonPrefix(u, a), 0 !== l && (i - s - o > 0 && e[i - s - o - 1][0] === r ? e[i - s - o - 1][1] += u.substring(0, l) : (e.splice(0, 0, [ r, u.substring(0, l) ]), 
                            i++), u = u.substring(l), a = a.substring(l)), l = this.diffCommonSuffix(u, a), 
                            0 !== l && (e[i][1] = u.substring(u.length - l) + e[i][1], u = u.substring(0, u.length - l), 
                            a = a.substring(0, a.length - l))), 0 === s ? e.splice(i - o, s + o, [ n, u ]) : 0 === o ? e.splice(i - s, s + o, [ t, a ]) : e.splice(i - s - o, s + o, [ t, a ], [ n, u ]), 
                            i = i - s - o + (s ? 1 : 0) + (o ? 1 : 0) + 1) : 0 !== i && e[i - 1][0] === r ? (e[i - 1][1] += e[i][1], 
                            e.splice(i, 1)) : i++, o = 0, s = 0, a = "", u = "";
                        }
                        for ("" === e[e.length - 1][1] && e.pop(), c = !1, i = 1; i < e.length - 1; ) e[i - 1][0] === r && e[i + 1][0] === r && (f = e[i][1], 
                        d = f.substring(f.length - e[i - 1][1].length), d === e[i - 1][1] ? (e[i][1] = e[i - 1][1] + e[i][1].substring(0, e[i][1].length - e[i - 1][1].length), 
                        e[i + 1][1] = e[i - 1][1] + e[i + 1][1], e.splice(i - 1, 1), c = !0) : f.substring(0, e[i + 1][1].length) === e[i + 1][1] && (e[i - 1][1] += e[i + 1][1], 
                        e[i][1] = e[i][1].substring(e[i + 1][1].length) + e[i + 1][1], e.splice(i + 1, 1), 
                        c = !0)), i++;
                        c && this.diffCleanupMerge(e);
                    }, function(t, n) {
                        var r, i, s;
                        return r = new e(), i = r.DiffMain(t, n), r.diffCleanupEfficiency(i), s = r.diffPrettyHtml(i);
                    };
                }();
            }(function() {
                return this;
            }());
        }).call(t, n(435), function() {
            return this;
        }(), n(294)(e));
    },
    910: function(e, t, n) {
        var r, i;
        !function(s, o) {
            "use strict";
            r = o, i = "function" == typeof r ? r.call(t, n, t, e) : r, !(void 0 !== i && (e.exports = i));
        }(this, function() {
            "use strict";
            function e(e, t) {
                var n;
                for (n in t) t.hasOwnProperty(n) && ("undefined" == typeof t[n] ? delete e[n] : e[n] = t[n]);
                return e;
            }
            function t(e, t) {
                var n;
                for (n = 0; n < e.length; n += 1) if (e[n] === t) return n;
                return -1;
            }
            function n(e, n) {
                var r = t(e, n);
                return r !== -1 ? e.splice(r, 1) : [];
            }
            function r(e) {
                return "undefined" != typeof e && "undefined" != typeof e.requireExpects && e.requireExpects;
            }
            function i(e) {
                return !!e.result;
            }
            function s(e) {
                return !i(e);
            }
            function o(e) {
                return s(e) && "undefined" == typeof e.expected && "undefined" == typeof e.actual;
            }
            function u(e) {
                return e.replace(/(\r?\n)/g, "$&# ");
            }
            function a(e) {
                return e.replace(/^\s+/, "");
            }
            function l(e) {
                return e;
            }
            function c(e, t, n, r) {
                e.push(t + ": " + r(n));
            }
            function f(e, t, n, r, i) {
                e && "undefined" != typeof r && c(t, n, r, i);
            }
            function d(e, t) {
                return t ? e + " - " + u(t) : e;
            }
            function h(h, v, y) {
                function b(e) {
                    return C.config[e];
                }
                function w(e) {
                    if (i(e)) return e.message;
                    var t = [];
                    return e.message && t.push(e.message), b("showExpectationOnFailure") && !o(e) && (c(t, "expected", e.expected, S), 
                    c(t, "got", e.actual, S)), f(b("showTestNameOnFailure"), t, "test", e.name, l), 
                    f(b("showModuleNameOnFailure"), t, "module", e.module, l), f(b("showSourceOnFailure"), t, "source", e.source, a), 
                    t.join(", ");
                }
                function k(e) {
                    C.puts(C.config.initialCount + ".." + e);
                }
                function x(e) {
                    var r;
                    t(q, e) !== -1 && (r = E.config[e], "undefined" != typeof r && n(r, N[e]));
                }
                function T(e) {
                    var t;
                    for (t = 0; t < e.length; t += 1) x(e[t]);
                }
                if (!h) throw new Error('should pass QUnit object reference. Please check QUnit\'s "require" path if you are using Node.js (or any CommonJS env).');
                if ("function" != typeof v) throw new Error("should pass print-like function");
                var E = h, C = {}, _ = function(e, t) {
                    y && "object" == typeof y && "undefined" != typeof y[e] && (v('# WARNING: Option "' + e + '" is deprecated and will be removed in future version.'), 
                    t(y[e]));
                }, q = [ "moduleStart", "testStart", "log", "testDone", "done" ], N = {}, S = function() {
                    return "undefined" != typeof E.dump && "function" == typeof E.dump.parse ? function(e) {
                        return E.dump.parse(e);
                    } : "undefined" != typeof E.jsDump && "function" == typeof E.jsDump.parse ? function(e) {
                        return E.jsDump.parse(e);
                    } : l;
                }();
                return C.config = e({
                    initialCount: 1,
                    showModuleNameOnFailure: !0,
                    showTestNameOnFailure: !0,
                    showExpectationOnFailure: !0,
                    showSourceOnFailure: !0
                }, y), _("noPlan", function(e) {
                    v('# Now QUnit-TAP works as with "noPlan: true" by default. If you want to delare plan explicitly, please use "QUnit.config.requireExpects" option instead.'), 
                    C.config.noPlan = e;
                }), _("count", function(e) {
                    C.config.initialCount = e + 1;
                }), _("showDetailsOnFailure", function(e) {
                    C.config.showModuleNameOnFailure = e, C.config.showTestNameOnFailure = e, C.config.showExpectationOnFailure = e, 
                    C.config.showSourceOnFailure = e;
                }), C.VERSION = p, C.puts = v, C.count = C.config.initialCount - 1, C.expectedCount = C.config.initialCount - 1, 
                C.explain = S, C.note = function(e) {
                    C.puts(u("# " + e));
                }, C.diag = function(e) {
                    return C.note(e), !1;
                }, C.moduleStart = function(e) {
                    var t = "string" == typeof e ? e : e.name;
                    C.note("module: " + t);
                }, C.testStart = function(e) {
                    var t = "string" == typeof e ? e : e.name;
                    C.note("test: " + t);
                }, C.log = function(e) {
                    var t = "";
                    C.count += 1, s(e) && (t += "not "), t += "ok " + C.count, C.puts(d(t, w(e)));
                }, C.testDone = function() {
                    r(E.config) && (C.expectedCount += E.config.current.expected);
                }, C.done = function() {
                    ("undefined" == typeof C.config.noPlan || C.config.noPlan) && k(r(E.config) ? C.expectedCount : C.count);
                }, C.unsubscribe = function() {
                    "undefined" != typeof E.config && T(0 === arguments.length ? q : m.apply(arguments));
                }, function() {
                    var e, t, n, r = g(E);
                    for (t = 0; t < q.length; t += 1) e = q[t], n = r(E, C, e), N[e] = n;
                }(), C;
            }
            var p = "1.5.1", m = Array.prototype.slice, g = function(e) {
                return function(e, t, n) {
                    var r = e[n], i = function() {
                        t[n].apply(t, m.apply(arguments));
                    };
                    return r(i), i;
                };
            };
            return h.qunitTap = function() {
                throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require("qunit-tap") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');
            }, h;
        });
    },
    911: function(e, t) {
        "use strict";
        var n = !1;
        QUnit.config.autostart = !1;
        var r = window.onerror;
        window.onerror = null, QUnit.begin(function() {
            window.onerror = function(e, t, n) {
                var i = !1;
                return r && (i = r(e, t, n)), QUnit.config.current && QUnit.config.current.async && QUnit.start(), 
                i;
            };
        }), QUnit.moduleStart(function() {
            n = !0;
        }), QUnit.done(function() {
            window.setTimeout(function() {
                console.log("cockpittest-tap-done");
            }, 0), window.onerror = null;
        });
        var i = /^((not )?ok [0-9]+ (- )?)(.*)$/;
        qunitTap(QUnit, function() {
            if (1 == arguments.length && QUnit.config.current) {
                var e = i.exec(arguments[0]);
                if (e) return void console.log(e[1] + QUnit.config.current.testName + ": " + e[4]);
            }
            console.log.apply(console, arguments);
        }), window.setTimeout(function() {
            n || (console.log("QUnit not started by test"), console.log("cockpittest-tap-error"));
        }, 2e4), window.tests_included = !0;
    },
    912: function(e, t) {}
});
//# sourceMappingURL=test-config-client.min.js.map