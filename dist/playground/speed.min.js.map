{"version":3,"sources":["webpack:///playground/speed.min.js","webpack:///webpack/bootstrap 5e0669e19f5d62321be2?b050*****","webpack:///external \"cockpit\"?478e*****","webpack:///../pkg/playground/speed.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","4","cockpit","37","update","element","document","getElementById","channel","websocket","innerHTML","format_bytes_per_sec","total","Date","now","start","console","log","memory","pid","proc","script","then","data","parts","split","ex","String","echo","ev","generate","length","binary","window","ArrayBuffer","Array","join","stop","sideband","target","parseInt","value","batch","interval","isNaN","alert","checked","options","payload","input","WebSocket","transport","uri","csrf_token","btoa","JSON","stringify","binaryType","onopen","i","send","timer","setInterval","onmessage","event","byteLength","onclose","addEventListener","problem","read","path","close","ws","clearInterval","wait","body","style","display"],"mappings":"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","file":"playground/speed.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(37);\n\n\n/***/ },\n\n/***/ 4:\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n\n/***/ 37:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t(function() {\n\t    var cockpit = __webpack_require__(4);\n\t\n\t    var channel = null;\n\t    var websocket = null;\n\t    var timer = null;\n\t    var start = null;\n\t    var total = 0;\n\t    var proc = null;\n\t\n\t    function update() {\n\t        var element = document.getElementById(\"speed\");\n\t        if (channel || websocket) {\n\t            element.innerHTML = cockpit.format_bytes_per_sec((total * 1000) / (Date.now() - start));\n\t            console.log(total);\n\t        } else {\n\t            element.innerHTML = \"\";\n\t        }\n\t\n\t        var memory = document.getElementById(\"memory\");\n\t        var pid = document.getElementById(\"pid\");\n\t        if (!proc) {\n\t            proc = cockpit.script(\"echo $PPID && cat /proc/$PPID/statm\");\n\t            proc.then(function(data) {\n\t                var parts = data.split(\"\\n\");\n\t                pid.innerHTML = parts[0];\n\t                memory.innerHTML = parts[1];\n\t                proc = null;\n\t            }, function(ex) {\n\t                memory.innerHTML = String(ex);\n\t                proc = null;\n\t            });\n\t        }\n\t    }\n\t\n\t    function echo(ev) {\n\t        stop();\n\t\n\t        var sideband = ev.target.id == \"echo-sideband\";\n\t\n\t        function generate(length, binary) {\n\t            if (binary)\n\t                return new window.ArrayBuffer(length);\n\t            else\n\t                return (new Array(length)).join(\"x\");\n\t        }\n\t\n\t        var length = parseInt(document.getElementById(\"message\").value, 10);\n\t        var batch = parseInt(document.getElementById(\"batch\").value, 10);\n\t        var interval = parseInt(document.getElementById(\"interval\").value, 10);\n\t\n\t        if (isNaN(length) || isNaN(interval) || isNaN(batch)) {\n\t            window.alert(\"Bad value\");\n\t            return;\n\t        }\n\t\n\t        var binary = document.getElementById.checked;\n\t        var options = { payload: \"echo\" };\n\t        var input = generate(length, binary);\n\t        start = new Date();\n\t        total = 0;\n\t\n\t        if (sideband) {\n\t            if (binary)\n\t                options.binary = \"raw\";\n\t\n\t            websocket = new window.WebSocket(cockpit.transport.uri(\"channel/\" + cockpit.transport.csrf_token) +\n\t                \"?\" + window.btoa(JSON.stringify(options)));\n\t            websocket.binaryType = 'arraybuffer';\n\t\n\t            websocket.onopen = function() {\n\t                for (var i = 0; i < batch; i++)\n\t                    websocket.send(input);\n\t                timer = window.setInterval(function() {\n\t                    for (var i = 0; i < batch; i++)\n\t                        websocket.send(input);\n\t                }, interval);\n\t            };\n\t\n\t            websocket.onmessage = function(event) {\n\t                if (binary)\n\t                    total += event.data.byteLength;\n\t                else\n\t                    total += event.data.length;\n\t            };\n\t\n\t            websocket.onclose = function(event) {\n\t                if (websocket)\n\t                    window.alert(\"channel closed\");\n\t            };\n\t\n\t        } else {\n\t\n\t            if (binary)\n\t                options.binary = true;\n\t\n\t            channel = cockpit.channel(options);\n\t\n\t            channel.addEventListener(\"message\", function(event, data) {\n\t                total += data.length;\n\t            });\n\t            channel.addEventListener(\"close\", function(event, options) {\n\t                if (options.problem)\n\t                    window.alert(options.problem);\n\t            });\n\t\n\t            for (var i = 0; i < batch; i++)\n\t                channel.send(input);\n\t\n\t            timer = window.setInterval(function() {\n\t                for (var i = 0; i < batch; i++)\n\t                    channel.send(input);\n\t            }, interval);\n\t        }\n\t    }\n\t\n\t    function read(ev) {\n\t        stop();\n\t\n\t        var sideband = ev.target.id == \"read-sideband\";\n\t        var path = document.getElementById(\"read-path\");\n\t\n\t        var options = {\n\t            payload: \"fsread1\",\n\t            path: path.value,\n\t            binary: sideband ? \"raw\" : true,\n\t        };\n\t\n\t        start = Date.now();\n\t        total = 0;\n\t\n\t        if (sideband) {\n\t            websocket = new window.WebSocket(cockpit.transport.uri(\"channel/\" + cockpit.transport.csrf_token) +\n\t                \"?\" + window.btoa(JSON.stringify(options)));\n\t            websocket.binaryType = 'arraybuffer';\n\t            websocket.onmessage = function(event) {\n\t                total += event.data.byteLength;\n\t            };\n\t            websocket.onclose = function(event) {\n\t                if (websocket)\n\t                    window.alert(\"channel closed\");\n\t            };\n\t        } else {\n\t            channel = cockpit.channel(options);\n\t            channel.addEventListener(\"message\", function(event, data) {\n\t                total += data.length;\n\t            });\n\t            channel.addEventListener(\"close\", function(event, options) {\n\t                if (options.problem)\n\t                    window.alert(options.problem);\n\t            });\n\t        }\n\t    }\n\t\n\t    function stop() {\n\t        update();\n\t\n\t        if (channel)\n\t            channel.close();\n\t        channel = null;\n\t        var ws = websocket;\n\t        websocket = null;\n\t        if (ws)\n\t            ws.close();\n\t\n\t        window.clearInterval(timer);\n\t        timer = null;\n\t    }\n\t\n\t    cockpit.transport.wait(function() {\n\t        document.getElementById(\"echo-normal\").addEventListener(\"click\", echo);\n\t        document.getElementById(\"echo-sideband\").addEventListener(\"click\", echo);\n\t        document.getElementById(\"read-normal\").addEventListener(\"click\", read);\n\t        document.getElementById(\"read-sideband\").addEventListener(\"click\", read);\n\t        document.getElementById(\"stop\").addEventListener(\"click\", stop);\n\t        window.setInterval(update, 500);\n\t        document.body.style.display = \"block\";\n\t    });\n\t}());\n\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// playground/speed.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 5e0669e19f5d62321be2","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 4\n// module chunks = 0 1 2 3 4 5 6 7 8","'use strict';\n\n(function() {\n    var cockpit = require(\"cockpit\");\n\n    var channel = null;\n    var websocket = null;\n    var timer = null;\n    var start = null;\n    var total = 0;\n    var proc = null;\n\n    function update() {\n        var element = document.getElementById(\"speed\");\n        if (channel || websocket) {\n            element.innerHTML = cockpit.format_bytes_per_sec((total * 1000) / (Date.now() - start));\n            console.log(total);\n        } else {\n            element.innerHTML = \"\";\n        }\n\n        var memory = document.getElementById(\"memory\");\n        var pid = document.getElementById(\"pid\");\n        if (!proc) {\n            proc = cockpit.script(\"echo $PPID && cat /proc/$PPID/statm\");\n            proc.then(function(data) {\n                var parts = data.split(\"\\n\");\n                pid.innerHTML = parts[0];\n                memory.innerHTML = parts[1];\n                proc = null;\n            }, function(ex) {\n                memory.innerHTML = String(ex);\n                proc = null;\n            });\n        }\n    }\n\n    function echo(ev) {\n        stop();\n\n        var sideband = ev.target.id == \"echo-sideband\";\n\n        function generate(length, binary) {\n            if (binary)\n                return new window.ArrayBuffer(length);\n            else\n                return (new Array(length)).join(\"x\");\n        }\n\n        var length = parseInt(document.getElementById(\"message\").value, 10);\n        var batch = parseInt(document.getElementById(\"batch\").value, 10);\n        var interval = parseInt(document.getElementById(\"interval\").value, 10);\n\n        if (isNaN(length) || isNaN(interval) || isNaN(batch)) {\n            window.alert(\"Bad value\");\n            return;\n        }\n\n        var binary = document.getElementById.checked;\n        var options = { payload: \"echo\" };\n        var input = generate(length, binary);\n        start = new Date();\n        total = 0;\n\n        if (sideband) {\n            if (binary)\n                options.binary = \"raw\";\n\n            websocket = new window.WebSocket(cockpit.transport.uri(\"channel/\" + cockpit.transport.csrf_token) +\n                \"?\" + window.btoa(JSON.stringify(options)));\n            websocket.binaryType = 'arraybuffer';\n\n            websocket.onopen = function() {\n                for (var i = 0; i < batch; i++)\n                    websocket.send(input);\n                timer = window.setInterval(function() {\n                    for (var i = 0; i < batch; i++)\n                        websocket.send(input);\n                }, interval);\n            };\n\n            websocket.onmessage = function(event) {\n                if (binary)\n                    total += event.data.byteLength;\n                else\n                    total += event.data.length;\n            };\n\n            websocket.onclose = function(event) {\n                if (websocket)\n                    window.alert(\"channel closed\");\n            };\n\n        } else {\n\n            if (binary)\n                options.binary = true;\n\n            channel = cockpit.channel(options);\n\n            channel.addEventListener(\"message\", function(event, data) {\n                total += data.length;\n            });\n            channel.addEventListener(\"close\", function(event, options) {\n                if (options.problem)\n                    window.alert(options.problem);\n            });\n\n            for (var i = 0; i < batch; i++)\n                channel.send(input);\n\n            timer = window.setInterval(function() {\n                for (var i = 0; i < batch; i++)\n                    channel.send(input);\n            }, interval);\n        }\n    }\n\n    function read(ev) {\n        stop();\n\n        var sideband = ev.target.id == \"read-sideband\";\n        var path = document.getElementById(\"read-path\");\n\n        var options = {\n            payload: \"fsread1\",\n            path: path.value,\n            binary: sideband ? \"raw\" : true,\n        };\n\n        start = Date.now();\n        total = 0;\n\n        if (sideband) {\n            websocket = new window.WebSocket(cockpit.transport.uri(\"channel/\" + cockpit.transport.csrf_token) +\n                \"?\" + window.btoa(JSON.stringify(options)));\n            websocket.binaryType = 'arraybuffer';\n            websocket.onmessage = function(event) {\n                total += event.data.byteLength;\n            };\n            websocket.onclose = function(event) {\n                if (websocket)\n                    window.alert(\"channel closed\");\n            };\n        } else {\n            channel = cockpit.channel(options);\n            channel.addEventListener(\"message\", function(event, data) {\n                total += data.length;\n            });\n            channel.addEventListener(\"close\", function(event, options) {\n                if (options.problem)\n                    window.alert(options.problem);\n            });\n        }\n    }\n\n    function stop() {\n        update();\n\n        if (channel)\n            channel.close();\n        channel = null;\n        var ws = websocket;\n        websocket = null;\n        if (ws)\n            ws.close();\n\n        window.clearInterval(timer);\n        timer = null;\n    }\n\n    cockpit.transport.wait(function() {\n        document.getElementById(\"echo-normal\").addEventListener(\"click\", echo);\n        document.getElementById(\"echo-sideband\").addEventListener(\"click\", echo);\n        document.getElementById(\"read-normal\").addEventListener(\"click\", read);\n        document.getElementById(\"read-sideband\").addEventListener(\"click\", read);\n        document.getElementById(\"stop\").addEventListener(\"click\", stop);\n        window.setInterval(update, 500);\n        document.body.style.display = \"block\";\n    });\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/playground/speed.js\n// module id = 37\n// module chunks = 6"],"sourceRoot":""}