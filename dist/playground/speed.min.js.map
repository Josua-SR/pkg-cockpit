{"version":3,"sources":["webpack:///playground/speed.min.js","webpack:///webpack/bootstrap c07ace068123c6158792?3781******","webpack:///external \"cockpit\"?478e******","webpack:///../pkg/playground/speed.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","2","cockpit","44","update","element","document","getElementById","channel","websocket","innerHTML","format_bytes_per_sec","total","Date","now","start","console","log","memory","pid","proc","script","then","data","parts","split","ex","String","echo","ev","generate","length","binary","window","ArrayBuffer","Array","join","stop","sideband","target","parseInt","value","batch","interval","isNaN","alert","checked","options","payload","input","WebSocket","transport","uri","csrf_token","btoa","JSON","stringify","binaryType","onopen","i","send","timer","setInterval","onmessage","event","byteLength","onclose","addEventListener","problem","read","path","max_read_size","download","anchor","external","content-disposition","content-type","indexOf","createElement","href","hostname","port","pathname","query","open","close","ws","clearInterval","wait","body","style","display"],"mappings":"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","file":"playground/speed.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(44);\n\n\n/***/ },\n\n/***/ 2:\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n\n/***/ 44:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\"use strict\";\n\t\n\t(function () {\n\t    var cockpit = __webpack_require__(2);\n\t\n\t    var channel = null;\n\t    var websocket = null;\n\t    var timer = null;\n\t    var start = null;\n\t    var total = 0;\n\t    var proc = null;\n\t\n\t    function update() {\n\t        var element = document.getElementById(\"speed\");\n\t        if (channel || websocket) {\n\t            element.innerHTML = cockpit.format_bytes_per_sec(total * 1000 / (Date.now() - start));\n\t            console.log(total);\n\t        } else {\n\t            element.innerHTML = \"\";\n\t        }\n\t\n\t        var memory = document.getElementById(\"memory\");\n\t        var pid = document.getElementById(\"pid\");\n\t        if (!proc) {\n\t            proc = cockpit.script(\"echo $PPID && cat /proc/$PPID/statm\");\n\t            proc.then(function (data) {\n\t                var parts = data.split(\"\\n\");\n\t                pid.innerHTML = parts[0];\n\t                memory.innerHTML = parts[1];\n\t                proc = null;\n\t            }, function (ex) {\n\t                memory.innerHTML = String(ex);\n\t                proc = null;\n\t            });\n\t        }\n\t    }\n\t\n\t    function echo(ev) {\n\t        stop();\n\t\n\t        var sideband = ev.target.id == \"echo-sideband\";\n\t\n\t        function generate(length, binary) {\n\t            if (binary) return new window.ArrayBuffer(length);else return new Array(length).join(\"x\");\n\t        }\n\t\n\t        var length = parseInt(document.getElementById(\"message\").value, 10);\n\t        var batch = parseInt(document.getElementById(\"batch\").value, 10);\n\t        var interval = parseInt(document.getElementById(\"interval\").value, 10);\n\t\n\t        if (isNaN(length) || isNaN(interval) || isNaN(batch)) {\n\t            window.alert(\"Bad value\");\n\t            return;\n\t        }\n\t\n\t        var binary = document.getElementById.checked;\n\t        var options = { payload: \"echo\" };\n\t        var input = generate(length, binary);\n\t        start = new Date();\n\t        total = 0;\n\t\n\t        if (sideband) {\n\t            if (binary) options.binary = \"raw\";\n\t\n\t            websocket = new window.WebSocket(cockpit.transport.uri(\"channel/\" + cockpit.transport.csrf_token) + \"?\" + window.btoa(JSON.stringify(options)));\n\t            websocket.binaryType = 'arraybuffer';\n\t\n\t            websocket.onopen = function () {\n\t                for (var i = 0; i < batch; i++) {\n\t                    websocket.send(input);\n\t                }timer = window.setInterval(function () {\n\t                    for (var i = 0; i < batch; i++) {\n\t                        websocket.send(input);\n\t                    }\n\t                }, interval);\n\t            };\n\t\n\t            websocket.onmessage = function (event) {\n\t                if (binary) total += event.data.byteLength;else total += event.data.length;\n\t            };\n\t\n\t            websocket.onclose = function (event) {\n\t                if (websocket) window.alert(\"channel closed\");\n\t                stop();\n\t            };\n\t        } else {\n\t            if (binary) options.binary = true;\n\t\n\t            channel = cockpit.channel(options);\n\t\n\t            channel.addEventListener(\"message\", function (event, data) {\n\t                total += data.length;\n\t            });\n\t            channel.addEventListener(\"close\", function (event, options) {\n\t                if (options.problem) window.alert(options.problem);\n\t                stop();\n\t            });\n\t\n\t            for (var i = 0; i < batch; i++) {\n\t                channel.send(input);\n\t            }timer = window.setInterval(function () {\n\t                for (var i = 0; i < batch; i++) {\n\t                    channel.send(input);\n\t                }\n\t            }, interval);\n\t        }\n\t    }\n\t\n\t    function read(ev) {\n\t        stop();\n\t\n\t        var sideband = ev.target.id == \"read-sideband\";\n\t        var path = document.getElementById(\"read-path\");\n\t\n\t        var options = {\n\t            payload: \"fsread1\",\n\t            path: path.value,\n\t            max_read_size: 100 * 1024 * 1024 * 1024,\n\t            binary: sideband ? \"raw\" : true\n\t        };\n\t\n\t        start = Date.now();\n\t        total = 0;\n\t\n\t        if (sideband) {\n\t            websocket = new window.WebSocket(cockpit.transport.uri(\"channel/\" + cockpit.transport.csrf_token) + \"?\" + window.btoa(JSON.stringify(options)));\n\t            websocket.binaryType = 'arraybuffer';\n\t            websocket.onmessage = function (event) {\n\t                total += event.data.byteLength;\n\t            };\n\t            websocket.onclose = function (event) {\n\t                if (websocket) window.alert(\"channel closed\");\n\t                stop();\n\t            };\n\t        } else {\n\t            channel = cockpit.channel(options);\n\t            channel.addEventListener(\"message\", function (event, data) {\n\t                total += data.length;\n\t            });\n\t            channel.addEventListener(\"close\", function (event, options) {\n\t                if (options.problem) window.alert(options.problem);\n\t                stop();\n\t            });\n\t        }\n\t    }\n\t\n\t    function download(ev) {\n\t        stop();\n\t\n\t        var path = document.getElementById(\"download-path\");\n\t        var anchor;\n\t\n\t        var options = {\n\t            binary: \"raw\",\n\t            max_read_size: 100 * 1024 * 1024 * 1024,\n\t            external: {\n\t                \"content-disposition\": 'attachment; filename=\"download\"',\n\t                \"content-type\": \"application/octet-stream\"\n\t            }\n\t        };\n\t\n\t        /* Allow use of HTTP URLs */\n\t        if (path.value.indexOf(\"http\") === 0) {\n\t            anchor = document.createElement(\"a\");\n\t            anchor.href = path.value;\n\t            options[\"payload\"] = \"http-stream2\";\n\t            options[\"address\"] = anchor.hostname;\n\t            options[\"port\"] = parseInt(anchor.port, 10);\n\t            options[\"path\"] = anchor.pathname;\n\t            options[\"method\"] = \"GET\";\n\t        } else {\n\t            options[\"payload\"] = \"fsread1\";\n\t            options[\"path\"] = path.value;\n\t        }\n\t\n\t        console.log(\"Download\", options);\n\t\n\t        start = Date.now();\n\t        total = 0;\n\t\n\t        var query = window.btoa(JSON.stringify(options));\n\t        window.open(\"/cockpit/channel/\" + cockpit.transport.csrf_token + \"?\" + query);\n\t    }\n\t\n\t    function stop() {\n\t        update();\n\t\n\t        if (channel) channel.close();\n\t        channel = null;\n\t        var ws = websocket;\n\t        websocket = null;\n\t        if (ws) ws.close();\n\t\n\t        window.clearInterval(timer);\n\t        timer = null;\n\t    }\n\t\n\t    cockpit.transport.wait(function () {\n\t        document.getElementById(\"echo-normal\").addEventListener(\"click\", echo);\n\t        document.getElementById(\"echo-sideband\").addEventListener(\"click\", echo);\n\t        document.getElementById(\"read-normal\").addEventListener(\"click\", read);\n\t        document.getElementById(\"read-sideband\").addEventListener(\"click\", read);\n\t        document.getElementById(\"download-external\").addEventListener(\"click\", download);\n\t        document.getElementById(\"stop\").addEventListener(\"click\", stop);\n\t        window.setInterval(update, 500);\n\t        document.body.style.display = \"block\";\n\t    });\n\t})();\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// playground/speed.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c07ace068123c6158792","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 2\n// module chunks = 0 1 2 3 4 5 6 7 8 9","(function() {\n    var cockpit = require(\"cockpit\");\n\n    var channel = null;\n    var websocket = null;\n    var timer = null;\n    var start = null;\n    var total = 0;\n    var proc = null;\n\n    function update() {\n        var element = document.getElementById(\"speed\");\n        if (channel || websocket) {\n            element.innerHTML = cockpit.format_bytes_per_sec((total * 1000) / (Date.now() - start));\n            console.log(total);\n        } else {\n            element.innerHTML = \"\";\n        }\n\n        var memory = document.getElementById(\"memory\");\n        var pid = document.getElementById(\"pid\");\n        if (!proc) {\n            proc = cockpit.script(\"echo $PPID && cat /proc/$PPID/statm\");\n            proc.then(function(data) {\n                var parts = data.split(\"\\n\");\n                pid.innerHTML = parts[0];\n                memory.innerHTML = parts[1];\n                proc = null;\n            }, function(ex) {\n                memory.innerHTML = String(ex);\n                proc = null;\n            });\n        }\n    }\n\n    function echo(ev) {\n        stop();\n\n        var sideband = ev.target.id == \"echo-sideband\";\n\n        function generate(length, binary) {\n            if (binary)\n                return new window.ArrayBuffer(length);\n            else\n                return (new Array(length)).join(\"x\");\n        }\n\n        var length = parseInt(document.getElementById(\"message\").value, 10);\n        var batch = parseInt(document.getElementById(\"batch\").value, 10);\n        var interval = parseInt(document.getElementById(\"interval\").value, 10);\n\n        if (isNaN(length) || isNaN(interval) || isNaN(batch)) {\n            window.alert(\"Bad value\");\n            return;\n        }\n\n        var binary = document.getElementById.checked;\n        var options = { payload: \"echo\" };\n        var input = generate(length, binary);\n        start = new Date();\n        total = 0;\n\n        if (sideband) {\n            if (binary)\n                options.binary = \"raw\";\n\n            websocket = new window.WebSocket(cockpit.transport.uri(\"channel/\" + cockpit.transport.csrf_token) +\n                \"?\" + window.btoa(JSON.stringify(options)));\n            websocket.binaryType = 'arraybuffer';\n\n            websocket.onopen = function() {\n                for (var i = 0; i < batch; i++)\n                    websocket.send(input);\n                timer = window.setInterval(function() {\n                    for (var i = 0; i < batch; i++)\n                        websocket.send(input);\n                }, interval);\n            };\n\n            websocket.onmessage = function(event) {\n                if (binary)\n                    total += event.data.byteLength;\n                else\n                    total += event.data.length;\n            };\n\n            websocket.onclose = function(event) {\n                if (websocket)\n                    window.alert(\"channel closed\");\n                stop();\n            };\n        } else {\n            if (binary)\n                options.binary = true;\n\n            channel = cockpit.channel(options);\n\n            channel.addEventListener(\"message\", function(event, data) {\n                total += data.length;\n            });\n            channel.addEventListener(\"close\", function(event, options) {\n                if (options.problem)\n                    window.alert(options.problem);\n                stop();\n            });\n\n            for (var i = 0; i < batch; i++)\n                channel.send(input);\n\n            timer = window.setInterval(function() {\n                for (var i = 0; i < batch; i++)\n                    channel.send(input);\n            }, interval);\n        }\n    }\n\n    function read(ev) {\n        stop();\n\n        var sideband = ev.target.id == \"read-sideband\";\n        var path = document.getElementById(\"read-path\");\n\n        var options = {\n            payload: \"fsread1\",\n            path: path.value,\n            max_read_size: 100 * 1024 * 1024 * 1024,\n            binary: sideband ? \"raw\" : true,\n        };\n\n        start = Date.now();\n        total = 0;\n\n        if (sideband) {\n            websocket = new window.WebSocket(cockpit.transport.uri(\"channel/\" + cockpit.transport.csrf_token) +\n                \"?\" + window.btoa(JSON.stringify(options)));\n            websocket.binaryType = 'arraybuffer';\n            websocket.onmessage = function(event) {\n                total += event.data.byteLength;\n            };\n            websocket.onclose = function(event) {\n                if (websocket)\n                    window.alert(\"channel closed\");\n                stop();\n            };\n        } else {\n            channel = cockpit.channel(options);\n            channel.addEventListener(\"message\", function(event, data) {\n                total += data.length;\n            });\n            channel.addEventListener(\"close\", function(event, options) {\n                if (options.problem)\n                    window.alert(options.problem);\n                stop();\n            });\n        }\n    }\n\n    function download(ev) {\n        stop();\n\n        var path = document.getElementById(\"download-path\");\n        var anchor;\n\n        var options = {\n            binary: \"raw\",\n            max_read_size: 100 * 1024 * 1024 * 1024,\n            external: {\n                \"content-disposition\": 'attachment; filename=\"download\"',\n                \"content-type\": \"application/octet-stream\"\n            }\n        };\n\n        /* Allow use of HTTP URLs */\n        if (path.value.indexOf(\"http\") === 0) {\n            anchor = document.createElement(\"a\");\n            anchor.href = path.value;\n            options[\"payload\"] = \"http-stream2\";\n            options[\"address\"] = anchor.hostname;\n            options[\"port\"] = parseInt(anchor.port, 10);\n            options[\"path\"] = anchor.pathname;\n            options[\"method\"] = \"GET\";\n        } else {\n            options[\"payload\"] = \"fsread1\";\n            options[\"path\"] = path.value;\n        }\n\n        console.log(\"Download\", options);\n\n        start = Date.now();\n        total = 0;\n\n        var query = window.btoa(JSON.stringify(options));\n        window.open(\"/cockpit/channel/\" + cockpit.transport.csrf_token + \"?\" + query);\n    }\n\n    function stop() {\n        update();\n\n        if (channel)\n            channel.close();\n        channel = null;\n        var ws = websocket;\n        websocket = null;\n        if (ws)\n            ws.close();\n\n        window.clearInterval(timer);\n        timer = null;\n    }\n\n    cockpit.transport.wait(function() {\n        document.getElementById(\"echo-normal\").addEventListener(\"click\", echo);\n        document.getElementById(\"echo-sideband\").addEventListener(\"click\", echo);\n        document.getElementById(\"read-normal\").addEventListener(\"click\", read);\n        document.getElementById(\"read-sideband\").addEventListener(\"click\", read);\n        document.getElementById(\"download-external\").addEventListener(\"click\", download);\n        document.getElementById(\"stop\").addEventListener(\"click\", stop);\n        window.setInterval(update, 500);\n        document.body.style.display = \"block\";\n    });\n}());\n\n\n\n// WEBPACK FOOTER //\n// ../pkg/playground/speed.js"],"sourceRoot":""}