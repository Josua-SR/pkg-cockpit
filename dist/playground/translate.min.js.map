{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"jQuery\"","webpack:///external \"cockpit\"","webpack:///../pkg/lib/mustache.js","webpack:///../pkg/playground/translate.js","webpack:///../node_modules/mustache/mustache.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","jQuery","cockpit","cache","translate","template","div","document","createElement","innerHTML","result","mustache","extend","orig_mustache","render","view","partials","to_html","send","clearCache","_","gettext","C_","$","text","ngettext","output","empty","append","transport","wait","show","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","objectToString","toString","isArray","Array","isFunction","escapeRegExp","string","replace","hasProperty","obj","propName","regExpTest","RegExp","test","nonSpaceRe","isWhitespace","re","testRegExp","entityMap","&","<",">","\"","'","/","`","=","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","Scanner","this","tail","pos","Context","parentContext",".","parent","Writer","eos","scan","match","index","substring","length","scanUntil","search","push","lookup","primitive","intermediateValue","names","context","lookupHit","indexOf","split","parse","tags","cacheKey","join","tokens","openingTagRe","closingTagRe","closingCurlyRe","sections","spaces","hasTag","nonSpace","stripSpace","pop","compileTags","tagsToCompile","Error","start","type","chr","token","openSection","scanner","valueLength","charAt","nestedTokens","collector","numTokens","nestTokens","lastToken","squashedTokens","squashTokens","parseTemplate","renderTokens","originalTemplate","symbol","buffer","undefined","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","j","slice","escape","version","defaultWriter","TypeError","String","nodeName","apply"],"mappings":"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","file":"playground/translate.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n","module.exports = jQuery;","module.exports = cockpit;","/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport cockpit from \"cockpit\";\nimport orig_mustache from \"mustache/mustache\";\n\n/*\n * Turns a mustache template into a translated mustache template\n * by preparsing it and translating it.\n */\nvar cache = { };\n\nfunction translate(template) {\n    if (template in cache)\n        return cache[template];\n    var div = document.createElement(\"div\");\n    div.innerHTML = template;\n    cockpit.translate(div);\n    var result = div.innerHTML;\n    cache[template] = result;\n    return result;\n}\n\n/* Just like the mustache object, except for translated */\nexport var mustache = cockpit.extend({ }, orig_mustache, {\n    render: function render(template, view, partials) {\n        if (!view)\n            view = {};\n\n        return translate(orig_mustache.render(template, view, partials));\n    },\n    to_html: function to_html(template, view, partials, send) {\n        if (!view)\n            view = {};\n\n        return translate(orig_mustache.to_html(template, view, partials, send));\n    },\n    clearCache: function clearCache() {\n        cache = { };\n        return orig_mustache.clearCache();\n    }\n});\n","import $ from \"jquery\";\nimport cockpit from \"cockpit\";\nimport { mustache } from \"mustache\";\n\nconst _ = cockpit.gettext;\nvar C_ = cockpit.gettext;\n\n$(function () {\n    cockpit.translate();\n\n    var text = _(\"Empty\");\n    $(\"#underscore-empty\").text(text);\n\n    text = _(\"verb\", \"Empty\");\n    $(\"#underscore-context-empty\").text(text);\n\n    text = C_(\"verb\", \"Empty\");\n    $(\"#cunderscore-context-empty\").text(text);\n\n    text = cockpit.gettext(\"Control\");\n    $(\"#gettext-control\").text(text);\n\n    text = cockpit.gettext(\"key\", \"Control\");\n    $(\"#gettext-context-control\").text(text);\n\n    text = cockpit.ngettext(\"$0 disk is missing\", \"$0 disks are missing\", 1);\n    $(\"#ngettext-disks-1\").text(text);\n\n    text = cockpit.ngettext(\"$0 disk is missing\", \"$0 disks are missing\", 2);\n    $(\"#ngettext-disks-2\").text(text);\n\n    text = cockpit.ngettext(\"disk-non-rotational\", \"$0 disk is missing\", \"$0 disks are missing\", 1);\n    $(\"#ngettext-context-disks-1\").text(text);\n\n    text = cockpit.ngettext(\"disk-non-rotational\", \"$0 disk is missing\", \"$0 disks are missing\", 2);\n    $(\"#ngettext-context-disks-2\").text(text);\n\n    var template = $(\"#mustache-input\").text();\n    var output = mustache.render(template);\n    $(\"#mustache-output\").empty()\n            .append(output);\n\n    cockpit.transport.wait(function() {\n        $(\"body\").show();\n    });\n});\n","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {  \n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index]) \n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var tokens = cache[cacheKey];\n\n    if (tokens == null)\n      tokens = cache[cacheKey] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `tags` argument is given here it must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  Writer.prototype.render = function render (template, view, partials, tags) {\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template, tags);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value, tags), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '3.0.1';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer. If the optional `tags` argument is given here it must be an\n   * array with two string values: the opening and closing tags used in the\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  mustache.render = function render (template, view, partials, tags) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, tags);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n"],"sourceRoot":""}