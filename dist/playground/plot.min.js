!function(t) {
    function e(i) {
        if (n[i]) return n[i].exports;
        var o = n[i] = {
            exports: {},
            id: i,
            loaded: !1
        };
        return t[i].call(o.exports, o, o.exports, e), o.loaded = !0, o.exports;
    }
    var n = {};
    return e.m = t, e.c = n, e.p = "", e(0);
}([ function(t, e, n) {
    t.exports = n(17);
}, , , , , , function(t, e) {
    t.exports = jQuery;
}, , function(t, e) {
    t.exports = cockpit;
}, , , , , , , function(t, e) {}, , function(t, e, n) {
    "use strict";
    var i = n(6), o = n(18);
    n(15);
    var r = o.plot(i("#plot"), 300);
    r.set_options(o.plot_simple_template()), r.add_metrics_sum_series({
        direct: [ "mem.util.used" ]
    }, {}), i(function() {
        i("body").show(), r.resize();
        var t = o.setup_plot_controls(i("body"), i("#toolbar"));
        t.reset([ r ]);
    });
}, function(t, e, n) {
    "use strict";
    function i(t, e, n, i) {
        function r() {
            v.width(x.width()), v.height(x.height());
        }
        function a(t) {
            d ? (d.getAxes().yaxis.options.max = t, u()) : p.yaxis.max = t;
        }
        function l() {
            g = !0, s();
        }
        function s() {
            g && 0 !== x.width() && 0 !== x.height() && (d ? f() : (r(), d = o.plot(v, n, p)));
        }
        function c() {
            g = !1;
        }
        function u() {
            d && g && (d.setData(n), i.setup_hook && i.setup_hook(d), d.setupGrid(), d.draw());
        }
        function f() {
            d && g && (r(), v.width() > 0 && v.height() > 0 && d.resize(), u());
        }
        function h() {
            o(m).trigger("destroyed"), o(window).off("resize", f), o(x).empty(), d = null;
        }
        var d, m, p = {
            colors: [ "#0099d3" ],
            legend: {
                show: !1
            },
            series: {
                shadowSize: 0,
                lines: {
                    lineWidth: 0,
                    fill: 1
                }
            },
            xaxis: {
                tickFormatter: function() {
                    return "";
                }
            },
            yaxis: {
                tickFormatter: function() {
                    return "";
                }
            },
            points: {
                radius: 0
            },
            grid: {
                borderWidth: 1,
                aboveData: !0,
                color: "black",
                borderColor: o.color.parse("black").scale("a", .22).toString(),
                labelMargin: 0
            }
        }, g = !1;
        o.extend(!0, p, i);
        var x = o(t), v = o("<div/>");
        return x.empty(), x.append(v), o(e).on("notify", u), o(window).on("resize", f), 
        s(), m = {
            start: l,
            stop: c,
            resize: f,
            element: v[0],
            set_yaxis_max: a,
            destroy: h
        };
    }
    var o = n(6), r = n(8);
    n(19), n(20), n(21);
    var a = {}, l = r.gettext;
    a.plot = function(t, e, n) {
        function i() {
            if (0 !== t.height() && 0 !== t.width()) {
                null === C && (C = o.plot(t, T, _)), C.setData(T);
                var e = C.getAxes();
                e.xaxis.options.min = M.beg * w, e.xaxis.options.max = (M.end - 2) * w, _.setup_hook && _.setup_hook(C), 
                e.xaxis.show = !0, e.xaxis.used = !0, e.yaxis.show = !0, e.yaxis.used = !0, C.setupGrid(), 
                C.draw();
            }
        }
        function a() {
            W || (W = !0, window.setTimeout(function() {
                W = !1, i();
            }, 0));
        }
        function l() {
            M.walk();
        }
        function s() {
            M.move(M.beg, M.end);
        }
        function c(t, e) {
            C && C.clearSelection(!0), w = 1e3 * Math.ceil(t / 1e3);
            var n;
            n = void 0 !== e ? new Date().getTime() - 1e3 * e : 0;
            var i = -Math.ceil((1e3 * t + n) / w), l = -Math.floor(n / w);
            if (M && M.interval == w) M.move(i, l); else {
                M && M.close(), M = r.grid(w, i, l), D++;
                for (var s = 0; s < z.length; s++) z[s].reset();
                D--, u(), o(M).on("notify", function(t, e, n) {
                    a();
                });
            }
        }
        function u() {
            0 === D && M.sync();
        }
        function f() {
            M.close();
            for (var e = 0; e < z.length; e++) z[e].stop();
            _ = {}, z = [], T = [], C = null, o(t).empty(), o(t).data("flot_data", null);
        }
        function h() {
            0 !== t.height() && 0 !== t.width() && (C && C.resize(), a());
        }
        function d(t) {
            _ = t, C = null;
        }
        function m() {
            return _;
        }
        function p(t, e) {
            function n() {
                g && g.close();
            }
            function i() {
                T.push(e);
            }
            function l() {
                var t = T.indexOf(e);
                t >= 0 && T.splice(t, 1);
            }
            function s() {
                var t = T.indexOf(e);
                t >= 0 && (T.splice(t, 1), T.push(e));
            }
            function c() {
                n(), l(), a();
            }
            function f(e) {
                return {
                    name: e,
                    units: t.units,
                    derive: t.derive
                };
            }
            function h(t) {
                var e, n;
                if (!t) return 0;
                if (void 0 !== t.length) {
                    for (n = 0, e = 0; e < t.length; e++) n += h(t[e]);
                    return n;
                }
                return t;
            }
            function d() {
                function n() {
                    g.archives && !S.archives && (S.archives = !0, o(S).triggerHandler("changed"));
                }
                g && g.close(), g = r.metrics(w, v);
                var i = M.add(g, []), a = t.factor || 1;
                e.data = M.add(function(t, e, n) {
                    for (var o = 0; o < n; o++) t[e + o] = [ (M.beg + e + o) * w, h(i[e + o]) * a ];
                }), o(g).on("changed", n), n(), u();
            }
            function m(t, n) {
                return !(!n || n.series.data != e.data);
            }
            function p(t) {
                o(x).triggerHandler("hover", [ t ]);
            }
            var g = null, x = {
                options: e,
                move_to_front: s,
                remove: c
            };
            z.push({
                stop: n,
                reset: d,
                hover_hit: m,
                hover: p
            });
            var v = [];
            return t.direct && v.push({
                source: "direct",
                archive_source: "pcp-archive",
                metrics: t.direct.map(f),
                instances: t.instances,
                "omit-instances": t["omit-instances"],
                host: t.host
            }), t.internal && v.push({
                source: "internal",
                metrics: t.internal.map(f),
                instances: t.instances,
                "omit-instances": t["omit-instances"],
                host: t.host
            }), d(), i(), x;
        }
        function g(t, e) {
            function n() {
                h && h.close();
            }
            function i(e) {
                return {
                    name: e,
                    units: t.units,
                    derive: t.derive
                };
            }
            function a() {
                function t() {
                    h.archives && !S.archives && (S.archives = !0, o(S).triggerHandler("changed"));
                }
                h && h.close(), h = r.metrics(w, m), o(h).on("changed", t), t(), D++;
                for (var e in p) p[e].reset();
                D--, u();
            }
            function l(n, i) {
                function r() {
                    l = M.add(h, [ "a", n ]), s.data = M.add(function(t, e, n) {
                        for (var i = 0; i < n; i++) {
                            var o = (l[e + i] || 0) * c, r = (M.beg + e + i) * w, a = 0;
                            d && (a = d.data[e + i][1] ? d.data[e + i][1] : d.data[e + i][2]), Math.abs(o) > f ? (t[e + i] = [ r, a + o, a ], 
                            t[e + i - 1] && null === t[e + i - 1][1] && (t[e + i - 1][1] = t[e + i - 1][2])) : (t[e + i] = [ r, null, a ], 
                            t[e + i - 1] && null !== t[e + i - 1][1] && (t[e + i - 1][1] = t[e + i - 1][2]));
                        }
                    }), u();
                }
                function a() {
                    M.remove(l), M.remove(s.data);
                    var t = T.indexOf(s);
                    t >= 0 && T.splice(t, 1);
                }
                if (!p[n]) {
                    var l, s = o.extend({
                        selector: i
                    }, e), c = t.factor || 1, f = t.threshold || 0, d = g;
                    g = s, p[n] = s, s.reset = r, s.remove = a, r(), T.push(s);
                }
            }
            function s() {
                for (var t in p) p[t].remove();
                p = {}, g = null;
            }
            function c(t, e) {
                var n, i;
                if (!M) return !1;
                i = Math.round(t.x / w) - M.beg, i < 0 && (i = 0);
                for (n in p) {
                    var o = p[n].data;
                    if (o[i] && o[i][1] && o[i][2] <= t.y && t.y <= o[i][1]) return p[n].selector || n;
                }
                return !1;
            }
            function f(t) {
                o(d).triggerHandler("hover", [ t ]);
            }
            var h = null, d = {
                add_instance: l,
                clear_instances: s
            };
            z.push({
                stop: n,
                reset: a,
                hover_hit: c,
                hover: f
            });
            var m = [];
            t.direct && m.push({
                source: "direct",
                archive_source: "pcp-archive",
                metrics: [ i(t.direct) ],
                metrics_path_names: [ "a" ],
                instances: t.instances,
                "omit-instances": t["omit-instances"],
                host: t.host
            }), t.internal && m.push({
                source: "internal",
                metrics: [ i(t.internal) ],
                metrics_path_names: [ "a" ],
                instances: t.instances,
                "omit-instances": t["omit-instances"],
                host: t.host
            });
            var p = {}, g = null;
            return a(), d;
        }
        function x(t, e) {
            A != t ? (A && A.hover(!1), A = t, F = e, A && A.hover(F)) : F != e && (F = e, A && A.hover(F));
        }
        function v(t, e, n) {
            for (var i = null, o = !1, r = 0; r < z.length; r++) if (o = z[r].hover_hit(e, n)) {
                i = z[r];
                break;
            }
            x(i, o);
        }
        function b(t) {
            x(null, !1);
        }
        function k(t, e) {
            e && o(S).triggerHandler("zoomstart", []);
        }
        function y(t, e) {
            C.clearSelection(!0), o(S).triggerHandler("zoom", [ (e.xaxis.to - e.xaxis.from) / 1e3, e.xaxis.to / 1e3 ]);
        }
        var w, M, _ = {}, S = {}, z = [], T = [], C = null, W = !1, D = 0, A = null, F = !1;
        return o(t).on("plothover", v), o(t).on("mouseleave", b), o(t).on("plotselecting", k), 
        o(t).on("plotselected", y), o(t).data("flot_data", T), c(e, n), o.extend(S, {
            archives: !1,
            start_walking: l,
            stop_walking: s,
            refresh: a,
            reset: c,
            destroy: f,
            resize: h,
            set_options: d,
            get_options: m,
            add_metrics_sum_series: p,
            add_metrics_stacked_instances_series: g
        }), S;
    };
    var s = [ "#006bb4", "#008ff0", "#2daaff", "#69c2ff", "#a5daff", "#e1f3ff", "#00243c", "#004778" ];
    a.plot_simple_template = function() {
        return {
            colors: s,
            legend: {
                show: !1
            },
            series: {
                shadowSize: 0,
                lines: {
                    lineWidth: 2,
                    fill: .4
                }
            },
            xaxis: {
                tickLength: 0,
                mode: "time",
                tickFormatter: a.format_date_tick,
                minTickSize: [ 1, "minute" ],
                reserveSpace: !1
            },
            yaxis: {
                tickColor: "#d1d1d1",
                min: 0
            },
            points: {
                radius: 0
            },
            grid: {
                borderWidth: 1,
                aboveData: !1,
                color: "black",
                borderColor: o.color.parse("black").scale("a", .22).toString(),
                labelMargin: 0
            }
        };
    }, a.memory_ticks = function(t) {
        for (var e = Math.pow(2, Math.ceil(Math.log(t.max / 5) / Math.LN2)), n = [], i = 0; i < t.max; i += e) n.push(i);
        return n;
    };
    var c = [ l("month-name", "Jan"), l("month-name", "Feb"), l("month-name", "Mar"), l("month-name", "Apr"), l("month-name", "May"), l("month-name", "Jun"), l("month-name", "Jul"), l("month-name", "Aug"), l("month-name", "Sep"), l("month-name", "Oct"), l("month-name", "Nov"), l("month-name", "Dec") ];
    a.format_date_tick = function(t, e) {
        function n(t) {
            var e = t.toFixed();
            return 1 == e.length && (e = "0" + e), e;
        }
        var i, o, r = 0, a = 1, l = 2, s = 3, u = e.tickSize[1];
        o = "minute" == u || "hour" == u ? s : "day" == u ? l : "month" == u ? a : r;
        var f = new Date(), h = new Date(e.min);
        i = r, h.getFullYear() == f.getFullYear() && (i = a, h.getMonth() == f.getMonth() && (i = l, 
        h.getDate() == f.getDate() && (i = s))), i > o && (i = o), i == l && (i = a);
        var d = new Date(t), m = " ";
        return r >= i && r <= o && (m += d.getFullYear().toFixed() + " "), a >= i && a <= o && (m += c[d.getMonth()] + " "), 
        l >= i && l <= o && (m += d.getDate().toFixed() + " "), s >= i && s <= o && (m += n(d.getHours()) + ":" + n(d.getMinutes()) + " "), 
        m.substr(0, m.length - 1);
    }, a.bytes_tick_unit = function(t) {
        return r.format_bytes(t.max, 1024, !0)[1];
    }, a.format_bytes_tick_no_unit = function(t, e) {
        return r.format_bytes(t, a.bytes_tick_unit(e), !0)[0];
    }, a.format_bytes_tick = function(t, e) {
        return r.format_bytes(t, 1024);
    }, a.bytes_per_sec_tick_unit = function(t) {
        return r.format_bytes_per_sec(t.max, 1024, !0)[1];
    }, a.format_bytes_per_sec_tick_no_unit = function(t, e) {
        return r.format_bytes_per_sec(t, a.bytes_per_sec_tick_unit(e), !0)[0];
    }, a.format_bytes_per_sec_tick = function(t, e) {
        return r.format_bytes_per_sec(t, 1024);
    }, a.bits_per_sec_tick_unit = function(t) {
        return r.format_bits_per_sec(8 * t.max, 1e3, !0)[1];
    }, a.format_bits_per_sec_tick_no_unit = function(t, e) {
        return r.format_bits_per_sec(8 * t, a.bits_per_sec_tick_unit(e), !0)[0];
    }, a.format_bits_per_sec_tick = function(t, e) {
        return r.format_bits_per_sec(8 * t, 1e3);
    }, a.setup_plot_controls = function(t, e, n) {
        function i() {
            void 0 === d && (n.forEach(function(t) {
                t.stop_walking();
            }), d = new Date().getTime() / 1e3, c());
        }
        function a(t, e) {
            x.push(g), g = t, d = e, f();
        }
        function l() {
            var t = x.pop();
            if (void 0 === t) {
                var e;
                for (e = 0; e < p.length - 1 && !(p[e] > g); e++) ;
                t = p[e];
            }
            void 0 !== d && (d += (t - g) / 2), g = t, f();
        }
        function s(t) {
            var e;
            return t >= 31536e3 ? (e = Math.ceil(t / 31536e3), r.format(r.ngettext("$0 year", "$0 years", e), e)) : t >= 2592e3 ? (e = Math.ceil(t / 2592e3), 
            r.format(r.ngettext("$0 month", "$0 months", e), e)) : t >= 604800 ? (e = Math.ceil(t / 604800), 
            r.format(r.ngettext("$0 week", "$0 weeks", e), e)) : t >= 86400 ? (e = Math.ceil(t / 86400), 
            r.format(r.ngettext("$0 day", "$0 days", e), e)) : t >= 3600 ? (e = Math.ceil(t / 3600), 
            r.format(r.ngettext("$0 hour", "$0 hours", e), e)) : (e = Math.ceil(t / 60), r.format(r.ngettext("$0 minute", "$0 minutes", e), e));
        }
        function c() {
            e.find('[data-action="scroll-right"]').attr("disabled", void 0 === d), e.find('[data-action="zoom-out"]').attr("disabled", g >= p[p.length - 1]);
        }
        function u() {
            var e;
            t.hasClass("show-zoom-controls") && g > m ? (t.addClass("show-zoom-cursor"), e = "x") : (t.removeClass("show-zoom-cursor"), 
            e = null), n.forEach(function(t) {
                var n = t.get_options();
                n.selection && n.selection.mode == e || (n.selection = {
                    mode: e,
                    color: "#d4edfa"
                }, t.set_options(n), t.refresh());
            });
        }
        function f() {
            g < m && (d += (m - g) / 2, g = m), d >= new Date().getTime() / 1e3 - 10 && (d = void 0), 
            e.find(".dropdown-toggle span:first-child").text(s(g)), n.forEach(function(e) {
                function n() {
                    e.archives && (t.addClass("show-zoom-controls"), u());
                }
                e.stop_walking(), e.reset(g, d), e.refresh(), void 0 === d && e.start_walking(), 
                o(e).on("changed", n), n();
            }), c(), u();
        }
        function h(t) {
            void 0 === t && (t = []), n = t, n.forEach(function(t) {
                o(t).on("zoomstart", function(t) {
                    i();
                }), o(t).on("zoom", function(t, e, n) {
                    a(e, n);
                });
            }), f();
        }
        var d, m = 300, p = [ 300, 3600, 21600, 86400, 604800, 2592e3, 31536e3 ], g = 300, x = [];
        return e.find("[data-range]").click(function() {
            x = [], g = parseInt(o(this).attr("data-range"), 10), f();
        }), e.find('[data-action="goto-now"]').click(function() {
            d = void 0, f();
        }), e.find('[data-action="scroll-left"]').click(function() {
            var t = g / 10;
            void 0 === d && (d = new Date().getTime() / 1e3), d -= t, f();
        }), e.find('[data-action="scroll-right"]').click(function() {
            var t = g / 10;
            void 0 !== d && (d += t, f());
        }), e.find('[data-action="zoom-out"]').click(function() {
            l();
        }), h(n), {
            reset: h
        };
    }, a.setup_complicated_plot = function(t, e, n, o) {
        function r(t, e) {
            return t.add(function(t, n, i) {
                for (var o = 0; o < i; o++) t[n + o] = [ o, e[n + o] || 0 ];
            });
        }
        function a(t, e, n) {
            return t.add(function(t, i, o) {
                var r, a, l, s;
                for (r = 0; r < o; r++) l = 0, n && (a = n[i + r], l = a ? a[1] : 0), s = e[i + r] || 0, 
                t[i + r] = [ r, s + l, l ];
            });
        }
        var l = null;
        return n.forEach(function(t, n) {
            o.x_rh_stack_graphs ? t.data = a(e, t.row, l) : t.data = r(e, t.row), l = t.data;
        }), i(t, e, n, o);
    }, t.exports = a;
}, function(t, e) {
    !function(t) {
        t.color = {}, t.color.make = function(e, n, i, o) {
            var r = {};
            return r.r = e || 0, r.g = n || 0, r.b = i || 0, r.a = null != o ? o : 1, r.add = function(t, e) {
                for (var n = 0; n < t.length; ++n) r[t.charAt(n)] += e;
                return r.normalize();
            }, r.scale = function(t, e) {
                for (var n = 0; n < t.length; ++n) r[t.charAt(n)] *= e;
                return r.normalize();
            }, r.toString = function() {
                return r.a >= 1 ? "rgb(" + [ r.r, r.g, r.b ].join(",") + ")" : "rgba(" + [ r.r, r.g, r.b, r.a ].join(",") + ")";
            }, r.normalize = function() {
                function t(t, e, n) {
                    return e < t ? t : e > n ? n : e;
                }
                return r.r = t(0, parseInt(r.r), 255), r.g = t(0, parseInt(r.g), 255), r.b = t(0, parseInt(r.b), 255), 
                r.a = t(0, r.a, 1), r;
            }, r.clone = function() {
                return t.color.make(r.r, r.b, r.g, r.a);
            }, r.normalize();
        }, t.color.extract = function(e, n) {
            var i;
            do {
                if (i = e.css(n).toLowerCase(), "" != i && "transparent" != i) break;
                e = e.parent();
            } while (e.length && !t.nodeName(e.get(0), "body"));
            return "rgba(0, 0, 0, 0)" == i && (i = "transparent"), t.color.parse(i);
        }, t.color.parse = function(n) {
            var i, o = t.color.make;
            if (i = /rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(n)) return o(parseInt(i[1], 10), parseInt(i[2], 10), parseInt(i[3], 10));
            if (i = /rgba\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(n)) return o(parseInt(i[1], 10), parseInt(i[2], 10), parseInt(i[3], 10), parseFloat(i[4]));
            if (i = /rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(n)) return o(2.55 * parseFloat(i[1]), 2.55 * parseFloat(i[2]), 2.55 * parseFloat(i[3]));
            if (i = /rgba\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\s*\)/.exec(n)) return o(2.55 * parseFloat(i[1]), 2.55 * parseFloat(i[2]), 2.55 * parseFloat(i[3]), parseFloat(i[4]));
            if (i = /#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(n)) return o(parseInt(i[1], 16), parseInt(i[2], 16), parseInt(i[3], 16));
            if (i = /#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(n)) return o(parseInt(i[1] + i[1], 16), parseInt(i[2] + i[2], 16), parseInt(i[3] + i[3], 16));
            var r = t.trim(n).toLowerCase();
            return "transparent" == r ? o(255, 255, 255, 0) : (i = e[r] || [ 0, 0, 0 ], o(i[0], i[1], i[2]));
        };
        var e = {
            aqua: [ 0, 255, 255 ],
            azure: [ 240, 255, 255 ],
            beige: [ 245, 245, 220 ],
            black: [ 0, 0, 0 ],
            blue: [ 0, 0, 255 ],
            brown: [ 165, 42, 42 ],
            cyan: [ 0, 255, 255 ],
            darkblue: [ 0, 0, 139 ],
            darkcyan: [ 0, 139, 139 ],
            darkgrey: [ 169, 169, 169 ],
            darkgreen: [ 0, 100, 0 ],
            darkkhaki: [ 189, 183, 107 ],
            darkmagenta: [ 139, 0, 139 ],
            darkolivegreen: [ 85, 107, 47 ],
            darkorange: [ 255, 140, 0 ],
            darkorchid: [ 153, 50, 204 ],
            darkred: [ 139, 0, 0 ],
            darksalmon: [ 233, 150, 122 ],
            darkviolet: [ 148, 0, 211 ],
            fuchsia: [ 255, 0, 255 ],
            gold: [ 255, 215, 0 ],
            green: [ 0, 128, 0 ],
            indigo: [ 75, 0, 130 ],
            khaki: [ 240, 230, 140 ],
            lightblue: [ 173, 216, 230 ],
            lightcyan: [ 224, 255, 255 ],
            lightgreen: [ 144, 238, 144 ],
            lightgrey: [ 211, 211, 211 ],
            lightpink: [ 255, 182, 193 ],
            lightyellow: [ 255, 255, 224 ],
            lime: [ 0, 255, 0 ],
            magenta: [ 255, 0, 255 ],
            maroon: [ 128, 0, 0 ],
            navy: [ 0, 0, 128 ],
            olive: [ 128, 128, 0 ],
            orange: [ 255, 165, 0 ],
            pink: [ 255, 192, 203 ],
            purple: [ 128, 0, 128 ],
            violet: [ 128, 0, 128 ],
            red: [ 255, 0, 0 ],
            silver: [ 192, 192, 192 ],
            white: [ 255, 255, 255 ],
            yellow: [ 255, 255, 0 ]
        };
    }(jQuery), function(t) {
        function e(e, n) {
            var i = n.children("." + e)[0];
            if (null == i && (i = document.createElement("canvas"), i.className = e, t(i).css({
                direction: "ltr",
                position: "absolute",
                left: 0,
                top: 0
            }).appendTo(n), !i.getContext)) {
                if (!window.G_vmlCanvasManager) throw new Error("Canvas is not available. If you're using IE with a fall-back such as Excanvas, then there's either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.");
                i = window.G_vmlCanvasManager.initElement(i);
            }
            this.element = i;
            var o = this.context = i.getContext("2d"), r = window.devicePixelRatio || 1, a = o.webkitBackingStorePixelRatio || o.mozBackingStorePixelRatio || o.msBackingStorePixelRatio || o.oBackingStorePixelRatio || o.backingStorePixelRatio || 1;
            this.pixelRatio = r / a, this.resize(n.width(), n.height()), this.textContainer = null, 
            this.text = {}, this._textCache = {};
        }
        function n(n, o, r, a) {
            function l(t, e) {
                e = [ gt ].concat(e);
                for (var n = 0; n < t.length; ++n) t[n].apply(this, e);
            }
            function s() {
                for (var n = {
                    Canvas: e
                }, i = 0; i < a.length; ++i) {
                    var o = a[i];
                    o.init(gt, n), o.options && t.extend(!0, ot, o.options);
                }
            }
            function c(e) {
                t.extend(!0, ot, e), e && e.colors && (ot.colors = e.colors), null == ot.xaxis.color && (ot.xaxis.color = t.color.parse(ot.grid.color).scale("a", .22).toString()), 
                null == ot.yaxis.color && (ot.yaxis.color = t.color.parse(ot.grid.color).scale("a", .22).toString()), 
                null == ot.xaxis.tickColor && (ot.xaxis.tickColor = ot.grid.tickColor || ot.xaxis.color), 
                null == ot.yaxis.tickColor && (ot.yaxis.tickColor = ot.grid.tickColor || ot.yaxis.color), 
                null == ot.grid.borderColor && (ot.grid.borderColor = ot.grid.color), null == ot.grid.tickColor && (ot.grid.tickColor = t.color.parse(ot.grid.color).scale("a", .22).toString());
                var i, o, r, a = n.css("font-size"), s = a ? +a.replace("px", "") : 13, c = {
                    style: n.css("font-style"),
                    size: Math.round(.8 * s),
                    variant: n.css("font-variant"),
                    weight: n.css("font-weight"),
                    family: n.css("font-family")
                };
                for (r = ot.xaxes.length || 1, i = 0; i < r; ++i) o = ot.xaxes[i], o && !o.tickColor && (o.tickColor = o.color), 
                o = t.extend(!0, {}, ot.xaxis, o), ot.xaxes[i] = o, o.font && (o.font = t.extend({}, c, o.font), 
                o.font.color || (o.font.color = o.color), o.font.lineHeight || (o.font.lineHeight = Math.round(1.15 * o.font.size)));
                for (r = ot.yaxes.length || 1, i = 0; i < r; ++i) o = ot.yaxes[i], o && !o.tickColor && (o.tickColor = o.color), 
                o = t.extend(!0, {}, ot.yaxis, o), ot.yaxes[i] = o, o.font && (o.font = t.extend({}, c, o.font), 
                o.font.color || (o.font.color = o.color), o.font.lineHeight || (o.font.lineHeight = Math.round(1.15 * o.font.size)));
                for (ot.xaxis.noTicks && null == ot.xaxis.ticks && (ot.xaxis.ticks = ot.xaxis.noTicks), 
                ot.yaxis.noTicks && null == ot.yaxis.ticks && (ot.yaxis.ticks = ot.yaxis.noTicks), 
                ot.x2axis && (ot.xaxes[1] = t.extend(!0, {}, ot.xaxis, ot.x2axis), ot.xaxes[1].position = "top", 
                null == ot.x2axis.min && (ot.xaxes[1].min = null), null == ot.x2axis.max && (ot.xaxes[1].max = null)), 
                ot.y2axis && (ot.yaxes[1] = t.extend(!0, {}, ot.yaxis, ot.y2axis), ot.yaxes[1].position = "right", 
                null == ot.y2axis.min && (ot.yaxes[1].min = null), null == ot.y2axis.max && (ot.yaxes[1].max = null)), 
                ot.grid.coloredAreas && (ot.grid.markings = ot.grid.coloredAreas), ot.grid.coloredAreasColor && (ot.grid.markingsColor = ot.grid.coloredAreasColor), 
                ot.lines && t.extend(!0, ot.series.lines, ot.lines), ot.points && t.extend(!0, ot.series.points, ot.points), 
                ot.bars && t.extend(!0, ot.series.bars, ot.bars), null != ot.shadowSize && (ot.series.shadowSize = ot.shadowSize), 
                null != ot.highlightColor && (ot.series.highlightColor = ot.highlightColor), i = 0; i < ot.xaxes.length; ++i) g(ut, i + 1).options = ot.xaxes[i];
                for (i = 0; i < ot.yaxes.length; ++i) g(ft, i + 1).options = ot.yaxes[i];
                for (var u in pt) ot.hooks[u] && ot.hooks[u].length && (pt[u] = pt[u].concat(ot.hooks[u]));
                l(pt.processOptions, [ ot ]);
            }
            function u(t) {
                it = f(t), x(), v();
            }
            function f(e) {
                for (var n = [], i = 0; i < e.length; ++i) {
                    var o = t.extend(!0, {}, ot.series);
                    null != e[i].data ? (o.data = e[i].data, delete e[i].data, t.extend(!0, o, e[i]), 
                    e[i].data = o.data) : o.data = e[i], n.push(o);
                }
                return n;
            }
            function h(t, e) {
                var n = t[e + "axis"];
                return "object" == typeof n && (n = n.n), "number" != typeof n && (n = 1), n;
            }
            function d() {
                return t.grep(ut.concat(ft), function(t) {
                    return t;
                });
            }
            function m(t) {
                var e, n, i = {};
                for (e = 0; e < ut.length; ++e) n = ut[e], n && n.used && (i["x" + n.n] = n.c2p(t.left));
                for (e = 0; e < ft.length; ++e) n = ft[e], n && n.used && (i["y" + n.n] = n.c2p(t.top));
                return void 0 !== i.x1 && (i.x = i.x1), void 0 !== i.y1 && (i.y = i.y1), i;
            }
            function p(t) {
                var e, n, i, o = {};
                for (e = 0; e < ut.length; ++e) if (n = ut[e], n && n.used && (i = "x" + n.n, null == t[i] && 1 == n.n && (i = "x"), 
                null != t[i])) {
                    o.left = n.p2c(t[i]);
                    break;
                }
                for (e = 0; e < ft.length; ++e) if (n = ft[e], n && n.used && (i = "y" + n.n, null == t[i] && 1 == n.n && (i = "y"), 
                null != t[i])) {
                    o.top = n.p2c(t[i]);
                    break;
                }
                return o;
            }
            function g(e, n) {
                return e[n - 1] || (e[n - 1] = {
                    n: n,
                    direction: e == ut ? "x" : "y",
                    options: t.extend(!0, {}, e == ut ? ot.xaxis : ot.yaxis)
                }), e[n - 1];
            }
            function x() {
                var e, n = it.length, i = -1;
                for (e = 0; e < it.length; ++e) {
                    var o = it[e].color;
                    null != o && (n--, "number" == typeof o && o > i && (i = o));
                }
                n <= i && (n = i + 1);
                var r, a = [], l = ot.colors, s = l.length, c = 0;
                for (e = 0; e < n; e++) r = t.color.parse(l[e % s] || "#666"), e % s == 0 && e && (c = c >= 0 ? c < .5 ? -c - .2 : 0 : -c), 
                a[e] = r.scale("rgb", 1 + c);
                var u, f = 0;
                for (e = 0; e < it.length; ++e) {
                    if (u = it[e], null == u.color ? (u.color = a[f].toString(), ++f) : "number" == typeof u.color && (u.color = a[u.color].toString()), 
                    null == u.lines.show) {
                        var d, m = !0;
                        for (d in u) if (u[d] && u[d].show) {
                            m = !1;
                            break;
                        }
                        m && (u.lines.show = !0);
                    }
                    null == u.lines.zero && (u.lines.zero = !!u.lines.fill), u.xaxis = g(ut, h(u, "x")), 
                    u.yaxis = g(ft, h(u, "y"));
                }
            }
            function v() {
                function e(t, e, n) {
                    e < t.datamin && e != -v && (t.datamin = e), n > t.datamax && n != v && (t.datamax = n);
                }
                var n, i, o, r, a, s, c, u, f, h, m, p, g = Number.POSITIVE_INFINITY, x = Number.NEGATIVE_INFINITY, v = Number.MAX_VALUE;
                for (t.each(d(), function(t, e) {
                    e.datamin = g, e.datamax = x, e.used = !1;
                }), n = 0; n < it.length; ++n) a = it[n], a.datapoints = {
                    points: []
                }, l(pt.processRawData, [ a, a.data, a.datapoints ]);
                for (n = 0; n < it.length; ++n) {
                    if (a = it[n], m = a.data, p = a.datapoints.format, !p) {
                        if (p = [], p.push({
                            x: !0,
                            number: !0,
                            required: !0
                        }), p.push({
                            y: !0,
                            number: !0,
                            required: !0
                        }), a.bars.show || a.lines.show && a.lines.fill) {
                            var b = !!(a.bars.show && a.bars.zero || a.lines.show && a.lines.zero);
                            p.push({
                                y: !0,
                                number: !0,
                                required: !1,
                                defaultValue: 0,
                                autoscale: b
                            }), a.bars.horizontal && (delete p[p.length - 1].y, p[p.length - 1].x = !0);
                        }
                        a.datapoints.format = p;
                    }
                    if (null == a.datapoints.pointsize) {
                        a.datapoints.pointsize = p.length, c = a.datapoints.pointsize, s = a.datapoints.points;
                        var k = a.lines.show && a.lines.steps;
                        for (a.xaxis.used = a.yaxis.used = !0, i = o = 0; i < m.length; ++i, o += c) {
                            h = m[i];
                            var y = null == h;
                            if (!y) for (r = 0; r < c; ++r) u = h[r], f = p[r], f && (f.number && null != u && (u = +u, 
                            isNaN(u) ? u = null : u == 1 / 0 ? u = v : u == -(1 / 0) && (u = -v)), null == u && (f.required && (y = !0), 
                            null != f.defaultValue && (u = f.defaultValue))), s[o + r] = u;
                            if (y) for (r = 0; r < c; ++r) u = s[o + r], null != u && (f = p[r], f.autoscale !== !1 && (f.x && e(a.xaxis, u, u), 
                            f.y && e(a.yaxis, u, u))), s[o + r] = null; else if (k && o > 0 && null != s[o - c] && s[o - c] != s[o] && s[o - c + 1] != s[o + 1]) {
                                for (r = 0; r < c; ++r) s[o + c + r] = s[o + r];
                                s[o + 1] = s[o - c + 1], o += c;
                            }
                        }
                    }
                }
                for (n = 0; n < it.length; ++n) a = it[n], l(pt.processDatapoints, [ a, a.datapoints ]);
                for (n = 0; n < it.length; ++n) {
                    a = it[n], s = a.datapoints.points, c = a.datapoints.pointsize, p = a.datapoints.format;
                    var w = g, M = g, _ = x, S = x;
                    for (i = 0; i < s.length; i += c) if (null != s[i]) for (r = 0; r < c; ++r) u = s[i + r], 
                    f = p[r], f && f.autoscale !== !1 && u != v && u != -v && (f.x && (u < w && (w = u), 
                    u > _ && (_ = u)), f.y && (u < M && (M = u), u > S && (S = u)));
                    if (a.bars.show) {
                        var z;
                        switch (a.bars.align) {
                          case "left":
                            z = 0;
                            break;

                          case "right":
                            z = -a.bars.barWidth;
                            break;

                          default:
                            z = -a.bars.barWidth / 2;
                        }
                        a.bars.horizontal ? (M += z, S += z + a.bars.barWidth) : (w += z, _ += z + a.bars.barWidth);
                    }
                    e(a.xaxis, w, _), e(a.yaxis, M, S);
                }
                t.each(d(), function(t, e) {
                    e.datamin == g && (e.datamin = null), e.datamax == x && (e.datamax = null);
                });
            }
            function b() {
                n.css("padding", 0).children().filter(function() {
                    return !t(this).hasClass("flot-overlay") && !t(this).hasClass("flot-base");
                }).remove(), "static" == n.css("position") && n.css("position", "relative"), rt = new e("flot-base", n), 
                at = new e("flot-overlay", n), st = rt.context, ct = at.context, lt = t(at.element).unbind();
                var i = n.data("plot");
                i && (i.shutdown(), at.clear()), n.data("plot", gt);
            }
            function k() {
                ot.grid.hoverable && (lt.mousemove(B), lt.bind("mouseleave", $)), ot.grid.clickable && lt.click(J), 
                l(pt.bindEvents, [ lt ]);
            }
            function y() {
                vt && clearTimeout(vt), lt.unbind("mousemove", B), lt.unbind("mouseleave", $), lt.unbind("click", J), 
                l(pt.shutdown, [ lt ]);
            }
            function w(t) {
                function e(t) {
                    return t;
                }
                var n, i, o = t.options.transform || e, r = t.options.inverseTransform;
                "x" == t.direction ? (n = t.scale = dt / Math.abs(o(t.max) - o(t.min)), i = Math.min(o(t.max), o(t.min))) : (n = t.scale = mt / Math.abs(o(t.max) - o(t.min)), 
                n = -n, i = Math.max(o(t.max), o(t.min))), o == e ? t.p2c = function(t) {
                    return (t - i) * n;
                } : t.p2c = function(t) {
                    return (o(t) - i) * n;
                }, r ? t.c2p = function(t) {
                    return r(i + t / n);
                } : t.c2p = function(t) {
                    return i + t / n;
                };
            }
            function M(t) {
                for (var e = t.options, n = t.ticks || [], i = e.labelWidth || 0, o = e.labelHeight || 0, r = i || ("x" == t.direction ? Math.floor(rt.width / (n.length || 1)) : null), a = t.direction + "Axis " + t.direction + t.n + "Axis", l = "flot-" + t.direction + "-axis flot-" + t.direction + t.n + "-axis " + a, s = e.font || "flot-tick-label tickLabel", c = 0; c < n.length; ++c) {
                    var u = n[c];
                    if (u.label) {
                        var f = rt.getTextInfo(l, u.label, s, null, r);
                        i = Math.max(i, f.width), o = Math.max(o, f.height);
                    }
                }
                t.labelWidth = e.labelWidth || i, t.labelHeight = e.labelHeight || o;
            }
            function _(e) {
                var n = e.labelWidth, i = e.labelHeight, o = e.options.position, r = "x" === e.direction, a = e.options.tickLength, l = ot.grid.axisMargin, s = ot.grid.labelMargin, c = !0, u = !0, f = !0, h = !1;
                t.each(r ? ut : ft, function(t, n) {
                    n && (n.show || n.reserveSpace) && (n === e ? h = !0 : n.options.position === o && (h ? u = !1 : c = !1), 
                    h || (f = !1));
                }), u && (l = 0), null == a && (a = f ? "full" : 5), isNaN(+a) || (s += +a), r ? (i += s, 
                "bottom" == o ? (ht.bottom += i + l, e.box = {
                    top: rt.height - ht.bottom,
                    height: i
                }) : (e.box = {
                    top: ht.top + l,
                    height: i
                }, ht.top += i + l)) : (n += s, "left" == o ? (e.box = {
                    left: ht.left + l,
                    width: n
                }, ht.left += n + l) : (ht.right += n + l, e.box = {
                    left: rt.width - ht.right,
                    width: n
                })), e.position = o, e.tickLength = a, e.box.padding = s, e.innermost = c;
            }
            function S(t) {
                "x" == t.direction ? (t.box.left = ht.left - t.labelWidth / 2, t.box.width = rt.width - ht.left - ht.right + t.labelWidth) : (t.box.top = ht.top - t.labelHeight / 2, 
                t.box.height = rt.height - ht.bottom - ht.top + t.labelHeight);
            }
            function z() {
                var e, n = ot.grid.minBorderMargin;
                if (null == n) for (n = 0, e = 0; e < it.length; ++e) n = Math.max(n, 2 * (it[e].points.radius + it[e].points.lineWidth / 2));
                var i = {
                    left: n,
                    right: n,
                    top: n,
                    bottom: n
                };
                t.each(d(), function(t, e) {
                    e.reserveSpace && e.ticks && e.ticks.length && ("x" === e.direction ? (i.left = Math.max(i.left, e.labelWidth / 2), 
                    i.right = Math.max(i.right, e.labelWidth / 2)) : (i.bottom = Math.max(i.bottom, e.labelHeight / 2), 
                    i.top = Math.max(i.top, e.labelHeight / 2)));
                }), ht.left = Math.ceil(Math.max(i.left, ht.left)), ht.right = Math.ceil(Math.max(i.right, ht.right)), 
                ht.top = Math.ceil(Math.max(i.top, ht.top)), ht.bottom = Math.ceil(Math.max(i.bottom, ht.bottom));
            }
            function T() {
                var e, n = d(), i = ot.grid.show;
                for (var o in ht) {
                    var r = ot.grid.margin || 0;
                    ht[o] = "number" == typeof r ? r : r[o] || 0;
                }
                l(pt.processOffset, [ ht ]);
                for (var o in ht) "object" == typeof ot.grid.borderWidth ? ht[o] += i ? ot.grid.borderWidth[o] : 0 : ht[o] += i ? ot.grid.borderWidth : 0;
                if (t.each(n, function(t, e) {
                    var n = e.options;
                    e.show = null == n.show ? e.used : n.show, e.reserveSpace = null == n.reserveSpace ? e.show : n.reserveSpace, 
                    C(e);
                }), i) {
                    var a = t.grep(n, function(t) {
                        return t.show || t.reserveSpace;
                    });
                    for (t.each(a, function(t, e) {
                        W(e), D(e), A(e, e.ticks), M(e);
                    }), e = a.length - 1; e >= 0; --e) _(a[e]);
                    z(), t.each(a, function(t, e) {
                        S(e);
                    });
                }
                dt = rt.width - ht.left - ht.right, mt = rt.height - ht.bottom - ht.top, t.each(n, function(t, e) {
                    w(e);
                }), i && O(), j();
            }
            function C(t) {
                var e = t.options, n = +(null != e.min ? e.min : t.datamin), i = +(null != e.max ? e.max : t.datamax), o = i - n;
                if (0 == o) {
                    var r = 0 == i ? 1 : .01;
                    null == e.min && (n -= r), null != e.max && null == e.min || (i += r);
                } else {
                    var a = e.autoscaleMargin;
                    null != a && (null == e.min && (n -= o * a, n < 0 && null != t.datamin && t.datamin >= 0 && (n = 0)), 
                    null == e.max && (i += o * a, i > 0 && null != t.datamax && t.datamax <= 0 && (i = 0)));
                }
                t.min = n, t.max = i;
            }
            function W(e) {
                var n, o = e.options;
                n = "number" == typeof o.ticks && o.ticks > 0 ? o.ticks : .3 * Math.sqrt("x" == e.direction ? rt.width : rt.height);
                var r = (e.max - e.min) / n, a = -Math.floor(Math.log(r) / Math.LN10), l = o.tickDecimals;
                null != l && a > l && (a = l);
                var s, c = Math.pow(10, -a), u = r / c;
                if (u < 1.5 ? s = 1 : u < 3 ? (s = 2, u > 2.25 && (null == l || a + 1 <= l) && (s = 2.5, 
                ++a)) : s = u < 7.5 ? 5 : 10, s *= c, null != o.minTickSize && s < o.minTickSize && (s = o.minTickSize), 
                e.delta = r, e.tickDecimals = Math.max(0, null != l ? l : a), e.tickSize = o.tickSize || s, 
                "time" == o.mode && !e.tickGenerator) throw new Error("Time mode requires the flot.time plugin.");
                if (e.tickGenerator || (e.tickGenerator = function(t) {
                    var e, n = [], o = i(t.min, t.tickSize), r = 0, a = Number.NaN;
                    do e = a, a = o + r * t.tickSize, n.push(a), ++r; while (a < t.max && a != e);
                    return n;
                }, e.tickFormatter = function(t, e) {
                    var n = e.tickDecimals ? Math.pow(10, e.tickDecimals) : 1, i = "" + Math.round(t * n) / n;
                    if (null != e.tickDecimals) {
                        var o = i.indexOf("."), r = o == -1 ? 0 : i.length - o - 1;
                        if (r < e.tickDecimals) return (r ? i : i + ".") + ("" + n).substr(1, e.tickDecimals - r);
                    }
                    return i;
                }), t.isFunction(o.tickFormatter) && (e.tickFormatter = function(t, e) {
                    return "" + o.tickFormatter(t, e);
                }), null != o.alignTicksWithAxis) {
                    var f = ("x" == e.direction ? ut : ft)[o.alignTicksWithAxis - 1];
                    if (f && f.used && f != e) {
                        var h = e.tickGenerator(e);
                        if (h.length > 0 && (null == o.min && (e.min = Math.min(e.min, h[0])), null == o.max && h.length > 1 && (e.max = Math.max(e.max, h[h.length - 1]))), 
                        e.tickGenerator = function(t) {
                            var e, n, i = [];
                            for (n = 0; n < f.ticks.length; ++n) e = (f.ticks[n].v - f.min) / (f.max - f.min), 
                            e = t.min + e * (t.max - t.min), i.push(e);
                            return i;
                        }, !e.mode && null == o.tickDecimals) {
                            var d = Math.max(0, -Math.floor(Math.log(e.delta) / Math.LN10) + 1), m = e.tickGenerator(e);
                            m.length > 1 && /\..*0$/.test((m[1] - m[0]).toFixed(d)) || (e.tickDecimals = d);
                        }
                    }
                }
            }
            function D(e) {
                var n = e.options.ticks, i = [];
                null == n || "number" == typeof n && n > 0 ? i = e.tickGenerator(e) : n && (i = t.isFunction(n) ? n(e) : n);
                var o, r;
                for (e.ticks = [], o = 0; o < i.length; ++o) {
                    var a = null, l = i[o];
                    "object" == typeof l ? (r = +l[0], l.length > 1 && (a = l[1])) : r = +l, null == a && (a = e.tickFormatter(r, e)), 
                    isNaN(r) || e.ticks.push({
                        v: r,
                        label: a
                    });
                }
            }
            function A(t, e) {
                t.options.autoscaleMargin && e.length > 0 && (null == t.options.min && (t.min = Math.min(t.min, e[0].v)), 
                null == t.options.max && e.length > 1 && (t.max = Math.max(t.max, e[e.length - 1].v)));
            }
            function F() {
                rt.clear(), l(pt.drawBackground, [ st ]);
                var t = ot.grid;
                t.show && t.backgroundColor && P(), t.show && !t.aboveData && N();
                for (var e = 0; e < it.length; ++e) l(pt.drawSeries, [ st, it[e] ]), H(it[e]);
                l(pt.draw, [ st ]), t.show && t.aboveData && N(), rt.render(), Q();
            }
            function I(t, e) {
                for (var n, i, o, r, a = d(), l = 0; l < a.length; ++l) if (n = a[l], n.direction == e && (r = e + n.n + "axis", 
                t[r] || 1 != n.n || (r = e + "axis"), t[r])) {
                    i = t[r].from, o = t[r].to;
                    break;
                }
                if (t[r] || (n = "x" == e ? ut[0] : ft[0], i = t[e + "1"], o = t[e + "2"]), null != i && null != o && i > o) {
                    var s = i;
                    i = o, o = s;
                }
                return {
                    from: i,
                    to: o,
                    axis: n
                };
            }
            function P() {
                st.save(), st.translate(ht.left, ht.top), st.fillStyle = nt(ot.grid.backgroundColor, mt, 0, "rgba(255, 255, 255, 0)"), 
                st.fillRect(0, 0, dt, mt), st.restore();
            }
            function N() {
                var e, n, i, o;
                st.save(), st.translate(ht.left, ht.top);
                var r = ot.grid.markings;
                if (r) for (t.isFunction(r) && (n = gt.getAxes(), n.xmin = n.xaxis.min, n.xmax = n.xaxis.max, 
                n.ymin = n.yaxis.min, n.ymax = n.yaxis.max, r = r(n)), e = 0; e < r.length; ++e) {
                    var a = r[e], l = I(a, "x"), s = I(a, "y");
                    if (null == l.from && (l.from = l.axis.min), null == l.to && (l.to = l.axis.max), 
                    null == s.from && (s.from = s.axis.min), null == s.to && (s.to = s.axis.max), !(l.to < l.axis.min || l.from > l.axis.max || s.to < s.axis.min || s.from > s.axis.max)) {
                        l.from = Math.max(l.from, l.axis.min), l.to = Math.min(l.to, l.axis.max), s.from = Math.max(s.from, s.axis.min), 
                        s.to = Math.min(s.to, s.axis.max);
                        var c = l.from === l.to, u = s.from === s.to;
                        if (!c || !u) if (l.from = Math.floor(l.axis.p2c(l.from)), l.to = Math.floor(l.axis.p2c(l.to)), 
                        s.from = Math.floor(s.axis.p2c(s.from)), s.to = Math.floor(s.axis.p2c(s.to)), c || u) {
                            var f = a.lineWidth || ot.grid.markingsLineWidth, h = f % 2 ? .5 : 0;
                            st.beginPath(), st.strokeStyle = a.color || ot.grid.markingsColor, st.lineWidth = f, 
                            c ? (st.moveTo(l.to + h, s.from), st.lineTo(l.to + h, s.to)) : (st.moveTo(l.from, s.to + h), 
                            st.lineTo(l.to, s.to + h)), st.stroke();
                        } else st.fillStyle = a.color || ot.grid.markingsColor, st.fillRect(l.from, s.to, l.to - l.from, s.from - s.to);
                    }
                }
                n = d(), i = ot.grid.borderWidth;
                for (var m = 0; m < n.length; ++m) {
                    var p, g, x, v, b = n[m], k = b.box, y = b.tickLength;
                    if (b.show && 0 != b.ticks.length) {
                        for (st.lineWidth = 1, "x" == b.direction ? (p = 0, g = "full" == y ? "top" == b.position ? 0 : mt : k.top - ht.top + ("top" == b.position ? k.height : 0)) : (g = 0, 
                        p = "full" == y ? "left" == b.position ? 0 : dt : k.left - ht.left + ("left" == b.position ? k.width : 0)), 
                        b.innermost || (st.strokeStyle = b.options.color, st.beginPath(), x = v = 0, "x" == b.direction ? x = dt + 1 : v = mt + 1, 
                        1 == st.lineWidth && ("x" == b.direction ? g = Math.floor(g) + .5 : p = Math.floor(p) + .5), 
                        st.moveTo(p, g), st.lineTo(p + x, g + v), st.stroke()), st.strokeStyle = b.options.tickColor, 
                        st.beginPath(), e = 0; e < b.ticks.length; ++e) {
                            var w = b.ticks[e].v;
                            x = v = 0, isNaN(w) || w < b.min || w > b.max || "full" == y && ("object" == typeof i && i[b.position] > 0 || i > 0) && (w == b.min || w == b.max) || ("x" == b.direction ? (p = b.p2c(w), 
                            v = "full" == y ? -mt : y, "top" == b.position && (v = -v)) : (g = b.p2c(w), x = "full" == y ? -dt : y, 
                            "left" == b.position && (x = -x)), 1 == st.lineWidth && ("x" == b.direction ? p = Math.floor(p) + .5 : g = Math.floor(g) + .5), 
                            st.moveTo(p, g), st.lineTo(p + x, g + v));
                        }
                        st.stroke();
                    }
                }
                i && (o = ot.grid.borderColor, "object" == typeof i || "object" == typeof o ? ("object" != typeof i && (i = {
                    top: i,
                    right: i,
                    bottom: i,
                    left: i
                }), "object" != typeof o && (o = {
                    top: o,
                    right: o,
                    bottom: o,
                    left: o
                }), i.top > 0 && (st.strokeStyle = o.top, st.lineWidth = i.top, st.beginPath(), 
                st.moveTo(0 - i.left, 0 - i.top / 2), st.lineTo(dt, 0 - i.top / 2), st.stroke()), 
                i.right > 0 && (st.strokeStyle = o.right, st.lineWidth = i.right, st.beginPath(), 
                st.moveTo(dt + i.right / 2, 0 - i.top), st.lineTo(dt + i.right / 2, mt), st.stroke()), 
                i.bottom > 0 && (st.strokeStyle = o.bottom, st.lineWidth = i.bottom, st.beginPath(), 
                st.moveTo(dt + i.right, mt + i.bottom / 2), st.lineTo(0, mt + i.bottom / 2), st.stroke()), 
                i.left > 0 && (st.strokeStyle = o.left, st.lineWidth = i.left, st.beginPath(), st.moveTo(0 - i.left / 2, mt + i.bottom), 
                st.lineTo(0 - i.left / 2, 0), st.stroke())) : (st.lineWidth = i, st.strokeStyle = ot.grid.borderColor, 
                st.strokeRect(-i / 2, -i / 2, dt + i, mt + i))), st.restore();
            }
            function O() {
                t.each(d(), function(t, e) {
                    var n, i, o, r, a, l = e.box, s = e.direction + "Axis " + e.direction + e.n + "Axis", c = "flot-" + e.direction + "-axis flot-" + e.direction + e.n + "-axis " + s, u = e.options.font || "flot-tick-label tickLabel";
                    if (rt.removeText(c), e.show && 0 != e.ticks.length) for (var f = 0; f < e.ticks.length; ++f) n = e.ticks[f], 
                    !n.label || n.v < e.min || n.v > e.max || ("x" == e.direction ? (r = "center", i = ht.left + e.p2c(n.v), 
                    "bottom" == e.position ? o = l.top + l.padding : (o = l.top + l.height - l.padding, 
                    a = "bottom")) : (a = "middle", o = ht.top + e.p2c(n.v), "left" == e.position ? (i = l.left + l.width - l.padding, 
                    r = "right") : i = l.left + l.padding), rt.addText(c, i, o, n.label, u, null, null, r, a));
                });
            }
            function H(t) {
                t.lines.show && Y(t), t.bars.show && R(t), t.points.show && q(t);
            }
            function Y(t) {
                function e(t, e, n, i, o) {
                    var r = t.points, a = t.pointsize, l = null, s = null;
                    st.beginPath();
                    for (var c = a; c < r.length; c += a) {
                        var u = r[c - a], f = r[c - a + 1], h = r[c], d = r[c + 1];
                        if (null != u && null != h) {
                            if (f <= d && f < o.min) {
                                if (d < o.min) continue;
                                u = (o.min - f) / (d - f) * (h - u) + u, f = o.min;
                            } else if (d <= f && d < o.min) {
                                if (f < o.min) continue;
                                h = (o.min - f) / (d - f) * (h - u) + u, d = o.min;
                            }
                            if (f >= d && f > o.max) {
                                if (d > o.max) continue;
                                u = (o.max - f) / (d - f) * (h - u) + u, f = o.max;
                            } else if (d >= f && d > o.max) {
                                if (f > o.max) continue;
                                h = (o.max - f) / (d - f) * (h - u) + u, d = o.max;
                            }
                            if (u <= h && u < i.min) {
                                if (h < i.min) continue;
                                f = (i.min - u) / (h - u) * (d - f) + f, u = i.min;
                            } else if (h <= u && h < i.min) {
                                if (u < i.min) continue;
                                d = (i.min - u) / (h - u) * (d - f) + f, h = i.min;
                            }
                            if (u >= h && u > i.max) {
                                if (h > i.max) continue;
                                f = (i.max - u) / (h - u) * (d - f) + f, u = i.max;
                            } else if (h >= u && h > i.max) {
                                if (u > i.max) continue;
                                d = (i.max - u) / (h - u) * (d - f) + f, h = i.max;
                            }
                            u == l && f == s || st.moveTo(i.p2c(u) + e, o.p2c(f) + n), l = h, s = d, st.lineTo(i.p2c(h) + e, o.p2c(d) + n);
                        }
                    }
                    st.stroke();
                }
                function n(t, e, n) {
                    for (var i = t.points, o = t.pointsize, r = Math.min(Math.max(0, n.min), n.max), a = 0, l = !1, s = 1, c = 0, u = 0; ;) {
                        if (o > 0 && a > i.length + o) break;
                        a += o;
                        var f = i[a - o], h = i[a - o + s], d = i[a], m = i[a + s];
                        if (l) {
                            if (o > 0 && null != f && null == d) {
                                u = a, o = -o, s = 2;
                                continue;
                            }
                            if (o < 0 && a == c + o) {
                                st.fill(), l = !1, o = -o, s = 1, a = c = u + o;
                                continue;
                            }
                        }
                        if (null != f && null != d) {
                            if (f <= d && f < e.min) {
                                if (d < e.min) continue;
                                h = (e.min - f) / (d - f) * (m - h) + h, f = e.min;
                            } else if (d <= f && d < e.min) {
                                if (f < e.min) continue;
                                m = (e.min - f) / (d - f) * (m - h) + h, d = e.min;
                            }
                            if (f >= d && f > e.max) {
                                if (d > e.max) continue;
                                h = (e.max - f) / (d - f) * (m - h) + h, f = e.max;
                            } else if (d >= f && d > e.max) {
                                if (f > e.max) continue;
                                m = (e.max - f) / (d - f) * (m - h) + h, d = e.max;
                            }
                            if (l || (st.beginPath(), st.moveTo(e.p2c(f), n.p2c(r)), l = !0), h >= n.max && m >= n.max) st.lineTo(e.p2c(f), n.p2c(n.max)), 
                            st.lineTo(e.p2c(d), n.p2c(n.max)); else if (h <= n.min && m <= n.min) st.lineTo(e.p2c(f), n.p2c(n.min)), 
                            st.lineTo(e.p2c(d), n.p2c(n.min)); else {
                                var p = f, g = d;
                                h <= m && h < n.min && m >= n.min ? (f = (n.min - h) / (m - h) * (d - f) + f, h = n.min) : m <= h && m < n.min && h >= n.min && (d = (n.min - h) / (m - h) * (d - f) + f, 
                                m = n.min), h >= m && h > n.max && m <= n.max ? (f = (n.max - h) / (m - h) * (d - f) + f, 
                                h = n.max) : m >= h && m > n.max && h <= n.max && (d = (n.max - h) / (m - h) * (d - f) + f, 
                                m = n.max), f != p && st.lineTo(e.p2c(p), n.p2c(h)), st.lineTo(e.p2c(f), n.p2c(h)), 
                                st.lineTo(e.p2c(d), n.p2c(m)), d != g && (st.lineTo(e.p2c(d), n.p2c(m)), st.lineTo(e.p2c(g), n.p2c(m)));
                            }
                        }
                    }
                }
                st.save(), st.translate(ht.left, ht.top), st.lineJoin = "round";
                var i = t.lines.lineWidth, o = t.shadowSize;
                if (i > 0 && o > 0) {
                    st.lineWidth = o, st.strokeStyle = "rgba(0,0,0,0.1)";
                    var r = Math.PI / 18;
                    e(t.datapoints, Math.sin(r) * (i / 2 + o / 2), Math.cos(r) * (i / 2 + o / 2), t.xaxis, t.yaxis), 
                    st.lineWidth = o / 2, e(t.datapoints, Math.sin(r) * (i / 2 + o / 4), Math.cos(r) * (i / 2 + o / 4), t.xaxis, t.yaxis);
                }
                st.lineWidth = i, st.strokeStyle = t.color;
                var a = E(t.lines, t.color, 0, mt);
                a && (st.fillStyle = a, n(t.datapoints, t.xaxis, t.yaxis)), i > 0 && e(t.datapoints, 0, 0, t.xaxis, t.yaxis), 
                st.restore();
            }
            function q(t) {
                function e(t, e, n, i, o, r, a, l) {
                    for (var s = t.points, c = t.pointsize, u = 0; u < s.length; u += c) {
                        var f = s[u], h = s[u + 1];
                        null == f || f < r.min || f > r.max || h < a.min || h > a.max || (st.beginPath(), 
                        f = r.p2c(f), h = a.p2c(h) + i, "circle" == l ? st.arc(f, h, e, 0, o ? Math.PI : 2 * Math.PI, !1) : l(st, f, h, e, o), 
                        st.closePath(), n && (st.fillStyle = n, st.fill()), st.stroke());
                    }
                }
                st.save(), st.translate(ht.left, ht.top);
                var n = t.points.lineWidth, i = t.shadowSize, o = t.points.radius, r = t.points.symbol;
                if (0 == n && (n = 1e-4), n > 0 && i > 0) {
                    var a = i / 2;
                    st.lineWidth = a, st.strokeStyle = "rgba(0,0,0,0.1)", e(t.datapoints, o, null, a + a / 2, !0, t.xaxis, t.yaxis, r), 
                    st.strokeStyle = "rgba(0,0,0,0.2)", e(t.datapoints, o, null, a / 2, !0, t.xaxis, t.yaxis, r);
                }
                st.lineWidth = n, st.strokeStyle = t.color, e(t.datapoints, o, E(t.points, t.color), 0, !1, t.xaxis, t.yaxis, r), 
                st.restore();
            }
            function L(t, e, n, i, o, r, a, l, s, c, u) {
                var f, h, d, m, p, g, x, v, b;
                c ? (v = g = x = !0, p = !1, f = n, h = t, m = e + i, d = e + o, h < f && (b = h, 
                h = f, f = b, p = !0, g = !1)) : (p = g = x = !0, v = !1, f = t + i, h = t + o, 
                d = n, m = e, m < d && (b = m, m = d, d = b, v = !0, x = !1)), h < a.min || f > a.max || m < l.min || d > l.max || (f < a.min && (f = a.min, 
                p = !1), h > a.max && (h = a.max, g = !1), d < l.min && (d = l.min, v = !1), m > l.max && (m = l.max, 
                x = !1), f = a.p2c(f), d = l.p2c(d), h = a.p2c(h), m = l.p2c(m), r && (s.fillStyle = r(d, m), 
                s.fillRect(f, m, h - f, d - m)), u > 0 && (p || g || x || v) && (s.beginPath(), 
                s.moveTo(f, d), p ? s.lineTo(f, m) : s.moveTo(f, m), x ? s.lineTo(h, m) : s.moveTo(h, m), 
                g ? s.lineTo(h, d) : s.moveTo(h, d), v ? s.lineTo(f, d) : s.moveTo(f, d), s.stroke()));
            }
            function R(t) {
                function e(e, n, i, o, r, a) {
                    for (var l = e.points, s = e.pointsize, c = 0; c < l.length; c += s) null != l[c] && L(l[c], l[c + 1], l[c + 2], n, i, o, r, a, st, t.bars.horizontal, t.bars.lineWidth);
                }
                st.save(), st.translate(ht.left, ht.top), st.lineWidth = t.bars.lineWidth, st.strokeStyle = t.color;
                var n;
                switch (t.bars.align) {
                  case "left":
                    n = 0;
                    break;

                  case "right":
                    n = -t.bars.barWidth;
                    break;

                  default:
                    n = -t.bars.barWidth / 2;
                }
                var i = t.bars.fill ? function(e, n) {
                    return E(t.bars, t.color, e, n);
                } : null;
                e(t.datapoints, n, n + t.bars.barWidth, i, t.xaxis, t.yaxis), st.restore();
            }
            function E(e, n, i, o) {
                var r = e.fill;
                if (!r) return null;
                if (e.fillColor) return nt(e.fillColor, i, o, n);
                var a = t.color.parse(n);
                return a.a = "number" == typeof r ? r : .4, a.normalize(), a.toString();
            }
            function j() {
                if (null != ot.legend.container ? t(ot.legend.container).html("") : n.find(".legend").remove(), 
                ot.legend.show) {
                    for (var e, i, o = [], r = [], a = !1, l = ot.legend.labelFormatter, s = 0; s < it.length; ++s) e = it[s], 
                    e.label && (i = l ? l(e.label, e) : e.label, i && r.push({
                        label: i,
                        color: e.color
                    }));
                    if (ot.legend.sorted) if (t.isFunction(ot.legend.sorted)) r.sort(ot.legend.sorted); else if ("reverse" == ot.legend.sorted) r.reverse(); else {
                        var c = "descending" != ot.legend.sorted;
                        r.sort(function(t, e) {
                            return t.label == e.label ? 0 : t.label < e.label != c ? 1 : -1;
                        });
                    }
                    for (var s = 0; s < r.length; ++s) {
                        var u = r[s];
                        s % ot.legend.noColumns == 0 && (a && o.push("</tr>"), o.push("<tr>"), a = !0), 
                        o.push('<td class="legendColorBox"><div style="border:1px solid ' + ot.legend.labelBoxBorderColor + ';padding:1px"><div style="width:4px;height:0;border:5px solid ' + u.color + ';overflow:hidden"></div></div></td><td class="legendLabel">' + u.label + "</td>");
                    }
                    if (a && o.push("</tr>"), 0 != o.length) {
                        var f = '<table style="font-size:smaller;color:' + ot.grid.color + '">' + o.join("") + "</table>";
                        if (null != ot.legend.container) t(ot.legend.container).html(f); else {
                            var h = "", d = ot.legend.position, m = ot.legend.margin;
                            null == m[0] && (m = [ m, m ]), "n" == d.charAt(0) ? h += "top:" + (m[1] + ht.top) + "px;" : "s" == d.charAt(0) && (h += "bottom:" + (m[1] + ht.bottom) + "px;"), 
                            "e" == d.charAt(1) ? h += "right:" + (m[0] + ht.right) + "px;" : "w" == d.charAt(1) && (h += "left:" + (m[0] + ht.left) + "px;");
                            var p = t('<div class="legend">' + f.replace('style="', 'style="position:absolute;' + h + ";") + "</div>").appendTo(n);
                            if (0 != ot.legend.backgroundOpacity) {
                                var g = ot.legend.backgroundColor;
                                null == g && (g = ot.grid.backgroundColor, g = g && "string" == typeof g ? t.color.parse(g) : t.color.extract(p, "background-color"), 
                                g.a = 1, g = g.toString());
                                var x = p.children();
                                t('<div style="position:absolute;width:' + x.width() + "px;height:" + x.height() + "px;" + h + "background-color:" + g + ';"> </div>').prependTo(p).css("opacity", ot.legend.backgroundOpacity);
                            }
                        }
                    }
                }
            }
            function G(t, e, n) {
                var i, o, r, a = ot.grid.mouseActiveRadius, l = a * a + 1, s = null;
                for (i = it.length - 1; i >= 0; --i) if (n(it[i])) {
                    var c = it[i], u = c.xaxis, f = c.yaxis, h = c.datapoints.points, d = u.c2p(t), m = f.c2p(e), p = a / u.scale, g = a / f.scale;
                    if (r = c.datapoints.pointsize, u.options.inverseTransform && (p = Number.MAX_VALUE), 
                    f.options.inverseTransform && (g = Number.MAX_VALUE), c.lines.show || c.points.show) for (o = 0; o < h.length; o += r) {
                        var x = h[o], v = h[o + 1];
                        if (null != x && !(x - d > p || x - d < -p || v - m > g || v - m < -g)) {
                            var b = Math.abs(u.p2c(x) - t), k = Math.abs(f.p2c(v) - e), y = b * b + k * k;
                            y < l && (l = y, s = [ i, o / r ]);
                        }
                    }
                    if (c.bars.show && !s) {
                        var w, M;
                        switch (c.bars.align) {
                          case "left":
                            w = 0;
                            break;

                          case "right":
                            w = -c.bars.barWidth;
                            break;

                          default:
                            w = -c.bars.barWidth / 2;
                        }
                        for (M = w + c.bars.barWidth, o = 0; o < h.length; o += r) {
                            var x = h[o], v = h[o + 1], _ = h[o + 2];
                            null != x && (it[i].bars.horizontal ? d <= Math.max(_, x) && d >= Math.min(_, x) && m >= v + w && m <= v + M : d >= x + w && d <= x + M && m >= Math.min(_, v) && m <= Math.max(_, v)) && (s = [ i, o / r ]);
                        }
                    }
                }
                return s ? (i = s[0], o = s[1], r = it[i].datapoints.pointsize, {
                    datapoint: it[i].datapoints.points.slice(o * r, (o + 1) * r),
                    dataIndex: o,
                    series: it[i],
                    seriesIndex: i
                }) : null;
            }
            function B(t) {
                ot.grid.hoverable && X("plothover", t, function(t) {
                    return 0 != t.hoverable;
                });
            }
            function $(t) {
                ot.grid.hoverable && X("plothover", t, function(t) {
                    return !1;
                });
            }
            function J(t) {
                X("plotclick", t, function(t) {
                    return 0 != t.clickable;
                });
            }
            function X(t, e, i) {
                var o = lt.offset(), r = e.pageX - o.left - ht.left, a = e.pageY - o.top - ht.top, l = m({
                    left: r,
                    top: a
                });
                l.pageX = e.pageX, l.pageY = e.pageY;
                var s = G(r, a, i);
                if (s && (s.pageX = parseInt(s.series.xaxis.p2c(s.datapoint[0]) + o.left + ht.left, 10), 
                s.pageY = parseInt(s.series.yaxis.p2c(s.datapoint[1]) + o.top + ht.top, 10)), ot.grid.autoHighlight) {
                    for (var c = 0; c < xt.length; ++c) {
                        var u = xt[c];
                        u.auto != t || s && u.series == s.series && u.point[0] == s.datapoint[0] && u.point[1] == s.datapoint[1] || K(u.series, u.point);
                    }
                    s && U(s.series, s.datapoint, t);
                }
                n.trigger(t, [ l, s ]);
            }
            function Q() {
                var t = ot.interaction.redrawOverlayInterval;
                return t == -1 ? void V() : void (vt || (vt = setTimeout(V, t)));
            }
            function V() {
                vt = null, ct.save(), at.clear(), ct.translate(ht.left, ht.top);
                var t, e;
                for (t = 0; t < xt.length; ++t) e = xt[t], e.series.bars.show ? et(e.series, e.point) : tt(e.series, e.point);
                ct.restore(), l(pt.drawOverlay, [ ct ]);
            }
            function U(t, e, n) {
                if ("number" == typeof t && (t = it[t]), "number" == typeof e) {
                    var i = t.datapoints.pointsize;
                    e = t.datapoints.points.slice(i * e, i * (e + 1));
                }
                var o = Z(t, e);
                o == -1 ? (xt.push({
                    series: t,
                    point: e,
                    auto: n
                }), Q()) : n || (xt[o].auto = !1);
            }
            function K(t, e) {
                if (null == t && null == e) return xt = [], void Q();
                if ("number" == typeof t && (t = it[t]), "number" == typeof e) {
                    var n = t.datapoints.pointsize;
                    e = t.datapoints.points.slice(n * e, n * (e + 1));
                }
                var i = Z(t, e);
                i != -1 && (xt.splice(i, 1), Q());
            }
            function Z(t, e) {
                for (var n = 0; n < xt.length; ++n) {
                    var i = xt[n];
                    if (i.series == t && i.point[0] == e[0] && i.point[1] == e[1]) return n;
                }
                return -1;
            }
            function tt(e, n) {
                var i = n[0], o = n[1], r = e.xaxis, a = e.yaxis, l = "string" == typeof e.highlightColor ? e.highlightColor : t.color.parse(e.color).scale("a", .5).toString();
                if (!(i < r.min || i > r.max || o < a.min || o > a.max)) {
                    var s = e.points.radius + e.points.lineWidth / 2;
                    ct.lineWidth = s, ct.strokeStyle = l;
                    var c = 1.5 * s;
                    i = r.p2c(i), o = a.p2c(o), ct.beginPath(), "circle" == e.points.symbol ? ct.arc(i, o, c, 0, 2 * Math.PI, !1) : e.points.symbol(ct, i, o, c, !1), 
                    ct.closePath(), ct.stroke();
                }
            }
            function et(e, n) {
                var i, o = "string" == typeof e.highlightColor ? e.highlightColor : t.color.parse(e.color).scale("a", .5).toString(), r = o;
                switch (e.bars.align) {
                  case "left":
                    i = 0;
                    break;

                  case "right":
                    i = -e.bars.barWidth;
                    break;

                  default:
                    i = -e.bars.barWidth / 2;
                }
                ct.lineWidth = e.bars.lineWidth, ct.strokeStyle = o, L(n[0], n[1], n[2] || 0, i, i + e.bars.barWidth, function() {
                    return r;
                }, e.xaxis, e.yaxis, ct, e.bars.horizontal, e.bars.lineWidth);
            }
            function nt(e, n, i, o) {
                if ("string" == typeof e) return e;
                for (var r = st.createLinearGradient(0, i, 0, n), a = 0, l = e.colors.length; a < l; ++a) {
                    var s = e.colors[a];
                    if ("string" != typeof s) {
                        var c = t.color.parse(o);
                        null != s.brightness && (c = c.scale("rgb", s.brightness)), null != s.opacity && (c.a *= s.opacity), 
                        s = c.toString();
                    }
                    r.addColorStop(a / (l - 1), s);
                }
                return r;
            }
            var it = [], ot = {
                colors: [ "#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed" ],
                legend: {
                    show: !0,
                    noColumns: 1,
                    labelFormatter: null,
                    labelBoxBorderColor: "#ccc",
                    container: null,
                    position: "ne",
                    margin: 5,
                    backgroundColor: null,
                    backgroundOpacity: .85,
                    sorted: null
                },
                xaxis: {
                    show: null,
                    position: "bottom",
                    mode: null,
                    font: null,
                    color: null,
                    tickColor: null,
                    transform: null,
                    inverseTransform: null,
                    min: null,
                    max: null,
                    autoscaleMargin: null,
                    ticks: null,
                    tickFormatter: null,
                    labelWidth: null,
                    labelHeight: null,
                    reserveSpace: null,
                    tickLength: null,
                    alignTicksWithAxis: null,
                    tickDecimals: null,
                    tickSize: null,
                    minTickSize: null
                },
                yaxis: {
                    autoscaleMargin: .02,
                    position: "left"
                },
                xaxes: [],
                yaxes: [],
                series: {
                    points: {
                        show: !1,
                        radius: 3,
                        lineWidth: 2,
                        fill: !0,
                        fillColor: "#ffffff",
                        symbol: "circle"
                    },
                    lines: {
                        lineWidth: 2,
                        fill: !1,
                        fillColor: null,
                        steps: !1
                    },
                    bars: {
                        show: !1,
                        lineWidth: 2,
                        barWidth: 1,
                        fill: !0,
                        fillColor: null,
                        align: "left",
                        horizontal: !1,
                        zero: !0
                    },
                    shadowSize: 3,
                    highlightColor: null
                },
                grid: {
                    show: !0,
                    aboveData: !1,
                    color: "#545454",
                    backgroundColor: null,
                    borderColor: null,
                    tickColor: null,
                    margin: 0,
                    labelMargin: 5,
                    axisMargin: 8,
                    borderWidth: 2,
                    minBorderMargin: null,
                    markings: null,
                    markingsColor: "#f4f4f4",
                    markingsLineWidth: 2,
                    clickable: !1,
                    hoverable: !1,
                    autoHighlight: !0,
                    mouseActiveRadius: 10
                },
                interaction: {
                    redrawOverlayInterval: 1e3 / 60
                },
                hooks: {}
            }, rt = null, at = null, lt = null, st = null, ct = null, ut = [], ft = [], ht = {
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }, dt = 0, mt = 0, pt = {
                processOptions: [],
                processRawData: [],
                processDatapoints: [],
                processOffset: [],
                drawBackground: [],
                drawSeries: [],
                draw: [],
                bindEvents: [],
                drawOverlay: [],
                shutdown: []
            }, gt = this;
            gt.setData = u, gt.setupGrid = T, gt.draw = F, gt.getPlaceholder = function() {
                return n;
            }, gt.getCanvas = function() {
                return rt.element;
            }, gt.getPlotOffset = function() {
                return ht;
            }, gt.width = function() {
                return dt;
            }, gt.height = function() {
                return mt;
            }, gt.offset = function() {
                var t = lt.offset();
                return t.left += ht.left, t.top += ht.top, t;
            }, gt.getData = function() {
                return it;
            }, gt.getAxes = function() {
                var e = {};
                return t.each(ut.concat(ft), function(t, n) {
                    n && (e[n.direction + (1 != n.n ? n.n : "") + "axis"] = n);
                }), e;
            }, gt.getXAxes = function() {
                return ut;
            }, gt.getYAxes = function() {
                return ft;
            }, gt.c2p = m, gt.p2c = p, gt.getOptions = function() {
                return ot;
            }, gt.highlight = U, gt.unhighlight = K, gt.triggerRedrawOverlay = Q, gt.pointOffset = function(t) {
                return {
                    left: parseInt(ut[h(t, "x") - 1].p2c(+t.x) + ht.left, 10),
                    top: parseInt(ft[h(t, "y") - 1].p2c(+t.y) + ht.top, 10)
                };
            }, gt.shutdown = y, gt.destroy = function() {
                y(), n.removeData("plot").empty(), it = [], ot = null, rt = null, at = null, lt = null, 
                st = null, ct = null, ut = [], ft = [], pt = null, xt = [], gt = null;
            }, gt.resize = function() {
                var t = n.width(), e = n.height();
                rt.resize(t, e), at.resize(t, e);
            }, gt.hooks = pt, s(gt), c(r), b(), u(o), T(), F(), k();
            var xt = [], vt = null;
        }
        function i(t, e) {
            return e * Math.floor(t / e);
        }
        var o = Object.prototype.hasOwnProperty;
        t.fn.detach || (t.fn.detach = function() {
            return this.each(function() {
                this.parentNode && this.parentNode.removeChild(this);
            });
        }), e.prototype.resize = function(t, e) {
            if (t <= 0 || e <= 0) throw new Error("Invalid dimensions for plot, width = " + t + ", height = " + e);
            var n = this.element, i = this.context, o = this.pixelRatio;
            this.width != t && (n.width = t * o, n.style.width = t + "px", this.width = t), 
            this.height != e && (n.height = e * o, n.style.height = e + "px", this.height = e), 
            i.restore(), i.save(), i.scale(o, o);
        }, e.prototype.clear = function() {
            this.context.clearRect(0, 0, this.width, this.height);
        }, e.prototype.render = function() {
            var t = this._textCache;
            for (var e in t) if (o.call(t, e)) {
                var n = this.getTextLayer(e), i = t[e];
                n.hide();
                for (var r in i) if (o.call(i, r)) {
                    var a = i[r];
                    for (var l in a) if (o.call(a, l)) {
                        for (var s, c = a[l].positions, u = 0; s = c[u]; u++) s.active ? s.rendered || (n.append(s.element), 
                        s.rendered = !0) : (c.splice(u--, 1), s.rendered && s.element.detach());
                        0 == c.length && delete a[l];
                    }
                }
                n.show();
            }
        }, e.prototype.getTextLayer = function(e) {
            var n = this.text[e];
            return null == n && (null == this.textContainer && (this.textContainer = t("<div class='flot-text'></div>").css({
                position: "absolute",
                top: 0,
                left: 0,
                bottom: 0,
                right: 0,
                "font-size": "smaller",
                color: "#545454"
            }).insertAfter(this.element)), n = this.text[e] = t("<div></div>").addClass(e).css({
                position: "absolute",
                top: 0,
                left: 0,
                bottom: 0,
                right: 0
            }).appendTo(this.textContainer)), n;
        }, e.prototype.getTextInfo = function(e, n, i, o, r) {
            var a, l, s, c;
            if (n = "" + n, a = "object" == typeof i ? i.style + " " + i.variant + " " + i.weight + " " + i.size + "px/" + i.lineHeight + "px " + i.family : i, 
            l = this._textCache[e], null == l && (l = this._textCache[e] = {}), s = l[a], null == s && (s = l[a] = {}), 
            c = s[n], null == c) {
                var u = t("<div></div>").html(n).css({
                    position: "absolute",
                    "max-width": r,
                    top: -9999
                }).appendTo(this.getTextLayer(e));
                "object" == typeof i ? u.css({
                    font: a,
                    color: i.color
                }) : "string" == typeof i && u.addClass(i), c = s[n] = {
                    width: u.outerWidth(!0),
                    height: u.outerHeight(!0),
                    element: u,
                    positions: []
                }, u.detach();
            }
            return c;
        }, e.prototype.addText = function(t, e, n, i, o, r, a, l, s) {
            var c = this.getTextInfo(t, i, o, r, a), u = c.positions;
            "center" == l ? e -= c.width / 2 : "right" == l && (e -= c.width), "middle" == s ? n -= c.height / 2 : "bottom" == s && (n -= c.height);
            for (var f, h = 0; f = u[h]; h++) if (f.x == e && f.y == n) return void (f.active = !0);
            f = {
                active: !0,
                rendered: !1,
                element: u.length ? c.element.clone() : c.element,
                x: e,
                y: n
            }, u.push(f), f.element.css({
                top: Math.round(n),
                left: Math.round(e),
                "text-align": l
            });
        }, e.prototype.removeText = function(t, e, n, i, r, a) {
            if (null == i) {
                var l = this._textCache[t];
                if (null != l) for (var s in l) if (o.call(l, s)) {
                    var c = l[s];
                    for (var u in c) if (o.call(c, u)) for (var f, h = c[u].positions, d = 0; f = h[d]; d++) f.active = !1;
                }
            } else for (var f, h = this.getTextInfo(t, i, r, a).positions, d = 0; f = h[d]; d++) f.x == e && f.y == n && (f.active = !1);
        }, t.plot = function(e, i, o) {
            var r = new n(t(e), i, o, t.plot.plugins);
            return r;
        }, t.plot.version = "0.8.3", t.plot.plugins = [], t.fn.plot = function(e, n) {
            return this.each(function() {
                t.plot(this, e, n);
            });
        };
    }(jQuery);
}, function(t, e) {
    !function(t) {
        function e(e) {
            function n(t) {
                m.active && (c(t), e.getPlaceholder().trigger("plotselecting", [ r() ]));
            }
            function i(e) {
                1 == e.which && (document.body.focus(), void 0 !== document.onselectstart && null == p.onselectstart && (p.onselectstart = document.onselectstart, 
                document.onselectstart = function() {
                    return !1;
                }), void 0 !== document.ondrag && null == p.ondrag && (p.ondrag = document.ondrag, 
                document.ondrag = function() {
                    return !1;
                }), s(m.first, e), m.active = !0, g = function(t) {
                    o(t);
                }, t(document).one("mouseup", g));
            }
            function o(t) {
                return g = null, void 0 !== document.onselectstart && (document.onselectstart = p.onselectstart), 
                void 0 !== document.ondrag && (document.ondrag = p.ondrag), m.active = !1, c(t), 
                d() ? a() : (e.getPlaceholder().trigger("plotunselected", []), e.getPlaceholder().trigger("plotselecting", [ null ])), 
                !1;
            }
            function r() {
                if (!d()) return null;
                if (!m.show) return null;
                var n = {}, i = m.first, o = m.second;
                return t.each(e.getAxes(), function(t, e) {
                    if (e.used) {
                        var r = e.c2p(i[e.direction]), a = e.c2p(o[e.direction]);
                        n[t] = {
                            from: Math.min(r, a),
                            to: Math.max(r, a)
                        };
                    }
                }), n;
            }
            function a() {
                var t = r();
                e.getPlaceholder().trigger("plotselected", [ t ]), t.xaxis && t.yaxis && e.getPlaceholder().trigger("selected", [ {
                    x1: t.xaxis.from,
                    y1: t.yaxis.from,
                    x2: t.xaxis.to,
                    y2: t.yaxis.to
                } ]);
            }
            function l(t, e, n) {
                return e < t ? t : e > n ? n : e;
            }
            function s(t, n) {
                var i = e.getOptions(), o = e.getPlaceholder().offset(), r = e.getPlotOffset();
                t.x = l(0, n.pageX - o.left - r.left, e.width()), t.y = l(0, n.pageY - o.top - r.top, e.height()), 
                "y" == i.selection.mode && (t.x = t == m.first ? 0 : e.width()), "x" == i.selection.mode && (t.y = t == m.first ? 0 : e.height());
            }
            function c(t) {
                null != t.pageX && (s(m.second, t), d() ? (m.show = !0, e.triggerRedrawOverlay()) : u(!0));
            }
            function u(t) {
                m.show && (m.show = !1, e.triggerRedrawOverlay(), t || e.getPlaceholder().trigger("plotunselected", []));
            }
            function f(t, n) {
                var i, o, r, a, l = e.getAxes();
                for (var s in l) if (i = l[s], i.direction == n && (a = n + i.n + "axis", t[a] || 1 != i.n || (a = n + "axis"), 
                t[a])) {
                    o = t[a].from, r = t[a].to;
                    break;
                }
                if (t[a] || (i = "x" == n ? e.getXAxes()[0] : e.getYAxes()[0], o = t[n + "1"], r = t[n + "2"]), 
                null != o && null != r && o > r) {
                    var c = o;
                    o = r, r = c;
                }
                return {
                    from: o,
                    to: r,
                    axis: i
                };
            }
            function h(t, n) {
                var i, o = e.getOptions();
                "y" == o.selection.mode ? (m.first.x = 0, m.second.x = e.width()) : (i = f(t, "x"), 
                m.first.x = i.axis.p2c(i.from), m.second.x = i.axis.p2c(i.to)), "x" == o.selection.mode ? (m.first.y = 0, 
                m.second.y = e.height()) : (i = f(t, "y"), m.first.y = i.axis.p2c(i.from), m.second.y = i.axis.p2c(i.to)), 
                m.show = !0, e.triggerRedrawOverlay(), !n && d() && a();
            }
            function d() {
                var t = e.getOptions().selection.minSize;
                return Math.abs(m.second.x - m.first.x) >= t && Math.abs(m.second.y - m.first.y) >= t;
            }
            var m = {
                first: {
                    x: -1,
                    y: -1
                },
                second: {
                    x: -1,
                    y: -1
                },
                show: !1,
                active: !1
            }, p = {}, g = null;
            e.clearSelection = u, e.setSelection = h, e.getSelection = r, e.hooks.bindEvents.push(function(t, e) {
                var o = t.getOptions();
                null != o.selection.mode && (e.mousemove(n), e.mousedown(i));
            }), e.hooks.drawOverlay.push(function(e, n) {
                if (m.show && d()) {
                    var i = e.getPlotOffset(), o = e.getOptions();
                    n.save(), n.translate(i.left, i.top);
                    var r = t.color.parse(o.selection.color);
                    n.strokeStyle = r.scale("a", .8).toString(), n.lineWidth = 1, n.lineJoin = o.selection.shape, 
                    n.fillStyle = r.scale("a", .4).toString();
                    var a = Math.min(m.first.x, m.second.x) + .5, l = Math.min(m.first.y, m.second.y) + .5, s = Math.abs(m.second.x - m.first.x) - 1, c = Math.abs(m.second.y - m.first.y) - 1;
                    n.fillRect(a, l, s, c), n.strokeRect(a, l, s, c), n.restore();
                }
            }), e.hooks.shutdown.push(function(e, o) {
                o.unbind("mousemove", n), o.unbind("mousedown", i), g && t(document).unbind("mouseup", g);
            });
        }
        t.plot.plugins.push({
            init: e,
            options: {
                selection: {
                    mode: null,
                    color: "#e8cfac",
                    shape: "round",
                    minSize: 5
                }
            },
            name: "selection",
            version: "1.1"
        });
    }(jQuery);
}, function(t, e) {
    !function(t) {
        function e(t, e) {
            return e * Math.floor(t / e);
        }
        function n(t, e, n, i) {
            if ("function" == typeof t.strftime) return t.strftime(e);
            var o = function(t, e) {
                return t = "" + t, e = "" + (null == e ? "0" : e), 1 == t.length ? e + t : t;
            }, r = [], a = !1, l = t.getHours(), s = l < 12;
            null == n && (n = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]), 
            null == i && (i = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ]);
            var c;
            c = l > 12 ? l - 12 : 0 == l ? 12 : l;
            for (var u = 0; u < e.length; ++u) {
                var f = e.charAt(u);
                if (a) {
                    switch (f) {
                      case "a":
                        f = "" + i[t.getDay()];
                        break;

                      case "b":
                        f = "" + n[t.getMonth()];
                        break;

                      case "d":
                        f = o(t.getDate());
                        break;

                      case "e":
                        f = o(t.getDate(), " ");
                        break;

                      case "h":
                      case "H":
                        f = o(l);
                        break;

                      case "I":
                        f = o(c);
                        break;

                      case "l":
                        f = o(c, " ");
                        break;

                      case "m":
                        f = o(t.getMonth() + 1);
                        break;

                      case "M":
                        f = o(t.getMinutes());
                        break;

                      case "q":
                        f = "" + (Math.floor(t.getMonth() / 3) + 1);
                        break;

                      case "S":
                        f = o(t.getSeconds());
                        break;

                      case "y":
                        f = o(t.getFullYear() % 100);
                        break;

                      case "Y":
                        f = "" + t.getFullYear();
                        break;

                      case "p":
                        f = s ? "am" : "pm";
                        break;

                      case "P":
                        f = s ? "AM" : "PM";
                        break;

                      case "w":
                        f = "" + t.getDay();
                    }
                    r.push(f), a = !1;
                } else "%" == f ? a = !0 : r.push(f);
            }
            return r.join("");
        }
        function i(t) {
            function e(t, e, n, i) {
                t[e] = function() {
                    return n[i].apply(n, arguments);
                };
            }
            var n = {
                date: t
            };
            void 0 != t.strftime && e(n, "strftime", t, "strftime"), e(n, "getTime", t, "getTime"), 
            e(n, "setTime", t, "setTime");
            for (var i = [ "Date", "Day", "FullYear", "Hours", "Milliseconds", "Minutes", "Month", "Seconds" ], o = 0; o < i.length; o++) e(n, "get" + i[o], t, "getUTC" + i[o]), 
            e(n, "set" + i[o], t, "setUTC" + i[o]);
            return n;
        }
        function o(t, e) {
            if ("browser" == e.timezone) return new Date(t);
            if (e.timezone && "utc" != e.timezone) {
                if ("undefined" != typeof timezoneJS && "undefined" != typeof timezoneJS.Date) {
                    var n = new timezoneJS.Date();
                    return n.setTimezone(e.timezone), n.setTime(t), n;
                }
                return i(new Date(t));
            }
            return i(new Date(t));
        }
        function r(i) {
            i.hooks.processOptions.push(function(i, r) {
                t.each(i.getAxes(), function(t, i) {
                    var r = i.options;
                    "time" == r.mode && (i.tickGenerator = function(t) {
                        var n = [], i = o(t.min, r), a = 0, s = r.tickSize && "quarter" === r.tickSize[1] || r.minTickSize && "quarter" === r.minTickSize[1] ? u : c;
                        null != r.minTickSize && (a = "number" == typeof r.tickSize ? r.tickSize : r.minTickSize[0] * l[r.minTickSize[1]]);
                        for (var f = 0; f < s.length - 1 && !(t.delta < (s[f][0] * l[s[f][1]] + s[f + 1][0] * l[s[f + 1][1]]) / 2 && s[f][0] * l[s[f][1]] >= a); ++f) ;
                        var h = s[f][0], d = s[f][1];
                        if ("year" == d) {
                            if (null != r.minTickSize && "year" == r.minTickSize[1]) h = Math.floor(r.minTickSize[0]); else {
                                var m = Math.pow(10, Math.floor(Math.log(t.delta / l.year) / Math.LN10)), p = t.delta / l.year / m;
                                h = p < 1.5 ? 1 : p < 3 ? 2 : p < 7.5 ? 5 : 10, h *= m;
                            }
                            h < 1 && (h = 1);
                        }
                        t.tickSize = r.tickSize || [ h, d ];
                        var g = t.tickSize[0];
                        d = t.tickSize[1];
                        var x = g * l[d];
                        "second" == d ? i.setSeconds(e(i.getSeconds(), g)) : "minute" == d ? i.setMinutes(e(i.getMinutes(), g)) : "hour" == d ? i.setHours(e(i.getHours(), g)) : "month" == d ? i.setMonth(e(i.getMonth(), g)) : "quarter" == d ? i.setMonth(3 * e(i.getMonth() / 3, g)) : "year" == d && i.setFullYear(e(i.getFullYear(), g)), 
                        i.setMilliseconds(0), x >= l.minute && i.setSeconds(0), x >= l.hour && i.setMinutes(0), 
                        x >= l.day && i.setHours(0), x >= 4 * l.day && i.setDate(1), x >= 2 * l.month && i.setMonth(e(i.getMonth(), 3)), 
                        x >= 2 * l.quarter && i.setMonth(e(i.getMonth(), 6)), x >= l.year && i.setMonth(0);
                        var v, b = 0, k = Number.NaN;
                        do if (v = k, k = i.getTime(), n.push(k), "month" == d || "quarter" == d) if (g < 1) {
                            i.setDate(1);
                            var y = i.getTime();
                            i.setMonth(i.getMonth() + ("quarter" == d ? 3 : 1));
                            var w = i.getTime();
                            i.setTime(k + b * l.hour + (w - y) * g), b = i.getHours(), i.setHours(0);
                        } else i.setMonth(i.getMonth() + g * ("quarter" == d ? 3 : 1)); else "year" == d ? i.setFullYear(i.getFullYear() + g) : i.setTime(k + x); while (k < t.max && k != v);
                        return n;
                    }, i.tickFormatter = function(t, e) {
                        var i = o(t, e.options);
                        if (null != r.timeformat) return n(i, r.timeformat, r.monthNames, r.dayNames);
                        var a, s = e.options.tickSize && "quarter" == e.options.tickSize[1] || e.options.minTickSize && "quarter" == e.options.minTickSize[1], c = e.tickSize[0] * l[e.tickSize[1]], u = e.max - e.min, f = r.twelveHourClock ? " %p" : "", h = r.twelveHourClock ? "%I" : "%H";
                        a = c < l.minute ? h + ":%M:%S" + f : c < l.day ? u < 2 * l.day ? h + ":%M" + f : "%b %d " + h + ":%M" + f : c < l.month ? "%b %d" : s && c < l.quarter || !s && c < l.year ? u < l.year ? "%b" : "%b %Y" : s && c < l.year ? u < l.year ? "Q%q" : "Q%q %Y" : "%Y";
                        var d = n(i, a, r.monthNames, r.dayNames);
                        return d;
                    });
                });
            });
        }
        var a = {
            xaxis: {
                timezone: null,
                timeformat: null,
                twelveHourClock: !1,
                monthNames: null
            }
        }, l = {
            second: 1e3,
            minute: 6e4,
            hour: 36e5,
            day: 864e5,
            month: 2592e6,
            quarter: 7776e6,
            year: 525949.2 * 60 * 1e3
        }, s = [ [ 1, "second" ], [ 2, "second" ], [ 5, "second" ], [ 10, "second" ], [ 30, "second" ], [ 1, "minute" ], [ 2, "minute" ], [ 5, "minute" ], [ 10, "minute" ], [ 30, "minute" ], [ 1, "hour" ], [ 2, "hour" ], [ 4, "hour" ], [ 8, "hour" ], [ 12, "hour" ], [ 1, "day" ], [ 2, "day" ], [ 3, "day" ], [ .25, "month" ], [ .5, "month" ], [ 1, "month" ], [ 2, "month" ] ], c = s.concat([ [ 3, "month" ], [ 6, "month" ], [ 1, "year" ] ]), u = s.concat([ [ 1, "quarter" ], [ 2, "quarter" ], [ 1, "year" ] ]);
        t.plot.plugins.push({
            init: r,
            options: a,
            name: "time",
            version: "1.0"
        }), t.plot.formatDate = n, t.plot.dateGenerator = o;
    }(jQuery);
} ]);
//# sourceMappingURL=plot.min.js.map