!function(e) {
    function n(a) {
        if (t[a]) return t[a].exports;
        var o = t[a] = {
            exports: {},
            id: a,
            loaded: !1
        };
        return e[a].call(o.exports, o, o.exports, n), o.loaded = !0, o.exports;
    }
    var t = {};
    return n.m = e, n.c = t, n.p = "", n(0);
}({
    0: function(e, n, t) {
        e.exports = t(51);
    },
    2: function(e, n) {
        e.exports = cockpit;
    },
    51: function(e, n, t) {
        "use strict";
        !function() {
            function e() {
                var e = document.getElementById("speed");
                i || l ? (e.innerHTML = d.format_bytes_per_sec(1e3 * u / (Date.now() - s)), console.log(u)) : e.innerHTML = "";
                var n = document.getElementById("memory"), t = document.getElementById("pid");
                m || (m = d.script("echo $PPID && cat /proc/$PPID/statm"), m.then(function(e) {
                    var a = e.split("\n");
                    t.innerHTML = a[0], n.innerHTML = a[1], m = null;
                }, function(e) {
                    n.innerHTML = String(e), m = null;
                }));
            }
            function n(e) {
                function n(e, n) {
                    return n ? new window.ArrayBuffer(e) : new Array(e).join("x");
                }
                r();
                var t = "echo-sideband" == e.target.id, a = parseInt(document.getElementById("message").value, 10), o = parseInt(document.getElementById("batch").value, 10), m = parseInt(document.getElementById("interval").value, 10);
                if (isNaN(a) || isNaN(m) || isNaN(o)) return void window.alert("Bad value");
                var p = document.getElementById.checked, f = {
                    payload: "echo"
                }, w = n(a, p);
                if (s = new Date(), u = 0, t) p && (f.binary = "raw"), l = new window.WebSocket(d.transport.uri("channel/" + d.transport.csrf_token) + "?" + window.btoa(JSON.stringify(f))), 
                l.binaryType = "arraybuffer", l.onopen = function() {
                    for (var e = 0; e < o; e++) l.send(w);
                    c = window.setInterval(function() {
                        for (var e = 0; e < o; e++) l.send(w);
                    }, m);
                }, l.onmessage = function(e) {
                    u += p ? e.data.byteLength : e.data.length;
                }, l.onclose = function(e) {
                    l && window.alert("channel closed"), r();
                }; else {
                    p && (f.binary = !0), i = d.channel(f), i.addEventListener("message", function(e, n) {
                        u += n.length;
                    }), i.addEventListener("close", function(e, n) {
                        n.problem && window.alert(n.problem), r();
                    });
                    for (var y = 0; y < o; y++) i.send(w);
                    c = window.setInterval(function() {
                        for (var e = 0; e < o; e++) i.send(w);
                    }, m);
                }
            }
            function a(e) {
                r();
                var n = "read-sideband" == e.target.id, t = document.getElementById("read-path"), a = {
                    payload: "fsread1",
                    path: t.value,
                    max_read_size: 107374182400,
                    binary: !n || "raw"
                };
                s = Date.now(), u = 0, n ? (l = new window.WebSocket(d.transport.uri("channel/" + d.transport.csrf_token) + "?" + window.btoa(JSON.stringify(a))), 
                l.binaryType = "arraybuffer", l.onmessage = function(e) {
                    u += e.data.byteLength;
                }, l.onclose = function(e) {
                    l && window.alert("channel closed"), r();
                }) : (i = d.channel(a), i.addEventListener("message", function(e, n) {
                    u += n.length;
                }), i.addEventListener("close", function(e, n) {
                    n.problem && window.alert(n.problem), r();
                }));
            }
            function o(e) {
                r();
                var n, t = document.getElementById("download-path"), a = {
                    binary: "raw",
                    max_read_size: 107374182400,
                    external: {
                        "content-disposition": 'attachment; filename="download"',
                        "content-type": "application/octet-stream"
                    }
                };
                0 === t.value.indexOf("http") ? (n = document.createElement("a"), n.href = t.value, 
                a.payload = "http-stream2", a.address = n.hostname, a.port = parseInt(n.port, 10), 
                a.path = n.pathname, a.method = "GET") : (a.payload = "fsread1", a.path = t.value), 
                console.log("Download", a), s = Date.now(), u = 0;
                var o = window.btoa(JSON.stringify(a));
                window.open("/cockpit/channel/" + d.transport.csrf_token + "?" + o);
            }
            function r() {
                e(), i && i.close(), i = null;
                var n = l;
                l = null, n && n.close(), window.clearInterval(c), c = null;
            }
            var d = t(2), i = null, l = null, c = null, s = null, u = 0, m = null;
            d.transport.wait(function() {
                document.getElementById("echo-normal").addEventListener("click", n), document.getElementById("echo-sideband").addEventListener("click", n), 
                document.getElementById("read-normal").addEventListener("click", a), document.getElementById("read-sideband").addEventListener("click", a), 
                document.getElementById("download-external").addEventListener("click", o), document.getElementById("stop").addEventListener("click", r), 
                window.setInterval(e, 500), document.body.style.display = "block";
            });
        }();
    }
});
//# sourceMappingURL=speed.min.js.map