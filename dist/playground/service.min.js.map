{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"jQuery\"","webpack:///external \"cockpit\"","webpack:///../pkg/lib/service.js","webpack:///../pkg/playground/service.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","jQuery","cockpit","systemd_client","systemd_manager","wait_valid","proxy","callback","wait","valid","unit","service","self","exists","state","enabled","wait_callbacks","promise","then","start","call_manager_with_job","stop","restart","tryRestart","enable","call_manager_with_reload","disable","event_target","done","defer","update_from_unit","LoadState","ActiveState","undefined","UnitFileState","dispatchEvent","resolve","update_from_service","refresh","refresh_interface","path","iface","fail","error","console","log","result","props","v","ifaces","data","notify","on_job_new_removed_refresh","event","number","unit_id","indexOf","LoadUnit","addEventListener","dbus","superuser","Subscribe","warn","reloading","pending_jobs","call_manager","method","args","dfd","results","reject","$","navigate","show","text","JSON","stringify","location","on","b"],"mappings":"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","file":"playground/service.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 26);\n","module.exports = jQuery;","module.exports = cockpit;","import cockpit from \"cockpit\";\n\n/* SERVICE MANAGEMENT API\n *\n * The \"service\" module lets you monitor and manage a\n * system service on localhost in a simple way.\n *\n * It mainly exists because talking to the systemd D-Bus API is\n * not trivial enough to do it directly.\n *\n * - proxy = service.proxy(name)\n *\n * Create a proxy that represents the service named NAME.\n *\n * The proxy has properties and methods (described below) that\n * allow you to monitor the state of the service, and perform\n * simple actions on it.\n *\n * Initially, any of the properties can be \"null\" until their\n * actual values have been retrieved in the background.\n *\n * - $(proxy).on('changed', function (event) { ... })\n *\n * The 'changed' event is emitted whenever one of the properties\n * of the proxy changes.\n *\n * - proxy.exists\n *\n * A boolean that tells whether the service is known or not.  A\n * proxy with 'exists == false' will have 'state == undefined' and\n * 'enabled == undefined'.\n *\n * - proxy.state\n *\n * Either 'undefined' when the state can't be retrieved, or a\n * string that has one of the values \"starting\", \"running\",\n * \"stopping\", \"stopped\", or \"failed\".\n *\n * - proxy.enabled\n *\n * Either 'undefined' when the value can't be retrieved, or a\n * boolean that tells whether the service is started 'enabled'.\n * What it means exactly for a service to be enabled depends on\n * the service, but a enabled service is usually started on boot,\n * no matter wether other services need it or not.  A disabled\n * service is usually only started when it is needed by some other\n * service.\n *\n * - proxy.unit\n * - proxy.service\n *\n * The raw org.freedesktop.systemd1.Unit and Service D-Bus\n * interface proxies for the service.\n *\n * - promise = proxy.start()\n *\n * Start the service.  The return value is a standard jQuery\n * promise as returned from DBusClient.call.\n *\n * - promise =  proxy.restart()\n *\n * Restart the service.\n *\n * - promise = proxy.tryRestart()\n *\n * Try to restart the service if it's running or starting\n *\n * - promise = proxy.stop()\n *\n * Stop the service.\n *\n * - promise = proxy.enable()\n *\n * Enable the service.\n *\n * - promise = proxy.disable()\n *\n * Disable the service.\n */\n\nvar systemd_client;\nvar systemd_manager;\n\nfunction wait_valid(proxy, callback) {\n    proxy.wait(function() {\n        if (proxy.valid)\n            callback();\n    });\n}\n\nfunction with_systemd_manager(done) {\n    if (!systemd_manager) {\n        systemd_client = cockpit.dbus(\"org.freedesktop.systemd1\", { superuser: \"try\" });\n        systemd_manager = systemd_client.proxy(\"org.freedesktop.systemd1.Manager\",\n                                               \"/org/freedesktop/systemd1\");\n        wait_valid(systemd_manager, function() {\n            systemd_manager.Subscribe()\n                    .fail(function (error) {\n                        if (error.name != \"org.freedesktop.systemd1.AlreadySubscribed\" &&\n                        error.name != \"org.freedesktop.DBus.Error.FileExists\")\n                            console.warn(\"Subscribing to systemd signals failed\", error);\n                    });\n        });\n    }\n    wait_valid(systemd_manager, done);\n}\n\nexport function proxy(name) {\n    var self = {\n        exists: null,\n        state: null,\n        enabled: null,\n\n        wait: wait,\n\n        start: start,\n        stop: stop,\n        restart: restart,\n        tryRestart: tryRestart,\n\n        enable: enable,\n        disable: disable\n    };\n\n    cockpit.event_target(self);\n\n    var unit, service;\n    var wait_callbacks = cockpit.defer();\n\n    if (name.indexOf(\".\") == -1)\n        name = name + \".service\";\n\n    function update_from_unit() {\n        self.exists = (unit.LoadState != \"not-found\" || unit.ActiveState != \"inactive\");\n\n        if (unit.ActiveState == \"activating\")\n            self.state = \"starting\";\n        else if (unit.ActiveState == \"deactivating\")\n            self.state = \"stopping\";\n        else if (unit.ActiveState == \"active\" || unit.ActiveState == \"reloading\")\n            self.state = \"running\";\n        else if (unit.ActiveState == \"failed\")\n            self.state = \"failed\";\n        else if (unit.ActiveState == \"inactive\" && self.exists)\n            self.state = \"stopped\";\n        else\n            self.state = undefined;\n\n        if (unit.UnitFileState == \"enabled\" || unit.UnitFileState == \"linked\")\n            self.enabled = true;\n        else if (unit.UnitFileState == \"disabled\" || unit.UnitFileState == \"masked\")\n            self.enabled = false;\n        else\n            self.enabled = undefined;\n\n        self.unit = unit;\n\n        self.dispatchEvent(\"changed\");\n        wait_callbacks.resolve();\n    }\n\n    function update_from_service() {\n        self.service = service;\n        self.dispatchEvent(\"changed\");\n    }\n\n    with_systemd_manager(function () {\n        systemd_manager.LoadUnit(name)\n                .done(function (path) {\n                    unit = systemd_client.proxy('org.freedesktop.systemd1.Unit', path);\n                    unit.addEventListener('changed', update_from_unit);\n                    wait_valid(unit, update_from_unit);\n\n                    service = systemd_client.proxy('org.freedesktop.systemd1.Service', path);\n                    service.addEventListener('changed', update_from_service);\n                    wait_valid(service, update_from_service);\n                })\n                .fail(function () {\n                    self.exists = false;\n                    self.dispatchEvent('changed');\n                });\n    });\n\n    function refresh() {\n        if (!unit || !service)\n            return;\n\n        function refresh_interface(path, iface) {\n            systemd_client.call(path,\n                                \"org.freedesktop.DBus.Properties\", \"GetAll\", [ iface ])\n                    .fail(function (error) {\n                        console.log(error);\n                    })\n                    .done(function (result) {\n                        var props = { };\n                        for (var p in result[0])\n                            props[p] = result[0][p].v;\n                        var ifaces = { };\n                        ifaces[iface] = props;\n                        var data = { };\n                        data[unit.path] = ifaces;\n                        systemd_client.notify(data);\n                    });\n        }\n\n        refresh_interface(unit.path, \"org.freedesktop.systemd1.Unit\");\n        refresh_interface(service.path, \"org.freedesktop.systemd1.Service\");\n    }\n\n    function on_job_new_removed_refresh(event, number, path, unit_id, result) {\n        if (unit_id == name)\n            refresh();\n    }\n\n    /* HACK - https://bugs.freedesktop.org/show_bug.cgi?id=69575\n     *\n     * We need to explicitly get new property values when getting\n     * a UnitNew signal since UnitNew doesn't carry them.\n     * However, reacting to UnitNew with GetAll could lead to an\n     * infinite loop since systemd emits a UnitNew in reaction to\n     * GetAll for units that it doesn't want to keep loaded, such\n     * as units without unit files.\n     *\n     * So we ignore UnitNew and instead assume that the unit state\n     * only changes in interesting ways when there is a job for it\n     * or when the daemon is reloaded (or when we get a property\n     * change notification, of course).\n     */\n\n    // This is what we want to do:\n    // systemd_manager.addEventListener(\"UnitNew\", function (event, unit_id, path) {\n    //     if (unit_id == name)\n    //         refresh();\n    // });\n\n    // This is what we have to do:\n    systemd_manager.addEventListener(\"Reloading\", function (event, reloading) {\n        if (!reloading)\n            refresh();\n    });\n\n    systemd_manager.addEventListener(\"JobNew\", on_job_new_removed_refresh);\n    systemd_manager.addEventListener(\"JobRemoved\", on_job_new_removed_refresh);\n\n    function wait(callback) {\n        wait_callbacks.promise.then(callback);\n    }\n\n    /* Actions\n     *\n     * We don't call methods on the D-Bus proxies here since they\n     * might not be ready when these functions are called.\n     */\n\n    var pending_jobs = { };\n\n    systemd_manager.addEventListener(\"JobRemoved\", function (event, number, path, unit_id, result) {\n        if (pending_jobs[path]) {\n            if (result == \"done\")\n                pending_jobs[path].resolve();\n            else\n                pending_jobs[path].reject(result);\n            delete pending_jobs[path];\n        }\n    });\n\n    function call_manager(method, args) {\n        return systemd_client.call(\"/org/freedesktop/systemd1\",\n                                   \"org.freedesktop.systemd1.Manager\",\n                                   method, args);\n    }\n\n    function call_manager_with_job(method, args) {\n        var dfd = cockpit.defer();\n        call_manager(method, args)\n                .done(function (results) {\n                    var path = results[0];\n                    pending_jobs[path] = dfd;\n                })\n                .fail(function (error) {\n                    dfd.reject(error);\n                });\n        return dfd.promise();\n    }\n\n    function call_manager_with_reload(method, args) {\n        return call_manager(method, args).then(function () {\n            var dfd = cockpit.defer();\n            call_manager(\"Reload\", [ ])\n                    .done(function () { dfd.resolve() })\n                    .fail(function (error) {\n                    // HACK: https://bugzilla.redhat.com/show_bug.cgi?id=1560549\n                    // some systemd versions disconnect too fast from the bus\n                        if (error.name === \"org.freedesktop.DBus.Error.NoReply\") {\n                            refresh();\n                            dfd.resolve();\n                        } else {\n                            dfd.reject(error);\n                        }\n                    });\n            return dfd.promise();\n        });\n    }\n\n    function start() {\n        return call_manager_with_job(\"StartUnit\", [ name, \"replace\" ]);\n    }\n\n    function stop() {\n        return call_manager_with_job(\"StopUnit\", [ name, \"replace\" ]);\n    }\n\n    function restart() {\n        return call_manager_with_job(\"RestartUnit\", [ name, \"replace\" ]);\n    }\n\n    function tryRestart() {\n        return call_manager_with_job(\"TryRestartUnit\", [ name, \"replace\" ]);\n    }\n\n    function enable() {\n        return call_manager_with_reload(\"EnableUnitFiles\", [ [ name ], false, false ]);\n    }\n\n    function disable() {\n        return call_manager_with_reload(\"DisableUnitFiles\", [ [ name ], false ]);\n    }\n\n    return self;\n}\n","import $ from \"jquery\";\nimport cockpit from \"cockpit\";\n\nimport * as service from \"service\";\n\n$(function() {\n    var proxy;\n\n    function navigate() {\n        proxy = service.proxy(cockpit.location.path[0] || \"\");\n\n        function show() {\n            function s(t) {\n                $('#' + t).text(JSON.stringify(proxy[t]));\n            }\n            s('exists');\n            s('state');\n            s('enabled');\n        }\n\n        $(proxy).on('changed', show);\n        show();\n\n        $(\"body\").show();\n    }\n\n    function b(t) {\n        $('#' + t).on('click', function () {\n            proxy[t]()\n                    .fail(function (error) {\n                        console.error(\"action\", t, \"failed:\", JSON.stringify(error));\n                    });\n        });\n    }\n\n    b('start');\n    b('stop');\n    b('enable');\n    b('disable');\n\n    $(cockpit).on('locationchanged', navigate);\n    navigate();\n});\n"],"sourceRoot":""}