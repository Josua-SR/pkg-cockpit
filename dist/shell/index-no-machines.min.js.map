{"version":3,"sources":["webpack:///shell/index-no-machines.min.js","webpack:///webpack/bootstrap f13a7360fab1e7384a6b?1c87","webpack:///external \"jQuery\"?0cb8","webpack:///external \"cockpit\"?478e","webpack:///../pkg/shell/indexes.js?a9ea","webpack:///../pkg/shell/base_index.js?107d","webpack:///../pkg/shell/index-no-machines.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","3","jQuery","4","cockpit","24","phantom_checkpoint","MachinesIndex","index_options","machines","loader","mdialogs","on_ready","ready","index","show_disconnected","current_frame","$","hide","toggle","text","_","message","watchdog_problem","show","addClass","navigate","state","reconnect","machine","troubleshooting","retrieve_state","lookup","host","visible","connect","problem","key","address","label","compiled","compile","manifests","component","choose_component","update_navbar","update_sidebar","update_frame","recalculate_layout","jump","item","menu_items","single_host","list","length","dashboards","ordered","shell_embedded","sidebar","wants","path","search","each","el","this","toggleClass","attr","static_hostname","items","section","avatar","encodeURI","color","css","links","append","href","menu","map","empty","tools","parents","collapse","update_title","suffix","default_title","document","title","connecting","restarting","error","needs_troubleshoot","off","on","troubleshoot","compat","hash","frame","frames","update_machines","machine_link","removeAttr","compatibility","shell","mapping","base_index","new_compiled","load","new_index_from_proto","ev","expect_restart","sessionStorage","clear","window","location","reload","remove","transport","wait","start","SimpleIndex","message_queue","event","messages","push","gettext","pathname","indexOf","simple_index","options","machines_index","machines_ins","documentElement","getAttribute","name","sink","protocol","cancel","removeEventListener","addEventListener","25","Frames","remove_frame","contentWindow","frame_ready","count","clearTimeout","timer","is","ex","setAttribute","setTimeout","self","iframes","i","lookup_component_hash","src","split","new_frame","connection_string","wind","frameElement","url","createElement","style","display","base","checksum","Router","perform_jump","child","control","str","encodeURIComponent","perform_track","substring","on_unload","source","source_by_name","target","defaultView","unregister","on_hashchange","on_load","kill","source_by_seed","channel_seed","register","console","warn","unique_id","seed","default_host","inited","message_handler","origin","data","JSON","parse","command","reply","extend","channel-seed","postMessage","stringify","hint","hidden","show_oops","undefined","channel","group","inject","filter","pos","len","Index","encode","with_root","apply","string","decode","version","shift","pop","join","build_navbar","a","navbar","local_compiled","CompiledComponants","setup_oops","oops","children","details","html","modal","setup_brand","os_release","localStorage","elt","getComputedStyle","content","substr","innerHTML","format","setup_logout","logout","setup_language","manifest","locales","language","cookie","replace","code","val","code_to_select","setItem","focus","setup_about","info","setup_account","user","setup_user","full_name","is_root","is_not_root","router","watchdog","payload","triggerHandler","preventDefault","navigator","userAgent","old_onerror","onerror","msg","line","topnav","window_height","height","topnav_height","y","Math","floor","sidebar_width","outerWidth","history","current","frame_change","replaceState","pushState","oops_sel","translate","logout_sel","language_sel","cal_title","brand_sel","about_sel","user_sel","account_sel","done","prop","order","slice","x","sort","b","value","follow","arg","arguments","then","log","stream","zz_value","Object","defineProperties","zz","get","set","proto","o","30","indexes","login_data","getItem"],"mappings":"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","file":"shell/index-no-machines.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(30);\n\n\n/***/ },\n\n/***/ 3:\n/***/ function(module, exports) {\n\n\tmodule.exports = jQuery;\n\n/***/ },\n\n/***/ 4:\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n\n/***/ 24:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar phantom_checkpoint = phantom_checkpoint || function () { };\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(3);\n\t    var cockpit = __webpack_require__(4);\n\t\n\t    var base_index = __webpack_require__(25);\n\t\n\t    var _ = cockpit.gettext;\n\t\n\t    var shell_embedded = window.location.pathname.indexOf(\".html\") !== -1;\n\t\n\t    function MachinesIndex(index_options, machines, loader, mdialogs) {\n\t\n\t        if (!index_options)\n\t            index_options = {};\n\t\n\t        index_options.navigate = function (state, sidebar) {\n\t            return navigate(state, sidebar);\n\t        };\n\t        var index = base_index.new_index_from_proto(index_options);\n\t\n\t        /* Restarts */\n\t        $(index).on(\"expect_restart\", function (ev, host) {\n\t            loader.expect_restart(host);\n\t        });\n\t\n\t        /* Disconnection Dialog */\n\t        var watchdog_problem = null;\n\t        $(index).on(\"disconnect\", function (ev, problem) {\n\t            watchdog_problem = problem;\n\t            show_disconnected();\n\t        });\n\t\n\t        /* Is troubleshooting dialog open */\n\t        var troubleshooting = false;\n\t\n\t        /* Reconnect button */\n\t        $(\"#machine-reconnect\").on(\"click\", function(ev) {\n\t            if (watchdog_problem) {\n\t                cockpit.sessionStorage.clear();\n\t                window.location.reload(true);\n\t            } else {\n\t                navigate(null, true);\n\t            }\n\t        });\n\t\n\t        /* Troubleshoot pause navigation */\n\t        $(\"#troubleshoot-dialog\").on(\"show.bs.modal\", function(ev) {\n\t            troubleshooting = true;\n\t        });\n\t\n\t        /* Troubleshoot dialog close */\n\t        $(\"#troubleshoot-dialog\").on(\"hide.bs.modal\", function(ev) {\n\t            troubleshooting = false;\n\t            navigate(null, true);\n\t        });\n\t\n\t        /* Navigation */\n\t        var ready = false;\n\t        function on_ready() {\n\t            ready = true;\n\t            index.ready();\n\t        }\n\t\n\t        /* When the machine list is ready we start processing navigation */\n\t        $(machines)\n\t            .on(\"ready\", on_ready)\n\t            .on(\"added updated\", function(ev, machine) {\n\t                if (!machine.visible)\n\t                    index.frames.remove(machine);\n\t                else if (machine.problem)\n\t                    index.frames.remove(machine);\n\t\n\t                update_machines();\n\t                if (ready)\n\t                    navigate();\n\t            })\n\t            .on(\"removed\", function(ev, machine) {\n\t                index.frames.remove(machine);\n\t                update_machines();\n\t            });\n\t\n\t        if (machines.ready)\n\t            on_ready();\n\t\n\t        /* When only one machine this operates as a link */\n\t        $(\"#machine-link\").on(\"click\", function(ev) {\n\t            if (machines.list.length == 1) {\n\t                index.jump({ host: machines.list[0].address, sidebar: true, component: \"\" });\n\t                return false;\n\t            }\n\t        });\n\t\n\t        function show_disconnected() {\n\t            var current_frame = index.current_frame();\n\t\n\t            if (current_frame)\n\t                $(current_frame).hide();\n\t\n\t            $(\".curtains-ct .spinner\").toggle(false);\n\t            $(\"#machine-reconnect\").toggle(true);\n\t            $(\"#machine-troubleshoot\").toggle(false);\n\t            $(\".curtains-ct i\").toggle(true);\n\t            $(\".curtains-ct h1\").text(_(\"Disconnected\"));\n\t            $(\".curtains-ct p\").text(cockpit.message(watchdog_problem));\n\t            $(\".curtains-ct\").show();\n\t            $(\"#navbar-dropdown\").addClass(\"disabled\");\n\t            phantom_checkpoint();\n\t        }\n\t\n\t        /* Handles navigation */\n\t        function navigate(state, reconnect) {\n\t            var machine;\n\t\n\t            /* If this is a watchdog problem or we are troubleshooting\n\t             * let the dialog handle it */\n\t            if (watchdog_problem || troubleshooting)\n\t                return;\n\t\n\t            /* phantomjs has a problem retrieving state, so we allow it to be passed in */\n\t            if (!state)\n\t                state = index.retrieve_state();\n\t            machine = machines.lookup(state.host);\n\t\n\t            /* No such machine */\n\t            if (!machine) {\n\t                machine = {\n\t                    key: state.host,\n\t                    address: state.host,\n\t                    label: state.host,\n\t                    state: \"failed\",\n\t                    problem: \"not-found\",\n\t                };\n\t\n\t            /* Asked to reconnect to the machine */\n\t            } else if (!machine.visible) {\n\t                machine.state = \"failed\";\n\t                machine.problem = \"not-found\";\n\t            } else if (reconnect && machine.state !== \"connected\") {\n\t                loader.connect(state.host);\n\t            }\n\t\n\t            var compiled = compile(machine);\n\t            if (machine.manifests && !state.component)\n\t                state.component = choose_component(state, compiled);\n\t\n\t            update_navbar(machine, state, compiled);\n\t            update_sidebar(machine, state, compiled);\n\t            update_frame(machine, state, compiled);\n\t\n\t            index.recalculate_layout();\n\t\n\t            /* Just replace the state, and URL */\n\t            index.jump(state, true);\n\t        }\n\t\n\t        function choose_component(state, compiled) {\n\t            var item, menu_items;\n\t            var single_host = machines.list.length <= 1;\n\t            var dashboards = compiled.ordered(\"dashboard\");\n\t\n\t            if (shell_embedded)\n\t                state.sidebar = true;\n\t\n\t            /* See if we should show a dashboard */\n\t            if (!state.sidebar && dashboards.length > 0) {\n\t                item = dashboards[0];\n\t                /* Don't chose a dashboard as a single host unless\n\t                 * it specifically supports that.\n\t                 */\n\t                if (item && (!single_host || item.wants !== \"multiple-machines\"))\n\t                    return item.path;\n\t                else\n\t                    item = null;\n\t            }\n\t\n\t            /* See if we can find something with currently selected label */\n\t            var label = $(\"#sidebar li.active a\").text();\n\t            if (label) {\n\t                item = compiled.search(\"label\", label);\n\t                if (item)\n\t                    return item.path;\n\t            }\n\t\n\t            /* Go for the first item */\n\t            menu_items = compiled.ordered(\"menu\");\n\t            if (menu_items.length > 0 && menu_items[0]) {\n\t                return menu_items[0].path;\n\t\n\t            /* If there is no menu items use a dashboard */\n\t            } else if (dashboards.length > 0) {\n\t                item = dashboards[0];\n\t                if (item) {\n\t                    state.sidebar = false;\n\t                    return item.path;\n\t                }\n\t            }\n\t\n\t            return \"system\";\n\t        }\n\t\n\t        function update_navbar(machine, state, compiled) {\n\t            $(\".dashboard-link\").each(function() {\n\t                var el = $(this);\n\t                el.toggleClass(\"active\", el.attr(\"data-component\") === state.component);\n\t            });\n\t\n\t            var hide;\n\t            if (machine && machine.static_hostname) {\n\t                hide = $(\".dashboard-link\").length < 2 && machines.list.length < 2;\n\t                $('#content-navbar').toggleClass(\"hidden\", hide);\n\t            } else {\n\t                $('#content-navbar').toggleClass(\"hidden\", false);\n\t            }\n\t\n\t            var item = compiled.items[state.component];\n\t            if (item && item.section == \"dashboard\") {\n\t                delete state.sidebar;\n\t                machine = null;\n\t            }\n\t\n\t            $(\"#machine-avatar\").attr(\"src\", machine && machine.avatar ? encodeURI(machine.avatar) :\n\t                                                \"../shell/images/server-small.png\");\n\t\n\t            var label;\n\t            if (machine) {\n\t                label = machine.label;\n\t            } else if (machines.list.length == 1) {\n\t                label = machines.list[0].label;\n\t            } else {\n\t                label = _(\"Machines\");\n\t            }\n\t            $(\"#machine-link span\").text(label);\n\t\n\t            var color;\n\t            if (machines.list.length == 1 || !machine)\n\t                color = \"transparent\";\n\t            else\n\t                color = machine.color || \"\";\n\t            $(\"#machine-color\").css(\"border-left-color\", color);\n\t\n\t            $(\"#machine-dropdown\").toggleClass(\"active\", !!machine);\n\t\n\t            /* Decide when to show the sidebar */\n\t            var sidebar = $(\"#sidebar\");\n\t\n\t            if (machine && machine.state == \"connected\")\n\t                sidebar.show();\n\t            else\n\t                sidebar.hide();\n\t        }\n\t\n\t        function update_sidebar(machine, state, compiled) {\n\t            function links(component) {\n\t                return $(\"<li>\")\n\t                    .toggleClass(\"active\", state.component === component.path)\n\t                    .append($(\"<a>\")\n\t                        .attr(\"href\", index.href({ host: machine.address, component: component.path }))\n\t                        .text(component.label));\n\t            }\n\t\n\t            var menu = compiled.ordered(\"menu\").map(links);\n\t            $(\"#sidebar-menu\").empty().append(menu);\n\t\n\t            var tools = compiled.ordered(\"tools\").map(links);\n\t            $(\"#sidebar-tools\").empty().append(tools);\n\t            $('#tools-panel li.active').parents('#tools-panel').collapse('show');\n\t        }\n\t\n\t        function update_title(label, machine) {\n\t            if (label)\n\t                label += \" - \";\n\t            else\n\t                label = \"\";\n\t            var suffix = index.default_title;\n\t            if (machine && machine.label)\n\t                suffix = machine.label;\n\t            document.title = label + suffix;\n\t        }\n\t\n\t        function update_frame(machine, state, compiled) {\n\t            var title, message, connecting, restarting;\n\t            var current_frame = index.current_frame();\n\t\n\t            if (machine.state != \"connected\") {\n\t                $(current_frame).hide();\n\t                current_frame = null;\n\t                index.current_frame(current_frame);\n\t\n\t                connecting = (machine.state == \"connecting\");\n\t                if (machine.restarting) {\n\t                    title = _(\"The machine is restarting\");\n\t                    message = \"\";\n\t                } else if (connecting) {\n\t                    title = _(\"Connecting to the machine\");\n\t                    message = \"\";\n\t                } else {\n\t                    title = _(\"Couldn't connect to the machine\");\n\t                    if (machine.problem == \"not-found\") {\n\t                        message = _(\"Cannot connect to an unknown machine\");\n\t                    } else {\n\t                        var error = machine.problem || machine.state;\n\t                        if (error)\n\t                            message = cockpit.message(error);\n\t                        else\n\t                            message = \"\";\n\t                    }\n\t                }\n\t\n\t                if (!machine.restarting && mdialogs.needs_troubleshoot(machine)) {\n\t                    $(\"#machine-troubleshoot\").off()\n\t                        .on(\"click\", function () {\n\t                            mdialogs.troubleshoot(\"troubleshoot-dialog\", machine);\n\t                        });\n\t                    $(\"#machine-troubleshoot\").show();\n\t                } else {\n\t                    $(\"#machine-troubleshoot\").hide();\n\t                }\n\t\n\t                restarting = !!machine.restarting;\n\t                $(\".curtains-ct\").show();\n\t                $(\".curtains-ct .spinner\").toggle(connecting || restarting);\n\t                $(\"#machine-reconnect\").toggle(!connecting && machine.problem != \"not-found\");\n\t                $(\".curtains-ct i\").toggle(!connecting && !restarting);\n\t                $(\".curtains-ct h1\").text(title);\n\t                $(\".curtains-ct p\").text(message);\n\t\n\t                $(\"#machine-spinner\").hide();\n\t\n\t                update_title(null, machine);\n\t\n\t                /* Fall through when connecting, and allow frame to load at same time*/\n\t                if (!connecting)\n\t                    return;\n\t            }\n\t\n\t            var hash = state.hash;\n\t            var component = state.component;\n\t\n\t            /* Old cockpit packages, used to be in shell/shell.html */\n\t            var compat;\n\t            if (machine && compiled.compat) {\n\t                compat = compiled.compat[component];\n\t                if (compat) {\n\t                    component = \"shell/shell\";\n\t                    hash = compat;\n\t                }\n\t            }\n\t\n\t            var frame;\n\t            if (component)\n\t                frame = index.frames.lookup(machine, component, hash);\n\t            if (frame != current_frame) {\n\t                $(current_frame).css('display', 'none');\n\t                index.current_frame(frame);\n\t            }\n\t\n\t            var label, item;\n\t            if (machine.state == \"connected\") {\n\t                $(\".curtains-ct\").hide();\n\t                $(\"#machine-spinner\").toggle(frame && !$(frame).attr(\"data-ready\"));\n\t                $(frame).css('display', 'block');\n\t                item = compiled.items[state.component];\n\t                label = item ? item.label : \"\";\n\t                update_title(label, machine);\n\t            }\n\t\n\t            phantom_checkpoint();\n\t        }\n\t\n\t        function update_machines() {\n\t            $(\"#machine-dropdown .caret\")\n\t                .toggle(machines.list.length > 1);\n\t\n\t            var machine_link = $(\"machine-link\");\n\t            if (machines.list.length > 1)\n\t                machine_link.attr(\"data-toggle\", \"dropdown\");\n\t            else\n\t                machine_link.removeAttr(\"data-toggle\");\n\t\n\t            var list = $(\"#machine-dropdown ul\");\n\t            var links = machines.list.map(function(machine) {\n\t                var avatar = $(\"<img>\").addClass(\"machine-avatar\")\n\t                            .attr(\"src\", encodeURI(machine.avatar));\n\t                var text = $(\"<span>\").text(machine.label);\n\t                return $(\"<li role='presentation'>\")\n\t                    .css(\"border-left-color\", machine.color || \"\")\n\t                    .append($(\"<a>\")\n\t                        .attr(\"role\", \"menuitem\")\n\t                        .attr(\"tabindex\", \"-1\")\n\t                        .attr(\"data-address\", machine.address)\n\t                        .attr(\"href\", index.href({ host: machine.address }, true))\n\t                        .append(avatar, text));\n\t                });\n\t            list.empty().append(links);\n\t        }\n\t\n\t        function compatibility(machine) {\n\t            if (!machine.manifests || machine.address === \"localhost\")\n\t                return null;\n\t\n\t            var shell = machine.manifests[\"shell\"] || { };\n\t            var menu = shell[\"menu\"] || { };\n\t            var tools = shell[\"tools\"] || { };\n\t\n\t            var mapping = { };\n\t\n\t            /* The following were included in shell/shell.html in old versions */\n\t            if (\"_host_\" in menu)\n\t                mapping[\"system/host\"] = \"/server\";\n\t            if (\"_init_\" in menu)\n\t                mapping[\"system/init\"] = \"/services\";\n\t            if (\"_network_\" in menu)\n\t                mapping[\"network/interfaces\"] = \"/networking\";\n\t            if (\"_storage_\" in menu)\n\t                mapping[\"storage/devices\"] = \"/storage\";\n\t            if (\"_users_\" in tools)\n\t                mapping[\"users/local\"] = \"/accounts\";\n\t\n\t            /* For Docker we have to guess ... some heuristics */\n\t            if (\"_storage_\" in menu || \"_init_\" in menu)\n\t                mapping[\"docker/containers\"] = \"/containers\";\n\t\n\t            return mapping;\n\t        }\n\t\n\t        function compile(machine) {\n\t            var compiled = base_index.new_compiled();\n\t            compiled.load(machine.manifests, \"tools\");\n\t            compiled.load(machine.manifests, \"dashboard\");\n\t            compiled.load(machine.manifests, \"menu\");\n\t            compiled.compat = compatibility(machine);\n\t            return compiled;\n\t        }\n\t\n\t        cockpit.transport.wait(function() {\n\t            index.start();\n\t        });\n\t    }\n\t\n\t    function SimpleIndex(index_options) {\n\t        if (!index_options)\n\t            index_options = {};\n\t\n\t        index_options.navigate = function (state, sidebar) {\n\t            return navigate(state, sidebar);\n\t        };\n\t        var default_title = index_options.default_title || \"Cockpit\";\n\t        var index = base_index.new_index_from_proto(index_options);\n\t        var compiled = base_index.new_compiled();\n\t\n\t        compiled.load(cockpit.manifests, \"dashboard\");\n\t\n\t        /* Disconnection Dialog */\n\t        var watchdog_problem = null;\n\t        $(index).on(\"disconnect\", function (ev, problem) {\n\t            watchdog_problem = problem;\n\t            show_disconnected();\n\t        });\n\t\n\t        /* Reconnect button */\n\t        $(\"#machine-reconnect\").on(\"click\", function(ev) {\n\t            cockpit.sessionStorage.clear();\n\t            window.location.reload(true);\n\t        });\n\t\n\t        function show_disconnected() {\n\t            var current_frame = index.current_frame();\n\t            if (current_frame)\n\t                $(current_frame).hide();\n\t\n\t            $(\".curtains-ct .spinner\").toggle(false);\n\t            $(\"#machine-reconnect\").toggle(true);\n\t            $(\".curtains-ct i\").toggle(true);\n\t            $(\".curtains-ct h1\").text(_(\"Disconnected\"));\n\t            $(\".curtains-ct p\").text(cockpit.message(watchdog_problem));\n\t            $(\".curtains-ct\").show();\n\t            $(\"#navbar-dropdown\").addClass(\"disabled\");\n\t            phantom_checkpoint();\n\t        }\n\t\n\t        index.ready();\n\t\n\t        /* Handles navigation */\n\t        function navigate(state, reconnect) {\n\t            var dashboards = compiled.ordered(\"dashboard\");\n\t\n\t            /* If this is a watchdog problem or we are troubleshooting\n\t             * let the dialog handle it */\n\t            if (watchdog_problem)\n\t                return;\n\t\n\t            /* phantomjs has a problem retrieving state, so we allow it to be passed in */\n\t            if (!state)\n\t                state = index.retrieve_state();\n\t\n\t            if (!state.component && dashboards.length > 0) {\n\t                state.component = dashboards[0].path;\n\t            }\n\t            update_navbar(state);\n\t            update_frame(state);\n\t\n\t            index.recalculate_layout();\n\t\n\t            /* Just replace the state, and URL */\n\t            index.jump(state, true);\n\t        }\n\t\n\t        function update_navbar(state) {\n\t            $(\".dashboard-link\").each(function() {\n\t                var el = $(this);\n\t                el.toggleClass(\"active\", el.attr(\"data-component\") === state.component);\n\t            });\n\t\n\t            var item = compiled.items[state.component];\n\t            delete state.sidebar;\n\t\n\t            $(\"#machine-link span\").text(default_title);\n\t            if ($(\".dashboard-link\").length < 2)\n\t                $('#content-navbar').toggleClass(\"hidden\", true);\n\t        }\n\t\n\t        function update_title(label) {\n\t            if (label)\n\t                label += \" - \";\n\t            else\n\t                label = \"\";\n\t            document.title = label + default_title;\n\t        }\n\t\n\t        function update_frame(state) {\n\t            var title;\n\t            var current_frame = index.current_frame();\n\t\n\t            var hash = state.hash;\n\t            var component = state.component;\n\t\n\t            var frame;\n\t            if (component)\n\t                frame = index.frames.lookup(null, component, hash);\n\t            if (frame != current_frame) {\n\t                $(current_frame).css('display', 'none');\n\t                index.current_frame(frame);\n\t            }\n\t\n\t            var label, item;\n\t            $(frame).css('display', 'block');\n\t            item = compiled.items[state.component];\n\t            label = item ? item.label : \"\";\n\t            update_title(label);\n\t\n\t            phantom_checkpoint();\n\t        }\n\t\n\t        cockpit.transport.wait(function() {\n\t            index.start();\n\t        });\n\t    }\n\t\n\t    module.exports = {\n\t        simple_index: function (options) {\n\t            return new SimpleIndex(options);\n\t        },\n\t        machines_index: function (options, machines_ins, loader, mdialogs) {\n\t            return new MachinesIndex(options, machines_ins, loader, mdialogs);\n\t        }\n\t    };\n\t\n\t    function message_queue(event) {\n\t        window.messages.push(event);\n\t    }\n\t\n\t    /* When we're being loaded into the index window we have additional duties */\n\t    if (document.documentElement.getAttribute(\"class\") === \"index-page\") {\n\t        /* Indicates to child frames that we are a cockpit1 router frame */\n\t        window.name = \"cockpit1\";\n\t\n\t        /* The same thing as above, but compatibility with old cockpit */\n\t        window.options = { sink: true, protocol: \"cockpit1\" };\n\t\n\t        /* While the index is initializing, snag any messages we receive from frames */\n\t        window.messages = [ ];\n\t\n\t        window.messages.cancel = function() {\n\t            window.removeEventListener(\"message\", message_queue, false);\n\t            window.messages = null;\n\t        };\n\t\n\t        window.addEventListener(\"message\", message_queue, false);\n\t    }\n\t\n\t}());\n\n\n/***/ },\n\n/***/ 25:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2015 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar phantom_checkpoint = phantom_checkpoint || function () { };\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(3);\n\t    var cockpit = __webpack_require__(4);\n\t\n\t    var shell_embedded = window.location.pathname.indexOf(\".html\") !== -1;\n\t    var _ = cockpit.gettext;\n\t\n\t    function Frames(index) {\n\t        var self = this;\n\t\n\t        /* Lists of frames, by host */\n\t        var iframes = { };\n\t\n\t        function remove_frame(frame) {\n\t            $(frame.contentWindow).off();\n\t            $(frame).remove();\n\t        }\n\t        self.remove = function remove(machine) {\n\t            var address = machine.address;\n\t            if (!address)\n\t                address = \"localhost\";\n\t            var list = iframes[address];\n\t            if (list) {\n\t                delete iframes[address];\n\t                $.each(list, function(i, frame) {\n\t                    remove_frame(frame);\n\t                });\n\t            }\n\t        };\n\t\n\t        function frame_ready(frame, count) {\n\t            var ready = false;\n\t\n\t            window.clearTimeout(frame.timer);\n\t            frame.timer = null;\n\t\n\t            try {\n\t                ready = $(\"body\", frame.contentWindow.document).is(\":visible\");\n\t            } catch(ex) {\n\t                ready = true;\n\t            }\n\t\n\t            if (!count)\n\t                count = 0;\n\t            count += 1;\n\t            if (count > 50)\n\t                ready = true;\n\t\n\t            if (ready) {\n\t                if (frame.getAttribute(\"data-ready\") != \"1\") {\n\t                    frame.setAttribute(\"data-ready\", \"1\");\n\t                    if (count > 0)\n\t                        index.navigate();\n\t                }\n\t            } else {\n\t                frame.timer = window.setTimeout(function() {\n\t                    frame_ready(frame, count + 1);\n\t                }, 100);\n\t            }\n\t        }\n\t\n\t        self.lookup_component_hash = function(machine, component) {\n\t            var address, list, frame, src;\n\t\n\t            if (machine)\n\t                address = machine.address;\n\t\n\t            if (!address)\n\t                address = \"localhost\";\n\t\n\t            list = iframes[address];\n\t            if (list)\n\t                frame = list[component];\n\t\n\t            if (frame) {\n\t                src = frame.getAttribute('src');\n\t                if (src)\n\t                    return src.split(\"#\")[1];\n\t            }\n\t        };\n\t\n\t        self.lookup = function lookup(machine, component, hash) {\n\t            var host;\n\t            var address;\n\t            var new_frame = false;\n\t\n\t            if (machine) {\n\t                host = machine.connection_string;\n\t                address = machine.address;\n\t            }\n\t\n\t            if (!host)\n\t                host = \"localhost\";\n\t\n\t            if (!address)\n\t                address = host;\n\t\n\t            var list = iframes[address];\n\t            if (!list)\n\t                iframes[address] = list = { };\n\t\n\t            var name = \"cockpit1:\" + host + \"/\" + component;\n\t            var frame = list[component];\n\t            if (frame && frame.getAttribute(\"name\") != name) {\n\t                remove_frame(frame);\n\t                frame = null;\n\t            }\n\t\n\t            var wind, src;\n\t\n\t            /* A preloaded frame */\n\t            if (!frame) {\n\t                wind = window.frames[name];\n\t                if (wind)\n\t                    frame = wind.frameElement;\n\t                if (frame) {\n\t                    src = frame.getAttribute('src');\n\t                    frame.url = src.split(\"#\")[0];\n\t                    list[component] = frame;\n\t                }\n\t            }\n\t\n\t            /* Need to create a new frame */\n\t            if (!frame) {\n\t                new_frame = true;\n\t                frame = document.createElement(\"iframe\");\n\t                frame.setAttribute(\"class\", \"container-frame\");\n\t                frame.setAttribute(\"name\", name);\n\t                frame.style.display = \"none\";\n\t\n\t                var parts = component.split(\"/\");\n\t\n\t                var base, checksum;\n\t                if (machine)\n\t                    checksum = machine.checksum;\n\t                if (host === \"localhost\")\n\t                    base = \"..\";\n\t                else if (checksum)\n\t                    base = \"../../\" + checksum;\n\t                else\n\t                    base = \"../../@\" + host;\n\t\n\t                frame.url = base + \"/\" + component;\n\t                if (component.indexOf(\"/\") === -1)\n\t                    frame.url += \"/index\";\n\t                frame.url += \".html\";\n\t            }\n\t\n\t            if (!hash)\n\t                hash = \"/\";\n\t            src = frame.url + \"#\" + hash;\n\t            if (frame.getAttribute('src') != src)\n\t                frame.setAttribute('src', src);\n\t\n\t            /* Store frame only when fully setup */\n\t            if (new_frame) {\n\t                list[component] = frame;\n\t                $(\"#content\").append(frame);\n\t            }\n\t            frame_ready(frame);\n\t            return frame;\n\t        };\n\t    }\n\t\n\t    function Router(index) {\n\t        var self = this;\n\t\n\t        var unique_id = 0;\n\t        var origin = cockpit.transport.origin;\n\t        var source_by_seed = { };\n\t        var source_by_name = { };\n\t\n\t        cockpit.transport.filter(function(message, channel, control) {\n\t            var seed, source, pos;\n\t\n\t            /* Only control messages with a channel are forwardable */\n\t            if (control) {\n\t                if (control.channel !== undefined) {\n\t                    for (seed in source_by_seed)\n\t                        source_by_seed[seed].window.postMessage(message, origin);\n\t                }\n\t                return true; /* still deliver locally */\n\t\n\t            /* Forward message to relevant frame */\n\t            } else if (channel) {\n\t                pos = channel.indexOf('!');\n\t                if (pos !== -1) {\n\t                    seed = channel.substring(0, pos + 1);\n\t                    source = source_by_seed[seed];\n\t                    if (source) {\n\t                        source.window.postMessage(message, origin);\n\t                        return false; /* Stop delivery */\n\t                    }\n\t                }\n\t                /* Still deliver the message locally */\n\t                return true;\n\t            }\n\t        });\n\t\n\t        function perform_jump(child, control) {\n\t            var current_frame = index.current_frame();\n\t            if (child !== window) {\n\t                if (!current_frame || current_frame.contentWindow != child)\n\t                    return;\n\t            }\n\t            var str = control.location || \"\";\n\t            if (str[0] != \"/\")\n\t                str = \"/\" + str;\n\t            if (control.host)\n\t                str = \"/@\" + encodeURIComponent(control.host) + str;\n\t            index.jump(str);\n\t        }\n\t\n\t        function perform_track(child) {\n\t            var hash;\n\t            var current_frame = index.current_frame();\n\t            /* Note that we ignore tracknig for old shell code */\n\t            if (current_frame && current_frame.contentWindow === child &&\n\t                child.name && child.name.indexOf(\"/shell/shell\") === -1) {\n\t                hash = child.location.hash;\n\t                if (hash.indexOf(\"#\") === 0)\n\t                    hash = hash.substring(1);\n\t                if (hash === \"/\")\n\t                    hash = \"\";\n\t                index.jump({ hash: hash });\n\t            }\n\t        }\n\t\n\t        function on_unload(ev) {\n\t            var source = source_by_name[ev.target.defaultView.name];\n\t            if (source)\n\t                unregister(source);\n\t        }\n\t\n\t        function on_hashchange(ev) {\n\t            var source = source_by_name[ev.target.name];\n\t            if (source)\n\t                perform_track(source.window);\n\t        }\n\t\n\t        function on_load(ev) {\n\t            var source = source_by_name[ev.target.contentWindow.name];\n\t            if (source)\n\t                perform_track(source.window);\n\t        }\n\t\n\t        function unregister(source) {\n\t            var child = source.window;\n\t            cockpit.kill(null, child.name);\n\t            var frame = child.frameElement;\n\t            if (frame)\n\t                frame.removeEventListener(\"load\", on_load);\n\t            child.removeEventListener(\"unload\", on_unload);\n\t            child.removeEventListener(\"hashchange\", on_hashchange);\n\t            delete source_by_seed[source.channel_seed];\n\t            delete source_by_name[source.name];\n\t        }\n\t\n\t        function register(child) {\n\t            var host, name = child.name || \"\";\n\t            if (name.indexOf(\"cockpit1:\") === 0)\n\t                host = name.substring(9).split(\"/\")[0];\n\t            if (!name || !host) {\n\t                console.warn(\"invalid child window name\", child, name);\n\t                return;\n\t            }\n\t\n\t            unique_id += 1;\n\t            var seed = (cockpit.transport.options[\"channel-seed\"] || \"undefined:\") + unique_id + \"!\";\n\t            var source = {\n\t                name: name,\n\t                window: child,\n\t                channel_seed: seed,\n\t                default_host: host,\n\t                inited: false,\n\t            };\n\t            source_by_seed[seed] = source;\n\t            source_by_name[name] = source;\n\t\n\t            var frame = child.frameElement;\n\t            frame.addEventListener(\"load\", on_load);\n\t            child.addEventListener(\"unload\", on_unload);\n\t            child.addEventListener(\"hashchange\", on_hashchange);\n\t\n\t            /*\n\t             * Setting the \"data-loaded\" attribute helps the testsuite\n\t             * know when it can switch into the frame and inject its\n\t             * own additions.\n\t             */\n\t            frame.setAttribute('data-loaded', '1');\n\t\n\t            perform_track(child);\n\t            phantom_checkpoint();\n\t\n\t            index.navigate();\n\t            return source;\n\t        }\n\t\n\t        function message_handler(event) {\n\t            if (event.origin !== origin)\n\t                return;\n\t\n\t            var data = event.data;\n\t            var child = event.source;\n\t            if (!child || typeof data !== \"string\")\n\t                return;\n\t\n\t            var source = source_by_name[child.name];\n\t\n\t            /* Closing the transport */\n\t            if (data.length === 0) {\n\t                if (source)\n\t                    unregister(source);\n\t                return;\n\t            }\n\t\n\t            /* A control message */\n\t            if (data[0] == '\\n') {\n\t                var control = JSON.parse(data.substring(1));\n\t                if (control.command === \"init\") {\n\t                    if (source)\n\t                        unregister(source);\n\t                    source = register(child);\n\t                    if (source) {\n\t                        var reply = $.extend({ }, cockpit.transport.options,\n\t                            { command: \"init\", \"host\": source.default_host, \"channel-seed\": source.channel_seed }\n\t                        );\n\t                        child.postMessage(\"\\n\" + JSON.stringify(reply), origin);\n\t                        source.inited = true;\n\t\n\t                        /* If this new frame is not the current one, tell it */\n\t                        if (child.frameElement != index.current_frame())\n\t                            self.hint(child.frameElement.contentWindow, { \"hidden\": true });\n\t                    }\n\t\n\t                } else if (control.command === \"jump\") {\n\t                    perform_jump(child, control);\n\t                    return;\n\t\n\t                } else if (control.command === \"hint\") {\n\t                    /* watchdog handles current host for now */\n\t                    if (control.hint == \"restart\" && control.host != cockpit.transport.host)\n\t                        index.expect_restart(control.host);\n\t                    return;\n\t                } else if (control.command == \"oops\") {\n\t                    index.show_oops();\n\t                    return;\n\t\n\t                /* Only control messages with a channel are forwardable */\n\t                } else if (control.channel === undefined) {\n\t                    return;\n\t\n\t                /* Add the child's group to all open channel messages */\n\t                } else if (control.command == \"open\") {\n\t                    control.group = child.name;\n\t                    data = \"\\n\" + JSON.stringify(control);\n\t                }\n\t            }\n\t\n\t            if (!source) {\n\t                console.warn(\"child frame \" + child.name + \" sending data without init\");\n\t                return;\n\t            }\n\t\n\t            /* Everything else gets forwarded */\n\t            cockpit.transport.inject(data);\n\t        }\n\t\n\t\n\t        self.start = function start(messages) {\n\t            window.addEventListener(\"message\", message_handler, false);\n\t            for (var i = 0, len = messages.length; i < len; i++)\n\t                message_handler(messages[i]);\n\t        };\n\t\n\t        self.hint = function hint(child, data) {\n\t            var message, source = source_by_name[child.name];\n\t            if (source && source.inited) {\n\t                data.command = \"hint\";\n\t                message = \"\\n\" + JSON.stringify(data);\n\t                source.window.postMessage(message, origin);\n\t            }\n\t        };\n\t    }\n\t\n\t    /*\n\t     * New instances of Index must be created by new_index_from_proto\n\t     * and the caller must include a navigation function in the given\n\t     * prototype. That function will be called by by Frames and\n\t     * Router to actually perform any navigation action.\n\t     *\n\t     * As a convenience, common menu items can be setup by adding the\n\t     * selector to be used to hook them up. The accepted selectors\n\t     * are.\n\t     * oops_sel, logout_sel, language_sel, brand_sel, about_sel,\n\t     * user_sel, account_sel\n\t     *\n\t     * Emits \"disconnect\" and \"expect_restart\" signals, that should be\n\t     * handled by the caller.\n\t     */\n\t    function Index() {\n\t        var self = this;\n\t        var current_frame;\n\t\n\t        if (typeof self.navigate !== \"function\")\n\t            throw \"Index requires a prototype with a navigate function\";\n\t\n\t        self.frames = new Frames(self);\n\t        self.router = new Router(self);\n\t\n\t        /* Watchdog for disconnect */\n\t        var watchdog = cockpit.channel({ \"payload\": \"null\" });\n\t        $(watchdog).on(\"close\", function(event, options) {\n\t            var watchdog_problem = options.problem || \"disconnected\";\n\t            console.warn(\"transport closed: \" + watchdog_problem);\n\t            $(self).triggerHandler(\"disconnect\", watchdog_problem);\n\t        });\n\t\n\t        /* Handles an href link as seen below */\n\t        $(document).on(\"click\", \"a[href]\", function(ev) {\n\t            var a = this;\n\t            if (window.location.host === a.host) {\n\t                self.jump(a.getAttribute('href'));\n\t                ev.preventDefault();\n\t                phantom_checkpoint();\n\t            }\n\t        });\n\t\n\t        if (window.navigator.userAgent.indexOf(\"PhantomJS\") == -1) {\n\t            var old_onerror = window.onerror;\n\t            window.onerror = function cockpit_error_handler(msg, url, line) {\n\t                self.show_oops();\n\t                phantom_checkpoint();\n\t                if (old_onerror)\n\t                    return old_onerror(msg, url, line);\n\t                return false;\n\t            };\n\t        }\n\t\n\t        /*\n\t         * Navigation is driven by state objects, which are used with pushState()\n\t         * and friends. The state is the canonical navigation location, and not\n\t         * the URL. Only when no state has been pushed or we are arriving from\n\t         * a link, do we parse the state from the URL.\n\t         *\n\t         * Each state object has:\n\t         *   host: a machine host\n\t         *   component: the stripped component to load\n\t         *   hash: the hash to pass to the component\n\t         *   sidebar: set to true to hint that we want a component with a sidebar\n\t         *\n\t         * If state.sidebar is set, and no component has yet been chosen for the\n\t         * given state, then we try to find one that would show a sidebar.\n\t         */\n\t\n\t        /* Encode navigate state into a string\n\t         * If with_root is true the configured\n\t         * url root will be added to the generated\n\t         * url. with_root should be used when\n\t         * navigating to a new url or updating\n\t         * history, but is not needed when simply\n\t         * generating a string for a link.\n\t         */\n\t        function encode(state, sidebar, with_root) {\n\t            var path = [];\n\t            if (state.host && (sidebar || state.host !== \"localhost\"))\n\t                path.push(\"@\" + state.host);\n\t            if (state.component)\n\t                path.push.apply(path, state.component.split(\"/\"));\n\t            var string = cockpit.location.encode(path, null, with_root);\n\t            if (state.hash && state.hash !== \"/\")\n\t                string += \"#\" + state.hash;\n\t            return string;\n\t        }\n\t\n\t        /* Decodes navigate state from a string */\n\t        function decode(string) {\n\t            var state = { version: \"v1\", hash: \"\" };\n\t            var pos = string.indexOf(\"#\");\n\t            if (pos !== -1) {\n\t                state.hash = string.substring(pos + 1);\n\t                string = string.substring(0, pos);\n\t            }\n\t            if (string[0] != '/')\n\t                string = \"/\" + string;\n\t            var path = cockpit.location.decode(string);\n\t            if (path[0] && path[0][0] == \"@\") {\n\t                state.host = path.shift().substring(1);\n\t                state.sidebar = true;\n\t            } else {\n\t                state.host = \"localhost\";\n\t            }\n\t            if (path.length && path[path.length - 1] == \"index\")\n\t                path.pop();\n\t            state.component = path.join(\"/\");\n\t            return state;\n\t        }\n\t\n\t        function build_navbar() {\n\t            var navbar = $(\"#content-navbar\");\n\t\n\t            function links(component) {\n\t                var a = $(\"<a>\")\n\t                    .attr(\"href\", self.href({ host: \"localhost\", component: component.path }))\n\t                    .text(component.label);\n\t                return $(\"<li class='dashboard-link'>\")\n\t                    .attr(\"data-component\", component.path)\n\t                    .append(a);\n\t            }\n\t\n\t            var machine, items = { };\n\t            if (shell_embedded) {\n\t                navbar.hide();\n\t            } else {\n\t                var local_compiled = new CompiledComponants();\n\t                local_compiled.load(cockpit.manifests, \"dashboard\");\n\t                navbar.append(local_compiled.ordered(\"dashboard\").map(links));\n\t            }\n\t        }\n\t\n\t        self.recalculate_layout = function() {\n\t            var topnav = $('#topnav');\n\t            var sidebar = $('#sidebar');\n\t            var content = $('#content');\n\t\n\t            var window_height = $(window).height();\n\t            var topnav_height = topnav.height();\n\t\n\t            var y = window_height - topnav_height;\n\t            $(current_frame).height(Math.floor(y));\n\t            sidebar.height(y);\n\t\n\t            var sidebar_width = sidebar.is(':visible') ? sidebar.outerWidth() : 0;\n\t            content.css(\"margin-left\", sidebar_width + \"px\");\n\t        };\n\t\n\t        self.retrieve_state = function() {\n\t            var state = window.history.state;\n\t            if (!state || state.version !== \"v1\") {\n\t                if (shell_embedded)\n\t                    state = decode(\"/\" + window.location.hash);\n\t                else\n\t                    state = decode(window.location.pathname + window.location.hash);\n\t            }\n\t            return state;\n\t        };\n\t\n\t        /* Jumps to a given navigate state */\n\t        self.jump = function (state, replace) {\n\t            if (typeof (state) === \"string\")\n\t                state = decode(state);\n\t\n\t            var current = self.retrieve_state();\n\t\n\t            /* Make sure we have the data we need */\n\t            if (!state.host)\n\t                state.host = current.host || \"localhost\";\n\t            if (!(\"component\" in state))\n\t                state.component = current.component || \"\";\n\t\n\t            var target;\n\t            var history = window.history;\n\t            var frame_change = (state.host !== current.host ||\n\t                                state.component !== current.component);\n\t\n\t            if (frame_change && !state.hash) {\n\t                state.hash = self.frames.lookup_component_hash(state.host,\n\t                                                               state.component);\n\t            }\n\t\n\t            if (shell_embedded)\n\t                target = window.location;\n\t            else\n\t                target = encode(state, null, true);\n\t\n\t            if (replace) {\n\t                history.replaceState(state, \"\", target);\n\t                return false;\n\t            }\n\t\n\t\n\t            if (frame_change || state.hash !== current.hash) {\n\t                history.pushState(state, \"\", target);\n\t                self.navigate(state, true);\n\t                return true;\n\t            }\n\t\n\t            return false;\n\t        };\n\t\n\t        /* Build an href for use in an <a> */\n\t        self.href = function (state, sidebar) {\n\t            return encode(state, sidebar);\n\t        };\n\t\n\t        self.show_oops = function () {\n\t            if (self.oops_sel)\n\t                $(self.oops_sel).show();\n\t        };\n\t\n\t        self.current_frame = function (frame) {\n\t            if (frame !== undefined) {\n\t                if (current_frame !== frame) {\n\t                    if (current_frame && current_frame.contentWindow)\n\t                        self.router.hint(current_frame.contentWindow, { \"hidden\": true });\n\t                    if (frame && frame.contentWindow)\n\t                        self.router.hint(frame.contentWindow, { \"hidden\": false });\n\t                }\n\t                current_frame = frame;\n\t            }\n\t            return current_frame;\n\t        };\n\t\n\t        self.start = function() {\n\t            /* window.messages is initialized in shell/bundle.js */\n\t            var messages = window.messages;\n\t            if (messages)\n\t                messages.cancel();\n\t            self.router.start(messages || []);\n\t        };\n\t\n\t        self.ready = function () {\n\t            $(window).on(\"popstate\", function(ev) {\n\t                self.navigate(ev.state, true);\n\t            });\n\t\n\t            $(window).on('resize', function () {\n\t                self.recalculate_layout();\n\t            });\n\t\n\t            build_navbar();\n\t            self.navigate();\n\t            cockpit.translate();\n\t            $(\"body\").show();\n\t        };\n\t\n\t        self.expect_restart = function (host) {\n\t            $(self).triggerHandler(\"expect_restart\", host);\n\t        };\n\t\n\t        /* Menu items */\n\t        /* The oops bar */\n\t        function setup_oops(id) {\n\t            var oops = $(id);\n\t            if (!oops)\n\t                return;\n\t            oops.children(\"a\").on(\"click\", function() {\n\t                $(\"#error-popup-title\").text(_(\"Unexpected error\"));\n\t                var details = _(\"Cockpit had an unexpected internal error. <br/><br/>You can try restarting Cockpit by pressing refresh in your browser. The javascript console contains details about this error (<b>Ctrl-Shift-J</b> in most browsers).\");\n\t                $(\"#error-popup-message\").html(details);\n\t                $('#error-popup').modal('show');\n\t            });\n\t        }\n\t\n\t        /* Branding */\n\t        function setup_brand(id, default_title) {\n\t            var os_release = JSON.parse(window.localStorage['os-release'] || \"{}\");\n\t\n\t            var style, elt = $(id)[0];\n\t            if (elt)\n\t                style = window.getComputedStyle(elt);\n\t            if (!style)\n\t                return;\n\t\n\t            var len, content = style.content;\n\t            if (content && content != \"none\" && content != \"normal\") {\n\t                len = content.length;\n\t                if ((content[0] === '\"' || content[0] === '\\'') &&\n\t                    len > 2 && content[len - 1] === content[0])\n\t                    content = content.substr(1, len - 2);\n\t                elt.innerHTML = cockpit.format(content, os_release) || default_title;\n\t                return $(elt).text();\n\t            }\n\t        }\n\t\n\t        /* Logout link */\n\t        function setup_logout(id) {\n\t            $(id).on(\"click\", function() {\n\t                cockpit.logout();\n\t            });\n\t        }\n\t\n\t        /* Display language dialog */\n\t        function setup_language(id) {\n\t            /*\n\t             * Note that we don't go ahead and load all the po files in order\n\t             * to produce this list. Perhaps we would include it somewhere in a\n\t             * separate automatically generated file. Need to see.\n\t             */\n\t            var manifest = cockpit.manifests[\"shell\"] || { };\n\t            $(\".display-language-menu\").toggle(!!manifest.locales);\n\t            var language = document.cookie.replace(/(?:(?:^|.*;\\s*)CockpitLang\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n\t            if (!language)\n\t                language = \"en-us\";\n\t            $.each(manifest.locales || { }, function(code, name) {\n\t                var el = $(\"<option>\").text(name).val(code);\n\t                if (code == language)\n\t                    el.attr(\"selected\", \"true\");\n\t                $(\"#display-language-list\").append(el);\n\t            });\n\t\n\t            $(\"#display-language-select-button\").on(\"click\", function(event) {\n\t                var code_to_select = $(\"#display-language-list\").val();\n\t                var cookie = \"CockpitLang=\" + encodeURIComponent(code_to_select) +\n\t                             \"; path=/; expires=Sun, 16 Jul 3567 06:23:41 GMT\";\n\t                document.cookie = cookie;\n\t                window.localStorage.setItem(\"cockpit.lang\", code_to_select);\n\t                window.location.reload(true);\n\t                return false;\n\t            });\n\t\n\t            $(id).on(\"shown.bs.modal\", function() {\n\t                $(\"display-language-list\").focus();\n\t                phantom_checkpoint();\n\t            });\n\t        }\n\t\n\t        /* About dialog */\n\t        function setup_about(id) {\n\t            $(cockpit.info).on(\"changed\", function() {\n\t                $(id).text(cockpit.info.version);\n\t                phantom_checkpoint();\n\t            });\n\t        }\n\t\n\t        /* Account link */\n\t        function setup_account(id, user) {\n\t            $(id).on(\"click\", function() {\n\t                self.jump({ host: \"localhost\", component: \"users\", hash: \"/\" + user.name });\n\t            }).show();\n\t        }\n\t\n\t        /* User information */\n\t        function setup_user(id, user) {\n\t            $(id).text(user.full_name || user.name || '???');\n\t\n\t            var is_root = (user.name == \"root\");\n\t            var is_not_root = (user.name && !is_root);\n\t            $('#deauthorize-item').toggle(is_not_root);\n\t        }\n\t\n\t        if (self.oops_sel)\n\t            setup_oops(self.oops_sel);\n\t\n\t        if (self.logout_sel)\n\t            setup_logout(self.logout_sel);\n\t\n\t        if (self.language_sel)\n\t            setup_language(self.language_sel);\n\t\n\t        var cal_title;\n\t        if (self.brand_sel) {\n\t            cal_title = setup_brand(self.brand_sel, self.default_title);\n\t            if (cal_title)\n\t                self.default_title = cal_title;\n\t        }\n\t\n\t        if (self.about_sel)\n\t            setup_about(self.about_sel);\n\t\n\t        if (self.user_sel || self.account_sel) {\n\t            cockpit.user().done(function (user) {\n\t                if (self.user_sel)\n\t                    setup_user(self.user_sel, user);\n\t                if (self.account_sel)\n\t                    setup_account(self.account_sel, user);\n\t            });\n\t        }\n\t    }\n\t\n\t    function CompiledComponants() {\n\t        var self = this;\n\t        self.items = {};\n\t\n\t        self.load = function(manifests, section) {\n\t            $.each(manifests || { }, function(name, manifest) {\n\t                $.each(manifest[section] || { }, function(prop, info) {\n\t                    var item = {\n\t                        section: section,\n\t                        label: cockpit.gettext(info.label) || prop,\n\t                        order: info.order === undefined ? 1000 : info.order,\n\t                        wants: info.wants\n\t                    };\n\t                    if (info.path)\n\t                        item.path = info.path.replace(/\\.html$/, \"\");\n\t                    else\n\t                        item.path = name + \"/\" + prop;\n\t                    if (item.path.indexOf(\"/\") === -1)\n\t                        item.path = name + \"/\" + item.path;\n\t                    if (item.path.slice(-6) == \"/index\")\n\t                        item.path = item.path.slice(0, -6);\n\t                    self.items[item.path] = item;\n\t                });\n\t            });\n\t        };\n\t\n\t\n\t        self.ordered = function(section) {\n\t            var x, list = [];\n\t            for (x in self.items) {\n\t                if (!section || self.items[x].section === section)\n\t                    list.push(self.items[x]);\n\t            }\n\t            list.sort(function(a, b) { return a.order - b.order; });\n\t            return list;\n\t        };\n\t\n\t        self.search = function(prop, value) {\n\t            var x;\n\t            for (x in self.items) {\n\t                if (self.items[x][prop] === value)\n\t                    return self.items[x];\n\t            }\n\t        };\n\t    }\n\t\n\t    function follow(arg) {\n\t        /* A promise of some sort */\n\t        if (arguments.length == 1 && typeof arg.then == \"function\") {\n\t            arg.then(function() { console.log.apply(console, arguments); },\n\t                     function() { console.error.apply(console, arguments); });\n\t            if (typeof arg.stream == \"function\")\n\t                arg.stream(function() { console.log.apply(console,arguments); });\n\t        }\n\t    }\n\t\n\t    var zz_value;\n\t\n\t    /* For debugging utility in the index window */\n\t    Object.defineProperties(window, {\n\t        cockpit: { value: cockpit },\n\t        zz: {\n\t            get: function() { return zz_value; },\n\t            set: function(val) { zz_value = val; follow(val); }\n\t        }\n\t    });\n\t\n\t    module.exports = {\n\t        new_index_from_proto: function (proto) {\n\t            var o = new Object(proto);\n\t            Index.call(o);\n\t            return o;\n\t        },\n\t\n\t        new_compiled: function () {\n\t            return new CompiledComponants();\n\t        },\n\t    };\n\t}());\n\n\n/***/ },\n\n/***/ 30:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar phantom_checkpoint = phantom_checkpoint || function () { };\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(3);\n\t    var cockpit = __webpack_require__(4);\n\t\n\t    var indexes = __webpack_require__(24);\n\t\n\t    var default_title = \"Cockpit\";\n\t    var manifest = cockpit.manifests[\"shell\"] || { };\n\t    if (manifest.title)\n\t        default_title = manifest.title;\n\t\n\t    indexes.simple_index({\n\t        brand_sel: \"#index-brand\",\n\t        logout_sel: \"#go-logout\",\n\t        oops_sel: \"#navbar-oops\",\n\t        language_sel: \"#display-language\",\n\t        about_sel: \"#about-version\",\n\t        default_title: default_title\n\t    });\n\t\n\t    var login_data = cockpit.localStorage.getItem('login-data', true);\n\t    if (login_data) {\n\t        var data = JSON.parse(login_data);\n\t        $(\"#content-user-name\").text(data[\"displayName\"]);\n\t    }\n\t}());\n\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// shell/index-no-machines.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f13a7360fab1e7384a6b","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 3\n// module chunks = 0 1 2","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 4\n// module chunks = 0 1 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar phantom_checkpoint = phantom_checkpoint || function () { };\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var base_index = require(\"./base_index\");\n\n    var _ = cockpit.gettext;\n\n    var shell_embedded = window.location.pathname.indexOf(\".html\") !== -1;\n\n    function MachinesIndex(index_options, machines, loader, mdialogs) {\n\n        if (!index_options)\n            index_options = {};\n\n        index_options.navigate = function (state, sidebar) {\n            return navigate(state, sidebar);\n        };\n        var index = base_index.new_index_from_proto(index_options);\n\n        /* Restarts */\n        $(index).on(\"expect_restart\", function (ev, host) {\n            loader.expect_restart(host);\n        });\n\n        /* Disconnection Dialog */\n        var watchdog_problem = null;\n        $(index).on(\"disconnect\", function (ev, problem) {\n            watchdog_problem = problem;\n            show_disconnected();\n        });\n\n        /* Is troubleshooting dialog open */\n        var troubleshooting = false;\n\n        /* Reconnect button */\n        $(\"#machine-reconnect\").on(\"click\", function(ev) {\n            if (watchdog_problem) {\n                cockpit.sessionStorage.clear();\n                window.location.reload(true);\n            } else {\n                navigate(null, true);\n            }\n        });\n\n        /* Troubleshoot pause navigation */\n        $(\"#troubleshoot-dialog\").on(\"show.bs.modal\", function(ev) {\n            troubleshooting = true;\n        });\n\n        /* Troubleshoot dialog close */\n        $(\"#troubleshoot-dialog\").on(\"hide.bs.modal\", function(ev) {\n            troubleshooting = false;\n            navigate(null, true);\n        });\n\n        /* Navigation */\n        var ready = false;\n        function on_ready() {\n            ready = true;\n            index.ready();\n        }\n\n        /* When the machine list is ready we start processing navigation */\n        $(machines)\n            .on(\"ready\", on_ready)\n            .on(\"added updated\", function(ev, machine) {\n                if (!machine.visible)\n                    index.frames.remove(machine);\n                else if (machine.problem)\n                    index.frames.remove(machine);\n\n                update_machines();\n                if (ready)\n                    navigate();\n            })\n            .on(\"removed\", function(ev, machine) {\n                index.frames.remove(machine);\n                update_machines();\n            });\n\n        if (machines.ready)\n            on_ready();\n\n        /* When only one machine this operates as a link */\n        $(\"#machine-link\").on(\"click\", function(ev) {\n            if (machines.list.length == 1) {\n                index.jump({ host: machines.list[0].address, sidebar: true, component: \"\" });\n                return false;\n            }\n        });\n\n        function show_disconnected() {\n            var current_frame = index.current_frame();\n\n            if (current_frame)\n                $(current_frame).hide();\n\n            $(\".curtains-ct .spinner\").toggle(false);\n            $(\"#machine-reconnect\").toggle(true);\n            $(\"#machine-troubleshoot\").toggle(false);\n            $(\".curtains-ct i\").toggle(true);\n            $(\".curtains-ct h1\").text(_(\"Disconnected\"));\n            $(\".curtains-ct p\").text(cockpit.message(watchdog_problem));\n            $(\".curtains-ct\").show();\n            $(\"#navbar-dropdown\").addClass(\"disabled\");\n            phantom_checkpoint();\n        }\n\n        /* Handles navigation */\n        function navigate(state, reconnect) {\n            var machine;\n\n            /* If this is a watchdog problem or we are troubleshooting\n             * let the dialog handle it */\n            if (watchdog_problem || troubleshooting)\n                return;\n\n            /* phantomjs has a problem retrieving state, so we allow it to be passed in */\n            if (!state)\n                state = index.retrieve_state();\n            machine = machines.lookup(state.host);\n\n            /* No such machine */\n            if (!machine) {\n                machine = {\n                    key: state.host,\n                    address: state.host,\n                    label: state.host,\n                    state: \"failed\",\n                    problem: \"not-found\",\n                };\n\n            /* Asked to reconnect to the machine */\n            } else if (!machine.visible) {\n                machine.state = \"failed\";\n                machine.problem = \"not-found\";\n            } else if (reconnect && machine.state !== \"connected\") {\n                loader.connect(state.host);\n            }\n\n            var compiled = compile(machine);\n            if (machine.manifests && !state.component)\n                state.component = choose_component(state, compiled);\n\n            update_navbar(machine, state, compiled);\n            update_sidebar(machine, state, compiled);\n            update_frame(machine, state, compiled);\n\n            index.recalculate_layout();\n\n            /* Just replace the state, and URL */\n            index.jump(state, true);\n        }\n\n        function choose_component(state, compiled) {\n            var item, menu_items;\n            var single_host = machines.list.length <= 1;\n            var dashboards = compiled.ordered(\"dashboard\");\n\n            if (shell_embedded)\n                state.sidebar = true;\n\n            /* See if we should show a dashboard */\n            if (!state.sidebar && dashboards.length > 0) {\n                item = dashboards[0];\n                /* Don't chose a dashboard as a single host unless\n                 * it specifically supports that.\n                 */\n                if (item && (!single_host || item.wants !== \"multiple-machines\"))\n                    return item.path;\n                else\n                    item = null;\n            }\n\n            /* See if we can find something with currently selected label */\n            var label = $(\"#sidebar li.active a\").text();\n            if (label) {\n                item = compiled.search(\"label\", label);\n                if (item)\n                    return item.path;\n            }\n\n            /* Go for the first item */\n            menu_items = compiled.ordered(\"menu\");\n            if (menu_items.length > 0 && menu_items[0]) {\n                return menu_items[0].path;\n\n            /* If there is no menu items use a dashboard */\n            } else if (dashboards.length > 0) {\n                item = dashboards[0];\n                if (item) {\n                    state.sidebar = false;\n                    return item.path;\n                }\n            }\n\n            return \"system\";\n        }\n\n        function update_navbar(machine, state, compiled) {\n            $(\".dashboard-link\").each(function() {\n                var el = $(this);\n                el.toggleClass(\"active\", el.attr(\"data-component\") === state.component);\n            });\n\n            var hide;\n            if (machine && machine.static_hostname) {\n                hide = $(\".dashboard-link\").length < 2 && machines.list.length < 2;\n                $('#content-navbar').toggleClass(\"hidden\", hide);\n            } else {\n                $('#content-navbar').toggleClass(\"hidden\", false);\n            }\n\n            var item = compiled.items[state.component];\n            if (item && item.section == \"dashboard\") {\n                delete state.sidebar;\n                machine = null;\n            }\n\n            $(\"#machine-avatar\").attr(\"src\", machine && machine.avatar ? encodeURI(machine.avatar) :\n                                                \"../shell/images/server-small.png\");\n\n            var label;\n            if (machine) {\n                label = machine.label;\n            } else if (machines.list.length == 1) {\n                label = machines.list[0].label;\n            } else {\n                label = _(\"Machines\");\n            }\n            $(\"#machine-link span\").text(label);\n\n            var color;\n            if (machines.list.length == 1 || !machine)\n                color = \"transparent\";\n            else\n                color = machine.color || \"\";\n            $(\"#machine-color\").css(\"border-left-color\", color);\n\n            $(\"#machine-dropdown\").toggleClass(\"active\", !!machine);\n\n            /* Decide when to show the sidebar */\n            var sidebar = $(\"#sidebar\");\n\n            if (machine && machine.state == \"connected\")\n                sidebar.show();\n            else\n                sidebar.hide();\n        }\n\n        function update_sidebar(machine, state, compiled) {\n            function links(component) {\n                return $(\"<li>\")\n                    .toggleClass(\"active\", state.component === component.path)\n                    .append($(\"<a>\")\n                        .attr(\"href\", index.href({ host: machine.address, component: component.path }))\n                        .text(component.label));\n            }\n\n            var menu = compiled.ordered(\"menu\").map(links);\n            $(\"#sidebar-menu\").empty().append(menu);\n\n            var tools = compiled.ordered(\"tools\").map(links);\n            $(\"#sidebar-tools\").empty().append(tools);\n            $('#tools-panel li.active').parents('#tools-panel').collapse('show');\n        }\n\n        function update_title(label, machine) {\n            if (label)\n                label += \" - \";\n            else\n                label = \"\";\n            var suffix = index.default_title;\n            if (machine && machine.label)\n                suffix = machine.label;\n            document.title = label + suffix;\n        }\n\n        function update_frame(machine, state, compiled) {\n            var title, message, connecting, restarting;\n            var current_frame = index.current_frame();\n\n            if (machine.state != \"connected\") {\n                $(current_frame).hide();\n                current_frame = null;\n                index.current_frame(current_frame);\n\n                connecting = (machine.state == \"connecting\");\n                if (machine.restarting) {\n                    title = _(\"The machine is restarting\");\n                    message = \"\";\n                } else if (connecting) {\n                    title = _(\"Connecting to the machine\");\n                    message = \"\";\n                } else {\n                    title = _(\"Couldn't connect to the machine\");\n                    if (machine.problem == \"not-found\") {\n                        message = _(\"Cannot connect to an unknown machine\");\n                    } else {\n                        var error = machine.problem || machine.state;\n                        if (error)\n                            message = cockpit.message(error);\n                        else\n                            message = \"\";\n                    }\n                }\n\n                if (!machine.restarting && mdialogs.needs_troubleshoot(machine)) {\n                    $(\"#machine-troubleshoot\").off()\n                        .on(\"click\", function () {\n                            mdialogs.troubleshoot(\"troubleshoot-dialog\", machine);\n                        });\n                    $(\"#machine-troubleshoot\").show();\n                } else {\n                    $(\"#machine-troubleshoot\").hide();\n                }\n\n                restarting = !!machine.restarting;\n                $(\".curtains-ct\").show();\n                $(\".curtains-ct .spinner\").toggle(connecting || restarting);\n                $(\"#machine-reconnect\").toggle(!connecting && machine.problem != \"not-found\");\n                $(\".curtains-ct i\").toggle(!connecting && !restarting);\n                $(\".curtains-ct h1\").text(title);\n                $(\".curtains-ct p\").text(message);\n\n                $(\"#machine-spinner\").hide();\n\n                update_title(null, machine);\n\n                /* Fall through when connecting, and allow frame to load at same time*/\n                if (!connecting)\n                    return;\n            }\n\n            var hash = state.hash;\n            var component = state.component;\n\n            /* Old cockpit packages, used to be in shell/shell.html */\n            var compat;\n            if (machine && compiled.compat) {\n                compat = compiled.compat[component];\n                if (compat) {\n                    component = \"shell/shell\";\n                    hash = compat;\n                }\n            }\n\n            var frame;\n            if (component)\n                frame = index.frames.lookup(machine, component, hash);\n            if (frame != current_frame) {\n                $(current_frame).css('display', 'none');\n                index.current_frame(frame);\n            }\n\n            var label, item;\n            if (machine.state == \"connected\") {\n                $(\".curtains-ct\").hide();\n                $(\"#machine-spinner\").toggle(frame && !$(frame).attr(\"data-ready\"));\n                $(frame).css('display', 'block');\n                item = compiled.items[state.component];\n                label = item ? item.label : \"\";\n                update_title(label, machine);\n            }\n\n            phantom_checkpoint();\n        }\n\n        function update_machines() {\n            $(\"#machine-dropdown .caret\")\n                .toggle(machines.list.length > 1);\n\n            var machine_link = $(\"machine-link\");\n            if (machines.list.length > 1)\n                machine_link.attr(\"data-toggle\", \"dropdown\");\n            else\n                machine_link.removeAttr(\"data-toggle\");\n\n            var list = $(\"#machine-dropdown ul\");\n            var links = machines.list.map(function(machine) {\n                var avatar = $(\"<img>\").addClass(\"machine-avatar\")\n                            .attr(\"src\", encodeURI(machine.avatar));\n                var text = $(\"<span>\").text(machine.label);\n                return $(\"<li role='presentation'>\")\n                    .css(\"border-left-color\", machine.color || \"\")\n                    .append($(\"<a>\")\n                        .attr(\"role\", \"menuitem\")\n                        .attr(\"tabindex\", \"-1\")\n                        .attr(\"data-address\", machine.address)\n                        .attr(\"href\", index.href({ host: machine.address }, true))\n                        .append(avatar, text));\n                });\n            list.empty().append(links);\n        }\n\n        function compatibility(machine) {\n            if (!machine.manifests || machine.address === \"localhost\")\n                return null;\n\n            var shell = machine.manifests[\"shell\"] || { };\n            var menu = shell[\"menu\"] || { };\n            var tools = shell[\"tools\"] || { };\n\n            var mapping = { };\n\n            /* The following were included in shell/shell.html in old versions */\n            if (\"_host_\" in menu)\n                mapping[\"system/host\"] = \"/server\";\n            if (\"_init_\" in menu)\n                mapping[\"system/init\"] = \"/services\";\n            if (\"_network_\" in menu)\n                mapping[\"network/interfaces\"] = \"/networking\";\n            if (\"_storage_\" in menu)\n                mapping[\"storage/devices\"] = \"/storage\";\n            if (\"_users_\" in tools)\n                mapping[\"users/local\"] = \"/accounts\";\n\n            /* For Docker we have to guess ... some heuristics */\n            if (\"_storage_\" in menu || \"_init_\" in menu)\n                mapping[\"docker/containers\"] = \"/containers\";\n\n            return mapping;\n        }\n\n        function compile(machine) {\n            var compiled = base_index.new_compiled();\n            compiled.load(machine.manifests, \"tools\");\n            compiled.load(machine.manifests, \"dashboard\");\n            compiled.load(machine.manifests, \"menu\");\n            compiled.compat = compatibility(machine);\n            return compiled;\n        }\n\n        cockpit.transport.wait(function() {\n            index.start();\n        });\n    }\n\n    function SimpleIndex(index_options) {\n        if (!index_options)\n            index_options = {};\n\n        index_options.navigate = function (state, sidebar) {\n            return navigate(state, sidebar);\n        };\n        var default_title = index_options.default_title || \"Cockpit\";\n        var index = base_index.new_index_from_proto(index_options);\n        var compiled = base_index.new_compiled();\n\n        compiled.load(cockpit.manifests, \"dashboard\");\n\n        /* Disconnection Dialog */\n        var watchdog_problem = null;\n        $(index).on(\"disconnect\", function (ev, problem) {\n            watchdog_problem = problem;\n            show_disconnected();\n        });\n\n        /* Reconnect button */\n        $(\"#machine-reconnect\").on(\"click\", function(ev) {\n            cockpit.sessionStorage.clear();\n            window.location.reload(true);\n        });\n\n        function show_disconnected() {\n            var current_frame = index.current_frame();\n            if (current_frame)\n                $(current_frame).hide();\n\n            $(\".curtains-ct .spinner\").toggle(false);\n            $(\"#machine-reconnect\").toggle(true);\n            $(\".curtains-ct i\").toggle(true);\n            $(\".curtains-ct h1\").text(_(\"Disconnected\"));\n            $(\".curtains-ct p\").text(cockpit.message(watchdog_problem));\n            $(\".curtains-ct\").show();\n            $(\"#navbar-dropdown\").addClass(\"disabled\");\n            phantom_checkpoint();\n        }\n\n        index.ready();\n\n        /* Handles navigation */\n        function navigate(state, reconnect) {\n            var dashboards = compiled.ordered(\"dashboard\");\n\n            /* If this is a watchdog problem or we are troubleshooting\n             * let the dialog handle it */\n            if (watchdog_problem)\n                return;\n\n            /* phantomjs has a problem retrieving state, so we allow it to be passed in */\n            if (!state)\n                state = index.retrieve_state();\n\n            if (!state.component && dashboards.length > 0) {\n                state.component = dashboards[0].path;\n            }\n            update_navbar(state);\n            update_frame(state);\n\n            index.recalculate_layout();\n\n            /* Just replace the state, and URL */\n            index.jump(state, true);\n        }\n\n        function update_navbar(state) {\n            $(\".dashboard-link\").each(function() {\n                var el = $(this);\n                el.toggleClass(\"active\", el.attr(\"data-component\") === state.component);\n            });\n\n            var item = compiled.items[state.component];\n            delete state.sidebar;\n\n            $(\"#machine-link span\").text(default_title);\n            if ($(\".dashboard-link\").length < 2)\n                $('#content-navbar').toggleClass(\"hidden\", true);\n        }\n\n        function update_title(label) {\n            if (label)\n                label += \" - \";\n            else\n                label = \"\";\n            document.title = label + default_title;\n        }\n\n        function update_frame(state) {\n            var title;\n            var current_frame = index.current_frame();\n\n            var hash = state.hash;\n            var component = state.component;\n\n            var frame;\n            if (component)\n                frame = index.frames.lookup(null, component, hash);\n            if (frame != current_frame) {\n                $(current_frame).css('display', 'none');\n                index.current_frame(frame);\n            }\n\n            var label, item;\n            $(frame).css('display', 'block');\n            item = compiled.items[state.component];\n            label = item ? item.label : \"\";\n            update_title(label);\n\n            phantom_checkpoint();\n        }\n\n        cockpit.transport.wait(function() {\n            index.start();\n        });\n    }\n\n    module.exports = {\n        simple_index: function (options) {\n            return new SimpleIndex(options);\n        },\n        machines_index: function (options, machines_ins, loader, mdialogs) {\n            return new MachinesIndex(options, machines_ins, loader, mdialogs);\n        }\n    };\n\n    function message_queue(event) {\n        window.messages.push(event);\n    }\n\n    /* When we're being loaded into the index window we have additional duties */\n    if (document.documentElement.getAttribute(\"class\") === \"index-page\") {\n        /* Indicates to child frames that we are a cockpit1 router frame */\n        window.name = \"cockpit1\";\n\n        /* The same thing as above, but compatibility with old cockpit */\n        window.options = { sink: true, protocol: \"cockpit1\" };\n\n        /* While the index is initializing, snag any messages we receive from frames */\n        window.messages = [ ];\n\n        window.messages.cancel = function() {\n            window.removeEventListener(\"message\", message_queue, false);\n            window.messages = null;\n        };\n\n        window.addEventListener(\"message\", message_queue, false);\n    }\n\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/shell/indexes.js\n// module id = 24\n// module chunks = 0 1 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2015 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar phantom_checkpoint = phantom_checkpoint || function () { };\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var shell_embedded = window.location.pathname.indexOf(\".html\") !== -1;\n    var _ = cockpit.gettext;\n\n    function Frames(index) {\n        var self = this;\n\n        /* Lists of frames, by host */\n        var iframes = { };\n\n        function remove_frame(frame) {\n            $(frame.contentWindow).off();\n            $(frame).remove();\n        }\n        self.remove = function remove(machine) {\n            var address = machine.address;\n            if (!address)\n                address = \"localhost\";\n            var list = iframes[address];\n            if (list) {\n                delete iframes[address];\n                $.each(list, function(i, frame) {\n                    remove_frame(frame);\n                });\n            }\n        };\n\n        function frame_ready(frame, count) {\n            var ready = false;\n\n            window.clearTimeout(frame.timer);\n            frame.timer = null;\n\n            try {\n                ready = $(\"body\", frame.contentWindow.document).is(\":visible\");\n            } catch(ex) {\n                ready = true;\n            }\n\n            if (!count)\n                count = 0;\n            count += 1;\n            if (count > 50)\n                ready = true;\n\n            if (ready) {\n                if (frame.getAttribute(\"data-ready\") != \"1\") {\n                    frame.setAttribute(\"data-ready\", \"1\");\n                    if (count > 0)\n                        index.navigate();\n                }\n            } else {\n                frame.timer = window.setTimeout(function() {\n                    frame_ready(frame, count + 1);\n                }, 100);\n            }\n        }\n\n        self.lookup_component_hash = function(machine, component) {\n            var address, list, frame, src;\n\n            if (machine)\n                address = machine.address;\n\n            if (!address)\n                address = \"localhost\";\n\n            list = iframes[address];\n            if (list)\n                frame = list[component];\n\n            if (frame) {\n                src = frame.getAttribute('src');\n                if (src)\n                    return src.split(\"#\")[1];\n            }\n        };\n\n        self.lookup = function lookup(machine, component, hash) {\n            var host;\n            var address;\n            var new_frame = false;\n\n            if (machine) {\n                host = machine.connection_string;\n                address = machine.address;\n            }\n\n            if (!host)\n                host = \"localhost\";\n\n            if (!address)\n                address = host;\n\n            var list = iframes[address];\n            if (!list)\n                iframes[address] = list = { };\n\n            var name = \"cockpit1:\" + host + \"/\" + component;\n            var frame = list[component];\n            if (frame && frame.getAttribute(\"name\") != name) {\n                remove_frame(frame);\n                frame = null;\n            }\n\n            var wind, src;\n\n            /* A preloaded frame */\n            if (!frame) {\n                wind = window.frames[name];\n                if (wind)\n                    frame = wind.frameElement;\n                if (frame) {\n                    src = frame.getAttribute('src');\n                    frame.url = src.split(\"#\")[0];\n                    list[component] = frame;\n                }\n            }\n\n            /* Need to create a new frame */\n            if (!frame) {\n                new_frame = true;\n                frame = document.createElement(\"iframe\");\n                frame.setAttribute(\"class\", \"container-frame\");\n                frame.setAttribute(\"name\", name);\n                frame.style.display = \"none\";\n\n                var parts = component.split(\"/\");\n\n                var base, checksum;\n                if (machine)\n                    checksum = machine.checksum;\n                if (host === \"localhost\")\n                    base = \"..\";\n                else if (checksum)\n                    base = \"../../\" + checksum;\n                else\n                    base = \"../../@\" + host;\n\n                frame.url = base + \"/\" + component;\n                if (component.indexOf(\"/\") === -1)\n                    frame.url += \"/index\";\n                frame.url += \".html\";\n            }\n\n            if (!hash)\n                hash = \"/\";\n            src = frame.url + \"#\" + hash;\n            if (frame.getAttribute('src') != src)\n                frame.setAttribute('src', src);\n\n            /* Store frame only when fully setup */\n            if (new_frame) {\n                list[component] = frame;\n                $(\"#content\").append(frame);\n            }\n            frame_ready(frame);\n            return frame;\n        };\n    }\n\n    function Router(index) {\n        var self = this;\n\n        var unique_id = 0;\n        var origin = cockpit.transport.origin;\n        var source_by_seed = { };\n        var source_by_name = { };\n\n        cockpit.transport.filter(function(message, channel, control) {\n            var seed, source, pos;\n\n            /* Only control messages with a channel are forwardable */\n            if (control) {\n                if (control.channel !== undefined) {\n                    for (seed in source_by_seed)\n                        source_by_seed[seed].window.postMessage(message, origin);\n                }\n                return true; /* still deliver locally */\n\n            /* Forward message to relevant frame */\n            } else if (channel) {\n                pos = channel.indexOf('!');\n                if (pos !== -1) {\n                    seed = channel.substring(0, pos + 1);\n                    source = source_by_seed[seed];\n                    if (source) {\n                        source.window.postMessage(message, origin);\n                        return false; /* Stop delivery */\n                    }\n                }\n                /* Still deliver the message locally */\n                return true;\n            }\n        });\n\n        function perform_jump(child, control) {\n            var current_frame = index.current_frame();\n            if (child !== window) {\n                if (!current_frame || current_frame.contentWindow != child)\n                    return;\n            }\n            var str = control.location || \"\";\n            if (str[0] != \"/\")\n                str = \"/\" + str;\n            if (control.host)\n                str = \"/@\" + encodeURIComponent(control.host) + str;\n            index.jump(str);\n        }\n\n        function perform_track(child) {\n            var hash;\n            var current_frame = index.current_frame();\n            /* Note that we ignore tracknig for old shell code */\n            if (current_frame && current_frame.contentWindow === child &&\n                child.name && child.name.indexOf(\"/shell/shell\") === -1) {\n                hash = child.location.hash;\n                if (hash.indexOf(\"#\") === 0)\n                    hash = hash.substring(1);\n                if (hash === \"/\")\n                    hash = \"\";\n                index.jump({ hash: hash });\n            }\n        }\n\n        function on_unload(ev) {\n            var source = source_by_name[ev.target.defaultView.name];\n            if (source)\n                unregister(source);\n        }\n\n        function on_hashchange(ev) {\n            var source = source_by_name[ev.target.name];\n            if (source)\n                perform_track(source.window);\n        }\n\n        function on_load(ev) {\n            var source = source_by_name[ev.target.contentWindow.name];\n            if (source)\n                perform_track(source.window);\n        }\n\n        function unregister(source) {\n            var child = source.window;\n            cockpit.kill(null, child.name);\n            var frame = child.frameElement;\n            if (frame)\n                frame.removeEventListener(\"load\", on_load);\n            child.removeEventListener(\"unload\", on_unload);\n            child.removeEventListener(\"hashchange\", on_hashchange);\n            delete source_by_seed[source.channel_seed];\n            delete source_by_name[source.name];\n        }\n\n        function register(child) {\n            var host, name = child.name || \"\";\n            if (name.indexOf(\"cockpit1:\") === 0)\n                host = name.substring(9).split(\"/\")[0];\n            if (!name || !host) {\n                console.warn(\"invalid child window name\", child, name);\n                return;\n            }\n\n            unique_id += 1;\n            var seed = (cockpit.transport.options[\"channel-seed\"] || \"undefined:\") + unique_id + \"!\";\n            var source = {\n                name: name,\n                window: child,\n                channel_seed: seed,\n                default_host: host,\n                inited: false,\n            };\n            source_by_seed[seed] = source;\n            source_by_name[name] = source;\n\n            var frame = child.frameElement;\n            frame.addEventListener(\"load\", on_load);\n            child.addEventListener(\"unload\", on_unload);\n            child.addEventListener(\"hashchange\", on_hashchange);\n\n            /*\n             * Setting the \"data-loaded\" attribute helps the testsuite\n             * know when it can switch into the frame and inject its\n             * own additions.\n             */\n            frame.setAttribute('data-loaded', '1');\n\n            perform_track(child);\n            phantom_checkpoint();\n\n            index.navigate();\n            return source;\n        }\n\n        function message_handler(event) {\n            if (event.origin !== origin)\n                return;\n\n            var data = event.data;\n            var child = event.source;\n            if (!child || typeof data !== \"string\")\n                return;\n\n            var source = source_by_name[child.name];\n\n            /* Closing the transport */\n            if (data.length === 0) {\n                if (source)\n                    unregister(source);\n                return;\n            }\n\n            /* A control message */\n            if (data[0] == '\\n') {\n                var control = JSON.parse(data.substring(1));\n                if (control.command === \"init\") {\n                    if (source)\n                        unregister(source);\n                    source = register(child);\n                    if (source) {\n                        var reply = $.extend({ }, cockpit.transport.options,\n                            { command: \"init\", \"host\": source.default_host, \"channel-seed\": source.channel_seed }\n                        );\n                        child.postMessage(\"\\n\" + JSON.stringify(reply), origin);\n                        source.inited = true;\n\n                        /* If this new frame is not the current one, tell it */\n                        if (child.frameElement != index.current_frame())\n                            self.hint(child.frameElement.contentWindow, { \"hidden\": true });\n                    }\n\n                } else if (control.command === \"jump\") {\n                    perform_jump(child, control);\n                    return;\n\n                } else if (control.command === \"hint\") {\n                    /* watchdog handles current host for now */\n                    if (control.hint == \"restart\" && control.host != cockpit.transport.host)\n                        index.expect_restart(control.host);\n                    return;\n                } else if (control.command == \"oops\") {\n                    index.show_oops();\n                    return;\n\n                /* Only control messages with a channel are forwardable */\n                } else if (control.channel === undefined) {\n                    return;\n\n                /* Add the child's group to all open channel messages */\n                } else if (control.command == \"open\") {\n                    control.group = child.name;\n                    data = \"\\n\" + JSON.stringify(control);\n                }\n            }\n\n            if (!source) {\n                console.warn(\"child frame \" + child.name + \" sending data without init\");\n                return;\n            }\n\n            /* Everything else gets forwarded */\n            cockpit.transport.inject(data);\n        }\n\n\n        self.start = function start(messages) {\n            window.addEventListener(\"message\", message_handler, false);\n            for (var i = 0, len = messages.length; i < len; i++)\n                message_handler(messages[i]);\n        };\n\n        self.hint = function hint(child, data) {\n            var message, source = source_by_name[child.name];\n            if (source && source.inited) {\n                data.command = \"hint\";\n                message = \"\\n\" + JSON.stringify(data);\n                source.window.postMessage(message, origin);\n            }\n        };\n    }\n\n    /*\n     * New instances of Index must be created by new_index_from_proto\n     * and the caller must include a navigation function in the given\n     * prototype. That function will be called by by Frames and\n     * Router to actually perform any navigation action.\n     *\n     * As a convenience, common menu items can be setup by adding the\n     * selector to be used to hook them up. The accepted selectors\n     * are.\n     * oops_sel, logout_sel, language_sel, brand_sel, about_sel,\n     * user_sel, account_sel\n     *\n     * Emits \"disconnect\" and \"expect_restart\" signals, that should be\n     * handled by the caller.\n     */\n    function Index() {\n        var self = this;\n        var current_frame;\n\n        if (typeof self.navigate !== \"function\")\n            throw \"Index requires a prototype with a navigate function\";\n\n        self.frames = new Frames(self);\n        self.router = new Router(self);\n\n        /* Watchdog for disconnect */\n        var watchdog = cockpit.channel({ \"payload\": \"null\" });\n        $(watchdog).on(\"close\", function(event, options) {\n            var watchdog_problem = options.problem || \"disconnected\";\n            console.warn(\"transport closed: \" + watchdog_problem);\n            $(self).triggerHandler(\"disconnect\", watchdog_problem);\n        });\n\n        /* Handles an href link as seen below */\n        $(document).on(\"click\", \"a[href]\", function(ev) {\n            var a = this;\n            if (window.location.host === a.host) {\n                self.jump(a.getAttribute('href'));\n                ev.preventDefault();\n                phantom_checkpoint();\n            }\n        });\n\n        if (window.navigator.userAgent.indexOf(\"PhantomJS\") == -1) {\n            var old_onerror = window.onerror;\n            window.onerror = function cockpit_error_handler(msg, url, line) {\n                self.show_oops();\n                phantom_checkpoint();\n                if (old_onerror)\n                    return old_onerror(msg, url, line);\n                return false;\n            };\n        }\n\n        /*\n         * Navigation is driven by state objects, which are used with pushState()\n         * and friends. The state is the canonical navigation location, and not\n         * the URL. Only when no state has been pushed or we are arriving from\n         * a link, do we parse the state from the URL.\n         *\n         * Each state object has:\n         *   host: a machine host\n         *   component: the stripped component to load\n         *   hash: the hash to pass to the component\n         *   sidebar: set to true to hint that we want a component with a sidebar\n         *\n         * If state.sidebar is set, and no component has yet been chosen for the\n         * given state, then we try to find one that would show a sidebar.\n         */\n\n        /* Encode navigate state into a string\n         * If with_root is true the configured\n         * url root will be added to the generated\n         * url. with_root should be used when\n         * navigating to a new url or updating\n         * history, but is not needed when simply\n         * generating a string for a link.\n         */\n        function encode(state, sidebar, with_root) {\n            var path = [];\n            if (state.host && (sidebar || state.host !== \"localhost\"))\n                path.push(\"@\" + state.host);\n            if (state.component)\n                path.push.apply(path, state.component.split(\"/\"));\n            var string = cockpit.location.encode(path, null, with_root);\n            if (state.hash && state.hash !== \"/\")\n                string += \"#\" + state.hash;\n            return string;\n        }\n\n        /* Decodes navigate state from a string */\n        function decode(string) {\n            var state = { version: \"v1\", hash: \"\" };\n            var pos = string.indexOf(\"#\");\n            if (pos !== -1) {\n                state.hash = string.substring(pos + 1);\n                string = string.substring(0, pos);\n            }\n            if (string[0] != '/')\n                string = \"/\" + string;\n            var path = cockpit.location.decode(string);\n            if (path[0] && path[0][0] == \"@\") {\n                state.host = path.shift().substring(1);\n                state.sidebar = true;\n            } else {\n                state.host = \"localhost\";\n            }\n            if (path.length && path[path.length - 1] == \"index\")\n                path.pop();\n            state.component = path.join(\"/\");\n            return state;\n        }\n\n        function build_navbar() {\n            var navbar = $(\"#content-navbar\");\n\n            function links(component) {\n                var a = $(\"<a>\")\n                    .attr(\"href\", self.href({ host: \"localhost\", component: component.path }))\n                    .text(component.label);\n                return $(\"<li class='dashboard-link'>\")\n                    .attr(\"data-component\", component.path)\n                    .append(a);\n            }\n\n            var machine, items = { };\n            if (shell_embedded) {\n                navbar.hide();\n            } else {\n                var local_compiled = new CompiledComponants();\n                local_compiled.load(cockpit.manifests, \"dashboard\");\n                navbar.append(local_compiled.ordered(\"dashboard\").map(links));\n            }\n        }\n\n        self.recalculate_layout = function() {\n            var topnav = $('#topnav');\n            var sidebar = $('#sidebar');\n            var content = $('#content');\n\n            var window_height = $(window).height();\n            var topnav_height = topnav.height();\n\n            var y = window_height - topnav_height;\n            $(current_frame).height(Math.floor(y));\n            sidebar.height(y);\n\n            var sidebar_width = sidebar.is(':visible') ? sidebar.outerWidth() : 0;\n            content.css(\"margin-left\", sidebar_width + \"px\");\n        };\n\n        self.retrieve_state = function() {\n            var state = window.history.state;\n            if (!state || state.version !== \"v1\") {\n                if (shell_embedded)\n                    state = decode(\"/\" + window.location.hash);\n                else\n                    state = decode(window.location.pathname + window.location.hash);\n            }\n            return state;\n        };\n\n        /* Jumps to a given navigate state */\n        self.jump = function (state, replace) {\n            if (typeof (state) === \"string\")\n                state = decode(state);\n\n            var current = self.retrieve_state();\n\n            /* Make sure we have the data we need */\n            if (!state.host)\n                state.host = current.host || \"localhost\";\n            if (!(\"component\" in state))\n                state.component = current.component || \"\";\n\n            var target;\n            var history = window.history;\n            var frame_change = (state.host !== current.host ||\n                                state.component !== current.component);\n\n            if (frame_change && !state.hash) {\n                state.hash = self.frames.lookup_component_hash(state.host,\n                                                               state.component);\n            }\n\n            if (shell_embedded)\n                target = window.location;\n            else\n                target = encode(state, null, true);\n\n            if (replace) {\n                history.replaceState(state, \"\", target);\n                return false;\n            }\n\n\n            if (frame_change || state.hash !== current.hash) {\n                history.pushState(state, \"\", target);\n                self.navigate(state, true);\n                return true;\n            }\n\n            return false;\n        };\n\n        /* Build an href for use in an <a> */\n        self.href = function (state, sidebar) {\n            return encode(state, sidebar);\n        };\n\n        self.show_oops = function () {\n            if (self.oops_sel)\n                $(self.oops_sel).show();\n        };\n\n        self.current_frame = function (frame) {\n            if (frame !== undefined) {\n                if (current_frame !== frame) {\n                    if (current_frame && current_frame.contentWindow)\n                        self.router.hint(current_frame.contentWindow, { \"hidden\": true });\n                    if (frame && frame.contentWindow)\n                        self.router.hint(frame.contentWindow, { \"hidden\": false });\n                }\n                current_frame = frame;\n            }\n            return current_frame;\n        };\n\n        self.start = function() {\n            /* window.messages is initialized in shell/bundle.js */\n            var messages = window.messages;\n            if (messages)\n                messages.cancel();\n            self.router.start(messages || []);\n        };\n\n        self.ready = function () {\n            $(window).on(\"popstate\", function(ev) {\n                self.navigate(ev.state, true);\n            });\n\n            $(window).on('resize', function () {\n                self.recalculate_layout();\n            });\n\n            build_navbar();\n            self.navigate();\n            cockpit.translate();\n            $(\"body\").show();\n        };\n\n        self.expect_restart = function (host) {\n            $(self).triggerHandler(\"expect_restart\", host);\n        };\n\n        /* Menu items */\n        /* The oops bar */\n        function setup_oops(id) {\n            var oops = $(id);\n            if (!oops)\n                return;\n            oops.children(\"a\").on(\"click\", function() {\n                $(\"#error-popup-title\").text(_(\"Unexpected error\"));\n                var details = _(\"Cockpit had an unexpected internal error. <br/><br/>You can try restarting Cockpit by pressing refresh in your browser. The javascript console contains details about this error (<b>Ctrl-Shift-J</b> in most browsers).\");\n                $(\"#error-popup-message\").html(details);\n                $('#error-popup').modal('show');\n            });\n        }\n\n        /* Branding */\n        function setup_brand(id, default_title) {\n            var os_release = JSON.parse(window.localStorage['os-release'] || \"{}\");\n\n            var style, elt = $(id)[0];\n            if (elt)\n                style = window.getComputedStyle(elt);\n            if (!style)\n                return;\n\n            var len, content = style.content;\n            if (content && content != \"none\" && content != \"normal\") {\n                len = content.length;\n                if ((content[0] === '\"' || content[0] === '\\'') &&\n                    len > 2 && content[len - 1] === content[0])\n                    content = content.substr(1, len - 2);\n                elt.innerHTML = cockpit.format(content, os_release) || default_title;\n                return $(elt).text();\n            }\n        }\n\n        /* Logout link */\n        function setup_logout(id) {\n            $(id).on(\"click\", function() {\n                cockpit.logout();\n            });\n        }\n\n        /* Display language dialog */\n        function setup_language(id) {\n            /*\n             * Note that we don't go ahead and load all the po files in order\n             * to produce this list. Perhaps we would include it somewhere in a\n             * separate automatically generated file. Need to see.\n             */\n            var manifest = cockpit.manifests[\"shell\"] || { };\n            $(\".display-language-menu\").toggle(!!manifest.locales);\n            var language = document.cookie.replace(/(?:(?:^|.*;\\s*)CockpitLang\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n            if (!language)\n                language = \"en-us\";\n            $.each(manifest.locales || { }, function(code, name) {\n                var el = $(\"<option>\").text(name).val(code);\n                if (code == language)\n                    el.attr(\"selected\", \"true\");\n                $(\"#display-language-list\").append(el);\n            });\n\n            $(\"#display-language-select-button\").on(\"click\", function(event) {\n                var code_to_select = $(\"#display-language-list\").val();\n                var cookie = \"CockpitLang=\" + encodeURIComponent(code_to_select) +\n                             \"; path=/; expires=Sun, 16 Jul 3567 06:23:41 GMT\";\n                document.cookie = cookie;\n                window.localStorage.setItem(\"cockpit.lang\", code_to_select);\n                window.location.reload(true);\n                return false;\n            });\n\n            $(id).on(\"shown.bs.modal\", function() {\n                $(\"display-language-list\").focus();\n                phantom_checkpoint();\n            });\n        }\n\n        /* About dialog */\n        function setup_about(id) {\n            $(cockpit.info).on(\"changed\", function() {\n                $(id).text(cockpit.info.version);\n                phantom_checkpoint();\n            });\n        }\n\n        /* Account link */\n        function setup_account(id, user) {\n            $(id).on(\"click\", function() {\n                self.jump({ host: \"localhost\", component: \"users\", hash: \"/\" + user.name });\n            }).show();\n        }\n\n        /* User information */\n        function setup_user(id, user) {\n            $(id).text(user.full_name || user.name || '???');\n\n            var is_root = (user.name == \"root\");\n            var is_not_root = (user.name && !is_root);\n            $('#deauthorize-item').toggle(is_not_root);\n        }\n\n        if (self.oops_sel)\n            setup_oops(self.oops_sel);\n\n        if (self.logout_sel)\n            setup_logout(self.logout_sel);\n\n        if (self.language_sel)\n            setup_language(self.language_sel);\n\n        var cal_title;\n        if (self.brand_sel) {\n            cal_title = setup_brand(self.brand_sel, self.default_title);\n            if (cal_title)\n                self.default_title = cal_title;\n        }\n\n        if (self.about_sel)\n            setup_about(self.about_sel);\n\n        if (self.user_sel || self.account_sel) {\n            cockpit.user().done(function (user) {\n                if (self.user_sel)\n                    setup_user(self.user_sel, user);\n                if (self.account_sel)\n                    setup_account(self.account_sel, user);\n            });\n        }\n    }\n\n    function CompiledComponants() {\n        var self = this;\n        self.items = {};\n\n        self.load = function(manifests, section) {\n            $.each(manifests || { }, function(name, manifest) {\n                $.each(manifest[section] || { }, function(prop, info) {\n                    var item = {\n                        section: section,\n                        label: cockpit.gettext(info.label) || prop,\n                        order: info.order === undefined ? 1000 : info.order,\n                        wants: info.wants\n                    };\n                    if (info.path)\n                        item.path = info.path.replace(/\\.html$/, \"\");\n                    else\n                        item.path = name + \"/\" + prop;\n                    if (item.path.indexOf(\"/\") === -1)\n                        item.path = name + \"/\" + item.path;\n                    if (item.path.slice(-6) == \"/index\")\n                        item.path = item.path.slice(0, -6);\n                    self.items[item.path] = item;\n                });\n            });\n        };\n\n\n        self.ordered = function(section) {\n            var x, list = [];\n            for (x in self.items) {\n                if (!section || self.items[x].section === section)\n                    list.push(self.items[x]);\n            }\n            list.sort(function(a, b) { return a.order - b.order; });\n            return list;\n        };\n\n        self.search = function(prop, value) {\n            var x;\n            for (x in self.items) {\n                if (self.items[x][prop] === value)\n                    return self.items[x];\n            }\n        };\n    }\n\n    function follow(arg) {\n        /* A promise of some sort */\n        if (arguments.length == 1 && typeof arg.then == \"function\") {\n            arg.then(function() { console.log.apply(console, arguments); },\n                     function() { console.error.apply(console, arguments); });\n            if (typeof arg.stream == \"function\")\n                arg.stream(function() { console.log.apply(console,arguments); });\n        }\n    }\n\n    var zz_value;\n\n    /* For debugging utility in the index window */\n    Object.defineProperties(window, {\n        cockpit: { value: cockpit },\n        zz: {\n            get: function() { return zz_value; },\n            set: function(val) { zz_value = val; follow(val); }\n        }\n    });\n\n    module.exports = {\n        new_index_from_proto: function (proto) {\n            var o = new Object(proto);\n            Index.call(o);\n            return o;\n        },\n\n        new_compiled: function () {\n            return new CompiledComponants();\n        },\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/shell/base_index.js\n// module id = 25\n// module chunks = 0 1 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar phantom_checkpoint = phantom_checkpoint || function () { };\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var indexes = require(\"./indexes\");\n\n    var default_title = \"Cockpit\";\n    var manifest = cockpit.manifests[\"shell\"] || { };\n    if (manifest.title)\n        default_title = manifest.title;\n\n    indexes.simple_index({\n        brand_sel: \"#index-brand\",\n        logout_sel: \"#go-logout\",\n        oops_sel: \"#navbar-oops\",\n        language_sel: \"#display-language\",\n        about_sel: \"#about-version\",\n        default_title: default_title\n    });\n\n    var login_data = cockpit.localStorage.getItem('login-data', true);\n    if (login_data) {\n        var data = JSON.parse(login_data);\n        $(\"#content-user-name\").text(data[\"displayName\"]);\n    }\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/shell/index-no-machines.js\n// module id = 30\n// module chunks = 1"],"sourceRoot":""}