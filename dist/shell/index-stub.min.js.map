{"version":3,"sources":["webpack:///shell/index-stub.min.js","webpack:///webpack/bootstrap 39e1a4237ee5ce36f238?abbe*","webpack:///../pkg/lib/machines.js?2eba","webpack:///external \"jQuery\"?0cb8*","webpack:///external \"cockpit\"?478e*","webpack:///../pkg/lib/credentials.js?db9d","webpack:///../~/process/browser.js?286f","webpack:///../pkg/lib/patterns.js?8c25","webpack:///../pkg/lib/credentials-ssh-private-keys.sh?97e5","webpack:///../pkg/lib/machine-dialogs.js?15c5","webpack:///../pkg/lib/mustache.js?4126","webpack:///../bower_components/mustache/mustache.js?5583","webpack:///../pkg/lib/machine-add.html?c661","webpack:///../pkg/lib/machine-auth-failed.html?7e51","webpack:///../pkg/lib/machine-change-auth.html?2d6d","webpack:///../pkg/lib/machine-change-port.html?e6b9","webpack:///../pkg/lib/machine-color-picker.html?5898","webpack:///../pkg/lib/machine-invalid-hostkey.html?4967","webpack:///../pkg/lib/machine-not-supported.html?7405","webpack:///../pkg/lib/machine-sync-users.html?bab6","webpack:///../pkg/lib/machine-unknown-hostkey.html?7149","webpack:///../pkg/shell/indexes.js?a9ea*","webpack:///../pkg/shell/base_index.js?107d*","webpack:///../pkg/shell/index-stub.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","generate_session_key","host","session_prefix","Machines","storage","ev","key","storageArea","window","sessionStorage","refresh","JSON","parse","newValue","sync","machine","values","overlay","prop","desired","$","extend","shared","push","emit_ready","self","ready","last","flat","timeout","setTimeout","setItem","stringify","hosts","content","application","events","old_machine","machines","old_conns","connection_string","color","address","generate_connection_string","user","port","label","cockpit","transport","indexOf","replace","location","hostname","avatar","i","sel","len","length","triggerHandler","update_session_machine","skey","data","when","update_saved_machine","values_variant","variant","bridge","dbus","bus","superuser","mod","done","over","fail","error","console","color_in_use","norm","colors","merge","item","this","localhost","visible","manifests","addEventListener","value","getItem","add_key","host_key","known_hosts","file","known_hosts_path","modify","always","close","add","split_connection_string","unused_color","lookup","on_disk","change","hostnamed","conn_to","ex","warn","all","changes","Object","defineProperty","enumerable","get","sort","m1","m2","localeCompare","keys","parts","addr","user_spot","port_spot","lastIndexOf","substring","parseInt","isNaN","removeEventListener","Loader","session_only","process_session_key","split","connect","load_from_session_storage","session_loaded","k","process_session_machines","state","problem","restarting","checksum","updated","props","proxies","valid","PrettyHostname","StaticHostname","os","OperatingSystemPrettyName","isEmptyObject","kill","disconnect","removed","channels","on","whirl","request","open","request_manifest","ajax","url","dataType","cache","etag","getResponseHeader","request_hostname","static_hostname","proxy","wait","channel","options","payload","local","encodeURI","send","off","client","expect_restart","forEach","host_props","wrapped","data_unwrap","v","prefixedKey","instance","loader","input","div","document","createElement","style","getComputedStyle","getPropertyValue","caps","capabilities","allow_connection_string","inArray","has_auth_results","jQuery","process","Keys","watch","path","message","name","slice","event","clearInterval","proc","clearTimeout","script","lister","err","blocks","items","trim","line","parse_key","block","parse_info","type","comment","toUpperCase","join","size","fingerprint","home","old_pass","new_pass","two_pass","old_exps","new_exps","bad_exps","dfd","Deferred","buffer","sent_new","failure","_","reject","Error","promise","spawn","pty","environ","directory","resolve","constructor","stream","test","load","password","ask_exp","perm_exp","bad_exp","output","log","unload","setup","drop_privileges","preventDefault","body","target","parents","toggleClass","removeClass","find","hide","addClass","attr","onoff","show","text","val","undefined","first","click","keyCode","li","parent","index","children","eq","popover","row","field","string","rows","table","each","el","clone","append","hasClass","remove","gettext","keys_instance","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","e","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","run","Item","array","noop","nextTick","args","Array","arguments","prototype","apply","title","browser","env","argv","version","versions","addListener","once","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","unique","unique_number","Date","clear_errors","field_error","next","wrapper","is","insertBefore","selectpicker","appendTo","css","global_error","alert","toString","prependTo","footer","display_errors","errors","isArray","any","DialogWait","handle","disabled","clear_wait","ctl","removeAttr","display_wait","restore","cancelled","modal","update","arg","before","cancellation","cancel","controls","not","progress","onoff_refresh","x","andSelf","filter","buttons","createTextNode","onoff_change","onoff_value","resize_flex","slider","flex","total","part","update_value","check_overflow","offsetWidth","scrollWidth","setup_slider","parseFloat","getAttribute","set","s","String","setAttribute","hasAttribute","toLowerCase","offset","left","hitx","offsetX","clientX","outerWidth","width","pageX","trigger","setup_sliders","fn","dialog","action","update_privileged","perm","denied_message","placement","allowed","selector","allowed_key","html","tooltip","translate_and_init","tmpl","tmp","old","outerHTML","translated","mustache","full_address","machines_ins","Dialog","codes","address_or_label","change_content","template","error_options","old_instance","current_instance","current_template","AddMachine","SyncUsers","HostKey","ChangeAuth","MachinePort","Simple","promise_callback","success_callback","try_to_connect","conn_options","get_sel","child_selector","ret_txt","set_on_success","callback","set_goal","complete","render","address_data","context","context_title","strong","templates","translate","render_error","command","render_template","empty","failure_callback","promise_funcs","dialog_dfd","is_method_supported","methods","method","result","can_try_method","MachineColorPicker","selected_color","list","$div","$pop","div_pos","position","div_width","div_height","height","pop_width","pop_height","top","existing_error","check_address","evt","button","search","run_error","add_machine","dfp","msg","format","host_id_port","port_index","substr","invisible","addresses","manifest","limit","color_picker","nearlimit","placeholder","which","focus","change_port","update_host","q","then","inner","fp","key_host","allow_change","update_keys","key_div","login","change_login_type","stored","toggle","available","supported","machine_user","allows_password","can_sync","machines.allow_connection_string","sync_link","credentials","load_users","perm_failed","blank","t","Transfer","prepared","groups","raw","users","username","members","j","u","sync_users","needs_auth","remote_options","group","map","Commit","toggle_button","formated_groups","user_list","needs_root","checked","MachineDialogManager","default_codes","troubleshoot","target_id","needs_troubleshoot","render_dialog","render_color_picker","add_tmpl","auth_failed_tmpl","change_auth_tmpl","change_port_tmpl","color_picker_tmpl","invalid_hostkey_tmpl","not_supported_tmpl","sync_users_tmpl","unknown_hosts_tmpl","no-cockpit","not-supported","protocol-error","authentication-not-supported","authentication-failed","no-forwarding","unknown-hostkey","invalid-hostkey","not-found","sync-users","add-machine","auth-failed","change-auth","change-port","color-picker","new_manager","innerHTML","view","partials","to_html","clearCache","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","testRegExp","re","RegExp_test","isWhitespace","nonSpaceRe","isFunction","object","escapeRegExp","escapeHtml","entityMap","escapeTags","tags","RegExp","parseTemplate","stripSpace","hasTag","nonSpace","spaces","tokens","pop","spaceRe","start","chr","token","openSection","tagRes","scanner","Scanner","sections","eos","pos","scanUntil","charAt","scan","tagRe","whiteRe","eqRe","curlyRe","nestTokens","squashTokens","lastToken","squashedTokens","section","nestedTokens","collector","tail","Context","parentContext",".","Writer","Object_toString","&","<",">","\"","'","/","match","names","renderTokens","originalTemplate","subRender","jlen","escape","defaultWriter","phantom_checkpoint","MachinesIndex","index_options","mdialogs","on_ready","show_disconnected","current_frame","watchdog_problem","navigate","reconnect","troubleshooting","retrieve_state","compiled","compile","component","choose_component","update_navbar","update_sidebar","update_frame","recalculate_layout","jump","menu_items","single_host","dashboards","ordered","shell_embedded","sidebar","wants","links","href","menu","tools","collapse","update_title","suffix","default_title","connecting","compat","hash","frame","frames","update_machines","machine_link","compatibility","shell","mapping","base_index","new_compiled","new_index_from_proto","clear","reload","SimpleIndex","message_queue","messages","pathname","simple_index","machines_index","documentElement","sink","protocol","Frames","remove_frame","contentWindow","frame_ready","count","timer","iframes","lookup_component_hash","src","new_frame","wind","frameElement","display","base","Router","perform_jump","child","control","str","encodeURIComponent","perform_track","on_unload","source","source_by_name","defaultView","unregister","on_hashchange","on_load","source_by_seed","channel_seed","register","unique_id","seed","default_host","inited","message_handler","origin","forward_command","reply","channel-seed","postMessage","hint","hidden","show_oops","inject","credential","authorize_changed","Index","encode","with_root","decode","shift","build_navbar","a","navbar","local_compiled","CompiledComponants","setup_oops","oops","details","setup_brand","os_release","localStorage","elt","setup_logout","logout","setup_language","locales","language","cookie","code","code_to_select","setup_about","info","setup_account","setup_user","full_name","is_root","is_not_root","router","watchdog","navigator","userAgent","old_onerror","onerror","topnav","window_height","topnav_height","y","Math","floor","sidebar_width","history","current","frame_change","replaceState","pushState","oops_sel","credential_sel","logout_sel","language_sel","cal_title","brand_sel","about_sel","user_sel","account_sel","order","b","follow","zz_value","defineProperties","zz","proto","o","machis","indexes","dialogs","no-host","login_data"],"mappings":"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","file":"shell/index-stub.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(33);\n\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */,\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(7);\n\t    var cockpit = __webpack_require__(8);\n\t\n\t    var mod = { };\n\t\n\t    var known_hosts_path = \"/var/lib/cockpit/known_hosts\";\n\t    /*\n\t     * We share the Machines state between multiple frames. Only\n\t     * one frame has the job of loading the state, usually index.js\n\t     * The Loader code below does all the loading.\n\t     *\n\t     * The data is stored in sessionStorage in a JSON object, like this\n\t     * {\n\t     *    content: name → info dict from bridge's /machines Machines property\n\t     *    overlay: extra data to augment and override on top of content\n\t     * }\n\t     *\n\t     * This uses sessionStorage rather than cockpit.sessionStorage\n\t     * because we don't ever want to write unprefixed keys.\n\t     */\n\t\n\t    var key = cockpit.sessionStorage.prefixedKey(\"v2-machines.json\");\n\t    var session_prefix = cockpit.sessionStorage.prefixedKey(\"v1-session-machine\");\n\t\n\t    function generate_session_key(host) {\n\t        return session_prefix + \"/\" + host;\n\t    }\n\t\n\t    function Machines() {\n\t        var self = this;\n\t\n\t        var flat = null;\n\t        self.ready = false;\n\t\n\t        /* parsed machine data */\n\t        var machines = { };\n\t\n\t        /* Data shared between Machines() instances */\n\t        var last = {\n\t            content: null,\n\t            overlay: {\n\t                localhost: {\n\t                    visible: true,\n\t                    manifests: cockpit.manifests\n\t                }\n\t            }\n\t        };\n\t\n\t        function storage(ev) {\n\t            if (ev.key === key && ev.storageArea === window.sessionStorage)\n\t                refresh(JSON.parse(ev.newValue));\n\t        }\n\t\n\t        window.addEventListener(\"storage\", storage);\n\t\n\t        window.setTimeout(function() {\n\t            var value = window.sessionStorage.getItem(key);\n\t            if (!self.ready && value)\n\t                refresh(JSON.parse(value));\n\t        });\n\t\n\t        var timeout = null;\n\t\n\t        function sync(machine, values, overlay) {\n\t            var desired = $.extend({ }, values || { }, overlay || { });\n\t            var prop;\n\t            for (prop in desired) {\n\t                if (machine[prop] !== desired[prop])\n\t                    machine[prop] = desired[prop];\n\t            }\n\t            for (prop in machine) {\n\t                if (machine[prop] !== desired[prop])\n\t                    delete machine[prop];\n\t            }\n\t            return machine;\n\t        }\n\t\n\t        function refresh(shared, push) {\n\t            if (!shared)\n\t                return;\n\t\n\t            var emit_ready = !self.ready;\n\t\n\t            self.ready = true;\n\t            last = shared;\n\t            flat = null;\n\t\n\t            if (push && !timeout) {\n\t                timeout = window.setTimeout(function() {\n\t                    timeout = null;\n\t                    window.sessionStorage.setItem(key, JSON.stringify(last));\n\t                }, 10);\n\t            }\n\t\n\t            var host, hosts = { };\n\t            var content = shared.content || { };\n\t            var overlay = shared.overlay || { };\n\t            for (host in content)\n\t                hosts[host] = true;\n\t            for (host in overlay)\n\t                hosts[host] = true;\n\t\n\t            var events = [];\n\t\n\t            var machine, application;\n\t            for (host in hosts) {\n\t                var old_machine = machines[host] || { };\n\t                var old_conns = old_machine.connection_string;\n\t\n\t                /* Invert logic for color, always respect what's on disk */\n\t                if (content[host] && content[host].color && overlay[host])\n\t                    delete overlay[host].color;\n\t\n\t                machine = sync(old_machine, content[host], overlay[host]);\n\t\n\t                /* Fill in defaults */\n\t                machine.key = host;\n\t                if (!machine.address)\n\t                    machine.address = host;\n\t\n\t                machine.connection_string = self.generate_connection_string(machine.user,\n\t                                                                            machine.port,\n\t                                                                            machine.address);\n\t\n\t                if (!machine.label) {\n\t                    if (host == \"localhost\" || host == \"localhost.localdomain\") {\n\t                        application = cockpit.transport.application();\n\t                        if (application.indexOf('cockpit+=') === 0)\n\t                            machine.label = application.replace('cockpit+=', '');\n\t                        else\n\t                            machine.label = window.location.hostname;\n\t                    } else {\n\t                        machine.label = host;\n\t                    }\n\t                }\n\t                if (!machine.avatar)\n\t                    machine.avatar = \"../shell/images/server-small.png\";\n\t\n\t                events.push([host in machines ? \"updated\" : \"added\",\n\t                            [machine, host, old_conns]]);\n\t                machines[host] = machine;\n\t            }\n\t\n\t            /* Remove any lost hosts */\n\t            for (host in machines) {\n\t                if (!(host in hosts)) {\n\t                    machine = machines[host];\n\t                    delete machines[host];\n\t                    delete overlay[host];\n\t                    events.push([\"removed\", [machine, host]]);\n\t                }\n\t            }\n\t\n\t            /* Fire off all events */\n\t            var i, sel = $(self), len = events.length;\n\t            for (i = 0; i < len; i++)\n\t                sel.triggerHandler(events[i][0], events[i][1]);\n\t            if (emit_ready)\n\t                $(self).triggerHandler(\"ready\");\n\t        }\n\t\n\t        function update_session_machine(machine, host, values) {\n\t            /* We don't save the whole machine object */\n\t            var skey = generate_session_key(host);\n\t            var data = $.extend({}, machine, values);\n\t            window.sessionStorage.setItem(skey, JSON.stringify(data));\n\t            self.overlay(host, values);\n\t            return cockpit.when([]);\n\t        }\n\t\n\t        function update_saved_machine(host, values) {\n\t            // wrap values in variants for D-Bus call\n\t            var values_variant = {};\n\t            for (var prop in values)\n\t                if (values[prop] !== null)\n\t                    values_variant[prop] = cockpit.variant(prop == \"visible\" ? 'b' : 's', values[prop]);\n\t\n\t            // FIXME: investigate re-using the proxy from Loader (runs in different frame/scope)\n\t            var bridge = cockpit.dbus(null, { bus: \"internal\", \"superuser\": \"try\" });\n\t            var mod = bridge.call(\"/machines\", \"cockpit.Machines\", \"Update\", [ \"99-webui.json\", host, values_variant ])\n\t                .done(function() {\n\t                    var prop, over = { };\n\t                    for (prop in values)\n\t                        over[prop] = null;\n\t                    self.overlay(host, over);\n\t                })\n\t                .fail(function(error) {\n\t                    console.error(\"failed to call cockpit.Machines.Update(): \", error);\n\t                });\n\t\n\t            return mod;\n\t        }\n\t\n\t        self.add_key = function(host_key) {\n\t            var known_hosts = cockpit.file(known_hosts_path, { superuser: \"try\" });\n\t            return known_hosts\n\t                .modify(function(data) {\n\t                    if (!data)\n\t                        data = \"\";\n\t\n\t                    return data + \"\\n\" + host_key;\n\t                })\n\t                .always(function() {\n\t                    known_hosts.close();\n\t                });\n\t        };\n\t\n\t        self.add = function add(connection_string, color) {\n\t            var values = self.split_connection_string(connection_string);\n\t            var host = values['address'];\n\t\n\t            values = $.extend({\n\t                        visible: true,\n\t                        color: color || self.unused_color(),\n\t                    }, values);\n\t\n\t            var machine = self.lookup(host);\n\t            if (machine)\n\t                machine.on_disk = true;\n\t\n\t            return self.change(values['address'], values);\n\t        };\n\t\n\t        self.unused_color = function unused_color() {\n\t            var i, len = mod.colors.length;\n\t            for (i = 0; i < len; i++) {\n\t                if (!color_in_use(mod.colors[i]))\n\t                    return mod.colors[i];\n\t            }\n\t            return \"gray\";\n\t        };\n\t\n\t        function color_in_use(color) {\n\t            var key, machine, norm = mod.colors.parse(color);\n\t            for (key in machines) {\n\t                machine = machines[key];\n\t                if (machine.color && mod.colors.parse(machine.color) == norm)\n\t                    return true;\n\t            }\n\t            return false;\n\t        }\n\t\n\t        function merge(item, values) {\n\t            for (var prop in values) {\n\t                if (values[prop] === null)\n\t                    delete item[prop];\n\t                else\n\t                    item[prop] = values[prop];\n\t            }\n\t        }\n\t\n\t        self.change = function change(host, values) {\n\t            var mod, hostnamed, call;\n\t            var machine = self.lookup(host);\n\t\n\t            if (values.label) {\n\t\n\t                var conn_to = host;\n\t                if (machine)\n\t                    conn_to = machine.connection_string;\n\t\n\t                if (!machine || machine.label !== values.label) {\n\t                    hostnamed = cockpit.dbus(\"org.freedesktop.hostname1\", { host: conn_to });\n\t                    call = hostnamed.call(\"/org/freedesktop/hostname1\", \"org.freedesktop.hostname1\",\n\t                                          \"SetPrettyHostname\", [ values.label, true ])\n\t                        .always(function() {\n\t                            hostnamed.close();\n\t                        })\n\t                        .fail(function(ex) {\n\t                            console.warn(\"couldn't set pretty host name: \" + ex);\n\t                        });\n\t                }\n\t            }\n\t\n\t            if (machine && !machine.on_disk)\n\t                mod = update_session_machine(machine, host, values);\n\t            else\n\t                mod = update_saved_machine(host, values);\n\t\n\t            if (call)\n\t                return cockpit.all(call, mod);\n\t\n\t            return mod;\n\t        };\n\t\n\t        self.data = function data(content) {\n\t            var host, changes = {};\n\t\n\t            for (host in content) {\n\t                changes[host] = $.extend({ }, last.overlay[host] || { });\n\t                merge(changes[host], { on_disk: true });\n\t            }\n\t\n\t            /* It's a full reload, so data not\n\t             * present is no longer from disk\n\t             */\n\t            for (host in machines) {\n\t                if (content && !content[host]) {\n\t                    changes[host] = $.extend({ }, last.overlay[host] || { });\n\t                    merge(changes[host], { on_disk: null });\n\t                }\n\t            }\n\t\n\t            refresh({ content: content,\n\t                      overlay: $.extend({ }, last.overlay, changes) }, true);\n\t        };\n\t\n\t        self.overlay = function overlay(host, values) {\n\t            var changes = { };\n\t            changes[host] = $.extend({ }, last.overlay[host] || { });\n\t            merge(changes[host], values);\n\t            refresh({\n\t                content: last.content,\n\t                overlay: $.extend({ }, last.overlay, changes)\n\t            }, true);\n\t        };\n\t\n\t        Object.defineProperty(self, \"list\", {\n\t            enumerable: true,\n\t            get: function get() {\n\t                var key;\n\t                if (!flat) {\n\t                    flat = [];\n\t                    for (key in machines) {\n\t                        if (machines[key].visible)\n\t                            flat.push(machines[key]);\n\t                    }\n\t                    flat.sort(function(m1, m2) {\n\t                        return m1.label.localeCompare(m2.label);\n\t                    });\n\t                }\n\t                return flat;\n\t            }\n\t        });\n\t\n\t        Object.defineProperty(self, \"addresses\", {\n\t            enumerable: true,\n\t            get: function get() {\n\t                return Object.keys(machines);\n\t            }\n\t        });\n\t\n\t        self.lookup = function lookup(address) {\n\t            var parts = self.split_connection_string(address);\n\t            return machines[parts.address || \"localhost\"] || null;\n\t        };\n\t\n\t        self.generate_connection_string = function (user, port, addr) {\n\t            var address = addr;\n\t            if (user)\n\t                address = user + \"@\" + address;\n\t\n\t            if (port)\n\t                address = address + \":\" + port;\n\t\n\t            return address;\n\t        };\n\t\n\t        self.split_connection_string = function(conn_to) {\n\t            var parts = {};\n\t            var user_spot = -1;\n\t            var port_spot = -1;\n\t\n\t            if (conn_to) {\n\t                user_spot = conn_to.lastIndexOf('@');\n\t                port_spot = conn_to.lastIndexOf(':');\n\t            }\n\t\n\t            if (user_spot > 0) {\n\t                parts.user = conn_to.substring(0, user_spot);\n\t                conn_to = conn_to.substring(user_spot+1);\n\t                port_spot = conn_to.lastIndexOf(':');\n\t            }\n\t\n\t            if (port_spot > -1) {\n\t                var port = parseInt(conn_to.substring(port_spot+1), 10);\n\t                if (!isNaN(port)) {\n\t                    parts.port = port;\n\t                    conn_to = conn_to.substring(0, port_spot);\n\t                }\n\t            }\n\t\n\t            parts.address = conn_to;\n\t            return parts;\n\t        };\n\t\n\t        self.close = function close() {\n\t            window.removeEventListener(\"storage\", storage);\n\t        };\n\t    }\n\t\n\t    function Loader(machines, session_only) {\n\t        var self = this;\n\t\n\t        /* Have we loaded from cockpit session */\n\t        var session_loaded = false;\n\t\n\t        /* File we are watching */\n\t        var file;\n\t\n\t        /* echo channels to each machine */\n\t        var channels = { };\n\t\n\t        /* hostnamed proxies to each machine, if hostnamed available */\n\t        var proxies = { };\n\t\n\t        function process_session_key(key, value) {\n\t            var host, values, machine;\n\t            var parts = key.split(\"/\");\n\t            if (parts[0] == session_prefix &&\n\t                parts.length === 2) {\n\t                    host = parts[1];\n\t                    if (value) {\n\t                        values = JSON.parse(value);\n\t                        machine = machines.lookup(host);\n\t                        if (!machine || !machine.on_disk)\n\t                            machines.overlay(host, values);\n\t                        else if (!machine.visible)\n\t                            machines.change(host, { visible: true });\n\t                        self.connect(host);\n\t                    }\n\t            }\n\t        }\n\t\n\t        function load_from_session_storage() {\n\t            var i;\n\t            session_loaded = true;\n\t            for (i = 0; i < window.sessionStorage.length; i++) {\n\t                var k = window.sessionStorage.key(i);\n\t                process_session_key(k, window.sessionStorage.getItem(k));\n\t            }\n\t        }\n\t\n\t        function process_session_machines(ev) {\n\t            if (ev.storageArea === window.sessionStorage)\n\t                process_session_key(ev.key || \"\", ev.newValue);\n\t        }\n\t        window.addEventListener(\"storage\", process_session_machines);\n\t\n\t        function state(host, value, problem) {\n\t            var values = { state: value, problem: problem };\n\t            if (value == \"connected\") {\n\t                values.restarting = false;\n\t            } else if (problem) {\n\t                values.manifests = null;\n\t                values.checksum = null;\n\t            }\n\t            machines.overlay(host, values);\n\t        }\n\t\n\t        $(machines).on(\"added\", updated);\n\t        $(machines).on(\"updated\", updated);\n\t        $(machines).on(\"removed\", removed);\n\t\n\t        function updated(ev, machine, host, old_conns) {\n\t            if (!machine) {\n\t                machine = machines.lookup(host);\n\t                if (!machine)\n\t                    return;\n\t            }\n\t\n\t            var props = proxies[host];\n\t            if (!props || !props.valid)\n\t                props = { };\n\t\n\t            var overlay = { };\n\t\n\t            if (!machine.color)\n\t                overlay.color = machines.unused_color();\n\t\n\t            var label = props.PrettyHostname || props.StaticHostname;\n\t            if (label && label !== machine.label)\n\t                overlay.label = label;\n\t\n\t            var os = props.OperatingSystemPrettyName;\n\t            if (os && os != machine.os)\n\t                overlay.os = props.OperatingSystemPrettyName;\n\t\n\t            if (!$.isEmptyObject(overlay))\n\t                machines.overlay(host, overlay);\n\t\n\t            /* Don't automatically reconnect failed machines */\n\t            if (machine.visible) {\n\t                if (old_conns && machine.connection_string != old_conns) {\n\t                    cockpit.kill(old_conns);\n\t                    self.disconnect(host);\n\t                    self.connect(host);\n\t                } else if (!machine.problem) {\n\t                    self.connect(host);\n\t                }\n\t            } else {\n\t                self.disconnect(host);\n\t            }\n\t        }\n\t\n\t        function removed(ev, machine, host) {\n\t            self.disconnect(host);\n\t        }\n\t\n\t        self.connect = function connect(host) {\n\t            var machine = machines.lookup(host);\n\t            if (!machine)\n\t                return;\n\t\n\t            var channel = channels[host];\n\t            if (channel)\n\t                return;\n\t\n\t            var options = {\n\t                host: machine.connection_string,\n\t                payload: \"echo\"\n\t            };\n\t\n\t            if (!machine.on_disk && machine.host_key) {\n\t                options['temp-session'] = false; /* Compatibility option */\n\t                options['session'] = 'shared';\n\t                options['host-key'] = machine.host_key;\n\t            }\n\t\n\t            channel = cockpit.channel(options);\n\t            channels[host] = channel;\n\t\n\t            var local = host === \"localhost\";\n\t\n\t            /* Request is null, and message is true when connected */\n\t            var request = null;\n\t            var open = local;\n\t            var problem = null;\n\t\n\t            var url;\n\t            if (!machine.manifests) {\n\t                if (machine.checksum)\n\t                    url = \"../../\" + machine.checksum + \"/manifests.json\";\n\t                else\n\t                    url = \"../../@\" + encodeURI(machine.connection_string) + \"/manifests.json\";\n\t            }\n\t\n\t            function whirl() {\n\t                if (!request && open)\n\t                    state(host, \"connected\", null);\n\t                else if (!problem)\n\t                    state(host, \"connecting\", null);\n\t            }\n\t\n\t            /* Here we load the machine manifests, and expect them before going to \"connected\" */\n\t            function request_manifest() {\n\t                request = $.ajax({ url: url, dataType: \"json\", cache: true})\n\t                    .done(function(manifests) {\n\t                        var overlay = { manifests: manifests };\n\t                        var etag = request.getResponseHeader(\"ETag\");\n\t                        if (etag) /* and remove quotes */\n\t                            overlay.checksum = etag.replace(/^\"(.+)\"$/, '$1');\n\t                        machines.overlay(host, overlay);\n\t                    })\n\t                    .fail(function(ex) {\n\t                        console.warn(\"failed to load manifests from \" + machine.connection_string + \": \" + ex);\n\t                    })\n\t                    .always(function() {\n\t                        request = null;\n\t                        whirl();\n\t                    });\n\t            }\n\t\n\t            function request_hostname() {\n\t                if (!machine.static_hostname) {\n\t                    var proxy = cockpit.dbus(\"org.freedesktop.hostname1\",\n\t                                             { host: machine.connection_string }).proxy();\n\t                    proxies[host] = proxy;\n\t                    proxy.wait(function() {\n\t                        $(proxy).on(\"changed\", function() {\n\t                            updated(null, null, host);\n\t                        });\n\t                        updated(null, null, host);\n\t                    });\n\t                }\n\t            }\n\t\n\t            /* Send a message to the server and get back a message once connected */\n\t            if (!local) {\n\t                channel.send(\"x\");\n\t\n\t                $(channel)\n\t                    .on(\"message\", function() {\n\t                        open = true;\n\t                        if (url)\n\t                            request_manifest();\n\t                        request_hostname();\n\t                        whirl();\n\t                    })\n\t                .on(\"close\", function(ev, options) {\n\t                    problem = options.problem || \"disconnected\";\n\t                    open = false;\n\t                    state(host, \"failed\", problem);\n\t                    var m = machines.lookup(host);\n\t                    if (m && m.restarting) {\n\t                        window.setTimeout(function() {\n\t                            self.connect(host);\n\t                        }, 10000);\n\t                    }\n\t                    self.disconnect(host);\n\t                });\n\t            } else if (url) {\n\t                request_manifest();\n\t                request_hostname();\n\t            }\n\t\n\t            /* In case already ready, for example when local */\n\t            whirl();\n\t        };\n\t\n\t        self.disconnect = function disconnect(host) {\n\t            if (host === \"localhost\")\n\t                return;\n\t\n\t            var channel = channels[host];\n\t            delete channels[host];\n\t            if (channel) {\n\t                channel.close();\n\t                $(channel).off();\n\t            }\n\t\n\t            var proxy = proxies[host];\n\t            delete proxies[host];\n\t            if (proxy) {\n\t                proxy.client.close();\n\t                $(proxy).off();\n\t            }\n\t        };\n\t\n\t        self.expect_restart = function expect_restart(host) {\n\t            var parts = machines.split_connection_string(host);\n\t            machines.overlay(parts.address, { restarting: true,\n\t                                              problem: null });\n\t        };\n\t\n\t        self.close = function close() {\n\t            $(machines).off(\"added\", updated);\n\t            $(machines).off(\"changed\", updated);\n\t            $(machines).off(\"removed\", removed);\n\t            machines = null;\n\t\n\t            if (file)\n\t                file.close();\n\t            file = null;\n\t\n\t            window.removeEventListener(\"storage\", process_session_machines);\n\t            var hosts = Object.keys(channels);\n\t            hosts.forEach(self.disconnect);\n\t        };\n\t\n\t        if (!session_only) {\n\t            var proxy = cockpit.dbus(null, { bus: \"internal\" }).proxy(\"cockpit.Machines\", \"/machines\");\n\t            $(proxy).on(\"changed\", function(data) {\n\t                // unwrap variants from D-Bus call\n\t                var wrapped = proxy.Machines;\n\t                var data_unwrap = {};\n\t                var host_props;\n\t                for (var host in wrapped) {\n\t                    host_props = {};\n\t                    for (var prop in wrapped[host])\n\t                        host_props[prop] = wrapped[host][prop].v;\n\t                    data_unwrap[host] = host_props;\n\t                }\n\t\n\t                machines.data(data_unwrap);\n\t                if (!session_loaded)\n\t                    load_from_session_storage();\n\t            });\n\t        } else {\n\t            load_from_session_storage();\n\t            machines.data({});\n\t        }\n\t    }\n\t\n\t    mod.instance = function instance(loader) {\n\t        return new Machines();\n\t    };\n\t\n\t    mod.loader = function loader(machines, session_only) {\n\t        return new Loader(machines, session_only);\n\t    };\n\t\n\t    mod.colors = [\n\t        \"#0099d3\",\n\t        \"#67d300\",\n\t        \"#d39e00\",\n\t        \"#d3007c\",\n\t        \"#00d39f\",\n\t        \"#00d1d3\",\n\t        \"#00618a\",\n\t        \"#4c8a00\",\n\t        \"#8a6600\",\n\t        \"#9b005b\",\n\t        \"#008a55\",\n\t        \"#008a8a\",\n\t        \"#00b9ff\",\n\t        \"#7dff00\",\n\t        \"#ffbe00\",\n\t        \"#ff0096\",\n\t        \"#00ffc0\",\n\t        \"#00fdff\",\n\t        \"#023448\",\n\t        \"#264802\",\n\t        \"#483602\",\n\t        \"#590034\",\n\t        \"#024830\",\n\t        \"#024848\"\n\t    ];\n\t\n\t    mod.colors.parse = function parse_color(input) {\n\t        var div = document.createElement('div');\n\t        div.style.color = input;\n\t        var style = window.getComputedStyle(div, null);\n\t        return style.getPropertyValue(\"color\") || div.style.color;\n\t    };\n\t\n\t    mod.known_hosts_path = known_hosts_path;\n\t\n\t    cockpit.transport.wait(function() {\n\t        var caps = cockpit.transport.options.capabilities || [];\n\t        mod.allow_connection_string = $.inArray(\"connection-string\", caps) != -1;\n\t        mod.has_auth_results = $.inArray(\"auth-method-results\", caps) != -1;\n\t    });\n\t\n\t    module.exports = mod;\n\t}());\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = jQuery;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2015 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(7);\n\t    var cockpit = __webpack_require__(8);\n\t\n\t    __webpack_require__(11);\n\t    __webpack_require__(13);\n\t\n\t    var lister = __webpack_require__(14);\n\t\n\t    var _ = cockpit.gettext;\n\t\n\t    function Keys() {\n\t        var self = this;\n\t\n\t        self.path = null;\n\t        self.items = { };\n\t\n\t        var watch = null;\n\t        var proc = null;\n\t        var timeout = null;\n\t\n\t        cockpit.user().done(function (user) {\n\t            self.path = user.home + '/.ssh';\n\t            refresh();\n\t        });\n\t\n\t        function refresh() {\n\t            if (watch === null) {\n\t                watch = cockpit.channel({ payload: \"fslist1\", path: self.path });\n\t                $(watch)\n\t                    .on(\"close\", function(ev, data) {\n\t                        $(watch).off();\n\t                        if (!data.problem || data.problem == \"not-found\") {\n\t                            watch = null; /* Watch again */\n\t                        } else {\n\t                            console.warn(\"couldn't watch \" + self.path + \": \" + (data.message || data.problem));\n\t                            watch = false; /* Don't watch again */\n\t                        }\n\t                    })\n\t                    .on(\"message\", function(ev, payload) {\n\t                        var item = JSON.parse(payload);\n\t                        var name = item.path;\n\t                        if (name && name.indexOf(\"/\") === -1 && name.slice(-4) === \".pub\") {\n\t                            if (item.event === \"present\" ||item.event === \"created\" ||\n\t                                item.event === \"changed\" || item.event === \"deleted\") {\n\t                                window.clearInterval(timeout);\n\t                                timeout = window.setTimeout(refresh, 100);\n\t                            }\n\t                        }\n\t                    });\n\t            }\n\t\n\t            if (proc)\n\t                return;\n\t\n\t            window.clearTimeout(timeout);\n\t            timeout = null;\n\t\n\t            proc = cockpit.script(lister, [ self.path ], { err: \"message\" })\n\t                .always(function() {\n\t                    proc = null;\n\t\n\t                    if (!timeout)\n\t                        timeout = window.setTimeout(refresh, 5000);\n\t                })\n\t                .done(function(data) {\n\t                    process(data);\n\t                })\n\t                .fail(function(ex) {\n\t                    console.warn(\"failed to list keys in home directory: \" + ex.message);\n\t                });\n\t        }\n\t\n\t        function process(data) {\n\t            var blocks = data.split('\\v');\n\t            var key, items = { };\n\t\n\t            /* First block is the data from ssh agent */\n\t            blocks[0].trim().split(\"\\n\").forEach(function(line) {\n\t                key = parse_key(line, items);\n\t                if (key)\n\t                    key.loaded = true;\n\t            });\n\t\n\t            /* Next come individual triples of blocks */\n\t            blocks.slice(1).forEach(function(block, i) {\n\t                switch(i % 3) {\n\t                case 0:\n\t                    key = parse_key(block, items);\n\t                    break;\n\t                case 1:\n\t                    if (key) {\n\t                        block = block.trim();\n\t                        if (block.slice(-4) === \".pub\")\n\t                            key.name = block.slice(0, -4);\n\t                        else\n\t                            key.name = block;\n\t                    }\n\t                    break;\n\t                case 2:\n\t                    if (key)\n\t                        parse_info(block, key);\n\t                    break;\n\t                }\n\t            });\n\t\n\t            self.items = items;\n\t            $(self).triggerHandler(\"changed\");\n\t        }\n\t\n\t        function parse_key(line, items) {\n\t            var parts = line.trim().split(\" \");\n\t            var id, type, comment;\n\t\n\t            /* SSHv1 keys */\n\t            if (!isNaN(parseInt(parts[0], 10))) {\n\t                id = parts[2];\n\t                type = \"RSA1\";\n\t                comment = parts.slice(3).join(\" \");\n\t\n\t            } else if (parts[0].indexOf(\"ssh-\") === 0) {\n\t                id = parts[1];\n\t                type = parts[0].substring(4).toUpperCase();\n\t                comment = parts.slice(2).join(\" \");\n\t            } else if (parts[0].indexOf(\"ecdsa-\") === 0) {\n\t                id = parts[1];\n\t                type = \"ECDSA\";\n\t                comment = parts.slice(2).join(\" \");\n\t            } else {\n\t                return;\n\t            }\n\t\n\t            var key = items[id];\n\t            if (!key)\n\t                key = items[id] = { };\n\t\n\t            key.type = type;\n\t            key.comment = comment;\n\t            key.data = line;\n\t            return key;\n\t        }\n\t\n\t        function parse_info(line, key) {\n\t            var parts = line.trim().split(\" \");\n\t\n\t            key.size = parseInt(parts[0], 10);\n\t            if (isNaN(key.size))\n\t                key.size = null;\n\t\n\t            key.fingerprint = parts[1];\n\t        }\n\t\n\t        self.change = function change(name, old_pass, new_pass, two_pass) {\n\t            var old_exps = [ /.*Enter old passphrase: $/ ];\n\t            var new_exps = [ /.*Enter new passphrase.*/, /.*Enter same passphrase again: $/ ];\n\t            var bad_exps = [ /.*failed: passphrase is too short.*/ ];\n\t\n\t            var dfd = $.Deferred();\n\t            var buffer = \"\";\n\t            var sent_new = false;\n\t            var failure = _(\"No such file or directory\");\n\t            var i;\n\t\n\t            if (new_pass !== two_pass) {\n\t                dfd.reject(new Error(_(\"The passwords do not match.\")));\n\t                return dfd.promise();\n\t            }\n\t\n\t            var proc;\n\t            var timeout = window.setTimeout(function() {\n\t                failure = _(\"Prompting via ssh-keygen timed out\");\n\t                proc.close(\"terminated\");\n\t            }, 10 * 1000);\n\t\n\t            proc = cockpit.spawn([\"ssh-keygen\", \"-p\", \"-f\", name],\n\t                    { pty: true, environ: [ \"LC_ALL=C\" ], err: \"out\", directory: self.path })\n\t                .always(function() {\n\t                    window.clearInterval(timeout);\n\t                })\n\t                .done(function() {\n\t                    dfd.resolve();\n\t                })\n\t                .fail(function(ex) {\n\t                    if (ex.constructor.name == \"ProcessError\")\n\t                        ex = new Error(failure);\n\t                    dfd.reject(ex);\n\t                })\n\t                .stream(function(data) {\n\t                    buffer += data;\n\t                    for (i = 0; i < old_exps.length; i++) {\n\t                        if (old_exps[i].test(buffer)) {\n\t                            buffer = \"\";\n\t                            failure = _(\"Old password not accepted\");\n\t                            this.input(old_pass + \"\\n\", true);\n\t                            return;\n\t                        }\n\t                    }\n\t\n\t                    for (i = 0; i < new_exps.length; i++) {\n\t                        if (new_exps[i].test(buffer)) {\n\t                            buffer = \"\";\n\t                            this.input(new_pass + \"\\n\", true);\n\t                            failure = _(\"Failed to change password\");\n\t                            sent_new = true;\n\t                            return;\n\t                        }\n\t                    }\n\t\n\t                    for (i = 0; sent_new && i < bad_exps.length; i++) {\n\t                        if (bad_exps[i].test(buffer)) {\n\t                            failure = _(\"New password was not accepted\");\n\t                            return;\n\t                        }\n\t                    }\n\t                });\n\t\n\t            return dfd.promise();\n\t        };\n\t\n\t        self.load = function(name, password) {\n\t            var ask_exp =  /.*Enter passphrase for .*/;\n\t            var perm_exp = /.*UNPROTECTED PRIVATE KEY FILE.*/;\n\t            var bad_exp = /.*Bad passphrase.*/;\n\t\n\t            var dfd = $.Deferred();\n\t            var buffer = \"\";\n\t            var output = \"\";\n\t            var failure = _(\"Not a valid private key\");\n\t\n\t            var proc;\n\t            var timeout = window.setTimeout(function() {\n\t                failure = _(\"Prompting via ssh-add timed out\");\n\t                proc.close(\"terminated\");\n\t            }, 10 * 1000);\n\t\n\t            proc = cockpit.spawn([\"ssh-add\", name],\n\t                    { pty: true, environ: [ \"LC_ALL=C\" ], err: \"out\", directory: self.path })\n\t                .always(function() {\n\t                    window.clearInterval(timeout);\n\t                })\n\t                .done(function() {\n\t                    refresh();\n\t                    dfd.resolve();\n\t                })\n\t                .fail(function(ex) {\n\t                    console.log(output);\n\t                    if (ex.constructor.name == \"ProcessError\")\n\t                        ex = new Error(failure);\n\t                    dfd.reject(ex);\n\t                })\n\t                .stream(function(data) {\n\t                    buffer += data;\n\t                    output += data;\n\t                    if (perm_exp.test(buffer)) {\n\t                        failure = _(\"Invalid file permissions\");\n\t                        buffer = \"\";\n\t                    } else if (ask_exp.test(buffer)) {\n\t                        buffer = \"\";\n\t                        failure = _(\"Password not accepted\");\n\t                        this.input(password + \"\\n\", true);\n\t                    } else if (bad_exp.test(buffer)) {\n\t                        buffer = \"\";\n\t                        this.input(\"\\n\", true);\n\t                    }\n\t                });\n\t\n\t            return dfd.promise();\n\t        };\n\t\n\t        self.unload = function unload(name) {\n\t            return cockpit.spawn([\"ssh-add\", \"-d\", name],\n\t                    { pty: true, err: \"message\", directory: self.path })\n\t                .done(refresh);\n\t        };\n\t\n\t        self.close = function close() {\n\t            if (watch)\n\t                watch.close();\n\t            if (proc)\n\t                proc.close();\n\t            window.clearTimeout(timeout);\n\t            timeout = null;\n\t        };\n\t    }\n\t\n\t    function setup() {\n\t        var keys;\n\t\n\t        /* The button to deauthorize cockpit */\n\t        $(\"#credential-authorize button\").on(\"click\", function(ev) {\n\t            cockpit.drop_privileges(false);\n\t            ev.preventDefault();\n\t        });\n\t\n\t        $(\"#credentials-dialog\")\n\t\n\t            /* Show and hide panels */\n\t            .on(\"click\", \"tr.listing-ct-item\", function(ev) {\n\t                var body;\n\t                if ($(ev.target).parents(\".listing-ct-actions, ul\").length === 0) {\n\t                    body = $(ev.target).parents(\"tbody\");\n\t                    body.toggleClass(\"open\").removeClass(\"unlock\");\n\t                    body.find(\".alert\").hide();\n\t                }\n\t            })\n\t\n\t            /* Highlighting */\n\t            .on(\"mouseenter\", \".listing-ct-item\", function(ev) {\n\t                $(ev.target).parents(\"tbody\").find(\".listing-ct-item\").addClass(\"highlight-ct\");\n\t            })\n\t            .on(\"mouseleave\", \".listing-ct-item\", function(ev) {\n\t                $(ev.target).parents(\"tbody\").find(\".listing-ct-item\").removeClass(\"highlight-ct\");\n\t            })\n\t\n\t            /* Load and unload keys */\n\t            .on(\"change\", \".btn-group\", function(ev) {\n\t                var body = $(this).parents(\"tbody\");\n\t                var id = body.attr(\"data-id\");\n\t                var key = keys.items[id];\n\t                if (!key || !key.name)\n\t                    return;\n\t\n\t                var value = $(this).onoff(\"value\");\n\t\n\t                /* Key needs to be loaded, show load UI */\n\t                if (value && !key.loaded) {\n\t                    body.addClass(\"open\").addClass(\"unlock\");\n\t\n\t                /* Key needs to be unloaded, do that directly */\n\t                } else if (!value && key.loaded) {\n\t                    keys.unload(key.name)\n\t                        .done(function(ex) {\n\t                            body.removeClass(\"open\");\n\t                        })\n\t                        .fail(function(ex) {\n\t                            body.addClass(\"open\").removeClass(\"unlock\");\n\t                            body.find(\".alert\").show().find(\".credential-alert\").text(ex.message);\n\t                        });\n\t                }\n\t            })\n\t\n\t            /* Load key */\n\t            .on(\"click\", \".credential-unlock button\", function(ev) {\n\t                var body = $(this).parents(\"tbody\");\n\t                var id = body.attr(\"data-id\");\n\t                var key = keys.items[id];\n\t                if (!key || !key.name)\n\t                    return;\n\t\n\t                body.find(\"input button\").prop(\"disabled\", true);\n\t\n\t                var password = body.find(\".credential-password\").val();\n\t                keys.load(key.name, password)\n\t                    .always(function(ex) {\n\t                        body.find(\"input button\").prop(\"disabled\", false);\n\t                    })\n\t                    .done(function(ex) {\n\t                        body.find(\".credential-password\").val(\"\");\n\t                        body.removeClass(\"unlock\");\n\t                        body.find(\".alert\").hide();\n\t                    })\n\t                    .fail(function(ex) {\n\t                        body.find(\".alert\").show().find(\"span\").text(ex.message);\n\t                        console.warn(\"loading key failed: \", ex.message);\n\t                    });\n\t            })\n\t\n\t            /* Change key */\n\t            .on(\"click\", \".credential-change\", function(ev) {\n\t                var body = $(this).parents(\"tbody\");\n\t                var id = body.attr(\"data-id\");\n\t                var key = keys.items[id];\n\t                if (!key || !key.name)\n\t                    return;\n\t\n\t                body.find(\"input button\").prop(\"disabled\", true);\n\t\n\t                var old_pass = body.find(\".credential-old\").val();\n\t                var new_pass = body.find(\".credential-new\").val();\n\t                var two_pass = body.find(\".credential-two\").val();\n\t                if (old_pass === undefined || new_pass === undefined || two_pass === undefined)\n\t                    throw \"invalid password fields\";\n\t\n\t                keys.change(key.name, old_pass, new_pass, two_pass)\n\t                    .always(function(ex) {\n\t                        body.find(\"input button\").prop(\"disabled\", false);\n\t                    })\n\t                    .done(function() {\n\t                        body.find(\".credential-old\").val(\"\");\n\t                        body.find(\".credential-new\").val(\"\");\n\t                        body.find(\".credential-two\").val(\"\");\n\t                        body.find(\"li a\").first().click();\n\t                    })\n\t                    .fail(function(ex) {\n\t                        body.find(\".alert\").show().find(\"span\").text(ex.message);\n\t                    });\n\t            })\n\t\n\t            .on(\"change keypress\", \"input\", function(ev) {\n\t                var body = $(this).parents(\"tbody\");\n\t                if (ev.type == \"keypress\" && ev.keyCode == 13)\n\t                    $(this).parents(\"dl\").find(\".btn-primary\").click();\n\t                body.find(\".alert\").hide();\n\t            })\n\t\n\t            /* Change tabs */\n\t            .on(\"click\", \"tr.credential-panel ul > li > a\", function() {\n\t                var li = $(this).parent();\n\t                var index = li.index();\n\t                li.parent().children().removeClass(\"active\");\n\t                li.addClass(\"active\");\n\t                var body = $(this).parents(\"tbody\");\n\t                body.find(\".credential-tab\").hide().eq(index).show();\n\t                body.find(\".alert\").hide();\n\t            })\n\t\n\t            /* Popover help */\n\t            .on(\"click\", \"[data-toggle='popover']\", function() {\n\t                $(this).popover('toggle');\n\t            })\n\t\n\t            /* Dialog is hidden */\n\t            .on(\"hide.bs.modal\", function() {\n\t                if (keys) {\n\t                    $(keys).off();\n\t                    keys.close();\n\t                    keys = null;\n\t                }\n\t            })\n\t\n\t            /* Dialog is shown */\n\t            .on(\"show.bs.modal\", function() {\n\t                keys = new Keys();\n\t                $(\"#credential-keys\").toggleClass(\"hidden\",\n\t                                                  $.isEmptyObject(keys.items));\n\t\n\t                $(keys).on(\"changed\", function() {\n\t                    var key, id, row, rows = { };\n\t                    var table = $(\"#credentials-dialog table.credential-listing\");\n\t\n\t                    table.find(\"tbody[data-id]\").each(function(i, el) {\n\t                        row = $(el);\n\t                        rows[row.attr(\"data-id\")] = row;\n\t                    });\n\t\n\t                    var body = table.find(\"tbody\").first();\n\t                    for (id in keys.items) {\n\t                        if (!(id in rows)) {\n\t                            row = rows[id] = body.clone();\n\t                            row.attr(\"data-id\", id)\n\t                                .show()\n\t                                .onoff();\n\t                            table.append(row);\n\t                        }\n\t                    }\n\t\n\t                    function text(row, field, string) {\n\t                        var sel = row.find(field);\n\t                        string = string || \"\";\n\t                        if (sel.text() !== string)\n\t                            sel.text(string);\n\t                    }\n\t\n\t                    for (id in rows) {\n\t                        row = rows[id];\n\t                        key = keys.items[id];\n\t                        if (key) {\n\t                            text(row, \".credential-label\", key.name || key.comment);\n\t                            text(row, \".credential-type\", key.type);\n\t                            text(row, \".credential-fingerprint\", key.fingerprint);\n\t                            text(row, \".credential-comment\", key.comment);\n\t                            text(row, \".credential-data\", key.data);\n\t                            row.attr(\"data-name\", key.name)\n\t                                .attr(\"data-loaded\", key.loaded ? \"1\" : \"0\")\n\t                                .find(\".btn-onoff-ct\")\n\t                                    .onoff(\"value\", key.loaded || row.hasClass(\"unlock\"))\n\t                                    .onoff(\"disabled\", !key.name);\n\t                        } else {\n\t                            row.remove();\n\t                        }\n\t                        $(\"#credential-keys\").toggleClass(\"hidden\",\n\t                                                          $.isEmptyObject(keys.items));\n\t                    }\n\t                });\n\t            });\n\t        }\n\t\n\t    module.exports = {\n\t        keys_instance: function () {\n\t            return new Keys();\n\t        },\n\t        setup: setup\n\t    };\n\t}());\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 12 */,\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(7);\n\t    var cockpit = __webpack_require__(8);\n\t\n\t    var unique_number = 0;\n\t    function unique() {\n\t        unique_number += 1;\n\t        return \"unique\" + -(new Date()) + -unique_number;\n\t    }\n\t\n\t    /* Dialog Patterns */\n\t\n\t    function clear_errors(sel) {\n\t        sel.find(\".dialog-error\").remove();\n\t        sel.find(\".has-error\").removeClass(\"has-error\");\n\t        sel.find(\".dialog-wrapper\").off(\".dialog-error\");\n\t        sel.off(\".dialog-error\");\n\t    }\n\t\n\t    function field_error(target, error) {\n\t        var wrapper = target.parent();\n\t        var next, refresh;\n\t\n\t        if (!wrapper.is(\".dialog-wrapper\")) {\n\t            wrapper = $(\"<div class='dialog-wrapper'>\").insertBefore(target);\n\t\n\t            /*\n\t             * Some bootstrap plugins replace html controls with their own\n\t             * stuff, so we have to account for that here.\n\t             */\n\t\n\t            next = target.next();\n\t            if (next.is(\".bootstrap-select\") && next.selectpicker) {\n\t                next.remove();\n\t                refresh = next.selectpicker;\n\t            }\n\t\n\t            target.remove().appendTo(wrapper);\n\t\n\t            if (refresh)\n\t                refresh.call(target);\n\t        }\n\t\n\t        var message;\n\t        if (error.message)\n\t            message = $(\"<div class='dialog-error help-block'>\").text(error.message);\n\t        wrapper.addClass(\"has-error\").append(message);\n\t\n\t        if (!wrapper.hasClass(\"error-keep\")) {\n\t            wrapper.on(\"keypress.dialog-error change.dialog-error\", function() {\n\t                wrapper.removeClass(\"has-error\")\n\t                    .find(\".dialog-error.help-block\").css(\"visibility\", \"hidden\");\n\t            });\n\t        }\n\t    }\n\t\n\t    function global_error(sel, error) {\n\t        var alert = $(\"<div class='alert alert-danger dialog-error'>\");\n\t        var text = error.message || error.toString();\n\t        alert.text(text);\n\t        $(\"<span class='fa fa-exclamation-triangle'>\").prependTo(alert);\n\t\n\t        /* Always log global dialog errors for easier debugging */\n\t        console.warn(text);\n\t\n\t        var footer = sel.find(\".modal-footer\");\n\t        if (footer.length)\n\t            alert.prependTo(footer);\n\t        else\n\t            alert.appendTo(sel);\n\t    }\n\t\n\t    function display_errors(sel, errors) {\n\t        clear_errors(sel);\n\t\n\t        /* The list of errors can also be passed as an array */\n\t        if (errors.length == 1 && $.isArray(errors[0]))\n\t            errors = errors[0];\n\t\n\t        var any = false;\n\t        errors.forEach(function(error) {\n\t            var target;\n\t            if (error) {\n\t                target = sel.find(error.target);\n\t\n\t                /* Errors for a specific field added below that field */\n\t                if (target && target.length)\n\t                    field_error(target, error);\n\t                else\n\t                    global_error(sel, error);\n\t\n\t                any = true;\n\t            }\n\t        });\n\t\n\t        if (!any)\n\t            return;\n\t\n\t        /* When dialog is shown again, remove all mods */\n\t        sel.on(\"show.bs.modal.dialog-error\", function() {\n\t            clear_errors(sel);\n\t        });\n\t    }\n\t\n\t    function DialogWait(promise, handle) {\n\t        this.promise = promise;\n\t        this.disabled = [];\n\t        this.handle = handle;\n\t    }\n\t\n\t    function clear_wait(sel) {\n\t        var data = sel.data(\"dialog-wait\");\n\t        sel.data(\"dialog-wait\", null);\n\t\n\t        sel.find(\".dialog-wait-ct\").remove();\n\t        sel.find(\".btn\").off(\".dialog-wait\");\n\t        sel.off(\".dialog-wait\");\n\t\n\t        if (data) {\n\t            data.disabled.forEach(function(ctl) {\n\t                ctl.removeAttr(\"disabled\");\n\t            });\n\t        }\n\t    }\n\t\n\t    function display_wait(sel, promise, handle) {\n\t        clear_wait(sel);\n\t\n\t        if (!promise) {\n\t            if (handle)\n\t                sel.modal(\"hide\");\n\t            return sel;\n\t        }\n\t\n\t        /* Clear all errors in the dialog */\n\t        if (handle)\n\t            display_errors(sel, []);\n\t\n\t        var wait = $(\"<div class='dialog-wait-ct pull-left'>\");\n\t        $(\"<div class='spinner spinner-sm'>\").appendTo(wait);\n\t        var message = $(\"<span>\").appendTo(wait);\n\t\n\t        sel.find(\".modal-footer button\").first().before(wait);\n\t\n\t        var data = new DialogWait(promise, handle);\n\t        sel.data(\"dialog-wait\", data);\n\t\n\t        var cancellation = promise.cancel || promise.close;\n\t        var cancelled = false;\n\t\n\t        /* Disable everything and stash previous disabled state */\n\t        var controls = sel.find(\".form-control\").add(\".btn\", sel);\n\t        if (cancellation)\n\t            controls = controls.not(\"[data-dismiss]\").not(\".btn-cancel\");\n\t        controls.each(function() {\n\t            var ctl = $(this);\n\t            if (!ctl.attr(\"disabled\")) {\n\t                data.disabled.push(ctl);\n\t                ctl.attr(\"disabled\", \"disabled\");\n\t            }\n\t        });\n\t\n\t        sel.find(\".btn[data-dismiss], .btn-cancel\").on(\"click.dialog-wait\", function() {\n\t            cancelled = true;\n\t            if (cancellation)\n\t                cancellation.apply(promise);\n\t            return false;\n\t        });\n\t\n\t        /* When dialog is shown again, remove all mods */\n\t        sel.on(\"hide.bs.modal.dialog-wait\", function() {\n\t            clear_wait(sel);\n\t        });\n\t\n\t        /*\n\t         * There is no way to remove a callback from a promise\n\t         * so we have to be careful to only react if still\n\t         * processing the same promise.\n\t         */\n\t        function restore() {\n\t            var state, data = sel.data(\"dialog-wait\");\n\t            if (data && data.promise === promise) {\n\t                clear_wait(sel);\n\t                state = promise.state();\n\t                if (cancelled || (state == \"resolved\" && data.handle))\n\t                    sel.modal('hide');\n\t                else if (state == \"rejected\" && data.handle)\n\t                    display_errors(sel, [ arguments[0] ]);\n\t            }\n\t        }\n\t\n\t        function update(arg) {\n\t            var data = sel.data(\"dialog-wait\");\n\t            if (data && data.promise === promise) {\n\t                if (typeof arg !== \"string\")\n\t                    arg = \"\";\n\t                message.text(arg);\n\t            }\n\t        }\n\t\n\t        promise\n\t            .always(restore)\n\t            .progress(update);\n\t\n\t        return sel;\n\t    }\n\t\n\t    $.fn.dialog = function dialog(action /* ... */) {\n\t        if (action === \"failure\")\n\t            return display_errors(this, Array.prototype.slice.call(arguments, 1));\n\t        else if (action === \"wait\")\n\t            return display_wait(this, arguments[1]);\n\t        else if (action === \"promise\")\n\t            return display_wait(this, arguments[1], true);\n\t        else\n\t            console.warn(\"unknown dialog action: \" + action);\n\t    };\n\t\n\t    window.addEventListener(\"hashchange\", function() {\n\t        $(\".modal\").modal(\"hide\");\n\t    });\n\t\n\t    /*\n\t     * OnOff switch pattern\n\t     */\n\t\n\t    function onoff_refresh(sel) {\n\t        /* During testing, no Cockpit dependency */\n\t        var _ = cockpit.gettext || function(x) { return x; };\n\t\n\t        sel = sel.find(\".btn-onoff-ct\").andSelf().filter(\".btn-onoff-ct\");\n\t        sel.each(function(x, el) {\n\t            var self = $(el)\n\t                .attr(\"data-toggle\", \"buttons\")\n\t                .addClass(\"btn-group\");\n\t            var value = self.onoff(\"value\");\n\t            var buttons = self.find(\".btn\");\n\t            var name = self.find(\"input\").first().attr(\"name\") || unique();\n\t            var i, input, text;\n\t            for (i = buttons.length; i < 2; i++) {\n\t                input = $('<input type=\"radio\" autocomplete=\"off\">');\n\t                text = document.createTextNode(i === 0 ? _(\"On\") : _(\"Off\"));\n\t                self.append($('<label class=\"btn\">').append(input, text));\n\t                buttons = null;\n\t            }\n\t            buttons = buttons || self.find(\".btn\");\n\t            buttons.find(\"input\").attr(\"name\", name);\n\t            onoff_change(self, !!value);\n\t        });\n\t        return sel;\n\t    }\n\t\n\t    function onoff_value(sel) {\n\t        return sel.find(\".btn\").first().hasClass(\"active\");\n\t    }\n\t\n\t    function onoff_change(sel, value) {\n\t        return sel.each(function(i, el) {\n\t            var buttons = $(el).find(\".btn\");\n\t            buttons.first().toggleClass(\"active\", !!value).find(\"input\").prop(\"checked\", !!value);\n\t            buttons.last().toggleClass(\"active\", !value).find(\"input\").prop(\"checked\", !value);\n\t        });\n\t    }\n\t\n\t    $.fn.onoff = function onoff(action /* ... */) {\n\t        if (arguments.length === 0 || action == \"refresh\") {\n\t            return onoff_refresh(this);\n\t        } else if (action === \"value\") {\n\t            if (arguments.length === 1)\n\t                return onoff_value(this);\n\t            else\n\t                return onoff_change(this, arguments[1]);\n\t        } else if (action == \"disabled\") {\n\t            return this.find(\".btn\").toggleClass(\"disabled\", arguments[1]);\n\t        } else {\n\t            console.warn(\"unknown switch action: \" + action);\n\t        }\n\t    };\n\t\n\t    /* ----------------------------------------------------------------------------\n\t     * Sliders\n\t     *\n\t     * <div class=\"slider\" value=\"0.5\">\n\t     *    <div class=\"slider-bar\">\n\t     *        <div class=\"slider-thumb\"></div>\n\t     *    </div>\n\t     *    <div class=\"slider-bar\">\n\t     *        <!-- optional left overs -->\n\t     *    </div>\n\t     * </div>\n\t     *\n\t     * A slider control. The first div.slider-bar is the one that is resized.\n\t     * The value will be bounded between 0 and 1 as a floating point number.\n\t     *\n\t     * The following div.slider-bar if present is resized to fill the remainder\n\t     * of the slider if not given a specific size. You can put more div.slider-bar\n\t     * inside it to reflect squashing other prevous allocations.\n\t     *\n\t     * If the following div.slider-bar have a width specified, then the\n\t     * slider supports the concept of overflowing. If the slider overflows\n\t     * it will get the .slider-warning class and go a bit red.\n\t     *\n\t     * On document creation any div.slider are automatically turned into\n\t     * Bar graphs.\n\t     *\n\t     * Slider has the following extra read/write properties:\n\t     *\n\t     * .value: the floating point value the slider is set to.\n\t     * .disabled: whether to display slider as disabled and refuse interacton.\n\t     *\n\t     * Slider has this event:\n\t     *\n\t     * on('change'): fired when the slider changes, passes value as additional arg.\n\t     */\n\t\n\t    function resize_flex(slider, flex, total, part) {\n\t        var value = 0;\n\t        if (part > total)\n\t            value = 1;\n\t        else if (part < 0 || isNaN(part))\n\t            value = 0;\n\t        else if (!isNaN(total) && total > 0 && part >= 0)\n\t            value = (part / total);\n\t        $(flex).css('width', (value * 100) + \"%\").\n\t            next(\"div\").css('margin-left', $(flex).css('width'));\n\t\n\t        /* Set the property and the attribute */\n\t        slider.value = value;\n\t    }\n\t\n\t    function update_value(slider) {\n\t        resize_flex(slider, $(slider).children(\"div.slider-bar\").first()[0], 1, slider.value);\n\t    }\n\t\n\t    function check_overflow(slider) {\n\t        $(slider).toggleClass(\"slider-warning\",\n\t                              slider.offsetWidth < slider.scrollWidth);\n\t    }\n\t\n\t    function setup_slider(slider) {\n\t        $(slider).attr('unselectable', 'on');\n\t\n\t        Object.defineProperty(slider, \"value\", {\n\t            get: function() {\n\t                return parseFloat(this.getAttribute(\"value\"));\n\t            },\n\t            set: function(v) {\n\t                var s = String(v);\n\t                if (s != this.getAttribute(\"value\"))\n\t                    this.setAttribute(\"value\", v);\n\t            }\n\t        });\n\t\n\t        Object.defineProperty(slider, \"disabled\", {\n\t            get: function() {\n\t                if (!this.hasAttribute(\"disabled\"))\n\t                    return false;\n\t                return this.getAttribute(\"disabled\").toLowerCase() != \"false\";\n\t            },\n\t            set: function(v) {\n\t                this.setAttribute(\"disabled\", v ? \"true\" : \"false\");\n\t            }\n\t        });\n\t\n\t        update_value(slider);\n\t        check_overflow(slider);\n\t\n\t        $(slider).on(\"change\", function() {\n\t            update_value(slider);\n\t            $(slider).toggleClass(\"slider-disabled\", slider.disabled);\n\t        });\n\t\n\t        if (slider.disabled)\n\t            $(slider).addClass(\"slider-disabled\");\n\t\n\t        $(slider).on(\"mousedown\", function(ev) {\n\t            if (slider.disabled)\n\t                return true; /* default action */\n\t            var flex;\n\t            var offset = $(slider).offset().left;\n\t            if ($(ev.target).hasClass(\"slider-thumb\")) {\n\t                var hitx  = (ev.offsetX || ev.clientX - $(ev.target).offset().left);\n\t                offset += (hitx - $(ev.target).outerWidth() / 2);\n\t                flex = $(ev.target).parent()[0];\n\t            } else {\n\t                flex = $(slider).children(\"div.slider-bar\").first()[0];\n\t                resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n\t                $(slider).trigger(\"change\", [slider.value]);\n\t                check_overflow(slider);\n\t            }\n\t\n\t            $(document).\n\t                on(\"mousemove.slider\", function(ev) {\n\t                    resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n\t                    $(slider).trigger(\"change\", [slider.value]);\n\t                    check_overflow(slider);\n\t                    return false;\n\t                }).\n\t                on(\"mouseup.slider\", function(ev) {\n\t                    $(document).\n\t                        off(\"mousemove.slider\").\n\t                        off(\"mouseup.slider\");\n\t                    return false;\n\t                });\n\t            return false; /* no default action */\n\t        });\n\t    }\n\t\n\t    function setup_sliders() {\n\t        $(\"div.slider\").each(function() {\n\t            setup_slider(this);\n\t        });\n\t    }\n\t\n\t    $.fn.slider = function Slider(action) {\n\t        var sel = this;\n\t        if (arguments.length === 0 || action == \"refresh\") {\n\t            sel.each(function() {\n\t                setup_slider(this);\n\t            });\n\t            return sel;\n\t        } else {\n\t            console.warn(\"unknown slider action: \" + action);\n\t        }\n\t    };\n\t\n\t    $(document).ready(setup_sliders);\n\t\n\t    /* -----------------------------------------------------------------------------\n\t     * Privileged UI actions.\n\t     */\n\t\n\t    // placement is optional, \"top\", \"left\", \"bottom\", \"right\"\n\t    $.fn.update_privileged = function update_privileged(perm, denied_message, placement) {\n\t        var allowed = (perm.allowed !== false);\n\t        var selector = this;\n\t\n\t        selector.each(function() {\n\t            // preserve old title first time to use when allowed\n\t            // activate tooltip\n\t            var allowed_key = 'allowed-title';\n\t            if (typeof $(this).data(allowed_key) === 'undefined' ||\n\t                   $(this).data(allowed_key) === false)\n\t                $(this).data(allowed_key, $(this).attr('title') || \"\");\n\t\n\t            var options = { html: true };\n\t            if (placement)\n\t                options['placement'] = placement;\n\t\n\t            $(this).tooltip(options);\n\t\n\t            if ($(this).hasClass(\"disabled\") === allowed) {\n\t              $(this).toggleClass(\"disabled\", !allowed)\n\t                   .attr('data-original-title', null);\n\t\n\t              if (allowed)\n\t                  $(this).attr('title', $(this).data(allowed_key));\n\t              else\n\t                  $(this).attr('title', denied_message);\n\t              $(this).tooltip('fixTitle');\n\t            }\n\t        });\n\t\n\t        return selector;\n\t    };\n\t}());\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"#!/bin/sh\\n\\nset -eu\\n\\n# The first thing we do is list loaded keys\\nssh-add -L || true\\n\\n# Try to list keys in this directory\\ncd \\\"$1\\\" || exit 0\\n\\n# After that each .pub file gets its on set of blocks\\nfor file in *.pub; do\\n    printf \\\"\\\\v\\\"\\n    cat \\\"$file\\\"\\n    printf \\\"\\\\v%s\\\\v\\\" \\\"$file\\\"\\n    ssh-keygen -l -f \\\"$file\\\" || true\\ndone\\n\"\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2015 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(7);\n\t    var cockpit = __webpack_require__(8);\n\t\n\t    var mustache = __webpack_require__(16);\n\t\n\t    var machines = __webpack_require__(6);\n\t    var credentials = __webpack_require__(9);\n\t\n\t    var add_tmpl = __webpack_require__(18);\n\t    var auth_failed_tmpl = __webpack_require__(19);\n\t    var change_auth_tmpl = __webpack_require__(20);\n\t    var change_port_tmpl = __webpack_require__(21);\n\t    var color_picker_tmpl = __webpack_require__(22);\n\t    var invalid_hostkey_tmpl = __webpack_require__(23);\n\t    var not_supported_tmpl = __webpack_require__(24);\n\t    var sync_users_tmpl = __webpack_require__(25);\n\t    var unknown_hosts_tmpl = __webpack_require__(26);\n\t\n\t    var _ = cockpit.gettext;\n\t\n\t    var default_codes = {\n\t        \"no-cockpit\": \"not-supported\",\n\t        \"not-supported\": \"not-supported\",\n\t        \"protocol-error\": \"not-supported\",\n\t        \"authentication-not-supported\": \"change-auth\",\n\t        \"authentication-failed\": \"change-auth\",\n\t        \"no-forwarding\": \"change-auth\",\n\t        \"unknown-hostkey\": \"unknown-hostkey\",\n\t        \"invalid-hostkey\": \"invalid-hostkey\",\n\t        \"not-found\": \"add-machine\",\n\t        \"sync-users\": \"sync-users\"\n\t    };\n\t\n\t    function translate_and_init(tmpl) {\n\t        var tmp = $(\"<div>\").append(tmpl);\n\t        tmp.find(\"[translatable=\\\"yes\\\"]\").each(function(i, e) {\n\t            var old = e.outerHTML;\n\t            var translated = cockpit.gettext(e.getAttribute(\"context\"), $(e).text());\n\t            $(e).removeAttr(\"translatable\").text(translated);\n\t            tmpl = tmpl.replace(old, e.outerHTML);\n\t        });\n\t        mustache.parse(tmpl);\n\t        return tmpl;\n\t    }\n\t\n\t    var templates = {\n\t        \"add-machine\" : translate_and_init(add_tmpl),\n\t        \"auth-failed\" : translate_and_init(auth_failed_tmpl),\n\t        \"change-auth\" : translate_and_init(change_auth_tmpl),\n\t        \"change-port\" : translate_and_init(change_port_tmpl),\n\t        \"color-picker\" : translate_and_init(color_picker_tmpl),\n\t        \"invalid-hostkey\" : translate_and_init(invalid_hostkey_tmpl),\n\t        \"not-supported\" : translate_and_init(not_supported_tmpl),\n\t        \"sync-users\" : translate_and_init(sync_users_tmpl),\n\t        \"unknown-hostkey\" : translate_and_init(unknown_hosts_tmpl)\n\t    };\n\t\n\t    function full_address(machines_ins, address) {\n\t        var machine = machines_ins.lookup(address);\n\t        if (machine && machine.address != \"localhost\")\n\t            return machine.connection_string;\n\t\n\t        return address;\n\t    }\n\t\n\t    function Dialog(selector, address, machines_ins, codes) {\n\t        var self = this;\n\t\n\t        self.machines_ins = machines_ins;\n\t        self.codes = codes;\n\t        self.address = full_address(self.machines_ins, address);\n\t\n\t        var promise_callback = null;\n\t\n\t        var success_callback = null;\n\t\n\t        var current_template = null;\n\t        var current_instance = null;\n\t\n\t        function address_or_label() {\n\t            var machine = self.machines_ins.lookup(self.address);\n\t            var host = self.machines_ins.split_connection_string(self.address).address;\n\t            if (machine && machine.label)\n\t                host = machine.label;\n\t            return host;\n\t        }\n\t\n\t        function change_content(template, error_options) {\n\t            var old_instance = current_instance;\n\t\n\t            if (current_template === template)\n\t                return;\n\t\n\t            if (template == \"add-machine\")\n\t                current_instance = new AddMachine(self);\n\t            else if (template == \"sync-users\")\n\t                current_instance = new SyncUsers(self);\n\t            else if (template == \"unknown-hostkey\")\n\t                current_instance = new HostKey(self, template);\n\t            else if (template == \"invalid-hostkey\")\n\t                current_instance = new HostKey(self, template);\n\t            else if (template == \"change-auth\")\n\t                current_instance = new ChangeAuth(self);\n\t            else if (template == \"change-port\")\n\t                current_instance = new MachinePort(self);\n\t            else\n\t                current_instance = new Simple(self);\n\t\n\t            current_template = template;\n\t            current_instance.load(error_options);\n\t\n\t            if (old_instance && old_instance.close)\n\t                old_instance.close();\n\t            old_instance = null;\n\t        }\n\t\n\t        self.try_to_connect = function(address, options) {\n\t            var dfd = $.Deferred();\n\t            var conn_options = $.extend({ \"payload\": \"echo\",\n\t                                          \"host\": address },\n\t                                        options);\n\t\n\t            var machine = self.machines_ins.lookup(address);\n\t            if (machine && machine.host_key && !machine.on_disk) {\n\t                conn_options['temp-session'] = false; /* Compatiblity option */\n\t                conn_options['session'] = 'shared';\n\t                conn_options['host-key'] = machine.host_key;\n\t            }\n\t            var client = cockpit.channel(conn_options);\n\t            client.send(\"x\");\n\t            $(client)\n\t               .on(\"message\", function() {\n\t                    $(client).off();\n\t                    client.close();\n\t                    dfd.resolve();\n\t                })\n\t                .on(\"close\", function(event, options) {\n\t                    dfd.reject(options);\n\t                });\n\t\n\t            return dfd.promise();\n\t        };\n\t\n\t        self.get_sel = function(child_selector) {\n\t            var ret_txt = selector;\n\t            if (child_selector)\n\t                ret_txt = ret_txt + \" \" + child_selector;\n\t            return $(ret_txt);\n\t        };\n\t\n\t        self.set_on_success = function (callback) {\n\t            success_callback = callback;\n\t        };\n\t\n\t        self.set_goal = function (callback) {\n\t            promise_callback = callback;\n\t        };\n\t\n\t        self.complete = function(val) {\n\t            if (success_callback)\n\t                success_callback(val);\n\t            else\n\t                $(selector).modal('hide');\n\t        };\n\t\n\t        self.render = function render(data, template) {\n\t            if (!template)\n\t                template = current_template;\n\t\n\t            var address_data = self.machines_ins.split_connection_string(self.address);\n\t            var context = $.extend({\n\t                'host' : address_or_label(),\n\t                'full_address' : self.address,\n\t                'context_title' : self.context_title,\n\t                'strong' : function() {\n\t                    return function(text, render) {\n\t                        return \"<strong>\" + render(text) + \"</strong>\";\n\t                    };\n\t                }\n\t            }, data, address_data);\n\t\n\t            var output = $(mustache.render(templates[template], context));\n\t            cockpit.translate(output);\n\t            self.get_sel(\".modal-content\").html(output);\n\t        };\n\t\n\t        self.render_error = function render_error(error) {\n\t            var template;\n\t            if (error.problem && error.command == \"close\")\n\t                template = self.codes[error.problem];\n\t\n\t            if (template && current_template !== template)\n\t                change_content(template, error);\n\t            else\n\t                $(selector).dialog(\"failure\", cockpit.message(error));\n\t        };\n\t\n\t        self.render_template = function render_template(template) {\n\t            change_content(template);\n\t        };\n\t\n\t        self.show = function () {\n\t            var sel = self.get_sel();\n\t            sel.on('hide.bs.modal', function () {\n\t                self.get_sel(\".model-content\").empty();\n\t            });\n\t            sel.modal('show');\n\t        };\n\t\n\t        self.run = function (promise, failure_callback) {\n\t            var dialog_dfd = $.Deferred();\n\t            var promise_funcs = [];\n\t\n\t            function next(i) {\n\t                promise_funcs[i]()\n\t                    .done(function(val) {\n\t                        i = i + 1;\n\t                        if (i < promise_funcs.length) {\n\t                            next(i);\n\t                        } else {\n\t                            dialog_dfd.resolve();\n\t                            self.complete(val);\n\t                        }\n\t                    })\n\t                    .fail(function(ex) {\n\t                        if (failure_callback)\n\t                            failure_callback(ex);\n\t                        else\n\t                            self.render_error(ex);\n\t                        dialog_dfd.reject(ex);\n\t                    });\n\t            }\n\t\n\t            promise_funcs.push(function() {\n\t                return promise;\n\t            });\n\t\n\t            self.get_sel().dialog(\"wait\", dialog_dfd.promise());\n\t            if (promise_callback)\n\t                promise_funcs.push(promise_callback);\n\t\n\t            next(0);\n\t        };\n\t    }\n\t\n\t    function is_method_supported(methods, method) {\n\t        var result = methods[method];\n\t        return result ? result != \"no-server-support\" : false;\n\t    }\n\t\n\t    function can_try_method(methods, method) {\n\t        if (is_method_supported(methods, method))\n\t            return method == 'password' || methods[method] != \"not-provided\";\n\t        return false;\n\t    }\n\t\n\t    function MachineColorPicker(machines_ins) {\n\t        var self = this;\n\t\n\t        self.render = function(selector, address, selected_color) {\n\t            var machine;\n\t\n\t            if (address && !selected_color) {\n\t                machine = machines_ins.lookup(address);\n\t                if (machine)\n\t                    selected_color = machine.color;\n\t            }\n\t\n\t            if (!selected_color)\n\t                selected_color = machines_ins.unused_color();\n\t\n\t            var part, colors = [];\n\t            for (var i = 0; i < machines.colors.length; i += 6) {\n\t                part = machines.colors.slice(i, i+6);\n\t                colors.push({\"list\" : part});\n\t            }\n\t\n\t            var text = mustache.render(templates[\"color-picker\"], { 'colors' : colors, });\n\t            $(selector).html(text);\n\t\n\t            $(\"#host-edit-color\", selector).css(\"background-color\", selected_color);\n\t            $(\".color-cell\", selector).each(function(index) {\n\t                $(this).css(\"background-color\", machines.colors[index]);\n\t            });\n\t\n\t            $('#host-edit-color-popover .popover-content .color-cell', selector)\n\t                .click(function() {\n\t                    var color = $(this).css('background-color');\n\t                    $('#host-edit-color', selector).css('background-color', color);\n\t                });\n\t\n\t            $(\"#host-edit-color\", selector).parent().\n\t                on('show.bs.dropdown', function () {\n\t                    var $div = $('#host-edit-color', selector);\n\t                    var $pop = $('#host-edit-color-popover', selector);\n\t                    var div_pos = $div.position();\n\t                    var div_width = $div.width();\n\t                    var div_height = $div.height();\n\t                    var pop_width = $pop.width();\n\t                    var pop_height = $pop.height();\n\t\n\t                    var top = div_pos.top - pop_height + 10;\n\t                    if (top < 0) {\n\t                        top = div_pos.top + div_height + 10;\n\t                        $pop.addClass(\"bottom\");\n\t                        $pop.removeClass(\"top\");\n\t                    } else {\n\t                        $pop.addClass(\"top\");\n\t                        $pop.removeClass(\"bottom\");\n\t                    }\n\t                    $pop.css('left', div_pos.left + (div_width - pop_width) / 2);\n\t                    $pop.css('top', top);\n\t                    $pop.show();\n\t                }).\n\t                on('hide.bs.dropdown', function () {\n\t                    $('#host-edit-color-popover', selector).hide();\n\t                });\n\t        };\n\t    }\n\t\n\t    function Simple(dialog) {\n\t        var self = this;\n\t\n\t        self.load = function() {\n\t            dialog.render();\n\t        };\n\t    }\n\t\n\t    function AddMachine(dialog) {\n\t        var self = this;\n\t        var color = null;\n\t        var selector = dialog.get_sel();\n\t        var run_error = null;\n\t\n\t        var invisible = dialog.machines_ins.addresses.filter(function(addr) {\n\t            var m = dialog.machines_ins.lookup(addr);\n\t            return !m || !m.visible;\n\t        });\n\t\n\t        function existing_error(address) {\n\t            var ex = null;\n\t            var machine = dialog.machines_ins.lookup(address);\n\t            if (machine && machine.visible && machine.on_disk) {\n\t                ex = new Error(_(\"This machine has already been added.\"));\n\t                ex.target = \"#add-machine-address\";\n\t            }\n\t            return ex;\n\t        }\n\t\n\t        function check_address(evt) {\n\t            var disabled = true;\n\t            var ex = null;\n\t\n\t            var addr = $('#add-machine-address').val();\n\t            var button = dialog.get_sel(\".btn-primary\");\n\t            if (addr === \"\") {\n\t                disabled = true;\n\t            } else if (!machines.allow_connection_string &&\n\t                       (addr.indexOf('@') > -1 || addr.indexOf(':') > -1)) {\n\t                ex = new Error(_(\"This version of cockpit-ws does not support connecting to a host with an alternate user or port\"));\n\t            } else if (addr.search(/\\s+/) === -1) {\n\t                ex = existing_error(addr);\n\t                if (!ex)\n\t                    disabled = false;\n\t            } else {\n\t                ex = new Error(_(\"The IP address or host name cannot contain whitespace.\"));\n\t            }\n\t\n\t            if (ex)\n\t                ex.target = \"#add-machine-address\";\n\t\n\t            if (run_error)\n\t                selector.dialog(\"failure\", run_error, ex);\n\t            else\n\t                selector.dialog(\"failure\", ex);\n\t\n\t            button.prop(\"disabled\", disabled);\n\t        }\n\t\n\t        function add_machine() {\n\t            run_error = null;\n\t            dialog.address = $('#add-machine-address').val();\n\t            color = machines.colors.parse($('#add-machine-color-picker #host-edit-color').css('background-color'));\n\t            if (existing_error(dialog.address))\n\t                return;\n\t\n\t            dialog.set_goal(function() {\n\t                var dfp = $.Deferred();\n\t                dialog.machines_ins.add(dialog.address, color)\n\t                    .done(dfp.resolve)\n\t                    .fail(function (ex) {\n\t                        var msg = cockpit.format(_(\"Failed to add machine: $0\"),\n\t                                                 cockpit.message(ex));\n\t                        dfp.reject(msg);\n\t                    });\n\t\n\t                return dfp.promise();\n\t            });\n\t\n\t            dialog.run(dialog.try_to_connect(dialog.address), function (ex) {\n\t                if (ex.problem == \"no-host\") {\n\t                    var host_id_port = dialog.address;\n\t                    var port_index = host_id_port.lastIndexOf(\":\");\n\t                    var port = \"22\";\n\t                    if (port_index === -1)\n\t                        host_id_port = dialog.address + \":22\";\n\t                    else\n\t                        port = host_id_port.substr(port_index + 1);\n\t                    ex.message = cockpit.format(_(\"Cockpit could not contact the given host $0. Make sure it has ssh running on port $1, or specify another port in the address.\"), host_id_port, port);\n\t                    ex = cockpit.message(ex);\n\t                    run_error = ex;\n\t                }\n\t                dialog.render_error(ex);\n\t            });\n\t        }\n\t\n\t        self.load = function() {\n\t            var manifest = cockpit.manifests[\"shell\"] || {};\n\t            var limit = parseInt(manifest[\"machine-limit\"], 10);\n\t            var color_picker = new MachineColorPicker(dialog.machines_ins);\n\t            if (!limit || isNaN(limit))\n\t                limit = 20;\n\t\n\t            dialog.render({\n\t                'nearlimit' : limit * 0.75 <= dialog.machines_ins.list.length,\n\t                'limit' : limit,\n\t                'placeholder' : _(\"Enter IP address or host name\"),\n\t                'options' : invisible,\n\t            });\n\t\n\t            var button = dialog.get_sel(\".btn-primary\");\n\t            button.on(\"click\", add_machine);\n\t\n\t            $(\"#add-machine-address\").on(\"keyup\", function (ev) {\n\t                if (ev.which === 13) {\n\t                    var disabled = button.prop('disabled');\n\t                    if (!disabled)\n\t                        add_machine();\n\t                }\n\t            });\n\t            $(\"#add-machine-address\").on(\"input focus\", check_address);\n\t            color_picker.render(\"#add-machine-color-picker\", dialog.address, color);\n\t            $(\"#add-machine-address\").focus();\n\t        };\n\t    }\n\t\n\t    function MachinePort(dialog) {\n\t        var self = this;\n\t\n\t        function change_port() {\n\t            var dfp = $.Deferred();\n\t            var parts = dialog.machines_ins.split_connection_string(dialog.address);\n\t            parts.port = $(\"#edit-machine-port\").val();\n\t            var address = dialog.machines_ins.generate_connection_string(parts.user,\n\t                                                                  parts.port,\n\t                                                                  parts.address);\n\t            function update_host(ex) {\n\t                dialog.address = address;\n\t                dialog.machines_ins.change(parts.address, { \"port\": parts.port })\n\t                    .done(function () {\n\t                        // We failed before so try to connect again\n\t                        // now that the machine is saved.\n\t                        if (ex) {\n\t                            dialog.try_to_connect(address)\n\t                                .done(dialog.complete)\n\t                                .fail(function (e) {\n\t                                    dfp.reject(e);\n\t                                });\n\t                        } else {\n\t                            dfp.resolve();\n\t                        }\n\t                    })\n\t                    .fail(function (ex) {\n\t                        var msg = cockpit.format(_(\"Failed to edit machine: $0\"),\n\t                                                 cockpit.message(ex));\n\t                        dfp.reject(msg);\n\t                    });\n\t            }\n\t\n\t            dialog.try_to_connect(address)\n\t                .done(function () {\n\t                    update_host();\n\t                })\n\t                .fail(function (ex) {\n\t                    /* any other error means progress, so save */\n\t                    if (ex.problem != 'no-host')\n\t                        update_host(ex);\n\t                    else\n\t                        dfp.reject(ex);\n\t                });\n\t\n\t            dialog.run(dfp.promise());\n\t        }\n\t\n\t        self.load = function() {\n\t            var machine = dialog.machines_ins.lookup(dialog.address);\n\t            if (!machine) {\n\t                dialog.get_sel().modal('hide');\n\t                return;\n\t            }\n\t\n\t            dialog.render({ 'port' : machine.port,\n\t                            'allow_connection_string' : machines.allow_connection_string });\n\t            if (machines.allow_connection_string)\n\t                dialog.get_sel(\".btn-primary\").on(\"click\", change_port);\n\t        };\n\t    }\n\t\n\t    function HostKey(dialog, problem) {\n\t        var self = this;\n\t        var error_options = null;\n\t        var key = null;\n\t        var allow_change = problem == \"unknown-hostkey\";\n\t\n\t        function add_key() {\n\t            var q;\n\t            var machine = dialog.machines_ins.lookup(dialog.address);\n\t            if (!machine || machine.on_disk) {\n\t                q = dialog.machines_ins.add_key(key);\n\t            } else {\n\t                /* When machine isn't saved to disk\n\t                   don't save the key either */\n\t                q = dialog.machines_ins.change(dialog.address, {\n\t                    'host_key': key\n\t                });\n\t            }\n\t\n\t            var promise = q.then(function () {\n\t                var inner = dialog.try_to_connect(dialog.address);\n\t\n\t                inner.fail(function(ex) {\n\t                    if ((ex.problem == \"invalid-hostkey\" ||\n\t                        ex.problem == \"unknown-hostkey\") &&\n\t                        machine && !machine.on_disk) {\n\t                            dialog.machines_ins.change(dialog.address, {\n\t                                'host_key': null\n\t                            });\n\t                        }\n\t                    });\n\t\n\t                return inner;\n\t            });\n\t\n\t            dialog.run(promise);\n\t        }\n\t\n\t        function render() {\n\t            var promise = null;\n\t            var fp;\n\t\n\t            if (error_options) {\n\t                key = error_options[\"host-key\"];\n\t                fp = error_options[\"host-fingerprint\"];\n\t            }\n\t\n\t            dialog.render({\n\t                'context_title' : dialog.context_title,\n\t                'path' : machines.known_hosts_path,\n\t                'key' : fp,\n\t                'key_host' : key ? key.split(' ')[0] : null,\n\t            });\n\t\n\t            if (!key) {\n\t                promise = dialog.try_to_connect(dialog.address)\n\t                    .fail(function(ex) {\n\t                        if (ex.problem != problem) {\n\t                            dialog.render_error(ex);\n\t                        } else {\n\t                            error_options = ex;\n\t                            render();\n\t                        }\n\t                    })\n\t\n\t                    // Fixed already, just close\n\t                    .done(function (v) {\n\t                        dialog.complete(v);\n\t                    });\n\t\n\t                dialog.get_sel().dialog(\"wait\", promise);\n\t            } else if (allow_change) {\n\t                dialog.get_sel(\".btn-primary\").on(\"click\", add_key);\n\t            }\n\t        }\n\t\n\t        self.load = function(ex) {\n\t            error_options = ex;\n\t            render();\n\t        };\n\t    }\n\t\n\t    function ChangeAuth(dialog) {\n\t        var self = this;\n\t        var error_options = null;\n\t        var allows_password = false;\n\t        var keys = null;\n\t        var machine = dialog.machines_ins.lookup(dialog.address);\n\t\n\t        self.user = { };\n\t\n\t        function update_keys() {\n\t            var key_div = dialog.get_sel('.keys');\n\t\n\t            if (key_div) {\n\t                key_div.empty();\n\t                for (var id in keys.items) {\n\t                    var key = keys.items[id];\n\t                    if (key.loaded)\n\t                        key_div.append($(\"<div>\").text(key.name));\n\t                }\n\t            }\n\t        }\n\t\n\t        function login() {\n\t            var address;\n\t            var options = {};\n\t            var dfp = $.Deferred();\n\t            var user = $(\"#login-custom-user\").val();\n\t\n\t            var parts = dialog.machines_ins.split_connection_string(dialog.address);\n\t            parts.user = user;\n\t\n\t            address = dialog.machines_ins.generate_connection_string(parts.user,\n\t                                                              parts.port,\n\t                                                              parts.address);\n\t\n\t            if ($(\"#login-type\").val() != 'stored') {\n\t                options['password'] = $(\"#login-custom-password\").val();\n\t                options[\"session\"] = 'shared';\n\t                if (!user) {\n\t                    /* we don't want to save the default user for everyone\n\t                     * so we pass current user as an option, but make sure the\n\t                     * session isn't private\n\t                     */\n\t                    if (self.user && self.user.name)\n\t                        options[\"user\"] = self.user.name;\n\t                    options[\"temp-session\"] = false; /* Compatibility option */\n\t                }\n\t            }\n\t\n\t            dialog.try_to_connect(address, options)\n\t                .done(function () {\n\t                    dialog.address = address;\n\t                    if (machine) {\n\t                        dialog.machines_ins.change(machine.address, { \"user\" : user })\n\t                            .done(dfp.resolve)\n\t                            .fail(dfp.reject);\n\t                    } else {\n\t                        dfp.resolve();\n\t                    }\n\t                })\n\t                .fail(dfp.reject);\n\t\n\t            dialog.run(dfp.promise());\n\t        }\n\t\n\t        function change_login_type(value) {\n\t            var stored = value != 'password';\n\t            var text = $(\"#login-type li[value=\" + value + \"]\").text();\n\t            $(\"#login-type button span\").text(text);\n\t            $(\"#login-available\").toggle(stored);\n\t            $(\"#login-diff-password\").toggle(!stored);\n\t        }\n\t\n\t        function render() {\n\t            var promise = null;\n\t            var template = \"change-auth\";\n\t            if (!machines.allow_connection_string || !machines.has_auth_results)\n\t                template = \"auth-failed\";\n\t\n\t            var methods = null;\n\t            var available = null;\n\t            var supported = null;\n\t\n\t            var machine_user = dialog.machines_ins.split_connection_string(dialog.address).user;\n\t            if (!machine_user && machine)\n\t                machine_user = machine.user;\n\t\n\t            if (error_options && machines.has_auth_results) {\n\t                supported = {};\n\t                available = {};\n\t\n\t                methods = error_options[\"auth-method-results\"];\n\t                if (methods) {\n\t                    allows_password = is_method_supported(methods, 'password');\n\t                    for (var method in methods) {\n\t                        if (can_try_method(methods, method)) {\n\t                            available[method] = true;\n\t                        }\n\t                    }\n\t                }\n\t\n\t                if ($.isEmptyObject(available))\n\t                    template = \"auth-failed\";\n\t            }\n\t\n\t            dialog.render({\n\t                'supported' : methods,\n\t                'available' : available,\n\t                'machine_user' : machine_user,\n\t                'user' : self.user ? self.user.name : \"\",\n\t                'allows_password' : allows_password,\n\t                'can_sync': !!dialog.codes['sync-users'],\n\t                'machines.allow_connection_string' : machines.allow_connection_string,\n\t                'sync_link' : function() {\n\t                    return function(text, render) {\n\t                        return '<a id=\"do-sync-users\">' + render(text) + \"</a>\";\n\t                    };\n\t                }\n\t            }, template);\n\t\n\t            if (methods === null && machines.has_auth_results) {\n\t                promise = dialog.try_to_connect(dialog.address)\n\t                    .fail(function(ex) {\n\t                        error_options = ex;\n\t                        render();\n\t                    })\n\t\n\t                    // Fixed already, just close\n\t                    .done(function (v) {\n\t                        dialog.complete(v);\n\t                    });\n\t\n\t                dialog.get_sel().dialog(\"wait\", promise);\n\t            } else if (!$.isEmptyObject(available)) {\n\t                $(\"#login-type li\").on('click', function() {\n\t                    change_login_type($(this).attr(\"value\"));\n\t                });\n\t                change_login_type($(\"#login-type li:first-child\").attr(\"value\"));\n\t                dialog.get_sel(\".btn-primary\").on(\"click\", login);\n\t                dialog.get_sel(\"a[data-content]\").popover();\n\t\n\t                update_keys();\n\t            }\n\t\n\t            dialog.get_sel(\"#do-sync-users\").on(\"click\", function () {\n\t                dialog.render_template(\"sync-users\");\n\t            });\n\t        }\n\t\n\t        self.load = function(ex) {\n\t            error_options = ex;\n\t            if (credentials) {\n\t                keys = credentials.keys_instance();\n\t                $(keys).on(\"changed\", update_keys);\n\t            }\n\t            cockpit.user()\n\t                .done(function (user) {\n\t                    self.user = user;\n\t                })\n\t                .always(function (user) {\n\t                    render();\n\t                });\n\t        };\n\t\n\t        self.close = function(ex) {\n\t            if (keys) {\n\t                $(keys).off();\n\t                keys.close();\n\t            }\n\t            keys = null;\n\t        };\n\t    }\n\t\n\t    function SyncUsers(dialog) {\n\t        var self = this;\n\t        var users = {};\n\t\n\t        var needs_auth = false;\n\t        var needs_root = false;\n\t        var methods = null;\n\t        var remote_options = { \"superuser\": true };\n\t\n\t        var perm_failed = null;\n\t\n\t        function load_users() {\n\t            var local = cockpit.dbus(null, { bus: \"internal\",\n\t                                             host: \"localhost\",\n\t                                             superuser: true });\n\t            $(local).on(\"close\", function(event, options) {\n\t                perm_failed = options;\n\t                render();\n\t            });\n\t\n\t            var proxy = local.proxy(\"cockpit.Setup\", \"/setup\");\n\t            proxy.wait(function () {\n\t                if (proxy.valid) {\n\t                    var blank = {\n\t                        \"t\" : \"(asas)\",\n\t                        \"v\" : [[], []]\n\t                    };\n\t\n\t                    proxy.Transfer(\"passwd1\", blank)\n\t                        .done(function(prepared) {\n\t                            var i, parts, name;\n\t                            var groups = prepared.v[1];\n\t\n\t                            for (i = 0; i < prepared.v[0].length; i++) {\n\t                                var raw = prepared.v[0][i];\n\t\n\t                                parts = raw.split(\":\");\n\t                                name = parts[0];\n\t\n\t                                users[name] = {\n\t                                    \"username\" : name,\n\t                                    \"name\" : parts[4] || name,\n\t                                    \"raw\" : raw,\n\t                                    \"groups\" : [],\n\t                                };\n\t                            }\n\t\n\t                            for (i = 0; i < groups.length; i++) {\n\t                                parts = groups[i].split(\":\");\n\t                                name = parts[0];\n\t                                var members = parts[parts.length - 1].split(\",\");\n\t                                for (var j = 0; j < members.length; j++) {\n\t                                    var u = members[j];\n\t                                    if (users[u])\n\t                                        users[u].groups.push(name);\n\t                                }\n\t                            }\n\t                        })\n\t                        .fail(function(ex) {\n\t                            ex.message = cockpit.gettext(ex.message);\n\t                            perm_failed = ex;\n\t                        })\n\t                        .always(function(ex) {\n\t                            $(local).off();\n\t                            local.close();\n\t                            render();\n\t                        });\n\t                }\n\t            });\n\t        }\n\t\n\t        function sync_users() {\n\t            var client = null;\n\t\n\t            var dfd = $.Deferred();\n\t            var promise = dfd.promise();\n\t\n\t            dialog.run(promise);\n\t\n\t            /* A successfull sync should close the dialog */\n\t            dialog.set_on_success(null);\n\t\n\t            promise.always(function () {\n\t                if (client) {\n\t                    $(client).off();\n\t                    client.close();\n\t                }\n\t            });\n\t\n\t            var options = { bus: \"internal\" };\n\t            if (needs_auth) {\n\t                options.user = $(\"#sync-username\").val();\n\t                options.password = $(\"#sync-password\").val();\n\t            }\n\t            $.extend(options, remote_options, { host: dialog.address });\n\t            client = cockpit.dbus(null, options);\n\t            $(client).on(\"close\", function(event, ex) {\n\t                dfd.reject(cockpit.message(ex));\n\t            });\n\t\n\t            var variant = {\n\t                \"t\" : \"(asas)\",\n\t                \"v\" : [[]],\n\t            };\n\t\n\t            var groups = {};\n\t            dialog.get_sel(\"input:checked\").each( function() {\n\t                var u = users[$(this).attr(\"name\")];\n\t                if (u) {\n\t                    variant.v[0].push(u.raw);\n\t                    for (var i = 0; i < u.groups.length; i++) {\n\t                        var group = u.groups[i];\n\t                        if (!groups[group])\n\t                            groups[group] = [];\n\t\n\t                        groups[group].push(u.username);\n\t                    }\n\t                }\n\t            });\n\t            variant.v.push(Object.keys(groups).map(function(k) {\n\t                return k + \":::\" + groups[k].join();\n\t            }));\n\t\n\t            /* We assume all cockpits support the 'passwd1' mechanism */\n\t            var proxy = client.proxy(\"cockpit.Setup\", \"/setup\");\n\t            proxy.wait(function() {\n\t                if (proxy.valid) {\n\t                    proxy.Commit(\"passwd1\", variant)\n\t                        .fail(function(ex) {\n\t                            ex.message = cockpit.gettext(ex.message);\n\t                            dfd.reject(ex);\n\t                        })\n\t                        .done(dfd.resolve);\n\t                }\n\t            });\n\t        }\n\t\n\t        function toggle_button() {\n\t            var any = dialog.get_sel(\"input:checked\").length > 0;\n\t            dialog.get_sel(\".btn-primary\").toggleClass(\"disabled\", !any);\n\t        }\n\t\n\t        function render() {\n\t            function formated_groups() {\n\t                /*jshint validthis:true */\n\t                if (this.groups)\n\t                    return this.groups.join(\", \");\n\t            }\n\t\n\t            /* assume password is allowed for backwards compatibility */\n\t            var allows_password = true;\n\t            var user_list = Object.keys(users).sort().map(function(v) {\n\t                return users[v];\n\t            });\n\t\n\t            if (machines.has_auth_results && methods)\n\t                allows_password = is_method_supported(methods, 'password');\n\t\n\t            var text = dialog.render({\n\t                'needs_auth' : needs_auth,\n\t                'needs_root' : needs_root,\n\t                'users' : user_list,\n\t                'perm_failed' : perm_failed ? cockpit.message(perm_failed) : null,\n\t                'allows_password' : allows_password,\n\t                'formated_groups': formated_groups,\n\t            });\n\t\n\t            dialog.get_sel(\".modal-content\").html(text);\n\t            dialog.get_sel(\".btn-primary\").on(\"click\", sync_users);\n\t            dialog.get_sel(\"input:checkbox\").on(\"change\", function() {\n\t                var name = $(this).attr(\"name\");\n\t                users[name].checked = $(this).is(':checked');\n\t                toggle_button();\n\t            });\n\t            toggle_button();\n\t        }\n\t\n\t        self.load = function(error_options) {\n\t            if (error_options)\n\t                methods = error_options['auth-method-results'];\n\t\n\t            render();\n\t            dialog.try_to_connect(dialog.address, remote_options).fail(function(ex) {\n\t                needs_auth = true;\n\t                if (ex.problem == \"access-denied\") {\n\t                    needs_root = true;\n\t                    if (!methods && machines.has_auth_results)\n\t                        /* TODO: We need to know if password auth is\n\t                         * supported but we only get that when the transport\n\t                         * closes. Passing an invalid username should\n\t                         * open new transport that fails.\n\t                         */\n\t                        dialog.try_to_connect(dialog.address, { \"user\" : \"1\" })\n\t                            .fail(function(ex) {\n\t                                methods = ex['auth-method-results'];\n\t                            })\n\t                            .always(render);\n\t                } else {\n\t                    methods = ex['auth-method-results'];\n\t                    render();\n\t                }\n\t            });\n\t            load_users();\n\t        };\n\t    }\n\t\n\t    function MachineDialogManager(machines_ins, codes) {\n\t        var self = this;\n\t\n\t        if (!codes)\n\t            codes = default_codes;\n\t\n\t        var color_picker = new MachineColorPicker(machines_ins);\n\t\n\t        self.troubleshoot = function(target_id, machine) {\n\t            var selector = \"#\" + target_id;\n\t            if (!machine || !machine.problem)\n\t                return;\n\t\n\t            var template = codes[machine.problem];\n\t            if (machine.problem == \"no-host\")\n\t                template = \"change-port\";\n\t\n\t            var dialog = new Dialog(selector, machine.address, machines_ins, codes);\n\t            dialog.render_template(template);\n\t            dialog.show();\n\t        };\n\t\n\t        self.needs_troubleshoot = function (machine) {\n\t            if (!machine || !machine.problem)\n\t                return false;\n\t\n\t            if (machine.problem == \"no-host\")\n\t                return true;\n\t\n\t            return codes[machine.problem] ? true : false;\n\t        };\n\t\n\t        self.render_dialog = function (template, target_id, address) {\n\t            var selector = \"#\" + target_id;\n\t            var dialog = new Dialog(selector, address, machines_ins, codes);\n\t            dialog.render_template(template);\n\t            dialog.show();\n\t        };\n\t\n\t        self.render_color_picker = function (selector, address) {\n\t            color_picker.render(selector, address);\n\t        };\n\t    }\n\t\n\t    module.exports = {\n\t        new_manager: function (machines_ins, codes) {\n\t            return new MachineDialogManager(machines_ins, codes);\n\t        }\n\t    };\n\t}());\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar cockpit = __webpack_require__(8);\n\tvar mustache = __webpack_require__(17);\n\t\n\t/*\n\t * Turns a mustache template into a translated mustache template\n\t * by preparsing it and translating it.\n\t */\n\tvar cache = { };\n\t\n\tfunction translate(template) {\n\t    if (template in cache)\n\t        return cache[template];\n\t    var div = document.createElement(\"div\");\n\t    div.innerHTML = template;\n\t    cockpit.translate(div);\n\t    var result = div.innerHTML;\n\t    cache[template] = result;\n\t    return result;\n\t}\n\t\n\t/* Just like the mustache object, except for translated */\n\tmodule.exports = cockpit.extend({ }, mustache, {\n\t    render: function render(template, view, partials) {\n\t        return translate(mustache.render(template, view, partials));\n\t    },\n\t    to_html: function to_html(template, view, partials, send) {\n\t        return translate(mustache.to_html(template, view, partials, send));\n\t    },\n\t    clearCache: function clearCache() {\n\t        cache = { };\n\t        return mustache.clearCache();\n\t    }\n\t});\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * mustache.js - Logic-less {{mustache}} templates with JavaScript\n\t * http://github.com/janl/mustache.js\n\t */\n\t\n\t/*global define: false*/\n\t\n\t(function (root, factory) {\n\t  if (typeof exports === \"object\" && exports) {\n\t    factory(exports); // CommonJS\n\t  } else {\n\t    var mustache = {};\n\t    factory(mustache);\n\t    if (true) {\n\t      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (mustache), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD\n\t    } else {\n\t      root.Mustache = mustache; // <script>\n\t    }\n\t  }\n\t}(this, function (mustache) {\n\t\n\t  var whiteRe = /\\s*/;\n\t  var spaceRe = /\\s+/;\n\t  var nonSpaceRe = /\\S/;\n\t  var eqRe = /\\s*=/;\n\t  var curlyRe = /\\s*\\}/;\n\t  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\t\n\t  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n\t  // See https://github.com/janl/mustache.js/issues/189\n\t  var RegExp_test = RegExp.prototype.test;\n\t  function testRegExp(re, string) {\n\t    return RegExp_test.call(re, string);\n\t  }\n\t\n\t  function isWhitespace(string) {\n\t    return !testRegExp(nonSpaceRe, string);\n\t  }\n\t\n\t  var Object_toString = Object.prototype.toString;\n\t  var isArray = Array.isArray || function (object) {\n\t    return Object_toString.call(object) === '[object Array]';\n\t  };\n\t\n\t  function isFunction(object) {\n\t    return typeof object === 'function';\n\t  }\n\t\n\t  function escapeRegExp(string) {\n\t    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n\t  }\n\t\n\t  var entityMap = {\n\t    \"&\": \"&amp;\",\n\t    \"<\": \"&lt;\",\n\t    \">\": \"&gt;\",\n\t    '\"': '&quot;',\n\t    \"'\": '&#39;',\n\t    \"/\": '&#x2F;'\n\t  };\n\t\n\t  function escapeHtml(string) {\n\t    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n\t      return entityMap[s];\n\t    });\n\t  }\n\t\n\t  function escapeTags(tags) {\n\t    if (!isArray(tags) || tags.length !== 2) {\n\t      throw new Error('Invalid tags: ' + tags);\n\t    }\n\t\n\t    return [\n\t      new RegExp(escapeRegExp(tags[0]) + \"\\\\s*\"),\n\t      new RegExp(\"\\\\s*\" + escapeRegExp(tags[1]))\n\t    ];\n\t  }\n\t\n\t  /**\n\t   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n\t   * argument is given here it must be an array with two string values: the\n\t   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n\t   * course, the default is to use mustaches (i.e. mustache.tags).\n\t   *\n\t   * A token is an array with at least 4 elements. The first element is the\n\t   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n\t   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n\t   * all template text that appears outside a symbol this element is \"text\".\n\t   *\n\t   * The second element of a token is its \"value\". For mustache tags this is\n\t   * whatever else was inside the tag besides the opening symbol. For text tokens\n\t   * this is the text itself.\n\t   *\n\t   * The third and fourth elements of the token are the start and end indices\n\t   * in the original template of the token, respectively.\n\t   *\n\t   * Tokens that are the root node of a subtree contain two more elements: an\n\t   * array of tokens in the subtree and the index in the original template at which\n\t   * the closing tag for that section begins.\n\t   */\n\t  function parseTemplate(template, tags) {\n\t    tags = tags || mustache.tags;\n\t    template = template || '';\n\t\n\t    if (typeof tags === 'string') {\n\t      tags = tags.split(spaceRe);\n\t    }\n\t\n\t    var tagRes = escapeTags(tags);\n\t    var scanner = new Scanner(template);\n\t\n\t    var sections = [];     // Stack to hold section tokens\n\t    var tokens = [];       // Buffer to hold the tokens\n\t    var spaces = [];       // Indices of whitespace tokens on the current line\n\t    var hasTag = false;    // Is there a {{tag}} on the current line?\n\t    var nonSpace = false;  // Is there a non-space char on the current line?\n\t\n\t    // Strips all whitespace tokens array for the current line\n\t    // if there was a {{#tag}} on it and otherwise only space.\n\t    function stripSpace() {\n\t      if (hasTag && !nonSpace) {\n\t        while (spaces.length) {\n\t          delete tokens[spaces.pop()];\n\t        }\n\t      } else {\n\t        spaces = [];\n\t      }\n\t\n\t      hasTag = false;\n\t      nonSpace = false;\n\t    }\n\t\n\t    var start, type, value, chr, token, openSection;\n\t    while (!scanner.eos()) {\n\t      start = scanner.pos;\n\t\n\t      // Match any text between tags.\n\t      value = scanner.scanUntil(tagRes[0]);\n\t      if (value) {\n\t        for (var i = 0, len = value.length; i < len; ++i) {\n\t          chr = value.charAt(i);\n\t\n\t          if (isWhitespace(chr)) {\n\t            spaces.push(tokens.length);\n\t          } else {\n\t            nonSpace = true;\n\t          }\n\t\n\t          tokens.push(['text', chr, start, start + 1]);\n\t          start += 1;\n\t\n\t          // Check for whitespace on the current line.\n\t          if (chr === '\\n') {\n\t            stripSpace();\n\t          }\n\t        }\n\t      }\n\t\n\t      // Match the opening tag.\n\t      if (!scanner.scan(tagRes[0])) break;\n\t      hasTag = true;\n\t\n\t      // Get the tag type.\n\t      type = scanner.scan(tagRe) || 'name';\n\t      scanner.scan(whiteRe);\n\t\n\t      // Get the tag value.\n\t      if (type === '=') {\n\t        value = scanner.scanUntil(eqRe);\n\t        scanner.scan(eqRe);\n\t        scanner.scanUntil(tagRes[1]);\n\t      } else if (type === '{') {\n\t        value = scanner.scanUntil(new RegExp('\\\\s*' + escapeRegExp('}' + tags[1])));\n\t        scanner.scan(curlyRe);\n\t        scanner.scanUntil(tagRes[1]);\n\t        type = '&';\n\t      } else {\n\t        value = scanner.scanUntil(tagRes[1]);\n\t      }\n\t\n\t      // Match the closing tag.\n\t      if (!scanner.scan(tagRes[1])) {\n\t        throw new Error('Unclosed tag at ' + scanner.pos);\n\t      }\n\t\n\t      token = [ type, value, start, scanner.pos ];\n\t      tokens.push(token);\n\t\n\t      if (type === '#' || type === '^') {\n\t        sections.push(token);\n\t      } else if (type === '/') {\n\t        // Check section nesting.\n\t        openSection = sections.pop();\n\t\n\t        if (!openSection) {\n\t          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\t        }\n\t        if (openSection[1] !== value) {\n\t          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n\t        }\n\t      } else if (type === 'name' || type === '{' || type === '&') {\n\t        nonSpace = true;\n\t      } else if (type === '=') {\n\t        // Set the tags for the next time around.\n\t        tagRes = escapeTags(tags = value.split(spaceRe));\n\t      }\n\t    }\n\t\n\t    // Make sure there are no open sections when we're done.\n\t    openSection = sections.pop();\n\t    if (openSection) {\n\t      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\t    }\n\t\n\t    return nestTokens(squashTokens(tokens));\n\t  }\n\t\n\t  /**\n\t   * Combines the values of consecutive text tokens in the given `tokens` array\n\t   * to a single token.\n\t   */\n\t  function squashTokens(tokens) {\n\t    var squashedTokens = [];\n\t\n\t    var token, lastToken;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      if (token) {\n\t        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n\t          lastToken[1] += token[1];\n\t          lastToken[3] = token[3];\n\t        } else {\n\t          squashedTokens.push(token);\n\t          lastToken = token;\n\t        }\n\t      }\n\t    }\n\t\n\t    return squashedTokens;\n\t  }\n\t\n\t  /**\n\t   * Forms the given array of `tokens` into a nested tree structure where\n\t   * tokens that represent a section have two additional items: 1) an array of\n\t   * all tokens that appear in that section and 2) the index in the original\n\t   * template that represents the end of that section.\n\t   */\n\t  function nestTokens(tokens) {\n\t    var nestedTokens = [];\n\t    var collector = nestedTokens;\n\t    var sections = [];\n\t\n\t    var token, section;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      switch (token[0]) {\n\t      case '#':\n\t      case '^':\n\t        collector.push(token);\n\t        sections.push(token);\n\t        collector = token[4] = [];\n\t        break;\n\t      case '/':\n\t        section = sections.pop();\n\t        section[5] = token[2];\n\t        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n\t        break;\n\t      default:\n\t        collector.push(token);\n\t      }\n\t    }\n\t\n\t    return nestedTokens;\n\t  }\n\t\n\t  /**\n\t   * A simple string scanner that is used by the template parser to find\n\t   * tokens in template strings.\n\t   */\n\t  function Scanner(string) {\n\t    this.string = string;\n\t    this.tail = string;\n\t    this.pos = 0;\n\t  }\n\t\n\t  /**\n\t   * Returns `true` if the tail is empty (end of string).\n\t   */\n\t  Scanner.prototype.eos = function () {\n\t    return this.tail === \"\";\n\t  };\n\t\n\t  /**\n\t   * Tries to match the given regular expression at the current position.\n\t   * Returns the matched text if it can match, the empty string otherwise.\n\t   */\n\t  Scanner.prototype.scan = function (re) {\n\t    var match = this.tail.match(re);\n\t\n\t    if (match && match.index === 0) {\n\t      var string = match[0];\n\t      this.tail = this.tail.substring(string.length);\n\t      this.pos += string.length;\n\t      return string;\n\t    }\n\t\n\t    return \"\";\n\t  };\n\t\n\t  /**\n\t   * Skips all text until the given regular expression can be matched. Returns\n\t   * the skipped string, which is the entire tail if no match can be made.\n\t   */\n\t  Scanner.prototype.scanUntil = function (re) {\n\t    var index = this.tail.search(re), match;\n\t\n\t    switch (index) {\n\t    case -1:\n\t      match = this.tail;\n\t      this.tail = \"\";\n\t      break;\n\t    case 0:\n\t      match = \"\";\n\t      break;\n\t    default:\n\t      match = this.tail.substring(0, index);\n\t      this.tail = this.tail.substring(index);\n\t    }\n\t\n\t    this.pos += match.length;\n\t\n\t    return match;\n\t  };\n\t\n\t  /**\n\t   * Represents a rendering context by wrapping a view object and\n\t   * maintaining a reference to the parent context.\n\t   */\n\t  function Context(view, parentContext) {\n\t    this.view = view == null ? {} : view;\n\t    this.cache = { '.': this.view };\n\t    this.parent = parentContext;\n\t  }\n\t\n\t  /**\n\t   * Creates a new context using the given view with this context\n\t   * as the parent.\n\t   */\n\t  Context.prototype.push = function (view) {\n\t    return new Context(view, this);\n\t  };\n\t\n\t  /**\n\t   * Returns the value of the given name in this context, traversing\n\t   * up the context hierarchy if the value is absent in this context's view.\n\t   */\n\t  Context.prototype.lookup = function (name) {\n\t    var value;\n\t    if (name in this.cache) {\n\t      value = this.cache[name];\n\t    } else {\n\t      var context = this;\n\t\n\t      while (context) {\n\t        if (name.indexOf('.') > 0) {\n\t          value = context.view;\n\t\n\t          var names = name.split('.'), i = 0;\n\t          while (value != null && i < names.length) {\n\t            value = value[names[i++]];\n\t          }\n\t        } else {\n\t          value = context.view[name];\n\t        }\n\t\n\t        if (value != null) break;\n\t\n\t        context = context.parent;\n\t      }\n\t\n\t      this.cache[name] = value;\n\t    }\n\t\n\t    if (isFunction(value)) {\n\t      value = value.call(this.view);\n\t    }\n\t\n\t    return value;\n\t  };\n\t\n\t  /**\n\t   * A Writer knows how to take a stream of tokens and render them to a\n\t   * string, given a context. It also maintains a cache of templates to\n\t   * avoid the need to parse the same template twice.\n\t   */\n\t  function Writer() {\n\t    this.cache = {};\n\t  }\n\t\n\t  /**\n\t   * Clears all cached templates in this writer.\n\t   */\n\t  Writer.prototype.clearCache = function () {\n\t    this.cache = {};\n\t  };\n\t\n\t  /**\n\t   * Parses and caches the given `template` and returns the array of tokens\n\t   * that is generated from the parse.\n\t   */\n\t  Writer.prototype.parse = function (template, tags) {\n\t    var cache = this.cache;\n\t    var tokens = cache[template];\n\t\n\t    if (tokens == null) {\n\t      tokens = cache[template] = parseTemplate(template, tags);\n\t    }\n\t\n\t    return tokens;\n\t  };\n\t\n\t  /**\n\t   * High-level method that is used to render the given `template` with\n\t   * the given `view`.\n\t   *\n\t   * The optional `partials` argument may be an object that contains the\n\t   * names and templates of partials that are used in the template. It may\n\t   * also be a function that is used to load partial templates on the fly\n\t   * that takes a single argument: the name of the partial.\n\t   */\n\t  Writer.prototype.render = function (template, view, partials) {\n\t    var tokens = this.parse(template);\n\t    var context = (view instanceof Context) ? view : new Context(view);\n\t    return this.renderTokens(tokens, context, partials, template);\n\t  };\n\t\n\t  /**\n\t   * Low-level method that renders the given array of `tokens` using\n\t   * the given `context` and `partials`.\n\t   *\n\t   * Note: The `originalTemplate` is only ever used to extract the portion\n\t   * of the original template that was contained in a higher-order section.\n\t   * If the template doesn't use higher-order sections, this argument may\n\t   * be omitted.\n\t   */\n\t  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n\t    var buffer = '';\n\t\n\t    // This function is used to render an arbitrary template\n\t    // in the current context by higher-order sections.\n\t    var self = this;\n\t    function subRender(template) {\n\t      return self.render(template, context, partials);\n\t    }\n\t\n\t    var token, value;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      switch (token[0]) {\n\t      case '#':\n\t        value = context.lookup(token[1]);\n\t        if (!value) continue;\n\t\n\t        if (isArray(value)) {\n\t          for (var j = 0, jlen = value.length; j < jlen; ++j) {\n\t            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n\t          }\n\t        } else if (typeof value === 'object' || typeof value === 'string') {\n\t          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n\t        } else if (isFunction(value)) {\n\t          if (typeof originalTemplate !== 'string') {\n\t            throw new Error('Cannot use higher-order sections without the original template');\n\t          }\n\t\n\t          // Extract the portion of the original template that the section contains.\n\t          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\t\n\t          if (value != null) buffer += value;\n\t        } else {\n\t          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n\t        }\n\t\n\t        break;\n\t      case '^':\n\t        value = context.lookup(token[1]);\n\t\n\t        // Use JavaScript's definition of falsy. Include empty arrays.\n\t        // See https://github.com/janl/mustache.js/issues/186\n\t        if (!value || (isArray(value) && value.length === 0)) {\n\t          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n\t        }\n\t\n\t        break;\n\t      case '>':\n\t        if (!partials) continue;\n\t        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n\t        if (value != null) buffer += this.renderTokens(this.parse(value), context, partials, value);\n\t        break;\n\t      case '&':\n\t        value = context.lookup(token[1]);\n\t        if (value != null) buffer += value;\n\t        break;\n\t      case 'name':\n\t        value = context.lookup(token[1]);\n\t        if (value != null) buffer += mustache.escape(value);\n\t        break;\n\t      case 'text':\n\t        buffer += token[1];\n\t        break;\n\t      }\n\t    }\n\t\n\t    return buffer;\n\t  };\n\t\n\t  mustache.name = \"mustache.js\";\n\t  mustache.version = \"0.8.1\";\n\t  mustache.tags = [ \"{{\", \"}}\" ];\n\t\n\t  // All high-level mustache.* functions use this writer.\n\t  var defaultWriter = new Writer();\n\t\n\t  /**\n\t   * Clears all cached templates in the default writer.\n\t   */\n\t  mustache.clearCache = function () {\n\t    return defaultWriter.clearCache();\n\t  };\n\t\n\t  /**\n\t   * Parses and caches the given template in the default writer and returns the\n\t   * array of tokens it contains. Doing this ahead of time avoids the need to\n\t   * parse templates on the fly as they are rendered.\n\t   */\n\t  mustache.parse = function (template, tags) {\n\t    return defaultWriter.parse(template, tags);\n\t  };\n\t\n\t  /**\n\t   * Renders the `template` with the given `view` and `partials` using the\n\t   * default writer.\n\t   */\n\t  mustache.render = function (template, view, partials) {\n\t    return defaultWriter.render(template, view, partials);\n\t  };\n\t\n\t  // This is here for backwards compatibility with 0.4.x.\n\t  mustache.to_html = function (template, view, partials, send) {\n\t    var result = mustache.render(template, view, partials);\n\t\n\t    if (isFunction(send)) {\n\t      send(result);\n\t    } else {\n\t      return result;\n\t    }\n\t  };\n\t\n\t  // Export the escaping function so that the user may override it.\n\t  // See https://github.com/janl/mustache.js/issues/244\n\t  mustache.escape = escapeHtml;\n\t\n\t  // Export these mainly for testing, but also for advanced usage.\n\t  mustache.Scanner = Scanner;\n\t  mustache.Context = Context;\n\t  mustache.Writer = Writer;\n\t\n\t}));\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Add Machine to Dashboard</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td class=\\\"top\\\" translatable=\\\"yes\\\">Address</td>\\n                <td>\\n                <div class=\\\"dialog-wrapper error-keep\\\">\\n                    <input class=\\\"form-control\\\" id=\\\"add-machine-address\\\"\\n                       type=\\\"test\\\" value=\\\"{{ full_address }}\\\"\\n                       list=\\\"options\\\"\\n                       placeholder=\\\"{{ placeholder }}\\\"/>\\n                    <datalist id=\\\"options\\\">\\n                        {{#options}}\\n                        <option value=\\\"{{.}}\\\">\\n                        {{/options}}\\n                    </datalist>\\n                </div>\\n                </td>\\n            </tr>\\n            <tr>\\n                <td translatable=\\\"yes\\\">Color</td>\\n                <td id=\\\"add-machine-color-picker\\\">\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    {{#nearlimit}}\\n    <div class=\\\"alert alert-warning dialog-error dashboard-machine-warning\\\">\\n        <span class=\\\"pficon pficon-warning-triangle-o\\\"></span>\\n        <span translatable=\\\"yes\\\">Connecting simultaneously to more than {{ limit }} machines is unsupported.</span>\\n    </div>\\n    {{/nearlimit}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Add</button>\\n</div>\\n\"\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Authentication Failed</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    {{#supported}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}. To use this machine with cockpit you will need to enable one of the following authentication methods in the sshd config on {{#strong}}{{host}}{{/strong}}:</p>\\n    <ul>\\n        {{#password}}<li translatable=\\\"yes\\\">Password</li>{{/password}}\\n        {{#public-key}}<li translatable=\\\"yes\\\">Public Key</li>{{/public-key}}\\n        {{#gssapi-mic}}<li translatable=\\\"yes\\\">Kerberos Based SSO</li>{{/gssapi-mic}}\\n    </ul>\\n    {{/supported}}\\n\\n    {{^supported}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log in to {{#strong}}{{host}}{{/strong}}. {{#can_sync}}You may want to try to {{#sync_link}}synchronize users{{/sync_link}}.{{/can_sync}} For more authentication options and troubleshooting support please upgrade cockpit-ws to a newer version.</p>\\n    {{/supported}}\\n\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Log in to {{host}}</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    {{^available}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}.</p>\\n    {{/available}}\\n\\n    {{#available}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}. You can change your authentication credentials below. {{#can_sync}}You may prefer to {{#sync_link}}synchronize accounts and passwords{{/sync_link}}.{{/can_sync}}</p>\\n\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">User name</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"login-custom-user\\\" type=\\\"text\\\" value=\\\"{{machine_user}}\\\" placeholder=\\\"{{ user }}\\\"/>\\n                </td>\\n                <td>\\n                    <a tabindex=\\\"0\\\" role=\\\"button\\\" data-toggle=\\\"popover\\\"\\n                        data-trigger=\\\"focus\\\" data-placement=\\\"bottom\\\" translate=\\\"data-content\\\"\\n                        data-content=\\\"Leave blank to connect to this machine as the currently logged in user{{#user}} ({{user}}){{/user}}. If you enter a different username, that user will always be used connecting to this machine.\\\">\\n                        <span class=\\\"fa fa-lg fa-info-circle\\\"></span>\\n                    </a>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td translatable=\\\"yes\\\">Authentication</td>\\n                <td>\\n                    <div class=\\\"btn-group bootstrap-select dropdown form-control\\\" id=\\\"login-type\\\">\\n                        <button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\"\\n                            data-toggle=\\\"dropdown\\\">\\n                            <span class=\\\"pull-left\\\" translatable=\\\"yes\\\"></span>\\n                            <div class=\\\"caret\\\"></div>\\n                        </button>\\n                        <ul class=\\\"dropdown-menu\\\">\\n                            {{#allows_password}}\\n                            <li value=\\\"password\\\"><a translate>Type a password</a></li>\\n                            {{/allows_password}}\\n                            <li value=\\\"stored\\\"><a translate>Using available credentials</a></li>\\n                        </ul>\\n                    </div>\\n                </td>\\n            </tr>\\n\\n            {{#allows_password}}\\n            <tr id=\\\"login-diff-password\\\">\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">Password</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"login-custom-password\\\" type=\\\"password\\\" />\\n                </td>\\n                <td>\\n                    <a tabindex=\\\"0\\\" role=\\\"button\\\" data-toggle=\\\"popover\\\"\\n                        data-trigger=\\\"focus\\\" data-placement=\\\"bottom\\\" translate=\\\"data-content\\\"\\n                        data-content=\\\"Entering a different password here means you will need to retype it every time you reconnect to this machine\\\">\\n                        <span class=\\\"fa fa-lg fa-info-circle\\\"></span>\\n                    </a>\\n                </td>\\n            </tr>\\n            {{/allows_password}}\\n            <tr id=\\\"login-available\\\">\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">Available</td>\\n                <td class=\\\"top\\\">\\n                        {{#password}}<div translatable=\\\"yes\\\">Login Password</div>{{/password}}\\n                        {{#gssapi-mic}}<div translatable=\\\"yes\\\">Kerberos Ticket</div>{{/gssapi-mic}}\\n                        {{#public-key}}<div class=\\\"keys\\\"><div class='dialog-wait-ct pull-left'><div class='spinner spinner-sm'></div><span translatable=\\\"yes\\\">Checking for public keys</span></div></div>{{/public-key}}\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n    {{/available}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Log In</button>\\n</div>\\n\"\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Could not contact {{host}}</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <p>\\n        <span translatable=\\\"yes\\\">Cockpit was unable to contact {{#strong}}{{host}}{{/strong}}.</span>\\n        {{^allow_connection_string}}\\n        <span translatable=\\\"yes\\\">To try a different port you will need to upgrade cockpit-ws to a newer version.</span>\\n        {{/allow_connection_string}}\\n\\n        {{#allow_connection_string}}\\n        <span translatable=\\\"yes\\\">Is sshd running on a different port?</span>\\n        {{/allow_connection_string}}\\n    </p>\\n\\n    {{#allow_connection_string}}\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td class=\\\"top\\\" translatable=\\\"yes\\\">Port</td>\\n                <td>\\n                <div class=\\\"dialog-wrapper error-keep\\\">\\n                    <input id=\\\"edit-machine-port\\\" class=\\\"form-control\\\"\\n                       type=\\\"test\\\" value=\\\"{{ port }}\\\"\\n                       list=\\\"options\\\"\\n                       placeholder=\\\"22\\\"/>\\n                </div>\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n    {{/allow_connection_string}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    {{#allow_connection_string}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Update</button>\\n    {{/allow_connection_string}}\\n\\n    {{^allow_connection_string}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n    {{/allow_connection_string}}\\n</div>\\n\"\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div>\\n    <div id=\\\"host-edit-color\\\" data-toggle=\\\"dropdown\\\"></div>\\n    <div id=\\\"host-edit-color-popover\\\" class=\\\"popover in\\\" tabindex=\\\"-1\\\">\\n        <div class=\\\"arrow\\\"></div>\\n        <div class=\\\"popover-content\\\">\\n            {{#colors}}\\n            <div>\\n                {{#list}}\\n                <div class=\\\"color-cell\\\"></div>\\n                {{/list}}\\n            </div>\\n            {{/colors}}\\n        </div>\\n        <div class=\\\"arrow\\\"></div>\\n    </div>\\n</div>\\n\"\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Incorrect Host Key</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <div class=\\\"banned\\\">\\n        <i class=\\\"fa fa-ban\\\"></i>\\n    </div>\\n    <p translatable=\\\"yes\\\">The key of {{#strong}}{{host}}{{/strong}} does not match the key previously in use. Unless this machine was recently replaced, it is likely that someone is trying to attack your connection to this machine.</p>\\n\\n    {{#key_host}}\\n    <p translatable=\\\"yes\\\">You can remove the previously stored key by running the following command</p>\\n\\n    <pre class=\\\"center\\\">ssh-keygen -R {{ key_host }} -f {{ path }}</pre>\\n    {{/key_host}}\\n\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Cockpit is not installed</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <p translatable=\\\"yes\\\">A compatible version of Cockpit is not installed on {{#strong}}{{host}}{{/strong}}.</p>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Synchronize users</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <p translatable=\\\"yes\\\">Select the users that you would like to be synchronized with {{#strong}}{{host}}{{/strong}}</p>\\n\\n{{#perm_failed}}\\n    <div class=\\\"alert alert-danger dialog-error\\\">\\n        <span class=\\\"fa fa-exclamation-triangle\\\"></span>\\n        <span translatable=\\\"yes\\\">Error loading users: {{perm_failed}}</span>\\n    </div>\\n{{/perm_failed}}\\n\\n{{^perm_failed}}\\n    <div id=\\\"sync-users\\\">\\n        <table class=\\\"table\\\">\\n        <tbody>\\n        {{^users}}\\n            <tr>\\n                  <td>\\n                    <div class=\\\"center-spinner\\\">\\n                        <div class=\\\"spinner spinner-lg\\\"></div>\\n                    </div>\\n                  </td>\\n            </tr>\\n        {{/users}}\\n\\n        {{#users}}\\n              <tr>\\n                  <td><input type=\\\"checkbox\\\" name=\\\"{{username}}\\\" {{#checked}}checked=checked{{/checked}} /></td>\\n                  <td>{{username}}</td>\\n                  <td>{{name}}</td>\\n                  <td>&#8226;&#8226;&#8226;&#8226;&#8226;</td>\\n                  <td>{{formated_groups}}</td>\\n              </tr>\\n        {{/users}}\\n        </tbody>\\n        </table>\\n    </div>\\n\\n    {{#needs_auth}}\\n    <div>\\n        {{#needs_root}}\\n        <p translatable=\\\"yes\\\">You are connected to {{#strong}}{{host}}{{/strong}}, however in order to synchronize users, a user with superuser privileges is required.</p>\\n        {{/needs_root}}\\n        {{^needs_root}}\\n        <p translatable=\\\"yes\\\">In order to synchronize users, you need to log in to {{#strong}}{{host}}{{/strong}}.</p>\\n        {{/needs_root}}\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\">User name</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"sync-username\\\" type=\\\"text\\\" />\\n                </td>\\n            </tr>\\n            {{#allows_password}}\\n            <tr>\\n                <td translatable=\\\"yes\\\">Password</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"sync-password\\\" type=\\\"password\\\" />\\n                </td>\\n            </tr>\\n            {{/allows_password}}\\n        </table>\\n    </div>\\n    {{/needs_auth}}\\n{{/perm_failed}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary disabled\\\" translatable=\\\"yes\\\">Synchronize</button>\\n</div>\\n\"\n\n/***/ },\n/* 26 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Unknown Host Key</h4>\\n</div>\\n<div id=\\\"add-unknown-host\\\" class=\\\"modal-body\\\">\\n    {{#key}}\\n        <p translatable=\\\"yes\\\">The authenticity of host {{#strong}}{{host}}{{/strong}} can't be established. Are you sure you want to continue connecting?</p>\\n        <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\">Fingerprint</td>\\n                <td><pre class=\\\"machine-key\\\">{{key}} </pre></td>\\n            </tr>\\n        </table>\\n        </div>\\n    {{/key}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n\\n    {{#key}}\\n        <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Connect</button>\\n    {{/key}}\\n</div>\\n\"\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar phantom_checkpoint = phantom_checkpoint || function () { };\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(7);\n\t    var cockpit = __webpack_require__(8);\n\t\n\t    var base_index = __webpack_require__(28);\n\t\n\t    var _ = cockpit.gettext;\n\t\n\t    var shell_embedded = window.location.pathname.indexOf(\".html\") !== -1;\n\t\n\t    function MachinesIndex(index_options, machines, loader, mdialogs) {\n\t\n\t        if (!index_options)\n\t            index_options = {};\n\t\n\t        index_options.navigate = function (state, sidebar) {\n\t            return navigate(state, sidebar);\n\t        };\n\t        var index = base_index.new_index_from_proto(index_options);\n\t\n\t        /* Restarts */\n\t        $(index).on(\"expect_restart\", function (ev, host) {\n\t            loader.expect_restart(host);\n\t        });\n\t\n\t        /* Disconnection Dialog */\n\t        var watchdog_problem = null;\n\t        $(index).on(\"disconnect\", function (ev, problem) {\n\t            watchdog_problem = problem;\n\t            show_disconnected();\n\t        });\n\t\n\t        /* Is troubleshooting dialog open */\n\t        var troubleshooting = false;\n\t\n\t        /* Reconnect button */\n\t        $(\"#machine-reconnect\").on(\"click\", function(ev) {\n\t            if (watchdog_problem) {\n\t                cockpit.sessionStorage.clear();\n\t                window.location.reload(true);\n\t            } else {\n\t                navigate(null, true);\n\t            }\n\t        });\n\t\n\t        /* Troubleshoot pause navigation */\n\t        $(\"#troubleshoot-dialog\").on(\"show.bs.modal\", function(ev) {\n\t            troubleshooting = true;\n\t        });\n\t\n\t        /* Troubleshoot dialog close */\n\t        $(\"#troubleshoot-dialog\").on(\"hide.bs.modal\", function(ev) {\n\t            troubleshooting = false;\n\t            navigate(null, true);\n\t        });\n\t\n\t        /* Navigation */\n\t        var ready = false;\n\t        function on_ready() {\n\t            ready = true;\n\t            index.ready();\n\t        }\n\t\n\t        /* When the machine list is ready we start processing navigation */\n\t        $(machines)\n\t            .on(\"ready\", on_ready)\n\t            .on(\"added updated\", function(ev, machine) {\n\t                if (!machine.visible)\n\t                    index.frames.remove(machine);\n\t                else if (machine.problem)\n\t                    index.frames.remove(machine);\n\t\n\t                update_machines();\n\t                if (ready)\n\t                    navigate();\n\t            })\n\t            .on(\"removed\", function(ev, machine) {\n\t                index.frames.remove(machine);\n\t                update_machines();\n\t            });\n\t\n\t        if (machines.ready)\n\t            on_ready();\n\t\n\t        /* When only one machine this operates as a link */\n\t        $(\"#machine-link\").on(\"click\", function(ev) {\n\t            if (machines.list.length == 1) {\n\t                index.jump({ host: machines.list[0].address, sidebar: true, component: \"\" });\n\t                return false;\n\t            }\n\t        });\n\t\n\t        function show_disconnected() {\n\t            var current_frame = index.current_frame();\n\t\n\t            if (current_frame)\n\t                $(current_frame).hide();\n\t\n\t            $(\".curtains-ct .spinner\").toggle(false);\n\t            $(\"#machine-reconnect\").toggle(true);\n\t            $(\"#machine-troubleshoot\").toggle(false);\n\t            $(\".curtains-ct i\").toggle(true);\n\t            $(\".curtains-ct h1\").text(_(\"Disconnected\"));\n\t            $(\".curtains-ct p\").text(cockpit.message(watchdog_problem));\n\t            $(\".curtains-ct\").show();\n\t            $(\"#navbar-dropdown\").addClass(\"disabled\");\n\t            phantom_checkpoint();\n\t        }\n\t\n\t        /* Handles navigation */\n\t        function navigate(state, reconnect) {\n\t            var machine;\n\t\n\t            /* If this is a watchdog problem or we are troubleshooting\n\t             * let the dialog handle it */\n\t            if (watchdog_problem || troubleshooting)\n\t                return;\n\t\n\t            /* phantomjs has a problem retrieving state, so we allow it to be passed in */\n\t            if (!state)\n\t                state = index.retrieve_state();\n\t            machine = machines.lookup(state.host);\n\t\n\t            /* No such machine */\n\t            if (!machine) {\n\t                machine = {\n\t                    key: state.host,\n\t                    address: state.host,\n\t                    label: state.host,\n\t                    state: \"failed\",\n\t                    problem: \"not-found\",\n\t                };\n\t\n\t            /* Asked to reconnect to the machine */\n\t            } else if (!machine.visible) {\n\t                machine.state = \"failed\";\n\t                machine.problem = \"not-found\";\n\t            } else if (reconnect && machine.state !== \"connected\") {\n\t                loader.connect(state.host);\n\t            }\n\t\n\t            var compiled = compile(machine);\n\t            if (machine.manifests && !state.component)\n\t                state.component = choose_component(state, compiled);\n\t\n\t            update_navbar(machine, state, compiled);\n\t            update_sidebar(machine, state, compiled);\n\t            update_frame(machine, state, compiled);\n\t\n\t            index.recalculate_layout();\n\t\n\t            /* Just replace the state, and URL */\n\t            index.jump(state, true);\n\t        }\n\t\n\t        function choose_component(state, compiled) {\n\t            var item, menu_items;\n\t            var single_host = machines.list.length <= 1;\n\t            var dashboards = compiled.ordered(\"dashboard\");\n\t\n\t            if (shell_embedded)\n\t                state.sidebar = true;\n\t\n\t            /* See if we should show a dashboard */\n\t            if (!state.sidebar && dashboards.length > 0) {\n\t                item = dashboards[0];\n\t                /* Don't chose a dashboard as a single host unless\n\t                 * it specifically supports that.\n\t                 */\n\t                if (item && (!single_host || item.wants !== \"multiple-machines\"))\n\t                    return item.path;\n\t                else\n\t                    item = null;\n\t            }\n\t\n\t            /* See if we can find something with currently selected label */\n\t            var label = $(\"#sidebar li.active a\").text();\n\t            if (label) {\n\t                item = compiled.search(\"label\", label);\n\t                if (item)\n\t                    return item.path;\n\t            }\n\t\n\t            /* Go for the first item */\n\t            menu_items = compiled.ordered(\"menu\");\n\t            if (menu_items.length > 0 && menu_items[0]) {\n\t                return menu_items[0].path;\n\t\n\t            /* If there is no menu items use a dashboard */\n\t            } else if (dashboards.length > 0) {\n\t                item = dashboards[0];\n\t                if (item) {\n\t                    state.sidebar = false;\n\t                    return item.path;\n\t                }\n\t            }\n\t\n\t            return \"system\";\n\t        }\n\t\n\t        function update_navbar(machine, state, compiled) {\n\t            $(\".dashboard-link\").each(function() {\n\t                var el = $(this);\n\t                el.toggleClass(\"active\", el.attr(\"data-component\") === state.component);\n\t            });\n\t\n\t            var hide;\n\t            if (machine && machine.static_hostname) {\n\t                hide = $(\".dashboard-link\").length < 2 && machines.list.length < 2;\n\t                $('#content-navbar').toggleClass(\"hidden\", hide);\n\t            } else {\n\t                $('#content-navbar').toggleClass(\"hidden\", false);\n\t            }\n\t\n\t            var item = compiled.items[state.component];\n\t            if (item && item.section == \"dashboard\") {\n\t                delete state.sidebar;\n\t                machine = null;\n\t            }\n\t\n\t            $(\"#machine-avatar\").attr(\"src\", machine && machine.avatar ? encodeURI(machine.avatar) :\n\t                                                \"../shell/images/server-small.png\");\n\t\n\t            var label;\n\t            if (machine) {\n\t                label = machine.label;\n\t            } else if (machines.list.length == 1) {\n\t                label = machines.list[0].label;\n\t            } else {\n\t                label = _(\"Machines\");\n\t            }\n\t            $(\"#machine-link span\").text(label);\n\t\n\t            var color;\n\t            if (machines.list.length == 1 || !machine)\n\t                color = \"transparent\";\n\t            else\n\t                color = machine.color || \"\";\n\t            $(\"#machine-color\").css(\"border-left-color\", color);\n\t\n\t            $(\"#machine-dropdown\").toggleClass(\"active\", !!machine);\n\t\n\t            /* Decide when to show the sidebar */\n\t            var sidebar = $(\"#sidebar\");\n\t\n\t            if (machine && machine.state == \"connected\")\n\t                sidebar.show();\n\t            else\n\t                sidebar.hide();\n\t        }\n\t\n\t        function update_sidebar(machine, state, compiled) {\n\t            function links(component) {\n\t                return $(\"<li>\")\n\t                    .toggleClass(\"active\", state.component === component.path)\n\t                    .append($(\"<a>\")\n\t                        .attr(\"href\", index.href({ host: machine.address, component: component.path }))\n\t                        .text(component.label));\n\t            }\n\t\n\t            var menu = compiled.ordered(\"menu\").map(links);\n\t            $(\"#sidebar-menu\").empty().append(menu);\n\t\n\t            var tools = compiled.ordered(\"tools\").map(links);\n\t            $(\"#sidebar-tools\").empty().append(tools);\n\t            $('#tools-panel li.active').parents('#tools-panel').collapse('show');\n\t        }\n\t\n\t        function update_title(label, machine) {\n\t            if (label)\n\t                label += \" - \";\n\t            else\n\t                label = \"\";\n\t            var suffix = index.default_title;\n\t            if (machine && machine.label)\n\t                suffix = machine.label;\n\t            document.title = label + suffix;\n\t        }\n\t\n\t        function update_frame(machine, state, compiled) {\n\t            var title, message, connecting, restarting;\n\t            var current_frame = index.current_frame();\n\t\n\t            if (machine.state != \"connected\") {\n\t                $(current_frame).hide();\n\t                current_frame = null;\n\t                index.current_frame(current_frame);\n\t\n\t                connecting = (machine.state == \"connecting\");\n\t                if (machine.restarting) {\n\t                    title = _(\"The machine is restarting\");\n\t                    message = \"\";\n\t                } else if (connecting) {\n\t                    title = _(\"Connecting to the machine\");\n\t                    message = \"\";\n\t                } else {\n\t                    title = _(\"Couldn't connect to the machine\");\n\t                    if (machine.problem == \"not-found\") {\n\t                        message = _(\"Cannot connect to an unknown machine\");\n\t                    } else {\n\t                        var error = machine.problem || machine.state;\n\t                        if (error)\n\t                            message = cockpit.message(error);\n\t                        else\n\t                            message = \"\";\n\t                    }\n\t                }\n\t\n\t                if (!machine.restarting && mdialogs.needs_troubleshoot(machine)) {\n\t                    $(\"#machine-troubleshoot\").off()\n\t                        .on(\"click\", function () {\n\t                            mdialogs.troubleshoot(\"troubleshoot-dialog\", machine);\n\t                        });\n\t                    $(\"#machine-troubleshoot\").show();\n\t                } else {\n\t                    $(\"#machine-troubleshoot\").hide();\n\t                }\n\t\n\t                restarting = !!machine.restarting;\n\t                $(\".curtains-ct\").show();\n\t                $(\".curtains-ct .spinner\").toggle(connecting || restarting);\n\t                $(\"#machine-reconnect\").toggle(!connecting && machine.problem != \"not-found\");\n\t                $(\".curtains-ct i\").toggle(!connecting && !restarting);\n\t                $(\".curtains-ct h1\").text(title);\n\t                $(\".curtains-ct p\").text(message);\n\t\n\t                $(\"#machine-spinner\").hide();\n\t\n\t                update_title(null, machine);\n\t\n\t                /* Fall through when connecting, and allow frame to load at same time*/\n\t                if (!connecting)\n\t                    return;\n\t            }\n\t\n\t            var hash = state.hash;\n\t            var component = state.component;\n\t\n\t            /* Old cockpit packages, used to be in shell/shell.html */\n\t            var compat;\n\t            if (machine && compiled.compat) {\n\t                compat = compiled.compat[component];\n\t                if (compat) {\n\t                    component = \"shell/shell\";\n\t                    hash = compat;\n\t                }\n\t            }\n\t\n\t            var frame;\n\t            if (component)\n\t                frame = index.frames.lookup(machine, component, hash);\n\t            if (frame != current_frame) {\n\t                $(current_frame).css('display', 'none');\n\t                index.current_frame(frame);\n\t            }\n\t\n\t            var label, item;\n\t            if (machine.state == \"connected\") {\n\t                $(\".curtains-ct\").hide();\n\t                $(\"#machine-spinner\").toggle(frame && !$(frame).attr(\"data-ready\"));\n\t                $(frame).css('display', 'block');\n\t                item = compiled.items[state.component];\n\t                label = item ? item.label : \"\";\n\t                update_title(label, machine);\n\t            }\n\t\n\t            phantom_checkpoint();\n\t        }\n\t\n\t        function update_machines() {\n\t            $(\"#machine-dropdown .caret\")\n\t                .toggle(machines.list.length > 1);\n\t\n\t            var machine_link = $(\"machine-link\");\n\t            if (machines.list.length > 1)\n\t                machine_link.attr(\"data-toggle\", \"dropdown\");\n\t            else\n\t                machine_link.removeAttr(\"data-toggle\");\n\t\n\t            var list = $(\"#machine-dropdown ul\");\n\t            var links = machines.list.map(function(machine) {\n\t                var avatar = $(\"<img>\").addClass(\"machine-avatar\")\n\t                            .attr(\"src\", encodeURI(machine.avatar));\n\t                var text = $(\"<span>\").text(machine.label);\n\t                return $(\"<li role='presentation'>\")\n\t                    .css(\"border-left-color\", machine.color || \"\")\n\t                    .append($(\"<a>\")\n\t                        .attr(\"role\", \"menuitem\")\n\t                        .attr(\"tabindex\", \"-1\")\n\t                        .attr(\"data-address\", machine.address)\n\t                        .attr(\"href\", index.href({ host: machine.address }, true))\n\t                        .append(avatar, text));\n\t                });\n\t            list.empty().append(links);\n\t        }\n\t\n\t        function compatibility(machine) {\n\t            if (!machine.manifests || machine.address === \"localhost\")\n\t                return null;\n\t\n\t            var shell = machine.manifests[\"shell\"] || { };\n\t            var menu = shell[\"menu\"] || { };\n\t            var tools = shell[\"tools\"] || { };\n\t\n\t            var mapping = { };\n\t\n\t            /* The following were included in shell/shell.html in old versions */\n\t            if (\"_host_\" in menu)\n\t                mapping[\"system/host\"] = \"/server\";\n\t            if (\"_init_\" in menu)\n\t                mapping[\"system/init\"] = \"/services\";\n\t            if (\"_network_\" in menu)\n\t                mapping[\"network/interfaces\"] = \"/networking\";\n\t            if (\"_storage_\" in menu)\n\t                mapping[\"storage/devices\"] = \"/storage\";\n\t            if (\"_users_\" in tools)\n\t                mapping[\"users/local\"] = \"/accounts\";\n\t\n\t            /* For Docker we have to guess ... some heuristics */\n\t            if (\"_storage_\" in menu || \"_init_\" in menu)\n\t                mapping[\"docker/containers\"] = \"/containers\";\n\t\n\t            return mapping;\n\t        }\n\t\n\t        function compile(machine) {\n\t            var compiled = base_index.new_compiled();\n\t            compiled.load(machine.manifests, \"tools\");\n\t            compiled.load(machine.manifests, \"dashboard\");\n\t            compiled.load(machine.manifests, \"menu\");\n\t            compiled.compat = compatibility(machine);\n\t            return compiled;\n\t        }\n\t\n\t        cockpit.transport.wait(function() {\n\t            index.start();\n\t        });\n\t    }\n\t\n\t    function SimpleIndex(index_options) {\n\t        if (!index_options)\n\t            index_options = {};\n\t\n\t        index_options.navigate = function (state, sidebar) {\n\t            return navigate(state, sidebar);\n\t        };\n\t        var default_title = index_options.default_title || \"Cockpit\";\n\t        var index = base_index.new_index_from_proto(index_options);\n\t        var compiled = base_index.new_compiled();\n\t\n\t        compiled.load(cockpit.manifests, \"dashboard\");\n\t\n\t        /* Disconnection Dialog */\n\t        var watchdog_problem = null;\n\t        $(index).on(\"disconnect\", function (ev, problem) {\n\t            watchdog_problem = problem;\n\t            show_disconnected();\n\t        });\n\t\n\t        /* Reconnect button */\n\t        $(\"#machine-reconnect\").on(\"click\", function(ev) {\n\t            cockpit.sessionStorage.clear();\n\t            window.location.reload(true);\n\t        });\n\t\n\t        function show_disconnected() {\n\t            var current_frame = index.current_frame();\n\t            if (current_frame)\n\t                $(current_frame).hide();\n\t\n\t            $(\".curtains-ct .spinner\").toggle(false);\n\t            $(\"#machine-reconnect\").toggle(true);\n\t            $(\".curtains-ct i\").toggle(true);\n\t            $(\".curtains-ct h1\").text(_(\"Disconnected\"));\n\t            $(\".curtains-ct p\").text(cockpit.message(watchdog_problem));\n\t            $(\".curtains-ct\").show();\n\t            $(\"#navbar-dropdown\").addClass(\"disabled\");\n\t            phantom_checkpoint();\n\t        }\n\t\n\t        index.ready();\n\t\n\t        /* Handles navigation */\n\t        function navigate(state, reconnect) {\n\t            var dashboards = compiled.ordered(\"dashboard\");\n\t\n\t            /* If this is a watchdog problem or we are troubleshooting\n\t             * let the dialog handle it */\n\t            if (watchdog_problem)\n\t                return;\n\t\n\t            /* phantomjs has a problem retrieving state, so we allow it to be passed in */\n\t            if (!state)\n\t                state = index.retrieve_state();\n\t\n\t            if (!state.component && dashboards.length > 0) {\n\t                state.component = dashboards[0].path;\n\t            }\n\t            update_navbar(state);\n\t            update_frame(state);\n\t\n\t            index.recalculate_layout();\n\t\n\t            /* Just replace the state, and URL */\n\t            index.jump(state, true);\n\t        }\n\t\n\t        function update_navbar(state) {\n\t            $(\".dashboard-link\").each(function() {\n\t                var el = $(this);\n\t                el.toggleClass(\"active\", el.attr(\"data-component\") === state.component);\n\t            });\n\t\n\t            var item = compiled.items[state.component];\n\t            if (item && item.section == \"dashboard\")\n\t                delete state.sidebar;\n\t\n\t            $(\"#machine-link span\").text(default_title);\n\t            if ($(\".dashboard-link\").length < 2)\n\t                $('#content-navbar').toggleClass(\"hidden\", true);\n\t        }\n\t\n\t        function update_title(label) {\n\t            if (label)\n\t                label += \" - \";\n\t            else\n\t                label = \"\";\n\t            document.title = label + default_title;\n\t        }\n\t\n\t        function update_frame(state) {\n\t            var current_frame = index.current_frame();\n\t\n\t            var hash = state.hash;\n\t            var component = state.component;\n\t\n\t            var frame;\n\t            if (component)\n\t                frame = index.frames.lookup(null, component, hash);\n\t            if (frame != current_frame) {\n\t                $(current_frame).css('display', 'none');\n\t                index.current_frame(frame);\n\t            }\n\t\n\t            var label, item;\n\t            $(frame).css('display', 'block');\n\t            item = compiled.items[state.component];\n\t            label = item ? item.label : \"\";\n\t            update_title(label);\n\t\n\t            phantom_checkpoint();\n\t        }\n\t\n\t        cockpit.transport.wait(function() {\n\t            index.start();\n\t        });\n\t    }\n\t\n\t    module.exports = {\n\t        simple_index: function (options) {\n\t            return new SimpleIndex(options);\n\t        },\n\t        machines_index: function (options, machines_ins, loader, mdialogs) {\n\t            return new MachinesIndex(options, machines_ins, loader, mdialogs);\n\t        }\n\t    };\n\t\n\t    function message_queue(event) {\n\t        window.messages.push(event);\n\t    }\n\t\n\t    /* When we're being loaded into the index window we have additional duties */\n\t    if (document.documentElement.getAttribute(\"class\") === \"index-page\") {\n\t        /* Indicates to child frames that we are a cockpit1 router frame */\n\t        window.name = \"cockpit1\";\n\t\n\t        /* The same thing as above, but compatibility with old cockpit */\n\t        window.options = { sink: true, protocol: \"cockpit1\" };\n\t\n\t        /* While the index is initializing, snag any messages we receive from frames */\n\t        window.messages = [ ];\n\t\n\t        window.messages.cancel = function() {\n\t            window.removeEventListener(\"message\", message_queue, false);\n\t            window.messages = null;\n\t        };\n\t\n\t        window.addEventListener(\"message\", message_queue, false);\n\t    }\n\t\n\t}());\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2015 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar phantom_checkpoint = phantom_checkpoint || function () { };\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(7);\n\t    var cockpit = __webpack_require__(8);\n\t\n\t    var shell_embedded = window.location.pathname.indexOf(\".html\") !== -1;\n\t    var _ = cockpit.gettext;\n\t\n\t    function Frames(index) {\n\t        var self = this;\n\t\n\t        /* Lists of frames, by host */\n\t        var iframes = { };\n\t\n\t        function remove_frame(frame) {\n\t            $(frame.contentWindow).off();\n\t            $(frame).remove();\n\t        }\n\t        self.remove = function remove(machine) {\n\t            var address = machine.address;\n\t            if (!address)\n\t                address = \"localhost\";\n\t            var list = iframes[address];\n\t            if (list) {\n\t                delete iframes[address];\n\t                $.each(list, function(i, frame) {\n\t                    remove_frame(frame);\n\t                });\n\t            }\n\t        };\n\t\n\t        function frame_ready(frame, count) {\n\t            var ready = false;\n\t\n\t            window.clearTimeout(frame.timer);\n\t            frame.timer = null;\n\t\n\t            try {\n\t                ready = $(\"body\", frame.contentWindow.document).is(\":visible\");\n\t            } catch(ex) {\n\t                ready = true;\n\t            }\n\t\n\t            if (!count)\n\t                count = 0;\n\t            count += 1;\n\t            if (count > 50)\n\t                ready = true;\n\t\n\t            if (ready) {\n\t                if (frame.getAttribute(\"data-ready\") != \"1\") {\n\t                    frame.setAttribute(\"data-ready\", \"1\");\n\t                    if (count > 0)\n\t                        index.navigate();\n\t                }\n\t            } else {\n\t                frame.timer = window.setTimeout(function() {\n\t                    frame_ready(frame, count + 1);\n\t                }, 100);\n\t            }\n\t        }\n\t\n\t        self.lookup_component_hash = function(machine, component) {\n\t            var address, list, frame, src;\n\t\n\t            if (machine)\n\t                address = machine.address;\n\t\n\t            if (!address)\n\t                address = \"localhost\";\n\t\n\t            list = iframes[address];\n\t            if (list)\n\t                frame = list[component];\n\t\n\t            if (frame) {\n\t                src = frame.getAttribute('src');\n\t                if (src)\n\t                    return src.split(\"#\")[1];\n\t            }\n\t        };\n\t\n\t        self.lookup = function lookup(machine, component, hash) {\n\t            var host;\n\t            var address;\n\t            var new_frame = false;\n\t\n\t            if (machine) {\n\t                host = machine.connection_string;\n\t                address = machine.address;\n\t            }\n\t\n\t            if (!host)\n\t                host = \"localhost\";\n\t\n\t            if (!address)\n\t                address = host;\n\t\n\t            var list = iframes[address];\n\t            if (!list)\n\t                iframes[address] = list = { };\n\t\n\t            var name = \"cockpit1:\" + host + \"/\" + component;\n\t            var frame = list[component];\n\t            if (frame && frame.getAttribute(\"name\") != name) {\n\t                remove_frame(frame);\n\t                frame = null;\n\t            }\n\t\n\t            var wind, src;\n\t\n\t            /* A preloaded frame */\n\t            if (!frame) {\n\t                wind = window.frames[name];\n\t                if (wind)\n\t                    frame = wind.frameElement;\n\t                if (frame) {\n\t                    src = frame.getAttribute('src');\n\t                    frame.url = src.split(\"#\")[0];\n\t                    list[component] = frame;\n\t                }\n\t            }\n\t\n\t            /* Need to create a new frame */\n\t            if (!frame) {\n\t                new_frame = true;\n\t                frame = document.createElement(\"iframe\");\n\t                frame.setAttribute(\"class\", \"container-frame\");\n\t                frame.setAttribute(\"name\", name);\n\t                frame.style.display = \"none\";\n\t\n\t                var base, checksum;\n\t                if (machine)\n\t                    checksum = machine.checksum;\n\t                if (host === \"localhost\")\n\t                    base = \"..\";\n\t                else if (checksum)\n\t                    base = \"../../\" + checksum;\n\t                else\n\t                    base = \"../../@\" + host;\n\t\n\t                frame.url = base + \"/\" + component;\n\t                if (component.indexOf(\"/\") === -1)\n\t                    frame.url += \"/index\";\n\t                frame.url += \".html\";\n\t            }\n\t\n\t            if (!hash)\n\t                hash = \"/\";\n\t            src = frame.url + \"#\" + hash;\n\t            if (frame.getAttribute('src') != src)\n\t                frame.setAttribute('src', src);\n\t\n\t            /* Store frame only when fully setup */\n\t            if (new_frame) {\n\t                list[component] = frame;\n\t                $(\"#content\").append(frame);\n\t            }\n\t            frame_ready(frame);\n\t            return frame;\n\t        };\n\t    }\n\t\n\t    function Router(index) {\n\t        var self = this;\n\t\n\t        var unique_id = 0;\n\t        var origin = cockpit.transport.origin;\n\t        var source_by_seed = { };\n\t        var source_by_name = { };\n\t\n\t        cockpit.transport.filter(function(message, channel, control) {\n\t            var seed, source, pos;\n\t\n\t            /* Only control messages with a channel are forwardable */\n\t            if (control) {\n\t                if (control.channel !== undefined) {\n\t                    for (seed in source_by_seed)\n\t                        source_by_seed[seed].window.postMessage(message, origin);\n\t                } else if (control.command == \"hint\") {\n\t                    if (control.credential)\n\t                        index.authorize_changed(control.credential);\n\t                }\n\t\n\t            /* Forward message to relevant frame */\n\t            } else if (channel) {\n\t                pos = channel.indexOf('!');\n\t                if (pos !== -1) {\n\t                    seed = channel.substring(0, pos + 1);\n\t                    source = source_by_seed[seed];\n\t                    if (source) {\n\t                        source.window.postMessage(message, origin);\n\t                        return false; /* Stop delivery */\n\t                    }\n\t                }\n\t            }\n\t\n\t            /* Still deliver the message locally */\n\t            return true;\n\t        }, false);\n\t\n\t        function perform_jump(child, control) {\n\t            var current_frame = index.current_frame();\n\t            if (child !== window) {\n\t                if (!current_frame || current_frame.contentWindow != child)\n\t                    return;\n\t            }\n\t            var str = control.location || \"\";\n\t            if (str[0] != \"/\")\n\t                str = \"/\" + str;\n\t            if (control.host)\n\t                str = \"/@\" + encodeURIComponent(control.host) + str;\n\t            index.jump(str);\n\t        }\n\t\n\t        function perform_track(child) {\n\t            var hash;\n\t            var current_frame = index.current_frame();\n\t            /* Note that we ignore tracknig for old shell code */\n\t            if (current_frame && current_frame.contentWindow === child &&\n\t                child.name && child.name.indexOf(\"/shell/shell\") === -1) {\n\t                hash = child.location.hash;\n\t                if (hash.indexOf(\"#\") === 0)\n\t                    hash = hash.substring(1);\n\t                if (hash === \"/\")\n\t                    hash = \"\";\n\t                index.jump({ hash: hash });\n\t            }\n\t        }\n\t\n\t        function on_unload(ev) {\n\t            var source = source_by_name[ev.target.defaultView.name];\n\t            if (source)\n\t                unregister(source);\n\t        }\n\t\n\t        function on_hashchange(ev) {\n\t            var source = source_by_name[ev.target.name];\n\t            if (source)\n\t                perform_track(source.window);\n\t        }\n\t\n\t        function on_load(ev) {\n\t            var source = source_by_name[ev.target.contentWindow.name];\n\t            if (source)\n\t                perform_track(source.window);\n\t        }\n\t\n\t        function unregister(source) {\n\t            var child = source.window;\n\t            cockpit.kill(null, child.name);\n\t            var frame = child.frameElement;\n\t            if (frame)\n\t                frame.removeEventListener(\"load\", on_load);\n\t            child.removeEventListener(\"unload\", on_unload);\n\t            child.removeEventListener(\"hashchange\", on_hashchange);\n\t            delete source_by_seed[source.channel_seed];\n\t            delete source_by_name[source.name];\n\t        }\n\t\n\t        function register(child) {\n\t            var host, name = child.name || \"\";\n\t            if (name.indexOf(\"cockpit1:\") === 0)\n\t                host = name.substring(9).split(\"/\")[0];\n\t            if (!name || !host) {\n\t                console.warn(\"invalid child window name\", child, name);\n\t                return;\n\t            }\n\t\n\t            unique_id += 1;\n\t            var seed = (cockpit.transport.options[\"channel-seed\"] || \"undefined:\") + unique_id + \"!\";\n\t            var source = {\n\t                name: name,\n\t                window: child,\n\t                channel_seed: seed,\n\t                default_host: host,\n\t                inited: false,\n\t            };\n\t            source_by_seed[seed] = source;\n\t            source_by_name[name] = source;\n\t\n\t            var frame = child.frameElement;\n\t            frame.addEventListener(\"load\", on_load);\n\t            child.addEventListener(\"unload\", on_unload);\n\t            child.addEventListener(\"hashchange\", on_hashchange);\n\t\n\t            /*\n\t             * Setting the \"data-loaded\" attribute helps the testsuite\n\t             * know when it can switch into the frame and inject its\n\t             * own additions.\n\t             */\n\t            frame.setAttribute('data-loaded', '1');\n\t\n\t            perform_track(child);\n\t            phantom_checkpoint();\n\t\n\t            index.navigate();\n\t            return source;\n\t        }\n\t\n\t        function message_handler(event) {\n\t            if (event.origin !== origin)\n\t                return;\n\t\n\t            var forward_command = false;\n\t            var data = event.data;\n\t            var child = event.source;\n\t            if (!child || typeof data !== \"string\")\n\t                return;\n\t\n\t            var source = source_by_name[child.name];\n\t            var control;\n\t\n\t            /* Closing the transport */\n\t            if (data.length === 0) {\n\t                if (source)\n\t                    unregister(source);\n\t                return;\n\t            }\n\t\n\t            /* A control message */\n\t            if (data[0] == '\\n') {\n\t                control = JSON.parse(data.substring(1));\n\t                if (control.command === \"init\") {\n\t                    if (source)\n\t                        unregister(source);\n\t                    source = register(child);\n\t                    if (source) {\n\t                        var reply = $.extend({ }, cockpit.transport.options,\n\t                            { command: \"init\", \"host\": source.default_host, \"channel-seed\": source.channel_seed }\n\t                        );\n\t                        child.postMessage(\"\\n\" + JSON.stringify(reply), origin);\n\t                        source.inited = true;\n\t\n\t                        /* If this new frame is not the current one, tell it */\n\t                        if (child.frameElement != index.current_frame())\n\t                            self.hint(child.frameElement.contentWindow, { \"hidden\": true });\n\t                    }\n\t\n\t                } else if (control.command === \"jump\") {\n\t                    perform_jump(child, control);\n\t                    return;\n\t\n\t                } else if (control.command == \"logout\" || control.command == \"kill\") {\n\t                    forward_command = true;\n\t\n\t                } else if (control.command === \"hint\") {\n\t                    if (control.hint == \"restart\") {\n\t                        /* watchdog handles current host for now */\n\t                        if (control.host != cockpit.transport.host)\n\t                            index.expect_restart(control.host);\n\t                    } else\n\t                        cockpit.hint(control.hint, control);\n\t                    return;\n\t                } else if (control.command == \"oops\") {\n\t                    index.show_oops();\n\t                    return;\n\t\n\t                /* Only control messages with a channel are forwardable */\n\t                } else if (control.channel === undefined && !forward_command) {\n\t                    return;\n\t\n\t                /* Add the child's group to all open channel messages */\n\t                } else if (control.command == \"open\") {\n\t                    control.group = child.name;\n\t                    data = \"\\n\" + JSON.stringify(control);\n\t                }\n\t            }\n\t\n\t            if (!source) {\n\t                console.warn(\"child frame \" + child.name + \" sending data without init\");\n\t                return;\n\t            }\n\t\n\t            /* Everything else gets forwarded */\n\t            cockpit.transport.inject(data, true);\n\t        }\n\t\n\t\n\t        self.start = function start(messages) {\n\t            window.addEventListener(\"message\", message_handler, false);\n\t            for (var i = 0, len = messages.length; i < len; i++)\n\t                message_handler(messages[i]);\n\t        };\n\t\n\t        self.hint = function hint(child, data) {\n\t            var message, source = source_by_name[child.name];\n\t            if (source && source.inited) {\n\t                data.command = \"hint\";\n\t                message = \"\\n\" + JSON.stringify(data);\n\t                source.window.postMessage(message, origin);\n\t            }\n\t        };\n\t    }\n\t\n\t    /*\n\t     * New instances of Index must be created by new_index_from_proto\n\t     * and the caller must include a navigation function in the given\n\t     * prototype. That function will be called by Frames and\n\t     * Router to actually perform any navigation action.\n\t     *\n\t     * As a convenience, common menu items can be setup by adding the\n\t     * selector to be used to hook them up. The accepted selectors\n\t     * are.\n\t     * oops_sel, logout_sel, language_sel, brand_sel, about_sel,\n\t     * user_sel, account_sel\n\t     *\n\t     * Emits \"disconnect\" and \"expect_restart\" signals, that should be\n\t     * handled by the caller.\n\t     */\n\t    function Index() {\n\t        var self = this;\n\t        var current_frame;\n\t\n\t        if (typeof self.navigate !== \"function\")\n\t            throw \"Index requires a prototype with a navigate function\";\n\t\n\t        self.frames = new Frames(self);\n\t        self.router = new Router(self);\n\t\n\t        /* Watchdog for disconnect */\n\t        var watchdog = cockpit.channel({ \"payload\": \"null\" });\n\t        $(watchdog).on(\"close\", function(event, options) {\n\t            var watchdog_problem = options.problem || \"disconnected\";\n\t            console.warn(\"transport closed: \" + watchdog_problem);\n\t            $(self).triggerHandler(\"disconnect\", watchdog_problem);\n\t        });\n\t\n\t        /* Handles an href link as seen below */\n\t        $(document).on(\"click\", \"a[href]\", function(ev) {\n\t            var a = this;\n\t            if (window.location.host === a.host) {\n\t                self.jump(a.getAttribute('href'));\n\t                ev.preventDefault();\n\t                phantom_checkpoint();\n\t            }\n\t        });\n\t\n\t        if (window.navigator.userAgent.indexOf(\"PhantomJS\") == -1) {\n\t            var old_onerror = window.onerror;\n\t            window.onerror = function cockpit_error_handler(msg, url, line) {\n\t                self.show_oops();\n\t                phantom_checkpoint();\n\t                if (old_onerror)\n\t                    return old_onerror(msg, url, line);\n\t                return false;\n\t            };\n\t        }\n\t\n\t        /*\n\t         * Navigation is driven by state objects, which are used with pushState()\n\t         * and friends. The state is the canonical navigation location, and not\n\t         * the URL. Only when no state has been pushed or we are arriving from\n\t         * a link, do we parse the state from the URL.\n\t         *\n\t         * Each state object has:\n\t         *   host: a machine host\n\t         *   component: the stripped component to load\n\t         *   hash: the hash to pass to the component\n\t         *   sidebar: set to true to hint that we want a component with a sidebar\n\t         *\n\t         * If state.sidebar is set, and no component has yet been chosen for the\n\t         * given state, then we try to find one that would show a sidebar.\n\t         */\n\t\n\t        /* Encode navigate state into a string\n\t         * If with_root is true the configured\n\t         * url root will be added to the generated\n\t         * url. with_root should be used when\n\t         * navigating to a new url or updating\n\t         * history, but is not needed when simply\n\t         * generating a string for a link.\n\t         */\n\t        function encode(state, sidebar, with_root) {\n\t            var path = [];\n\t            if (state.host && (sidebar || state.host !== \"localhost\"))\n\t                path.push(\"@\" + state.host);\n\t            if (state.component)\n\t                path.push.apply(path, state.component.split(\"/\"));\n\t            var string = cockpit.location.encode(path, null, with_root);\n\t            if (state.hash && state.hash !== \"/\")\n\t                string += \"#\" + state.hash;\n\t            return string;\n\t        }\n\t\n\t        /* Decodes navigate state from a string */\n\t        function decode(string) {\n\t            var state = { version: \"v1\", hash: \"\" };\n\t            var pos = string.indexOf(\"#\");\n\t            if (pos !== -1) {\n\t                state.hash = string.substring(pos + 1);\n\t                string = string.substring(0, pos);\n\t            }\n\t            if (string[0] != '/')\n\t                string = \"/\" + string;\n\t            var path = cockpit.location.decode(string);\n\t            if (path[0] && path[0][0] == \"@\") {\n\t                state.host = path.shift().substring(1);\n\t                state.sidebar = true;\n\t            } else {\n\t                state.host = \"localhost\";\n\t            }\n\t            if (path.length && path[path.length - 1] == \"index\")\n\t                path.pop();\n\t            state.component = path.join(\"/\");\n\t            return state;\n\t        }\n\t\n\t        function build_navbar() {\n\t            var navbar = $(\"#content-navbar\");\n\t\n\t            function links(component) {\n\t                var a = $(\"<a>\")\n\t                    .attr(\"href\", self.href({ host: \"localhost\", component: component.path }))\n\t                    .text(component.label);\n\t                return $(\"<li class='dashboard-link'>\")\n\t                    .attr(\"data-component\", component.path)\n\t                    .append(a);\n\t            }\n\t\n\t            if (shell_embedded) {\n\t                navbar.hide();\n\t            } else {\n\t                var local_compiled = new CompiledComponants();\n\t                local_compiled.load(cockpit.manifests, \"dashboard\");\n\t                navbar.append(local_compiled.ordered(\"dashboard\").map(links));\n\t            }\n\t        }\n\t\n\t        self.recalculate_layout = function() {\n\t            var topnav = $('#topnav');\n\t            var sidebar = $('#sidebar');\n\t            var content = $('#content');\n\t\n\t            var window_height = $(window).height();\n\t            var topnav_height = topnav.height();\n\t\n\t            var y = window_height - topnav_height;\n\t            $(current_frame).height(Math.floor(y));\n\t            sidebar.height(y);\n\t\n\t            var sidebar_width = sidebar.is(':visible') ? sidebar.outerWidth() : 0;\n\t            content.css(\"margin-left\", sidebar_width + \"px\");\n\t        };\n\t\n\t        self.retrieve_state = function() {\n\t            var state = window.history.state;\n\t            if (!state || state.version !== \"v1\") {\n\t                if (shell_embedded)\n\t                    state = decode(\"/\" + window.location.hash);\n\t                else\n\t                    state = decode(window.location.pathname + window.location.hash);\n\t            }\n\t            return state;\n\t        };\n\t\n\t        /* Jumps to a given navigate state */\n\t        self.jump = function (state, replace) {\n\t            if (typeof (state) === \"string\")\n\t                state = decode(state);\n\t\n\t            var current = self.retrieve_state();\n\t\n\t            /* Make sure we have the data we need */\n\t            if (!state.host)\n\t                state.host = current.host || \"localhost\";\n\t            if (!(\"component\" in state))\n\t                state.component = current.component || \"\";\n\t\n\t            var target;\n\t            var history = window.history;\n\t            var frame_change = (state.host !== current.host ||\n\t                                state.component !== current.component);\n\t\n\t            if (frame_change && !state.hash) {\n\t                state.hash = self.frames.lookup_component_hash(state.host,\n\t                                                               state.component);\n\t            }\n\t\n\t            if (shell_embedded)\n\t                target = window.location;\n\t            else\n\t                target = encode(state, null, true);\n\t\n\t            if (replace) {\n\t                history.replaceState(state, \"\", target);\n\t                return false;\n\t            }\n\t\n\t\n\t            if (frame_change || state.hash !== current.hash) {\n\t                history.pushState(state, \"\", target);\n\t                self.navigate(state, true);\n\t                return true;\n\t            }\n\t\n\t            return false;\n\t        };\n\t\n\t        /* Build an href for use in an <a> */\n\t        self.href = function (state, sidebar) {\n\t            return encode(state, sidebar);\n\t        };\n\t\n\t        self.show_oops = function () {\n\t            if (self.oops_sel)\n\t                $(self.oops_sel).show();\n\t        };\n\t\n\t        self.current_frame = function (frame) {\n\t            if (frame !== undefined) {\n\t                if (current_frame !== frame) {\n\t                    if (current_frame && current_frame.contentWindow)\n\t                        self.router.hint(current_frame.contentWindow, { \"hidden\": true });\n\t                    if (frame && frame.contentWindow)\n\t                        self.router.hint(frame.contentWindow, { \"hidden\": false });\n\t                }\n\t                current_frame = frame;\n\t            }\n\t            return current_frame;\n\t        };\n\t\n\t        self.start = function() {\n\t            /* window.messages is initialized in shell/bundle.js */\n\t            var messages = window.messages;\n\t            if (messages)\n\t                messages.cancel();\n\t            self.router.start(messages || []);\n\t        };\n\t\n\t        self.ready = function () {\n\t            $(window).on(\"popstate\", function(ev) {\n\t                self.navigate(ev.state, true);\n\t            });\n\t\n\t            $(window).on('resize', function () {\n\t                self.recalculate_layout();\n\t            });\n\t\n\t            build_navbar();\n\t            self.navigate();\n\t            cockpit.translate();\n\t            $(\"body\").show();\n\t        };\n\t\n\t        self.expect_restart = function (host) {\n\t            $(self).triggerHandler(\"expect_restart\", host);\n\t        };\n\t\n\t        self.authorize_changed = function(value) {\n\t            $(self.credential_sel).toggle(value != \"clear\");\n\t        };\n\t\n\t        /* Menu items */\n\t        /* The oops bar */\n\t        function setup_oops(id) {\n\t            var oops = $(id);\n\t            if (!oops)\n\t                return;\n\t            oops.children(\"a\").on(\"click\", function() {\n\t                $(\"#error-popup-title\").text(_(\"Unexpected error\"));\n\t                var details = _(\"Cockpit had an unexpected internal error. <br/><br/>You can try restarting Cockpit by pressing refresh in your browser. The javascript console contains details about this error (<b>Ctrl-Shift-J</b> in most browsers).\");\n\t                $(\"#error-popup-message\").html(details);\n\t                $('#error-popup').modal('show');\n\t            });\n\t        }\n\t\n\t        /* Branding */\n\t        function setup_brand(id, default_title) {\n\t            var os_release = JSON.parse(window.localStorage['os-release'] || \"{}\");\n\t\n\t            var style, elt = $(id)[0];\n\t            if (elt)\n\t                style = window.getComputedStyle(elt);\n\t            if (!style)\n\t                return;\n\t\n\t            var len, content = style.content;\n\t            if (content && content != \"none\" && content != \"normal\") {\n\t                len = content.length;\n\t                if ((content[0] === '\"' || content[0] === '\\'') &&\n\t                    len > 2 && content[len - 1] === content[0])\n\t                    content = content.substr(1, len - 2);\n\t                elt.innerHTML = cockpit.format(content, os_release) || default_title;\n\t                return $(elt).text();\n\t            }\n\t        }\n\t\n\t        /* Logout link */\n\t        function setup_logout(id) {\n\t            $(id).on(\"click\", function() {\n\t                cockpit.logout();\n\t            });\n\t        }\n\t\n\t        /* Display language dialog */\n\t        function setup_language(id) {\n\t            /*\n\t             * Note that we don't go ahead and load all the po files in order\n\t             * to produce this list. Perhaps we would include it somewhere in a\n\t             * separate automatically generated file. Need to see.\n\t             */\n\t            var manifest = cockpit.manifests[\"shell\"] || { };\n\t            $(\".display-language-menu\").toggle(!!manifest.locales);\n\t            var language = document.cookie.replace(/(?:(?:^|.*;\\s*)CockpitLang\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n\t            if (!language)\n\t                language = \"en-us\";\n\t            $.each(manifest.locales || { }, function(code, name) {\n\t                var el = $(\"<option>\").text(name).val(code);\n\t                if (code == language)\n\t                    el.attr(\"selected\", \"true\");\n\t                $(\"#display-language-list\").append(el);\n\t            });\n\t\n\t            $(\"#display-language-select-button\").on(\"click\", function(event) {\n\t                var code_to_select = $(\"#display-language-list\").val();\n\t                var cookie = \"CockpitLang=\" + encodeURIComponent(code_to_select) +\n\t                             \"; path=/; expires=Sun, 16 Jul 3567 06:23:41 GMT\";\n\t                document.cookie = cookie;\n\t                window.localStorage.setItem(\"cockpit.lang\", code_to_select);\n\t                window.location.reload(true);\n\t                return false;\n\t            });\n\t\n\t            $(id).on(\"shown.bs.modal\", function() {\n\t                $(\"display-language-list\").focus();\n\t                phantom_checkpoint();\n\t            });\n\t        }\n\t\n\t        /* About dialog */\n\t        function setup_about(id) {\n\t            $(cockpit.info).on(\"changed\", function() {\n\t                $(id).text(cockpit.info.version);\n\t                phantom_checkpoint();\n\t            });\n\t        }\n\t\n\t        /* Account link */\n\t        function setup_account(id, user) {\n\t            $(id).on(\"click\", function() {\n\t                self.jump({ host: \"localhost\", component: \"users\", hash: \"/\" + user.name });\n\t            }).show();\n\t        }\n\t\n\t        /* User information */\n\t        function setup_user(id, user) {\n\t            $(id).text(user.full_name || user.name || '???');\n\t\n\t            var is_root = (user.name == \"root\");\n\t            var is_not_root = (user.name && !is_root);\n\t            $('#deauthorize-item').toggle(is_not_root);\n\t        }\n\t\n\t        if (self.oops_sel)\n\t            setup_oops(self.oops_sel);\n\t\n\t        if (self.logout_sel)\n\t            setup_logout(self.logout_sel);\n\t\n\t        if (self.language_sel)\n\t            setup_language(self.language_sel);\n\t\n\t        var cal_title;\n\t        if (self.brand_sel) {\n\t            cal_title = setup_brand(self.brand_sel, self.default_title);\n\t            if (cal_title)\n\t                self.default_title = cal_title;\n\t        }\n\t\n\t        if (self.about_sel)\n\t            setup_about(self.about_sel);\n\t\n\t        if (self.user_sel || self.account_sel) {\n\t            cockpit.user().done(function (user) {\n\t                if (self.user_sel)\n\t                    setup_user(self.user_sel, user);\n\t                if (self.account_sel)\n\t                    setup_account(self.account_sel, user);\n\t            });\n\t        }\n\t    }\n\t\n\t    function CompiledComponants() {\n\t        var self = this;\n\t        self.items = {};\n\t\n\t        self.load = function(manifests, section) {\n\t            $.each(manifests || { }, function(name, manifest) {\n\t                $.each(manifest[section] || { }, function(prop, info) {\n\t                    var item = {\n\t                        section: section,\n\t                        label: cockpit.gettext(info.label) || prop,\n\t                        order: info.order === undefined ? 1000 : info.order,\n\t                        wants: info.wants\n\t                    };\n\t                    if (info.path)\n\t                        item.path = info.path.replace(/\\.html$/, \"\");\n\t                    else\n\t                        item.path = name + \"/\" + prop;\n\t                    if (item.path.indexOf(\"/\") === -1)\n\t                        item.path = name + \"/\" + item.path;\n\t                    if (item.path.slice(-6) == \"/index\")\n\t                        item.path = item.path.slice(0, -6);\n\t                    self.items[item.path] = item;\n\t                });\n\t            });\n\t        };\n\t\n\t\n\t        self.ordered = function(section) {\n\t            var x, list = [];\n\t            for (x in self.items) {\n\t                if (!section || self.items[x].section === section)\n\t                    list.push(self.items[x]);\n\t            }\n\t            list.sort(function(a, b) { return a.order - b.order; });\n\t            return list;\n\t        };\n\t\n\t        self.search = function(prop, value) {\n\t            var x;\n\t            for (x in self.items) {\n\t                if (self.items[x][prop] === value)\n\t                    return self.items[x];\n\t            }\n\t        };\n\t    }\n\t\n\t    function follow(arg) {\n\t        /* A promise of some sort */\n\t        if (arguments.length == 1 && typeof arg.then == \"function\") {\n\t            arg.then(function() { console.log.apply(console, arguments); },\n\t                     function() { console.error.apply(console, arguments); });\n\t            if (typeof arg.stream == \"function\")\n\t                arg.stream(function() { console.log.apply(console,arguments); });\n\t        }\n\t    }\n\t\n\t    var zz_value;\n\t\n\t    /* For debugging utility in the index window */\n\t    Object.defineProperties(window, {\n\t        cockpit: { value: cockpit },\n\t        zz: {\n\t            get: function() { return zz_value; },\n\t            set: function(val) { zz_value = val; follow(val); }\n\t        }\n\t    });\n\t\n\t    module.exports = {\n\t        new_index_from_proto: function (proto) {\n\t            var o = new Object(proto);\n\t            Index.call(o);\n\t            return o;\n\t        },\n\t\n\t        new_compiled: function () {\n\t            return new CompiledComponants();\n\t        },\n\t    };\n\t}());\n\n\n/***/ },\n/* 29 */,\n/* 30 */,\n/* 31 */,\n/* 32 */,\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(7);\n\t    var cockpit = __webpack_require__(8);\n\t\n\t    var machis = __webpack_require__(6);\n\t    var mdialogs = __webpack_require__(15);\n\t\n\t    var indexes = __webpack_require__(27);\n\t\n\t    var default_title = \"Cockpit\";\n\t    var manifest = cockpit.manifests[\"shell\"] || { };\n\t    if (manifest.title)\n\t        default_title = manifest.title;\n\t\n\t    var options = {\n\t        brand_sel: \"#index-brand\",\n\t        logout_sel: \"#go-logout\",\n\t        oops_sel: \"#navbar-oops\",\n\t        language_sel: \"#display-language\",\n\t        about_sel: \"#about-version\",\n\t        default_title: default_title\n\t    };\n\t    var machines = machis.instance();\n\t    machines.overlay(\"localhost\", { \"label\": default_title,\n\t                                    \"static_hostname\": true });\n\t\n\t    var loader = machis.loader(machines, true);\n\t    var dialogs = mdialogs.new_manager(machines, {\n\t        \"no-cockpit\": \"not-supported\",\n\t        \"not-supported\": \"not-supported\",\n\t        \"protocol-error\": \"not-supported\",\n\t        \"authentication-not-supported\": \"change-auth\",\n\t        \"authentication-failed\": \"change-auth\",\n\t        \"no-forwarding\": \"change-auth\",\n\t        \"unknown-hostkey\": \"unknown-hostkey\",\n\t        \"invalid-hostkey\": \"invalid-hostkey\",\n\t        \"no-host\": \"change-port\",\n\t    });\n\t\n\t    indexes.machines_index(options, machines, loader, dialogs);\n\t\n\t    var login_data = cockpit.localStorage.getItem('login-data', true);\n\t    if (login_data) {\n\t        var data = JSON.parse(login_data);\n\t        $(\"#content-user-name\").text(data[\"displayName\"]);\n\t    }\n\t}());\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// shell/index-stub.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 39e1a4237ee5ce36f238","'use strict';\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var mod = { };\n\n    var known_hosts_path = \"/var/lib/cockpit/known_hosts\";\n    /*\n     * We share the Machines state between multiple frames. Only\n     * one frame has the job of loading the state, usually index.js\n     * The Loader code below does all the loading.\n     *\n     * The data is stored in sessionStorage in a JSON object, like this\n     * {\n     *    content: name → info dict from bridge's /machines Machines property\n     *    overlay: extra data to augment and override on top of content\n     * }\n     *\n     * This uses sessionStorage rather than cockpit.sessionStorage\n     * because we don't ever want to write unprefixed keys.\n     */\n\n    var key = cockpit.sessionStorage.prefixedKey(\"v2-machines.json\");\n    var session_prefix = cockpit.sessionStorage.prefixedKey(\"v1-session-machine\");\n\n    function generate_session_key(host) {\n        return session_prefix + \"/\" + host;\n    }\n\n    function Machines() {\n        var self = this;\n\n        var flat = null;\n        self.ready = false;\n\n        /* parsed machine data */\n        var machines = { };\n\n        /* Data shared between Machines() instances */\n        var last = {\n            content: null,\n            overlay: {\n                localhost: {\n                    visible: true,\n                    manifests: cockpit.manifests\n                }\n            }\n        };\n\n        function storage(ev) {\n            if (ev.key === key && ev.storageArea === window.sessionStorage)\n                refresh(JSON.parse(ev.newValue));\n        }\n\n        window.addEventListener(\"storage\", storage);\n\n        window.setTimeout(function() {\n            var value = window.sessionStorage.getItem(key);\n            if (!self.ready && value)\n                refresh(JSON.parse(value));\n        });\n\n        var timeout = null;\n\n        function sync(machine, values, overlay) {\n            var desired = $.extend({ }, values || { }, overlay || { });\n            var prop;\n            for (prop in desired) {\n                if (machine[prop] !== desired[prop])\n                    machine[prop] = desired[prop];\n            }\n            for (prop in machine) {\n                if (machine[prop] !== desired[prop])\n                    delete machine[prop];\n            }\n            return machine;\n        }\n\n        function refresh(shared, push) {\n            if (!shared)\n                return;\n\n            var emit_ready = !self.ready;\n\n            self.ready = true;\n            last = shared;\n            flat = null;\n\n            if (push && !timeout) {\n                timeout = window.setTimeout(function() {\n                    timeout = null;\n                    window.sessionStorage.setItem(key, JSON.stringify(last));\n                }, 10);\n            }\n\n            var host, hosts = { };\n            var content = shared.content || { };\n            var overlay = shared.overlay || { };\n            for (host in content)\n                hosts[host] = true;\n            for (host in overlay)\n                hosts[host] = true;\n\n            var events = [];\n\n            var machine, application;\n            for (host in hosts) {\n                var old_machine = machines[host] || { };\n                var old_conns = old_machine.connection_string;\n\n                /* Invert logic for color, always respect what's on disk */\n                if (content[host] && content[host].color && overlay[host])\n                    delete overlay[host].color;\n\n                machine = sync(old_machine, content[host], overlay[host]);\n\n                /* Fill in defaults */\n                machine.key = host;\n                if (!machine.address)\n                    machine.address = host;\n\n                machine.connection_string = self.generate_connection_string(machine.user,\n                                                                            machine.port,\n                                                                            machine.address);\n\n                if (!machine.label) {\n                    if (host == \"localhost\" || host == \"localhost.localdomain\") {\n                        application = cockpit.transport.application();\n                        if (application.indexOf('cockpit+=') === 0)\n                            machine.label = application.replace('cockpit+=', '');\n                        else\n                            machine.label = window.location.hostname;\n                    } else {\n                        machine.label = host;\n                    }\n                }\n                if (!machine.avatar)\n                    machine.avatar = \"../shell/images/server-small.png\";\n\n                events.push([host in machines ? \"updated\" : \"added\",\n                            [machine, host, old_conns]]);\n                machines[host] = machine;\n            }\n\n            /* Remove any lost hosts */\n            for (host in machines) {\n                if (!(host in hosts)) {\n                    machine = machines[host];\n                    delete machines[host];\n                    delete overlay[host];\n                    events.push([\"removed\", [machine, host]]);\n                }\n            }\n\n            /* Fire off all events */\n            var i, sel = $(self), len = events.length;\n            for (i = 0; i < len; i++)\n                sel.triggerHandler(events[i][0], events[i][1]);\n            if (emit_ready)\n                $(self).triggerHandler(\"ready\");\n        }\n\n        function update_session_machine(machine, host, values) {\n            /* We don't save the whole machine object */\n            var skey = generate_session_key(host);\n            var data = $.extend({}, machine, values);\n            window.sessionStorage.setItem(skey, JSON.stringify(data));\n            self.overlay(host, values);\n            return cockpit.when([]);\n        }\n\n        function update_saved_machine(host, values) {\n            // wrap values in variants for D-Bus call\n            var values_variant = {};\n            for (var prop in values)\n                if (values[prop] !== null)\n                    values_variant[prop] = cockpit.variant(prop == \"visible\" ? 'b' : 's', values[prop]);\n\n            // FIXME: investigate re-using the proxy from Loader (runs in different frame/scope)\n            var bridge = cockpit.dbus(null, { bus: \"internal\", \"superuser\": \"try\" });\n            var mod = bridge.call(\"/machines\", \"cockpit.Machines\", \"Update\", [ \"99-webui.json\", host, values_variant ])\n                .done(function() {\n                    var prop, over = { };\n                    for (prop in values)\n                        over[prop] = null;\n                    self.overlay(host, over);\n                })\n                .fail(function(error) {\n                    console.error(\"failed to call cockpit.Machines.Update(): \", error);\n                });\n\n            return mod;\n        }\n\n        self.add_key = function(host_key) {\n            var known_hosts = cockpit.file(known_hosts_path, { superuser: \"try\" });\n            return known_hosts\n                .modify(function(data) {\n                    if (!data)\n                        data = \"\";\n\n                    return data + \"\\n\" + host_key;\n                })\n                .always(function() {\n                    known_hosts.close();\n                });\n        };\n\n        self.add = function add(connection_string, color) {\n            var values = self.split_connection_string(connection_string);\n            var host = values['address'];\n\n            values = $.extend({\n                        visible: true,\n                        color: color || self.unused_color(),\n                    }, values);\n\n            var machine = self.lookup(host);\n            if (machine)\n                machine.on_disk = true;\n\n            return self.change(values['address'], values);\n        };\n\n        self.unused_color = function unused_color() {\n            var i, len = mod.colors.length;\n            for (i = 0; i < len; i++) {\n                if (!color_in_use(mod.colors[i]))\n                    return mod.colors[i];\n            }\n            return \"gray\";\n        };\n\n        function color_in_use(color) {\n            var key, machine, norm = mod.colors.parse(color);\n            for (key in machines) {\n                machine = machines[key];\n                if (machine.color && mod.colors.parse(machine.color) == norm)\n                    return true;\n            }\n            return false;\n        }\n\n        function merge(item, values) {\n            for (var prop in values) {\n                if (values[prop] === null)\n                    delete item[prop];\n                else\n                    item[prop] = values[prop];\n            }\n        }\n\n        self.change = function change(host, values) {\n            var mod, hostnamed, call;\n            var machine = self.lookup(host);\n\n            if (values.label) {\n\n                var conn_to = host;\n                if (machine)\n                    conn_to = machine.connection_string;\n\n                if (!machine || machine.label !== values.label) {\n                    hostnamed = cockpit.dbus(\"org.freedesktop.hostname1\", { host: conn_to });\n                    call = hostnamed.call(\"/org/freedesktop/hostname1\", \"org.freedesktop.hostname1\",\n                                          \"SetPrettyHostname\", [ values.label, true ])\n                        .always(function() {\n                            hostnamed.close();\n                        })\n                        .fail(function(ex) {\n                            console.warn(\"couldn't set pretty host name: \" + ex);\n                        });\n                }\n            }\n\n            if (machine && !machine.on_disk)\n                mod = update_session_machine(machine, host, values);\n            else\n                mod = update_saved_machine(host, values);\n\n            if (call)\n                return cockpit.all(call, mod);\n\n            return mod;\n        };\n\n        self.data = function data(content) {\n            var host, changes = {};\n\n            for (host in content) {\n                changes[host] = $.extend({ }, last.overlay[host] || { });\n                merge(changes[host], { on_disk: true });\n            }\n\n            /* It's a full reload, so data not\n             * present is no longer from disk\n             */\n            for (host in machines) {\n                if (content && !content[host]) {\n                    changes[host] = $.extend({ }, last.overlay[host] || { });\n                    merge(changes[host], { on_disk: null });\n                }\n            }\n\n            refresh({ content: content,\n                      overlay: $.extend({ }, last.overlay, changes) }, true);\n        };\n\n        self.overlay = function overlay(host, values) {\n            var changes = { };\n            changes[host] = $.extend({ }, last.overlay[host] || { });\n            merge(changes[host], values);\n            refresh({\n                content: last.content,\n                overlay: $.extend({ }, last.overlay, changes)\n            }, true);\n        };\n\n        Object.defineProperty(self, \"list\", {\n            enumerable: true,\n            get: function get() {\n                var key;\n                if (!flat) {\n                    flat = [];\n                    for (key in machines) {\n                        if (machines[key].visible)\n                            flat.push(machines[key]);\n                    }\n                    flat.sort(function(m1, m2) {\n                        return m1.label.localeCompare(m2.label);\n                    });\n                }\n                return flat;\n            }\n        });\n\n        Object.defineProperty(self, \"addresses\", {\n            enumerable: true,\n            get: function get() {\n                return Object.keys(machines);\n            }\n        });\n\n        self.lookup = function lookup(address) {\n            var parts = self.split_connection_string(address);\n            return machines[parts.address || \"localhost\"] || null;\n        };\n\n        self.generate_connection_string = function (user, port, addr) {\n            var address = addr;\n            if (user)\n                address = user + \"@\" + address;\n\n            if (port)\n                address = address + \":\" + port;\n\n            return address;\n        };\n\n        self.split_connection_string = function(conn_to) {\n            var parts = {};\n            var user_spot = -1;\n            var port_spot = -1;\n\n            if (conn_to) {\n                user_spot = conn_to.lastIndexOf('@');\n                port_spot = conn_to.lastIndexOf(':');\n            }\n\n            if (user_spot > 0) {\n                parts.user = conn_to.substring(0, user_spot);\n                conn_to = conn_to.substring(user_spot+1);\n                port_spot = conn_to.lastIndexOf(':');\n            }\n\n            if (port_spot > -1) {\n                var port = parseInt(conn_to.substring(port_spot+1), 10);\n                if (!isNaN(port)) {\n                    parts.port = port;\n                    conn_to = conn_to.substring(0, port_spot);\n                }\n            }\n\n            parts.address = conn_to;\n            return parts;\n        };\n\n        self.close = function close() {\n            window.removeEventListener(\"storage\", storage);\n        };\n    }\n\n    function Loader(machines, session_only) {\n        var self = this;\n\n        /* Have we loaded from cockpit session */\n        var session_loaded = false;\n\n        /* File we are watching */\n        var file;\n\n        /* echo channels to each machine */\n        var channels = { };\n\n        /* hostnamed proxies to each machine, if hostnamed available */\n        var proxies = { };\n\n        function process_session_key(key, value) {\n            var host, values, machine;\n            var parts = key.split(\"/\");\n            if (parts[0] == session_prefix &&\n                parts.length === 2) {\n                    host = parts[1];\n                    if (value) {\n                        values = JSON.parse(value);\n                        machine = machines.lookup(host);\n                        if (!machine || !machine.on_disk)\n                            machines.overlay(host, values);\n                        else if (!machine.visible)\n                            machines.change(host, { visible: true });\n                        self.connect(host);\n                    }\n            }\n        }\n\n        function load_from_session_storage() {\n            var i;\n            session_loaded = true;\n            for (i = 0; i < window.sessionStorage.length; i++) {\n                var k = window.sessionStorage.key(i);\n                process_session_key(k, window.sessionStorage.getItem(k));\n            }\n        }\n\n        function process_session_machines(ev) {\n            if (ev.storageArea === window.sessionStorage)\n                process_session_key(ev.key || \"\", ev.newValue);\n        }\n        window.addEventListener(\"storage\", process_session_machines);\n\n        function state(host, value, problem) {\n            var values = { state: value, problem: problem };\n            if (value == \"connected\") {\n                values.restarting = false;\n            } else if (problem) {\n                values.manifests = null;\n                values.checksum = null;\n            }\n            machines.overlay(host, values);\n        }\n\n        $(machines).on(\"added\", updated);\n        $(machines).on(\"updated\", updated);\n        $(machines).on(\"removed\", removed);\n\n        function updated(ev, machine, host, old_conns) {\n            if (!machine) {\n                machine = machines.lookup(host);\n                if (!machine)\n                    return;\n            }\n\n            var props = proxies[host];\n            if (!props || !props.valid)\n                props = { };\n\n            var overlay = { };\n\n            if (!machine.color)\n                overlay.color = machines.unused_color();\n\n            var label = props.PrettyHostname || props.StaticHostname;\n            if (label && label !== machine.label)\n                overlay.label = label;\n\n            var os = props.OperatingSystemPrettyName;\n            if (os && os != machine.os)\n                overlay.os = props.OperatingSystemPrettyName;\n\n            if (!$.isEmptyObject(overlay))\n                machines.overlay(host, overlay);\n\n            /* Don't automatically reconnect failed machines */\n            if (machine.visible) {\n                if (old_conns && machine.connection_string != old_conns) {\n                    cockpit.kill(old_conns);\n                    self.disconnect(host);\n                    self.connect(host);\n                } else if (!machine.problem) {\n                    self.connect(host);\n                }\n            } else {\n                self.disconnect(host);\n            }\n        }\n\n        function removed(ev, machine, host) {\n            self.disconnect(host);\n        }\n\n        self.connect = function connect(host) {\n            var machine = machines.lookup(host);\n            if (!machine)\n                return;\n\n            var channel = channels[host];\n            if (channel)\n                return;\n\n            var options = {\n                host: machine.connection_string,\n                payload: \"echo\"\n            };\n\n            if (!machine.on_disk && machine.host_key) {\n                options['temp-session'] = false; /* Compatibility option */\n                options['session'] = 'shared';\n                options['host-key'] = machine.host_key;\n            }\n\n            channel = cockpit.channel(options);\n            channels[host] = channel;\n\n            var local = host === \"localhost\";\n\n            /* Request is null, and message is true when connected */\n            var request = null;\n            var open = local;\n            var problem = null;\n\n            var url;\n            if (!machine.manifests) {\n                if (machine.checksum)\n                    url = \"../../\" + machine.checksum + \"/manifests.json\";\n                else\n                    url = \"../../@\" + encodeURI(machine.connection_string) + \"/manifests.json\";\n            }\n\n            function whirl() {\n                if (!request && open)\n                    state(host, \"connected\", null);\n                else if (!problem)\n                    state(host, \"connecting\", null);\n            }\n\n            /* Here we load the machine manifests, and expect them before going to \"connected\" */\n            function request_manifest() {\n                request = $.ajax({ url: url, dataType: \"json\", cache: true})\n                    .done(function(manifests) {\n                        var overlay = { manifests: manifests };\n                        var etag = request.getResponseHeader(\"ETag\");\n                        if (etag) /* and remove quotes */\n                            overlay.checksum = etag.replace(/^\"(.+)\"$/, '$1');\n                        machines.overlay(host, overlay);\n                    })\n                    .fail(function(ex) {\n                        console.warn(\"failed to load manifests from \" + machine.connection_string + \": \" + ex);\n                    })\n                    .always(function() {\n                        request = null;\n                        whirl();\n                    });\n            }\n\n            function request_hostname() {\n                if (!machine.static_hostname) {\n                    var proxy = cockpit.dbus(\"org.freedesktop.hostname1\",\n                                             { host: machine.connection_string }).proxy();\n                    proxies[host] = proxy;\n                    proxy.wait(function() {\n                        $(proxy).on(\"changed\", function() {\n                            updated(null, null, host);\n                        });\n                        updated(null, null, host);\n                    });\n                }\n            }\n\n            /* Send a message to the server and get back a message once connected */\n            if (!local) {\n                channel.send(\"x\");\n\n                $(channel)\n                    .on(\"message\", function() {\n                        open = true;\n                        if (url)\n                            request_manifest();\n                        request_hostname();\n                        whirl();\n                    })\n                .on(\"close\", function(ev, options) {\n                    problem = options.problem || \"disconnected\";\n                    open = false;\n                    state(host, \"failed\", problem);\n                    var m = machines.lookup(host);\n                    if (m && m.restarting) {\n                        window.setTimeout(function() {\n                            self.connect(host);\n                        }, 10000);\n                    }\n                    self.disconnect(host);\n                });\n            } else if (url) {\n                request_manifest();\n                request_hostname();\n            }\n\n            /* In case already ready, for example when local */\n            whirl();\n        };\n\n        self.disconnect = function disconnect(host) {\n            if (host === \"localhost\")\n                return;\n\n            var channel = channels[host];\n            delete channels[host];\n            if (channel) {\n                channel.close();\n                $(channel).off();\n            }\n\n            var proxy = proxies[host];\n            delete proxies[host];\n            if (proxy) {\n                proxy.client.close();\n                $(proxy).off();\n            }\n        };\n\n        self.expect_restart = function expect_restart(host) {\n            var parts = machines.split_connection_string(host);\n            machines.overlay(parts.address, { restarting: true,\n                                              problem: null });\n        };\n\n        self.close = function close() {\n            $(machines).off(\"added\", updated);\n            $(machines).off(\"changed\", updated);\n            $(machines).off(\"removed\", removed);\n            machines = null;\n\n            if (file)\n                file.close();\n            file = null;\n\n            window.removeEventListener(\"storage\", process_session_machines);\n            var hosts = Object.keys(channels);\n            hosts.forEach(self.disconnect);\n        };\n\n        if (!session_only) {\n            var proxy = cockpit.dbus(null, { bus: \"internal\" }).proxy(\"cockpit.Machines\", \"/machines\");\n            $(proxy).on(\"changed\", function(data) {\n                // unwrap variants from D-Bus call\n                var wrapped = proxy.Machines;\n                var data_unwrap = {};\n                var host_props;\n                for (var host in wrapped) {\n                    host_props = {};\n                    for (var prop in wrapped[host])\n                        host_props[prop] = wrapped[host][prop].v;\n                    data_unwrap[host] = host_props;\n                }\n\n                machines.data(data_unwrap);\n                if (!session_loaded)\n                    load_from_session_storage();\n            });\n        } else {\n            load_from_session_storage();\n            machines.data({});\n        }\n    }\n\n    mod.instance = function instance(loader) {\n        return new Machines();\n    };\n\n    mod.loader = function loader(machines, session_only) {\n        return new Loader(machines, session_only);\n    };\n\n    mod.colors = [\n        \"#0099d3\",\n        \"#67d300\",\n        \"#d39e00\",\n        \"#d3007c\",\n        \"#00d39f\",\n        \"#00d1d3\",\n        \"#00618a\",\n        \"#4c8a00\",\n        \"#8a6600\",\n        \"#9b005b\",\n        \"#008a55\",\n        \"#008a8a\",\n        \"#00b9ff\",\n        \"#7dff00\",\n        \"#ffbe00\",\n        \"#ff0096\",\n        \"#00ffc0\",\n        \"#00fdff\",\n        \"#023448\",\n        \"#264802\",\n        \"#483602\",\n        \"#590034\",\n        \"#024830\",\n        \"#024848\"\n    ];\n\n    mod.colors.parse = function parse_color(input) {\n        var div = document.createElement('div');\n        div.style.color = input;\n        var style = window.getComputedStyle(div, null);\n        return style.getPropertyValue(\"color\") || div.style.color;\n    };\n\n    mod.known_hosts_path = known_hosts_path;\n\n    cockpit.transport.wait(function() {\n        var caps = cockpit.transport.options.capabilities || [];\n        mod.allow_connection_string = $.inArray(\"connection-string\", caps) != -1;\n        mod.has_auth_results = $.inArray(\"auth-method-results\", caps) != -1;\n    });\n\n    module.exports = mod;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/machines.js\n// module id = 6\n// module chunks = 0 2","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 7\n// module chunks = 0 1 2","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 8\n// module chunks = 0 1 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2015 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    require(\"listing.less\");\n    require(\"patterns\");\n\n    var lister = require(\"raw!credentials-ssh-private-keys.sh\");\n\n    var _ = cockpit.gettext;\n\n    function Keys() {\n        var self = this;\n\n        self.path = null;\n        self.items = { };\n\n        var watch = null;\n        var proc = null;\n        var timeout = null;\n\n        cockpit.user().done(function (user) {\n            self.path = user.home + '/.ssh';\n            refresh();\n        });\n\n        function refresh() {\n            if (watch === null) {\n                watch = cockpit.channel({ payload: \"fslist1\", path: self.path });\n                $(watch)\n                    .on(\"close\", function(ev, data) {\n                        $(watch).off();\n                        if (!data.problem || data.problem == \"not-found\") {\n                            watch = null; /* Watch again */\n                        } else {\n                            console.warn(\"couldn't watch \" + self.path + \": \" + (data.message || data.problem));\n                            watch = false; /* Don't watch again */\n                        }\n                    })\n                    .on(\"message\", function(ev, payload) {\n                        var item = JSON.parse(payload);\n                        var name = item.path;\n                        if (name && name.indexOf(\"/\") === -1 && name.slice(-4) === \".pub\") {\n                            if (item.event === \"present\" ||item.event === \"created\" ||\n                                item.event === \"changed\" || item.event === \"deleted\") {\n                                window.clearInterval(timeout);\n                                timeout = window.setTimeout(refresh, 100);\n                            }\n                        }\n                    });\n            }\n\n            if (proc)\n                return;\n\n            window.clearTimeout(timeout);\n            timeout = null;\n\n            proc = cockpit.script(lister, [ self.path ], { err: \"message\" })\n                .always(function() {\n                    proc = null;\n\n                    if (!timeout)\n                        timeout = window.setTimeout(refresh, 5000);\n                })\n                .done(function(data) {\n                    process(data);\n                })\n                .fail(function(ex) {\n                    console.warn(\"failed to list keys in home directory: \" + ex.message);\n                });\n        }\n\n        function process(data) {\n            var blocks = data.split('\\v');\n            var key, items = { };\n\n            /* First block is the data from ssh agent */\n            blocks[0].trim().split(\"\\n\").forEach(function(line) {\n                key = parse_key(line, items);\n                if (key)\n                    key.loaded = true;\n            });\n\n            /* Next come individual triples of blocks */\n            blocks.slice(1).forEach(function(block, i) {\n                switch(i % 3) {\n                case 0:\n                    key = parse_key(block, items);\n                    break;\n                case 1:\n                    if (key) {\n                        block = block.trim();\n                        if (block.slice(-4) === \".pub\")\n                            key.name = block.slice(0, -4);\n                        else\n                            key.name = block;\n                    }\n                    break;\n                case 2:\n                    if (key)\n                        parse_info(block, key);\n                    break;\n                }\n            });\n\n            self.items = items;\n            $(self).triggerHandler(\"changed\");\n        }\n\n        function parse_key(line, items) {\n            var parts = line.trim().split(\" \");\n            var id, type, comment;\n\n            /* SSHv1 keys */\n            if (!isNaN(parseInt(parts[0], 10))) {\n                id = parts[2];\n                type = \"RSA1\";\n                comment = parts.slice(3).join(\" \");\n\n            } else if (parts[0].indexOf(\"ssh-\") === 0) {\n                id = parts[1];\n                type = parts[0].substring(4).toUpperCase();\n                comment = parts.slice(2).join(\" \");\n            } else if (parts[0].indexOf(\"ecdsa-\") === 0) {\n                id = parts[1];\n                type = \"ECDSA\";\n                comment = parts.slice(2).join(\" \");\n            } else {\n                return;\n            }\n\n            var key = items[id];\n            if (!key)\n                key = items[id] = { };\n\n            key.type = type;\n            key.comment = comment;\n            key.data = line;\n            return key;\n        }\n\n        function parse_info(line, key) {\n            var parts = line.trim().split(\" \");\n\n            key.size = parseInt(parts[0], 10);\n            if (isNaN(key.size))\n                key.size = null;\n\n            key.fingerprint = parts[1];\n        }\n\n        self.change = function change(name, old_pass, new_pass, two_pass) {\n            var old_exps = [ /.*Enter old passphrase: $/ ];\n            var new_exps = [ /.*Enter new passphrase.*/, /.*Enter same passphrase again: $/ ];\n            var bad_exps = [ /.*failed: passphrase is too short.*/ ];\n\n            var dfd = $.Deferred();\n            var buffer = \"\";\n            var sent_new = false;\n            var failure = _(\"No such file or directory\");\n            var i;\n\n            if (new_pass !== two_pass) {\n                dfd.reject(new Error(_(\"The passwords do not match.\")));\n                return dfd.promise();\n            }\n\n            var proc;\n            var timeout = window.setTimeout(function() {\n                failure = _(\"Prompting via ssh-keygen timed out\");\n                proc.close(\"terminated\");\n            }, 10 * 1000);\n\n            proc = cockpit.spawn([\"ssh-keygen\", \"-p\", \"-f\", name],\n                    { pty: true, environ: [ \"LC_ALL=C\" ], err: \"out\", directory: self.path })\n                .always(function() {\n                    window.clearInterval(timeout);\n                })\n                .done(function() {\n                    dfd.resolve();\n                })\n                .fail(function(ex) {\n                    if (ex.constructor.name == \"ProcessError\")\n                        ex = new Error(failure);\n                    dfd.reject(ex);\n                })\n                .stream(function(data) {\n                    buffer += data;\n                    for (i = 0; i < old_exps.length; i++) {\n                        if (old_exps[i].test(buffer)) {\n                            buffer = \"\";\n                            failure = _(\"Old password not accepted\");\n                            this.input(old_pass + \"\\n\", true);\n                            return;\n                        }\n                    }\n\n                    for (i = 0; i < new_exps.length; i++) {\n                        if (new_exps[i].test(buffer)) {\n                            buffer = \"\";\n                            this.input(new_pass + \"\\n\", true);\n                            failure = _(\"Failed to change password\");\n                            sent_new = true;\n                            return;\n                        }\n                    }\n\n                    for (i = 0; sent_new && i < bad_exps.length; i++) {\n                        if (bad_exps[i].test(buffer)) {\n                            failure = _(\"New password was not accepted\");\n                            return;\n                        }\n                    }\n                });\n\n            return dfd.promise();\n        };\n\n        self.load = function(name, password) {\n            var ask_exp =  /.*Enter passphrase for .*/;\n            var perm_exp = /.*UNPROTECTED PRIVATE KEY FILE.*/;\n            var bad_exp = /.*Bad passphrase.*/;\n\n            var dfd = $.Deferred();\n            var buffer = \"\";\n            var output = \"\";\n            var failure = _(\"Not a valid private key\");\n\n            var proc;\n            var timeout = window.setTimeout(function() {\n                failure = _(\"Prompting via ssh-add timed out\");\n                proc.close(\"terminated\");\n            }, 10 * 1000);\n\n            proc = cockpit.spawn([\"ssh-add\", name],\n                    { pty: true, environ: [ \"LC_ALL=C\" ], err: \"out\", directory: self.path })\n                .always(function() {\n                    window.clearInterval(timeout);\n                })\n                .done(function() {\n                    refresh();\n                    dfd.resolve();\n                })\n                .fail(function(ex) {\n                    console.log(output);\n                    if (ex.constructor.name == \"ProcessError\")\n                        ex = new Error(failure);\n                    dfd.reject(ex);\n                })\n                .stream(function(data) {\n                    buffer += data;\n                    output += data;\n                    if (perm_exp.test(buffer)) {\n                        failure = _(\"Invalid file permissions\");\n                        buffer = \"\";\n                    } else if (ask_exp.test(buffer)) {\n                        buffer = \"\";\n                        failure = _(\"Password not accepted\");\n                        this.input(password + \"\\n\", true);\n                    } else if (bad_exp.test(buffer)) {\n                        buffer = \"\";\n                        this.input(\"\\n\", true);\n                    }\n                });\n\n            return dfd.promise();\n        };\n\n        self.unload = function unload(name) {\n            return cockpit.spawn([\"ssh-add\", \"-d\", name],\n                    { pty: true, err: \"message\", directory: self.path })\n                .done(refresh);\n        };\n\n        self.close = function close() {\n            if (watch)\n                watch.close();\n            if (proc)\n                proc.close();\n            window.clearTimeout(timeout);\n            timeout = null;\n        };\n    }\n\n    function setup() {\n        var keys;\n\n        /* The button to deauthorize cockpit */\n        $(\"#credential-authorize button\").on(\"click\", function(ev) {\n            cockpit.drop_privileges(false);\n            ev.preventDefault();\n        });\n\n        $(\"#credentials-dialog\")\n\n            /* Show and hide panels */\n            .on(\"click\", \"tr.listing-ct-item\", function(ev) {\n                var body;\n                if ($(ev.target).parents(\".listing-ct-actions, ul\").length === 0) {\n                    body = $(ev.target).parents(\"tbody\");\n                    body.toggleClass(\"open\").removeClass(\"unlock\");\n                    body.find(\".alert\").hide();\n                }\n            })\n\n            /* Highlighting */\n            .on(\"mouseenter\", \".listing-ct-item\", function(ev) {\n                $(ev.target).parents(\"tbody\").find(\".listing-ct-item\").addClass(\"highlight-ct\");\n            })\n            .on(\"mouseleave\", \".listing-ct-item\", function(ev) {\n                $(ev.target).parents(\"tbody\").find(\".listing-ct-item\").removeClass(\"highlight-ct\");\n            })\n\n            /* Load and unload keys */\n            .on(\"change\", \".btn-group\", function(ev) {\n                var body = $(this).parents(\"tbody\");\n                var id = body.attr(\"data-id\");\n                var key = keys.items[id];\n                if (!key || !key.name)\n                    return;\n\n                var value = $(this).onoff(\"value\");\n\n                /* Key needs to be loaded, show load UI */\n                if (value && !key.loaded) {\n                    body.addClass(\"open\").addClass(\"unlock\");\n\n                /* Key needs to be unloaded, do that directly */\n                } else if (!value && key.loaded) {\n                    keys.unload(key.name)\n                        .done(function(ex) {\n                            body.removeClass(\"open\");\n                        })\n                        .fail(function(ex) {\n                            body.addClass(\"open\").removeClass(\"unlock\");\n                            body.find(\".alert\").show().find(\".credential-alert\").text(ex.message);\n                        });\n                }\n            })\n\n            /* Load key */\n            .on(\"click\", \".credential-unlock button\", function(ev) {\n                var body = $(this).parents(\"tbody\");\n                var id = body.attr(\"data-id\");\n                var key = keys.items[id];\n                if (!key || !key.name)\n                    return;\n\n                body.find(\"input button\").prop(\"disabled\", true);\n\n                var password = body.find(\".credential-password\").val();\n                keys.load(key.name, password)\n                    .always(function(ex) {\n                        body.find(\"input button\").prop(\"disabled\", false);\n                    })\n                    .done(function(ex) {\n                        body.find(\".credential-password\").val(\"\");\n                        body.removeClass(\"unlock\");\n                        body.find(\".alert\").hide();\n                    })\n                    .fail(function(ex) {\n                        body.find(\".alert\").show().find(\"span\").text(ex.message);\n                        console.warn(\"loading key failed: \", ex.message);\n                    });\n            })\n\n            /* Change key */\n            .on(\"click\", \".credential-change\", function(ev) {\n                var body = $(this).parents(\"tbody\");\n                var id = body.attr(\"data-id\");\n                var key = keys.items[id];\n                if (!key || !key.name)\n                    return;\n\n                body.find(\"input button\").prop(\"disabled\", true);\n\n                var old_pass = body.find(\".credential-old\").val();\n                var new_pass = body.find(\".credential-new\").val();\n                var two_pass = body.find(\".credential-two\").val();\n                if (old_pass === undefined || new_pass === undefined || two_pass === undefined)\n                    throw \"invalid password fields\";\n\n                keys.change(key.name, old_pass, new_pass, two_pass)\n                    .always(function(ex) {\n                        body.find(\"input button\").prop(\"disabled\", false);\n                    })\n                    .done(function() {\n                        body.find(\".credential-old\").val(\"\");\n                        body.find(\".credential-new\").val(\"\");\n                        body.find(\".credential-two\").val(\"\");\n                        body.find(\"li a\").first().click();\n                    })\n                    .fail(function(ex) {\n                        body.find(\".alert\").show().find(\"span\").text(ex.message);\n                    });\n            })\n\n            .on(\"change keypress\", \"input\", function(ev) {\n                var body = $(this).parents(\"tbody\");\n                if (ev.type == \"keypress\" && ev.keyCode == 13)\n                    $(this).parents(\"dl\").find(\".btn-primary\").click();\n                body.find(\".alert\").hide();\n            })\n\n            /* Change tabs */\n            .on(\"click\", \"tr.credential-panel ul > li > a\", function() {\n                var li = $(this).parent();\n                var index = li.index();\n                li.parent().children().removeClass(\"active\");\n                li.addClass(\"active\");\n                var body = $(this).parents(\"tbody\");\n                body.find(\".credential-tab\").hide().eq(index).show();\n                body.find(\".alert\").hide();\n            })\n\n            /* Popover help */\n            .on(\"click\", \"[data-toggle='popover']\", function() {\n                $(this).popover('toggle');\n            })\n\n            /* Dialog is hidden */\n            .on(\"hide.bs.modal\", function() {\n                if (keys) {\n                    $(keys).off();\n                    keys.close();\n                    keys = null;\n                }\n            })\n\n            /* Dialog is shown */\n            .on(\"show.bs.modal\", function() {\n                keys = new Keys();\n                $(\"#credential-keys\").toggleClass(\"hidden\",\n                                                  $.isEmptyObject(keys.items));\n\n                $(keys).on(\"changed\", function() {\n                    var key, id, row, rows = { };\n                    var table = $(\"#credentials-dialog table.credential-listing\");\n\n                    table.find(\"tbody[data-id]\").each(function(i, el) {\n                        row = $(el);\n                        rows[row.attr(\"data-id\")] = row;\n                    });\n\n                    var body = table.find(\"tbody\").first();\n                    for (id in keys.items) {\n                        if (!(id in rows)) {\n                            row = rows[id] = body.clone();\n                            row.attr(\"data-id\", id)\n                                .show()\n                                .onoff();\n                            table.append(row);\n                        }\n                    }\n\n                    function text(row, field, string) {\n                        var sel = row.find(field);\n                        string = string || \"\";\n                        if (sel.text() !== string)\n                            sel.text(string);\n                    }\n\n                    for (id in rows) {\n                        row = rows[id];\n                        key = keys.items[id];\n                        if (key) {\n                            text(row, \".credential-label\", key.name || key.comment);\n                            text(row, \".credential-type\", key.type);\n                            text(row, \".credential-fingerprint\", key.fingerprint);\n                            text(row, \".credential-comment\", key.comment);\n                            text(row, \".credential-data\", key.data);\n                            row.attr(\"data-name\", key.name)\n                                .attr(\"data-loaded\", key.loaded ? \"1\" : \"0\")\n                                .find(\".btn-onoff-ct\")\n                                    .onoff(\"value\", key.loaded || row.hasClass(\"unlock\"))\n                                    .onoff(\"disabled\", !key.name);\n                        } else {\n                            row.remove();\n                        }\n                        $(\"#credential-keys\").toggleClass(\"hidden\",\n                                                          $.isEmptyObject(keys.items));\n                    }\n                });\n            });\n        }\n\n    module.exports = {\n        keys_instance: function () {\n            return new Keys();\n        },\n        setup: setup\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/credentials.js\n// module id = 9\n// module chunks = 0 2","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/process/browser.js\n// module id = 10\n// module chunks = 0 2","'use strict';\n\n(function() {\n    \"use strict\";\n\n    var $ = require('jquery');\n    var cockpit = require('cockpit');\n\n    var unique_number = 0;\n    function unique() {\n        unique_number += 1;\n        return \"unique\" + -(new Date()) + -unique_number;\n    }\n\n    /* Dialog Patterns */\n\n    function clear_errors(sel) {\n        sel.find(\".dialog-error\").remove();\n        sel.find(\".has-error\").removeClass(\"has-error\");\n        sel.find(\".dialog-wrapper\").off(\".dialog-error\");\n        sel.off(\".dialog-error\");\n    }\n\n    function field_error(target, error) {\n        var wrapper = target.parent();\n        var next, refresh;\n\n        if (!wrapper.is(\".dialog-wrapper\")) {\n            wrapper = $(\"<div class='dialog-wrapper'>\").insertBefore(target);\n\n            /*\n             * Some bootstrap plugins replace html controls with their own\n             * stuff, so we have to account for that here.\n             */\n\n            next = target.next();\n            if (next.is(\".bootstrap-select\") && next.selectpicker) {\n                next.remove();\n                refresh = next.selectpicker;\n            }\n\n            target.remove().appendTo(wrapper);\n\n            if (refresh)\n                refresh.call(target);\n        }\n\n        var message;\n        if (error.message)\n            message = $(\"<div class='dialog-error help-block'>\").text(error.message);\n        wrapper.addClass(\"has-error\").append(message);\n\n        if (!wrapper.hasClass(\"error-keep\")) {\n            wrapper.on(\"keypress.dialog-error change.dialog-error\", function() {\n                wrapper.removeClass(\"has-error\")\n                    .find(\".dialog-error.help-block\").css(\"visibility\", \"hidden\");\n            });\n        }\n    }\n\n    function global_error(sel, error) {\n        var alert = $(\"<div class='alert alert-danger dialog-error'>\");\n        var text = error.message || error.toString();\n        alert.text(text);\n        $(\"<span class='fa fa-exclamation-triangle'>\").prependTo(alert);\n\n        /* Always log global dialog errors for easier debugging */\n        console.warn(text);\n\n        var footer = sel.find(\".modal-footer\");\n        if (footer.length)\n            alert.prependTo(footer);\n        else\n            alert.appendTo(sel);\n    }\n\n    function display_errors(sel, errors) {\n        clear_errors(sel);\n\n        /* The list of errors can also be passed as an array */\n        if (errors.length == 1 && $.isArray(errors[0]))\n            errors = errors[0];\n\n        var any = false;\n        errors.forEach(function(error) {\n            var target;\n            if (error) {\n                target = sel.find(error.target);\n\n                /* Errors for a specific field added below that field */\n                if (target && target.length)\n                    field_error(target, error);\n                else\n                    global_error(sel, error);\n\n                any = true;\n            }\n        });\n\n        if (!any)\n            return;\n\n        /* When dialog is shown again, remove all mods */\n        sel.on(\"show.bs.modal.dialog-error\", function() {\n            clear_errors(sel);\n        });\n    }\n\n    function DialogWait(promise, handle) {\n        this.promise = promise;\n        this.disabled = [];\n        this.handle = handle;\n    }\n\n    function clear_wait(sel) {\n        var data = sel.data(\"dialog-wait\");\n        sel.data(\"dialog-wait\", null);\n\n        sel.find(\".dialog-wait-ct\").remove();\n        sel.find(\".btn\").off(\".dialog-wait\");\n        sel.off(\".dialog-wait\");\n\n        if (data) {\n            data.disabled.forEach(function(ctl) {\n                ctl.removeAttr(\"disabled\");\n            });\n        }\n    }\n\n    function display_wait(sel, promise, handle) {\n        clear_wait(sel);\n\n        if (!promise) {\n            if (handle)\n                sel.modal(\"hide\");\n            return sel;\n        }\n\n        /* Clear all errors in the dialog */\n        if (handle)\n            display_errors(sel, []);\n\n        var wait = $(\"<div class='dialog-wait-ct pull-left'>\");\n        $(\"<div class='spinner spinner-sm'>\").appendTo(wait);\n        var message = $(\"<span>\").appendTo(wait);\n\n        sel.find(\".modal-footer button\").first().before(wait);\n\n        var data = new DialogWait(promise, handle);\n        sel.data(\"dialog-wait\", data);\n\n        var cancellation = promise.cancel || promise.close;\n        var cancelled = false;\n\n        /* Disable everything and stash previous disabled state */\n        var controls = sel.find(\".form-control\").add(\".btn\", sel);\n        if (cancellation)\n            controls = controls.not(\"[data-dismiss]\").not(\".btn-cancel\");\n        controls.each(function() {\n            var ctl = $(this);\n            if (!ctl.attr(\"disabled\")) {\n                data.disabled.push(ctl);\n                ctl.attr(\"disabled\", \"disabled\");\n            }\n        });\n\n        sel.find(\".btn[data-dismiss], .btn-cancel\").on(\"click.dialog-wait\", function() {\n            cancelled = true;\n            if (cancellation)\n                cancellation.apply(promise);\n            return false;\n        });\n\n        /* When dialog is shown again, remove all mods */\n        sel.on(\"hide.bs.modal.dialog-wait\", function() {\n            clear_wait(sel);\n        });\n\n        /*\n         * There is no way to remove a callback from a promise\n         * so we have to be careful to only react if still\n         * processing the same promise.\n         */\n        function restore() {\n            var state, data = sel.data(\"dialog-wait\");\n            if (data && data.promise === promise) {\n                clear_wait(sel);\n                state = promise.state();\n                if (cancelled || (state == \"resolved\" && data.handle))\n                    sel.modal('hide');\n                else if (state == \"rejected\" && data.handle)\n                    display_errors(sel, [ arguments[0] ]);\n            }\n        }\n\n        function update(arg) {\n            var data = sel.data(\"dialog-wait\");\n            if (data && data.promise === promise) {\n                if (typeof arg !== \"string\")\n                    arg = \"\";\n                message.text(arg);\n            }\n        }\n\n        promise\n            .always(restore)\n            .progress(update);\n\n        return sel;\n    }\n\n    $.fn.dialog = function dialog(action /* ... */) {\n        if (action === \"failure\")\n            return display_errors(this, Array.prototype.slice.call(arguments, 1));\n        else if (action === \"wait\")\n            return display_wait(this, arguments[1]);\n        else if (action === \"promise\")\n            return display_wait(this, arguments[1], true);\n        else\n            console.warn(\"unknown dialog action: \" + action);\n    };\n\n    window.addEventListener(\"hashchange\", function() {\n        $(\".modal\").modal(\"hide\");\n    });\n\n    /*\n     * OnOff switch pattern\n     */\n\n    function onoff_refresh(sel) {\n        /* During testing, no Cockpit dependency */\n        var _ = cockpit.gettext || function(x) { return x; };\n\n        sel = sel.find(\".btn-onoff-ct\").andSelf().filter(\".btn-onoff-ct\");\n        sel.each(function(x, el) {\n            var self = $(el)\n                .attr(\"data-toggle\", \"buttons\")\n                .addClass(\"btn-group\");\n            var value = self.onoff(\"value\");\n            var buttons = self.find(\".btn\");\n            var name = self.find(\"input\").first().attr(\"name\") || unique();\n            var i, input, text;\n            for (i = buttons.length; i < 2; i++) {\n                input = $('<input type=\"radio\" autocomplete=\"off\">');\n                text = document.createTextNode(i === 0 ? _(\"On\") : _(\"Off\"));\n                self.append($('<label class=\"btn\">').append(input, text));\n                buttons = null;\n            }\n            buttons = buttons || self.find(\".btn\");\n            buttons.find(\"input\").attr(\"name\", name);\n            onoff_change(self, !!value);\n        });\n        return sel;\n    }\n\n    function onoff_value(sel) {\n        return sel.find(\".btn\").first().hasClass(\"active\");\n    }\n\n    function onoff_change(sel, value) {\n        return sel.each(function(i, el) {\n            var buttons = $(el).find(\".btn\");\n            buttons.first().toggleClass(\"active\", !!value).find(\"input\").prop(\"checked\", !!value);\n            buttons.last().toggleClass(\"active\", !value).find(\"input\").prop(\"checked\", !value);\n        });\n    }\n\n    $.fn.onoff = function onoff(action /* ... */) {\n        if (arguments.length === 0 || action == \"refresh\") {\n            return onoff_refresh(this);\n        } else if (action === \"value\") {\n            if (arguments.length === 1)\n                return onoff_value(this);\n            else\n                return onoff_change(this, arguments[1]);\n        } else if (action == \"disabled\") {\n            return this.find(\".btn\").toggleClass(\"disabled\", arguments[1]);\n        } else {\n            console.warn(\"unknown switch action: \" + action);\n        }\n    };\n\n    /* ----------------------------------------------------------------------------\n     * Sliders\n     *\n     * <div class=\"slider\" value=\"0.5\">\n     *    <div class=\"slider-bar\">\n     *        <div class=\"slider-thumb\"></div>\n     *    </div>\n     *    <div class=\"slider-bar\">\n     *        <!-- optional left overs -->\n     *    </div>\n     * </div>\n     *\n     * A slider control. The first div.slider-bar is the one that is resized.\n     * The value will be bounded between 0 and 1 as a floating point number.\n     *\n     * The following div.slider-bar if present is resized to fill the remainder\n     * of the slider if not given a specific size. You can put more div.slider-bar\n     * inside it to reflect squashing other prevous allocations.\n     *\n     * If the following div.slider-bar have a width specified, then the\n     * slider supports the concept of overflowing. If the slider overflows\n     * it will get the .slider-warning class and go a bit red.\n     *\n     * On document creation any div.slider are automatically turned into\n     * Bar graphs.\n     *\n     * Slider has the following extra read/write properties:\n     *\n     * .value: the floating point value the slider is set to.\n     * .disabled: whether to display slider as disabled and refuse interacton.\n     *\n     * Slider has this event:\n     *\n     * on('change'): fired when the slider changes, passes value as additional arg.\n     */\n\n    function resize_flex(slider, flex, total, part) {\n        var value = 0;\n        if (part > total)\n            value = 1;\n        else if (part < 0 || isNaN(part))\n            value = 0;\n        else if (!isNaN(total) && total > 0 && part >= 0)\n            value = (part / total);\n        $(flex).css('width', (value * 100) + \"%\").\n            next(\"div\").css('margin-left', $(flex).css('width'));\n\n        /* Set the property and the attribute */\n        slider.value = value;\n    }\n\n    function update_value(slider) {\n        resize_flex(slider, $(slider).children(\"div.slider-bar\").first()[0], 1, slider.value);\n    }\n\n    function check_overflow(slider) {\n        $(slider).toggleClass(\"slider-warning\",\n                              slider.offsetWidth < slider.scrollWidth);\n    }\n\n    function setup_slider(slider) {\n        $(slider).attr('unselectable', 'on');\n\n        Object.defineProperty(slider, \"value\", {\n            get: function() {\n                return parseFloat(this.getAttribute(\"value\"));\n            },\n            set: function(v) {\n                var s = String(v);\n                if (s != this.getAttribute(\"value\"))\n                    this.setAttribute(\"value\", v);\n            }\n        });\n\n        Object.defineProperty(slider, \"disabled\", {\n            get: function() {\n                if (!this.hasAttribute(\"disabled\"))\n                    return false;\n                return this.getAttribute(\"disabled\").toLowerCase() != \"false\";\n            },\n            set: function(v) {\n                this.setAttribute(\"disabled\", v ? \"true\" : \"false\");\n            }\n        });\n\n        update_value(slider);\n        check_overflow(slider);\n\n        $(slider).on(\"change\", function() {\n            update_value(slider);\n            $(slider).toggleClass(\"slider-disabled\", slider.disabled);\n        });\n\n        if (slider.disabled)\n            $(slider).addClass(\"slider-disabled\");\n\n        $(slider).on(\"mousedown\", function(ev) {\n            if (slider.disabled)\n                return true; /* default action */\n            var flex;\n            var offset = $(slider).offset().left;\n            if ($(ev.target).hasClass(\"slider-thumb\")) {\n                var hitx  = (ev.offsetX || ev.clientX - $(ev.target).offset().left);\n                offset += (hitx - $(ev.target).outerWidth() / 2);\n                flex = $(ev.target).parent()[0];\n            } else {\n                flex = $(slider).children(\"div.slider-bar\").first()[0];\n                resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n                $(slider).trigger(\"change\", [slider.value]);\n                check_overflow(slider);\n            }\n\n            $(document).\n                on(\"mousemove.slider\", function(ev) {\n                    resize_flex(slider, flex, $(slider).width(), (ev.pageX - offset));\n                    $(slider).trigger(\"change\", [slider.value]);\n                    check_overflow(slider);\n                    return false;\n                }).\n                on(\"mouseup.slider\", function(ev) {\n                    $(document).\n                        off(\"mousemove.slider\").\n                        off(\"mouseup.slider\");\n                    return false;\n                });\n            return false; /* no default action */\n        });\n    }\n\n    function setup_sliders() {\n        $(\"div.slider\").each(function() {\n            setup_slider(this);\n        });\n    }\n\n    $.fn.slider = function Slider(action) {\n        var sel = this;\n        if (arguments.length === 0 || action == \"refresh\") {\n            sel.each(function() {\n                setup_slider(this);\n            });\n            return sel;\n        } else {\n            console.warn(\"unknown slider action: \" + action);\n        }\n    };\n\n    $(document).ready(setup_sliders);\n\n    /* -----------------------------------------------------------------------------\n     * Privileged UI actions.\n     */\n\n    // placement is optional, \"top\", \"left\", \"bottom\", \"right\"\n    $.fn.update_privileged = function update_privileged(perm, denied_message, placement) {\n        var allowed = (perm.allowed !== false);\n        var selector = this;\n\n        selector.each(function() {\n            // preserve old title first time to use when allowed\n            // activate tooltip\n            var allowed_key = 'allowed-title';\n            if (typeof $(this).data(allowed_key) === 'undefined' ||\n                   $(this).data(allowed_key) === false)\n                $(this).data(allowed_key, $(this).attr('title') || \"\");\n\n            var options = { html: true };\n            if (placement)\n                options['placement'] = placement;\n\n            $(this).tooltip(options);\n\n            if ($(this).hasClass(\"disabled\") === allowed) {\n              $(this).toggleClass(\"disabled\", !allowed)\n                   .attr('data-original-title', null);\n\n              if (allowed)\n                  $(this).attr('title', $(this).data(allowed_key));\n              else\n                  $(this).attr('title', denied_message);\n              $(this).tooltip('fixTitle');\n            }\n        });\n\n        return selector;\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/patterns.js\n// module id = 13\n// module chunks = 0 2","module.exports = \"#!/bin/sh\\n\\nset -eu\\n\\n# The first thing we do is list loaded keys\\nssh-add -L || true\\n\\n# Try to list keys in this directory\\ncd \\\"$1\\\" || exit 0\\n\\n# After that each .pub file gets its on set of blocks\\nfor file in *.pub; do\\n    printf \\\"\\\\v\\\"\\n    cat \\\"$file\\\"\\n    printf \\\"\\\\v%s\\\\v\\\" \\\"$file\\\"\\n    ssh-keygen -l -f \\\"$file\\\" || true\\ndone\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/credentials-ssh-private-keys.sh\n// module id = 14\n// module chunks = 0 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2015 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var mustache = require(\"mustache\");\n\n    var machines = require(\"machines\");\n    var credentials = require(\"credentials\");\n\n    var add_tmpl = require(\"raw!machine-add.html\");\n    var auth_failed_tmpl = require(\"raw!machine-auth-failed.html\");\n    var change_auth_tmpl = require(\"raw!machine-change-auth.html\");\n    var change_port_tmpl = require(\"raw!machine-change-port.html\");\n    var color_picker_tmpl = require(\"raw!machine-color-picker.html\");\n    var invalid_hostkey_tmpl = require(\"raw!machine-invalid-hostkey.html\");\n    var not_supported_tmpl = require(\"raw!machine-not-supported.html\");\n    var sync_users_tmpl = require(\"raw!machine-sync-users.html\");\n    var unknown_hosts_tmpl = require(\"raw!machine-unknown-hostkey.html\");\n\n    var _ = cockpit.gettext;\n\n    var default_codes = {\n        \"no-cockpit\": \"not-supported\",\n        \"not-supported\": \"not-supported\",\n        \"protocol-error\": \"not-supported\",\n        \"authentication-not-supported\": \"change-auth\",\n        \"authentication-failed\": \"change-auth\",\n        \"no-forwarding\": \"change-auth\",\n        \"unknown-hostkey\": \"unknown-hostkey\",\n        \"invalid-hostkey\": \"invalid-hostkey\",\n        \"not-found\": \"add-machine\",\n        \"sync-users\": \"sync-users\"\n    };\n\n    function translate_and_init(tmpl) {\n        var tmp = $(\"<div>\").append(tmpl);\n        tmp.find(\"[translatable=\\\"yes\\\"]\").each(function(i, e) {\n            var old = e.outerHTML;\n            var translated = cockpit.gettext(e.getAttribute(\"context\"), $(e).text());\n            $(e).removeAttr(\"translatable\").text(translated);\n            tmpl = tmpl.replace(old, e.outerHTML);\n        });\n        mustache.parse(tmpl);\n        return tmpl;\n    }\n\n    var templates = {\n        \"add-machine\" : translate_and_init(add_tmpl),\n        \"auth-failed\" : translate_and_init(auth_failed_tmpl),\n        \"change-auth\" : translate_and_init(change_auth_tmpl),\n        \"change-port\" : translate_and_init(change_port_tmpl),\n        \"color-picker\" : translate_and_init(color_picker_tmpl),\n        \"invalid-hostkey\" : translate_and_init(invalid_hostkey_tmpl),\n        \"not-supported\" : translate_and_init(not_supported_tmpl),\n        \"sync-users\" : translate_and_init(sync_users_tmpl),\n        \"unknown-hostkey\" : translate_and_init(unknown_hosts_tmpl)\n    };\n\n    function full_address(machines_ins, address) {\n        var machine = machines_ins.lookup(address);\n        if (machine && machine.address != \"localhost\")\n            return machine.connection_string;\n\n        return address;\n    }\n\n    function Dialog(selector, address, machines_ins, codes) {\n        var self = this;\n\n        self.machines_ins = machines_ins;\n        self.codes = codes;\n        self.address = full_address(self.machines_ins, address);\n\n        var promise_callback = null;\n\n        var success_callback = null;\n\n        var current_template = null;\n        var current_instance = null;\n\n        function address_or_label() {\n            var machine = self.machines_ins.lookup(self.address);\n            var host = self.machines_ins.split_connection_string(self.address).address;\n            if (machine && machine.label)\n                host = machine.label;\n            return host;\n        }\n\n        function change_content(template, error_options) {\n            var old_instance = current_instance;\n\n            if (current_template === template)\n                return;\n\n            if (template == \"add-machine\")\n                current_instance = new AddMachine(self);\n            else if (template == \"sync-users\")\n                current_instance = new SyncUsers(self);\n            else if (template == \"unknown-hostkey\")\n                current_instance = new HostKey(self, template);\n            else if (template == \"invalid-hostkey\")\n                current_instance = new HostKey(self, template);\n            else if (template == \"change-auth\")\n                current_instance = new ChangeAuth(self);\n            else if (template == \"change-port\")\n                current_instance = new MachinePort(self);\n            else\n                current_instance = new Simple(self);\n\n            current_template = template;\n            current_instance.load(error_options);\n\n            if (old_instance && old_instance.close)\n                old_instance.close();\n            old_instance = null;\n        }\n\n        self.try_to_connect = function(address, options) {\n            var dfd = $.Deferred();\n            var conn_options = $.extend({ \"payload\": \"echo\",\n                                          \"host\": address },\n                                        options);\n\n            var machine = self.machines_ins.lookup(address);\n            if (machine && machine.host_key && !machine.on_disk) {\n                conn_options['temp-session'] = false; /* Compatiblity option */\n                conn_options['session'] = 'shared';\n                conn_options['host-key'] = machine.host_key;\n            }\n            var client = cockpit.channel(conn_options);\n            client.send(\"x\");\n            $(client)\n               .on(\"message\", function() {\n                    $(client).off();\n                    client.close();\n                    dfd.resolve();\n                })\n                .on(\"close\", function(event, options) {\n                    dfd.reject(options);\n                });\n\n            return dfd.promise();\n        };\n\n        self.get_sel = function(child_selector) {\n            var ret_txt = selector;\n            if (child_selector)\n                ret_txt = ret_txt + \" \" + child_selector;\n            return $(ret_txt);\n        };\n\n        self.set_on_success = function (callback) {\n            success_callback = callback;\n        };\n\n        self.set_goal = function (callback) {\n            promise_callback = callback;\n        };\n\n        self.complete = function(val) {\n            if (success_callback)\n                success_callback(val);\n            else\n                $(selector).modal('hide');\n        };\n\n        self.render = function render(data, template) {\n            if (!template)\n                template = current_template;\n\n            var address_data = self.machines_ins.split_connection_string(self.address);\n            var context = $.extend({\n                'host' : address_or_label(),\n                'full_address' : self.address,\n                'context_title' : self.context_title,\n                'strong' : function() {\n                    return function(text, render) {\n                        return \"<strong>\" + render(text) + \"</strong>\";\n                    };\n                }\n            }, data, address_data);\n\n            var output = $(mustache.render(templates[template], context));\n            cockpit.translate(output);\n            self.get_sel(\".modal-content\").html(output);\n        };\n\n        self.render_error = function render_error(error) {\n            var template;\n            if (error.problem && error.command == \"close\")\n                template = self.codes[error.problem];\n\n            if (template && current_template !== template)\n                change_content(template, error);\n            else\n                $(selector).dialog(\"failure\", cockpit.message(error));\n        };\n\n        self.render_template = function render_template(template) {\n            change_content(template);\n        };\n\n        self.show = function () {\n            var sel = self.get_sel();\n            sel.on('hide.bs.modal', function () {\n                self.get_sel(\".model-content\").empty();\n            });\n            sel.modal('show');\n        };\n\n        self.run = function (promise, failure_callback) {\n            var dialog_dfd = $.Deferred();\n            var promise_funcs = [];\n\n            function next(i) {\n                promise_funcs[i]()\n                    .done(function(val) {\n                        i = i + 1;\n                        if (i < promise_funcs.length) {\n                            next(i);\n                        } else {\n                            dialog_dfd.resolve();\n                            self.complete(val);\n                        }\n                    })\n                    .fail(function(ex) {\n                        if (failure_callback)\n                            failure_callback(ex);\n                        else\n                            self.render_error(ex);\n                        dialog_dfd.reject(ex);\n                    });\n            }\n\n            promise_funcs.push(function() {\n                return promise;\n            });\n\n            self.get_sel().dialog(\"wait\", dialog_dfd.promise());\n            if (promise_callback)\n                promise_funcs.push(promise_callback);\n\n            next(0);\n        };\n    }\n\n    function is_method_supported(methods, method) {\n        var result = methods[method];\n        return result ? result != \"no-server-support\" : false;\n    }\n\n    function can_try_method(methods, method) {\n        if (is_method_supported(methods, method))\n            return method == 'password' || methods[method] != \"not-provided\";\n        return false;\n    }\n\n    function MachineColorPicker(machines_ins) {\n        var self = this;\n\n        self.render = function(selector, address, selected_color) {\n            var machine;\n\n            if (address && !selected_color) {\n                machine = machines_ins.lookup(address);\n                if (machine)\n                    selected_color = machine.color;\n            }\n\n            if (!selected_color)\n                selected_color = machines_ins.unused_color();\n\n            var part, colors = [];\n            for (var i = 0; i < machines.colors.length; i += 6) {\n                part = machines.colors.slice(i, i+6);\n                colors.push({\"list\" : part});\n            }\n\n            var text = mustache.render(templates[\"color-picker\"], { 'colors' : colors, });\n            $(selector).html(text);\n\n            $(\"#host-edit-color\", selector).css(\"background-color\", selected_color);\n            $(\".color-cell\", selector).each(function(index) {\n                $(this).css(\"background-color\", machines.colors[index]);\n            });\n\n            $('#host-edit-color-popover .popover-content .color-cell', selector)\n                .click(function() {\n                    var color = $(this).css('background-color');\n                    $('#host-edit-color', selector).css('background-color', color);\n                });\n\n            $(\"#host-edit-color\", selector).parent().\n                on('show.bs.dropdown', function () {\n                    var $div = $('#host-edit-color', selector);\n                    var $pop = $('#host-edit-color-popover', selector);\n                    var div_pos = $div.position();\n                    var div_width = $div.width();\n                    var div_height = $div.height();\n                    var pop_width = $pop.width();\n                    var pop_height = $pop.height();\n\n                    var top = div_pos.top - pop_height + 10;\n                    if (top < 0) {\n                        top = div_pos.top + div_height + 10;\n                        $pop.addClass(\"bottom\");\n                        $pop.removeClass(\"top\");\n                    } else {\n                        $pop.addClass(\"top\");\n                        $pop.removeClass(\"bottom\");\n                    }\n                    $pop.css('left', div_pos.left + (div_width - pop_width) / 2);\n                    $pop.css('top', top);\n                    $pop.show();\n                }).\n                on('hide.bs.dropdown', function () {\n                    $('#host-edit-color-popover', selector).hide();\n                });\n        };\n    }\n\n    function Simple(dialog) {\n        var self = this;\n\n        self.load = function() {\n            dialog.render();\n        };\n    }\n\n    function AddMachine(dialog) {\n        var self = this;\n        var color = null;\n        var selector = dialog.get_sel();\n        var run_error = null;\n\n        var invisible = dialog.machines_ins.addresses.filter(function(addr) {\n            var m = dialog.machines_ins.lookup(addr);\n            return !m || !m.visible;\n        });\n\n        function existing_error(address) {\n            var ex = null;\n            var machine = dialog.machines_ins.lookup(address);\n            if (machine && machine.visible && machine.on_disk) {\n                ex = new Error(_(\"This machine has already been added.\"));\n                ex.target = \"#add-machine-address\";\n            }\n            return ex;\n        }\n\n        function check_address(evt) {\n            var disabled = true;\n            var ex = null;\n\n            var addr = $('#add-machine-address').val();\n            var button = dialog.get_sel(\".btn-primary\");\n            if (addr === \"\") {\n                disabled = true;\n            } else if (!machines.allow_connection_string &&\n                       (addr.indexOf('@') > -1 || addr.indexOf(':') > -1)) {\n                ex = new Error(_(\"This version of cockpit-ws does not support connecting to a host with an alternate user or port\"));\n            } else if (addr.search(/\\s+/) === -1) {\n                ex = existing_error(addr);\n                if (!ex)\n                    disabled = false;\n            } else {\n                ex = new Error(_(\"The IP address or host name cannot contain whitespace.\"));\n            }\n\n            if (ex)\n                ex.target = \"#add-machine-address\";\n\n            if (run_error)\n                selector.dialog(\"failure\", run_error, ex);\n            else\n                selector.dialog(\"failure\", ex);\n\n            button.prop(\"disabled\", disabled);\n        }\n\n        function add_machine() {\n            run_error = null;\n            dialog.address = $('#add-machine-address').val();\n            color = machines.colors.parse($('#add-machine-color-picker #host-edit-color').css('background-color'));\n            if (existing_error(dialog.address))\n                return;\n\n            dialog.set_goal(function() {\n                var dfp = $.Deferred();\n                dialog.machines_ins.add(dialog.address, color)\n                    .done(dfp.resolve)\n                    .fail(function (ex) {\n                        var msg = cockpit.format(_(\"Failed to add machine: $0\"),\n                                                 cockpit.message(ex));\n                        dfp.reject(msg);\n                    });\n\n                return dfp.promise();\n            });\n\n            dialog.run(dialog.try_to_connect(dialog.address), function (ex) {\n                if (ex.problem == \"no-host\") {\n                    var host_id_port = dialog.address;\n                    var port_index = host_id_port.lastIndexOf(\":\");\n                    var port = \"22\";\n                    if (port_index === -1)\n                        host_id_port = dialog.address + \":22\";\n                    else\n                        port = host_id_port.substr(port_index + 1);\n                    ex.message = cockpit.format(_(\"Cockpit could not contact the given host $0. Make sure it has ssh running on port $1, or specify another port in the address.\"), host_id_port, port);\n                    ex = cockpit.message(ex);\n                    run_error = ex;\n                }\n                dialog.render_error(ex);\n            });\n        }\n\n        self.load = function() {\n            var manifest = cockpit.manifests[\"shell\"] || {};\n            var limit = parseInt(manifest[\"machine-limit\"], 10);\n            var color_picker = new MachineColorPicker(dialog.machines_ins);\n            if (!limit || isNaN(limit))\n                limit = 20;\n\n            dialog.render({\n                'nearlimit' : limit * 0.75 <= dialog.machines_ins.list.length,\n                'limit' : limit,\n                'placeholder' : _(\"Enter IP address or host name\"),\n                'options' : invisible,\n            });\n\n            var button = dialog.get_sel(\".btn-primary\");\n            button.on(\"click\", add_machine);\n\n            $(\"#add-machine-address\").on(\"keyup\", function (ev) {\n                if (ev.which === 13) {\n                    var disabled = button.prop('disabled');\n                    if (!disabled)\n                        add_machine();\n                }\n            });\n            $(\"#add-machine-address\").on(\"input focus\", check_address);\n            color_picker.render(\"#add-machine-color-picker\", dialog.address, color);\n            $(\"#add-machine-address\").focus();\n        };\n    }\n\n    function MachinePort(dialog) {\n        var self = this;\n\n        function change_port() {\n            var dfp = $.Deferred();\n            var parts = dialog.machines_ins.split_connection_string(dialog.address);\n            parts.port = $(\"#edit-machine-port\").val();\n            var address = dialog.machines_ins.generate_connection_string(parts.user,\n                                                                  parts.port,\n                                                                  parts.address);\n            function update_host(ex) {\n                dialog.address = address;\n                dialog.machines_ins.change(parts.address, { \"port\": parts.port })\n                    .done(function () {\n                        // We failed before so try to connect again\n                        // now that the machine is saved.\n                        if (ex) {\n                            dialog.try_to_connect(address)\n                                .done(dialog.complete)\n                                .fail(function (e) {\n                                    dfp.reject(e);\n                                });\n                        } else {\n                            dfp.resolve();\n                        }\n                    })\n                    .fail(function (ex) {\n                        var msg = cockpit.format(_(\"Failed to edit machine: $0\"),\n                                                 cockpit.message(ex));\n                        dfp.reject(msg);\n                    });\n            }\n\n            dialog.try_to_connect(address)\n                .done(function () {\n                    update_host();\n                })\n                .fail(function (ex) {\n                    /* any other error means progress, so save */\n                    if (ex.problem != 'no-host')\n                        update_host(ex);\n                    else\n                        dfp.reject(ex);\n                });\n\n            dialog.run(dfp.promise());\n        }\n\n        self.load = function() {\n            var machine = dialog.machines_ins.lookup(dialog.address);\n            if (!machine) {\n                dialog.get_sel().modal('hide');\n                return;\n            }\n\n            dialog.render({ 'port' : machine.port,\n                            'allow_connection_string' : machines.allow_connection_string });\n            if (machines.allow_connection_string)\n                dialog.get_sel(\".btn-primary\").on(\"click\", change_port);\n        };\n    }\n\n    function HostKey(dialog, problem) {\n        var self = this;\n        var error_options = null;\n        var key = null;\n        var allow_change = problem == \"unknown-hostkey\";\n\n        function add_key() {\n            var q;\n            var machine = dialog.machines_ins.lookup(dialog.address);\n            if (!machine || machine.on_disk) {\n                q = dialog.machines_ins.add_key(key);\n            } else {\n                /* When machine isn't saved to disk\n                   don't save the key either */\n                q = dialog.machines_ins.change(dialog.address, {\n                    'host_key': key\n                });\n            }\n\n            var promise = q.then(function () {\n                var inner = dialog.try_to_connect(dialog.address);\n\n                inner.fail(function(ex) {\n                    if ((ex.problem == \"invalid-hostkey\" ||\n                        ex.problem == \"unknown-hostkey\") &&\n                        machine && !machine.on_disk) {\n                            dialog.machines_ins.change(dialog.address, {\n                                'host_key': null\n                            });\n                        }\n                    });\n\n                return inner;\n            });\n\n            dialog.run(promise);\n        }\n\n        function render() {\n            var promise = null;\n            var fp;\n\n            if (error_options) {\n                key = error_options[\"host-key\"];\n                fp = error_options[\"host-fingerprint\"];\n            }\n\n            dialog.render({\n                'context_title' : dialog.context_title,\n                'path' : machines.known_hosts_path,\n                'key' : fp,\n                'key_host' : key ? key.split(' ')[0] : null,\n            });\n\n            if (!key) {\n                promise = dialog.try_to_connect(dialog.address)\n                    .fail(function(ex) {\n                        if (ex.problem != problem) {\n                            dialog.render_error(ex);\n                        } else {\n                            error_options = ex;\n                            render();\n                        }\n                    })\n\n                    // Fixed already, just close\n                    .done(function (v) {\n                        dialog.complete(v);\n                    });\n\n                dialog.get_sel().dialog(\"wait\", promise);\n            } else if (allow_change) {\n                dialog.get_sel(\".btn-primary\").on(\"click\", add_key);\n            }\n        }\n\n        self.load = function(ex) {\n            error_options = ex;\n            render();\n        };\n    }\n\n    function ChangeAuth(dialog) {\n        var self = this;\n        var error_options = null;\n        var allows_password = false;\n        var keys = null;\n        var machine = dialog.machines_ins.lookup(dialog.address);\n\n        self.user = { };\n\n        function update_keys() {\n            var key_div = dialog.get_sel('.keys');\n\n            if (key_div) {\n                key_div.empty();\n                for (var id in keys.items) {\n                    var key = keys.items[id];\n                    if (key.loaded)\n                        key_div.append($(\"<div>\").text(key.name));\n                }\n            }\n        }\n\n        function login() {\n            var address;\n            var options = {};\n            var dfp = $.Deferred();\n            var user = $(\"#login-custom-user\").val();\n\n            var parts = dialog.machines_ins.split_connection_string(dialog.address);\n            parts.user = user;\n\n            address = dialog.machines_ins.generate_connection_string(parts.user,\n                                                              parts.port,\n                                                              parts.address);\n\n            if ($(\"#login-type\").val() != 'stored') {\n                options['password'] = $(\"#login-custom-password\").val();\n                options[\"session\"] = 'shared';\n                if (!user) {\n                    /* we don't want to save the default user for everyone\n                     * so we pass current user as an option, but make sure the\n                     * session isn't private\n                     */\n                    if (self.user && self.user.name)\n                        options[\"user\"] = self.user.name;\n                    options[\"temp-session\"] = false; /* Compatibility option */\n                }\n            }\n\n            dialog.try_to_connect(address, options)\n                .done(function () {\n                    dialog.address = address;\n                    if (machine) {\n                        dialog.machines_ins.change(machine.address, { \"user\" : user })\n                            .done(dfp.resolve)\n                            .fail(dfp.reject);\n                    } else {\n                        dfp.resolve();\n                    }\n                })\n                .fail(dfp.reject);\n\n            dialog.run(dfp.promise());\n        }\n\n        function change_login_type(value) {\n            var stored = value != 'password';\n            var text = $(\"#login-type li[value=\" + value + \"]\").text();\n            $(\"#login-type button span\").text(text);\n            $(\"#login-available\").toggle(stored);\n            $(\"#login-diff-password\").toggle(!stored);\n        }\n\n        function render() {\n            var promise = null;\n            var template = \"change-auth\";\n            if (!machines.allow_connection_string || !machines.has_auth_results)\n                template = \"auth-failed\";\n\n            var methods = null;\n            var available = null;\n            var supported = null;\n\n            var machine_user = dialog.machines_ins.split_connection_string(dialog.address).user;\n            if (!machine_user && machine)\n                machine_user = machine.user;\n\n            if (error_options && machines.has_auth_results) {\n                supported = {};\n                available = {};\n\n                methods = error_options[\"auth-method-results\"];\n                if (methods) {\n                    allows_password = is_method_supported(methods, 'password');\n                    for (var method in methods) {\n                        if (can_try_method(methods, method)) {\n                            available[method] = true;\n                        }\n                    }\n                }\n\n                if ($.isEmptyObject(available))\n                    template = \"auth-failed\";\n            }\n\n            dialog.render({\n                'supported' : methods,\n                'available' : available,\n                'machine_user' : machine_user,\n                'user' : self.user ? self.user.name : \"\",\n                'allows_password' : allows_password,\n                'can_sync': !!dialog.codes['sync-users'],\n                'machines.allow_connection_string' : machines.allow_connection_string,\n                'sync_link' : function() {\n                    return function(text, render) {\n                        return '<a id=\"do-sync-users\">' + render(text) + \"</a>\";\n                    };\n                }\n            }, template);\n\n            if (methods === null && machines.has_auth_results) {\n                promise = dialog.try_to_connect(dialog.address)\n                    .fail(function(ex) {\n                        error_options = ex;\n                        render();\n                    })\n\n                    // Fixed already, just close\n                    .done(function (v) {\n                        dialog.complete(v);\n                    });\n\n                dialog.get_sel().dialog(\"wait\", promise);\n            } else if (!$.isEmptyObject(available)) {\n                $(\"#login-type li\").on('click', function() {\n                    change_login_type($(this).attr(\"value\"));\n                });\n                change_login_type($(\"#login-type li:first-child\").attr(\"value\"));\n                dialog.get_sel(\".btn-primary\").on(\"click\", login);\n                dialog.get_sel(\"a[data-content]\").popover();\n\n                update_keys();\n            }\n\n            dialog.get_sel(\"#do-sync-users\").on(\"click\", function () {\n                dialog.render_template(\"sync-users\");\n            });\n        }\n\n        self.load = function(ex) {\n            error_options = ex;\n            if (credentials) {\n                keys = credentials.keys_instance();\n                $(keys).on(\"changed\", update_keys);\n            }\n            cockpit.user()\n                .done(function (user) {\n                    self.user = user;\n                })\n                .always(function (user) {\n                    render();\n                });\n        };\n\n        self.close = function(ex) {\n            if (keys) {\n                $(keys).off();\n                keys.close();\n            }\n            keys = null;\n        };\n    }\n\n    function SyncUsers(dialog) {\n        var self = this;\n        var users = {};\n\n        var needs_auth = false;\n        var needs_root = false;\n        var methods = null;\n        var remote_options = { \"superuser\": true };\n\n        var perm_failed = null;\n\n        function load_users() {\n            var local = cockpit.dbus(null, { bus: \"internal\",\n                                             host: \"localhost\",\n                                             superuser: true });\n            $(local).on(\"close\", function(event, options) {\n                perm_failed = options;\n                render();\n            });\n\n            var proxy = local.proxy(\"cockpit.Setup\", \"/setup\");\n            proxy.wait(function () {\n                if (proxy.valid) {\n                    var blank = {\n                        \"t\" : \"(asas)\",\n                        \"v\" : [[], []]\n                    };\n\n                    proxy.Transfer(\"passwd1\", blank)\n                        .done(function(prepared) {\n                            var i, parts, name;\n                            var groups = prepared.v[1];\n\n                            for (i = 0; i < prepared.v[0].length; i++) {\n                                var raw = prepared.v[0][i];\n\n                                parts = raw.split(\":\");\n                                name = parts[0];\n\n                                users[name] = {\n                                    \"username\" : name,\n                                    \"name\" : parts[4] || name,\n                                    \"raw\" : raw,\n                                    \"groups\" : [],\n                                };\n                            }\n\n                            for (i = 0; i < groups.length; i++) {\n                                parts = groups[i].split(\":\");\n                                name = parts[0];\n                                var members = parts[parts.length - 1].split(\",\");\n                                for (var j = 0; j < members.length; j++) {\n                                    var u = members[j];\n                                    if (users[u])\n                                        users[u].groups.push(name);\n                                }\n                            }\n                        })\n                        .fail(function(ex) {\n                            ex.message = cockpit.gettext(ex.message);\n                            perm_failed = ex;\n                        })\n                        .always(function(ex) {\n                            $(local).off();\n                            local.close();\n                            render();\n                        });\n                }\n            });\n        }\n\n        function sync_users() {\n            var client = null;\n\n            var dfd = $.Deferred();\n            var promise = dfd.promise();\n\n            dialog.run(promise);\n\n            /* A successfull sync should close the dialog */\n            dialog.set_on_success(null);\n\n            promise.always(function () {\n                if (client) {\n                    $(client).off();\n                    client.close();\n                }\n            });\n\n            var options = { bus: \"internal\" };\n            if (needs_auth) {\n                options.user = $(\"#sync-username\").val();\n                options.password = $(\"#sync-password\").val();\n            }\n            $.extend(options, remote_options, { host: dialog.address });\n            client = cockpit.dbus(null, options);\n            $(client).on(\"close\", function(event, ex) {\n                dfd.reject(cockpit.message(ex));\n            });\n\n            var variant = {\n                \"t\" : \"(asas)\",\n                \"v\" : [[]],\n            };\n\n            var groups = {};\n            dialog.get_sel(\"input:checked\").each( function() {\n                var u = users[$(this).attr(\"name\")];\n                if (u) {\n                    variant.v[0].push(u.raw);\n                    for (var i = 0; i < u.groups.length; i++) {\n                        var group = u.groups[i];\n                        if (!groups[group])\n                            groups[group] = [];\n\n                        groups[group].push(u.username);\n                    }\n                }\n            });\n            variant.v.push(Object.keys(groups).map(function(k) {\n                return k + \":::\" + groups[k].join();\n            }));\n\n            /* We assume all cockpits support the 'passwd1' mechanism */\n            var proxy = client.proxy(\"cockpit.Setup\", \"/setup\");\n            proxy.wait(function() {\n                if (proxy.valid) {\n                    proxy.Commit(\"passwd1\", variant)\n                        .fail(function(ex) {\n                            ex.message = cockpit.gettext(ex.message);\n                            dfd.reject(ex);\n                        })\n                        .done(dfd.resolve);\n                }\n            });\n        }\n\n        function toggle_button() {\n            var any = dialog.get_sel(\"input:checked\").length > 0;\n            dialog.get_sel(\".btn-primary\").toggleClass(\"disabled\", !any);\n        }\n\n        function render() {\n            function formated_groups() {\n                /*jshint validthis:true */\n                if (this.groups)\n                    return this.groups.join(\", \");\n            }\n\n            /* assume password is allowed for backwards compatibility */\n            var allows_password = true;\n            var user_list = Object.keys(users).sort().map(function(v) {\n                return users[v];\n            });\n\n            if (machines.has_auth_results && methods)\n                allows_password = is_method_supported(methods, 'password');\n\n            var text = dialog.render({\n                'needs_auth' : needs_auth,\n                'needs_root' : needs_root,\n                'users' : user_list,\n                'perm_failed' : perm_failed ? cockpit.message(perm_failed) : null,\n                'allows_password' : allows_password,\n                'formated_groups': formated_groups,\n            });\n\n            dialog.get_sel(\".modal-content\").html(text);\n            dialog.get_sel(\".btn-primary\").on(\"click\", sync_users);\n            dialog.get_sel(\"input:checkbox\").on(\"change\", function() {\n                var name = $(this).attr(\"name\");\n                users[name].checked = $(this).is(':checked');\n                toggle_button();\n            });\n            toggle_button();\n        }\n\n        self.load = function(error_options) {\n            if (error_options)\n                methods = error_options['auth-method-results'];\n\n            render();\n            dialog.try_to_connect(dialog.address, remote_options).fail(function(ex) {\n                needs_auth = true;\n                if (ex.problem == \"access-denied\") {\n                    needs_root = true;\n                    if (!methods && machines.has_auth_results)\n                        /* TODO: We need to know if password auth is\n                         * supported but we only get that when the transport\n                         * closes. Passing an invalid username should\n                         * open new transport that fails.\n                         */\n                        dialog.try_to_connect(dialog.address, { \"user\" : \"1\" })\n                            .fail(function(ex) {\n                                methods = ex['auth-method-results'];\n                            })\n                            .always(render);\n                } else {\n                    methods = ex['auth-method-results'];\n                    render();\n                }\n            });\n            load_users();\n        };\n    }\n\n    function MachineDialogManager(machines_ins, codes) {\n        var self = this;\n\n        if (!codes)\n            codes = default_codes;\n\n        var color_picker = new MachineColorPicker(machines_ins);\n\n        self.troubleshoot = function(target_id, machine) {\n            var selector = \"#\" + target_id;\n            if (!machine || !machine.problem)\n                return;\n\n            var template = codes[machine.problem];\n            if (machine.problem == \"no-host\")\n                template = \"change-port\";\n\n            var dialog = new Dialog(selector, machine.address, machines_ins, codes);\n            dialog.render_template(template);\n            dialog.show();\n        };\n\n        self.needs_troubleshoot = function (machine) {\n            if (!machine || !machine.problem)\n                return false;\n\n            if (machine.problem == \"no-host\")\n                return true;\n\n            return codes[machine.problem] ? true : false;\n        };\n\n        self.render_dialog = function (template, target_id, address) {\n            var selector = \"#\" + target_id;\n            var dialog = new Dialog(selector, address, machines_ins, codes);\n            dialog.render_template(template);\n            dialog.show();\n        };\n\n        self.render_color_picker = function (selector, address) {\n            color_picker.render(selector, address);\n        };\n    }\n\n    module.exports = {\n        new_manager: function (machines_ins, codes) {\n            return new MachineDialogManager(machines_ins, codes);\n        }\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/machine-dialogs.js\n// module id = 15\n// module chunks = 0 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar cockpit = require(\"cockpit\");\nvar mustache = require(\"mustache/mustache\");\n\n/*\n * Turns a mustache template into a translated mustache template\n * by preparsing it and translating it.\n */\nvar cache = { };\n\nfunction translate(template) {\n    if (template in cache)\n        return cache[template];\n    var div = document.createElement(\"div\");\n    div.innerHTML = template;\n    cockpit.translate(div);\n    var result = div.innerHTML;\n    cache[template] = result;\n    return result;\n}\n\n/* Just like the mustache object, except for translated */\nmodule.exports = cockpit.extend({ }, mustache, {\n    render: function render(template, view, partials) {\n        return translate(mustache.render(template, view, partials));\n    },\n    to_html: function to_html(template, view, partials, send) {\n        return translate(mustache.to_html(template, view, partials, send));\n    },\n    clearCache: function clearCache() {\n        cache = { };\n        return mustache.clearCache();\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/mustache.js\n// module id = 16\n// module chunks = 0 2","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false*/\n\n(function (root, factory) {\n  if (typeof exports === \"object\" && exports) {\n    factory(exports); // CommonJS\n  } else {\n    var mustache = {};\n    factory(mustache);\n    if (typeof define === \"function\" && define.amd) {\n      define(mustache); // AMD\n    } else {\n      root.Mustache = mustache; // <script>\n    }\n  }\n}(this, function (mustache) {\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var nonSpaceRe = /\\S/;\n  var eqRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var RegExp_test = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return RegExp_test.call(re, string);\n  }\n\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var Object_toString = Object.prototype.toString;\n  var isArray = Array.isArray || function (object) {\n    return Object_toString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  var entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  function escapeTags(tags) {\n    if (!isArray(tags) || tags.length !== 2) {\n      throw new Error('Invalid tags: ' + tags);\n    }\n\n    return [\n      new RegExp(escapeRegExp(tags[0]) + \"\\\\s*\"),\n      new RegExp(\"\\\\s*\" + escapeRegExp(tags[1]))\n    ];\n  }\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all template text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices\n   * in the original template of the token, respectively.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: an\n   * array of tokens in the subtree and the index in the original template at which\n   * the closing tag for that section begins.\n   */\n  function parseTemplate(template, tags) {\n    tags = tags || mustache.tags;\n    template = template || '';\n\n    if (typeof tags === 'string') {\n      tags = tags.split(spaceRe);\n    }\n\n    var tagRes = escapeTags(tags);\n    var scanner = new Scanner(template);\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) {\n          delete tokens[spaces.pop()];\n        }\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(tagRes[0]);\n      if (value) {\n        for (var i = 0, len = value.length; i < len; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push(['text', chr, start, start + 1]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(tagRes[0])) break;\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(eqRe);\n        scanner.scan(eqRe);\n        scanner.scanUntil(tagRes[1]);\n      } else if (type === '{') {\n        value = scanner.scanUntil(new RegExp('\\\\s*' + escapeRegExp('}' + tags[1])));\n        scanner.scan(curlyRe);\n        scanner.scanUntil(tagRes[1]);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(tagRes[1]);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(tagRes[1])) {\n        throw new Error('Unclosed tag at ' + scanner.pos);\n      }\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection) {\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n        }\n        if (openSection[1] !== value) {\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n        }\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        tagRes = escapeTags(tags = value.split(spaceRe));\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n    if (openSection) {\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n    }\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function () {\n    return this.tail === \"\";\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function (re) {\n    var match = this.tail.match(re);\n\n    if (match && match.index === 0) {\n      var string = match[0];\n      this.tail = this.tail.substring(string.length);\n      this.pos += string.length;\n      return string;\n    }\n\n    return \"\";\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = \"\";\n      break;\n    case 0:\n      match = \"\";\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view == null ? {} : view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function (name) {\n    var value;\n    if (name in this.cache) {\n      value = this.cache[name];\n    } else {\n      var context = this;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n\n          var names = name.split('.'), i = 0;\n          while (value != null && i < names.length) {\n            value = value[names[i++]];\n          }\n        } else {\n          value = context.view[name];\n        }\n\n        if (value != null) break;\n\n        context = context.parent;\n      }\n\n      this.cache[name] = value;\n    }\n\n    if (isFunction(value)) {\n      value = value.call(this.view);\n    }\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null) {\n      tokens = cache[template] = parseTemplate(template, tags);\n    }\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    var self = this;\n    function subRender(template) {\n      return self.render(template, context, partials);\n    }\n\n    var token, value;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n        value = context.lookup(token[1]);\n        if (!value) continue;\n\n        if (isArray(value)) {\n          for (var j = 0, jlen = value.length; j < jlen; ++j) {\n            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n          }\n        } else if (typeof value === 'object' || typeof value === 'string') {\n          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n        } else if (isFunction(value)) {\n          if (typeof originalTemplate !== 'string') {\n            throw new Error('Cannot use higher-order sections without the original template');\n          }\n\n          // Extract the portion of the original template that the section contains.\n          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n          if (value != null) buffer += value;\n        } else {\n          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n        }\n\n        break;\n      case '^':\n        value = context.lookup(token[1]);\n\n        // Use JavaScript's definition of falsy. Include empty arrays.\n        // See https://github.com/janl/mustache.js/issues/186\n        if (!value || (isArray(value) && value.length === 0)) {\n          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n        }\n\n        break;\n      case '>':\n        if (!partials) continue;\n        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n        if (value != null) buffer += this.renderTokens(this.parse(value), context, partials, value);\n        break;\n      case '&':\n        value = context.lookup(token[1]);\n        if (value != null) buffer += value;\n        break;\n      case 'name':\n        value = context.lookup(token[1]);\n        if (value != null) buffer += mustache.escape(value);\n        break;\n      case 'text':\n        buffer += token[1];\n        break;\n      }\n    }\n\n    return buffer;\n  };\n\n  mustache.name = \"mustache.js\";\n  mustache.version = \"0.8.1\";\n  mustache.tags = [ \"{{\", \"}}\" ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function (template, view, partials) {\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.\n  mustache.to_html = function (template, view, partials, send) {\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../bower_components/mustache/mustache.js\n// module id = 17\n// module chunks = 0 2","module.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Add Machine to Dashboard</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td class=\\\"top\\\" translatable=\\\"yes\\\">Address</td>\\n                <td>\\n                <div class=\\\"dialog-wrapper error-keep\\\">\\n                    <input class=\\\"form-control\\\" id=\\\"add-machine-address\\\"\\n                       type=\\\"test\\\" value=\\\"{{ full_address }}\\\"\\n                       list=\\\"options\\\"\\n                       placeholder=\\\"{{ placeholder }}\\\"/>\\n                    <datalist id=\\\"options\\\">\\n                        {{#options}}\\n                        <option value=\\\"{{.}}\\\">\\n                        {{/options}}\\n                    </datalist>\\n                </div>\\n                </td>\\n            </tr>\\n            <tr>\\n                <td translatable=\\\"yes\\\">Color</td>\\n                <td id=\\\"add-machine-color-picker\\\">\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    {{#nearlimit}}\\n    <div class=\\\"alert alert-warning dialog-error dashboard-machine-warning\\\">\\n        <span class=\\\"pficon pficon-warning-triangle-o\\\"></span>\\n        <span translatable=\\\"yes\\\">Connecting simultaneously to more than {{ limit }} machines is unsupported.</span>\\n    </div>\\n    {{/nearlimit}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Add</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-add.html\n// module id = 18\n// module chunks = 0 2","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Authentication Failed</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    {{#supported}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}. To use this machine with cockpit you will need to enable one of the following authentication methods in the sshd config on {{#strong}}{{host}}{{/strong}}:</p>\\n    <ul>\\n        {{#password}}<li translatable=\\\"yes\\\">Password</li>{{/password}}\\n        {{#public-key}}<li translatable=\\\"yes\\\">Public Key</li>{{/public-key}}\\n        {{#gssapi-mic}}<li translatable=\\\"yes\\\">Kerberos Based SSO</li>{{/gssapi-mic}}\\n    </ul>\\n    {{/supported}}\\n\\n    {{^supported}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log in to {{#strong}}{{host}}{{/strong}}. {{#can_sync}}You may want to try to {{#sync_link}}synchronize users{{/sync_link}}.{{/can_sync}} For more authentication options and troubleshooting support please upgrade cockpit-ws to a newer version.</p>\\n    {{/supported}}\\n\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-auth-failed.html\n// module id = 19\n// module chunks = 0 2","module.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Log in to {{host}}</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    {{^available}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}.</p>\\n    {{/available}}\\n\\n    {{#available}}\\n    <p translatable=\\\"yes\\\">Cockpit was unable to log into {{#strong}}{{host}}{{/strong}}. You can change your authentication credentials below. {{#can_sync}}You may prefer to {{#sync_link}}synchronize accounts and passwords{{/sync_link}}.{{/can_sync}}</p>\\n\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">User name</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"login-custom-user\\\" type=\\\"text\\\" value=\\\"{{machine_user}}\\\" placeholder=\\\"{{ user }}\\\"/>\\n                </td>\\n                <td>\\n                    <a tabindex=\\\"0\\\" role=\\\"button\\\" data-toggle=\\\"popover\\\"\\n                        data-trigger=\\\"focus\\\" data-placement=\\\"bottom\\\" translate=\\\"data-content\\\"\\n                        data-content=\\\"Leave blank to connect to this machine as the currently logged in user{{#user}} ({{user}}){{/user}}. If you enter a different username, that user will always be used connecting to this machine.\\\">\\n                        <span class=\\\"fa fa-lg fa-info-circle\\\"></span>\\n                    </a>\\n                </td>\\n            </tr>\\n\\n            <tr>\\n                <td translatable=\\\"yes\\\">Authentication</td>\\n                <td>\\n                    <div class=\\\"btn-group bootstrap-select dropdown form-control\\\" id=\\\"login-type\\\">\\n                        <button class=\\\"btn btn-default dropdown-toggle\\\" type=\\\"button\\\"\\n                            data-toggle=\\\"dropdown\\\">\\n                            <span class=\\\"pull-left\\\" translatable=\\\"yes\\\"></span>\\n                            <div class=\\\"caret\\\"></div>\\n                        </button>\\n                        <ul class=\\\"dropdown-menu\\\">\\n                            {{#allows_password}}\\n                            <li value=\\\"password\\\"><a translate>Type a password</a></li>\\n                            {{/allows_password}}\\n                            <li value=\\\"stored\\\"><a translate>Using available credentials</a></li>\\n                        </ul>\\n                    </div>\\n                </td>\\n            </tr>\\n\\n            {{#allows_password}}\\n            <tr id=\\\"login-diff-password\\\">\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">Password</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"login-custom-password\\\" type=\\\"password\\\" />\\n                </td>\\n                <td>\\n                    <a tabindex=\\\"0\\\" role=\\\"button\\\" data-toggle=\\\"popover\\\"\\n                        data-trigger=\\\"focus\\\" data-placement=\\\"bottom\\\" translate=\\\"data-content\\\"\\n                        data-content=\\\"Entering a different password here means you will need to retype it every time you reconnect to this machine\\\">\\n                        <span class=\\\"fa fa-lg fa-info-circle\\\"></span>\\n                    </a>\\n                </td>\\n            </tr>\\n            {{/allows_password}}\\n            <tr id=\\\"login-available\\\">\\n                <td translatable=\\\"yes\\\" class=\\\"top\\\">Available</td>\\n                <td class=\\\"top\\\">\\n                        {{#password}}<div translatable=\\\"yes\\\">Login Password</div>{{/password}}\\n                        {{#gssapi-mic}}<div translatable=\\\"yes\\\">Kerberos Ticket</div>{{/gssapi-mic}}\\n                        {{#public-key}}<div class=\\\"keys\\\"><div class='dialog-wait-ct pull-left'><div class='spinner spinner-sm'></div><span translatable=\\\"yes\\\">Checking for public keys</span></div></div>{{/public-key}}\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n    {{/available}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Log In</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-change-auth.html\n// module id = 20\n// module chunks = 0 2","module.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Could not contact {{host}}</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <p>\\n        <span translatable=\\\"yes\\\">Cockpit was unable to contact {{#strong}}{{host}}{{/strong}}.</span>\\n        {{^allow_connection_string}}\\n        <span translatable=\\\"yes\\\">To try a different port you will need to upgrade cockpit-ws to a newer version.</span>\\n        {{/allow_connection_string}}\\n\\n        {{#allow_connection_string}}\\n        <span translatable=\\\"yes\\\">Is sshd running on a different port?</span>\\n        {{/allow_connection_string}}\\n    </p>\\n\\n    {{#allow_connection_string}}\\n    <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td class=\\\"top\\\" translatable=\\\"yes\\\">Port</td>\\n                <td>\\n                <div class=\\\"dialog-wrapper error-keep\\\">\\n                    <input id=\\\"edit-machine-port\\\" class=\\\"form-control\\\"\\n                       type=\\\"test\\\" value=\\\"{{ port }}\\\"\\n                       list=\\\"options\\\"\\n                       placeholder=\\\"22\\\"/>\\n                </div>\\n                </td>\\n            </tr>\\n        </table>\\n    </div>\\n    {{/allow_connection_string}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    {{#allow_connection_string}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Update</button>\\n    {{/allow_connection_string}}\\n\\n    {{^allow_connection_string}}\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n    {{/allow_connection_string}}\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-change-port.html\n// module id = 21\n// module chunks = 0 2","module.exports = \"<div>\\n    <div id=\\\"host-edit-color\\\" data-toggle=\\\"dropdown\\\"></div>\\n    <div id=\\\"host-edit-color-popover\\\" class=\\\"popover in\\\" tabindex=\\\"-1\\\">\\n        <div class=\\\"arrow\\\"></div>\\n        <div class=\\\"popover-content\\\">\\n            {{#colors}}\\n            <div>\\n                {{#list}}\\n                <div class=\\\"color-cell\\\"></div>\\n                {{/list}}\\n            </div>\\n            {{/colors}}\\n        </div>\\n        <div class=\\\"arrow\\\"></div>\\n    </div>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-color-picker.html\n// module id = 22\n// module chunks = 0 2","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Incorrect Host Key</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <div class=\\\"banned\\\">\\n        <i class=\\\"fa fa-ban\\\"></i>\\n    </div>\\n    <p translatable=\\\"yes\\\">The key of {{#strong}}{{host}}{{/strong}} does not match the key previously in use. Unless this machine was recently replaced, it is likely that someone is trying to attack your connection to this machine.</p>\\n\\n    {{#key_host}}\\n    <p translatable=\\\"yes\\\">You can remove the previously stored key by running the following command</p>\\n\\n    <pre class=\\\"center\\\">ssh-keygen -R {{ key_host }} -f {{ path }}</pre>\\n    {{/key_host}}\\n\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-invalid-hostkey.html\n// module id = 23\n// module chunks = 0 2","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Cockpit is not installed</h4>\\n</div>\\n<div class=\\\"modal-body\\\">\\n    <p translatable=\\\"yes\\\">A compatible version of Cockpit is not installed on {{#strong}}{{host}}{{/strong}}.</p>\\n</div>\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-not-supported.html\n// module id = 24\n// module chunks = 0 2","module.exports = \"<div class=\\\"modal-header\\\">\\n    <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\"\\n        aria-hidden=\\\"true\\\">&times;</button>\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Synchronize users</h4>\\n</div>\\n\\n<div class=\\\"modal-body\\\">\\n    <p translatable=\\\"yes\\\">Select the users that you would like to be synchronized with {{#strong}}{{host}}{{/strong}}</p>\\n\\n{{#perm_failed}}\\n    <div class=\\\"alert alert-danger dialog-error\\\">\\n        <span class=\\\"fa fa-exclamation-triangle\\\"></span>\\n        <span translatable=\\\"yes\\\">Error loading users: {{perm_failed}}</span>\\n    </div>\\n{{/perm_failed}}\\n\\n{{^perm_failed}}\\n    <div id=\\\"sync-users\\\">\\n        <table class=\\\"table\\\">\\n        <tbody>\\n        {{^users}}\\n            <tr>\\n                  <td>\\n                    <div class=\\\"center-spinner\\\">\\n                        <div class=\\\"spinner spinner-lg\\\"></div>\\n                    </div>\\n                  </td>\\n            </tr>\\n        {{/users}}\\n\\n        {{#users}}\\n              <tr>\\n                  <td><input type=\\\"checkbox\\\" name=\\\"{{username}}\\\" {{#checked}}checked=checked{{/checked}} /></td>\\n                  <td>{{username}}</td>\\n                  <td>{{name}}</td>\\n                  <td>&#8226;&#8226;&#8226;&#8226;&#8226;</td>\\n                  <td>{{formated_groups}}</td>\\n              </tr>\\n        {{/users}}\\n        </tbody>\\n        </table>\\n    </div>\\n\\n    {{#needs_auth}}\\n    <div>\\n        {{#needs_root}}\\n        <p translatable=\\\"yes\\\">You are connected to {{#strong}}{{host}}{{/strong}}, however in order to synchronize users, a user with superuser privileges is required.</p>\\n        {{/needs_root}}\\n        {{^needs_root}}\\n        <p translatable=\\\"yes\\\">In order to synchronize users, you need to log in to {{#strong}}{{host}}{{/strong}}.</p>\\n        {{/needs_root}}\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\">User name</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"sync-username\\\" type=\\\"text\\\" />\\n                </td>\\n            </tr>\\n            {{#allows_password}}\\n            <tr>\\n                <td translatable=\\\"yes\\\">Password</td>\\n                <td>\\n                    <input class=\\\"form-control\\\" id=\\\"sync-password\\\" type=\\\"password\\\" />\\n                </td>\\n            </tr>\\n            {{/allows_password}}\\n        </table>\\n    </div>\\n    {{/needs_auth}}\\n{{/perm_failed}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Cancel</button>\\n    <button class=\\\"btn btn-primary disabled\\\" translatable=\\\"yes\\\">Synchronize</button>\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-sync-users.html\n// module id = 25\n// module chunks = 0 2","module.exports = \"<div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title\\\" translatable=\\\"yes\\\">Unknown Host Key</h4>\\n</div>\\n<div id=\\\"add-unknown-host\\\" class=\\\"modal-body\\\">\\n    {{#key}}\\n        <p translatable=\\\"yes\\\">The authenticity of host {{#strong}}{{host}}{{/strong}} can't be established. Are you sure you want to continue connecting?</p>\\n        <div>\\n        <table class=\\\"form-table-ct\\\">\\n            <tr>\\n                <td translatable=\\\"yes\\\">Fingerprint</td>\\n                <td><pre class=\\\"machine-key\\\">{{key}} </pre></td>\\n            </tr>\\n        </table>\\n        </div>\\n    {{/key}}\\n</div>\\n\\n<div class=\\\"modal-footer\\\">\\n    <button class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" translatable=\\\"yes\\\">Close</button>\\n\\n    {{#key}}\\n        <button class=\\\"btn btn-primary\\\" translatable=\\\"yes\\\">Connect</button>\\n    {{/key}}\\n</div>\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/raw-loader!../pkg/lib/machine-unknown-hostkey.html\n// module id = 26\n// module chunks = 0 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar phantom_checkpoint = phantom_checkpoint || function () { };\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var base_index = require(\"./base_index\");\n\n    var _ = cockpit.gettext;\n\n    var shell_embedded = window.location.pathname.indexOf(\".html\") !== -1;\n\n    function MachinesIndex(index_options, machines, loader, mdialogs) {\n\n        if (!index_options)\n            index_options = {};\n\n        index_options.navigate = function (state, sidebar) {\n            return navigate(state, sidebar);\n        };\n        var index = base_index.new_index_from_proto(index_options);\n\n        /* Restarts */\n        $(index).on(\"expect_restart\", function (ev, host) {\n            loader.expect_restart(host);\n        });\n\n        /* Disconnection Dialog */\n        var watchdog_problem = null;\n        $(index).on(\"disconnect\", function (ev, problem) {\n            watchdog_problem = problem;\n            show_disconnected();\n        });\n\n        /* Is troubleshooting dialog open */\n        var troubleshooting = false;\n\n        /* Reconnect button */\n        $(\"#machine-reconnect\").on(\"click\", function(ev) {\n            if (watchdog_problem) {\n                cockpit.sessionStorage.clear();\n                window.location.reload(true);\n            } else {\n                navigate(null, true);\n            }\n        });\n\n        /* Troubleshoot pause navigation */\n        $(\"#troubleshoot-dialog\").on(\"show.bs.modal\", function(ev) {\n            troubleshooting = true;\n        });\n\n        /* Troubleshoot dialog close */\n        $(\"#troubleshoot-dialog\").on(\"hide.bs.modal\", function(ev) {\n            troubleshooting = false;\n            navigate(null, true);\n        });\n\n        /* Navigation */\n        var ready = false;\n        function on_ready() {\n            ready = true;\n            index.ready();\n        }\n\n        /* When the machine list is ready we start processing navigation */\n        $(machines)\n            .on(\"ready\", on_ready)\n            .on(\"added updated\", function(ev, machine) {\n                if (!machine.visible)\n                    index.frames.remove(machine);\n                else if (machine.problem)\n                    index.frames.remove(machine);\n\n                update_machines();\n                if (ready)\n                    navigate();\n            })\n            .on(\"removed\", function(ev, machine) {\n                index.frames.remove(machine);\n                update_machines();\n            });\n\n        if (machines.ready)\n            on_ready();\n\n        /* When only one machine this operates as a link */\n        $(\"#machine-link\").on(\"click\", function(ev) {\n            if (machines.list.length == 1) {\n                index.jump({ host: machines.list[0].address, sidebar: true, component: \"\" });\n                return false;\n            }\n        });\n\n        function show_disconnected() {\n            var current_frame = index.current_frame();\n\n            if (current_frame)\n                $(current_frame).hide();\n\n            $(\".curtains-ct .spinner\").toggle(false);\n            $(\"#machine-reconnect\").toggle(true);\n            $(\"#machine-troubleshoot\").toggle(false);\n            $(\".curtains-ct i\").toggle(true);\n            $(\".curtains-ct h1\").text(_(\"Disconnected\"));\n            $(\".curtains-ct p\").text(cockpit.message(watchdog_problem));\n            $(\".curtains-ct\").show();\n            $(\"#navbar-dropdown\").addClass(\"disabled\");\n            phantom_checkpoint();\n        }\n\n        /* Handles navigation */\n        function navigate(state, reconnect) {\n            var machine;\n\n            /* If this is a watchdog problem or we are troubleshooting\n             * let the dialog handle it */\n            if (watchdog_problem || troubleshooting)\n                return;\n\n            /* phantomjs has a problem retrieving state, so we allow it to be passed in */\n            if (!state)\n                state = index.retrieve_state();\n            machine = machines.lookup(state.host);\n\n            /* No such machine */\n            if (!machine) {\n                machine = {\n                    key: state.host,\n                    address: state.host,\n                    label: state.host,\n                    state: \"failed\",\n                    problem: \"not-found\",\n                };\n\n            /* Asked to reconnect to the machine */\n            } else if (!machine.visible) {\n                machine.state = \"failed\";\n                machine.problem = \"not-found\";\n            } else if (reconnect && machine.state !== \"connected\") {\n                loader.connect(state.host);\n            }\n\n            var compiled = compile(machine);\n            if (machine.manifests && !state.component)\n                state.component = choose_component(state, compiled);\n\n            update_navbar(machine, state, compiled);\n            update_sidebar(machine, state, compiled);\n            update_frame(machine, state, compiled);\n\n            index.recalculate_layout();\n\n            /* Just replace the state, and URL */\n            index.jump(state, true);\n        }\n\n        function choose_component(state, compiled) {\n            var item, menu_items;\n            var single_host = machines.list.length <= 1;\n            var dashboards = compiled.ordered(\"dashboard\");\n\n            if (shell_embedded)\n                state.sidebar = true;\n\n            /* See if we should show a dashboard */\n            if (!state.sidebar && dashboards.length > 0) {\n                item = dashboards[0];\n                /* Don't chose a dashboard as a single host unless\n                 * it specifically supports that.\n                 */\n                if (item && (!single_host || item.wants !== \"multiple-machines\"))\n                    return item.path;\n                else\n                    item = null;\n            }\n\n            /* See if we can find something with currently selected label */\n            var label = $(\"#sidebar li.active a\").text();\n            if (label) {\n                item = compiled.search(\"label\", label);\n                if (item)\n                    return item.path;\n            }\n\n            /* Go for the first item */\n            menu_items = compiled.ordered(\"menu\");\n            if (menu_items.length > 0 && menu_items[0]) {\n                return menu_items[0].path;\n\n            /* If there is no menu items use a dashboard */\n            } else if (dashboards.length > 0) {\n                item = dashboards[0];\n                if (item) {\n                    state.sidebar = false;\n                    return item.path;\n                }\n            }\n\n            return \"system\";\n        }\n\n        function update_navbar(machine, state, compiled) {\n            $(\".dashboard-link\").each(function() {\n                var el = $(this);\n                el.toggleClass(\"active\", el.attr(\"data-component\") === state.component);\n            });\n\n            var hide;\n            if (machine && machine.static_hostname) {\n                hide = $(\".dashboard-link\").length < 2 && machines.list.length < 2;\n                $('#content-navbar').toggleClass(\"hidden\", hide);\n            } else {\n                $('#content-navbar').toggleClass(\"hidden\", false);\n            }\n\n            var item = compiled.items[state.component];\n            if (item && item.section == \"dashboard\") {\n                delete state.sidebar;\n                machine = null;\n            }\n\n            $(\"#machine-avatar\").attr(\"src\", machine && machine.avatar ? encodeURI(machine.avatar) :\n                                                \"../shell/images/server-small.png\");\n\n            var label;\n            if (machine) {\n                label = machine.label;\n            } else if (machines.list.length == 1) {\n                label = machines.list[0].label;\n            } else {\n                label = _(\"Machines\");\n            }\n            $(\"#machine-link span\").text(label);\n\n            var color;\n            if (machines.list.length == 1 || !machine)\n                color = \"transparent\";\n            else\n                color = machine.color || \"\";\n            $(\"#machine-color\").css(\"border-left-color\", color);\n\n            $(\"#machine-dropdown\").toggleClass(\"active\", !!machine);\n\n            /* Decide when to show the sidebar */\n            var sidebar = $(\"#sidebar\");\n\n            if (machine && machine.state == \"connected\")\n                sidebar.show();\n            else\n                sidebar.hide();\n        }\n\n        function update_sidebar(machine, state, compiled) {\n            function links(component) {\n                return $(\"<li>\")\n                    .toggleClass(\"active\", state.component === component.path)\n                    .append($(\"<a>\")\n                        .attr(\"href\", index.href({ host: machine.address, component: component.path }))\n                        .text(component.label));\n            }\n\n            var menu = compiled.ordered(\"menu\").map(links);\n            $(\"#sidebar-menu\").empty().append(menu);\n\n            var tools = compiled.ordered(\"tools\").map(links);\n            $(\"#sidebar-tools\").empty().append(tools);\n            $('#tools-panel li.active').parents('#tools-panel').collapse('show');\n        }\n\n        function update_title(label, machine) {\n            if (label)\n                label += \" - \";\n            else\n                label = \"\";\n            var suffix = index.default_title;\n            if (machine && machine.label)\n                suffix = machine.label;\n            document.title = label + suffix;\n        }\n\n        function update_frame(machine, state, compiled) {\n            var title, message, connecting, restarting;\n            var current_frame = index.current_frame();\n\n            if (machine.state != \"connected\") {\n                $(current_frame).hide();\n                current_frame = null;\n                index.current_frame(current_frame);\n\n                connecting = (machine.state == \"connecting\");\n                if (machine.restarting) {\n                    title = _(\"The machine is restarting\");\n                    message = \"\";\n                } else if (connecting) {\n                    title = _(\"Connecting to the machine\");\n                    message = \"\";\n                } else {\n                    title = _(\"Couldn't connect to the machine\");\n                    if (machine.problem == \"not-found\") {\n                        message = _(\"Cannot connect to an unknown machine\");\n                    } else {\n                        var error = machine.problem || machine.state;\n                        if (error)\n                            message = cockpit.message(error);\n                        else\n                            message = \"\";\n                    }\n                }\n\n                if (!machine.restarting && mdialogs.needs_troubleshoot(machine)) {\n                    $(\"#machine-troubleshoot\").off()\n                        .on(\"click\", function () {\n                            mdialogs.troubleshoot(\"troubleshoot-dialog\", machine);\n                        });\n                    $(\"#machine-troubleshoot\").show();\n                } else {\n                    $(\"#machine-troubleshoot\").hide();\n                }\n\n                restarting = !!machine.restarting;\n                $(\".curtains-ct\").show();\n                $(\".curtains-ct .spinner\").toggle(connecting || restarting);\n                $(\"#machine-reconnect\").toggle(!connecting && machine.problem != \"not-found\");\n                $(\".curtains-ct i\").toggle(!connecting && !restarting);\n                $(\".curtains-ct h1\").text(title);\n                $(\".curtains-ct p\").text(message);\n\n                $(\"#machine-spinner\").hide();\n\n                update_title(null, machine);\n\n                /* Fall through when connecting, and allow frame to load at same time*/\n                if (!connecting)\n                    return;\n            }\n\n            var hash = state.hash;\n            var component = state.component;\n\n            /* Old cockpit packages, used to be in shell/shell.html */\n            var compat;\n            if (machine && compiled.compat) {\n                compat = compiled.compat[component];\n                if (compat) {\n                    component = \"shell/shell\";\n                    hash = compat;\n                }\n            }\n\n            var frame;\n            if (component)\n                frame = index.frames.lookup(machine, component, hash);\n            if (frame != current_frame) {\n                $(current_frame).css('display', 'none');\n                index.current_frame(frame);\n            }\n\n            var label, item;\n            if (machine.state == \"connected\") {\n                $(\".curtains-ct\").hide();\n                $(\"#machine-spinner\").toggle(frame && !$(frame).attr(\"data-ready\"));\n                $(frame).css('display', 'block');\n                item = compiled.items[state.component];\n                label = item ? item.label : \"\";\n                update_title(label, machine);\n            }\n\n            phantom_checkpoint();\n        }\n\n        function update_machines() {\n            $(\"#machine-dropdown .caret\")\n                .toggle(machines.list.length > 1);\n\n            var machine_link = $(\"machine-link\");\n            if (machines.list.length > 1)\n                machine_link.attr(\"data-toggle\", \"dropdown\");\n            else\n                machine_link.removeAttr(\"data-toggle\");\n\n            var list = $(\"#machine-dropdown ul\");\n            var links = machines.list.map(function(machine) {\n                var avatar = $(\"<img>\").addClass(\"machine-avatar\")\n                            .attr(\"src\", encodeURI(machine.avatar));\n                var text = $(\"<span>\").text(machine.label);\n                return $(\"<li role='presentation'>\")\n                    .css(\"border-left-color\", machine.color || \"\")\n                    .append($(\"<a>\")\n                        .attr(\"role\", \"menuitem\")\n                        .attr(\"tabindex\", \"-1\")\n                        .attr(\"data-address\", machine.address)\n                        .attr(\"href\", index.href({ host: machine.address }, true))\n                        .append(avatar, text));\n                });\n            list.empty().append(links);\n        }\n\n        function compatibility(machine) {\n            if (!machine.manifests || machine.address === \"localhost\")\n                return null;\n\n            var shell = machine.manifests[\"shell\"] || { };\n            var menu = shell[\"menu\"] || { };\n            var tools = shell[\"tools\"] || { };\n\n            var mapping = { };\n\n            /* The following were included in shell/shell.html in old versions */\n            if (\"_host_\" in menu)\n                mapping[\"system/host\"] = \"/server\";\n            if (\"_init_\" in menu)\n                mapping[\"system/init\"] = \"/services\";\n            if (\"_network_\" in menu)\n                mapping[\"network/interfaces\"] = \"/networking\";\n            if (\"_storage_\" in menu)\n                mapping[\"storage/devices\"] = \"/storage\";\n            if (\"_users_\" in tools)\n                mapping[\"users/local\"] = \"/accounts\";\n\n            /* For Docker we have to guess ... some heuristics */\n            if (\"_storage_\" in menu || \"_init_\" in menu)\n                mapping[\"docker/containers\"] = \"/containers\";\n\n            return mapping;\n        }\n\n        function compile(machine) {\n            var compiled = base_index.new_compiled();\n            compiled.load(machine.manifests, \"tools\");\n            compiled.load(machine.manifests, \"dashboard\");\n            compiled.load(machine.manifests, \"menu\");\n            compiled.compat = compatibility(machine);\n            return compiled;\n        }\n\n        cockpit.transport.wait(function() {\n            index.start();\n        });\n    }\n\n    function SimpleIndex(index_options) {\n        if (!index_options)\n            index_options = {};\n\n        index_options.navigate = function (state, sidebar) {\n            return navigate(state, sidebar);\n        };\n        var default_title = index_options.default_title || \"Cockpit\";\n        var index = base_index.new_index_from_proto(index_options);\n        var compiled = base_index.new_compiled();\n\n        compiled.load(cockpit.manifests, \"dashboard\");\n\n        /* Disconnection Dialog */\n        var watchdog_problem = null;\n        $(index).on(\"disconnect\", function (ev, problem) {\n            watchdog_problem = problem;\n            show_disconnected();\n        });\n\n        /* Reconnect button */\n        $(\"#machine-reconnect\").on(\"click\", function(ev) {\n            cockpit.sessionStorage.clear();\n            window.location.reload(true);\n        });\n\n        function show_disconnected() {\n            var current_frame = index.current_frame();\n            if (current_frame)\n                $(current_frame).hide();\n\n            $(\".curtains-ct .spinner\").toggle(false);\n            $(\"#machine-reconnect\").toggle(true);\n            $(\".curtains-ct i\").toggle(true);\n            $(\".curtains-ct h1\").text(_(\"Disconnected\"));\n            $(\".curtains-ct p\").text(cockpit.message(watchdog_problem));\n            $(\".curtains-ct\").show();\n            $(\"#navbar-dropdown\").addClass(\"disabled\");\n            phantom_checkpoint();\n        }\n\n        index.ready();\n\n        /* Handles navigation */\n        function navigate(state, reconnect) {\n            var dashboards = compiled.ordered(\"dashboard\");\n\n            /* If this is a watchdog problem or we are troubleshooting\n             * let the dialog handle it */\n            if (watchdog_problem)\n                return;\n\n            /* phantomjs has a problem retrieving state, so we allow it to be passed in */\n            if (!state)\n                state = index.retrieve_state();\n\n            if (!state.component && dashboards.length > 0) {\n                state.component = dashboards[0].path;\n            }\n            update_navbar(state);\n            update_frame(state);\n\n            index.recalculate_layout();\n\n            /* Just replace the state, and URL */\n            index.jump(state, true);\n        }\n\n        function update_navbar(state) {\n            $(\".dashboard-link\").each(function() {\n                var el = $(this);\n                el.toggleClass(\"active\", el.attr(\"data-component\") === state.component);\n            });\n\n            var item = compiled.items[state.component];\n            if (item && item.section == \"dashboard\")\n                delete state.sidebar;\n\n            $(\"#machine-link span\").text(default_title);\n            if ($(\".dashboard-link\").length < 2)\n                $('#content-navbar').toggleClass(\"hidden\", true);\n        }\n\n        function update_title(label) {\n            if (label)\n                label += \" - \";\n            else\n                label = \"\";\n            document.title = label + default_title;\n        }\n\n        function update_frame(state) {\n            var current_frame = index.current_frame();\n\n            var hash = state.hash;\n            var component = state.component;\n\n            var frame;\n            if (component)\n                frame = index.frames.lookup(null, component, hash);\n            if (frame != current_frame) {\n                $(current_frame).css('display', 'none');\n                index.current_frame(frame);\n            }\n\n            var label, item;\n            $(frame).css('display', 'block');\n            item = compiled.items[state.component];\n            label = item ? item.label : \"\";\n            update_title(label);\n\n            phantom_checkpoint();\n        }\n\n        cockpit.transport.wait(function() {\n            index.start();\n        });\n    }\n\n    module.exports = {\n        simple_index: function (options) {\n            return new SimpleIndex(options);\n        },\n        machines_index: function (options, machines_ins, loader, mdialogs) {\n            return new MachinesIndex(options, machines_ins, loader, mdialogs);\n        }\n    };\n\n    function message_queue(event) {\n        window.messages.push(event);\n    }\n\n    /* When we're being loaded into the index window we have additional duties */\n    if (document.documentElement.getAttribute(\"class\") === \"index-page\") {\n        /* Indicates to child frames that we are a cockpit1 router frame */\n        window.name = \"cockpit1\";\n\n        /* The same thing as above, but compatibility with old cockpit */\n        window.options = { sink: true, protocol: \"cockpit1\" };\n\n        /* While the index is initializing, snag any messages we receive from frames */\n        window.messages = [ ];\n\n        window.messages.cancel = function() {\n            window.removeEventListener(\"message\", message_queue, false);\n            window.messages = null;\n        };\n\n        window.addEventListener(\"message\", message_queue, false);\n    }\n\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/shell/indexes.js\n// module id = 27\n// module chunks = 0 1 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2015 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar phantom_checkpoint = phantom_checkpoint || function () { };\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var shell_embedded = window.location.pathname.indexOf(\".html\") !== -1;\n    var _ = cockpit.gettext;\n\n    function Frames(index) {\n        var self = this;\n\n        /* Lists of frames, by host */\n        var iframes = { };\n\n        function remove_frame(frame) {\n            $(frame.contentWindow).off();\n            $(frame).remove();\n        }\n        self.remove = function remove(machine) {\n            var address = machine.address;\n            if (!address)\n                address = \"localhost\";\n            var list = iframes[address];\n            if (list) {\n                delete iframes[address];\n                $.each(list, function(i, frame) {\n                    remove_frame(frame);\n                });\n            }\n        };\n\n        function frame_ready(frame, count) {\n            var ready = false;\n\n            window.clearTimeout(frame.timer);\n            frame.timer = null;\n\n            try {\n                ready = $(\"body\", frame.contentWindow.document).is(\":visible\");\n            } catch(ex) {\n                ready = true;\n            }\n\n            if (!count)\n                count = 0;\n            count += 1;\n            if (count > 50)\n                ready = true;\n\n            if (ready) {\n                if (frame.getAttribute(\"data-ready\") != \"1\") {\n                    frame.setAttribute(\"data-ready\", \"1\");\n                    if (count > 0)\n                        index.navigate();\n                }\n            } else {\n                frame.timer = window.setTimeout(function() {\n                    frame_ready(frame, count + 1);\n                }, 100);\n            }\n        }\n\n        self.lookup_component_hash = function(machine, component) {\n            var address, list, frame, src;\n\n            if (machine)\n                address = machine.address;\n\n            if (!address)\n                address = \"localhost\";\n\n            list = iframes[address];\n            if (list)\n                frame = list[component];\n\n            if (frame) {\n                src = frame.getAttribute('src');\n                if (src)\n                    return src.split(\"#\")[1];\n            }\n        };\n\n        self.lookup = function lookup(machine, component, hash) {\n            var host;\n            var address;\n            var new_frame = false;\n\n            if (machine) {\n                host = machine.connection_string;\n                address = machine.address;\n            }\n\n            if (!host)\n                host = \"localhost\";\n\n            if (!address)\n                address = host;\n\n            var list = iframes[address];\n            if (!list)\n                iframes[address] = list = { };\n\n            var name = \"cockpit1:\" + host + \"/\" + component;\n            var frame = list[component];\n            if (frame && frame.getAttribute(\"name\") != name) {\n                remove_frame(frame);\n                frame = null;\n            }\n\n            var wind, src;\n\n            /* A preloaded frame */\n            if (!frame) {\n                wind = window.frames[name];\n                if (wind)\n                    frame = wind.frameElement;\n                if (frame) {\n                    src = frame.getAttribute('src');\n                    frame.url = src.split(\"#\")[0];\n                    list[component] = frame;\n                }\n            }\n\n            /* Need to create a new frame */\n            if (!frame) {\n                new_frame = true;\n                frame = document.createElement(\"iframe\");\n                frame.setAttribute(\"class\", \"container-frame\");\n                frame.setAttribute(\"name\", name);\n                frame.style.display = \"none\";\n\n                var base, checksum;\n                if (machine)\n                    checksum = machine.checksum;\n                if (host === \"localhost\")\n                    base = \"..\";\n                else if (checksum)\n                    base = \"../../\" + checksum;\n                else\n                    base = \"../../@\" + host;\n\n                frame.url = base + \"/\" + component;\n                if (component.indexOf(\"/\") === -1)\n                    frame.url += \"/index\";\n                frame.url += \".html\";\n            }\n\n            if (!hash)\n                hash = \"/\";\n            src = frame.url + \"#\" + hash;\n            if (frame.getAttribute('src') != src)\n                frame.setAttribute('src', src);\n\n            /* Store frame only when fully setup */\n            if (new_frame) {\n                list[component] = frame;\n                $(\"#content\").append(frame);\n            }\n            frame_ready(frame);\n            return frame;\n        };\n    }\n\n    function Router(index) {\n        var self = this;\n\n        var unique_id = 0;\n        var origin = cockpit.transport.origin;\n        var source_by_seed = { };\n        var source_by_name = { };\n\n        cockpit.transport.filter(function(message, channel, control) {\n            var seed, source, pos;\n\n            /* Only control messages with a channel are forwardable */\n            if (control) {\n                if (control.channel !== undefined) {\n                    for (seed in source_by_seed)\n                        source_by_seed[seed].window.postMessage(message, origin);\n                } else if (control.command == \"hint\") {\n                    if (control.credential)\n                        index.authorize_changed(control.credential);\n                }\n\n            /* Forward message to relevant frame */\n            } else if (channel) {\n                pos = channel.indexOf('!');\n                if (pos !== -1) {\n                    seed = channel.substring(0, pos + 1);\n                    source = source_by_seed[seed];\n                    if (source) {\n                        source.window.postMessage(message, origin);\n                        return false; /* Stop delivery */\n                    }\n                }\n            }\n\n            /* Still deliver the message locally */\n            return true;\n        }, false);\n\n        function perform_jump(child, control) {\n            var current_frame = index.current_frame();\n            if (child !== window) {\n                if (!current_frame || current_frame.contentWindow != child)\n                    return;\n            }\n            var str = control.location || \"\";\n            if (str[0] != \"/\")\n                str = \"/\" + str;\n            if (control.host)\n                str = \"/@\" + encodeURIComponent(control.host) + str;\n            index.jump(str);\n        }\n\n        function perform_track(child) {\n            var hash;\n            var current_frame = index.current_frame();\n            /* Note that we ignore tracknig for old shell code */\n            if (current_frame && current_frame.contentWindow === child &&\n                child.name && child.name.indexOf(\"/shell/shell\") === -1) {\n                hash = child.location.hash;\n                if (hash.indexOf(\"#\") === 0)\n                    hash = hash.substring(1);\n                if (hash === \"/\")\n                    hash = \"\";\n                index.jump({ hash: hash });\n            }\n        }\n\n        function on_unload(ev) {\n            var source = source_by_name[ev.target.defaultView.name];\n            if (source)\n                unregister(source);\n        }\n\n        function on_hashchange(ev) {\n            var source = source_by_name[ev.target.name];\n            if (source)\n                perform_track(source.window);\n        }\n\n        function on_load(ev) {\n            var source = source_by_name[ev.target.contentWindow.name];\n            if (source)\n                perform_track(source.window);\n        }\n\n        function unregister(source) {\n            var child = source.window;\n            cockpit.kill(null, child.name);\n            var frame = child.frameElement;\n            if (frame)\n                frame.removeEventListener(\"load\", on_load);\n            child.removeEventListener(\"unload\", on_unload);\n            child.removeEventListener(\"hashchange\", on_hashchange);\n            delete source_by_seed[source.channel_seed];\n            delete source_by_name[source.name];\n        }\n\n        function register(child) {\n            var host, name = child.name || \"\";\n            if (name.indexOf(\"cockpit1:\") === 0)\n                host = name.substring(9).split(\"/\")[0];\n            if (!name || !host) {\n                console.warn(\"invalid child window name\", child, name);\n                return;\n            }\n\n            unique_id += 1;\n            var seed = (cockpit.transport.options[\"channel-seed\"] || \"undefined:\") + unique_id + \"!\";\n            var source = {\n                name: name,\n                window: child,\n                channel_seed: seed,\n                default_host: host,\n                inited: false,\n            };\n            source_by_seed[seed] = source;\n            source_by_name[name] = source;\n\n            var frame = child.frameElement;\n            frame.addEventListener(\"load\", on_load);\n            child.addEventListener(\"unload\", on_unload);\n            child.addEventListener(\"hashchange\", on_hashchange);\n\n            /*\n             * Setting the \"data-loaded\" attribute helps the testsuite\n             * know when it can switch into the frame and inject its\n             * own additions.\n             */\n            frame.setAttribute('data-loaded', '1');\n\n            perform_track(child);\n            phantom_checkpoint();\n\n            index.navigate();\n            return source;\n        }\n\n        function message_handler(event) {\n            if (event.origin !== origin)\n                return;\n\n            var forward_command = false;\n            var data = event.data;\n            var child = event.source;\n            if (!child || typeof data !== \"string\")\n                return;\n\n            var source = source_by_name[child.name];\n            var control;\n\n            /* Closing the transport */\n            if (data.length === 0) {\n                if (source)\n                    unregister(source);\n                return;\n            }\n\n            /* A control message */\n            if (data[0] == '\\n') {\n                control = JSON.parse(data.substring(1));\n                if (control.command === \"init\") {\n                    if (source)\n                        unregister(source);\n                    source = register(child);\n                    if (source) {\n                        var reply = $.extend({ }, cockpit.transport.options,\n                            { command: \"init\", \"host\": source.default_host, \"channel-seed\": source.channel_seed }\n                        );\n                        child.postMessage(\"\\n\" + JSON.stringify(reply), origin);\n                        source.inited = true;\n\n                        /* If this new frame is not the current one, tell it */\n                        if (child.frameElement != index.current_frame())\n                            self.hint(child.frameElement.contentWindow, { \"hidden\": true });\n                    }\n\n                } else if (control.command === \"jump\") {\n                    perform_jump(child, control);\n                    return;\n\n                } else if (control.command == \"logout\" || control.command == \"kill\") {\n                    forward_command = true;\n\n                } else if (control.command === \"hint\") {\n                    if (control.hint == \"restart\") {\n                        /* watchdog handles current host for now */\n                        if (control.host != cockpit.transport.host)\n                            index.expect_restart(control.host);\n                    } else\n                        cockpit.hint(control.hint, control);\n                    return;\n                } else if (control.command == \"oops\") {\n                    index.show_oops();\n                    return;\n\n                /* Only control messages with a channel are forwardable */\n                } else if (control.channel === undefined && !forward_command) {\n                    return;\n\n                /* Add the child's group to all open channel messages */\n                } else if (control.command == \"open\") {\n                    control.group = child.name;\n                    data = \"\\n\" + JSON.stringify(control);\n                }\n            }\n\n            if (!source) {\n                console.warn(\"child frame \" + child.name + \" sending data without init\");\n                return;\n            }\n\n            /* Everything else gets forwarded */\n            cockpit.transport.inject(data, true);\n        }\n\n\n        self.start = function start(messages) {\n            window.addEventListener(\"message\", message_handler, false);\n            for (var i = 0, len = messages.length; i < len; i++)\n                message_handler(messages[i]);\n        };\n\n        self.hint = function hint(child, data) {\n            var message, source = source_by_name[child.name];\n            if (source && source.inited) {\n                data.command = \"hint\";\n                message = \"\\n\" + JSON.stringify(data);\n                source.window.postMessage(message, origin);\n            }\n        };\n    }\n\n    /*\n     * New instances of Index must be created by new_index_from_proto\n     * and the caller must include a navigation function in the given\n     * prototype. That function will be called by Frames and\n     * Router to actually perform any navigation action.\n     *\n     * As a convenience, common menu items can be setup by adding the\n     * selector to be used to hook them up. The accepted selectors\n     * are.\n     * oops_sel, logout_sel, language_sel, brand_sel, about_sel,\n     * user_sel, account_sel\n     *\n     * Emits \"disconnect\" and \"expect_restart\" signals, that should be\n     * handled by the caller.\n     */\n    function Index() {\n        var self = this;\n        var current_frame;\n\n        if (typeof self.navigate !== \"function\")\n            throw \"Index requires a prototype with a navigate function\";\n\n        self.frames = new Frames(self);\n        self.router = new Router(self);\n\n        /* Watchdog for disconnect */\n        var watchdog = cockpit.channel({ \"payload\": \"null\" });\n        $(watchdog).on(\"close\", function(event, options) {\n            var watchdog_problem = options.problem || \"disconnected\";\n            console.warn(\"transport closed: \" + watchdog_problem);\n            $(self).triggerHandler(\"disconnect\", watchdog_problem);\n        });\n\n        /* Handles an href link as seen below */\n        $(document).on(\"click\", \"a[href]\", function(ev) {\n            var a = this;\n            if (window.location.host === a.host) {\n                self.jump(a.getAttribute('href'));\n                ev.preventDefault();\n                phantom_checkpoint();\n            }\n        });\n\n        if (window.navigator.userAgent.indexOf(\"PhantomJS\") == -1) {\n            var old_onerror = window.onerror;\n            window.onerror = function cockpit_error_handler(msg, url, line) {\n                self.show_oops();\n                phantom_checkpoint();\n                if (old_onerror)\n                    return old_onerror(msg, url, line);\n                return false;\n            };\n        }\n\n        /*\n         * Navigation is driven by state objects, which are used with pushState()\n         * and friends. The state is the canonical navigation location, and not\n         * the URL. Only when no state has been pushed or we are arriving from\n         * a link, do we parse the state from the URL.\n         *\n         * Each state object has:\n         *   host: a machine host\n         *   component: the stripped component to load\n         *   hash: the hash to pass to the component\n         *   sidebar: set to true to hint that we want a component with a sidebar\n         *\n         * If state.sidebar is set, and no component has yet been chosen for the\n         * given state, then we try to find one that would show a sidebar.\n         */\n\n        /* Encode navigate state into a string\n         * If with_root is true the configured\n         * url root will be added to the generated\n         * url. with_root should be used when\n         * navigating to a new url or updating\n         * history, but is not needed when simply\n         * generating a string for a link.\n         */\n        function encode(state, sidebar, with_root) {\n            var path = [];\n            if (state.host && (sidebar || state.host !== \"localhost\"))\n                path.push(\"@\" + state.host);\n            if (state.component)\n                path.push.apply(path, state.component.split(\"/\"));\n            var string = cockpit.location.encode(path, null, with_root);\n            if (state.hash && state.hash !== \"/\")\n                string += \"#\" + state.hash;\n            return string;\n        }\n\n        /* Decodes navigate state from a string */\n        function decode(string) {\n            var state = { version: \"v1\", hash: \"\" };\n            var pos = string.indexOf(\"#\");\n            if (pos !== -1) {\n                state.hash = string.substring(pos + 1);\n                string = string.substring(0, pos);\n            }\n            if (string[0] != '/')\n                string = \"/\" + string;\n            var path = cockpit.location.decode(string);\n            if (path[0] && path[0][0] == \"@\") {\n                state.host = path.shift().substring(1);\n                state.sidebar = true;\n            } else {\n                state.host = \"localhost\";\n            }\n            if (path.length && path[path.length - 1] == \"index\")\n                path.pop();\n            state.component = path.join(\"/\");\n            return state;\n        }\n\n        function build_navbar() {\n            var navbar = $(\"#content-navbar\");\n\n            function links(component) {\n                var a = $(\"<a>\")\n                    .attr(\"href\", self.href({ host: \"localhost\", component: component.path }))\n                    .text(component.label);\n                return $(\"<li class='dashboard-link'>\")\n                    .attr(\"data-component\", component.path)\n                    .append(a);\n            }\n\n            if (shell_embedded) {\n                navbar.hide();\n            } else {\n                var local_compiled = new CompiledComponants();\n                local_compiled.load(cockpit.manifests, \"dashboard\");\n                navbar.append(local_compiled.ordered(\"dashboard\").map(links));\n            }\n        }\n\n        self.recalculate_layout = function() {\n            var topnav = $('#topnav');\n            var sidebar = $('#sidebar');\n            var content = $('#content');\n\n            var window_height = $(window).height();\n            var topnav_height = topnav.height();\n\n            var y = window_height - topnav_height;\n            $(current_frame).height(Math.floor(y));\n            sidebar.height(y);\n\n            var sidebar_width = sidebar.is(':visible') ? sidebar.outerWidth() : 0;\n            content.css(\"margin-left\", sidebar_width + \"px\");\n        };\n\n        self.retrieve_state = function() {\n            var state = window.history.state;\n            if (!state || state.version !== \"v1\") {\n                if (shell_embedded)\n                    state = decode(\"/\" + window.location.hash);\n                else\n                    state = decode(window.location.pathname + window.location.hash);\n            }\n            return state;\n        };\n\n        /* Jumps to a given navigate state */\n        self.jump = function (state, replace) {\n            if (typeof (state) === \"string\")\n                state = decode(state);\n\n            var current = self.retrieve_state();\n\n            /* Make sure we have the data we need */\n            if (!state.host)\n                state.host = current.host || \"localhost\";\n            if (!(\"component\" in state))\n                state.component = current.component || \"\";\n\n            var target;\n            var history = window.history;\n            var frame_change = (state.host !== current.host ||\n                                state.component !== current.component);\n\n            if (frame_change && !state.hash) {\n                state.hash = self.frames.lookup_component_hash(state.host,\n                                                               state.component);\n            }\n\n            if (shell_embedded)\n                target = window.location;\n            else\n                target = encode(state, null, true);\n\n            if (replace) {\n                history.replaceState(state, \"\", target);\n                return false;\n            }\n\n\n            if (frame_change || state.hash !== current.hash) {\n                history.pushState(state, \"\", target);\n                self.navigate(state, true);\n                return true;\n            }\n\n            return false;\n        };\n\n        /* Build an href for use in an <a> */\n        self.href = function (state, sidebar) {\n            return encode(state, sidebar);\n        };\n\n        self.show_oops = function () {\n            if (self.oops_sel)\n                $(self.oops_sel).show();\n        };\n\n        self.current_frame = function (frame) {\n            if (frame !== undefined) {\n                if (current_frame !== frame) {\n                    if (current_frame && current_frame.contentWindow)\n                        self.router.hint(current_frame.contentWindow, { \"hidden\": true });\n                    if (frame && frame.contentWindow)\n                        self.router.hint(frame.contentWindow, { \"hidden\": false });\n                }\n                current_frame = frame;\n            }\n            return current_frame;\n        };\n\n        self.start = function() {\n            /* window.messages is initialized in shell/bundle.js */\n            var messages = window.messages;\n            if (messages)\n                messages.cancel();\n            self.router.start(messages || []);\n        };\n\n        self.ready = function () {\n            $(window).on(\"popstate\", function(ev) {\n                self.navigate(ev.state, true);\n            });\n\n            $(window).on('resize', function () {\n                self.recalculate_layout();\n            });\n\n            build_navbar();\n            self.navigate();\n            cockpit.translate();\n            $(\"body\").show();\n        };\n\n        self.expect_restart = function (host) {\n            $(self).triggerHandler(\"expect_restart\", host);\n        };\n\n        self.authorize_changed = function(value) {\n            $(self.credential_sel).toggle(value != \"clear\");\n        };\n\n        /* Menu items */\n        /* The oops bar */\n        function setup_oops(id) {\n            var oops = $(id);\n            if (!oops)\n                return;\n            oops.children(\"a\").on(\"click\", function() {\n                $(\"#error-popup-title\").text(_(\"Unexpected error\"));\n                var details = _(\"Cockpit had an unexpected internal error. <br/><br/>You can try restarting Cockpit by pressing refresh in your browser. The javascript console contains details about this error (<b>Ctrl-Shift-J</b> in most browsers).\");\n                $(\"#error-popup-message\").html(details);\n                $('#error-popup').modal('show');\n            });\n        }\n\n        /* Branding */\n        function setup_brand(id, default_title) {\n            var os_release = JSON.parse(window.localStorage['os-release'] || \"{}\");\n\n            var style, elt = $(id)[0];\n            if (elt)\n                style = window.getComputedStyle(elt);\n            if (!style)\n                return;\n\n            var len, content = style.content;\n            if (content && content != \"none\" && content != \"normal\") {\n                len = content.length;\n                if ((content[0] === '\"' || content[0] === '\\'') &&\n                    len > 2 && content[len - 1] === content[0])\n                    content = content.substr(1, len - 2);\n                elt.innerHTML = cockpit.format(content, os_release) || default_title;\n                return $(elt).text();\n            }\n        }\n\n        /* Logout link */\n        function setup_logout(id) {\n            $(id).on(\"click\", function() {\n                cockpit.logout();\n            });\n        }\n\n        /* Display language dialog */\n        function setup_language(id) {\n            /*\n             * Note that we don't go ahead and load all the po files in order\n             * to produce this list. Perhaps we would include it somewhere in a\n             * separate automatically generated file. Need to see.\n             */\n            var manifest = cockpit.manifests[\"shell\"] || { };\n            $(\".display-language-menu\").toggle(!!manifest.locales);\n            var language = document.cookie.replace(/(?:(?:^|.*;\\s*)CockpitLang\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\");\n            if (!language)\n                language = \"en-us\";\n            $.each(manifest.locales || { }, function(code, name) {\n                var el = $(\"<option>\").text(name).val(code);\n                if (code == language)\n                    el.attr(\"selected\", \"true\");\n                $(\"#display-language-list\").append(el);\n            });\n\n            $(\"#display-language-select-button\").on(\"click\", function(event) {\n                var code_to_select = $(\"#display-language-list\").val();\n                var cookie = \"CockpitLang=\" + encodeURIComponent(code_to_select) +\n                             \"; path=/; expires=Sun, 16 Jul 3567 06:23:41 GMT\";\n                document.cookie = cookie;\n                window.localStorage.setItem(\"cockpit.lang\", code_to_select);\n                window.location.reload(true);\n                return false;\n            });\n\n            $(id).on(\"shown.bs.modal\", function() {\n                $(\"display-language-list\").focus();\n                phantom_checkpoint();\n            });\n        }\n\n        /* About dialog */\n        function setup_about(id) {\n            $(cockpit.info).on(\"changed\", function() {\n                $(id).text(cockpit.info.version);\n                phantom_checkpoint();\n            });\n        }\n\n        /* Account link */\n        function setup_account(id, user) {\n            $(id).on(\"click\", function() {\n                self.jump({ host: \"localhost\", component: \"users\", hash: \"/\" + user.name });\n            }).show();\n        }\n\n        /* User information */\n        function setup_user(id, user) {\n            $(id).text(user.full_name || user.name || '???');\n\n            var is_root = (user.name == \"root\");\n            var is_not_root = (user.name && !is_root);\n            $('#deauthorize-item').toggle(is_not_root);\n        }\n\n        if (self.oops_sel)\n            setup_oops(self.oops_sel);\n\n        if (self.logout_sel)\n            setup_logout(self.logout_sel);\n\n        if (self.language_sel)\n            setup_language(self.language_sel);\n\n        var cal_title;\n        if (self.brand_sel) {\n            cal_title = setup_brand(self.brand_sel, self.default_title);\n            if (cal_title)\n                self.default_title = cal_title;\n        }\n\n        if (self.about_sel)\n            setup_about(self.about_sel);\n\n        if (self.user_sel || self.account_sel) {\n            cockpit.user().done(function (user) {\n                if (self.user_sel)\n                    setup_user(self.user_sel, user);\n                if (self.account_sel)\n                    setup_account(self.account_sel, user);\n            });\n        }\n    }\n\n    function CompiledComponants() {\n        var self = this;\n        self.items = {};\n\n        self.load = function(manifests, section) {\n            $.each(manifests || { }, function(name, manifest) {\n                $.each(manifest[section] || { }, function(prop, info) {\n                    var item = {\n                        section: section,\n                        label: cockpit.gettext(info.label) || prop,\n                        order: info.order === undefined ? 1000 : info.order,\n                        wants: info.wants\n                    };\n                    if (info.path)\n                        item.path = info.path.replace(/\\.html$/, \"\");\n                    else\n                        item.path = name + \"/\" + prop;\n                    if (item.path.indexOf(\"/\") === -1)\n                        item.path = name + \"/\" + item.path;\n                    if (item.path.slice(-6) == \"/index\")\n                        item.path = item.path.slice(0, -6);\n                    self.items[item.path] = item;\n                });\n            });\n        };\n\n\n        self.ordered = function(section) {\n            var x, list = [];\n            for (x in self.items) {\n                if (!section || self.items[x].section === section)\n                    list.push(self.items[x]);\n            }\n            list.sort(function(a, b) { return a.order - b.order; });\n            return list;\n        };\n\n        self.search = function(prop, value) {\n            var x;\n            for (x in self.items) {\n                if (self.items[x][prop] === value)\n                    return self.items[x];\n            }\n        };\n    }\n\n    function follow(arg) {\n        /* A promise of some sort */\n        if (arguments.length == 1 && typeof arg.then == \"function\") {\n            arg.then(function() { console.log.apply(console, arguments); },\n                     function() { console.error.apply(console, arguments); });\n            if (typeof arg.stream == \"function\")\n                arg.stream(function() { console.log.apply(console,arguments); });\n        }\n    }\n\n    var zz_value;\n\n    /* For debugging utility in the index window */\n    Object.defineProperties(window, {\n        cockpit: { value: cockpit },\n        zz: {\n            get: function() { return zz_value; },\n            set: function(val) { zz_value = val; follow(val); }\n        }\n    });\n\n    module.exports = {\n        new_index_from_proto: function (proto) {\n            var o = new Object(proto);\n            Index.call(o);\n            return o;\n        },\n\n        new_compiled: function () {\n            return new CompiledComponants();\n        },\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/shell/base_index.js\n// module id = 28\n// module chunks = 0 1 2","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var machis = require(\"machines\");\n    var mdialogs = require(\"machine-dialogs\");\n\n    var indexes = require(\"./indexes\");\n\n    var default_title = \"Cockpit\";\n    var manifest = cockpit.manifests[\"shell\"] || { };\n    if (manifest.title)\n        default_title = manifest.title;\n\n    var options = {\n        brand_sel: \"#index-brand\",\n        logout_sel: \"#go-logout\",\n        oops_sel: \"#navbar-oops\",\n        language_sel: \"#display-language\",\n        about_sel: \"#about-version\",\n        default_title: default_title\n    };\n    var machines = machis.instance();\n    machines.overlay(\"localhost\", { \"label\": default_title,\n                                    \"static_hostname\": true });\n\n    var loader = machis.loader(machines, true);\n    var dialogs = mdialogs.new_manager(machines, {\n        \"no-cockpit\": \"not-supported\",\n        \"not-supported\": \"not-supported\",\n        \"protocol-error\": \"not-supported\",\n        \"authentication-not-supported\": \"change-auth\",\n        \"authentication-failed\": \"change-auth\",\n        \"no-forwarding\": \"change-auth\",\n        \"unknown-hostkey\": \"unknown-hostkey\",\n        \"invalid-hostkey\": \"invalid-hostkey\",\n        \"no-host\": \"change-port\",\n    });\n\n    indexes.machines_index(options, machines, loader, dialogs);\n\n    var login_data = cockpit.localStorage.getItem('login-data', true);\n    if (login_data) {\n        var data = JSON.parse(login_data);\n        $(\"#content-user-name\").text(data[\"displayName\"]);\n    }\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/shell/index-stub.js\n// module id = 33\n// module chunks = 2"],"sourceRoot":""}