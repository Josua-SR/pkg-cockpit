var phantom_checkpoint = phantom_checkpoint || function() {};

(function(e) {
    var t;
    window.localStorage.removeItem("url-root");
    var n = window.environment || {};
    var o = n.OAuth || null;
    if (o) {
        if (!o.TokenParam) o.TokenParam = "access_token";
        if (!o.ErrorParam) o.ErrorParam = "error_description";
    }
    var i, a, r, s;
    var l = /[?&]?([^=]+)=([^&]*)/g;
    var c = null;
    function u(e) {
        e = e.split("+").join(" ");
        var t = {};
        var n;
        for (;;) {
            n = l.exec(e);
            if (!n) break;
            t[decodeURIComponent(n[1])] = decodeURIComponent(n[2]);
        }
        return t;
    }
    function d(e) {
        e = e.trim();
        if (e[0] == '"') e = e.substr(1, e.length - 2);
        return e;
    }
    if (!e) e = function() {};
    if (window.location.pathname.indexOf("/cockpit/") === 0 || window.location.pathname.indexOf("/cockpit+") === 0) document.documentElement.setAttribute("class", "inline");
    function f(e) {
        return document.getElementById(e);
    }
    function p(t) {
        if (window.console) e.warn("fatal:", t);
        f("login-again").style.display = "none";
        f("login-wait-validating").style.display = "none";
        if (c) {
            f("login-again").href = c;
            f("login-again").style.display = "block";
        }
        f("login").style.display = "none";
        f("login-details").style.display = "none";
        f("login-fatal").style.display = "block";
        var n = f("login-fatal-message");
        n.textContent = "";
        n.appendChild(document.createTextNode(t));
    }
    var w = /\$\{([^}]+)\}|\$([a-zA-Z0-9_]+)/g;
    function g(e, t) {
        return e.replace(w, function(e, n, o) {
            return t[n || o] || "";
        });
    }
    function v(e, t) {
        var n, o = f(e);
        if (o) n = window.getComputedStyle(o);
        if (!n) return;
        var i, a = n.content;
        if (a && a != "none" && a != "normal") {
            i = a.length;
            if ((a[0] === '"' || a[0] === "'") && i > 2 && a[i - 1] === a[0]) a = a.substr(1, i - 2);
            o.innerHTML = g(a) || t;
        }
    }
    function m() {
        function e(e, t) {
            var n;
            try {
                n = t[e];
            } catch (o) {
                p("The web browser configuration prevents Cockpit from running (inaccessible " + e + ")");
                throw o;
            }
            if (n === undefined) {
                p("This web browser is too old to run Cockpit (missing " + e + ")");
                return false;
            }
            return true;
        }
        return ("MozWebSocket" in window || e("WebSocket", window)) && e("XMLHttpRequest", window) && e("localStorage", window) && e("sessionStorage", window) && e("JSON", window) && e("defineProperty", Object) && e("console", window) && e("pushState", window.history) && e("textContent", document);
    }
    function h(e) {
        return e.replace(/^\s+|\s+$/g, "");
    }
    function y(e) {
        var o = document.createElement("a");
        var l = document.baseURI;
        var c;
        if (!l) {
            c = document.getElementsByTagName("base");
            if (c.length > 0) l = c[0].href; else l = "/";
        }
        e = e || "/";
        o.href = l;
        if (o.pathname != "/") {
            t = o.pathname.replace(/^\/+|\/+$/g, "");
            window.localStorage.setItem("url-root", t);
            if (t && e.indexOf("/" + t) === 0) e = e.replace("/" + t, "") || "/";
        }
        if (e.indexOf("/=") === 0) {
            n.hostname = e.substring(2);
            e = "/cockpit+" + e.split("/")[1];
        } else if (e.indexOf("/cockpit/") !== 0 && e.indexOf("/cockpit+") !== 0) {
            e = "/cockpit";
        }
        a = e.split("/")[1];
        i = "/" + a + "/login";
        if (t) i = "/" + t + i;
        s = a;
        r = i;
    }
    function b(e, t) {
        if (t === undefined) t = f("server-group").style.display === "none";
        f("option-group").setAttribute("data-state", t);
        if (t) {
            f("server-group").style.display = "block";
            f("option-caret").setAttribute("class", "caret caret-down");
            f("option-caret").setAttribute("className", "caret caret-down");
        } else {
            f("server-group").style.display = "none";
            f("option-caret").setAttribute("class", "caret caret-right");
            f("option-caret").setAttribute("className", "caret caret-right");
        }
    }
    function k() {
        window.onload = null;
        y(window.location.pathname);
        var e = n.page.title;
        if (!e) e = n.hostname;
        document.title = e;
        if (a.indexOf("cockpit+=") === 0) {
            f("brand").style.display = "none";
            f("badge").style.visibility = "hidden";
        } else {
            v("badge", "");
            v("brand", "Cockpit");
        }
        f("option-group").addEventListener("click", b);
        f("server-clear").addEventListener("click", function() {
            var e = f("server-field");
            e.value = "";
            e.focus();
        });
        if (!m()) return;
        var t = window.localStorage.getItem("authorized-default") || "";
        if (t.indexOf("password") !== -1) f("authorized-input").checked = true;
        var i = JSON.stringify(n["os-release"]);
        var r = window.sessionStorage.getItem("logout-intent") == "explicit";
        if (r) window.sessionStorage.removeItem("logout-intent");
        window.localStorage.setItem("os-release", i);
        if (o) {
            f("login-details").style.display = "none";
            f("login").style.display = "none";
            if (r) {
                S();
                f("login-again").textContent = "Login Again";
                p("Logout Successful");
            } else {
                T();
            }
        } else if (r) {
            A();
        } else {
            x();
        }
    }
    function x() {
        var e = new XMLHttpRequest();
        e.open("GET", i, true);
        e.onreadystatechange = function() {
            if (e.readyState != 4) {
                return;
            } else if (e.status == 200) {
                q(JSON.parse(e.responseText));
            } else if (e.status == 401) {
                A();
            } else if (e.statusText) {
                p(decodeURIComponent(e.statusText));
            } else if (e.status === 0) {
                A();
            } else {
                p(e.status + " error");
            }
        };
        e.send();
    }
    function S() {
        var e = window.location.href.split("#", 2);
        c = o.URL;
        if (o.URL.indexOf("?") > -1) c += "&"; else c += "?";
        c += "redirect_uri=" + encodeURIComponent(e[0]);
    }
    function T() {
        var e = document.createElement("a");
        if (!o.URL) return p("Cockpit authentication is configured incorrectly.");
        var t = u(window.location.search);
        if (!window.location.search && window.location.hash) t = u(window.location.hash.slice(1));
        var n, a, r;
        S();
        if (t[o.TokenParam]) {
            if (window.sessionStorage.getItem("login-wanted")) {
                e.href = window.sessionStorage.getItem("login-wanted");
                y(e.pathname);
            }
            n = t[o.TokenParam];
            f("login-wait-validating").style.display = "block";
            r = new XMLHttpRequest();
            r.open("GET", i, true);
            r.setRequestHeader("Authorization", "Bearer " + n);
            r.onreadystatechange = function() {
                if (r.readyState != 4) {
                    return;
                } else if (r.status == 200) {
                    q(JSON.parse(r.responseText));
                } else {
                    a = U(r.getResponseHeader("WWW-Authenticate"), r.responseText);
                    if (a) H(a); else p(r.statusText);
                }
            };
            r.send();
        } else if (t[o.ErrorParam]) {
            p(t[o.ErrorParam]);
        } else {
            window.sessionStorage.setItem("login-wanted", window.location.href);
            window.location = c;
        }
    }
    function I() {
        f("error-group").style.display = "none";
        f("login-error-message").textContent = "";
    }
    function O(e, t) {
        I();
        if (e) {
            if (o) {
                p(e);
            } else {
                R(t);
                f("login-error-message").textContent = e;
                f("error-group").style.display = "block";
            }
        }
    }
    function C(e) {
        var t = f("server-field").value;
        if (!t) {
            O(e, false);
        } else {
            I();
            f("login-error-message").textContent = e;
            f("error-group").style.display = "block";
            b(null, true);
            R();
        }
    }
    function E(e) {
        var t = f("login-note");
        if (e) {
            t.style.display = "block";
            t.textContent = e;
        } else {
            t.innerHTML = "&nbsp;";
        }
    }
    function L() {
        O(null);
        var e, t = h(f("login-user-input").value);
        if (t === "") {
            O("User name cannot be empty");
        } else {
            e = f("server-field").value;
            if (e) {
                a = "cockpit+=" + e;
                i = r.replace("/" + s + "/", "/" + a + "/");
            } else {
                a = s;
                i = r;
            }
            f("server-name").textContent = e || n.hostname;
            f("login-button").removeEventListener("click", L);
            var o = f("authorized-input").checked ? "password" : "";
            var l = f("login-password-input").value;
            window.localStorage.setItem("authorized-default", o);
            var c = {
                Authorization: "Basic " + window.btoa(N(t + ":" + l)),
                "X-Authorize": o
            };
            z("GET", c, false);
        }
    }
    function R(e) {
        var t = n.page.connect;
        var o = f("option-group").getAttribute("data-state");
        f("login-wait-validating").style.display = "none";
        f("login").style.visibility = "visible";
        f("login").style.display = "block";
        f("user-group").style.display = e ? "none" : "block";
        f("password-group").style.display = e ? "none" : "block";
        f("option-group").style.display = !t || e ? "none" : "block";
        f("conversation-group").style.display = e ? "block" : "none";
        f("login-button-text").textContent = "Log In";
        f("login-password-input").value = "";
        if (!t || e) {
            f("server-group").style.display = "none";
        } else {
            f("server-group").style.display = o ? "block" : "none";
        }
        f("login-button").removeAttribute("disabled");
        if (!e) f("login-button").addEventListener("click", L);
    }
    function A() {
        f("server-name").textContent = document.title;
        E("Log in with your server user account.");
        f("login-user-input").addEventListener("keydown", function(e) {
            O(null);
            if (e.which == 13) f("login-password-input").focus();
        }, false);
        f("login-password-input").addEventListener("keydown", function(e) {
            O(null);
            if (e.which == 13) L();
        });
        R();
        f("login-user-input").focus();
        phantom_checkpoint();
    }
    function H(e) {
        var t = e.echo ? "text" : "password";
        f("conversation-prompt").textContent = e.prompt;
        var n = f("conversation-message");
        var o = e.error || e.message;
        if (o) {
            n.textContent = o;
            n.style.display = "block";
        } else {
            n.style.display = "none";
        }
        var i = f("conversation-input");
        i.value = "";
        if (e.default) i.value = e.default;
        i.setAttribute("type", t);
        i.focus();
        O("");
        function a() {
            f("conversation-input").removeEventListener("keydown", r);
            f("login-button").removeEventListener("click", a);
            O(null, true);
            P(e.id, f("conversation-input").value);
        }
        function r(e) {
            O(null, true);
            if (e.which == 13) {
                a();
            }
        }
        f("conversation-input").addEventListener("keydown", r);
        f("login-button").addEventListener("click", a);
        R(true);
        phantom_checkpoint();
    }
    function N(e) {
        return window.unescape(encodeURIComponent(e));
    }
    function U(t, n) {
        var o;
        var i;
        var a;
        var r;
        if (!t) return null;
        o = t.split(" ");
        if (o[0].toLowerCase() !== "x-conversation" && o.length != 3) return null;
        r = o[1];
        try {
            i = window.atob(o[2]);
        } catch (s) {
            if (window.console) e.error("Invalid prompt data", s);
            return null;
        }
        try {
            a = JSON.parse(n);
        } catch (s) {
            if (window.console) e.log("Got invalid JSON response for prompt data", s);
            a = {};
        }
        a.id = r;
        a.prompt = i;
        return a;
    }
    function z(t, n, o) {
        f("login-button").setAttribute("disabled", "true");
        var a = new XMLHttpRequest();
        a.open("GET", i, true);
        var r;
        var s;
        var l;
        for (l in n) a.setRequestHeader(l, n[l]);
        a.onreadystatechange = function() {
            if (a.readyState != 4) {
                return;
            } else if (a.status == 200) {
                var t = JSON.parse(a.responseText);
                q(t);
            } else if (a.status == 401) {
                s = a.getResponseHeader("WWW-Authenticate");
                if (s && s.toLowerCase().indexOf("x-conversation") === 0) {
                    r = U(s, a.responseText);
                    if (r) H(r); else p("Internal Error: Invalid challenge header");
                } else {
                    if (window.console) e.log(a.statusText);
                    if (a.statusText.indexOf("authentication-not-supported") > -1) {
                        var n = h(f("login-user-input").value);
                        p("The server refused to authenticate '" + n + "' using password authentication, and no other supported authentication methods are available.");
                    } else if (a.statusText.indexOf("terminated") > -1) {
                        O("Authentication Failed: Server closed connection");
                    } else if (a.statusText.indexOf("no-host") > -1) {
                        C("Unable to connect to that address");
                    } else if (a.statusText.indexOf("unknown-hostkey") > -1) {
                        C("Refusing to connect. Hostkey is unknown");
                    } else if (a.statusText.indexOf("unknown-host") > -1) {
                        C("Refusing to connect. Host is unknown");
                    } else if (a.statusText.indexOf("invalid-hostkey") > -1) {
                        C("Refusing to connect. Hostkey does not match");
                    } else if (o) {
                        O("Authentication failed");
                    } else {
                        O("Wrong user name or password");
                    }
                }
            } else if (a.status == 403) {
                O(decodeURIComponent(a.statusText) || "Permission denied");
            } else if (a.statusText) {
                p(decodeURIComponent(a.statusText));
            } else {
                p(a.status + " error");
            }
            f("login-button").removeAttribute("disabled");
            phantom_checkpoint();
        };
        a.send();
    }
    function P(e, t) {
        var n = {
            Authorization: "X-Conversation " + e + " " + window.btoa(N(t))
        };
        z("GET", n, true);
    }
    function _(e) {
        if (e && e != window.location.href) window.location = e;
        window.setTimeout(function() {
            window.location.reload(true);
        }, 100);
    }
    function J(e) {
        var n = "/" + a + "/@localhost/";
        if (t) n = "/" + t + n;
        var o = n + "shell/index.html";
        var i = new XMLHttpRequest();
        i.open("GET", n + "manifests.json", true);
        i.onreadystatechange = function() {
            if (i.readyState != 4) {
                return;
            } else if (i.status == 200) {
                var t = JSON.parse(i.responseText);
                var n = t ? t["base1"] : {};
                if (!n["version"] || n["version"] < "119.x") {
                    _(o);
                } else _(e);
            } else {
                _(o);
            }
            phantom_checkpoint();
        };
        i.send();
    }
    function W(e, t, n) {
        var o = 0;
        while (o < e.length) {
            var i = e.key(o);
            if (n && i.indexOf("cockpit") !== 0) e.removeItem(i); else if (i.indexOf(t) === 0) e.removeItem(i); else o++;
        }
    }
    function M(n) {
        W(window.sessionStorage, a, true);
        window.localStorage.removeItem("login-data");
        W(window.localStorage, a, false);
        var o;
        if (n && n["login-data"]) {
            o = JSON.stringify(n["login-data"]);
            try {
                window.localStorage.setItem(a + "login-data", o);
                window.localStorage.setItem("login-data", o);
            } catch (i) {
                e.warn("Error storing login-data:", i);
            }
        }
        if (t) window.localStorage.setItem("url-root", t);
    }
    function q(e) {
        var n = window.sessionStorage.getItem("login-wanted");
        var o = f("server-field").value;
        var i;
        if (o && a != s) {
            n = "/=" + o;
            if (t) n = "/" + t + n;
        }
        W(window.sessionStorage, a, false);
        M(e);
        if (a.indexOf("cockpit+=") === 0) {
            J(n);
        } else {
            _(n);
        }
    }
    window.onload = k;
})(window.console);
//# sourceMappingURL=login.min.js.map
