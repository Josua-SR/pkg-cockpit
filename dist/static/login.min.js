/* global XMLHttpRequest */
(function(a) {
    var r;
    /* Some browsers fail localStorage access due to corruption, preventing Cockpit login */    try {
        r = window.localStorage;
        window.localStorage.removeItem("url-root");
    } catch (e) {
        r = window.sessionStorage;
        a.warn(String(e));
    }
    var s;
    var l = window.environment || {};
    var u = l.OAuth || null;
    if (u) {
        if (!u.TokenParam) u.TokenParam = "access_token";
        if (!u.ErrorParam) u.ErrorParam = "error_description";
    }
    var t = /\$\{([^}]+)\}|\$([a-zA-Z0-9_]+)/g;
    function c(e /* ... */) {
        var o = Array.prototype.slice.call(arguments, 1);
        return e.replace(t, function(e, t, n) {
            return o[t || n] || "";
        });
    }
    function n(e) {
        if (window.cockpit_po) {
            var t = window.cockpit_po[e];
            if (t && t[1]) return t[1];
        }
        return e;
    }
    function i() {
        if (!document.querySelectorAll) return;
        var e = document.querySelectorAll("[translate]");
        for (var t = 0; t < e.length; t++) e[t].textContent = n(e[t].textContent);
    }
    var d = n;
    var f, p, w, v;
    var o = /[?&]?([^=]+)=([^&]*)/g;
    var g = null;
    function y(e) {
        e = e.split("+").join(" ");
        var t = {};
        var n;
        for (;;) {
            n = o.exec(e);
            if (!n) break;
            t[decodeURIComponent(n[1])] = decodeURIComponent(n[2]);
        }
        return t;
    }
    if (!a) a = function() {};
    function m(e) {
        return document.getElementById(e);
    }
    function h(e) {
        if (window.console) a.warn("fatal:", e);
        m("login-again").style.display = "none";
        m("login-wait-validating").style.display = "none";
        if (g) {
            m("login-again").href = g;
            m("login-again").style.display = "block";
        }
        m("login").style.display = "none";
        m("login-details").style.display = "none";
        m("login-fatal").style.display = "block";
        var t = m("login-fatal-message");
        t.textContent = "";
        t.appendChild(document.createTextNode(e));
    }
    function b(e, t) {
        var n;
        var o = m(e);
        if (o && window.getComputedStyle) n = window.getComputedStyle(o, ":before");
        if (!n) return;
        var i;
        var r = n.content;
        if (r && r != "none" && r != "normal") {
            i = r.length;
            if ((r[0] === '"' || r[0] === "'") && i > 2 && r[i - 1] === r[0]) r = r.substr(1, i - 2);
            o.innerHTML = r || t;
        } else {
            o.removeAttribute("class");
        }
    }
    function k() {
        function o(e) {
            if (window.console) a.warn(c(d("This web browser is too old to run Cockpit (missing $0)"), e));
            m("login").style.display = "none";
            m("login-details").style.display = "none";
            m("unsupported-browser").style.display = "block";
            document.body.className += " brand-unsupported-browser";
        }
        function e(t, e) {
            var n;
            try {
                n = e[t];
            } catch (e) {
                h(c(d("The web browser configuration prevents Cockpit from running (inaccessible $0)"), t));
                throw e;
            }
            if (n === undefined) {
                o();
                return false;
            }
            return true;
        }
        function t() {
            /*
             * Be certain to use parenthesis when checking CSS strings
             * as Edge is oddly particular.
             *
             * Instead of "display: inline", use:
             * "(display: inline)"
             *        or
             * "display", "inline"
             */
            var e = [].join.call(arguments, ": ");
            if (!window.CSS.supports.apply(this, arguments)) {
                h(c(d("The web browser configuration prevents Cockpit from running (inaccessible $0)"), e));
                o(e);
                return false;
            }
            return true;
        }
        return ("MozWebSocket" in window || e("WebSocket", window)) && e("XMLHttpRequest", window) && e("sessionStorage", window) && e("JSON", window) && e("defineProperty", Object) && e("console", window) && e("pushState", window.history) && e("textContent", document) && e("CSS", window) && e("supports", window.CSS) && t("display", "flex") && t("display", "grid");
    }
    function x(e) {
        return e.replace(/^\s+|\s+$/g, "");
    }
    /* Sets values for application, url_root and login_path */    function S(e) {
        var t = document.createElement("a");
        var n = document.baseURI;
        var o;
        /* Some IEs don't support baseURI */        if (!n) {
            o = document.getElementsByTagName("base");
            if (o.length > 0) n = o[0].href; else n = "/";
        }
        e = e || "/";
        t.href = n;
        if (t.pathname != "/") {
            s = t.pathname.replace(/^\/+|\/+$/g, "");
            r.setItem("url-root", s);
            if (s && e.indexOf("/" + s) === 0) e = e.replace("/" + s, "") || "/";
        }
        if (e.indexOf("/=") === 0) {
            l.hostname = e.substring(2);
            e = "/cockpit+" + e.split("/")[1];
        } else if (e.indexOf("/cockpit/") !== 0 && e.indexOf("/cockpit+") !== 0) {
            e = "/cockpit";
        }
        p = e.split("/")[1];
        f = "/" + p + "/login";
        if (s) f = "/" + s + f;
        v = p;
        w = f;
    }
    function T(e, t) {
        // On keypress, only accept spacebar (enter acts as a click)
        if (e && e.type === "keypress" && e.key !== " ") return;
        // Stop the <a>'s click handler, otherwise it causes a page reload
                if (e && e.type === "click") e.preventDefault();
        if (t === undefined) t = m("server-group").style.display === "none";
        m("option-group").setAttribute("data-state", t);
        if (t) {
            m("server-group").style.display = "block";
            m("option-caret").setAttribute("class", "caret caret-down");
            m("option-caret").setAttribute("className", "caret caret-down");
        } else {
            m("server-group").style.display = "none";
            m("option-caret").setAttribute("class", "caret caret-right");
            m("option-caret").setAttribute("className", "caret caret-right");
        }
    }
    function e() {
        window.onload = null;
        i();
        S(window.location.pathname);
        /* Determine if we are nested or not, and switch styles */        if (window.location.pathname.indexOf("/" + s + "/cockpit/") === 0 || window.location.pathname.indexOf("/" + s + "/cockpit+") === 0) document.documentElement.setAttribute("class", "inline");
        // Setup title
                var e = l.page.title;
        if (!e || p.indexOf("cockpit+=") === 0) e = l.hostname;
        document.title = e;
        if (p.indexOf("cockpit+=") === 0) {
            m("brand").style.display = "none";
            m("badge").style.visibility = "hidden";
        } else {
            b("badge", "");
            b("brand", "Cockpit");
        }
        if (!k()) return;
        m("show-other-login-options").addEventListener("click", T);
        m("show-other-login-options").addEventListener("keypress", T);
        m("server-clear").addEventListener("click", function() {
            var e = m("server-field");
            e.value = "";
            e.focus();
        });
        /* Setup the user's last choice about the authorized button */        var t = r.getItem("authorized-default") || "";
        if (t.indexOf("password") !== -1) m("authorized-input").checked = true;
        var n = l["os-release"];
        if (n) r.setItem("os-release", JSON.stringify(n));
        var o = window.sessionStorage.getItem("logout-intent") == "explicit";
        if (o) window.sessionStorage.removeItem("logout-intent");
        /* Try automatic/kerberos authentication? */        if (u) {
            m("login-details").style.display = "none";
            m("login").style.display = "none";
            if (o) {
                O();
                m("login-again").textContent = d("Login Again");
                h(d("Logout Successful"));
            } else {
                I();
            }
        } else if (o) {
            z();
        } else {
            C();
        }
    }
    function C() {
        var e = new XMLHttpRequest();
        e.open("GET", f, true);
        e.onreadystatechange = function() {
            if (e.readyState == 4) {
                if (e.status == 200) {
                    j(JSON.parse(e.responseText));
                } else if (e.status == 401) {
                    z();
                } else if (e.statusText) {
                    h(decodeURIComponent(e.statusText));
                } else if (e.status === 0) {
                    z();
                } else {
                    h(c(d("$0 error"), e.status));
                }
            }
        };
        e.send();
    }
    function O() {
        var e = window.location.href.split("#", 2);
        g = u.URL;
        if (u.URL.indexOf("?") > -1) g += "&"; else g += "?";
        g += "redirect_uri=" + encodeURIComponent(e[0]);
    }
    function I() {
        var e = document.createElement("a");
        if (!u.URL) return h(d("Cockpit authentication is configured incorrectly."));
        var t = y(window.location.search);
        if (!window.location.search && window.location.hash) t = y(window.location.hash.slice(1));
        /* Not all providers allow hashes in redirect urls */        var n, o, i;
        O();
        if (t[u.TokenParam]) {
            if (window.sessionStorage.getItem("login-wanted")) {
                e.href = window.sessionStorage.getItem("login-wanted");
                S(e.pathname);
            }
            n = t[u.TokenParam];
            m("login-wait-validating").style.display = "block";
            i = new XMLHttpRequest();
            i.open("GET", f, true);
            i.setRequestHeader("Authorization", "Bearer " + n);
            i.onreadystatechange = function() {
                if (i.readyState == 4) {
                    if (i.status == 200) {
                        j(JSON.parse(i.responseText));
                    } else {
                        o = $(i.getResponseHeader("WWW-Authenticate"), i.responseText);
                        if (o) P(o); else h(decodeURIComponent(i.statusText));
                    }
                }
            };
            i.send();
        } else if (t[u.ErrorParam]) {
            h(t[u.ErrorParam]);
        } else {
            /* Store url we originally wanted in case we
             * had to strip a hash or query params
             */
            window.sessionStorage.setItem("login-wanted", window.location.href);
            window.location = g;
        }
    }
    function E() {
        m("error-group").style.display = "none";
        m("login-error-message").textContent = "";
    }
    function L(e, t) {
        E();
        if (e) {
            /* OAuth failures are always fatal */
            if (u) {
                h(e);
            } else {
                U(t);
                m("login-error-message").textContent = e;
                m("error-group").style.display = "block";
            }
        }
    }
    function A(e) {
        var t = m("server-field").value;
        if (!t) {
            L(e, false);
        } else {
            E();
            m("login-error-message").textContent = e;
            m("error-group").style.display = "block";
            T(null, true);
            U();
        }
    }
    function R(e) {
        var t = m("login-note");
        if (e) {
            t.style.display = "block";
            t.textContent = e;
        } else {
            t.innerHTML = "&nbsp;";
        }
    }
    function H() {
        return l.page.require_host && v.indexOf("cockpit+=") === -1;
    }
    function N() {
        L(null);
        var e;
        var t = x(m("login-user-input").value);
        if (t === "") {
            L(d("User name cannot be empty"));
        } else if (H() && m("server-field").value === "") {
            L(d("Please specify the host to connect to"));
        } else {
            e = m("server-field").value;
            if (e) {
                p = "cockpit+=" + e;
                f = w.replace("/" + v + "/", "/" + p + "/");
            } else {
                p = v;
                f = w;
            }
            m("server-name").textContent = e || l.hostname;
            m("login-button").removeEventListener("click", N);
            /* When checked we tell the server to keep authentication */            var n = m("authorized-input").checked ? "password" : "";
            var o = m("login-password-input").value;
            r.setItem("authorized-default", n);
            var i = {
                Authorization: "Basic " + window.btoa(q(t + ":" + o)),
                "X-Authorize": n
            };
            J("GET", i, false);
        }
    }
    function U(e) {
        var t = l.page.connect;
        var n = m("option-group").getAttribute("data-state");
        m("login-wait-validating").style.display = "none";
        m("login").style.visibility = "visible";
        m("login").style.display = "block";
        m("user-group").style.display = e ? "none" : "block";
        m("password-group").style.display = e ? "none" : "block";
        m("conversation-group").style.display = e ? "block" : "none";
        m("login-button-text").textContent = d("Log In");
        m("login-password-input").value = "";
        if (H()) {
            m("option-group").style.display = "none";
            n = true;
        } else {
            m("option-group").style.display = !t || e ? "none" : "block";
        }
        if (!t || e) {
            m("server-group").style.display = "none";
        } else {
            m("server-group").style.display = n ? "block" : "none";
        }
        m("login-button").removeAttribute("disabled");
        if (!e) m("login-button").addEventListener("click", N);
    }
    function z() {
        /* Show the login screen */
        m("server-name").textContent = document.title;
        R(d("Log in with your server user account."));
        m("login-user-input").addEventListener("keydown", function(e) {
            L(null);
            if (e.which == 13) m("login-password-input").focus();
        }, false);
        var e = function(e) {
            L(null);
            if (e.which == 13) N();
        };
        m("login-password-input").addEventListener("keydown", e);
        m("authorized-input").addEventListener("keydown", e);
        U();
        m("login-user-input").focus();
    }
    function P(e) {
        var t = e.echo ? "text" : "password";
        m("conversation-prompt").textContent = e.prompt;
        var n = m("conversation-message");
        var o = e.error || e.message;
        if (o) {
            n.textContent = o;
            n.style.display = "block";
        } else {
            n.style.display = "none";
        }
        var i = m("conversation-input");
        i.value = "";
        if (e["default"]) i.value = e["default"];
        i.setAttribute("type", t);
        i.focus();
        L("");
        function r() {
            m("conversation-input").removeEventListener("keydown", s);
            m("login-button").removeEventListener("click", r);
            L(null, true);
            W(e.id, m("conversation-input").value);
        }
        function s(e) {
            L(null, true);
            if (e.which == 13) {
                r();
            }
        }
        m("conversation-input").addEventListener("keydown", s);
        m("login-button").addEventListener("click", r);
        U(true);
    }
    function q(e) {
        return window.unescape(encodeURIComponent(e));
    }
    function $(e, t) {
        var n;
        var o;
        var i;
        var r;
        if (!e) return null;
        n = e.split(" ");
        if (n[0].toLowerCase() !== "x-conversation" && n.length != 3) return null;
        r = n[1];
        try {
            o = window.atob(n[2]);
        } catch (e) {
            if (window.console) a.error("Invalid prompt data", e);
            return null;
        }
        try {
            i = JSON.parse(t);
        } catch (e) {
            if (window.console) a.log("Got invalid JSON response for prompt data", e);
            i = {};
        }
        i.id = r;
        i.prompt = o;
        return i;
    }
    function J(e, t, n) {
        m("login-button").setAttribute("disabled", "true");
        var o = new XMLHttpRequest();
        o.open("GET", f, true);
        var i;
        var r;
        var s;
        for (s in t) o.setRequestHeader(s, t[s]);
        o.onreadystatechange = function() {
            if (o.readyState != 4) {
                return;
            } else if (o.status == 200) {
                var e = JSON.parse(o.responseText);
                j(e);
            } else if (o.status == 401) {
                r = o.getResponseHeader("WWW-Authenticate");
                if (r && r.toLowerCase().indexOf("x-conversation") === 0) {
                    i = $(r, o.responseText);
                    if (i) P(i); else h(d("Internal Error: Invalid challenge header"));
                } else {
                    if (window.console) a.log(o.statusText);
                    if (o.statusText.indexOf("authentication-not-supported") > -1) {
                        var t = x(m("login-user-input").value);
                        h(c(d("The server refused to authenticate '$0' using password authentication, and no other supported authentication methods are available."), t));
                    } else if (o.statusText.indexOf("terminated") > -1) {
                        L(d("Authentication Failed: Server closed connection"));
                    } else if (o.statusText.indexOf("no-host") > -1) {
                        A(d("Unable to connect to that address"));
                    } else if (o.statusText.indexOf("unknown-hostkey") > -1) {
                        A(d("Refusing to connect. Hostkey is unknown"));
                    } else if (o.statusText.indexOf("unknown-host") > -1) {
                        A(d("Refusing to connect. Host is unknown"));
                    } else if (o.statusText.indexOf("invalid-hostkey") > -1) {
                        A(d("Refusing to connect. Hostkey does not match"));
                    } else if (n) {
                        L(d("Authentication failed"));
                    } else {
                        L(d("Wrong user name or password"));
                    }
                }
            } else if (o.status == 403) {
                L(decodeURIComponent(o.statusText) || d("Permission denied"));
            } else if (o.statusText) {
                h(decodeURIComponent(o.statusText));
            } else {
                h(c(d("$0 error"), o.status));
            }
            m("login-button").removeAttribute("disabled");
        };
        o.send();
    }
    function W(e, t) {
        var n = {
            Authorization: "X-Conversation " + e + " " + window.btoa(q(t))
        };
        J("GET", n, true);
    }
    function M(e) {
        // Force a reload if not triggered below
        // because only the hash part of the url
        // changed
        var t = window.setTimeout(function() {
            t = null;
            window.location.reload(true);
        }, 100);
        if (e && e != window.location.href) window.location = e;
        // cancel forced reload if we are reloading
                window.onbeforeunload = function() {
            if (t) window.clearTimeout(t);
            t = null;
        };
    }
    function G(n) {
        var e = "/" + p + "/@localhost/";
        if (s) e = "/" + s + e;
        var o = e + "shell/index.html";
        var i = new XMLHttpRequest();
        i.open("GET", e + "manifests.json", true);
        i.onreadystatechange = function() {
            if (i.readyState == 4) {
                if (i.status == 200) {
                    var e = JSON.parse(i.responseText);
                    var t = e ? e["base1"] : {};
                    if (!t["version"] || t["version"] < "119.x") {
                        M(o);
                    } else M(n);
                } else {
                    M(o);
                }
            }
        };
        i.send();
    }
    function X(e, t, n) {
        var o = 0;
        while (o < e.length) {
            var i = e.key(o);
            if (n && i.indexOf("cockpit") !== 0) e.removeItem(i); else if (i.indexOf(t) === 0) e.removeItem(i); else o++;
        }
    }
    function _(e) {
        /* Clear anything not prefixed with
         * different application from sessionStorage
         */
        X(window.sessionStorage, p, true);
        /* Clear anything prefixed with our application
         * and login-data, but not other non-application values.
         */        r.removeItem("login-data");
        X(r, p, false);
        var t;
        if (e && e["login-data"]) {
            t = JSON.stringify(e["login-data"]);
            /* login-data is tied to the auth cookie, since
             * cookies are available after the page
             * session ends login-data should be too.
             */            r.setItem(p + "login-data", t);
            /* Backwards compatbility for packages that aren't application prefixed */            r.setItem("login-data", t);
        }
        /* URL Root is set by cockpit ws and shouldn't be prefixed
         * by application
         */        if (s) r.setItem("url-root", s);
    }
    function j(e) {
        var t = window.sessionStorage.getItem("login-wanted");
        var n = m("server-field").value;
        if (n && p != v) {
            t = "/=" + n;
            if (s) t = "/" + s + t;
        }
        /* clean up sessionStorage. clear anything that isn't prefixed
         * with an application and anything prefixed with our application.
         */        X(window.sessionStorage, p, false);
        _(e);
        /* Make sure that the base1 version is new enough to handle
         * urls that reference machines.
         */        if (p.indexOf("cockpit+=") === 0) {
            G(t);
        } else {
            M(t);
        }
    }
    window.onload = e;
})(window.console);
//# sourceMappingURL=login.min.js.map