var phantom_checkpoint = phantom_checkpoint || function() {};

(function(e) {
    var t;
    window.localStorage.removeItem("url-root");
    var n = window.environment || {};
    var o = n.OAuth || null;
    if (o) {
        if (!o.TokenParam) o.TokenParam = "access_token";
        if (!o.ErrorParam) o.ErrorParam = "error_description";
    }
    var i = /\$\{([^}]+)\}|\$([a-zA-Z0-9_]+)/g;
    function r(e) {
        var t = Array.prototype.slice.call(arguments, 1);
        return e.replace(i, function(e, n, o) {
            return t[n || o] || "";
        });
    }
    function a(e) {
        if (window.cockpit_po) {
            var t = window.cockpit_po[e];
            if (t && t[1]) return t[1];
        }
        return e;
    }
    function s() {
        if (!document.querySelectorAll) return;
        var e = document.querySelectorAll("[translate]");
        for (var t = 0; t < e.length; t++) e[t].textContent = a(e[t].textContent);
    }
    var l = a;
    var c, u, d, f;
    var p = /[?&]?([^=]+)=([^&]*)/g;
    var w = null;
    function g(e) {
        e = e.split("+").join(" ");
        var t = {};
        var n;
        for (;;) {
            n = p.exec(e);
            if (!n) break;
            t[decodeURIComponent(n[1])] = decodeURIComponent(n[2]);
        }
        return t;
    }
    function v(e) {
        e = e.trim();
        if (e[0] == '"') e = e.substr(1, e.length - 2);
        return e;
    }
    if (!e) e = function() {};
    if (window.location.pathname.indexOf("/cockpit/") === 0 || window.location.pathname.indexOf("/cockpit+") === 0) document.documentElement.setAttribute("class", "inline");
    function m(e) {
        return document.getElementById(e);
    }
    function h(t) {
        if (window.console) e.warn("fatal:", t);
        m("login-again").style.display = "none";
        m("login-wait-validating").style.display = "none";
        if (w) {
            m("login-again").href = w;
            m("login-again").style.display = "block";
        }
        m("login").style.display = "none";
        m("login-details").style.display = "none";
        m("login-fatal").style.display = "block";
        var n = m("login-fatal-message");
        n.textContent = "";
        n.appendChild(document.createTextNode(t));
    }
    function y(e, t) {
        var n, o = m(e);
        if (o) n = window.getComputedStyle(o, ":before");
        if (!n) return;
        var i, r = n.content;
        if (r && r != "none" && r != "normal") {
            i = r.length;
            if ((r[0] === '"' || r[0] === "'") && i > 2 && r[i - 1] === r[0]) r = r.substr(1, i - 2);
            o.innerHTML = r || t;
        } else {
            o.removeAttribute("class");
        }
    }
    function b() {
        function e(e, t) {
            var n;
            try {
                n = t[e];
            } catch (o) {
                h(r(l("The web browser configuration prevents Cockpit from running (inaccessible $0)"), e));
                throw o;
            }
            if (n === undefined) {
                h(r(l("This web browser is too old to run Cockpit (missing $0)"), e));
                return false;
            }
            return true;
        }
        return ("MozWebSocket" in window || e("WebSocket", window)) && e("XMLHttpRequest", window) && e("localStorage", window) && e("sessionStorage", window) && e("JSON", window) && e("defineProperty", Object) && e("console", window) && e("pushState", window.history) && e("textContent", document);
    }
    function k(e) {
        return e.replace(/^\s+|\s+$/g, "");
    }
    function x(e) {
        var o = document.createElement("a");
        var i = document.baseURI;
        var r;
        if (!i) {
            r = document.getElementsByTagName("base");
            if (r.length > 0) i = r[0].href; else i = "/";
        }
        e = e || "/";
        o.href = i;
        if (o.pathname != "/") {
            t = o.pathname.replace(/^\/+|\/+$/g, "");
            window.localStorage.setItem("url-root", t);
            if (t && e.indexOf("/" + t) === 0) e = e.replace("/" + t, "") || "/";
        }
        if (e.indexOf("/=") === 0) {
            n.hostname = e.substring(2);
            e = "/cockpit+" + e.split("/")[1];
        } else if (e.indexOf("/cockpit/") !== 0 && e.indexOf("/cockpit+") !== 0) {
            e = "/cockpit";
        }
        u = e.split("/")[1];
        c = "/" + u + "/login";
        if (t) c = "/" + t + c;
        f = u;
        d = c;
    }
    function S(e, t) {
        if (t === undefined) t = m("server-group").style.display === "none";
        m("option-group").setAttribute("data-state", t);
        if (t) {
            m("server-group").style.display = "block";
            m("option-caret").setAttribute("class", "caret caret-down");
            m("option-caret").setAttribute("className", "caret caret-down");
        } else {
            m("server-group").style.display = "none";
            m("option-caret").setAttribute("class", "caret caret-right");
            m("option-caret").setAttribute("className", "caret caret-right");
        }
    }
    function T() {
        window.onload = null;
        s();
        x(window.location.pathname);
        var e = n.page.title;
        if (!e) e = n.hostname;
        document.title = e;
        if (u.indexOf("cockpit+=") === 0) {
            m("brand").style.display = "none";
            m("badge").style.visibility = "hidden";
        } else {
            y("badge", "");
            y("brand", "Cockpit");
        }
        m("option-group").addEventListener("click", S);
        m("server-clear").addEventListener("click", function() {
            var e = m("server-field");
            e.value = "";
            e.focus();
        });
        if (!b()) return;
        var t = window.localStorage.getItem("authorized-default") || "";
        if (t.indexOf("password") !== -1) m("authorized-input").checked = true;
        var i = n["os-release"];
        if (i) window.localStorage.setItem("os-release", JSON.stringify(i));
        var r = window.sessionStorage.getItem("logout-intent") == "explicit";
        if (r) window.sessionStorage.removeItem("logout-intent");
        if (o) {
            m("login-details").style.display = "none";
            m("login").style.display = "none";
            if (r) {
                I();
                m("login-again").textContent = l("Login Again");
                h(l("Logout Successful"));
            } else {
                O();
            }
        } else if (r) {
            U();
        } else {
            C();
        }
    }
    function C() {
        var e = new XMLHttpRequest();
        e.open("GET", c, true);
        e.onreadystatechange = function() {
            if (e.readyState != 4) {
                return;
            } else if (e.status == 200) {
                X(JSON.parse(e.responseText));
            } else if (e.status == 401) {
                U();
            } else if (e.statusText) {
                h(decodeURIComponent(e.statusText));
            } else if (e.status === 0) {
                U();
            } else {
                h(r(l("$0 error"), e.status));
            }
        };
        e.send();
    }
    function I() {
        var e = window.location.href.split("#", 2);
        w = o.URL;
        if (o.URL.indexOf("?") > -1) w += "&"; else w += "?";
        w += "redirect_uri=" + encodeURIComponent(e[0]);
    }
    function O() {
        var e = document.createElement("a");
        if (!o.URL) return h(l("Cockpit authentication is configured incorrectly."));
        var t = g(window.location.search);
        if (!window.location.search && window.location.hash) t = g(window.location.hash.slice(1));
        var n, i, r;
        I();
        if (t[o.TokenParam]) {
            if (window.sessionStorage.getItem("login-wanted")) {
                e.href = window.sessionStorage.getItem("login-wanted");
                x(e.pathname);
            }
            n = t[o.TokenParam];
            m("login-wait-validating").style.display = "block";
            r = new XMLHttpRequest();
            r.open("GET", c, true);
            r.setRequestHeader("Authorization", "Bearer " + n);
            r.onreadystatechange = function() {
                if (r.readyState != 4) {
                    return;
                } else if (r.status == 200) {
                    X(JSON.parse(r.responseText));
                } else {
                    i = P(r.getResponseHeader("WWW-Authenticate"), r.responseText);
                    if (i) _(i); else h(r.statusText);
                }
            };
            r.send();
        } else if (t[o.ErrorParam]) {
            h(t[o.ErrorParam]);
        } else {
            window.sessionStorage.setItem("login-wanted", window.location.href);
            window.location = w;
        }
    }
    function E() {
        m("error-group").style.display = "none";
        m("login-error-message").textContent = "";
    }
    function L(e, t) {
        E();
        if (e) {
            if (o) {
                h(e);
            } else {
                N(t);
                m("login-error-message").textContent = e;
                m("error-group").style.display = "block";
            }
        }
    }
    function A(e) {
        var t = m("server-field").value;
        if (!t) {
            L(e, false);
        } else {
            E();
            m("login-error-message").textContent = e;
            m("error-group").style.display = "block";
            S(null, true);
            N();
        }
    }
    function R(e) {
        var t = m("login-note");
        if (e) {
            t.style.display = "block";
            t.textContent = e;
        } else {
            t.innerHTML = "&nbsp;";
        }
    }
    function H() {
        L(null);
        var e, t = k(m("login-user-input").value);
        if (t === "") {
            L(l("User name cannot be empty"));
        } else {
            e = m("server-field").value;
            if (e) {
                u = "cockpit+=" + e;
                c = d.replace("/" + f + "/", "/" + u + "/");
            } else {
                u = f;
                c = d;
            }
            m("server-name").textContent = e || n.hostname;
            m("login-button").removeEventListener("click", H);
            var o = m("authorized-input").checked ? "password" : "";
            var i = m("login-password-input").value;
            window.localStorage.setItem("authorized-default", o);
            var r = {
                Authorization: "Basic " + window.btoa(z(t + ":" + i)),
                "X-Authorize": o
            };
            q("GET", r, false);
        }
    }
    function N(e) {
        var t = n.page.connect;
        var o = m("option-group").getAttribute("data-state");
        m("login-wait-validating").style.display = "none";
        m("login").style.visibility = "visible";
        m("login").style.display = "block";
        m("user-group").style.display = e ? "none" : "block";
        m("password-group").style.display = e ? "none" : "block";
        m("option-group").style.display = !t || e ? "none" : "block";
        m("conversation-group").style.display = e ? "block" : "none";
        m("login-button-text").textContent = "Log In";
        m("login-password-input").value = "";
        if (!t || e) {
            m("server-group").style.display = "none";
        } else {
            m("server-group").style.display = o ? "block" : "none";
        }
        m("login-button").removeAttribute("disabled");
        if (!e) m("login-button").addEventListener("click", H);
    }
    function U() {
        m("server-name").textContent = document.title;
        R("Log in with your server user account.");
        m("login-user-input").addEventListener("keydown", function(e) {
            L(null);
            if (e.which == 13) m("login-password-input").focus();
        }, false);
        var e = function(e) {
            L(null);
            if (e.which == 13) H();
        };
        m("login-password-input").addEventListener("keydown", e);
        m("authorized-input").addEventListener("keydown", e);
        N();
        m("login-user-input").focus();
        phantom_checkpoint();
    }
    function _(e) {
        var t = e.echo ? "text" : "password";
        m("conversation-prompt").textContent = e.prompt;
        var n = m("conversation-message");
        var o = e.error || e.message;
        if (o) {
            n.textContent = o;
            n.style.display = "block";
        } else {
            n.style.display = "none";
        }
        var i = m("conversation-input");
        i.value = "";
        if (e.default) i.value = e.default;
        i.setAttribute("type", t);
        i.focus();
        L("");
        function r() {
            m("conversation-input").removeEventListener("keydown", a);
            m("login-button").removeEventListener("click", r);
            L(null, true);
            J(e.id, m("conversation-input").value);
        }
        function a(e) {
            L(null, true);
            if (e.which == 13) {
                r();
            }
        }
        m("conversation-input").addEventListener("keydown", a);
        m("login-button").addEventListener("click", r);
        N(true);
        phantom_checkpoint();
    }
    function z(e) {
        return window.unescape(encodeURIComponent(e));
    }
    function P(t, n) {
        var o;
        var i;
        var r;
        var a;
        if (!t) return null;
        o = t.split(" ");
        if (o[0].toLowerCase() !== "x-conversation" && o.length != 3) return null;
        a = o[1];
        try {
            i = window.atob(o[2]);
        } catch (s) {
            if (window.console) e.error("Invalid prompt data", s);
            return null;
        }
        try {
            r = JSON.parse(n);
        } catch (s) {
            if (window.console) e.log("Got invalid JSON response for prompt data", s);
            r = {};
        }
        r.id = a;
        r.prompt = i;
        return r;
    }
    function q(t, n, o) {
        m("login-button").setAttribute("disabled", "true");
        var i = new XMLHttpRequest();
        i.open("GET", c, true);
        var a;
        var s;
        var u;
        for (u in n) i.setRequestHeader(u, n[u]);
        i.onreadystatechange = function() {
            if (i.readyState != 4) {
                return;
            } else if (i.status == 200) {
                var t = JSON.parse(i.responseText);
                X(t);
            } else if (i.status == 401) {
                s = i.getResponseHeader("WWW-Authenticate");
                if (s && s.toLowerCase().indexOf("x-conversation") === 0) {
                    a = P(s, i.responseText);
                    if (a) _(a); else h(l("Internal Error: Invalid challenge header"));
                } else {
                    if (window.console) e.log(i.statusText);
                    if (i.statusText.indexOf("authentication-not-supported") > -1) {
                        var n = k(m("login-user-input").value);
                        h(r(l("The server refused to authenticate '$0' using password authentication, and no other supported authentication methods are available."), n));
                    } else if (i.statusText.indexOf("terminated") > -1) {
                        L(l("Authentication Failed: Server closed connection"));
                    } else if (i.statusText.indexOf("no-host") > -1) {
                        A(l("Unable to connect to that address"));
                    } else if (i.statusText.indexOf("unknown-hostkey") > -1) {
                        A(l("Refusing to connect. Hostkey is unknown"));
                    } else if (i.statusText.indexOf("unknown-host") > -1) {
                        A(l("Refusing to connect. Host is unknown"));
                    } else if (i.statusText.indexOf("invalid-hostkey") > -1) {
                        A(l("Refusing to connect. Hostkey does not match"));
                    } else if (o) {
                        L(l("Authentication failed"));
                    } else {
                        L(l("Wrong user name or password"));
                    }
                }
            } else if (i.status == 403) {
                L(decodeURIComponent(i.statusText) || l("Permission denied"));
            } else if (i.statusText) {
                h(decodeURIComponent(i.statusText));
            } else {
                h(r(l("$0 error"), i.status));
            }
            m("login-button").removeAttribute("disabled");
            phantom_checkpoint();
        };
        i.send();
    }
    function J(e, t) {
        var n = {
            Authorization: "X-Conversation " + e + " " + window.btoa(z(t))
        };
        q("GET", n, true);
    }
    function W(e) {
        var t = window.setTimeout(function() {
            t = null;
            window.location.reload(true);
        }, 100);
        if (e && e != window.location.href) window.location = e;
        window.onbeforeunload = function() {
            if (t) window.clearTimeout(t);
            t = null;
        };
    }
    function $(e) {
        var n = "/" + u + "/@localhost/";
        if (t) n = "/" + t + n;
        var o = n + "shell/index.html";
        var i = new XMLHttpRequest();
        i.open("GET", n + "manifests.json", true);
        i.onreadystatechange = function() {
            if (i.readyState != 4) {
                return;
            } else if (i.status == 200) {
                var t = JSON.parse(i.responseText);
                var n = t ? t["base1"] : {};
                if (!n["version"] || n["version"] < "119.x") {
                    W(o);
                } else W(e);
            } else {
                W(o);
            }
            phantom_checkpoint();
        };
        i.send();
    }
    function M(e, t, n) {
        var o = 0;
        while (o < e.length) {
            var i = e.key(o);
            if (n && i.indexOf("cockpit") !== 0) e.removeItem(i); else if (i.indexOf(t) === 0) e.removeItem(i); else o++;
        }
    }
    function G(n) {
        M(window.sessionStorage, u, true);
        window.localStorage.removeItem("login-data");
        M(window.localStorage, u, false);
        var o;
        if (n && n["login-data"]) {
            o = JSON.stringify(n["login-data"]);
            try {
                window.localStorage.setItem(u + "login-data", o);
                window.localStorage.setItem("login-data", o);
            } catch (i) {
                e.warn("Error storing login-data:", i);
            }
        }
        if (t) window.localStorage.setItem("url-root", t);
    }
    function X(e) {
        var n = window.sessionStorage.getItem("login-wanted");
        var o = m("server-field").value;
        var i;
        if (o && u != f) {
            n = "/=" + o;
            if (t) n = "/" + t + n;
        }
        M(window.sessionStorage, u, false);
        G(e);
        if (u.indexOf("cockpit+=") === 0) {
            $(n);
        } else {
            W(n);
        }
    }
    window.onload = T;
})(window.console);
//# sourceMappingURL=login.min.js.map
