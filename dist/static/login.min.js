(function(e) {
    var t;
    try {
        t = window.localStorage;
        window.localStorage.removeItem("url-root");
    } catch (n) {
        t = window.sessionStorage;
        e.warn(String(n));
    }
    var o;
    var i = window.environment || {};
    var r = i.OAuth || null;
    if (r) {
        if (!r.TokenParam) r.TokenParam = "access_token";
        if (!r.ErrorParam) r.ErrorParam = "error_description";
    }
    var s = /\$\{([^}]+)\}|\$([a-zA-Z0-9_]+)/g;
    function a(e) {
        var t = Array.prototype.slice.call(arguments, 1);
        return e.replace(s, function(e, n, o) {
            return t[n || o] || "";
        });
    }
    function l(e) {
        if (window.cockpit_po) {
            var t = window.cockpit_po[e];
            if (t && t[1]) return t[1];
        }
        return e;
    }
    function u() {
        if (!document.querySelectorAll) return;
        var e = document.querySelectorAll("[translate]");
        for (var t = 0; t < e.length; t++) e[t].textContent = l(e[t].textContent);
    }
    var c = l;
    var d, f, p, w;
    var v = /[?&]?([^=]+)=([^&]*)/g;
    var g = null;
    function y(e) {
        e = e.split("+").join(" ");
        var t = {};
        var n;
        for (;;) {
            n = v.exec(e);
            if (!n) break;
            t[decodeURIComponent(n[1])] = decodeURIComponent(n[2]);
        }
        return t;
    }
    if (!e) e = function() {};
    if (window.location.pathname.indexOf("/cockpit/") === 0 || window.location.pathname.indexOf("/cockpit+") === 0) document.documentElement.setAttribute("class", "inline");
    function m(e) {
        return document.getElementById(e);
    }
    function h(t) {
        if (window.console) e.warn("fatal:", t);
        m("login-again").style.display = "none";
        m("login-wait-validating").style.display = "none";
        if (g) {
            m("login-again").href = g;
            m("login-again").style.display = "block";
        }
        m("login").style.display = "none";
        m("login-details").style.display = "none";
        m("login-fatal").style.display = "block";
        var n = m("login-fatal-message");
        n.textContent = "";
        n.appendChild(document.createTextNode(t));
    }
    function b(e, t) {
        var n;
        var o = m(e);
        if (o && window.getComputedStyle) n = window.getComputedStyle(o, ":before");
        if (!n) return;
        var i;
        var r = n.content;
        if (r && r != "none" && r != "normal") {
            i = r.length;
            if ((r[0] === '"' || r[0] === "'") && i > 2 && r[i - 1] === r[0]) r = r.substr(1, i - 2);
            o.innerHTML = r || t;
        } else {
            o.removeAttribute("class");
        }
    }
    function k() {
        function t(t) {
            if (window.console) e.warn(a(c("This web browser is too old to run Cockpit (missing $0)"), t));
            m("login").style.display = "none";
            m("login-details").style.display = "none";
            m("unsupported-browser").style.display = "block";
            document.body.className += " brand-unsupported-browser";
        }
        function n(e, n) {
            var o;
            try {
                o = n[e];
            } catch (i) {
                h(a(c("The web browser configuration prevents Cockpit from running (inaccessible $0)"), e));
                throw i;
            }
            if (o === undefined) {
                t();
                return false;
            }
            return true;
        }
        function o() {
            var e = [].join.call(arguments, ": ");
            if (!window.CSS.supports.apply(this, arguments)) {
                h(a(c("The web browser configuration prevents Cockpit from running (inaccessible $0)"), e));
                t(e);
                return false;
            }
            return true;
        }
        return ("MozWebSocket" in window || n("WebSocket", window)) && n("XMLHttpRequest", window) && n("sessionStorage", window) && n("JSON", window) && n("defineProperty", Object) && n("console", window) && n("pushState", window.history) && n("textContent", document) && n("CSS", window) && n("supports", window.CSS) && o("display", "flex") && o("display", "grid");
    }
    function x(e) {
        return e.replace(/^\s+|\s+$/g, "");
    }
    function S(e) {
        var n = document.createElement("a");
        var r = document.baseURI;
        var s;
        if (!r) {
            s = document.getElementsByTagName("base");
            if (s.length > 0) r = s[0].href; else r = "/";
        }
        e = e || "/";
        n.href = r;
        if (n.pathname != "/") {
            o = n.pathname.replace(/^\/+|\/+$/g, "");
            t.setItem("url-root", o);
            if (o && e.indexOf("/" + o) === 0) e = e.replace("/" + o, "") || "/";
        }
        if (e.indexOf("/=") === 0) {
            i.hostname = e.substring(2);
            e = "/cockpit+" + e.split("/")[1];
        } else if (e.indexOf("/cockpit/") !== 0 && e.indexOf("/cockpit+") !== 0) {
            e = "/cockpit";
        }
        f = e.split("/")[1];
        d = "/" + f + "/login";
        if (o) d = "/" + o + d;
        w = f;
        p = d;
    }
    function T(e, t) {
        if (e && e.type === "keypress" && e.key !== " ") return;
        if (e && e.type === "click") e.preventDefault();
        if (t === undefined) t = m("server-group").style.display === "none";
        m("option-group").setAttribute("data-state", t);
        if (t) {
            m("server-group").style.display = "block";
            m("option-caret").setAttribute("class", "caret caret-down");
            m("option-caret").setAttribute("className", "caret caret-down");
        } else {
            m("server-group").style.display = "none";
            m("option-caret").setAttribute("class", "caret caret-right");
            m("option-caret").setAttribute("className", "caret caret-right");
        }
    }
    function C() {
        window.onload = null;
        u();
        S(window.location.pathname);
        var e = i.page.title;
        if (!e || f.indexOf("cockpit+=") === 0) e = i.hostname;
        document.title = e;
        if (f.indexOf("cockpit+=") === 0) {
            m("brand").style.display = "none";
            m("badge").style.visibility = "hidden";
        } else {
            b("badge", "");
            b("brand", "Cockpit");
        }
        if (!k()) return;
        m("show-other-login-options").addEventListener("click", T);
        m("show-other-login-options").addEventListener("keypress", T);
        m("server-clear").addEventListener("click", function() {
            var e = m("server-field");
            e.value = "";
            e.focus();
        });
        var n = t.getItem("authorized-default") || "";
        if (n.indexOf("password") !== -1) m("authorized-input").checked = true;
        var o = i["os-release"];
        if (o) t.setItem("os-release", JSON.stringify(o));
        var s = window.sessionStorage.getItem("logout-intent") == "explicit";
        if (s) window.sessionStorage.removeItem("logout-intent");
        if (r) {
            m("login-details").style.display = "none";
            m("login").style.display = "none";
            if (s) {
                I();
                m("login-again").textContent = c("Login Again");
                h(c("Logout Successful"));
            } else {
                E();
            }
        } else if (s) {
            P();
        } else {
            O();
        }
    }
    function O() {
        var e = new XMLHttpRequest();
        e.open("GET", d, true);
        e.onreadystatechange = function() {
            if (e.readyState == 4) {
                if (e.status == 200) {
                    B(JSON.parse(e.responseText));
                } else if (e.status == 401) {
                    P();
                } else if (e.statusText) {
                    h(decodeURIComponent(e.statusText));
                } else if (e.status === 0) {
                    P();
                } else {
                    h(a(c("$0 error"), e.status));
                }
            }
        };
        e.send();
    }
    function I() {
        var e = window.location.href.split("#", 2);
        g = r.URL;
        if (r.URL.indexOf("?") > -1) g += "&"; else g += "?";
        g += "redirect_uri=" + encodeURIComponent(e[0]);
    }
    function E() {
        var e = document.createElement("a");
        if (!r.URL) return h(c("Cockpit authentication is configured incorrectly."));
        var t = y(window.location.search);
        if (!window.location.search && window.location.hash) t = y(window.location.hash.slice(1));
        var n, o, i;
        I();
        if (t[r.TokenParam]) {
            if (window.sessionStorage.getItem("login-wanted")) {
                e.href = window.sessionStorage.getItem("login-wanted");
                S(e.pathname);
            }
            n = t[r.TokenParam];
            m("login-wait-validating").style.display = "block";
            i = new XMLHttpRequest();
            i.open("GET", d, true);
            i.setRequestHeader("Authorization", "Bearer " + n);
            i.onreadystatechange = function() {
                if (i.readyState == 4) {
                    if (i.status == 200) {
                        B(JSON.parse(i.responseText));
                    } else {
                        o = J(i.getResponseHeader("WWW-Authenticate"), i.responseText);
                        if (o) q(o); else h(i.statusText);
                    }
                }
            };
            i.send();
        } else if (t[r.ErrorParam]) {
            h(t[r.ErrorParam]);
        } else {
            window.sessionStorage.setItem("login-wanted", window.location.href);
            window.location = g;
        }
    }
    function L() {
        m("error-group").style.display = "none";
        m("login-error-message").textContent = "";
    }
    function A(e, t) {
        L();
        if (e) {
            if (r) {
                h(e);
            } else {
                z(t);
                m("login-error-message").textContent = e;
                m("error-group").style.display = "block";
            }
        }
    }
    function R(e) {
        var t = m("server-field").value;
        if (!t) {
            A(e, false);
        } else {
            L();
            m("login-error-message").textContent = e;
            m("error-group").style.display = "block";
            T(null, true);
            z();
        }
    }
    function H(e) {
        var t = m("login-note");
        if (e) {
            t.style.display = "block";
            t.textContent = e;
        } else {
            t.innerHTML = "&nbsp;";
        }
    }
    function N() {
        return i.page.require_host && w.indexOf("cockpit+=") === -1;
    }
    function U() {
        A(null);
        var e;
        var n = x(m("login-user-input").value);
        if (n === "") {
            A(c("User name cannot be empty"));
        } else if (N() && m("server-field").value === "") {
            A(c("Please specify the host to connect to"));
        } else {
            e = m("server-field").value;
            if (e) {
                f = "cockpit+=" + e;
                d = p.replace("/" + w + "/", "/" + f + "/");
            } else {
                f = w;
                d = p;
            }
            m("server-name").textContent = e || i.hostname;
            m("login-button").removeEventListener("click", U);
            var o = m("authorized-input").checked ? "password" : "";
            var r = m("login-password-input").value;
            t.setItem("authorized-default", o);
            var s = {
                Authorization: "Basic " + window.btoa($(n + ":" + r)),
                "X-Authorize": o
            };
            W("GET", s, false);
        }
    }
    function z(e) {
        var t = i.page.connect;
        var n = m("option-group").getAttribute("data-state");
        m("login-wait-validating").style.display = "none";
        m("login").style.visibility = "visible";
        m("login").style.display = "block";
        m("user-group").style.display = e ? "none" : "block";
        m("password-group").style.display = e ? "none" : "block";
        m("conversation-group").style.display = e ? "block" : "none";
        m("login-button-text").textContent = c("Log In");
        m("login-password-input").value = "";
        if (N()) {
            m("option-group").style.display = "none";
            n = true;
        } else {
            m("option-group").style.display = !t || e ? "none" : "block";
        }
        if (!t || e) {
            m("server-group").style.display = "none";
        } else {
            m("server-group").style.display = n ? "block" : "none";
        }
        m("login-button").removeAttribute("disabled");
        if (!e) m("login-button").addEventListener("click", U);
    }
    function P() {
        m("server-name").textContent = document.title;
        H(c("Log in with your server user account."));
        m("login-user-input").addEventListener("keydown", function(e) {
            A(null);
            if (e.which == 13) m("login-password-input").focus();
        }, false);
        var e = function(e) {
            A(null);
            if (e.which == 13) U();
        };
        m("login-password-input").addEventListener("keydown", e);
        m("authorized-input").addEventListener("keydown", e);
        z();
        m("login-user-input").focus();
    }
    function q(e) {
        var t = e.echo ? "text" : "password";
        m("conversation-prompt").textContent = e.prompt;
        var n = m("conversation-message");
        var o = e.error || e.message;
        if (o) {
            n.textContent = o;
            n.style.display = "block";
        } else {
            n.style.display = "none";
        }
        var i = m("conversation-input");
        i.value = "";
        if (e["default"]) i.value = e["default"];
        i.setAttribute("type", t);
        i.focus();
        A("");
        function r() {
            m("conversation-input").removeEventListener("keydown", s);
            m("login-button").removeEventListener("click", r);
            A(null, true);
            M(e.id, m("conversation-input").value);
        }
        function s(e) {
            A(null, true);
            if (e.which == 13) {
                r();
            }
        }
        m("conversation-input").addEventListener("keydown", s);
        m("login-button").addEventListener("click", r);
        z(true);
    }
    function $(e) {
        return window.unescape(encodeURIComponent(e));
    }
    function J(t, n) {
        var o;
        var i;
        var r;
        var s;
        if (!t) return null;
        o = t.split(" ");
        if (o[0].toLowerCase() !== "x-conversation" && o.length != 3) return null;
        s = o[1];
        try {
            i = window.atob(o[2]);
        } catch (a) {
            if (window.console) e.error("Invalid prompt data", a);
            return null;
        }
        try {
            r = JSON.parse(n);
        } catch (a) {
            if (window.console) e.log("Got invalid JSON response for prompt data", a);
            r = {};
        }
        r.id = s;
        r.prompt = i;
        return r;
    }
    function W(t, n, o) {
        m("login-button").setAttribute("disabled", "true");
        var i = new XMLHttpRequest();
        i.open("GET", d, true);
        var r;
        var s;
        var l;
        for (l in n) i.setRequestHeader(l, n[l]);
        i.onreadystatechange = function() {
            if (i.readyState != 4) {
                return;
            } else if (i.status == 200) {
                var t = JSON.parse(i.responseText);
                B(t);
            } else if (i.status == 401) {
                s = i.getResponseHeader("WWW-Authenticate");
                if (s && s.toLowerCase().indexOf("x-conversation") === 0) {
                    r = J(s, i.responseText);
                    if (r) q(r); else h(c("Internal Error: Invalid challenge header"));
                } else {
                    if (window.console) e.log(i.statusText);
                    if (i.statusText.indexOf("authentication-not-supported") > -1) {
                        var n = x(m("login-user-input").value);
                        h(a(c("The server refused to authenticate '$0' using password authentication, and no other supported authentication methods are available."), n));
                    } else if (i.statusText.indexOf("terminated") > -1) {
                        A(c("Authentication Failed: Server closed connection"));
                    } else if (i.statusText.indexOf("no-host") > -1) {
                        R(c("Unable to connect to that address"));
                    } else if (i.statusText.indexOf("unknown-hostkey") > -1) {
                        R(c("Refusing to connect. Hostkey is unknown"));
                    } else if (i.statusText.indexOf("unknown-host") > -1) {
                        R(c("Refusing to connect. Host is unknown"));
                    } else if (i.statusText.indexOf("invalid-hostkey") > -1) {
                        R(c("Refusing to connect. Hostkey does not match"));
                    } else if (o) {
                        A(c("Authentication failed"));
                    } else {
                        A(c("Wrong user name or password"));
                    }
                }
            } else if (i.status == 403) {
                A(decodeURIComponent(i.statusText) || c("Permission denied"));
            } else if (i.statusText) {
                h(decodeURIComponent(i.statusText));
            } else {
                h(a(c("$0 error"), i.status));
            }
            m("login-button").removeAttribute("disabled");
        };
        i.send();
    }
    function M(e, t) {
        var n = {
            Authorization: "X-Conversation " + e + " " + window.btoa($(t))
        };
        W("GET", n, true);
    }
    function G(e) {
        var t = window.setTimeout(function() {
            t = null;
            window.location.reload(true);
        }, 100);
        if (e && e != window.location.href) window.location = e;
        window.onbeforeunload = function() {
            if (t) window.clearTimeout(t);
            t = null;
        };
    }
    function X(e) {
        var t = "/" + f + "/@localhost/";
        if (o) t = "/" + o + t;
        var n = t + "shell/index.html";
        var i = new XMLHttpRequest();
        i.open("GET", t + "manifests.json", true);
        i.onreadystatechange = function() {
            if (i.readyState == 4) {
                if (i.status == 200) {
                    var t = JSON.parse(i.responseText);
                    var o = t ? t["base1"] : {};
                    if (!o["version"] || o["version"] < "119.x") {
                        G(n);
                    } else G(e);
                } else {
                    G(n);
                }
            }
        };
        i.send();
    }
    function _(e, t, n) {
        var o = 0;
        while (o < e.length) {
            var i = e.key(o);
            if (n && i.indexOf("cockpit") !== 0) e.removeItem(i); else if (i.indexOf(t) === 0) e.removeItem(i); else o++;
        }
    }
    function j(e) {
        _(window.sessionStorage, f, true);
        t.removeItem("login-data");
        _(t, f, false);
        var n;
        if (e && e["login-data"]) {
            n = JSON.stringify(e["login-data"]);
            t.setItem(f + "login-data", n);
            t.setItem("login-data", n);
        }
        if (o) t.setItem("url-root", o);
    }
    function B(e) {
        var t = window.sessionStorage.getItem("login-wanted");
        var n = m("server-field").value;
        if (n && f != w) {
            t = "/=" + n;
            if (o) t = "/" + o + t;
        }
        _(window.sessionStorage, f, false);
        j(e);
        if (f.indexOf("cockpit+=") === 0) {
            X(t);
        } else {
            G(t);
        }
    }
    window.onload = C;
})(window.console);
//# sourceMappingURL=login.min.js.map