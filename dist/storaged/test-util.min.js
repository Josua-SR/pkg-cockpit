!function(e) {
    function t(a) {
        if (n[a]) return n[a].exports;
        var s = n[a] = {
            exports: {},
            id: a,
            loaded: !1
        };
        return e[a].call(s.exports, s, s.exports, t), s.loaded = !0, s.exports;
    }
    var n = {};
    return t.m = e, t.c = n, t.p = "", t(0);
}({
    0: function(e, t, n) {
        "use strict";
        var a = n(6), s = n(1098);
        s.test("format_delay", function(e) {
            var t = [ [ 1555e4, "4 hours" ] ];
            e.expect(t.length);
            for (var n = 0; n < t.length; n++) e.strictEqual(a.format_delay(t[n][0]), t[n][1], "format_delay(" + t[n][0] + ") = " + t[n][1]);
        }), s.test("compare_versions", function(e) {
            function t(e) {
                return 0 === e ? 0 : e < 0 ? -1 : 1;
            }
            var n = [ [ "", "", 0 ], [ "0", "0", 0 ], [ "1", "0", 1 ], [ "0", "1", -1 ], [ "2", "1.9", 1 ], [ "2.0", "2", 1 ], [ "2.1.6", "2.5", -1 ], [ "2..6", "2.0.6", 0 ] ];
            e.expect(n.length);
            for (var s = 0; s < n.length; s++) e.strictEqual(t(a.compare_versions(n[s][0], n[s][1])), n[s][2], "compare_versions(" + n[s][0] + ", " + n[s][1] + ") = " + n[s][2]);
        }), s.test("mdraid_name_nohostnamed", function(e) {
            var t = a.hostnamed;
            a.hostnamed = {
                StaticHostname: void 0
            }, e.strictEqual(a.mdraid_name({
                Name: "somehost:mydev"
            }), "mydev", "remote host name is skipped when hostnamed is not available"), a.hostnamed = t;
        }), s.test("mdraid_name_remote", function(e) {
            var t = a.hostnamed;
            a.hostnamed = {
                StaticHostname: "sweethome"
            }, e.strictEqual(a.mdraid_name({
                Name: "somehost:mydev"
            }), "mydev (from somehost)", "expected name for remote host"), a.hostnamed = t;
        }), s.test("mdraid_name_local", function(e) {
            var t = a.hostnamed;
            a.hostnamed = {
                StaticHostname: "sweethome"
            }, e.strictEqual(a.mdraid_name({
                Name: "sweethome:mydev"
            }), "mydev", "expected name for local host"), a.hostnamed = t;
        }), a.hostnamed.wait(s.start);
    },
    3: function(e, t) {
        e.exports = cockpit;
    },
    6: function(e, t, n) {
        "use strict";
        !function() {
            function t(e, t) {
                var n = [];
                if (e.blocks_cleartext[t] && n.push(e.blocks_cleartext[t].path), e.blocks_ptable[t] && e.blocks_partitions[t].forEach(function(e) {
                    e.IsContainer || n.push(e.path);
                }), e.blocks_part[t] && e.blocks_part[t].IsContainer) {
                    var a = e.blocks_part[t].Table;
                    e.blocks_partitions[a].forEach(function(e) {
                        e.IsContained && n.push(e.path);
                    });
                }
                return e.vgroups[t] && e.vgroups_lvols[t].forEach(function(t) {
                    e.lvols_block[t.path] && n.push(e.lvols_block[t.path].path);
                }), n;
            }
            var a = n(3), s = n(7), r = n(8);
            r.locale(a.language);
            var i = a.gettext, o = a.gettext, d = {};
            d.compare_versions = function(e, t) {
                function n(e) {
                    return e.split(".").map(function(e) {
                        return e ? parseInt(e, 10) : 0;
                    });
                }
                var a, s = n(e), r = n(t), i = Math.min(s.length, r.length);
                for (a = 0; a < i; a++) if (s[a] != r[a]) return s[a] - r[a];
                return s.length - r.length;
            }, d.hostnamed = a.dbus("org.freedesktop.hostname1").proxy(), d.array_find = function(e, t) {
                for (var n = 0; n < e.length; n++) if (t(e[n])) return e[n];
            }, d.flatten = function(e) {
                return e.length > 0 ? Array.prototype.concat.apply([], e) : [];
            }, d.decode_filename = function(e) {
                return a.utf8_decoder().decode(a.base64_decode(e).slice(0, -1));
            }, d.encode_filename = function(e) {
                return a.base64_encode(a.utf8_encoder().encode(e).concat([ 0 ]));
            }, d.fmt_size = function(e) {
                return a.format_bytes(e, 1024);
            }, d.fmt_size_long = function(e) {
                var t = a.format_bytes(e, 1024), n = a.format_bytes(e, 1e3);
                return t + ", " + n + ", " + e + " " + o("format-bytes", "bytes");
            }, d.fmt_rate = function(e) {
                return a.format_bytes_per_sec(e, 1024);
            }, d.format_temperature = function(e) {
                var t = e - 273.15, n = 9 * t / 5 + 32;
                return t.toFixed(1) + "° C / " + n.toFixed(1) + "° F";
            }, d.format_fsys_usage = function(e, t) {
                var n = "", s = 1024, r = a.format_bytes(t, s, !0);
                return n = " / " + r.join(" "), s = r[1], r = a.format_bytes(e, s, !0), r[0] + n;
            }, d.format_delay = function(e) {
                return r.duration(e).humanize();
            }, d.format_size_and_text = function(e, t) {
                return a.format(i("${size} ${desc}"), {
                    size: d.fmt_size(e),
                    desc: t
                });
            }, d.validate_lvm2_name = function(e) {
                if ("" === e) return i("Name cannot be empty.");
                if (e.length > 127) return i("Name cannot be longer than 127 characters.");
                var t = e.match(/[^a-zA-Z0-9+._-]/);
                return t ? t[0].search(/\s+/) === -1 ? a.format(i("Name cannot contain the character '$0'."), t[0]) : a.format(i("Name cannot contain whitespace."), t[0]) : void 0;
            }, d.validate_fsys_label = function(e, t) {
                var n = {
                    xfs: 12,
                    ext4: 16,
                    vfat: 11,
                    ntfs: 128
                }, s = n[t.replace("luks+", "")], r = a.utf8_encoder().encode(e);
                if (s && r.length > s) return r.length == e.length ? a.format(i("Name cannot be longer than $0 characters"), s) : a.format(i("Name cannot be longer than $0 bytes"), s);
            }, d.block_name = function(e) {
                return d.decode_filename(e.PreferredDevice);
            }, d.mdraid_name = function(e) {
                if (!e.Name) return "";
                var t = e.Name.split(":");
                return 2 != t.length ? e.Name : void 0 === d.hostnamed.StaticHostname || t[0] == d.hostnamed.StaticHostname ? t[1] : a.format(i("$name (from $host)"), {
                    name: t[1],
                    host: t[0]
                });
            }, d.lvol_name = function(e) {
                var t;
                return t = i("pool" == e.Type ? "Pool for Thin Logical Volumes" : "/" != e.ThinPool ? "Thin Logical Volume" : "/" != e.Origin ? "Logical Volume (Snapshot)" : "Logical Volume"), 
                a.format('$0 "$1"', t, e.Name);
            }, d.drive_name = function(e) {
                var t = [];
                e.Vendor && t.push(e.Vendor), e.Model && t.push(e.Model);
                var n = t.join(" ");
                return e.Serial ? n += " (" + e.Serial + ")" : e.WWN && (n += " (" + e.WWN + ")"), 
                n;
            }, d.get_block_link_parts = function(e, t) {
                for (var n, s, r; ;) if (e.blocks_part[t] && e.blocks_ptable[e.blocks_part[t].Table]) n = !0, 
                t = e.blocks_part[t].Table; else {
                    if (!e.blocks[t] || !e.blocks[e.blocks[t].CryptoBackingDevice]) break;
                    s = !0, t = e.blocks[t].CryptoBackingDevice;
                }
                e.blocks_lvm2[t] && e.lvols[e.blocks_lvm2[t].LogicalVolume] && (r = !0);
                var o = e.blocks[t];
                if (o) {
                    var u, _;
                    if (e.mdraids[o.MDRaid]) u = [ "mdraid", e.mdraids[o.MDRaid].UUID ], _ = a.format(i("RAID Device $0"), d.mdraid_name(e.mdraids[o.MDRaid])); else if (e.blocks_lvm2[t] && e.lvols[e.blocks_lvm2[t].LogicalVolume] && e.vgroups[e.lvols[e.blocks_lvm2[t].LogicalVolume].VolumeGroup]) {
                        var l = e.vgroups[e.lvols[e.blocks_lvm2[t].LogicalVolume].VolumeGroup].Name;
                        u = [ "vg", l ], _ = a.format(i("Volume Group $0"), l);
                    } else {
                        var m = e.vdo_overlay.find_by_block(o);
                        m ? (u = [ "vdo", m.name ], _ = a.format(i("VDO Device $0"), m.name)) : (u = [ d.block_name(o).replace(/^\/dev\//, "") ], 
                        _ = e.drives[o.Drive] ? d.drive_name(e.drives[o.Drive]) : d.block_name(o));
                    }
                    var c;
                    return c = r && s ? i("Encrypted Logical Volume of $0") : n && s ? i("Encrypted Partition of $0") : r ? i("Logical Volume of $0") : n ? i("Partition of $0") : s ? i("Encrypted $0") : "$0", 
                    {
                        location: u,
                        format: c,
                        link: _
                    };
                }
            }, d.go_to_block = function(e, t) {
                var n = d.get_block_link_parts(e, t);
                a.location.go(n.location);
            }, d.get_partitions = function(e, t) {
                function n(t, s, r) {
                    function i(e, t) {
                        t >= 3145728 && f.push({
                            type: "free",
                            start: e,
                            size: t
                        });
                    }
                    var o, d, u, _, l, m, c = s, h = s + r, f = [];
                    for (o = 0; o < a.length; o++) d = e.blocks[a[o].path], u = a[o].Offset, _ = a[o].Size, 
                    l = a[o].IsContainer, m = a[o].IsContained, null !== d && (0 === t && m || (1 != t || m) && (u < s || u + _ > s + r || (i(c, u - c), 
                    l ? f.push({
                        type: "container",
                        block: d,
                        size: _,
                        partitions: n(t + 1, u, _)
                    }) : f.push({
                        type: "block",
                        block: d
                    }), c = u + _)));
                    return i(c, h - c), f;
                }
                var a = e.blocks_partitions[t.path];
                return n(0, 0, t.Size);
            }, d.get_available_spaces = function(e) {
                function t(t) {
                    function n() {
                        return !!r.IdUsage && !!("LVM2_member" != r.IdType || d && e.vgroups[d.VolumeGroup]);
                    }
                    function a() {
                        if (!e.drives[r.Drive]) return !1;
                        if (!e.drives_block[r.Drive]) return !0;
                        for (var t = e.drives_multipath_blocks[r.Drive], n = 0; n < t.length; n++) if (t[n] == r) return !0;
                        return !1;
                    }
                    function s() {
                        return !!e.vdo_overlay.find_by_backing_block(r);
                    }
                    var r = e.blocks[t], i = e.blocks_ptable[t], o = e.blocks_part[t], d = e.blocks_pvol[t];
                    return !(r.HintIgnore || !(r.Size > 0) || n() || a() || s() || i || o && o.IsContainer);
                }
                function n(t) {
                    var n = e.blocks[t], s = d.get_block_link_parts(e, t), r = a.format(s.format, s.link);
                    return {
                        type: "block",
                        block: n,
                        size: n.Size,
                        desc: r
                    };
                }
                function s(t) {
                    var n, s, o, u, _ = d.get_partitions(e, t);
                    for (n in _) s = _[n], "free" == s.type && (o = d.get_block_link_parts(e, t.path), 
                    u = a.format(o.format, o.link), r.push({
                        type: "free",
                        block: t,
                        start: s.start,
                        size: s.size,
                        desc: a.format(i("unpartitioned space on $0"), u)
                    }));
                }
                var r = Object.keys(e.blocks).filter(t).sort(d.make_block_path_cmp(e)).map(n);
                for (var o in e.blocks_ptable) s(e.blocks[o]);
                return r;
            }, d.prepare_available_spaces = function(e, t) {
                function n(t) {
                    if ("block" == t.type) return a.resolve(t.block.path);
                    if ("free" == t.type) {
                        var n = e.blocks_ptable[t.block.path];
                        return n.CreatePartition(t.start, t.size, "", "", {});
                    }
                }
                return a.all(t.map(n));
            }, d.block_cmp = function(e, t) {
                return e.DeviceNumber - t.DeviceNumber;
            }, d.make_block_path_cmp = function(e) {
                return function(t, n) {
                    return d.block_cmp(e.blocks[t], e.blocks[n]);
                };
            };
            var u;
            d.get_multipathd_service = function() {
                return u || (u = s.proxy("multipathd")), u;
            }, d.get_parent = function(e, t) {
                return e.blocks_part[t] && e.blocks[e.blocks_part[t].Table] ? e.blocks_part[t].Table : e.blocks[t] && e.blocks[e.blocks[t].CryptoBackingDevice] ? e.blocks[t].CryptoBackingDevice : e.blocks[t] && e.drives[e.blocks[t].Drive] ? e.blocks[t].Drive : e.blocks[t] && e.mdraids[e.blocks[t].MDRaid] ? e.blocks[t].MDRaid : e.blocks_lvm2[t] && e.lvols[e.blocks_lvm2[t].LogicalVolume] ? e.blocks_lvm2[t].LogicalVolume : e.lvols[t] && e.vgroups[e.lvols[t].VolumeGroup] ? e.lvols[t].VolumeGroup : void 0;
            }, d.get_direct_parent_blocks = function(e, t) {
                var n = d.get_parent(e, t);
                return n ? e.blocks[n] ? [ n ] : e.mdraids[n] ? e.mdraids_members[n].map(function(e) {
                    return e.path;
                }) : (e.lvols[n] && (n = e.lvols[n].VolumeGroup), e.vgroups[n] ? e.vgroups_pvols[n].map(function(e) {
                    return e.path;
                }) : []) : [];
            }, d.get_parent_blocks = function(e, t) {
                var n = d.get_direct_parent_blocks(e, t), a = d.flatten(n.map(function(t) {
                    return d.get_parent_blocks(e, t);
                }));
                return [ t ].concat(a);
            }, d.is_netdev = function(e, t) {
                var n = e.blocks[t], a = n && e.drives[n.Drive];
                return !(!a || "LIO-ORG" != a.Vendor) || !(!n || 43 != n.Major);
            }, d.get_active_usage = function(e, n) {
                function a(n) {
                    var s = e.blocks[n], r = e.blocks_fsys[n], i = s && e.mdraids[s.MDRaidMember], o = e.blocks_pvol[n], u = o && e.vgroups[o.VolumeGroup], _ = s && e.vdo_overlay.find_by_backing_block(s), l = d.flatten(t(e, n).map(a));
                    return r && r.MountPoints.length > 0 && l.push({
                        usage: "mounted",
                        block: s,
                        fsys: r
                    }), i && l.push({
                        usage: "mdraid-member",
                        block: s,
                        mdraid: i
                    }), u && l.push({
                        usage: "pvol",
                        block: s,
                        pvol: o,
                        vgroup: u
                    }), _ && l.push({
                        usage: "vdo-backing",
                        block: s,
                        vdo: _
                    }), l;
                }
                var s = a(n), r = {
                    raw: s,
                    Teardown: {
                        Mounts: [],
                        MDRaidMembers: [],
                        PhysicalVolumes: []
                    },
                    Blocking: {
                        Mounts: [],
                        MDRaidMembers: [],
                        PhysicalVolumes: [],
                        VDOs: []
                    }
                };
                return s.forEach(function(e) {
                    var t, n;
                    "mounted" == e.usage ? r.Teardown.Mounts.push({
                        Name: d.block_name(e.block),
                        MountPoint: d.decode_filename(e.fsys.MountPoints[0])
                    }) : "mdraid-member" == e.usage ? (t = {
                        Name: d.block_name(e.block),
                        MDRaid: d.mdraid_name(e.mdraid)
                    }, n = d.array_find(e.mdraid.ActiveDevices, function(t) {
                        return t[0] == e.block.path;
                    }), n && n[1] < 0 ? r.Teardown.MDRaidMembers.push(t) : r.Blocking.MDRaidMembers.push(t)) : "pvol" == e.usage ? (t = {
                        Name: d.block_name(e.block),
                        VGroup: e.vgroup.Name
                    }, e.pvol.FreeSize == e.pvol.Size ? r.Teardown.PhysicalVolumes.push(t) : r.Blocking.PhysicalVolumes.push(t)) : "vdo-backing" == e.usage && (t = {
                        Name: d.block_name(e.block),
                        VDO: e.vdo.name
                    }, r.Blocking.VDOs.push(t));
                }), r.Teardown.HasMounts = r.Teardown.Mounts.length > 0, r.Teardown.HasMDRaidMembers = r.Teardown.MDRaidMembers.length > 0, 
                r.Teardown.HasPhysicalVolumes = r.Teardown.PhysicalVolumes.length > 0, r.Teardown.HasMounts || r.Teardown.HasMDRaidMembers || r.Teardown.HasPhysicalVolumes || (r.Teardown = null), 
                r.Blocking.HasMounts = r.Blocking.Mounts.length > 0, r.Blocking.HasMDRaidMembers = r.Blocking.MDRaidMembers.length > 0, 
                r.Blocking.HasPhysicalVolumes = r.Blocking.PhysicalVolumes.length > 0, r.Blocking.HasVDOs = r.Blocking.VDOs.length > 0, 
                r.Blocking.HasMounts || r.Blocking.HasMDRaidMembers || r.Blocking.HasPhysicalVolumes || r.Blocking.HasVDOs || (r.Blocking = null), 
                r;
            }, d.teardown_active_usage = function(e, t) {
                function n(e) {
                    return a.all(e.map(function(e) {
                        return e.fsys.MountPoints.length > 0 ? e.fsys.Unmount({}) : a.resolve();
                    }));
                }
                function s(e) {
                    return a.all(e.map(function(e) {
                        return e.mdraid.RemoveDevice(e.block.path, {
                            wipe: {
                                t: "b",
                                v: !0
                            }
                        });
                    }));
                }
                function r(t) {
                    function n(t) {
                        var n = e.vgroups[t], s = r[t];
                        return s.length == e.vgroups_pvols[t].length ? n.Delete({
                            "tear-down": {
                                t: "b",
                                v: !0
                            }
                        }) : a.all(s.map(function(e) {
                            return n.RemoveDevice(e.path, !0, {});
                        }));
                    }
                    var s, r = {};
                    t.forEach(function(e) {
                        r[e.vgroup.path] || (r[e.vgroup.path] = []), r[e.vgroup.path].push(e.block);
                    });
                    for (s in r) n(s);
                }
                return a.all([ n(t.raw.filter(function(e) {
                    return "mounted" == e.usage;
                })), s(t.raw.filter(function(e) {
                    return "mdraid-member" == e.usage;
                })), r(t.raw.filter(function(e) {
                    return "pvol" == e.usage;
                })) ]);
            }, d.get_config = function(e, t) {
                if (a.manifests.storage && a.manifests.storage.config) {
                    var n = a.manifests.storage.config[e];
                    return void 0 !== n ? n : t;
                }
                return t;
            }, d.fmt_to_array = function(e, t) {
                var n = e.indexOf("$0");
                return n >= 0 ? [ e.slice(0, n), t, e.slice(n + 2) ] : [ e ];
            }, e.exports = d;
        }();
    },
    7: function(e, t, n) {
        "use strict";
        !function() {
            function t(e, t) {
                e.wait(function() {
                    e.valid && t();
                });
            }
            function a(e) {
                i || (r = o.dbus("org.freedesktop.systemd1", {
                    superuser: "try"
                }), i = r.proxy("org.freedesktop.systemd1.Manager", "/org/freedesktop/systemd1"), 
                t(i, function() {
                    i.Subscribe().fail(function(e) {
                        "org.freedesktop.systemd1.AlreadySubscribed" != e.name && "org.freedesktop.DBus.Error.FileExists" != e.name && console.warn("Subscribing to systemd signals failed", e);
                    });
                })), t(i, e);
            }
            function s(e) {
                function n() {
                    Y.exists = "not-found" != k.LoadState || "inactive" != k.ActiveState, "activating" == k.ActiveState ? Y.state = "starting" : "deactivating" == k.ActiveState ? Y.state = "stopping" : "active" == k.ActiveState || "reloading" == k.ActiveState ? Y.state = "running" : "failed" == k.ActiveState ? Y.state = "failed" : "inactive" == k.ActiveState && Y.exists ? Y.state = "stopped" : Y.state = void 0, 
                    "enabled" == k.UnitFileState || "linked" == k.UnitFileState ? Y.enabled = !0 : "disabled" == k.UnitFileState || "masked" == k.UnitFileState ? Y.enabled = !1 : Y.enabled = void 0, 
                    Y.unit = k, Y.dispatchEvent("changed"), v.resolve();
                }
                function s() {
                    Y.service = g, Y.dispatchEvent("changed");
                }
                function d() {
                    function e(e, t) {
                        r.call(e, "org.freedesktop.DBus.Properties", "GetAll", [ t ]).fail(function(e) {
                            console.log(e);
                        }).done(function(e) {
                            var n = {};
                            for (var a in e[0]) n[a] = e[0][a].v;
                            var s = {};
                            s[t] = n;
                            var i = {};
                            i[k.path] = s, r.notify(i);
                        });
                    }
                    k && g && (e(k.path, "org.freedesktop.systemd1.Unit"), e(g.path, "org.freedesktop.systemd1.Service"));
                }
                function u(t, n, a, s, r) {
                    s == e && d();
                }
                function _(e) {
                    v.promise.then(e);
                }
                function l(e, t) {
                    return r.call("/org/freedesktop/systemd1", "org.freedesktop.systemd1.Manager", e, t);
                }
                function m(e, t) {
                    var n = o.defer();
                    return l(e, t).done(function(e) {
                        var t = e[0];
                        D[t] = n;
                    }).fail(function(e) {
                        n.reject(e);
                    }), n.promise();
                }
                function c(e, t) {
                    return l(e, t).then(function() {
                        var e = o.defer();
                        return l("Reload", []).done(function() {
                            e.resolve();
                        }).fail(function(t) {
                            "org.freedesktop.DBus.Error.NoReply" === t.name ? (d(), e.resolve()) : e.reject(t);
                        }), e.promise();
                    });
                }
                function h() {
                    return m("StartUnit", [ e, "replace" ]);
                }
                function f() {
                    return m("StopUnit", [ e, "replace" ]);
                }
                function M() {
                    return m("RestartUnit", [ e, "replace" ]);
                }
                function p() {
                    return m("TryRestartUnit", [ e, "replace" ]);
                }
                function y() {
                    return c("EnableUnitFiles", [ [ e ], !1, !1 ]);
                }
                function L() {
                    return c("DisableUnitFiles", [ [ e ], !1 ]);
                }
                var Y = {
                    exists: null,
                    state: null,
                    enabled: null,
                    wait: _,
                    start: h,
                    stop: f,
                    restart: M,
                    tryRestart: p,
                    enable: y,
                    disable: L
                };
                o.event_target(Y);
                var k, g, v = o.defer();
                e.indexOf(".") == -1 && (e += ".service"), a(function() {
                    i.LoadUnit(e).done(function(e) {
                        k = r.proxy("org.freedesktop.systemd1.Unit", e), k.addEventListener("changed", n), 
                        t(k, n), g = r.proxy("org.freedesktop.systemd1.Service", e), g.addEventListener("changed", s), 
                        t(g, s);
                    }).fail(function() {
                        Y.exists = !1, Y.dispatchEvent("changed");
                    });
                }), i.addEventListener("Reloading", function(e, t) {
                    t || d();
                }), i.addEventListener("JobNew", u), i.addEventListener("JobRemoved", u);
                var D = {};
                return i.addEventListener("JobRemoved", function(e, t, n, a, s) {
                    D[n] && ("done" == s ? D[n].resolve() : D[n].reject(s), delete D[n]);
                }), Y;
            }
            var r, i, o = n(3);
            e.exports = {
                proxy: s
            };
        }();
    },
    8: function(e, t, n) {
        (function(e) {
            !function(t, n) {
                e.exports = n();
            }(this, function() {
                "use strict";
                function t() {
                    return Ha.apply(null, arguments);
                }
                function a(e) {
                    Ha = e;
                }
                function s(e) {
                    return e instanceof Array || "[object Array]" === Object.prototype.toString.call(e);
                }
                function r(e) {
                    return null != e && "[object Object]" === Object.prototype.toString.call(e);
                }
                function i(e) {
                    if (Object.getOwnPropertyNames) return 0 === Object.getOwnPropertyNames(e).length;
                    var t;
                    for (t in e) if (e.hasOwnProperty(t)) return !1;
                    return !0;
                }
                function o(e) {
                    return void 0 === e;
                }
                function d(e) {
                    return "number" == typeof e || "[object Number]" === Object.prototype.toString.call(e);
                }
                function u(e) {
                    return e instanceof Date || "[object Date]" === Object.prototype.toString.call(e);
                }
                function _(e, t) {
                    var n, a = [];
                    for (n = 0; n < e.length; ++n) a.push(t(e[n], n));
                    return a;
                }
                function l(e, t) {
                    return Object.prototype.hasOwnProperty.call(e, t);
                }
                function m(e, t) {
                    for (var n in t) l(t, n) && (e[n] = t[n]);
                    return l(t, "toString") && (e.toString = t.toString), l(t, "valueOf") && (e.valueOf = t.valueOf), 
                    e;
                }
                function c(e, t, n, a) {
                    return wt(e, t, n, a, !0).utc();
                }
                function h() {
                    return {
                        empty: !1,
                        unusedTokens: [],
                        unusedInput: [],
                        overflow: -2,
                        charsLeftOver: 0,
                        nullInput: !1,
                        invalidMonth: null,
                        invalidFormat: !1,
                        userInvalidated: !1,
                        iso: !1,
                        parsedDateParts: [],
                        meridiem: null,
                        rfc2822: !1,
                        weekdayMismatch: !1
                    };
                }
                function f(e) {
                    return null == e._pf && (e._pf = h()), e._pf;
                }
                function M(e) {
                    if (null == e._isValid) {
                        var t = f(e), n = ja.call(t.parsedDateParts, function(e) {
                            return null != e;
                        }), a = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidMonth && !t.invalidWeekday && !t.weekdayMismatch && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && n);
                        if (e._strict && (a = a && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), 
                        null != Object.isFrozen && Object.isFrozen(e)) return a;
                        e._isValid = a;
                    }
                    return e._isValid;
                }
                function p(e) {
                    var t = c(NaN);
                    return null != e ? m(f(t), e) : f(t).userInvalidated = !0, t;
                }
                function y(e, t) {
                    var n, a, s;
                    if (o(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), o(t._i) || (e._i = t._i), 
                    o(t._f) || (e._f = t._f), o(t._l) || (e._l = t._l), o(t._strict) || (e._strict = t._strict), 
                    o(t._tzm) || (e._tzm = t._tzm), o(t._isUTC) || (e._isUTC = t._isUTC), o(t._offset) || (e._offset = t._offset), 
                    o(t._pf) || (e._pf = f(t)), o(t._locale) || (e._locale = t._locale), xa.length > 0) for (n = 0; n < xa.length; n++) a = xa[n], 
                    s = t[a], o(s) || (e[a] = s);
                    return e;
                }
                function L(e) {
                    y(this, e), this._d = new Date(null != e._d ? e._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), 
                    Ea === !1 && (Ea = !0, t.updateOffset(this), Ea = !1);
                }
                function Y(e) {
                    return e instanceof L || null != e && null != e._isAMomentObject;
                }
                function k(e) {
                    return e < 0 ? Math.ceil(e) || 0 : Math.floor(e);
                }
                function g(e) {
                    var t = +e, n = 0;
                    return 0 !== t && isFinite(t) && (n = k(t)), n;
                }
                function v(e, t, n) {
                    var a, s = Math.min(e.length, t.length), r = Math.abs(e.length - t.length), i = 0;
                    for (a = 0; a < s; a++) (n && e[a] !== t[a] || !n && g(e[a]) !== g(t[a])) && i++;
                    return i + r;
                }
                function D(e) {
                    t.suppressDeprecationWarnings === !1 && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + e);
                }
                function T(e, n) {
                    var a = !0;
                    return m(function() {
                        if (null != t.deprecationHandler && t.deprecationHandler(null, e), a) {
                            for (var s, r = [], i = 0; i < arguments.length; i++) {
                                if (s = "", "object" == typeof arguments[i]) {
                                    s += "\n[" + i + "] ";
                                    for (var o in arguments[0]) s += o + ": " + arguments[0][o] + ", ";
                                    s = s.slice(0, -2);
                                } else s = arguments[i];
                                r.push(s);
                            }
                            D(e + "\nArguments: " + Array.prototype.slice.call(r).join("") + "\n" + new Error().stack), 
                            a = !1;
                        }
                        return n.apply(this, arguments);
                    }, n);
                }
                function w(e, n) {
                    null != t.deprecationHandler && t.deprecationHandler(e, n), Oa[e] || (D(n), Oa[e] = !0);
                }
                function b(e) {
                    return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e);
                }
                function S(e) {
                    var t, n;
                    for (n in e) t = e[n], b(t) ? this[n] = t : this["_" + n] = t;
                    this._config = e, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
                }
                function H(e, t) {
                    var n, a = m({}, e);
                    for (n in t) l(t, n) && (r(e[n]) && r(t[n]) ? (a[n] = {}, m(a[n], e[n]), m(a[n], t[n])) : null != t[n] ? a[n] = t[n] : delete a[n]);
                    for (n in e) l(e, n) && !l(t, n) && r(e[n]) && (a[n] = m({}, a[n]));
                    return a;
                }
                function j(e) {
                    null != e && this.set(e);
                }
                function x(e, t, n) {
                    var a = this._calendar[e] || this._calendar.sameElse;
                    return b(a) ? a.call(t, n) : a;
                }
                function E(e) {
                    var t = this._longDateFormat[e], n = this._longDateFormat[e.toUpperCase()];
                    return t || !n ? t : (this._longDateFormat[e] = n.replace(/MMMM|MM|DD|dddd/g, function(e) {
                        return e.slice(1);
                    }), this._longDateFormat[e]);
                }
                function O() {
                    return this._invalidDate;
                }
                function P(e) {
                    return this._ordinal.replace("%d", e);
                }
                function W(e, t, n, a) {
                    var s = this._relativeTime[n];
                    return b(s) ? s(e, t, n, a) : s.replace(/%d/i, e);
                }
                function A(e, t) {
                    var n = this._relativeTime[e > 0 ? "future" : "past"];
                    return b(n) ? n(t) : n.replace(/%s/i, t);
                }
                function F(e, t) {
                    var n = e.toLowerCase();
                    Ra[n] = Ra[n + "s"] = Ra[t] = e;
                }
                function N(e) {
                    return "string" == typeof e ? Ra[e] || Ra[e.toLowerCase()] : void 0;
                }
                function z(e) {
                    var t, n, a = {};
                    for (n in e) l(e, n) && (t = N(n), t && (a[t] = e[n]));
                    return a;
                }
                function C(e, t) {
                    Ia[e] = t;
                }
                function R(e) {
                    var t = [];
                    for (var n in e) t.push({
                        unit: n,
                        priority: Ia[n]
                    });
                    return t.sort(function(e, t) {
                        return e.priority - t.priority;
                    }), t;
                }
                function I(e, t, n) {
                    var a = "" + Math.abs(e), s = t - a.length, r = e >= 0;
                    return (r ? n ? "+" : "" : "-") + Math.pow(10, Math.max(0, s)).toString().substr(1) + a;
                }
                function J(e, t, n, a) {
                    var s = a;
                    "string" == typeof a && (s = function() {
                        return this[a]();
                    }), e && (Va[e] = s), t && (Va[t[0]] = function() {
                        return I(s.apply(this, arguments), t[1], t[2]);
                    }), n && (Va[n] = function() {
                        return this.localeData().ordinal(s.apply(this, arguments), e);
                    });
                }
                function q(e) {
                    return e.match(/\[[\s\S]/) ? e.replace(/^\[|\]$/g, "") : e.replace(/\\/g, "");
                }
                function U(e) {
                    var t, n, a = e.match(Ja);
                    for (t = 0, n = a.length; t < n; t++) Va[a[t]] ? a[t] = Va[a[t]] : a[t] = q(a[t]);
                    return function(t) {
                        var s, r = "";
                        for (s = 0; s < n; s++) r += b(a[s]) ? a[s].call(t, e) : a[s];
                        return r;
                    };
                }
                function V(e, t) {
                    return e.isValid() ? (t = G(t, e.localeData()), Ua[t] = Ua[t] || U(t), Ua[t](e)) : e.localeData().invalidDate();
                }
                function G(e, t) {
                    function n(e) {
                        return t.longDateFormat(e) || e;
                    }
                    var a = 5;
                    for (qa.lastIndex = 0; a >= 0 && qa.test(e); ) e = e.replace(qa, n), qa.lastIndex = 0, 
                    a -= 1;
                    return e;
                }
                function B(e, t, n) {
                    _s[e] = b(t) ? t : function(e, a) {
                        return e && n ? n : t;
                    };
                }
                function $(e, t) {
                    return l(_s, e) ? _s[e](t._strict, t._locale) : new RegExp(Q(e));
                }
                function Q(e) {
                    return K(e.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(e, t, n, a, s) {
                        return t || n || a || s;
                    }));
                }
                function K(e) {
                    return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
                }
                function Z(e, t) {
                    var n, a = t;
                    for ("string" == typeof e && (e = [ e ]), d(t) && (a = function(e, n) {
                        n[t] = g(e);
                    }), n = 0; n < e.length; n++) ls[e[n]] = a;
                }
                function X(e, t) {
                    Z(e, function(e, n, a, s) {
                        a._w = a._w || {}, t(e, a._w, a, s);
                    });
                }
                function ee(e, t, n) {
                    null != t && l(ls, e) && ls[e](t, n._a, n, e);
                }
                function te(e) {
                    return ne(e) ? 366 : 365;
                }
                function ne(e) {
                    return e % 4 === 0 && e % 100 !== 0 || e % 400 === 0;
                }
                function ae() {
                    return ne(this.year());
                }
                function se(e, n) {
                    return function(a) {
                        return null != a ? (ie(this, e, a), t.updateOffset(this, n), this) : re(this, e);
                    };
                }
                function re(e, t) {
                    return e.isValid() ? e._d["get" + (e._isUTC ? "UTC" : "") + t]() : NaN;
                }
                function ie(e, t, n) {
                    e.isValid() && !isNaN(n) && ("FullYear" === t && ne(e.year()) && 1 === e.month() && 29 === e.date() ? e._d["set" + (e._isUTC ? "UTC" : "") + t](n, e.month(), _e(n, e.month())) : e._d["set" + (e._isUTC ? "UTC" : "") + t](n));
                }
                function oe(e) {
                    return e = N(e), b(this[e]) ? this[e]() : this;
                }
                function de(e, t) {
                    if ("object" == typeof e) {
                        e = z(e);
                        for (var n = R(e), a = 0; a < n.length; a++) this[n[a].unit](e[n[a].unit]);
                    } else if (e = N(e), b(this[e])) return this[e](t);
                    return this;
                }
                function ue(e, t) {
                    return (e % t + t) % t;
                }
                function _e(e, t) {
                    if (isNaN(e) || isNaN(t)) return NaN;
                    var n = ue(t, 12);
                    return e += (t - n) / 12, 1 === n ? ne(e) ? 29 : 28 : 31 - n % 7 % 2;
                }
                function le(e, t) {
                    return e ? s(this._months) ? this._months[e.month()] : this._months[(this._months.isFormat || vs).test(t) ? "format" : "standalone"][e.month()] : s(this._months) ? this._months : this._months.standalone;
                }
                function me(e, t) {
                    return e ? s(this._monthsShort) ? this._monthsShort[e.month()] : this._monthsShort[vs.test(t) ? "format" : "standalone"][e.month()] : s(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
                }
                function ce(e, t, n) {
                    var a, s, r, i = e.toLocaleLowerCase();
                    if (!this._monthsParse) for (this._monthsParse = [], this._longMonthsParse = [], 
                    this._shortMonthsParse = [], a = 0; a < 12; ++a) r = c([ 2e3, a ]), this._shortMonthsParse[a] = this.monthsShort(r, "").toLocaleLowerCase(), 
                    this._longMonthsParse[a] = this.months(r, "").toLocaleLowerCase();
                    return n ? "MMM" === t ? (s = ks.call(this._shortMonthsParse, i), s !== -1 ? s : null) : (s = ks.call(this._longMonthsParse, i), 
                    s !== -1 ? s : null) : "MMM" === t ? (s = ks.call(this._shortMonthsParse, i), s !== -1 ? s : (s = ks.call(this._longMonthsParse, i), 
                    s !== -1 ? s : null)) : (s = ks.call(this._longMonthsParse, i), s !== -1 ? s : (s = ks.call(this._shortMonthsParse, i), 
                    s !== -1 ? s : null));
                }
                function he(e, t, n) {
                    var a, s, r;
                    if (this._monthsParseExact) return ce.call(this, e, t, n);
                    for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), 
                    a = 0; a < 12; a++) {
                        if (s = c([ 2e3, a ]), n && !this._longMonthsParse[a] && (this._longMonthsParse[a] = new RegExp("^" + this.months(s, "").replace(".", "") + "$", "i"), 
                        this._shortMonthsParse[a] = new RegExp("^" + this.monthsShort(s, "").replace(".", "") + "$", "i")), 
                        n || this._monthsParse[a] || (r = "^" + this.months(s, "") + "|^" + this.monthsShort(s, ""), 
                        this._monthsParse[a] = new RegExp(r.replace(".", ""), "i")), n && "MMMM" === t && this._longMonthsParse[a].test(e)) return a;
                        if (n && "MMM" === t && this._shortMonthsParse[a].test(e)) return a;
                        if (!n && this._monthsParse[a].test(e)) return a;
                    }
                }
                function fe(e, t) {
                    var n;
                    if (!e.isValid()) return e;
                    if ("string" == typeof t) if (/^\d+$/.test(t)) t = g(t); else if (t = e.localeData().monthsParse(t), 
                    !d(t)) return e;
                    return n = Math.min(e.date(), _e(e.year(), t)), e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, n), 
                    e;
                }
                function Me(e) {
                    return null != e ? (fe(this, e), t.updateOffset(this, !0), this) : re(this, "Month");
                }
                function pe() {
                    return _e(this.year(), this.month());
                }
                function ye(e) {
                    return this._monthsParseExact ? (l(this, "_monthsRegex") || Ye.call(this), e ? this._monthsShortStrictRegex : this._monthsShortRegex) : (l(this, "_monthsShortRegex") || (this._monthsShortRegex = ws), 
                    this._monthsShortStrictRegex && e ? this._monthsShortStrictRegex : this._monthsShortRegex);
                }
                function Le(e) {
                    return this._monthsParseExact ? (l(this, "_monthsRegex") || Ye.call(this), e ? this._monthsStrictRegex : this._monthsRegex) : (l(this, "_monthsRegex") || (this._monthsRegex = bs), 
                    this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex);
                }
                function Ye() {
                    function e(e, t) {
                        return t.length - e.length;
                    }
                    var t, n, a = [], s = [], r = [];
                    for (t = 0; t < 12; t++) n = c([ 2e3, t ]), a.push(this.monthsShort(n, "")), s.push(this.months(n, "")), 
                    r.push(this.months(n, "")), r.push(this.monthsShort(n, ""));
                    for (a.sort(e), s.sort(e), r.sort(e), t = 0; t < 12; t++) a[t] = K(a[t]), s[t] = K(s[t]);
                    for (t = 0; t < 24; t++) r[t] = K(r[t]);
                    this._monthsRegex = new RegExp("^(" + r.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, 
                    this._monthsStrictRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + a.join("|") + ")", "i");
                }
                function ke(e, t, n, a, s, r, i) {
                    var o = new Date(e, t, n, a, s, r, i);
                    return e < 100 && e >= 0 && isFinite(o.getFullYear()) && o.setFullYear(e), o;
                }
                function ge(e) {
                    var t = new Date(Date.UTC.apply(null, arguments));
                    return e < 100 && e >= 0 && isFinite(t.getUTCFullYear()) && t.setUTCFullYear(e), 
                    t;
                }
                function ve(e, t, n) {
                    var a = 7 + t - n, s = (7 + ge(e, 0, a).getUTCDay() - t) % 7;
                    return -s + a - 1;
                }
                function De(e, t, n, a, s) {
                    var r, i, o = (7 + n - a) % 7, d = ve(e, a, s), u = 1 + 7 * (t - 1) + o + d;
                    return u <= 0 ? (r = e - 1, i = te(r) + u) : u > te(e) ? (r = e + 1, i = u - te(e)) : (r = e, 
                    i = u), {
                        year: r,
                        dayOfYear: i
                    };
                }
                function Te(e, t, n) {
                    var a, s, r = ve(e.year(), t, n), i = Math.floor((e.dayOfYear() - r - 1) / 7) + 1;
                    return i < 1 ? (s = e.year() - 1, a = i + we(s, t, n)) : i > we(e.year(), t, n) ? (a = i - we(e.year(), t, n), 
                    s = e.year() + 1) : (s = e.year(), a = i), {
                        week: a,
                        year: s
                    };
                }
                function we(e, t, n) {
                    var a = ve(e, t, n), s = ve(e + 1, t, n);
                    return (te(e) - a + s) / 7;
                }
                function be(e) {
                    return Te(e, this._week.dow, this._week.doy).week;
                }
                function Se() {
                    return this._week.dow;
                }
                function He() {
                    return this._week.doy;
                }
                function je(e) {
                    var t = this.localeData().week(this);
                    return null == e ? t : this.add(7 * (e - t), "d");
                }
                function xe(e) {
                    var t = Te(this, 1, 4).week;
                    return null == e ? t : this.add(7 * (e - t), "d");
                }
                function Ee(e, t) {
                    return "string" != typeof e ? e : isNaN(e) ? (e = t.weekdaysParse(e), "number" == typeof e ? e : null) : parseInt(e, 10);
                }
                function Oe(e, t) {
                    return "string" == typeof e ? t.weekdaysParse(e) % 7 || 7 : isNaN(e) ? null : e;
                }
                function Pe(e, t) {
                    return e ? s(this._weekdays) ? this._weekdays[e.day()] : this._weekdays[this._weekdays.isFormat.test(t) ? "format" : "standalone"][e.day()] : s(this._weekdays) ? this._weekdays : this._weekdays.standalone;
                }
                function We(e) {
                    return e ? this._weekdaysShort[e.day()] : this._weekdaysShort;
                }
                function Ae(e) {
                    return e ? this._weekdaysMin[e.day()] : this._weekdaysMin;
                }
                function Fe(e, t, n) {
                    var a, s, r, i = e.toLocaleLowerCase();
                    if (!this._weekdaysParse) for (this._weekdaysParse = [], this._shortWeekdaysParse = [], 
                    this._minWeekdaysParse = [], a = 0; a < 7; ++a) r = c([ 2e3, 1 ]).day(a), this._minWeekdaysParse[a] = this.weekdaysMin(r, "").toLocaleLowerCase(), 
                    this._shortWeekdaysParse[a] = this.weekdaysShort(r, "").toLocaleLowerCase(), this._weekdaysParse[a] = this.weekdays(r, "").toLocaleLowerCase();
                    return n ? "dddd" === t ? (s = ks.call(this._weekdaysParse, i), s !== -1 ? s : null) : "ddd" === t ? (s = ks.call(this._shortWeekdaysParse, i), 
                    s !== -1 ? s : null) : (s = ks.call(this._minWeekdaysParse, i), s !== -1 ? s : null) : "dddd" === t ? (s = ks.call(this._weekdaysParse, i), 
                    s !== -1 ? s : (s = ks.call(this._shortWeekdaysParse, i), s !== -1 ? s : (s = ks.call(this._minWeekdaysParse, i), 
                    s !== -1 ? s : null))) : "ddd" === t ? (s = ks.call(this._shortWeekdaysParse, i), 
                    s !== -1 ? s : (s = ks.call(this._weekdaysParse, i), s !== -1 ? s : (s = ks.call(this._minWeekdaysParse, i), 
                    s !== -1 ? s : null))) : (s = ks.call(this._minWeekdaysParse, i), s !== -1 ? s : (s = ks.call(this._weekdaysParse, i), 
                    s !== -1 ? s : (s = ks.call(this._shortWeekdaysParse, i), s !== -1 ? s : null)));
                }
                function Ne(e, t, n) {
                    var a, s, r;
                    if (this._weekdaysParseExact) return Fe.call(this, e, t, n);
                    for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], 
                    this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), a = 0; a < 7; a++) {
                        if (s = c([ 2e3, 1 ]).day(a), n && !this._fullWeekdaysParse[a] && (this._fullWeekdaysParse[a] = new RegExp("^" + this.weekdays(s, "").replace(".", "\\.?") + "$", "i"), 
                        this._shortWeekdaysParse[a] = new RegExp("^" + this.weekdaysShort(s, "").replace(".", "\\.?") + "$", "i"), 
                        this._minWeekdaysParse[a] = new RegExp("^" + this.weekdaysMin(s, "").replace(".", "\\.?") + "$", "i")), 
                        this._weekdaysParse[a] || (r = "^" + this.weekdays(s, "") + "|^" + this.weekdaysShort(s, "") + "|^" + this.weekdaysMin(s, ""), 
                        this._weekdaysParse[a] = new RegExp(r.replace(".", ""), "i")), n && "dddd" === t && this._fullWeekdaysParse[a].test(e)) return a;
                        if (n && "ddd" === t && this._shortWeekdaysParse[a].test(e)) return a;
                        if (n && "dd" === t && this._minWeekdaysParse[a].test(e)) return a;
                        if (!n && this._weekdaysParse[a].test(e)) return a;
                    }
                }
                function ze(e) {
                    if (!this.isValid()) return null != e ? this : NaN;
                    var t = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                    return null != e ? (e = Ee(e, this.localeData()), this.add(e - t, "d")) : t;
                }
                function Ce(e) {
                    if (!this.isValid()) return null != e ? this : NaN;
                    var t = (this.day() + 7 - this.localeData()._week.dow) % 7;
                    return null == e ? t : this.add(e - t, "d");
                }
                function Re(e) {
                    if (!this.isValid()) return null != e ? this : NaN;
                    if (null != e) {
                        var t = Oe(e, this.localeData());
                        return this.day(this.day() % 7 ? t : t - 7);
                    }
                    return this.day() || 7;
                }
                function Ie(e) {
                    return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ue.call(this), e ? this._weekdaysStrictRegex : this._weekdaysRegex) : (l(this, "_weekdaysRegex") || (this._weekdaysRegex = Es), 
                    this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex);
                }
                function Je(e) {
                    return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ue.call(this), e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (l(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = Os), 
                    this._weekdaysShortStrictRegex && e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
                }
                function qe(e) {
                    return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ue.call(this), e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (l(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = Ps), 
                    this._weekdaysMinStrictRegex && e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
                }
                function Ue() {
                    function e(e, t) {
                        return t.length - e.length;
                    }
                    var t, n, a, s, r, i = [], o = [], d = [], u = [];
                    for (t = 0; t < 7; t++) n = c([ 2e3, 1 ]).day(t), a = this.weekdaysMin(n, ""), s = this.weekdaysShort(n, ""), 
                    r = this.weekdays(n, ""), i.push(a), o.push(s), d.push(r), u.push(a), u.push(s), 
                    u.push(r);
                    for (i.sort(e), o.sort(e), d.sort(e), u.sort(e), t = 0; t < 7; t++) o[t] = K(o[t]), 
                    d[t] = K(d[t]), u[t] = K(u[t]);
                    this._weekdaysRegex = new RegExp("^(" + u.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, 
                    this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + d.join("|") + ")", "i"), 
                    this._weekdaysShortStrictRegex = new RegExp("^(" + o.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + i.join("|") + ")", "i");
                }
                function Ve() {
                    return this.hours() % 12 || 12;
                }
                function Ge() {
                    return this.hours() || 24;
                }
                function Be(e, t) {
                    J(e, 0, 0, function() {
                        return this.localeData().meridiem(this.hours(), this.minutes(), t);
                    });
                }
                function $e(e, t) {
                    return t._meridiemParse;
                }
                function Qe(e) {
                    return "p" === (e + "").toLowerCase().charAt(0);
                }
                function Ke(e, t, n) {
                    return e > 11 ? n ? "pm" : "PM" : n ? "am" : "AM";
                }
                function Ze(e) {
                    return e ? e.toLowerCase().replace("_", "-") : e;
                }
                function Xe(e) {
                    for (var t, n, a, s, r = 0; r < e.length; ) {
                        for (s = Ze(e[r]).split("-"), t = s.length, n = Ze(e[r + 1]), n = n ? n.split("-") : null; t > 0; ) {
                            if (a = et(s.slice(0, t).join("-"))) return a;
                            if (n && n.length >= t && v(s, n, !0) >= t - 1) break;
                            t--;
                        }
                        r++;
                    }
                    return Ws;
                }
                function et(t) {
                    var a = null;
                    if (!zs[t] && "undefined" != typeof e && e && e.exports) try {
                        a = Ws._abbr;
                        n(10)("./" + t), tt(a);
                    } catch (e) {}
                    return zs[t];
                }
                function tt(e, t) {
                    var n;
                    return e && (n = o(t) ? st(e) : nt(e, t), n ? Ws = n : "undefined" != typeof console && console.warn && console.warn("Locale " + e + " not found. Did you forget to load it?")), 
                    Ws._abbr;
                }
                function nt(e, t) {
                    if (null !== t) {
                        var n, a = Ns;
                        if (t.abbr = e, null != zs[e]) w("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), 
                        a = zs[e]._config; else if (null != t.parentLocale) if (null != zs[t.parentLocale]) a = zs[t.parentLocale]._config; else {
                            if (n = et(t.parentLocale), null == n) return Cs[t.parentLocale] || (Cs[t.parentLocale] = []), 
                            Cs[t.parentLocale].push({
                                name: e,
                                config: t
                            }), null;
                            a = n._config;
                        }
                        return zs[e] = new j(H(a, t)), Cs[e] && Cs[e].forEach(function(e) {
                            nt(e.name, e.config);
                        }), tt(e), zs[e];
                    }
                    return delete zs[e], null;
                }
                function at(e, t) {
                    if (null != t) {
                        var n, a, s = Ns;
                        a = et(e), null != a && (s = a._config), t = H(s, t), n = new j(t), n.parentLocale = zs[e], 
                        zs[e] = n, tt(e);
                    } else null != zs[e] && (null != zs[e].parentLocale ? zs[e] = zs[e].parentLocale : null != zs[e] && delete zs[e]);
                    return zs[e];
                }
                function st(e) {
                    var t;
                    if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e) return Ws;
                    if (!s(e)) {
                        if (t = et(e)) return t;
                        e = [ e ];
                    }
                    return Xe(e);
                }
                function rt() {
                    return Pa(zs);
                }
                function it(e) {
                    var t, n = e._a;
                    return n && f(e).overflow === -2 && (t = n[cs] < 0 || n[cs] > 11 ? cs : n[hs] < 1 || n[hs] > _e(n[ms], n[cs]) ? hs : n[fs] < 0 || n[fs] > 24 || 24 === n[fs] && (0 !== n[Ms] || 0 !== n[ps] || 0 !== n[ys]) ? fs : n[Ms] < 0 || n[Ms] > 59 ? Ms : n[ps] < 0 || n[ps] > 59 ? ps : n[ys] < 0 || n[ys] > 999 ? ys : -1, 
                    f(e)._overflowDayOfYear && (t < ms || t > hs) && (t = hs), f(e)._overflowWeeks && t === -1 && (t = Ls), 
                    f(e)._overflowWeekday && t === -1 && (t = Ys), f(e).overflow = t), e;
                }
                function ot(e, t, n) {
                    return null != e ? e : null != t ? t : n;
                }
                function dt(e) {
                    var n = new Date(t.now());
                    return e._useUTC ? [ n.getUTCFullYear(), n.getUTCMonth(), n.getUTCDate() ] : [ n.getFullYear(), n.getMonth(), n.getDate() ];
                }
                function ut(e) {
                    var t, n, a, s, r, i = [];
                    if (!e._d) {
                        for (a = dt(e), e._w && null == e._a[hs] && null == e._a[cs] && _t(e), null != e._dayOfYear && (r = ot(e._a[ms], a[ms]), 
                        (e._dayOfYear > te(r) || 0 === e._dayOfYear) && (f(e)._overflowDayOfYear = !0), 
                        n = ge(r, 0, e._dayOfYear), e._a[cs] = n.getUTCMonth(), e._a[hs] = n.getUTCDate()), 
                        t = 0; t < 3 && null == e._a[t]; ++t) e._a[t] = i[t] = a[t];
                        for (;t < 7; t++) e._a[t] = i[t] = null == e._a[t] ? 2 === t ? 1 : 0 : e._a[t];
                        24 === e._a[fs] && 0 === e._a[Ms] && 0 === e._a[ps] && 0 === e._a[ys] && (e._nextDay = !0, 
                        e._a[fs] = 0), e._d = (e._useUTC ? ge : ke).apply(null, i), s = e._useUTC ? e._d.getUTCDay() : e._d.getDay(), 
                        null != e._tzm && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), e._nextDay && (e._a[fs] = 24), 
                        e._w && "undefined" != typeof e._w.d && e._w.d !== s && (f(e).weekdayMismatch = !0);
                    }
                }
                function _t(e) {
                    var t, n, a, s, r, i, o, d;
                    if (t = e._w, null != t.GG || null != t.W || null != t.E) r = 1, i = 4, n = ot(t.GG, e._a[ms], Te(bt(), 1, 4).year), 
                    a = ot(t.W, 1), s = ot(t.E, 1), (s < 1 || s > 7) && (d = !0); else {
                        r = e._locale._week.dow, i = e._locale._week.doy;
                        var u = Te(bt(), r, i);
                        n = ot(t.gg, e._a[ms], u.year), a = ot(t.w, u.week), null != t.d ? (s = t.d, (s < 0 || s > 6) && (d = !0)) : null != t.e ? (s = t.e + r, 
                        (t.e < 0 || t.e > 6) && (d = !0)) : s = r;
                    }
                    a < 1 || a > we(n, r, i) ? f(e)._overflowWeeks = !0 : null != d ? f(e)._overflowWeekday = !0 : (o = De(n, a, s, r, i), 
                    e._a[ms] = o.year, e._dayOfYear = o.dayOfYear);
                }
                function lt(e) {
                    var t, n, a, s, r, i, o = e._i, d = Rs.exec(o) || Is.exec(o);
                    if (d) {
                        for (f(e).iso = !0, t = 0, n = qs.length; t < n; t++) if (qs[t][1].exec(d[1])) {
                            s = qs[t][0], a = qs[t][2] !== !1;
                            break;
                        }
                        if (null == s) return void (e._isValid = !1);
                        if (d[3]) {
                            for (t = 0, n = Us.length; t < n; t++) if (Us[t][1].exec(d[3])) {
                                r = (d[2] || " ") + Us[t][0];
                                break;
                            }
                            if (null == r) return void (e._isValid = !1);
                        }
                        if (!a && null != r) return void (e._isValid = !1);
                        if (d[4]) {
                            if (!Js.exec(d[4])) return void (e._isValid = !1);
                            i = "Z";
                        }
                        e._f = s + (r || "") + (i || ""), Lt(e);
                    } else e._isValid = !1;
                }
                function mt(e, t, n, a, s, r) {
                    var i = [ ct(e), Ts.indexOf(t), parseInt(n, 10), parseInt(a, 10), parseInt(s, 10) ];
                    return r && i.push(parseInt(r, 10)), i;
                }
                function ct(e) {
                    var t = parseInt(e, 10);
                    return t <= 49 ? 2e3 + t : t <= 999 ? 1900 + t : t;
                }
                function ht(e) {
                    return e.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
                }
                function ft(e, t, n) {
                    if (e) {
                        var a = js.indexOf(e), s = new Date(t[0], t[1], t[2]).getDay();
                        if (a !== s) return f(n).weekdayMismatch = !0, n._isValid = !1, !1;
                    }
                    return !0;
                }
                function Mt(e, t, n) {
                    if (e) return Bs[e];
                    if (t) return 0;
                    var a = parseInt(n, 10), s = a % 100, r = (a - s) / 100;
                    return 60 * r + s;
                }
                function pt(e) {
                    var t = Gs.exec(ht(e._i));
                    if (t) {
                        var n = mt(t[4], t[3], t[2], t[5], t[6], t[7]);
                        if (!ft(t[1], n, e)) return;
                        e._a = n, e._tzm = Mt(t[8], t[9], t[10]), e._d = ge.apply(null, e._a), e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), 
                        f(e).rfc2822 = !0;
                    } else e._isValid = !1;
                }
                function yt(e) {
                    var n = Vs.exec(e._i);
                    return null !== n ? void (e._d = new Date(+n[1])) : (lt(e), void (e._isValid === !1 && (delete e._isValid, 
                    pt(e), e._isValid === !1 && (delete e._isValid, t.createFromInputFallback(e)))));
                }
                function Lt(e) {
                    if (e._f === t.ISO_8601) return void lt(e);
                    if (e._f === t.RFC_2822) return void pt(e);
                    e._a = [], f(e).empty = !0;
                    var n, a, s, r, i, o = "" + e._i, d = o.length, u = 0;
                    for (s = G(e._f, e._locale).match(Ja) || [], n = 0; n < s.length; n++) r = s[n], 
                    a = (o.match($(r, e)) || [])[0], a && (i = o.substr(0, o.indexOf(a)), i.length > 0 && f(e).unusedInput.push(i), 
                    o = o.slice(o.indexOf(a) + a.length), u += a.length), Va[r] ? (a ? f(e).empty = !1 : f(e).unusedTokens.push(r), 
                    ee(r, a, e)) : e._strict && !a && f(e).unusedTokens.push(r);
                    f(e).charsLeftOver = d - u, o.length > 0 && f(e).unusedInput.push(o), e._a[fs] <= 12 && f(e).bigHour === !0 && e._a[fs] > 0 && (f(e).bigHour = void 0), 
                    f(e).parsedDateParts = e._a.slice(0), f(e).meridiem = e._meridiem, e._a[fs] = Yt(e._locale, e._a[fs], e._meridiem), 
                    ut(e), it(e);
                }
                function Yt(e, t, n) {
                    var a;
                    return null == n ? t : null != e.meridiemHour ? e.meridiemHour(t, n) : null != e.isPM ? (a = e.isPM(n), 
                    a && t < 12 && (t += 12), a || 12 !== t || (t = 0), t) : t;
                }
                function kt(e) {
                    var t, n, a, s, r;
                    if (0 === e._f.length) return f(e).invalidFormat = !0, void (e._d = new Date(NaN));
                    for (s = 0; s < e._f.length; s++) r = 0, t = y({}, e), null != e._useUTC && (t._useUTC = e._useUTC), 
                    t._f = e._f[s], Lt(t), M(t) && (r += f(t).charsLeftOver, r += 10 * f(t).unusedTokens.length, 
                    f(t).score = r, (null == a || r < a) && (a = r, n = t));
                    m(e, n || t);
                }
                function gt(e) {
                    if (!e._d) {
                        var t = z(e._i);
                        e._a = _([ t.year, t.month, t.day || t.date, t.hour, t.minute, t.second, t.millisecond ], function(e) {
                            return e && parseInt(e, 10);
                        }), ut(e);
                    }
                }
                function vt(e) {
                    var t = new L(it(Dt(e)));
                    return t._nextDay && (t.add(1, "d"), t._nextDay = void 0), t;
                }
                function Dt(e) {
                    var t = e._i, n = e._f;
                    return e._locale = e._locale || st(e._l), null === t || void 0 === n && "" === t ? p({
                        nullInput: !0
                    }) : ("string" == typeof t && (e._i = t = e._locale.preparse(t)), Y(t) ? new L(it(t)) : (u(t) ? e._d = t : s(n) ? kt(e) : n ? Lt(e) : Tt(e), 
                    M(e) || (e._d = null), e));
                }
                function Tt(e) {
                    var n = e._i;
                    o(n) ? e._d = new Date(t.now()) : u(n) ? e._d = new Date(n.valueOf()) : "string" == typeof n ? yt(e) : s(n) ? (e._a = _(n.slice(0), function(e) {
                        return parseInt(e, 10);
                    }), ut(e)) : r(n) ? gt(e) : d(n) ? e._d = new Date(n) : t.createFromInputFallback(e);
                }
                function wt(e, t, n, a, o) {
                    var d = {};
                    return n !== !0 && n !== !1 || (a = n, n = void 0), (r(e) && i(e) || s(e) && 0 === e.length) && (e = void 0), 
                    d._isAMomentObject = !0, d._useUTC = d._isUTC = o, d._l = n, d._i = e, d._f = t, 
                    d._strict = a, vt(d);
                }
                function bt(e, t, n, a) {
                    return wt(e, t, n, a, !1);
                }
                function St(e, t) {
                    var n, a;
                    if (1 === t.length && s(t[0]) && (t = t[0]), !t.length) return bt();
                    for (n = t[0], a = 1; a < t.length; ++a) t[a].isValid() && !t[a][e](n) || (n = t[a]);
                    return n;
                }
                function Ht() {
                    var e = [].slice.call(arguments, 0);
                    return St("isBefore", e);
                }
                function jt() {
                    var e = [].slice.call(arguments, 0);
                    return St("isAfter", e);
                }
                function xt(e) {
                    for (var t in e) if (ks.call(Zs, t) === -1 || null != e[t] && isNaN(e[t])) return !1;
                    for (var n = !1, a = 0; a < Zs.length; ++a) if (e[Zs[a]]) {
                        if (n) return !1;
                        parseFloat(e[Zs[a]]) !== g(e[Zs[a]]) && (n = !0);
                    }
                    return !0;
                }
                function Et() {
                    return this._isValid;
                }
                function Ot() {
                    return Zt(NaN);
                }
                function Pt(e) {
                    var t = z(e), n = t.year || 0, a = t.quarter || 0, s = t.month || 0, r = t.week || 0, i = t.day || 0, o = t.hour || 0, d = t.minute || 0, u = t.second || 0, _ = t.millisecond || 0;
                    this._isValid = xt(t), this._milliseconds = +_ + 1e3 * u + 6e4 * d + 1e3 * o * 60 * 60, 
                    this._days = +i + 7 * r, this._months = +s + 3 * a + 12 * n, this._data = {}, this._locale = st(), 
                    this._bubble();
                }
                function Wt(e) {
                    return e instanceof Pt;
                }
                function At(e) {
                    return e < 0 ? Math.round(-1 * e) * -1 : Math.round(e);
                }
                function Ft(e, t) {
                    J(e, 0, 0, function() {
                        var e = this.utcOffset(), n = "+";
                        return e < 0 && (e = -e, n = "-"), n + I(~~(e / 60), 2) + t + I(~~e % 60, 2);
                    });
                }
                function Nt(e, t) {
                    var n = (t || "").match(e);
                    if (null === n) return null;
                    var a = n[n.length - 1] || [], s = (a + "").match(Xs) || [ "-", 0, 0 ], r = +(60 * s[1]) + g(s[2]);
                    return 0 === r ? 0 : "+" === s[0] ? r : -r;
                }
                function zt(e, n) {
                    var a, s;
                    return n._isUTC ? (a = n.clone(), s = (Y(e) || u(e) ? e.valueOf() : bt(e).valueOf()) - a.valueOf(), 
                    a._d.setTime(a._d.valueOf() + s), t.updateOffset(a, !1), a) : bt(e).local();
                }
                function Ct(e) {
                    return 15 * -Math.round(e._d.getTimezoneOffset() / 15);
                }
                function Rt(e, n, a) {
                    var s, r = this._offset || 0;
                    if (!this.isValid()) return null != e ? this : NaN;
                    if (null != e) {
                        if ("string" == typeof e) {
                            if (e = Nt(os, e), null === e) return this;
                        } else Math.abs(e) < 16 && !a && (e *= 60);
                        return !this._isUTC && n && (s = Ct(this)), this._offset = e, this._isUTC = !0, 
                        null != s && this.add(s, "m"), r !== e && (!n || this._changeInProgress ? an(this, Zt(e - r, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, 
                        t.updateOffset(this, !0), this._changeInProgress = null)), this;
                    }
                    return this._isUTC ? r : Ct(this);
                }
                function It(e, t) {
                    return null != e ? ("string" != typeof e && (e = -e), this.utcOffset(e, t), this) : -this.utcOffset();
                }
                function Jt(e) {
                    return this.utcOffset(0, e);
                }
                function qt(e) {
                    return this._isUTC && (this.utcOffset(0, e), this._isUTC = !1, e && this.subtract(Ct(this), "m")), 
                    this;
                }
                function Ut() {
                    if (null != this._tzm) this.utcOffset(this._tzm, !1, !0); else if ("string" == typeof this._i) {
                        var e = Nt(is, this._i);
                        null != e ? this.utcOffset(e) : this.utcOffset(0, !0);
                    }
                    return this;
                }
                function Vt(e) {
                    return !!this.isValid() && (e = e ? bt(e).utcOffset() : 0, (this.utcOffset() - e) % 60 === 0);
                }
                function Gt() {
                    return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
                }
                function Bt() {
                    if (!o(this._isDSTShifted)) return this._isDSTShifted;
                    var e = {};
                    if (y(e, this), e = Dt(e), e._a) {
                        var t = e._isUTC ? c(e._a) : bt(e._a);
                        this._isDSTShifted = this.isValid() && v(e._a, t.toArray()) > 0;
                    } else this._isDSTShifted = !1;
                    return this._isDSTShifted;
                }
                function $t() {
                    return !!this.isValid() && !this._isUTC;
                }
                function Qt() {
                    return !!this.isValid() && this._isUTC;
                }
                function Kt() {
                    return !!this.isValid() && (this._isUTC && 0 === this._offset);
                }
                function Zt(e, t) {
                    var n, a, s, r = e, i = null;
                    return Wt(e) ? r = {
                        ms: e._milliseconds,
                        d: e._days,
                        M: e._months
                    } : d(e) ? (r = {}, t ? r[t] = e : r.milliseconds = e) : (i = er.exec(e)) ? (n = "-" === i[1] ? -1 : 1, 
                    r = {
                        y: 0,
                        d: g(i[hs]) * n,
                        h: g(i[fs]) * n,
                        m: g(i[Ms]) * n,
                        s: g(i[ps]) * n,
                        ms: g(At(1e3 * i[ys])) * n
                    }) : (i = tr.exec(e)) ? (n = "-" === i[1] ? -1 : ("+" === i[1], 1), r = {
                        y: Xt(i[2], n),
                        M: Xt(i[3], n),
                        w: Xt(i[4], n),
                        d: Xt(i[5], n),
                        h: Xt(i[6], n),
                        m: Xt(i[7], n),
                        s: Xt(i[8], n)
                    }) : null == r ? r = {} : "object" == typeof r && ("from" in r || "to" in r) && (s = tn(bt(r.from), bt(r.to)), 
                    r = {}, r.ms = s.milliseconds, r.M = s.months), a = new Pt(r), Wt(e) && l(e, "_locale") && (a._locale = e._locale), 
                    a;
                }
                function Xt(e, t) {
                    var n = e && parseFloat(e.replace(",", "."));
                    return (isNaN(n) ? 0 : n) * t;
                }
                function en(e, t) {
                    var n = {
                        milliseconds: 0,
                        months: 0
                    };
                    return n.months = t.month() - e.month() + 12 * (t.year() - e.year()), e.clone().add(n.months, "M").isAfter(t) && --n.months, 
                    n.milliseconds = +t - +e.clone().add(n.months, "M"), n;
                }
                function tn(e, t) {
                    var n;
                    return e.isValid() && t.isValid() ? (t = zt(t, e), e.isBefore(t) ? n = en(e, t) : (n = en(t, e), 
                    n.milliseconds = -n.milliseconds, n.months = -n.months), n) : {
                        milliseconds: 0,
                        months: 0
                    };
                }
                function nn(e, t) {
                    return function(n, a) {
                        var s, r;
                        return null === a || isNaN(+a) || (w(t, "moment()." + t + "(period, number) is deprecated. Please use moment()." + t + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), 
                        r = n, n = a, a = r), n = "string" == typeof n ? +n : n, s = Zt(n, a), an(this, s, e), 
                        this;
                    };
                }
                function an(e, n, a, s) {
                    var r = n._milliseconds, i = At(n._days), o = At(n._months);
                    e.isValid() && (s = null == s || s, o && fe(e, re(e, "Month") + o * a), i && ie(e, "Date", re(e, "Date") + i * a), 
                    r && e._d.setTime(e._d.valueOf() + r * a), s && t.updateOffset(e, i || o));
                }
                function sn(e, t) {
                    var n = e.diff(t, "days", !0);
                    return n < -6 ? "sameElse" : n < -1 ? "lastWeek" : n < 0 ? "lastDay" : n < 1 ? "sameDay" : n < 2 ? "nextDay" : n < 7 ? "nextWeek" : "sameElse";
                }
                function rn(e, n) {
                    var a = e || bt(), s = zt(a, this).startOf("day"), r = t.calendarFormat(this, s) || "sameElse", i = n && (b(n[r]) ? n[r].call(this, a) : n[r]);
                    return this.format(i || this.localeData().calendar(r, this, bt(a)));
                }
                function on() {
                    return new L(this);
                }
                function dn(e, t) {
                    var n = Y(e) ? e : bt(e);
                    return !(!this.isValid() || !n.isValid()) && (t = N(o(t) ? "millisecond" : t), "millisecond" === t ? this.valueOf() > n.valueOf() : n.valueOf() < this.clone().startOf(t).valueOf());
                }
                function un(e, t) {
                    var n = Y(e) ? e : bt(e);
                    return !(!this.isValid() || !n.isValid()) && (t = N(o(t) ? "millisecond" : t), "millisecond" === t ? this.valueOf() < n.valueOf() : this.clone().endOf(t).valueOf() < n.valueOf());
                }
                function _n(e, t, n, a) {
                    return a = a || "()", ("(" === a[0] ? this.isAfter(e, n) : !this.isBefore(e, n)) && (")" === a[1] ? this.isBefore(t, n) : !this.isAfter(t, n));
                }
                function ln(e, t) {
                    var n, a = Y(e) ? e : bt(e);
                    return !(!this.isValid() || !a.isValid()) && (t = N(t || "millisecond"), "millisecond" === t ? this.valueOf() === a.valueOf() : (n = a.valueOf(), 
                    this.clone().startOf(t).valueOf() <= n && n <= this.clone().endOf(t).valueOf()));
                }
                function mn(e, t) {
                    return this.isSame(e, t) || this.isAfter(e, t);
                }
                function cn(e, t) {
                    return this.isSame(e, t) || this.isBefore(e, t);
                }
                function hn(e, t, n) {
                    var a, s, r;
                    if (!this.isValid()) return NaN;
                    if (a = zt(e, this), !a.isValid()) return NaN;
                    switch (s = 6e4 * (a.utcOffset() - this.utcOffset()), t = N(t)) {
                      case "year":
                        r = fn(this, a) / 12;
                        break;

                      case "month":
                        r = fn(this, a);
                        break;

                      case "quarter":
                        r = fn(this, a) / 3;
                        break;

                      case "second":
                        r = (this - a) / 1e3;
                        break;

                      case "minute":
                        r = (this - a) / 6e4;
                        break;

                      case "hour":
                        r = (this - a) / 36e5;
                        break;

                      case "day":
                        r = (this - a - s) / 864e5;
                        break;

                      case "week":
                        r = (this - a - s) / 6048e5;
                        break;

                      default:
                        r = this - a;
                    }
                    return n ? r : k(r);
                }
                function fn(e, t) {
                    var n, a, s = 12 * (t.year() - e.year()) + (t.month() - e.month()), r = e.clone().add(s, "months");
                    return t - r < 0 ? (n = e.clone().add(s - 1, "months"), a = (t - r) / (r - n)) : (n = e.clone().add(s + 1, "months"), 
                    a = (t - r) / (n - r)), -(s + a) || 0;
                }
                function Mn() {
                    return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
                }
                function pn(e) {
                    if (!this.isValid()) return null;
                    var t = e !== !0, n = t ? this.clone().utc() : this;
                    return n.year() < 0 || n.year() > 9999 ? V(n, t ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : b(Date.prototype.toISOString) ? t ? this.toDate().toISOString() : new Date(this.valueOf() + 60 * this.utcOffset() * 1e3).toISOString().replace("Z", V(n, "Z")) : V(n, t ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
                }
                function yn() {
                    if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
                    var e = "moment", t = "";
                    this.isLocal() || (e = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", 
                    t = "Z");
                    var n = "[" + e + '("]', a = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", s = "-MM-DD[T]HH:mm:ss.SSS", r = t + '[")]';
                    return this.format(n + a + s + r);
                }
                function Ln(e) {
                    e || (e = this.isUtc() ? t.defaultFormatUtc : t.defaultFormat);
                    var n = V(this, e);
                    return this.localeData().postformat(n);
                }
                function Yn(e, t) {
                    return this.isValid() && (Y(e) && e.isValid() || bt(e).isValid()) ? Zt({
                        to: this,
                        from: e
                    }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate();
                }
                function kn(e) {
                    return this.from(bt(), e);
                }
                function gn(e, t) {
                    return this.isValid() && (Y(e) && e.isValid() || bt(e).isValid()) ? Zt({
                        from: this,
                        to: e
                    }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate();
                }
                function vn(e) {
                    return this.to(bt(), e);
                }
                function Dn(e) {
                    var t;
                    return void 0 === e ? this._locale._abbr : (t = st(e), null != t && (this._locale = t), 
                    this);
                }
                function Tn() {
                    return this._locale;
                }
                function wn(e) {
                    switch (e = N(e)) {
                      case "year":
                        this.month(0);

                      case "quarter":
                      case "month":
                        this.date(1);

                      case "week":
                      case "isoWeek":
                      case "day":
                      case "date":
                        this.hours(0);

                      case "hour":
                        this.minutes(0);

                      case "minute":
                        this.seconds(0);

                      case "second":
                        this.milliseconds(0);
                    }
                    return "week" === e && this.weekday(0), "isoWeek" === e && this.isoWeekday(1), "quarter" === e && this.month(3 * Math.floor(this.month() / 3)), 
                    this;
                }
                function bn(e) {
                    return e = N(e), void 0 === e || "millisecond" === e ? this : ("date" === e && (e = "day"), 
                    this.startOf(e).add(1, "isoWeek" === e ? "week" : e).subtract(1, "ms"));
                }
                function Sn() {
                    return this._d.valueOf() - 6e4 * (this._offset || 0);
                }
                function Hn() {
                    return Math.floor(this.valueOf() / 1e3);
                }
                function jn() {
                    return new Date(this.valueOf());
                }
                function xn() {
                    var e = this;
                    return [ e.year(), e.month(), e.date(), e.hour(), e.minute(), e.second(), e.millisecond() ];
                }
                function En() {
                    var e = this;
                    return {
                        years: e.year(),
                        months: e.month(),
                        date: e.date(),
                        hours: e.hours(),
                        minutes: e.minutes(),
                        seconds: e.seconds(),
                        milliseconds: e.milliseconds()
                    };
                }
                function On() {
                    return this.isValid() ? this.toISOString() : null;
                }
                function Pn() {
                    return M(this);
                }
                function Wn() {
                    return m({}, f(this));
                }
                function An() {
                    return f(this).overflow;
                }
                function Fn() {
                    return {
                        input: this._i,
                        format: this._f,
                        locale: this._locale,
                        isUTC: this._isUTC,
                        strict: this._strict
                    };
                }
                function Nn(e, t) {
                    J(0, [ e, e.length ], 0, t);
                }
                function zn(e) {
                    return Jn.call(this, e, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
                }
                function Cn(e) {
                    return Jn.call(this, e, this.isoWeek(), this.isoWeekday(), 1, 4);
                }
                function Rn() {
                    return we(this.year(), 1, 4);
                }
                function In() {
                    var e = this.localeData()._week;
                    return we(this.year(), e.dow, e.doy);
                }
                function Jn(e, t, n, a, s) {
                    var r;
                    return null == e ? Te(this, a, s).year : (r = we(e, a, s), t > r && (t = r), qn.call(this, e, t, n, a, s));
                }
                function qn(e, t, n, a, s) {
                    var r = De(e, t, n, a, s), i = ge(r.year, 0, r.dayOfYear);
                    return this.year(i.getUTCFullYear()), this.month(i.getUTCMonth()), this.date(i.getUTCDate()), 
                    this;
                }
                function Un(e) {
                    return null == e ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (e - 1) + this.month() % 3);
                }
                function Vn(e) {
                    var t = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
                    return null == e ? t : this.add(e - t, "d");
                }
                function Gn(e, t) {
                    t[ys] = g(1e3 * ("0." + e));
                }
                function Bn() {
                    return this._isUTC ? "UTC" : "";
                }
                function $n() {
                    return this._isUTC ? "Coordinated Universal Time" : "";
                }
                function Qn(e) {
                    return bt(1e3 * e);
                }
                function Kn() {
                    return bt.apply(null, arguments).parseZone();
                }
                function Zn(e) {
                    return e;
                }
                function Xn(e, t, n, a) {
                    var s = st(), r = c().set(a, t);
                    return s[n](r, e);
                }
                function ea(e, t, n) {
                    if (d(e) && (t = e, e = void 0), e = e || "", null != t) return Xn(e, t, n, "month");
                    var a, s = [];
                    for (a = 0; a < 12; a++) s[a] = Xn(e, a, n, "month");
                    return s;
                }
                function ta(e, t, n, a) {
                    "boolean" == typeof e ? (d(t) && (n = t, t = void 0), t = t || "") : (t = e, n = t, 
                    e = !1, d(t) && (n = t, t = void 0), t = t || "");
                    var s = st(), r = e ? s._week.dow : 0;
                    if (null != n) return Xn(t, (n + r) % 7, a, "day");
                    var i, o = [];
                    for (i = 0; i < 7; i++) o[i] = Xn(t, (i + r) % 7, a, "day");
                    return o;
                }
                function na(e, t) {
                    return ea(e, t, "months");
                }
                function aa(e, t) {
                    return ea(e, t, "monthsShort");
                }
                function sa(e, t, n) {
                    return ta(e, t, n, "weekdays");
                }
                function ra(e, t, n) {
                    return ta(e, t, n, "weekdaysShort");
                }
                function ia(e, t, n) {
                    return ta(e, t, n, "weekdaysMin");
                }
                function oa() {
                    var e = this._data;
                    return this._milliseconds = mr(this._milliseconds), this._days = mr(this._days), 
                    this._months = mr(this._months), e.milliseconds = mr(e.milliseconds), e.seconds = mr(e.seconds), 
                    e.minutes = mr(e.minutes), e.hours = mr(e.hours), e.months = mr(e.months), e.years = mr(e.years), 
                    this;
                }
                function da(e, t, n, a) {
                    var s = Zt(t, n);
                    return e._milliseconds += a * s._milliseconds, e._days += a * s._days, e._months += a * s._months, 
                    e._bubble();
                }
                function ua(e, t) {
                    return da(this, e, t, 1);
                }
                function _a(e, t) {
                    return da(this, e, t, -1);
                }
                function la(e) {
                    return e < 0 ? Math.floor(e) : Math.ceil(e);
                }
                function ma() {
                    var e, t, n, a, s, r = this._milliseconds, i = this._days, o = this._months, d = this._data;
                    return r >= 0 && i >= 0 && o >= 0 || r <= 0 && i <= 0 && o <= 0 || (r += 864e5 * la(ha(o) + i), 
                    i = 0, o = 0), d.milliseconds = r % 1e3, e = k(r / 1e3), d.seconds = e % 60, t = k(e / 60), 
                    d.minutes = t % 60, n = k(t / 60), d.hours = n % 24, i += k(n / 24), s = k(ca(i)), 
                    o += s, i -= la(ha(s)), a = k(o / 12), o %= 12, d.days = i, d.months = o, d.years = a, 
                    this;
                }
                function ca(e) {
                    return 4800 * e / 146097;
                }
                function ha(e) {
                    return 146097 * e / 4800;
                }
                function fa(e) {
                    if (!this.isValid()) return NaN;
                    var t, n, a = this._milliseconds;
                    if (e = N(e), "month" === e || "year" === e) return t = this._days + a / 864e5, 
                    n = this._months + ca(t), "month" === e ? n : n / 12;
                    switch (t = this._days + Math.round(ha(this._months)), e) {
                      case "week":
                        return t / 7 + a / 6048e5;

                      case "day":
                        return t + a / 864e5;

                      case "hour":
                        return 24 * t + a / 36e5;

                      case "minute":
                        return 1440 * t + a / 6e4;

                      case "second":
                        return 86400 * t + a / 1e3;

                      case "millisecond":
                        return Math.floor(864e5 * t) + a;

                      default:
                        throw new Error("Unknown unit " + e);
                    }
                }
                function Ma() {
                    return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * g(this._months / 12) : NaN;
                }
                function pa(e) {
                    return function() {
                        return this.as(e);
                    };
                }
                function ya() {
                    return Zt(this);
                }
                function La(e) {
                    return e = N(e), this.isValid() ? this[e + "s"]() : NaN;
                }
                function Ya(e) {
                    return function() {
                        return this.isValid() ? this._data[e] : NaN;
                    };
                }
                function ka() {
                    return k(this.days() / 7);
                }
                function ga(e, t, n, a, s) {
                    return s.relativeTime(t || 1, !!n, e, a);
                }
                function va(e, t, n) {
                    var a = Zt(e).abs(), s = Sr(a.as("s")), r = Sr(a.as("m")), i = Sr(a.as("h")), o = Sr(a.as("d")), d = Sr(a.as("M")), u = Sr(a.as("y")), _ = s <= Hr.ss && [ "s", s ] || s < Hr.s && [ "ss", s ] || r <= 1 && [ "m" ] || r < Hr.m && [ "mm", r ] || i <= 1 && [ "h" ] || i < Hr.h && [ "hh", i ] || o <= 1 && [ "d" ] || o < Hr.d && [ "dd", o ] || d <= 1 && [ "M" ] || d < Hr.M && [ "MM", d ] || u <= 1 && [ "y" ] || [ "yy", u ];
                    return _[2] = t, _[3] = +e > 0, _[4] = n, ga.apply(null, _);
                }
                function Da(e) {
                    return void 0 === e ? Sr : "function" == typeof e && (Sr = e, !0);
                }
                function Ta(e, t) {
                    return void 0 !== Hr[e] && (void 0 === t ? Hr[e] : (Hr[e] = t, "s" === e && (Hr.ss = t - 1), 
                    !0));
                }
                function wa(e) {
                    if (!this.isValid()) return this.localeData().invalidDate();
                    var t = this.localeData(), n = va(this, !e, t);
                    return e && (n = t.pastFuture(+this, n)), t.postformat(n);
                }
                function ba(e) {
                    return (e > 0) - (e < 0) || +e;
                }
                function Sa() {
                    if (!this.isValid()) return this.localeData().invalidDate();
                    var e, t, n, a = jr(this._milliseconds) / 1e3, s = jr(this._days), r = jr(this._months);
                    e = k(a / 60), t = k(e / 60), a %= 60, e %= 60, n = k(r / 12), r %= 12;
                    var i = n, o = r, d = s, u = t, _ = e, l = a ? a.toFixed(3).replace(/\.?0+$/, "") : "", m = this.asSeconds();
                    if (!m) return "P0D";
                    var c = m < 0 ? "-" : "", h = ba(this._months) !== ba(m) ? "-" : "", f = ba(this._days) !== ba(m) ? "-" : "", M = ba(this._milliseconds) !== ba(m) ? "-" : "";
                    return c + "P" + (i ? h + i + "Y" : "") + (o ? h + o + "M" : "") + (d ? f + d + "D" : "") + (u || _ || l ? "T" : "") + (u ? M + u + "H" : "") + (_ ? M + _ + "M" : "") + (l ? M + l + "S" : "");
                }
                var Ha, ja;
                ja = Array.prototype.some ? Array.prototype.some : function(e) {
                    for (var t = Object(this), n = t.length >>> 0, a = 0; a < n; a++) if (a in t && e.call(this, t[a], a, t)) return !0;
                    return !1;
                };
                var xa = t.momentProperties = [], Ea = !1, Oa = {};
                t.suppressDeprecationWarnings = !1, t.deprecationHandler = null;
                var Pa;
                Pa = Object.keys ? Object.keys : function(e) {
                    var t, n = [];
                    for (t in e) l(e, t) && n.push(t);
                    return n;
                };
                var Wa = {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                }, Aa = {
                    LTS: "h:mm:ss A",
                    LT: "h:mm A",
                    L: "MM/DD/YYYY",
                    LL: "MMMM D, YYYY",
                    LLL: "MMMM D, YYYY h:mm A",
                    LLLL: "dddd, MMMM D, YYYY h:mm A"
                }, Fa = "Invalid date", Na = "%d", za = /\d{1,2}/, Ca = {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    ss: "%d seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                }, Ra = {}, Ia = {}, Ja = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, qa = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, Ua = {}, Va = {}, Ga = /\d/, Ba = /\d\d/, $a = /\d{3}/, Qa = /\d{4}/, Ka = /[+-]?\d{6}/, Za = /\d\d?/, Xa = /\d\d\d\d?/, es = /\d\d\d\d\d\d?/, ts = /\d{1,3}/, ns = /\d{1,4}/, as = /[+-]?\d{1,6}/, ss = /\d+/, rs = /[+-]?\d+/, is = /Z|[+-]\d\d:?\d\d/gi, os = /Z|[+-]\d\d(?::?\d\d)?/gi, ds = /[+-]?\d+(\.\d{1,3})?/, us = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, _s = {}, ls = {}, ms = 0, cs = 1, hs = 2, fs = 3, Ms = 4, ps = 5, ys = 6, Ls = 7, Ys = 8;
                J("Y", 0, 0, function() {
                    var e = this.year();
                    return e <= 9999 ? "" + e : "+" + e;
                }), J(0, [ "YY", 2 ], 0, function() {
                    return this.year() % 100;
                }), J(0, [ "YYYY", 4 ], 0, "year"), J(0, [ "YYYYY", 5 ], 0, "year"), J(0, [ "YYYYYY", 6, !0 ], 0, "year"), 
                F("year", "y"), C("year", 1), B("Y", rs), B("YY", Za, Ba), B("YYYY", ns, Qa), B("YYYYY", as, Ka), 
                B("YYYYYY", as, Ka), Z([ "YYYYY", "YYYYYY" ], ms), Z("YYYY", function(e, n) {
                    n[ms] = 2 === e.length ? t.parseTwoDigitYear(e) : g(e);
                }), Z("YY", function(e, n) {
                    n[ms] = t.parseTwoDigitYear(e);
                }), Z("Y", function(e, t) {
                    t[ms] = parseInt(e, 10);
                }), t.parseTwoDigitYear = function(e) {
                    return g(e) + (g(e) > 68 ? 1900 : 2e3);
                };
                var ks, gs = se("FullYear", !0);
                ks = Array.prototype.indexOf ? Array.prototype.indexOf : function(e) {
                    var t;
                    for (t = 0; t < this.length; ++t) if (this[t] === e) return t;
                    return -1;
                }, J("M", [ "MM", 2 ], "Mo", function() {
                    return this.month() + 1;
                }), J("MMM", 0, 0, function(e) {
                    return this.localeData().monthsShort(this, e);
                }), J("MMMM", 0, 0, function(e) {
                    return this.localeData().months(this, e);
                }), F("month", "M"), C("month", 8), B("M", Za), B("MM", Za, Ba), B("MMM", function(e, t) {
                    return t.monthsShortRegex(e);
                }), B("MMMM", function(e, t) {
                    return t.monthsRegex(e);
                }), Z([ "M", "MM" ], function(e, t) {
                    t[cs] = g(e) - 1;
                }), Z([ "MMM", "MMMM" ], function(e, t, n, a) {
                    var s = n._locale.monthsParse(e, a, n._strict);
                    null != s ? t[cs] = s : f(n).invalidMonth = e;
                });
                var vs = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, Ds = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), Ts = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), ws = us, bs = us;
                J("w", [ "ww", 2 ], "wo", "week"), J("W", [ "WW", 2 ], "Wo", "isoWeek"), F("week", "w"), 
                F("isoWeek", "W"), C("week", 5), C("isoWeek", 5), B("w", Za), B("ww", Za, Ba), B("W", Za), 
                B("WW", Za, Ba), X([ "w", "ww", "W", "WW" ], function(e, t, n, a) {
                    t[a.substr(0, 1)] = g(e);
                });
                var Ss = {
                    dow: 0,
                    doy: 6
                };
                J("d", 0, "do", "day"), J("dd", 0, 0, function(e) {
                    return this.localeData().weekdaysMin(this, e);
                }), J("ddd", 0, 0, function(e) {
                    return this.localeData().weekdaysShort(this, e);
                }), J("dddd", 0, 0, function(e) {
                    return this.localeData().weekdays(this, e);
                }), J("e", 0, 0, "weekday"), J("E", 0, 0, "isoWeekday"), F("day", "d"), F("weekday", "e"), 
                F("isoWeekday", "E"), C("day", 11), C("weekday", 11), C("isoWeekday", 11), B("d", Za), 
                B("e", Za), B("E", Za), B("dd", function(e, t) {
                    return t.weekdaysMinRegex(e);
                }), B("ddd", function(e, t) {
                    return t.weekdaysShortRegex(e);
                }), B("dddd", function(e, t) {
                    return t.weekdaysRegex(e);
                }), X([ "dd", "ddd", "dddd" ], function(e, t, n, a) {
                    var s = n._locale.weekdaysParse(e, a, n._strict);
                    null != s ? t.d = s : f(n).invalidWeekday = e;
                }), X([ "d", "e", "E" ], function(e, t, n, a) {
                    t[a] = g(e);
                });
                var Hs = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), js = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), xs = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), Es = us, Os = us, Ps = us;
                J("H", [ "HH", 2 ], 0, "hour"), J("h", [ "hh", 2 ], 0, Ve), J("k", [ "kk", 2 ], 0, Ge), 
                J("hmm", 0, 0, function() {
                    return "" + Ve.apply(this) + I(this.minutes(), 2);
                }), J("hmmss", 0, 0, function() {
                    return "" + Ve.apply(this) + I(this.minutes(), 2) + I(this.seconds(), 2);
                }), J("Hmm", 0, 0, function() {
                    return "" + this.hours() + I(this.minutes(), 2);
                }), J("Hmmss", 0, 0, function() {
                    return "" + this.hours() + I(this.minutes(), 2) + I(this.seconds(), 2);
                }), Be("a", !0), Be("A", !1), F("hour", "h"), C("hour", 13), B("a", $e), B("A", $e), 
                B("H", Za), B("h", Za), B("k", Za), B("HH", Za, Ba), B("hh", Za, Ba), B("kk", Za, Ba), 
                B("hmm", Xa), B("hmmss", es), B("Hmm", Xa), B("Hmmss", es), Z([ "H", "HH" ], fs), 
                Z([ "k", "kk" ], function(e, t, n) {
                    var a = g(e);
                    t[fs] = 24 === a ? 0 : a;
                }), Z([ "a", "A" ], function(e, t, n) {
                    n._isPm = n._locale.isPM(e), n._meridiem = e;
                }), Z([ "h", "hh" ], function(e, t, n) {
                    t[fs] = g(e), f(n).bigHour = !0;
                }), Z("hmm", function(e, t, n) {
                    var a = e.length - 2;
                    t[fs] = g(e.substr(0, a)), t[Ms] = g(e.substr(a)), f(n).bigHour = !0;
                }), Z("hmmss", function(e, t, n) {
                    var a = e.length - 4, s = e.length - 2;
                    t[fs] = g(e.substr(0, a)), t[Ms] = g(e.substr(a, 2)), t[ps] = g(e.substr(s)), f(n).bigHour = !0;
                }), Z("Hmm", function(e, t, n) {
                    var a = e.length - 2;
                    t[fs] = g(e.substr(0, a)), t[Ms] = g(e.substr(a));
                }), Z("Hmmss", function(e, t, n) {
                    var a = e.length - 4, s = e.length - 2;
                    t[fs] = g(e.substr(0, a)), t[Ms] = g(e.substr(a, 2)), t[ps] = g(e.substr(s));
                });
                var Ws, As = /[ap]\.?m?\.?/i, Fs = se("Hours", !0), Ns = {
                    calendar: Wa,
                    longDateFormat: Aa,
                    invalidDate: Fa,
                    ordinal: Na,
                    dayOfMonthOrdinalParse: za,
                    relativeTime: Ca,
                    months: Ds,
                    monthsShort: Ts,
                    week: Ss,
                    weekdays: Hs,
                    weekdaysMin: xs,
                    weekdaysShort: js,
                    meridiemParse: As
                }, zs = {}, Cs = {}, Rs = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Is = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Js = /Z|[+-]\d\d(?::?\d\d)?/, qs = [ [ "YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/ ], [ "YYYY-MM-DD", /\d{4}-\d\d-\d\d/ ], [ "GGGG-[W]WW-E", /\d{4}-W\d\d-\d/ ], [ "GGGG-[W]WW", /\d{4}-W\d\d/, !1 ], [ "YYYY-DDD", /\d{4}-\d{3}/ ], [ "YYYY-MM", /\d{4}-\d\d/, !1 ], [ "YYYYYYMMDD", /[+-]\d{10}/ ], [ "YYYYMMDD", /\d{8}/ ], [ "GGGG[W]WWE", /\d{4}W\d{3}/ ], [ "GGGG[W]WW", /\d{4}W\d{2}/, !1 ], [ "YYYYDDD", /\d{7}/ ] ], Us = [ [ "HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/ ], [ "HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/ ], [ "HH:mm:ss", /\d\d:\d\d:\d\d/ ], [ "HH:mm", /\d\d:\d\d/ ], [ "HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/ ], [ "HHmmss,SSSS", /\d\d\d\d\d\d,\d+/ ], [ "HHmmss", /\d\d\d\d\d\d/ ], [ "HHmm", /\d\d\d\d/ ], [ "HH", /\d\d/ ] ], Vs = /^\/?Date\((\-?\d+)/i, Gs = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, Bs = {
                    UT: 0,
                    GMT: 0,
                    EDT: -240,
                    EST: -300,
                    CDT: -300,
                    CST: -360,
                    MDT: -360,
                    MST: -420,
                    PDT: -420,
                    PST: -480
                };
                t.createFromInputFallback = T("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(e) {
                    e._d = new Date(e._i + (e._useUTC ? " UTC" : ""));
                }), t.ISO_8601 = function() {}, t.RFC_2822 = function() {};
                var $s = T("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                    var e = bt.apply(null, arguments);
                    return this.isValid() && e.isValid() ? e < this ? this : e : p();
                }), Qs = T("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                    var e = bt.apply(null, arguments);
                    return this.isValid() && e.isValid() ? e > this ? this : e : p();
                }), Ks = function() {
                    return Date.now ? Date.now() : +new Date();
                }, Zs = [ "year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond" ];
                Ft("Z", ":"), Ft("ZZ", ""), B("Z", os), B("ZZ", os), Z([ "Z", "ZZ" ], function(e, t, n) {
                    n._useUTC = !0, n._tzm = Nt(os, e);
                });
                var Xs = /([\+\-]|\d\d)/gi;
                t.updateOffset = function() {};
                var er = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/, tr = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
                Zt.fn = Pt.prototype, Zt.invalid = Ot;
                var nr = nn(1, "add"), ar = nn(-1, "subtract");
                t.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", t.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
                var sr = T("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(e) {
                    return void 0 === e ? this.localeData() : this.locale(e);
                });
                J(0, [ "gg", 2 ], 0, function() {
                    return this.weekYear() % 100;
                }), J(0, [ "GG", 2 ], 0, function() {
                    return this.isoWeekYear() % 100;
                }), Nn("gggg", "weekYear"), Nn("ggggg", "weekYear"), Nn("GGGG", "isoWeekYear"), 
                Nn("GGGGG", "isoWeekYear"), F("weekYear", "gg"), F("isoWeekYear", "GG"), C("weekYear", 1), 
                C("isoWeekYear", 1), B("G", rs), B("g", rs), B("GG", Za, Ba), B("gg", Za, Ba), B("GGGG", ns, Qa), 
                B("gggg", ns, Qa), B("GGGGG", as, Ka), B("ggggg", as, Ka), X([ "gggg", "ggggg", "GGGG", "GGGGG" ], function(e, t, n, a) {
                    t[a.substr(0, 2)] = g(e);
                }), X([ "gg", "GG" ], function(e, n, a, s) {
                    n[s] = t.parseTwoDigitYear(e);
                }), J("Q", 0, "Qo", "quarter"), F("quarter", "Q"), C("quarter", 7), B("Q", Ga), 
                Z("Q", function(e, t) {
                    t[cs] = 3 * (g(e) - 1);
                }), J("D", [ "DD", 2 ], "Do", "date"), F("date", "D"), C("date", 9), B("D", Za), 
                B("DD", Za, Ba), B("Do", function(e, t) {
                    return e ? t._dayOfMonthOrdinalParse || t._ordinalParse : t._dayOfMonthOrdinalParseLenient;
                }), Z([ "D", "DD" ], hs), Z("Do", function(e, t) {
                    t[hs] = g(e.match(Za)[0]);
                });
                var rr = se("Date", !0);
                J("DDD", [ "DDDD", 3 ], "DDDo", "dayOfYear"), F("dayOfYear", "DDD"), C("dayOfYear", 4), 
                B("DDD", ts), B("DDDD", $a), Z([ "DDD", "DDDD" ], function(e, t, n) {
                    n._dayOfYear = g(e);
                }), J("m", [ "mm", 2 ], 0, "minute"), F("minute", "m"), C("minute", 14), B("m", Za), 
                B("mm", Za, Ba), Z([ "m", "mm" ], Ms);
                var ir = se("Minutes", !1);
                J("s", [ "ss", 2 ], 0, "second"), F("second", "s"), C("second", 15), B("s", Za), 
                B("ss", Za, Ba), Z([ "s", "ss" ], ps);
                var or = se("Seconds", !1);
                J("S", 0, 0, function() {
                    return ~~(this.millisecond() / 100);
                }), J(0, [ "SS", 2 ], 0, function() {
                    return ~~(this.millisecond() / 10);
                }), J(0, [ "SSS", 3 ], 0, "millisecond"), J(0, [ "SSSS", 4 ], 0, function() {
                    return 10 * this.millisecond();
                }), J(0, [ "SSSSS", 5 ], 0, function() {
                    return 100 * this.millisecond();
                }), J(0, [ "SSSSSS", 6 ], 0, function() {
                    return 1e3 * this.millisecond();
                }), J(0, [ "SSSSSSS", 7 ], 0, function() {
                    return 1e4 * this.millisecond();
                }), J(0, [ "SSSSSSSS", 8 ], 0, function() {
                    return 1e5 * this.millisecond();
                }), J(0, [ "SSSSSSSSS", 9 ], 0, function() {
                    return 1e6 * this.millisecond();
                }), F("millisecond", "ms"), C("millisecond", 16), B("S", ts, Ga), B("SS", ts, Ba), 
                B("SSS", ts, $a);
                var dr;
                for (dr = "SSSS"; dr.length <= 9; dr += "S") B(dr, ss);
                for (dr = "S"; dr.length <= 9; dr += "S") Z(dr, Gn);
                var ur = se("Milliseconds", !1);
                J("z", 0, 0, "zoneAbbr"), J("zz", 0, 0, "zoneName");
                var _r = L.prototype;
                _r.add = nr, _r.calendar = rn, _r.clone = on, _r.diff = hn, _r.endOf = bn, _r.format = Ln, 
                _r.from = Yn, _r.fromNow = kn, _r.to = gn, _r.toNow = vn, _r.get = oe, _r.invalidAt = An, 
                _r.isAfter = dn, _r.isBefore = un, _r.isBetween = _n, _r.isSame = ln, _r.isSameOrAfter = mn, 
                _r.isSameOrBefore = cn, _r.isValid = Pn, _r.lang = sr, _r.locale = Dn, _r.localeData = Tn, 
                _r.max = Qs, _r.min = $s, _r.parsingFlags = Wn, _r.set = de, _r.startOf = wn, _r.subtract = ar, 
                _r.toArray = xn, _r.toObject = En, _r.toDate = jn, _r.toISOString = pn, _r.inspect = yn, 
                _r.toJSON = On, _r.toString = Mn, _r.unix = Hn, _r.valueOf = Sn, _r.creationData = Fn, 
                _r.year = gs, _r.isLeapYear = ae, _r.weekYear = zn, _r.isoWeekYear = Cn, _r.quarter = _r.quarters = Un, 
                _r.month = Me, _r.daysInMonth = pe, _r.week = _r.weeks = je, _r.isoWeek = _r.isoWeeks = xe, 
                _r.weeksInYear = In, _r.isoWeeksInYear = Rn, _r.date = rr, _r.day = _r.days = ze, 
                _r.weekday = Ce, _r.isoWeekday = Re, _r.dayOfYear = Vn, _r.hour = _r.hours = Fs, 
                _r.minute = _r.minutes = ir, _r.second = _r.seconds = or, _r.millisecond = _r.milliseconds = ur, 
                _r.utcOffset = Rt, _r.utc = Jt, _r.local = qt, _r.parseZone = Ut, _r.hasAlignedHourOffset = Vt, 
                _r.isDST = Gt, _r.isLocal = $t, _r.isUtcOffset = Qt, _r.isUtc = Kt, _r.isUTC = Kt, 
                _r.zoneAbbr = Bn, _r.zoneName = $n, _r.dates = T("dates accessor is deprecated. Use date instead.", rr), 
                _r.months = T("months accessor is deprecated. Use month instead", Me), _r.years = T("years accessor is deprecated. Use year instead", gs), 
                _r.zone = T("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", It), 
                _r.isDSTShifted = T("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", Bt);
                var lr = j.prototype;
                lr.calendar = x, lr.longDateFormat = E, lr.invalidDate = O, lr.ordinal = P, lr.preparse = Zn, 
                lr.postformat = Zn, lr.relativeTime = W, lr.pastFuture = A, lr.set = S, lr.months = le, 
                lr.monthsShort = me, lr.monthsParse = he, lr.monthsRegex = Le, lr.monthsShortRegex = ye, 
                lr.week = be, lr.firstDayOfYear = He, lr.firstDayOfWeek = Se, lr.weekdays = Pe, 
                lr.weekdaysMin = Ae, lr.weekdaysShort = We, lr.weekdaysParse = Ne, lr.weekdaysRegex = Ie, 
                lr.weekdaysShortRegex = Je, lr.weekdaysMinRegex = qe, lr.isPM = Qe, lr.meridiem = Ke, 
                tt("en", {
                    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                    ordinal: function(e) {
                        var t = e % 10, n = 1 === g(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                        return e + n;
                    }
                }), t.lang = T("moment.lang is deprecated. Use moment.locale instead.", tt), t.langData = T("moment.langData is deprecated. Use moment.localeData instead.", st);
                var mr = Math.abs, cr = pa("ms"), hr = pa("s"), fr = pa("m"), Mr = pa("h"), pr = pa("d"), yr = pa("w"), Lr = pa("M"), Yr = pa("y"), kr = Ya("milliseconds"), gr = Ya("seconds"), vr = Ya("minutes"), Dr = Ya("hours"), Tr = Ya("days"), wr = Ya("months"), br = Ya("years"), Sr = Math.round, Hr = {
                    ss: 44,
                    s: 45,
                    m: 45,
                    h: 22,
                    d: 26,
                    M: 11
                }, jr = Math.abs, xr = Pt.prototype;
                return xr.isValid = Et, xr.abs = oa, xr.add = ua, xr.subtract = _a, xr.as = fa, 
                xr.asMilliseconds = cr, xr.asSeconds = hr, xr.asMinutes = fr, xr.asHours = Mr, xr.asDays = pr, 
                xr.asWeeks = yr, xr.asMonths = Lr, xr.asYears = Yr, xr.valueOf = Ma, xr._bubble = ma, 
                xr.clone = ya, xr.get = La, xr.milliseconds = kr, xr.seconds = gr, xr.minutes = vr, 
                xr.hours = Dr, xr.days = Tr, xr.weeks = ka, xr.months = wr, xr.years = br, xr.humanize = wa, 
                xr.toISOString = Sa, xr.toString = Sa, xr.toJSON = Sa, xr.locale = Dn, xr.localeData = Tn, 
                xr.toIsoString = T("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", Sa), 
                xr.lang = sr, J("X", 0, 0, "unix"), J("x", 0, 0, "valueOf"), B("x", rs), B("X", ds), 
                Z("X", function(e, t, n) {
                    n._d = new Date(1e3 * parseFloat(e, 10));
                }), Z("x", function(e, t, n) {
                    n._d = new Date(g(e));
                }), t.version = "2.22.2", a(bt), t.fn = _r, t.min = Ht, t.max = jt, t.now = Ks, 
                t.utc = c, t.unix = Qn, t.months = na, t.isDate = u, t.locale = tt, t.invalid = p, 
                t.duration = Zt, t.isMoment = Y, t.weekdays = sa, t.parseZone = Kn, t.localeData = st, 
                t.isDuration = Wt, t.monthsShort = aa, t.weekdaysMin = ia, t.defineLocale = nt, 
                t.updateLocale = at, t.locales = rt, t.weekdaysShort = ra, t.normalizeUnits = N, 
                t.relativeTimeRounding = Da, t.relativeTimeThreshold = Ta, t.calendarFormat = sn, 
                t.prototype = _r, t.HTML5_FMT = {
                    DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
                    DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
                    DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
                    DATE: "YYYY-MM-DD",
                    TIME: "HH:mm",
                    TIME_SECONDS: "HH:mm:ss",
                    TIME_MS: "HH:mm:ss.SSS",
                    WEEK: "YYYY-[W]WW",
                    MONTH: "YYYY-MM"
                }, t;
            });
        }).call(t, n(9)(e));
    },
    9: function(e, t) {
        e.exports = function(e) {
            return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children = [], 
            e.webpackPolyfill = 1), e;
        };
    },
    10: function(e, t, n) {
        function a(e) {
            return n(s(e));
        }
        function s(e) {
            return r[e] || function() {
                throw new Error("Cannot find module '" + e + "'.");
            }();
        }
        var r = {
            "./af": 11,
            "./af.js": 11,
            "./ar": 12,
            "./ar-dz": 13,
            "./ar-dz.js": 13,
            "./ar-kw": 14,
            "./ar-kw.js": 14,
            "./ar-ly": 15,
            "./ar-ly.js": 15,
            "./ar-ma": 16,
            "./ar-ma.js": 16,
            "./ar-sa": 17,
            "./ar-sa.js": 17,
            "./ar-tn": 18,
            "./ar-tn.js": 18,
            "./ar.js": 12,
            "./az": 19,
            "./az.js": 19,
            "./be": 20,
            "./be.js": 20,
            "./bg": 21,
            "./bg.js": 21,
            "./bm": 22,
            "./bm.js": 22,
            "./bn": 23,
            "./bn.js": 23,
            "./bo": 24,
            "./bo.js": 24,
            "./br": 25,
            "./br.js": 25,
            "./bs": 26,
            "./bs.js": 26,
            "./ca": 27,
            "./ca.js": 27,
            "./cs": 28,
            "./cs.js": 28,
            "./cv": 29,
            "./cv.js": 29,
            "./cy": 30,
            "./cy.js": 30,
            "./da": 31,
            "./da.js": 31,
            "./de": 32,
            "./de-at": 33,
            "./de-at.js": 33,
            "./de-ch": 34,
            "./de-ch.js": 34,
            "./de.js": 32,
            "./dv": 35,
            "./dv.js": 35,
            "./el": 36,
            "./el.js": 36,
            "./en-au": 37,
            "./en-au.js": 37,
            "./en-ca": 38,
            "./en-ca.js": 38,
            "./en-gb": 39,
            "./en-gb.js": 39,
            "./en-ie": 40,
            "./en-ie.js": 40,
            "./en-il": 41,
            "./en-il.js": 41,
            "./en-nz": 42,
            "./en-nz.js": 42,
            "./eo": 43,
            "./eo.js": 43,
            "./es": 44,
            "./es-do": 45,
            "./es-do.js": 45,
            "./es-us": 46,
            "./es-us.js": 46,
            "./es.js": 44,
            "./et": 47,
            "./et.js": 47,
            "./eu": 48,
            "./eu.js": 48,
            "./fa": 49,
            "./fa.js": 49,
            "./fi": 50,
            "./fi.js": 50,
            "./fo": 51,
            "./fo.js": 51,
            "./fr": 52,
            "./fr-ca": 53,
            "./fr-ca.js": 53,
            "./fr-ch": 54,
            "./fr-ch.js": 54,
            "./fr.js": 52,
            "./fy": 55,
            "./fy.js": 55,
            "./gd": 56,
            "./gd.js": 56,
            "./gl": 57,
            "./gl.js": 57,
            "./gom-latn": 58,
            "./gom-latn.js": 58,
            "./gu": 59,
            "./gu.js": 59,
            "./he": 60,
            "./he.js": 60,
            "./hi": 61,
            "./hi.js": 61,
            "./hr": 62,
            "./hr.js": 62,
            "./hu": 63,
            "./hu.js": 63,
            "./hy-am": 64,
            "./hy-am.js": 64,
            "./id": 65,
            "./id.js": 65,
            "./is": 66,
            "./is.js": 66,
            "./it": 67,
            "./it.js": 67,
            "./ja": 68,
            "./ja.js": 68,
            "./jv": 69,
            "./jv.js": 69,
            "./ka": 70,
            "./ka.js": 70,
            "./kk": 71,
            "./kk.js": 71,
            "./km": 72,
            "./km.js": 72,
            "./kn": 73,
            "./kn.js": 73,
            "./ko": 74,
            "./ko.js": 74,
            "./ky": 75,
            "./ky.js": 75,
            "./lb": 76,
            "./lb.js": 76,
            "./lo": 77,
            "./lo.js": 77,
            "./lt": 78,
            "./lt.js": 78,
            "./lv": 79,
            "./lv.js": 79,
            "./me": 80,
            "./me.js": 80,
            "./mi": 81,
            "./mi.js": 81,
            "./mk": 82,
            "./mk.js": 82,
            "./ml": 83,
            "./ml.js": 83,
            "./mn": 84,
            "./mn.js": 84,
            "./mr": 85,
            "./mr.js": 85,
            "./ms": 86,
            "./ms-my": 87,
            "./ms-my.js": 87,
            "./ms.js": 86,
            "./mt": 88,
            "./mt.js": 88,
            "./my": 89,
            "./my.js": 89,
            "./nb": 90,
            "./nb.js": 90,
            "./ne": 91,
            "./ne.js": 91,
            "./nl": 92,
            "./nl-be": 93,
            "./nl-be.js": 93,
            "./nl.js": 92,
            "./nn": 94,
            "./nn.js": 94,
            "./pa-in": 95,
            "./pa-in.js": 95,
            "./pl": 96,
            "./pl.js": 96,
            "./pt": 97,
            "./pt-br": 98,
            "./pt-br.js": 98,
            "./pt.js": 97,
            "./ro": 99,
            "./ro.js": 99,
            "./ru": 100,
            "./ru.js": 100,
            "./sd": 101,
            "./sd.js": 101,
            "./se": 102,
            "./se.js": 102,
            "./si": 103,
            "./si.js": 103,
            "./sk": 104,
            "./sk.js": 104,
            "./sl": 105,
            "./sl.js": 105,
            "./sq": 106,
            "./sq.js": 106,
            "./sr": 107,
            "./sr-cyrl": 108,
            "./sr-cyrl.js": 108,
            "./sr.js": 107,
            "./ss": 109,
            "./ss.js": 109,
            "./sv": 110,
            "./sv.js": 110,
            "./sw": 111,
            "./sw.js": 111,
            "./ta": 112,
            "./ta.js": 112,
            "./te": 113,
            "./te.js": 113,
            "./tet": 114,
            "./tet.js": 114,
            "./tg": 115,
            "./tg.js": 115,
            "./th": 116,
            "./th.js": 116,
            "./tl-ph": 117,
            "./tl-ph.js": 117,
            "./tlh": 118,
            "./tlh.js": 118,
            "./tr": 119,
            "./tr.js": 119,
            "./tzl": 120,
            "./tzl.js": 120,
            "./tzm": 121,
            "./tzm-latn": 122,
            "./tzm-latn.js": 122,
            "./tzm.js": 121,
            "./ug-cn": 123,
            "./ug-cn.js": 123,
            "./uk": 124,
            "./uk.js": 124,
            "./ur": 125,
            "./ur.js": 125,
            "./uz": 126,
            "./uz-latn": 127,
            "./uz-latn.js": 127,
            "./uz.js": 126,
            "./vi": 128,
            "./vi.js": 128,
            "./x-pseudo": 129,
            "./x-pseudo.js": 129,
            "./yo": 130,
            "./yo.js": 130,
            "./zh-cn": 131,
            "./zh-cn.js": 131,
            "./zh-hk": 132,
            "./zh-hk.js": 132,
            "./zh-tw": 133,
            "./zh-tw.js": 133
        };
        a.keys = function() {
            return Object.keys(r);
        }, a.resolve = s, e.exports = a, a.id = 10;
    },
    11: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("af", {
                months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),
                monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),
                weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),
                weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
                weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
                meridiemParse: /vm|nm/i,
                isPM: function(e) {
                    return /^nm$/i.test(e);
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? n ? "vm" : "VM" : n ? "nm" : "NM";
                },
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Vandag om] LT",
                    nextDay: "[Môre om] LT",
                    nextWeek: "dddd [om] LT",
                    lastDay: "[Gister om] LT",
                    lastWeek: "[Laas] dddd [om] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "oor %s",
                    past: "%s gelede",
                    s: "'n paar sekondes",
                    ss: "%d sekondes",
                    m: "'n minuut",
                    mm: "%d minute",
                    h: "'n uur",
                    hh: "%d ure",
                    d: "'n dag",
                    dd: "%d dae",
                    M: "'n maand",
                    MM: "%d maande",
                    y: "'n jaar",
                    yy: "%d jaar"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
                ordinal: function(e) {
                    return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    12: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "١",
                "2": "٢",
                "3": "٣",
                "4": "٤",
                "5": "٥",
                "6": "٦",
                "7": "٧",
                "8": "٨",
                "9": "٩",
                "0": "٠"
            }, n = {
                "١": "1",
                "٢": "2",
                "٣": "3",
                "٤": "4",
                "٥": "5",
                "٦": "6",
                "٧": "7",
                "٨": "8",
                "٩": "9",
                "٠": "0"
            }, a = function(e) {
                return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5;
            }, s = {
                s: [ "أقل من ثانية", "ثانية واحدة", [ "ثانيتان", "ثانيتين" ], "%d ثوان", "%d ثانية", "%d ثانية" ],
                m: [ "أقل من دقيقة", "دقيقة واحدة", [ "دقيقتان", "دقيقتين" ], "%d دقائق", "%d دقيقة", "%d دقيقة" ],
                h: [ "أقل من ساعة", "ساعة واحدة", [ "ساعتان", "ساعتين" ], "%d ساعات", "%d ساعة", "%d ساعة" ],
                d: [ "أقل من يوم", "يوم واحد", [ "يومان", "يومين" ], "%d أيام", "%d يومًا", "%d يوم" ],
                M: [ "أقل من شهر", "شهر واحد", [ "شهران", "شهرين" ], "%d أشهر", "%d شهرا", "%d شهر" ],
                y: [ "أقل من عام", "عام واحد", [ "عامان", "عامين" ], "%d أعوام", "%d عامًا", "%d عام" ]
            }, r = function(e) {
                return function(t, n, r, i) {
                    var o = a(t), d = s[e][a(t)];
                    return 2 === o && (d = d[n ? 0 : 1]), d.replace(/%d/i, t);
                };
            }, i = [ "يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر" ], o = e.defineLocale("ar", {
                months: i,
                monthsShort: i,
                weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
                weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
                weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "D/‏M/‏YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                meridiemParse: /ص|م/,
                isPM: function(e) {
                    return "م" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "ص" : "م";
                },
                calendar: {
                    sameDay: "[اليوم عند الساعة] LT",
                    nextDay: "[غدًا عند الساعة] LT",
                    nextWeek: "dddd [عند الساعة] LT",
                    lastDay: "[أمس عند الساعة] LT",
                    lastWeek: "dddd [عند الساعة] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "بعد %s",
                    past: "منذ %s",
                    s: r("s"),
                    ss: r("s"),
                    m: r("m"),
                    mm: r("m"),
                    h: r("h"),
                    hh: r("h"),
                    d: r("d"),
                    dd: r("d"),
                    M: r("M"),
                    MM: r("M"),
                    y: r("y"),
                    yy: r("y")
                },
                preparse: function(e) {
                    return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(e) {
                        return n[e];
                    }).replace(/،/g, ",");
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    }).replace(/,/g, "،");
                },
                week: {
                    dow: 6,
                    doy: 12
                }
            });
            return o;
        });
    },
    13: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ar-dz", {
                months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
                monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
                weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
                weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
                weekdaysMin: "أح_إث_ثلا_أر_خم_جم_سب".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[اليوم على الساعة] LT",
                    nextDay: "[غدا على الساعة] LT",
                    nextWeek: "dddd [على الساعة] LT",
                    lastDay: "[أمس على الساعة] LT",
                    lastWeek: "dddd [على الساعة] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "في %s",
                    past: "منذ %s",
                    s: "ثوان",
                    ss: "%d ثانية",
                    m: "دقيقة",
                    mm: "%d دقائق",
                    h: "ساعة",
                    hh: "%d ساعات",
                    d: "يوم",
                    dd: "%d أيام",
                    M: "شهر",
                    MM: "%d أشهر",
                    y: "سنة",
                    yy: "%d سنوات"
                },
                week: {
                    dow: 0,
                    doy: 4
                }
            });
            return t;
        });
    },
    14: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ar-kw", {
                months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
                monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
                weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
                weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
                weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[اليوم على الساعة] LT",
                    nextDay: "[غدا على الساعة] LT",
                    nextWeek: "dddd [على الساعة] LT",
                    lastDay: "[أمس على الساعة] LT",
                    lastWeek: "dddd [على الساعة] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "في %s",
                    past: "منذ %s",
                    s: "ثوان",
                    ss: "%d ثانية",
                    m: "دقيقة",
                    mm: "%d دقائق",
                    h: "ساعة",
                    hh: "%d ساعات",
                    d: "يوم",
                    dd: "%d أيام",
                    M: "شهر",
                    MM: "%d أشهر",
                    y: "سنة",
                    yy: "%d سنوات"
                },
                week: {
                    dow: 0,
                    doy: 12
                }
            });
            return t;
        });
    },
    15: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "1",
                "2": "2",
                "3": "3",
                "4": "4",
                "5": "5",
                "6": "6",
                "7": "7",
                "8": "8",
                "9": "9",
                "0": "0"
            }, n = function(e) {
                return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5;
            }, a = {
                s: [ "أقل من ثانية", "ثانية واحدة", [ "ثانيتان", "ثانيتين" ], "%d ثوان", "%d ثانية", "%d ثانية" ],
                m: [ "أقل من دقيقة", "دقيقة واحدة", [ "دقيقتان", "دقيقتين" ], "%d دقائق", "%d دقيقة", "%d دقيقة" ],
                h: [ "أقل من ساعة", "ساعة واحدة", [ "ساعتان", "ساعتين" ], "%d ساعات", "%d ساعة", "%d ساعة" ],
                d: [ "أقل من يوم", "يوم واحد", [ "يومان", "يومين" ], "%d أيام", "%d يومًا", "%d يوم" ],
                M: [ "أقل من شهر", "شهر واحد", [ "شهران", "شهرين" ], "%d أشهر", "%d شهرا", "%d شهر" ],
                y: [ "أقل من عام", "عام واحد", [ "عامان", "عامين" ], "%d أعوام", "%d عامًا", "%d عام" ]
            }, s = function(e) {
                return function(t, s, r, i) {
                    var o = n(t), d = a[e][n(t)];
                    return 2 === o && (d = d[s ? 0 : 1]), d.replace(/%d/i, t);
                };
            }, r = [ "يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر" ], i = e.defineLocale("ar-ly", {
                months: r,
                monthsShort: r,
                weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
                weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
                weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "D/‏M/‏YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                meridiemParse: /ص|م/,
                isPM: function(e) {
                    return "م" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "ص" : "م";
                },
                calendar: {
                    sameDay: "[اليوم عند الساعة] LT",
                    nextDay: "[غدًا عند الساعة] LT",
                    nextWeek: "dddd [عند الساعة] LT",
                    lastDay: "[أمس عند الساعة] LT",
                    lastWeek: "dddd [عند الساعة] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "بعد %s",
                    past: "منذ %s",
                    s: s("s"),
                    ss: s("s"),
                    m: s("m"),
                    mm: s("m"),
                    h: s("h"),
                    hh: s("h"),
                    d: s("d"),
                    dd: s("d"),
                    M: s("M"),
                    MM: s("M"),
                    y: s("y"),
                    yy: s("y")
                },
                preparse: function(e) {
                    return e.replace(/،/g, ",");
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    }).replace(/,/g, "،");
                },
                week: {
                    dow: 6,
                    doy: 12
                }
            });
            return i;
        });
    },
    16: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ar-ma", {
                months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
                monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
                weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
                weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
                weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[اليوم على الساعة] LT",
                    nextDay: "[غدا على الساعة] LT",
                    nextWeek: "dddd [على الساعة] LT",
                    lastDay: "[أمس على الساعة] LT",
                    lastWeek: "dddd [على الساعة] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "في %s",
                    past: "منذ %s",
                    s: "ثوان",
                    ss: "%d ثانية",
                    m: "دقيقة",
                    mm: "%d دقائق",
                    h: "ساعة",
                    hh: "%d ساعات",
                    d: "يوم",
                    dd: "%d أيام",
                    M: "شهر",
                    MM: "%d أشهر",
                    y: "سنة",
                    yy: "%d سنوات"
                },
                week: {
                    dow: 6,
                    doy: 12
                }
            });
            return t;
        });
    },
    17: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "١",
                "2": "٢",
                "3": "٣",
                "4": "٤",
                "5": "٥",
                "6": "٦",
                "7": "٧",
                "8": "٨",
                "9": "٩",
                "0": "٠"
            }, n = {
                "١": "1",
                "٢": "2",
                "٣": "3",
                "٤": "4",
                "٥": "5",
                "٦": "6",
                "٧": "7",
                "٨": "8",
                "٩": "9",
                "٠": "0"
            }, a = e.defineLocale("ar-sa", {
                months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
                monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
                weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
                weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
                weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                meridiemParse: /ص|م/,
                isPM: function(e) {
                    return "م" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "ص" : "م";
                },
                calendar: {
                    sameDay: "[اليوم على الساعة] LT",
                    nextDay: "[غدا على الساعة] LT",
                    nextWeek: "dddd [على الساعة] LT",
                    lastDay: "[أمس على الساعة] LT",
                    lastWeek: "dddd [على الساعة] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "في %s",
                    past: "منذ %s",
                    s: "ثوان",
                    ss: "%d ثانية",
                    m: "دقيقة",
                    mm: "%d دقائق",
                    h: "ساعة",
                    hh: "%d ساعات",
                    d: "يوم",
                    dd: "%d أيام",
                    M: "شهر",
                    MM: "%d أشهر",
                    y: "سنة",
                    yy: "%d سنوات"
                },
                preparse: function(e) {
                    return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(e) {
                        return n[e];
                    }).replace(/،/g, ",");
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    }).replace(/,/g, "،");
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    18: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ar-tn", {
                months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
                monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
                weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
                weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
                weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[اليوم على الساعة] LT",
                    nextDay: "[غدا على الساعة] LT",
                    nextWeek: "dddd [على الساعة] LT",
                    lastDay: "[أمس على الساعة] LT",
                    lastWeek: "dddd [على الساعة] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "في %s",
                    past: "منذ %s",
                    s: "ثوان",
                    ss: "%d ثانية",
                    m: "دقيقة",
                    mm: "%d دقائق",
                    h: "ساعة",
                    hh: "%d ساعات",
                    d: "يوم",
                    dd: "%d أيام",
                    M: "شهر",
                    MM: "%d أشهر",
                    y: "سنة",
                    yy: "%d سنوات"
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    19: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                1: "-inci",
                5: "-inci",
                8: "-inci",
                70: "-inci",
                80: "-inci",
                2: "-nci",
                7: "-nci",
                20: "-nci",
                50: "-nci",
                3: "-üncü",
                4: "-üncü",
                100: "-üncü",
                6: "-ncı",
                9: "-uncu",
                10: "-uncu",
                30: "-uncu",
                60: "-ıncı",
                90: "-ıncı"
            }, n = e.defineLocale("az", {
                months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
                monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
                weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
                weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
                weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[bugün saat] LT",
                    nextDay: "[sabah saat] LT",
                    nextWeek: "[gələn həftə] dddd [saat] LT",
                    lastDay: "[dünən] LT",
                    lastWeek: "[keçən həftə] dddd [saat] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s sonra",
                    past: "%s əvvəl",
                    s: "birneçə saniyə",
                    ss: "%d saniyə",
                    m: "bir dəqiqə",
                    mm: "%d dəqiqə",
                    h: "bir saat",
                    hh: "%d saat",
                    d: "bir gün",
                    dd: "%d gün",
                    M: "bir ay",
                    MM: "%d ay",
                    y: "bir il",
                    yy: "%d il"
                },
                meridiemParse: /gecə|səhər|gündüz|axşam/,
                isPM: function(e) {
                    return /^(gündüz|axşam)$/.test(e);
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "gecə" : e < 12 ? "səhər" : e < 17 ? "gündüz" : "axşam";
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
                ordinal: function(e) {
                    if (0 === e) return e + "-ıncı";
                    var n = e % 10, a = e % 100 - n, s = e >= 100 ? 100 : null;
                    return e + (t[n] || t[a] || t[s]);
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    20: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t) {
                var n = e.split("_");
                return t % 10 === 1 && t % 100 !== 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2];
            }
            function n(e, n, a) {
                var s = {
                    ss: n ? "секунда_секунды_секунд" : "секунду_секунды_секунд",
                    mm: n ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін",
                    hh: n ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін",
                    dd: "дзень_дні_дзён",
                    MM: "месяц_месяцы_месяцаў",
                    yy: "год_гады_гадоў"
                };
                return "m" === a ? n ? "хвіліна" : "хвіліну" : "h" === a ? n ? "гадзіна" : "гадзіну" : e + " " + t(s[a], +e);
            }
            var a = e.defineLocale("be", {
                months: {
                    format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),
                    standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")
                },
                monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),
                weekdays: {
                    format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),
                    standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),
                    isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/
                },
                weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"),
                weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY г.",
                    LLL: "D MMMM YYYY г., HH:mm",
                    LLLL: "dddd, D MMMM YYYY г., HH:mm"
                },
                calendar: {
                    sameDay: "[Сёння ў] LT",
                    nextDay: "[Заўтра ў] LT",
                    lastDay: "[Учора ў] LT",
                    nextWeek: function() {
                        return "[У] dddd [ў] LT";
                    },
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                          case 3:
                          case 5:
                          case 6:
                            return "[У мінулую] dddd [ў] LT";

                          case 1:
                          case 2:
                          case 4:
                            return "[У мінулы] dddd [ў] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "праз %s",
                    past: "%s таму",
                    s: "некалькі секунд",
                    m: n,
                    mm: n,
                    h: n,
                    hh: n,
                    d: "дзень",
                    dd: n,
                    M: "месяц",
                    MM: n,
                    y: "год",
                    yy: n
                },
                meridiemParse: /ночы|раніцы|дня|вечара/,
                isPM: function(e) {
                    return /^(дня|вечара)$/.test(e);
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "ночы" : e < 12 ? "раніцы" : e < 17 ? "дня" : "вечара";
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "M":
                      case "d":
                      case "DDD":
                      case "w":
                      case "W":
                        return e % 10 !== 2 && e % 10 !== 3 || e % 100 === 12 || e % 100 === 13 ? e + "-ы" : e + "-і";

                      case "D":
                        return e + "-га";

                      default:
                        return e;
                    }
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return a;
        });
    },
    21: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("bg", {
                months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
                monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
                weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
                weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"),
                weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "D.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY H:mm",
                    LLLL: "dddd, D MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[Днес в] LT",
                    nextDay: "[Утре в] LT",
                    nextWeek: "dddd [в] LT",
                    lastDay: "[Вчера в] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                          case 3:
                          case 6:
                            return "[В изминалата] dddd [в] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[В изминалия] dddd [в] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "след %s",
                    past: "преди %s",
                    s: "няколко секунди",
                    ss: "%d секунди",
                    m: "минута",
                    mm: "%d минути",
                    h: "час",
                    hh: "%d часа",
                    d: "ден",
                    dd: "%d дни",
                    M: "месец",
                    MM: "%d месеца",
                    y: "година",
                    yy: "%d години"
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
                ordinal: function(e) {
                    var t = e % 10, n = e % 100;
                    return 0 === e ? e + "-ев" : 0 === n ? e + "-ен" : n > 10 && n < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти";
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    22: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("bm", {
                months: "Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),
                monthsShort: "Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),
                weekdays: "Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),
                weekdaysShort: "Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),
                weekdaysMin: "Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "MMMM [tile] D [san] YYYY",
                    LLL: "MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",
                    LLLL: "dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"
                },
                calendar: {
                    sameDay: "[Bi lɛrɛ] LT",
                    nextDay: "[Sini lɛrɛ] LT",
                    nextWeek: "dddd [don lɛrɛ] LT",
                    lastDay: "[Kunu lɛrɛ] LT",
                    lastWeek: "dddd [tɛmɛnen lɛrɛ] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s kɔnɔ",
                    past: "a bɛ %s bɔ",
                    s: "sanga dama dama",
                    ss: "sekondi %d",
                    m: "miniti kelen",
                    mm: "miniti %d",
                    h: "lɛrɛ kelen",
                    hh: "lɛrɛ %d",
                    d: "tile kelen",
                    dd: "tile %d",
                    M: "kalo kelen",
                    MM: "kalo %d",
                    y: "san kelen",
                    yy: "san %d"
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    23: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "১",
                "2": "২",
                "3": "৩",
                "4": "৪",
                "5": "৫",
                "6": "৬",
                "7": "৭",
                "8": "৮",
                "9": "৯",
                "0": "০"
            }, n = {
                "১": "1",
                "২": "2",
                "৩": "3",
                "৪": "4",
                "৫": "5",
                "৬": "6",
                "৭": "7",
                "৮": "8",
                "৯": "9",
                "০": "0"
            }, a = e.defineLocale("bn", {
                months: "জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),
                monthsShort: "জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),
                weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),
                weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),
                weekdaysMin: "রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),
                longDateFormat: {
                    LT: "A h:mm সময়",
                    LTS: "A h:mm:ss সময়",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm সময়",
                    LLLL: "dddd, D MMMM YYYY, A h:mm সময়"
                },
                calendar: {
                    sameDay: "[আজ] LT",
                    nextDay: "[আগামীকাল] LT",
                    nextWeek: "dddd, LT",
                    lastDay: "[গতকাল] LT",
                    lastWeek: "[গত] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s পরে",
                    past: "%s আগে",
                    s: "কয়েক সেকেন্ড",
                    ss: "%d সেকেন্ড",
                    m: "এক মিনিট",
                    mm: "%d মিনিট",
                    h: "এক ঘন্টা",
                    hh: "%d ঘন্টা",
                    d: "এক দিন",
                    dd: "%d দিন",
                    M: "এক মাস",
                    MM: "%d মাস",
                    y: "এক বছর",
                    yy: "%d বছর"
                },
                preparse: function(e) {
                    return e.replace(/[১২৩৪৫৬৭৮৯০]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "রাত" === t && e >= 4 || "দুপুর" === t && e < 5 || "বিকাল" === t ? e + 12 : e;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "রাত" : e < 10 ? "সকাল" : e < 17 ? "দুপুর" : e < 20 ? "বিকাল" : "রাত";
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    24: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "༡",
                "2": "༢",
                "3": "༣",
                "4": "༤",
                "5": "༥",
                "6": "༦",
                "7": "༧",
                "8": "༨",
                "9": "༩",
                "0": "༠"
            }, n = {
                "༡": "1",
                "༢": "2",
                "༣": "3",
                "༤": "4",
                "༥": "5",
                "༦": "6",
                "༧": "7",
                "༨": "8",
                "༩": "9",
                "༠": "0"
            }, a = e.defineLocale("bo", {
                months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
                monthsShort: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
                weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),
                weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
                weekdaysMin: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
                longDateFormat: {
                    LT: "A h:mm",
                    LTS: "A h:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm",
                    LLLL: "dddd, D MMMM YYYY, A h:mm"
                },
                calendar: {
                    sameDay: "[དི་རིང] LT",
                    nextDay: "[སང་ཉིན] LT",
                    nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT",
                    lastDay: "[ཁ་སང] LT",
                    lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s ལ་",
                    past: "%s སྔན་ལ",
                    s: "ལམ་སང",
                    ss: "%d སྐར་ཆ།",
                    m: "སྐར་མ་གཅིག",
                    mm: "%d སྐར་མ",
                    h: "ཆུ་ཚོད་གཅིག",
                    hh: "%d ཆུ་ཚོད",
                    d: "ཉིན་གཅིག",
                    dd: "%d ཉིན་",
                    M: "ཟླ་བ་གཅིག",
                    MM: "%d ཟླ་བ",
                    y: "ལོ་གཅིག",
                    yy: "%d ལོ"
                },
                preparse: function(e) {
                    return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "མཚན་མོ" === t && e >= 4 || "ཉིན་གུང" === t && e < 5 || "དགོང་དག" === t ? e + 12 : e;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "མཚན་མོ" : e < 10 ? "ཞོགས་ཀས" : e < 17 ? "ཉིན་གུང" : e < 20 ? "དགོང་དག" : "མཚན་མོ";
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    25: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n) {
                var a = {
                    mm: "munutenn",
                    MM: "miz",
                    dd: "devezh"
                };
                return e + " " + s(a[n], e);
            }
            function n(e) {
                switch (a(e)) {
                  case 1:
                  case 3:
                  case 4:
                  case 5:
                  case 9:
                    return e + " bloaz";

                  default:
                    return e + " vloaz";
                }
            }
            function a(e) {
                return e > 9 ? a(e % 10) : e;
            }
            function s(e, t) {
                return 2 === t ? r(e) : e;
            }
            function r(e) {
                var t = {
                    m: "v",
                    b: "v",
                    d: "z"
                };
                return void 0 === t[e.charAt(0)] ? e : t[e.charAt(0)] + e.substring(1);
            }
            var i = e.defineLocale("br", {
                months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
                monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
                weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
                weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
                weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "h[e]mm A",
                    LTS: "h[e]mm:ss A",
                    L: "DD/MM/YYYY",
                    LL: "D [a viz] MMMM YYYY",
                    LLL: "D [a viz] MMMM YYYY h[e]mm A",
                    LLLL: "dddd, D [a viz] MMMM YYYY h[e]mm A"
                },
                calendar: {
                    sameDay: "[Hiziv da] LT",
                    nextDay: "[Warc'hoazh da] LT",
                    nextWeek: "dddd [da] LT",
                    lastDay: "[Dec'h da] LT",
                    lastWeek: "dddd [paset da] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "a-benn %s",
                    past: "%s 'zo",
                    s: "un nebeud segondennoù",
                    ss: "%d eilenn",
                    m: "ur vunutenn",
                    mm: t,
                    h: "un eur",
                    hh: "%d eur",
                    d: "un devezh",
                    dd: t,
                    M: "ur miz",
                    MM: t,
                    y: "ur bloaz",
                    yy: n
                },
                dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
                ordinal: function(e) {
                    var t = 1 === e ? "añ" : "vet";
                    return e + t;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return i;
        });
    },
    26: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n) {
                var a = e + " ";
                switch (n) {
                  case "ss":
                    return a += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";

                  case "m":
                    return t ? "jedna minuta" : "jedne minute";

                  case "mm":
                    return a += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";

                  case "h":
                    return t ? "jedan sat" : "jednog sata";

                  case "hh":
                    return a += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";

                  case "dd":
                    return a += 1 === e ? "dan" : "dana";

                  case "MM":
                    return a += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";

                  case "yy":
                    return a += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina";
                }
            }
            var n = e.defineLocale("bs", {
                months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),
                monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),
                monthsParseExact: !0,
                weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
                weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
                weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd, D. MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[danas u] LT",
                    nextDay: "[sutra u] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[u] [nedjelju] [u] LT";

                          case 3:
                            return "[u] [srijedu] [u] LT";

                          case 6:
                            return "[u] [subotu] [u] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[u] dddd [u] LT";
                        }
                    },
                    lastDay: "[jučer u] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                          case 3:
                            return "[prošlu] dddd [u] LT";

                          case 6:
                            return "[prošle] [subote] [u] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[prošli] dddd [u] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "za %s",
                    past: "prije %s",
                    s: "par sekundi",
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: "dan",
                    dd: t,
                    M: "mjesec",
                    MM: t,
                    y: "godinu",
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    27: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ca", {
                months: {
                    standalone: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
                    format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),
                    isFormat: /D[oD]?(\s)+MMMM/
                },
                monthsShort: "gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),
                monthsParseExact: !0,
                weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
                weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
                weekdaysMin: "dg_dl_dt_dc_dj_dv_ds".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM [de] YYYY",
                    ll: "D MMM YYYY",
                    LLL: "D MMMM [de] YYYY [a les] H:mm",
                    lll: "D MMM YYYY, H:mm",
                    LLLL: "dddd D MMMM [de] YYYY [a les] H:mm",
                    llll: "ddd D MMM YYYY, H:mm"
                },
                calendar: {
                    sameDay: function() {
                        return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                    },
                    nextDay: function() {
                        return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                    },
                    nextWeek: function() {
                        return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                    },
                    lastDay: function() {
                        return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                    },
                    lastWeek: function() {
                        return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "d'aquí %s",
                    past: "fa %s",
                    s: "uns segons",
                    ss: "%d segons",
                    m: "un minut",
                    mm: "%d minuts",
                    h: "una hora",
                    hh: "%d hores",
                    d: "un dia",
                    dd: "%d dies",
                    M: "un mes",
                    MM: "%d mesos",
                    y: "un any",
                    yy: "%d anys"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
                ordinal: function(e, t) {
                    var n = 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "è";
                    return "w" !== t && "W" !== t || (n = "a"), e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    28: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e) {
                return e > 1 && e < 5 && 1 !== ~~(e / 10);
            }
            function n(e, n, a, s) {
                var r = e + " ";
                switch (a) {
                  case "s":
                    return n || s ? "pár sekund" : "pár sekundami";

                  case "ss":
                    return n || s ? r + (t(e) ? "sekundy" : "sekund") : r + "sekundami";

                  case "m":
                    return n ? "minuta" : s ? "minutu" : "minutou";

                  case "mm":
                    return n || s ? r + (t(e) ? "minuty" : "minut") : r + "minutami";

                  case "h":
                    return n ? "hodina" : s ? "hodinu" : "hodinou";

                  case "hh":
                    return n || s ? r + (t(e) ? "hodiny" : "hodin") : r + "hodinami";

                  case "d":
                    return n || s ? "den" : "dnem";

                  case "dd":
                    return n || s ? r + (t(e) ? "dny" : "dní") : r + "dny";

                  case "M":
                    return n || s ? "měsíc" : "měsícem";

                  case "MM":
                    return n || s ? r + (t(e) ? "měsíce" : "měsíců") : r + "měsíci";

                  case "y":
                    return n || s ? "rok" : "rokem";

                  case "yy":
                    return n || s ? r + (t(e) ? "roky" : "let") : r + "lety";
                }
            }
            var a = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"), s = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"), r = e.defineLocale("cs", {
                months: a,
                monthsShort: s,
                monthsParse: function(e, t) {
                    var n, a = [];
                    for (n = 0; n < 12; n++) a[n] = new RegExp("^" + e[n] + "$|^" + t[n] + "$", "i");
                    return a;
                }(a, s),
                shortMonthsParse: function(e) {
                    var t, n = [];
                    for (t = 0; t < 12; t++) n[t] = new RegExp("^" + e[t] + "$", "i");
                    return n;
                }(s),
                longMonthsParse: function(e) {
                    var t, n = [];
                    for (t = 0; t < 12; t++) n[t] = new RegExp("^" + e[t] + "$", "i");
                    return n;
                }(a),
                weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
                weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"),
                weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"),
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd D. MMMM YYYY H:mm",
                    l: "D. M. YYYY"
                },
                calendar: {
                    sameDay: "[dnes v] LT",
                    nextDay: "[zítra v] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[v neděli v] LT";

                          case 1:
                          case 2:
                            return "[v] dddd [v] LT";

                          case 3:
                            return "[ve středu v] LT";

                          case 4:
                            return "[ve čtvrtek v] LT";

                          case 5:
                            return "[v pátek v] LT";

                          case 6:
                            return "[v sobotu v] LT";
                        }
                    },
                    lastDay: "[včera v] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[minulou neděli v] LT";

                          case 1:
                          case 2:
                            return "[minulé] dddd [v] LT";

                          case 3:
                            return "[minulou středu v] LT";

                          case 4:
                          case 5:
                            return "[minulý] dddd [v] LT";

                          case 6:
                            return "[minulou sobotu v] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "za %s",
                    past: "před %s",
                    s: n,
                    ss: n,
                    m: n,
                    mm: n,
                    h: n,
                    hh: n,
                    d: n,
                    dd: n,
                    M: n,
                    MM: n,
                    y: n,
                    yy: n
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    29: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("cv", {
                months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),
                monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),
                weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),
                weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),
                weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD-MM-YYYY",
                    LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",
                    LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",
                    LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"
                },
                calendar: {
                    sameDay: "[Паян] LT [сехетре]",
                    nextDay: "[Ыран] LT [сехетре]",
                    lastDay: "[Ӗнер] LT [сехетре]",
                    nextWeek: "[Ҫитес] dddd LT [сехетре]",
                    lastWeek: "[Иртнӗ] dddd LT [сехетре]",
                    sameElse: "L"
                },
                relativeTime: {
                    future: function(e) {
                        var t = /сехет$/i.exec(e) ? "рен" : /ҫул$/i.exec(e) ? "тан" : "ран";
                        return e + t;
                    },
                    past: "%s каялла",
                    s: "пӗр-ик ҫеккунт",
                    ss: "%d ҫеккунт",
                    m: "пӗр минут",
                    mm: "%d минут",
                    h: "пӗр сехет",
                    hh: "%d сехет",
                    d: "пӗр кун",
                    dd: "%d кун",
                    M: "пӗр уйӑх",
                    MM: "%d уйӑх",
                    y: "пӗр ҫул",
                    yy: "%d ҫул"
                },
                dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
                ordinal: "%d-мӗш",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    30: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("cy", {
                months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
                monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
                weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
                weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
                weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Heddiw am] LT",
                    nextDay: "[Yfory am] LT",
                    nextWeek: "dddd [am] LT",
                    lastDay: "[Ddoe am] LT",
                    lastWeek: "dddd [diwethaf am] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "mewn %s",
                    past: "%s yn ôl",
                    s: "ychydig eiliadau",
                    ss: "%d eiliad",
                    m: "munud",
                    mm: "%d munud",
                    h: "awr",
                    hh: "%d awr",
                    d: "diwrnod",
                    dd: "%d diwrnod",
                    M: "mis",
                    MM: "%d mis",
                    y: "blwyddyn",
                    yy: "%d flynedd"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
                ordinal: function(e) {
                    var t = e, n = "", a = [ "", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed" ];
                    return t > 20 ? n = 40 === t || 50 === t || 60 === t || 80 === t || 100 === t ? "fed" : "ain" : t > 0 && (n = a[t]), 
                    e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    31: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("da", {
                months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
                monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
                weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
                weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"),
                weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY HH:mm",
                    LLLL: "dddd [d.] D. MMMM YYYY [kl.] HH:mm"
                },
                calendar: {
                    sameDay: "[i dag kl.] LT",
                    nextDay: "[i morgen kl.] LT",
                    nextWeek: "på dddd [kl.] LT",
                    lastDay: "[i går kl.] LT",
                    lastWeek: "[i] dddd[s kl.] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "om %s",
                    past: "%s siden",
                    s: "få sekunder",
                    ss: "%d sekunder",
                    m: "et minut",
                    mm: "%d minutter",
                    h: "en time",
                    hh: "%d timer",
                    d: "en dag",
                    dd: "%d dage",
                    M: "en måned",
                    MM: "%d måneder",
                    y: "et år",
                    yy: "%d år"
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    32: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = {
                    m: [ "eine Minute", "einer Minute" ],
                    h: [ "eine Stunde", "einer Stunde" ],
                    d: [ "ein Tag", "einem Tag" ],
                    dd: [ e + " Tage", e + " Tagen" ],
                    M: [ "ein Monat", "einem Monat" ],
                    MM: [ e + " Monate", e + " Monaten" ],
                    y: [ "ein Jahr", "einem Jahr" ],
                    yy: [ e + " Jahre", e + " Jahren" ]
                };
                return t ? s[n][0] : s[n][1];
            }
            var n = e.defineLocale("de", {
                months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
                monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
                monthsParseExact: !0,
                weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
                weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
                weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY HH:mm",
                    LLLL: "dddd, D. MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[heute um] LT [Uhr]",
                    sameElse: "L",
                    nextDay: "[morgen um] LT [Uhr]",
                    nextWeek: "dddd [um] LT [Uhr]",
                    lastDay: "[gestern um] LT [Uhr]",
                    lastWeek: "[letzten] dddd [um] LT [Uhr]"
                },
                relativeTime: {
                    future: "in %s",
                    past: "vor %s",
                    s: "ein paar Sekunden",
                    ss: "%d Sekunden",
                    m: t,
                    mm: "%d Minuten",
                    h: t,
                    hh: "%d Stunden",
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return n;
        });
    },
    33: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = {
                    m: [ "eine Minute", "einer Minute" ],
                    h: [ "eine Stunde", "einer Stunde" ],
                    d: [ "ein Tag", "einem Tag" ],
                    dd: [ e + " Tage", e + " Tagen" ],
                    M: [ "ein Monat", "einem Monat" ],
                    MM: [ e + " Monate", e + " Monaten" ],
                    y: [ "ein Jahr", "einem Jahr" ],
                    yy: [ e + " Jahre", e + " Jahren" ]
                };
                return t ? s[n][0] : s[n][1];
            }
            var n = e.defineLocale("de-at", {
                months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
                monthsShort: "Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
                monthsParseExact: !0,
                weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
                weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
                weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY HH:mm",
                    LLLL: "dddd, D. MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[heute um] LT [Uhr]",
                    sameElse: "L",
                    nextDay: "[morgen um] LT [Uhr]",
                    nextWeek: "dddd [um] LT [Uhr]",
                    lastDay: "[gestern um] LT [Uhr]",
                    lastWeek: "[letzten] dddd [um] LT [Uhr]"
                },
                relativeTime: {
                    future: "in %s",
                    past: "vor %s",
                    s: "ein paar Sekunden",
                    ss: "%d Sekunden",
                    m: t,
                    mm: "%d Minuten",
                    h: t,
                    hh: "%d Stunden",
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return n;
        });
    },
    34: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = {
                    m: [ "eine Minute", "einer Minute" ],
                    h: [ "eine Stunde", "einer Stunde" ],
                    d: [ "ein Tag", "einem Tag" ],
                    dd: [ e + " Tage", e + " Tagen" ],
                    M: [ "ein Monat", "einem Monat" ],
                    MM: [ e + " Monate", e + " Monaten" ],
                    y: [ "ein Jahr", "einem Jahr" ],
                    yy: [ e + " Jahre", e + " Jahren" ]
                };
                return t ? s[n][0] : s[n][1];
            }
            var n = e.defineLocale("de-ch", {
                months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
                monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
                monthsParseExact: !0,
                weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
                weekdaysShort: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
                weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY HH:mm",
                    LLLL: "dddd, D. MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[heute um] LT [Uhr]",
                    sameElse: "L",
                    nextDay: "[morgen um] LT [Uhr]",
                    nextWeek: "dddd [um] LT [Uhr]",
                    lastDay: "[gestern um] LT [Uhr]",
                    lastWeek: "[letzten] dddd [um] LT [Uhr]"
                },
                relativeTime: {
                    future: "in %s",
                    past: "vor %s",
                    s: "ein paar Sekunden",
                    ss: "%d Sekunden",
                    m: t,
                    mm: "%d Minuten",
                    h: t,
                    hh: "%d Stunden",
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return n;
        });
    },
    35: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = [ "ޖެނުއަރީ", "ފެބްރުއަރީ", "މާރިޗު", "އޭޕްރީލު", "މޭ", "ޖޫން", "ޖުލައި", "އޯގަސްޓު", "ސެޕްޓެމްބަރު", "އޮކްޓޯބަރު", "ނޮވެމްބަރު", "ޑިސެމްބަރު" ], n = [ "އާދިއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު" ], a = e.defineLocale("dv", {
                months: t,
                monthsShort: t,
                weekdays: n,
                weekdaysShort: n,
                weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "D/M/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                meridiemParse: /މކ|މފ/,
                isPM: function(e) {
                    return "މފ" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "މކ" : "މފ";
                },
                calendar: {
                    sameDay: "[މިއަދު] LT",
                    nextDay: "[މާދަމާ] LT",
                    nextWeek: "dddd LT",
                    lastDay: "[އިއްޔެ] LT",
                    lastWeek: "[ފާއިތުވި] dddd LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "ތެރޭގައި %s",
                    past: "ކުރިން %s",
                    s: "ސިކުންތުކޮޅެއް",
                    ss: "d% ސިކުންތު",
                    m: "މިނިޓެއް",
                    mm: "މިނިޓު %d",
                    h: "ގަޑިއިރެއް",
                    hh: "ގަޑިއިރު %d",
                    d: "ދުވަހެއް",
                    dd: "ދުވަސް %d",
                    M: "މަހެއް",
                    MM: "މަސް %d",
                    y: "އަހަރެއް",
                    yy: "އަހަރު %d"
                },
                preparse: function(e) {
                    return e.replace(/،/g, ",");
                },
                postformat: function(e) {
                    return e.replace(/,/g, "،");
                },
                week: {
                    dow: 7,
                    doy: 12
                }
            });
            return a;
        });
    },
    36: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e) {
                return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e);
            }
            var n = e.defineLocale("el", {
                monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
                monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
                months: function(e, t) {
                    return e ? "string" == typeof t && /D/.test(t.substring(0, t.indexOf("MMMM"))) ? this._monthsGenitiveEl[e.month()] : this._monthsNominativeEl[e.month()] : this._monthsNominativeEl;
                },
                monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
                weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
                weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
                weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
                meridiem: function(e, t, n) {
                    return e > 11 ? n ? "μμ" : "ΜΜ" : n ? "πμ" : "ΠΜ";
                },
                isPM: function(e) {
                    return "μ" === (e + "").toLowerCase()[0];
                },
                meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY h:mm A",
                    LLLL: "dddd, D MMMM YYYY h:mm A"
                },
                calendarEl: {
                    sameDay: "[Σήμερα {}] LT",
                    nextDay: "[Αύριο {}] LT",
                    nextWeek: "dddd [{}] LT",
                    lastDay: "[Χθες {}] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 6:
                            return "[το προηγούμενο] dddd [{}] LT";

                          default:
                            return "[την προηγούμενη] dddd [{}] LT";
                        }
                    },
                    sameElse: "L"
                },
                calendar: function(e, n) {
                    var a = this._calendarEl[e], s = n && n.hours();
                    return t(a) && (a = a.apply(n)), a.replace("{}", s % 12 === 1 ? "στη" : "στις");
                },
                relativeTime: {
                    future: "σε %s",
                    past: "%s πριν",
                    s: "λίγα δευτερόλεπτα",
                    ss: "%d δευτερόλεπτα",
                    m: "ένα λεπτό",
                    mm: "%d λεπτά",
                    h: "μία ώρα",
                    hh: "%d ώρες",
                    d: "μία μέρα",
                    dd: "%d μέρες",
                    M: "ένας μήνας",
                    MM: "%d μήνες",
                    y: "ένας χρόνος",
                    yy: "%d χρόνια"
                },
                dayOfMonthOrdinalParse: /\d{1,2}η/,
                ordinal: "%dη",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return n;
        });
    },
    37: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("en-au", {
                months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
                monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
                weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
                weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY h:mm A",
                    LLLL: "dddd, D MMMM YYYY h:mm A"
                },
                calendar: {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    ss: "%d seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    38: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("en-ca", {
                months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
                monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
                weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
                weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "YYYY-MM-DD",
                    LL: "MMMM D, YYYY",
                    LLL: "MMMM D, YYYY h:mm A",
                    LLLL: "dddd, MMMM D, YYYY h:mm A"
                },
                calendar: {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    ss: "%d seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + n;
                }
            });
            return t;
        });
    },
    39: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("en-gb", {
                months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
                monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
                weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
                weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    ss: "%d seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    40: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("en-ie", {
                months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
                monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
                weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
                weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD-MM-YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    ss: "%d seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    41: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("en-il", {
                months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
                monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
                weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
                weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + n;
                }
            });
            return t;
        });
    },
    42: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("en-nz", {
                months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
                monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
                weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
                weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
                weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY h:mm A",
                    LLLL: "dddd, D MMMM YYYY h:mm A"
                },
                calendar: {
                    sameDay: "[Today at] LT",
                    nextDay: "[Tomorrow at] LT",
                    nextWeek: "dddd [at] LT",
                    lastDay: "[Yesterday at] LT",
                    lastWeek: "[Last] dddd [at] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "in %s",
                    past: "%s ago",
                    s: "a few seconds",
                    ss: "%d seconds",
                    m: "a minute",
                    mm: "%d minutes",
                    h: "an hour",
                    hh: "%d hours",
                    d: "a day",
                    dd: "%d days",
                    M: "a month",
                    MM: "%d months",
                    y: "a year",
                    yy: "%d years"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    43: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("eo", {
                months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
                monthsShort: "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
                weekdays: "dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),
                weekdaysShort: "dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),
                weekdaysMin: "di_lu_ma_me_ĵa_ve_sa".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY-MM-DD",
                    LL: "D[-a de] MMMM, YYYY",
                    LLL: "D[-a de] MMMM, YYYY HH:mm",
                    LLLL: "dddd, [la] D[-a de] MMMM, YYYY HH:mm"
                },
                meridiemParse: /[ap]\.t\.m/i,
                isPM: function(e) {
                    return "p" === e.charAt(0).toLowerCase();
                },
                meridiem: function(e, t, n) {
                    return e > 11 ? n ? "p.t.m." : "P.T.M." : n ? "a.t.m." : "A.T.M.";
                },
                calendar: {
                    sameDay: "[Hodiaŭ je] LT",
                    nextDay: "[Morgaŭ je] LT",
                    nextWeek: "dddd [je] LT",
                    lastDay: "[Hieraŭ je] LT",
                    lastWeek: "[pasinta] dddd [je] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "post %s",
                    past: "antaŭ %s",
                    s: "sekundoj",
                    ss: "%d sekundoj",
                    m: "minuto",
                    mm: "%d minutoj",
                    h: "horo",
                    hh: "%d horoj",
                    d: "tago",
                    dd: "%d tagoj",
                    M: "monato",
                    MM: "%d monatoj",
                    y: "jaro",
                    yy: "%d jaroj"
                },
                dayOfMonthOrdinalParse: /\d{1,2}a/,
                ordinal: "%da",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    44: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), a = [ /^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i ], s = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, r = e.defineLocale("es", {
                months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
                monthsShort: function(e, a) {
                    return e ? /-MMM-/.test(a) ? n[e.month()] : t[e.month()] : t;
                },
                monthsRegex: s,
                monthsShortRegex: s,
                monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
                monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
                monthsParse: a,
                longMonthsParse: a,
                shortMonthsParse: a,
                weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
                weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
                weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D [de] MMMM [de] YYYY",
                    LLL: "D [de] MMMM [de] YYYY H:mm",
                    LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
                },
                calendar: {
                    sameDay: function() {
                        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    nextDay: function() {
                        return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    nextWeek: function() {
                        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    lastDay: function() {
                        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    lastWeek: function() {
                        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "en %s",
                    past: "hace %s",
                    s: "unos segundos",
                    ss: "%d segundos",
                    m: "un minuto",
                    mm: "%d minutos",
                    h: "una hora",
                    hh: "%d horas",
                    d: "un día",
                    dd: "%d días",
                    M: "un mes",
                    MM: "%d meses",
                    y: "un año",
                    yy: "%d años"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    45: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), a = [ /^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i ], s = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, r = e.defineLocale("es-do", {
                months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
                monthsShort: function(e, a) {
                    return e ? /-MMM-/.test(a) ? n[e.month()] : t[e.month()] : t;
                },
                monthsRegex: s,
                monthsShortRegex: s,
                monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
                monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
                monthsParse: a,
                longMonthsParse: a,
                shortMonthsParse: a,
                weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
                weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
                weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "DD/MM/YYYY",
                    LL: "D [de] MMMM [de] YYYY",
                    LLL: "D [de] MMMM [de] YYYY h:mm A",
                    LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A"
                },
                calendar: {
                    sameDay: function() {
                        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    nextDay: function() {
                        return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    nextWeek: function() {
                        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    lastDay: function() {
                        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    lastWeek: function() {
                        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "en %s",
                    past: "hace %s",
                    s: "unos segundos",
                    ss: "%d segundos",
                    m: "un minuto",
                    mm: "%d minutos",
                    h: "una hora",
                    hh: "%d horas",
                    d: "un día",
                    dd: "%d días",
                    M: "un mes",
                    MM: "%d meses",
                    y: "un año",
                    yy: "%d años"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    46: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), a = e.defineLocale("es-us", {
                months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
                monthsShort: function(e, a) {
                    return e ? /-MMM-/.test(a) ? n[e.month()] : t[e.month()] : t;
                },
                monthsParseExact: !0,
                weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
                weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
                weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "MM/DD/YYYY",
                    LL: "MMMM [de] D [de] YYYY",
                    LLL: "MMMM [de] D [de] YYYY h:mm A",
                    LLLL: "dddd, MMMM [de] D [de] YYYY h:mm A"
                },
                calendar: {
                    sameDay: function() {
                        return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    nextDay: function() {
                        return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    nextWeek: function() {
                        return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    lastDay: function() {
                        return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    lastWeek: function() {
                        return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "en %s",
                    past: "hace %s",
                    s: "unos segundos",
                    ss: "%d segundos",
                    m: "un minuto",
                    mm: "%d minutos",
                    h: "una hora",
                    hh: "%d horas",
                    d: "un día",
                    dd: "%d días",
                    M: "un mes",
                    MM: "%d meses",
                    y: "un año",
                    yy: "%d años"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº",
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    47: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = {
                    s: [ "mõne sekundi", "mõni sekund", "paar sekundit" ],
                    ss: [ e + "sekundi", e + "sekundit" ],
                    m: [ "ühe minuti", "üks minut" ],
                    mm: [ e + " minuti", e + " minutit" ],
                    h: [ "ühe tunni", "tund aega", "üks tund" ],
                    hh: [ e + " tunni", e + " tundi" ],
                    d: [ "ühe päeva", "üks päev" ],
                    M: [ "kuu aja", "kuu aega", "üks kuu" ],
                    MM: [ e + " kuu", e + " kuud" ],
                    y: [ "ühe aasta", "aasta", "üks aasta" ],
                    yy: [ e + " aasta", e + " aastat" ]
                };
                return t ? s[n][2] ? s[n][2] : s[n][1] : a ? s[n][0] : s[n][1];
            }
            var n = e.defineLocale("et", {
                months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
                monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
                weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
                weekdaysShort: "P_E_T_K_N_R_L".split("_"),
                weekdaysMin: "P_E_T_K_N_R_L".split("_"),
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd, D. MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[Täna,] LT",
                    nextDay: "[Homme,] LT",
                    nextWeek: "[Järgmine] dddd LT",
                    lastDay: "[Eile,] LT",
                    lastWeek: "[Eelmine] dddd LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s pärast",
                    past: "%s tagasi",
                    s: t,
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: t,
                    dd: "%d päeva",
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return n;
        });
    },
    48: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("eu", {
                months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
                monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
                monthsParseExact: !0,
                weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
                weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"),
                weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY-MM-DD",
                    LL: "YYYY[ko] MMMM[ren] D[a]",
                    LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm",
                    LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",
                    l: "YYYY-M-D",
                    ll: "YYYY[ko] MMM D[a]",
                    lll: "YYYY[ko] MMM D[a] HH:mm",
                    llll: "ddd, YYYY[ko] MMM D[a] HH:mm"
                },
                calendar: {
                    sameDay: "[gaur] LT[etan]",
                    nextDay: "[bihar] LT[etan]",
                    nextWeek: "dddd LT[etan]",
                    lastDay: "[atzo] LT[etan]",
                    lastWeek: "[aurreko] dddd LT[etan]",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s barru",
                    past: "duela %s",
                    s: "segundo batzuk",
                    ss: "%d segundo",
                    m: "minutu bat",
                    mm: "%d minutu",
                    h: "ordu bat",
                    hh: "%d ordu",
                    d: "egun bat",
                    dd: "%d egun",
                    M: "hilabete bat",
                    MM: "%d hilabete",
                    y: "urte bat",
                    yy: "%d urte"
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    49: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "۱",
                "2": "۲",
                "3": "۳",
                "4": "۴",
                "5": "۵",
                "6": "۶",
                "7": "۷",
                "8": "۸",
                "9": "۹",
                "0": "۰"
            }, n = {
                "۱": "1",
                "۲": "2",
                "۳": "3",
                "۴": "4",
                "۵": "5",
                "۶": "6",
                "۷": "7",
                "۸": "8",
                "۹": "9",
                "۰": "0"
            }, a = e.defineLocale("fa", {
                months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
                monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
                weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
                weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
                weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                meridiemParse: /قبل از ظهر|بعد از ظهر/,
                isPM: function(e) {
                    return /بعد از ظهر/.test(e);
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "قبل از ظهر" : "بعد از ظهر";
                },
                calendar: {
                    sameDay: "[امروز ساعت] LT",
                    nextDay: "[فردا ساعت] LT",
                    nextWeek: "dddd [ساعت] LT",
                    lastDay: "[دیروز ساعت] LT",
                    lastWeek: "dddd [پیش] [ساعت] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "در %s",
                    past: "%s پیش",
                    s: "چند ثانیه",
                    ss: "ثانیه d%",
                    m: "یک دقیقه",
                    mm: "%d دقیقه",
                    h: "یک ساعت",
                    hh: "%d ساعت",
                    d: "یک روز",
                    dd: "%d روز",
                    M: "یک ماه",
                    MM: "%d ماه",
                    y: "یک سال",
                    yy: "%d سال"
                },
                preparse: function(e) {
                    return e.replace(/[۰-۹]/g, function(e) {
                        return n[e];
                    }).replace(/،/g, ",");
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    }).replace(/,/g, "،");
                },
                dayOfMonthOrdinalParse: /\d{1,2}م/,
                ordinal: "%dم",
                week: {
                    dow: 6,
                    doy: 12
                }
            });
            return a;
        });
    },
    50: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, a, s) {
                var r = "";
                switch (a) {
                  case "s":
                    return s ? "muutaman sekunnin" : "muutama sekunti";

                  case "ss":
                    return s ? "sekunnin" : "sekuntia";

                  case "m":
                    return s ? "minuutin" : "minuutti";

                  case "mm":
                    r = s ? "minuutin" : "minuuttia";
                    break;

                  case "h":
                    return s ? "tunnin" : "tunti";

                  case "hh":
                    r = s ? "tunnin" : "tuntia";
                    break;

                  case "d":
                    return s ? "päivän" : "päivä";

                  case "dd":
                    r = s ? "päivän" : "päivää";
                    break;

                  case "M":
                    return s ? "kuukauden" : "kuukausi";

                  case "MM":
                    r = s ? "kuukauden" : "kuukautta";
                    break;

                  case "y":
                    return s ? "vuoden" : "vuosi";

                  case "yy":
                    r = s ? "vuoden" : "vuotta";
                }
                return r = n(e, s) + " " + r;
            }
            function n(e, t) {
                return e < 10 ? t ? s[e] : a[e] : e;
            }
            var a = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "), s = [ "nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", a[7], a[8], a[9] ], r = e.defineLocale("fi", {
                months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
                monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
                weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
                weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"),
                weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"),
                longDateFormat: {
                    LT: "HH.mm",
                    LTS: "HH.mm.ss",
                    L: "DD.MM.YYYY",
                    LL: "Do MMMM[ta] YYYY",
                    LLL: "Do MMMM[ta] YYYY, [klo] HH.mm",
                    LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm",
                    l: "D.M.YYYY",
                    ll: "Do MMM YYYY",
                    lll: "Do MMM YYYY, [klo] HH.mm",
                    llll: "ddd, Do MMM YYYY, [klo] HH.mm"
                },
                calendar: {
                    sameDay: "[tänään] [klo] LT",
                    nextDay: "[huomenna] [klo] LT",
                    nextWeek: "dddd [klo] LT",
                    lastDay: "[eilen] [klo] LT",
                    lastWeek: "[viime] dddd[na] [klo] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s päästä",
                    past: "%s sitten",
                    s: t,
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    51: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("fo", {
                months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
                monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
                weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
                weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"),
                weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D. MMMM, YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Í dag kl.] LT",
                    nextDay: "[Í morgin kl.] LT",
                    nextWeek: "dddd [kl.] LT",
                    lastDay: "[Í gjár kl.] LT",
                    lastWeek: "[síðstu] dddd [kl] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "um %s",
                    past: "%s síðani",
                    s: "fá sekund",
                    ss: "%d sekundir",
                    m: "ein minutt",
                    mm: "%d minuttir",
                    h: "ein tími",
                    hh: "%d tímar",
                    d: "ein dagur",
                    dd: "%d dagar",
                    M: "ein mánaði",
                    MM: "%d mánaðir",
                    y: "eitt ár",
                    yy: "%d ár"
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    52: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("fr", {
                months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
                monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
                monthsParseExact: !0,
                weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
                weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
                weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Aujourd’hui à] LT",
                    nextDay: "[Demain à] LT",
                    nextWeek: "dddd [à] LT",
                    lastDay: "[Hier à] LT",
                    lastWeek: "dddd [dernier à] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "dans %s",
                    past: "il y a %s",
                    s: "quelques secondes",
                    ss: "%d secondes",
                    m: "une minute",
                    mm: "%d minutes",
                    h: "une heure",
                    hh: "%d heures",
                    d: "un jour",
                    dd: "%d jours",
                    M: "un mois",
                    MM: "%d mois",
                    y: "un an",
                    yy: "%d ans"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "D":
                        return e + (1 === e ? "er" : "");

                      default:
                      case "M":
                      case "Q":
                      case "DDD":
                      case "d":
                        return e + (1 === e ? "er" : "e");

                      case "w":
                      case "W":
                        return e + (1 === e ? "re" : "e");
                    }
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    53: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("fr-ca", {
                months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
                monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
                monthsParseExact: !0,
                weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
                weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
                weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY-MM-DD",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Aujourd’hui à] LT",
                    nextDay: "[Demain à] LT",
                    nextWeek: "dddd [à] LT",
                    lastDay: "[Hier à] LT",
                    lastWeek: "dddd [dernier à] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "dans %s",
                    past: "il y a %s",
                    s: "quelques secondes",
                    ss: "%d secondes",
                    m: "une minute",
                    mm: "%d minutes",
                    h: "une heure",
                    hh: "%d heures",
                    d: "un jour",
                    dd: "%d jours",
                    M: "un mois",
                    MM: "%d mois",
                    y: "un an",
                    yy: "%d ans"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
                ordinal: function(e, t) {
                    switch (t) {
                      default:
                      case "M":
                      case "Q":
                      case "D":
                      case "DDD":
                      case "d":
                        return e + (1 === e ? "er" : "e");

                      case "w":
                      case "W":
                        return e + (1 === e ? "re" : "e");
                    }
                }
            });
            return t;
        });
    },
    54: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("fr-ch", {
                months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
                monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
                monthsParseExact: !0,
                weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
                weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
                weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Aujourd’hui à] LT",
                    nextDay: "[Demain à] LT",
                    nextWeek: "dddd [à] LT",
                    lastDay: "[Hier à] LT",
                    lastWeek: "dddd [dernier à] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "dans %s",
                    past: "il y a %s",
                    s: "quelques secondes",
                    ss: "%d secondes",
                    m: "une minute",
                    mm: "%d minutes",
                    h: "une heure",
                    hh: "%d heures",
                    d: "un jour",
                    dd: "%d jours",
                    M: "un mois",
                    MM: "%d mois",
                    y: "un an",
                    yy: "%d ans"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
                ordinal: function(e, t) {
                    switch (t) {
                      default:
                      case "M":
                      case "Q":
                      case "D":
                      case "DDD":
                      case "d":
                        return e + (1 === e ? "er" : "e");

                      case "w":
                      case "W":
                        return e + (1 === e ? "re" : "e");
                    }
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    55: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"), n = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), a = e.defineLocale("fy", {
                months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),
                monthsShort: function(e, a) {
                    return e ? /-MMM-/.test(a) ? n[e.month()] : t[e.month()] : t;
                },
                monthsParseExact: !0,
                weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),
                weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"),
                weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD-MM-YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[hjoed om] LT",
                    nextDay: "[moarn om] LT",
                    nextWeek: "dddd [om] LT",
                    lastDay: "[juster om] LT",
                    lastWeek: "[ôfrûne] dddd [om] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "oer %s",
                    past: "%s lyn",
                    s: "in pear sekonden",
                    ss: "%d sekonden",
                    m: "ien minút",
                    mm: "%d minuten",
                    h: "ien oere",
                    hh: "%d oeren",
                    d: "ien dei",
                    dd: "%d dagen",
                    M: "ien moanne",
                    MM: "%d moannen",
                    y: "ien jier",
                    yy: "%d jierren"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
                ordinal: function(e) {
                    return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return a;
        });
    },
    56: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = [ "Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd" ], n = [ "Faoi", "Gear", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùn", "Sult", "Dàmh", "Samh", "Dùbh" ], a = [ "Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne" ], s = [ "Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis" ], r = [ "Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa" ], i = e.defineLocale("gd", {
                months: t,
                monthsShort: n,
                monthsParseExact: !0,
                weekdays: a,
                weekdaysShort: s,
                weekdaysMin: r,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[An-diugh aig] LT",
                    nextDay: "[A-màireach aig] LT",
                    nextWeek: "dddd [aig] LT",
                    lastDay: "[An-dè aig] LT",
                    lastWeek: "dddd [seo chaidh] [aig] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "ann an %s",
                    past: "bho chionn %s",
                    s: "beagan diogan",
                    ss: "%d diogan",
                    m: "mionaid",
                    mm: "%d mionaidean",
                    h: "uair",
                    hh: "%d uairean",
                    d: "latha",
                    dd: "%d latha",
                    M: "mìos",
                    MM: "%d mìosan",
                    y: "bliadhna",
                    yy: "%d bliadhna"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
                ordinal: function(e) {
                    var t = 1 === e ? "d" : e % 10 === 2 ? "na" : "mh";
                    return e + t;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return i;
        });
    },
    57: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("gl", {
                months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),
                monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),
                monthsParseExact: !0,
                weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),
                weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"),
                weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D [de] MMMM [de] YYYY",
                    LLL: "D [de] MMMM [de] YYYY H:mm",
                    LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
                },
                calendar: {
                    sameDay: function() {
                        return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT";
                    },
                    nextDay: function() {
                        return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT";
                    },
                    nextWeek: function() {
                        return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT";
                    },
                    lastDay: function() {
                        return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT";
                    },
                    lastWeek: function() {
                        return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT";
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: function(e) {
                        return 0 === e.indexOf("un") ? "n" + e : "en " + e;
                    },
                    past: "hai %s",
                    s: "uns segundos",
                    ss: "%d segundos",
                    m: "un minuto",
                    mm: "%d minutos",
                    h: "unha hora",
                    hh: "%d horas",
                    d: "un día",
                    dd: "%d días",
                    M: "un mes",
                    MM: "%d meses",
                    y: "un ano",
                    yy: "%d anos"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    58: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = {
                    s: [ "thodde secondanim", "thodde second" ],
                    ss: [ e + " secondanim", e + " second" ],
                    m: [ "eka mintan", "ek minute" ],
                    mm: [ e + " mintanim", e + " mintam" ],
                    h: [ "eka horan", "ek hor" ],
                    hh: [ e + " horanim", e + " horam" ],
                    d: [ "eka disan", "ek dis" ],
                    dd: [ e + " disanim", e + " dis" ],
                    M: [ "eka mhoinean", "ek mhoino" ],
                    MM: [ e + " mhoineanim", e + " mhoine" ],
                    y: [ "eka vorsan", "ek voros" ],
                    yy: [ e + " vorsanim", e + " vorsam" ]
                };
                return t ? s[n][0] : s[n][1];
            }
            var n = e.defineLocale("gom-latn", {
                months: "Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),
                monthsShort: "Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),
                monthsParseExact: !0,
                weekdays: "Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),
                weekdaysShort: "Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),
                weekdaysMin: "Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "A h:mm [vazta]",
                    LTS: "A h:mm:ss [vazta]",
                    L: "DD-MM-YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY A h:mm [vazta]",
                    LLLL: "dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",
                    llll: "ddd, D MMM YYYY, A h:mm [vazta]"
                },
                calendar: {
                    sameDay: "[Aiz] LT",
                    nextDay: "[Faleam] LT",
                    nextWeek: "[Ieta to] dddd[,] LT",
                    lastDay: "[Kal] LT",
                    lastWeek: "[Fatlo] dddd[,] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s",
                    past: "%s adim",
                    s: t,
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}(er)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "D":
                        return e + "er";

                      default:
                      case "M":
                      case "Q":
                      case "DDD":
                      case "d":
                      case "w":
                      case "W":
                        return e;
                    }
                },
                week: {
                    dow: 1,
                    doy: 4
                },
                meridiemParse: /rati|sokalli|donparam|sanje/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "rati" === t ? e < 4 ? e : e + 12 : "sokalli" === t ? e : "donparam" === t ? e > 12 ? e : e + 12 : "sanje" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "rati" : e < 12 ? "sokalli" : e < 16 ? "donparam" : e < 20 ? "sanje" : "rati";
                }
            });
            return n;
        });
    },
    59: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "૧",
                "2": "૨",
                "3": "૩",
                "4": "૪",
                "5": "૫",
                "6": "૬",
                "7": "૭",
                "8": "૮",
                "9": "૯",
                "0": "૦"
            }, n = {
                "૧": "1",
                "૨": "2",
                "૩": "3",
                "૪": "4",
                "૫": "5",
                "૬": "6",
                "૭": "7",
                "૮": "8",
                "૯": "9",
                "૦": "0"
            }, a = e.defineLocale("gu", {
                months: "જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),
                monthsShort: "જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),
                monthsParseExact: !0,
                weekdays: "રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),
                weekdaysShort: "રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),
                weekdaysMin: "ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),
                longDateFormat: {
                    LT: "A h:mm વાગ્યે",
                    LTS: "A h:mm:ss વાગ્યે",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm વાગ્યે",
                    LLLL: "dddd, D MMMM YYYY, A h:mm વાગ્યે"
                },
                calendar: {
                    sameDay: "[આજ] LT",
                    nextDay: "[કાલે] LT",
                    nextWeek: "dddd, LT",
                    lastDay: "[ગઇકાલે] LT",
                    lastWeek: "[પાછલા] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s મા",
                    past: "%s પેહલા",
                    s: "અમુક પળો",
                    ss: "%d સેકંડ",
                    m: "એક મિનિટ",
                    mm: "%d મિનિટ",
                    h: "એક કલાક",
                    hh: "%d કલાક",
                    d: "એક દિવસ",
                    dd: "%d દિવસ",
                    M: "એક મહિનો",
                    MM: "%d મહિનો",
                    y: "એક વર્ષ",
                    yy: "%d વર્ષ"
                },
                preparse: function(e) {
                    return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "રાત" === t ? e < 4 ? e : e + 12 : "સવાર" === t ? e : "બપોર" === t ? e >= 10 ? e : e + 12 : "સાંજ" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "રાત" : e < 10 ? "સવાર" : e < 17 ? "બપોર" : e < 20 ? "સાંજ" : "રાત";
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    60: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("he", {
                months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
                monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
                weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
                weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
                weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D [ב]MMMM YYYY",
                    LLL: "D [ב]MMMM YYYY HH:mm",
                    LLLL: "dddd, D [ב]MMMM YYYY HH:mm",
                    l: "D/M/YYYY",
                    ll: "D MMM YYYY",
                    lll: "D MMM YYYY HH:mm",
                    llll: "ddd, D MMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[היום ב־]LT",
                    nextDay: "[מחר ב־]LT",
                    nextWeek: "dddd [בשעה] LT",
                    lastDay: "[אתמול ב־]LT",
                    lastWeek: "[ביום] dddd [האחרון בשעה] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "בעוד %s",
                    past: "לפני %s",
                    s: "מספר שניות",
                    ss: "%d שניות",
                    m: "דקה",
                    mm: "%d דקות",
                    h: "שעה",
                    hh: function(e) {
                        return 2 === e ? "שעתיים" : e + " שעות";
                    },
                    d: "יום",
                    dd: function(e) {
                        return 2 === e ? "יומיים" : e + " ימים";
                    },
                    M: "חודש",
                    MM: function(e) {
                        return 2 === e ? "חודשיים" : e + " חודשים";
                    },
                    y: "שנה",
                    yy: function(e) {
                        return 2 === e ? "שנתיים" : e % 10 === 0 && 10 !== e ? e + " שנה" : e + " שנים";
                    }
                },
                meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
                isPM: function(e) {
                    return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(e);
                },
                meridiem: function(e, t, n) {
                    return e < 5 ? "לפנות בוקר" : e < 10 ? "בבוקר" : e < 12 ? n ? 'לפנה"צ' : "לפני הצהריים" : e < 18 ? n ? 'אחה"צ' : "אחרי הצהריים" : "בערב";
                }
            });
            return t;
        });
    },
    61: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "१",
                "2": "२",
                "3": "३",
                "4": "४",
                "5": "५",
                "6": "६",
                "7": "७",
                "8": "८",
                "9": "९",
                "0": "०"
            }, n = {
                "१": "1",
                "२": "2",
                "३": "3",
                "४": "4",
                "५": "5",
                "६": "6",
                "७": "7",
                "८": "8",
                "९": "9",
                "०": "0"
            }, a = e.defineLocale("hi", {
                months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),
                monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),
                monthsParseExact: !0,
                weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
                weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),
                weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
                longDateFormat: {
                    LT: "A h:mm बजे",
                    LTS: "A h:mm:ss बजे",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm बजे",
                    LLLL: "dddd, D MMMM YYYY, A h:mm बजे"
                },
                calendar: {
                    sameDay: "[आज] LT",
                    nextDay: "[कल] LT",
                    nextWeek: "dddd, LT",
                    lastDay: "[कल] LT",
                    lastWeek: "[पिछले] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s में",
                    past: "%s पहले",
                    s: "कुछ ही क्षण",
                    ss: "%d सेकंड",
                    m: "एक मिनट",
                    mm: "%d मिनट",
                    h: "एक घंटा",
                    hh: "%d घंटे",
                    d: "एक दिन",
                    dd: "%d दिन",
                    M: "एक महीने",
                    MM: "%d महीने",
                    y: "एक वर्ष",
                    yy: "%d वर्ष"
                },
                preparse: function(e) {
                    return e.replace(/[१२३४५६७८९०]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                meridiemParse: /रात|सुबह|दोपहर|शाम/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "रात" === t ? e < 4 ? e : e + 12 : "सुबह" === t ? e : "दोपहर" === t ? e >= 10 ? e : e + 12 : "शाम" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "रात" : e < 10 ? "सुबह" : e < 17 ? "दोपहर" : e < 20 ? "शाम" : "रात";
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    62: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n) {
                var a = e + " ";
                switch (n) {
                  case "ss":
                    return a += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";

                  case "m":
                    return t ? "jedna minuta" : "jedne minute";

                  case "mm":
                    return a += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";

                  case "h":
                    return t ? "jedan sat" : "jednog sata";

                  case "hh":
                    return a += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";

                  case "dd":
                    return a += 1 === e ? "dan" : "dana";

                  case "MM":
                    return a += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";

                  case "yy":
                    return a += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina";
                }
            }
            var n = e.defineLocale("hr", {
                months: {
                    format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),
                    standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")
                },
                monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
                monthsParseExact: !0,
                weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
                weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
                weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd, D. MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[danas u] LT",
                    nextDay: "[sutra u] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[u] [nedjelju] [u] LT";

                          case 3:
                            return "[u] [srijedu] [u] LT";

                          case 6:
                            return "[u] [subotu] [u] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[u] dddd [u] LT";
                        }
                    },
                    lastDay: "[jučer u] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                          case 3:
                            return "[prošlu] dddd [u] LT";

                          case 6:
                            return "[prošle] [subote] [u] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[prošli] dddd [u] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "za %s",
                    past: "prije %s",
                    s: "par sekundi",
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: "dan",
                    dd: t,
                    M: "mjesec",
                    MM: t,
                    y: "godinu",
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    63: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = e;
                switch (n) {
                  case "s":
                    return a || t ? "néhány másodperc" : "néhány másodperce";

                  case "ss":
                    return s + (a || t) ? " másodperc" : " másodperce";

                  case "m":
                    return "egy" + (a || t ? " perc" : " perce");

                  case "mm":
                    return s + (a || t ? " perc" : " perce");

                  case "h":
                    return "egy" + (a || t ? " óra" : " órája");

                  case "hh":
                    return s + (a || t ? " óra" : " órája");

                  case "d":
                    return "egy" + (a || t ? " nap" : " napja");

                  case "dd":
                    return s + (a || t ? " nap" : " napja");

                  case "M":
                    return "egy" + (a || t ? " hónap" : " hónapja");

                  case "MM":
                    return s + (a || t ? " hónap" : " hónapja");

                  case "y":
                    return "egy" + (a || t ? " év" : " éve");

                  case "yy":
                    return s + (a || t ? " év" : " éve");
                }
                return "";
            }
            function n(e) {
                return (e ? "" : "[múlt] ") + "[" + a[this.day()] + "] LT[-kor]";
            }
            var a = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "), s = e.defineLocale("hu", {
                months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
                monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
                weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
                weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
                weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"),
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "YYYY.MM.DD.",
                    LL: "YYYY. MMMM D.",
                    LLL: "YYYY. MMMM D. H:mm",
                    LLLL: "YYYY. MMMM D., dddd H:mm"
                },
                meridiemParse: /de|du/i,
                isPM: function(e) {
                    return "u" === e.charAt(1).toLowerCase();
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? n === !0 ? "de" : "DE" : n === !0 ? "du" : "DU";
                },
                calendar: {
                    sameDay: "[ma] LT[-kor]",
                    nextDay: "[holnap] LT[-kor]",
                    nextWeek: function() {
                        return n.call(this, !0);
                    },
                    lastDay: "[tegnap] LT[-kor]",
                    lastWeek: function() {
                        return n.call(this, !1);
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s múlva",
                    past: "%s",
                    s: t,
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return s;
        });
    },
    64: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("hy-am", {
                months: {
                    format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),
                    standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")
                },
                monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),
                weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),
                weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
                weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY թ.",
                    LLL: "D MMMM YYYY թ., HH:mm",
                    LLLL: "dddd, D MMMM YYYY թ., HH:mm"
                },
                calendar: {
                    sameDay: "[այսօր] LT",
                    nextDay: "[վաղը] LT",
                    lastDay: "[երեկ] LT",
                    nextWeek: function() {
                        return "dddd [օրը ժամը] LT";
                    },
                    lastWeek: function() {
                        return "[անցած] dddd [օրը ժամը] LT";
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s հետո",
                    past: "%s առաջ",
                    s: "մի քանի վայրկյան",
                    ss: "%d վայրկյան",
                    m: "րոպե",
                    mm: "%d րոպե",
                    h: "ժամ",
                    hh: "%d ժամ",
                    d: "օր",
                    dd: "%d օր",
                    M: "ամիս",
                    MM: "%d ամիս",
                    y: "տարի",
                    yy: "%d տարի"
                },
                meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
                isPM: function(e) {
                    return /^(ցերեկվա|երեկոյան)$/.test(e);
                },
                meridiem: function(e) {
                    return e < 4 ? "գիշերվա" : e < 12 ? "առավոտվա" : e < 17 ? "ցերեկվա" : "երեկոյան";
                },
                dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "DDD":
                      case "w":
                      case "W":
                      case "DDDo":
                        return 1 === e ? e + "-ին" : e + "-րդ";

                      default:
                        return e;
                    }
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    65: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("id", {
                months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
                monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),
                weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
                weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
                weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
                longDateFormat: {
                    LT: "HH.mm",
                    LTS: "HH.mm.ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY [pukul] HH.mm",
                    LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
                },
                meridiemParse: /pagi|siang|sore|malam/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "pagi" === t ? e : "siang" === t ? e >= 11 ? e : e + 12 : "sore" === t || "malam" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 11 ? "pagi" : e < 15 ? "siang" : e < 19 ? "sore" : "malam";
                },
                calendar: {
                    sameDay: "[Hari ini pukul] LT",
                    nextDay: "[Besok pukul] LT",
                    nextWeek: "dddd [pukul] LT",
                    lastDay: "[Kemarin pukul] LT",
                    lastWeek: "dddd [lalu pukul] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "dalam %s",
                    past: "%s yang lalu",
                    s: "beberapa detik",
                    ss: "%d detik",
                    m: "semenit",
                    mm: "%d menit",
                    h: "sejam",
                    hh: "%d jam",
                    d: "sehari",
                    dd: "%d hari",
                    M: "sebulan",
                    MM: "%d bulan",
                    y: "setahun",
                    yy: "%d tahun"
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    66: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e) {
                return e % 100 === 11 || e % 10 !== 1;
            }
            function n(e, n, a, s) {
                var r = e + " ";
                switch (a) {
                  case "s":
                    return n || s ? "nokkrar sekúndur" : "nokkrum sekúndum";

                  case "ss":
                    return t(e) ? r + (n || s ? "sekúndur" : "sekúndum") : r + "sekúnda";

                  case "m":
                    return n ? "mínúta" : "mínútu";

                  case "mm":
                    return t(e) ? r + (n || s ? "mínútur" : "mínútum") : n ? r + "mínúta" : r + "mínútu";

                  case "hh":
                    return t(e) ? r + (n || s ? "klukkustundir" : "klukkustundum") : r + "klukkustund";

                  case "d":
                    return n ? "dagur" : s ? "dag" : "degi";

                  case "dd":
                    return t(e) ? n ? r + "dagar" : r + (s ? "daga" : "dögum") : n ? r + "dagur" : r + (s ? "dag" : "degi");

                  case "M":
                    return n ? "mánuður" : s ? "mánuð" : "mánuði";

                  case "MM":
                    return t(e) ? n ? r + "mánuðir" : r + (s ? "mánuði" : "mánuðum") : n ? r + "mánuður" : r + (s ? "mánuð" : "mánuði");

                  case "y":
                    return n || s ? "ár" : "ári";

                  case "yy":
                    return t(e) ? r + (n || s ? "ár" : "árum") : r + (n || s ? "ár" : "ári");
                }
            }
            var a = e.defineLocale("is", {
                months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
                monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
                weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
                weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"),
                weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY [kl.] H:mm",
                    LLLL: "dddd, D. MMMM YYYY [kl.] H:mm"
                },
                calendar: {
                    sameDay: "[í dag kl.] LT",
                    nextDay: "[á morgun kl.] LT",
                    nextWeek: "dddd [kl.] LT",
                    lastDay: "[í gær kl.] LT",
                    lastWeek: "[síðasta] dddd [kl.] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "eftir %s",
                    past: "fyrir %s síðan",
                    s: n,
                    ss: n,
                    m: n,
                    mm: n,
                    h: "klukkustund",
                    hh: n,
                    d: n,
                    dd: n,
                    M: n,
                    MM: n,
                    y: n,
                    yy: n
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return a;
        });
    },
    67: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("it", {
                months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
                monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
                weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),
                weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
                weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Oggi alle] LT",
                    nextDay: "[Domani alle] LT",
                    nextWeek: "dddd [alle] LT",
                    lastDay: "[Ieri alle] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[la scorsa] dddd [alle] LT";

                          default:
                            return "[lo scorso] dddd [alle] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: function(e) {
                        return (/^[0-9].+$/.test(e) ? "tra" : "in") + " " + e;
                    },
                    past: "%s fa",
                    s: "alcuni secondi",
                    ss: "%d secondi",
                    m: "un minuto",
                    mm: "%d minuti",
                    h: "un'ora",
                    hh: "%d ore",
                    d: "un giorno",
                    dd: "%d giorni",
                    M: "un mese",
                    MM: "%d mesi",
                    y: "un anno",
                    yy: "%d anni"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    68: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ja", {
                months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
                monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
                weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
                weekdaysShort: "日_月_火_水_木_金_土".split("_"),
                weekdaysMin: "日_月_火_水_木_金_土".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY/MM/DD",
                    LL: "YYYY年M月D日",
                    LLL: "YYYY年M月D日 HH:mm",
                    LLLL: "YYYY年M月D日 dddd HH:mm",
                    l: "YYYY/MM/DD",
                    ll: "YYYY年M月D日",
                    lll: "YYYY年M月D日 HH:mm",
                    llll: "YYYY年M月D日(ddd) HH:mm"
                },
                meridiemParse: /午前|午後/i,
                isPM: function(e) {
                    return "午後" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "午前" : "午後";
                },
                calendar: {
                    sameDay: "[今日] LT",
                    nextDay: "[明日] LT",
                    nextWeek: function(e) {
                        return e.week() < this.week() ? "[来週]dddd LT" : "dddd LT";
                    },
                    lastDay: "[昨日] LT",
                    lastWeek: function(e) {
                        return this.week() < e.week() ? "[先週]dddd LT" : "dddd LT";
                    },
                    sameElse: "L"
                },
                dayOfMonthOrdinalParse: /\d{1,2}日/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "d":
                      case "D":
                      case "DDD":
                        return e + "日";

                      default:
                        return e;
                    }
                },
                relativeTime: {
                    future: "%s後",
                    past: "%s前",
                    s: "数秒",
                    ss: "%d秒",
                    m: "1分",
                    mm: "%d分",
                    h: "1時間",
                    hh: "%d時間",
                    d: "1日",
                    dd: "%d日",
                    M: "1ヶ月",
                    MM: "%dヶ月",
                    y: "1年",
                    yy: "%d年"
                }
            });
            return t;
        });
    },
    69: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("jv", {
                months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),
                monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),
                weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),
                weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),
                weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),
                longDateFormat: {
                    LT: "HH.mm",
                    LTS: "HH.mm.ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY [pukul] HH.mm",
                    LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
                },
                meridiemParse: /enjing|siyang|sonten|ndalu/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "enjing" === t ? e : "siyang" === t ? e >= 11 ? e : e + 12 : "sonten" === t || "ndalu" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 11 ? "enjing" : e < 15 ? "siyang" : e < 19 ? "sonten" : "ndalu";
                },
                calendar: {
                    sameDay: "[Dinten puniko pukul] LT",
                    nextDay: "[Mbenjang pukul] LT",
                    nextWeek: "dddd [pukul] LT",
                    lastDay: "[Kala wingi pukul] LT",
                    lastWeek: "dddd [kepengker pukul] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "wonten ing %s",
                    past: "%s ingkang kepengker",
                    s: "sawetawis detik",
                    ss: "%d detik",
                    m: "setunggal menit",
                    mm: "%d menit",
                    h: "setunggal jam",
                    hh: "%d jam",
                    d: "sedinten",
                    dd: "%d dinten",
                    M: "sewulan",
                    MM: "%d wulan",
                    y: "setaun",
                    yy: "%d taun"
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    70: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ka", {
                months: {
                    standalone: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),
                    format: "იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")
                },
                monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
                weekdays: {
                    standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),
                    format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),
                    isFormat: /(წინა|შემდეგ)/
                },
                weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
                weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY h:mm A",
                    LLLL: "dddd, D MMMM YYYY h:mm A"
                },
                calendar: {
                    sameDay: "[დღეს] LT[-ზე]",
                    nextDay: "[ხვალ] LT[-ზე]",
                    lastDay: "[გუშინ] LT[-ზე]",
                    nextWeek: "[შემდეგ] dddd LT[-ზე]",
                    lastWeek: "[წინა] dddd LT-ზე",
                    sameElse: "L"
                },
                relativeTime: {
                    future: function(e) {
                        return /(წამი|წუთი|საათი|წელი)/.test(e) ? e.replace(/ი$/, "ში") : e + "ში";
                    },
                    past: function(e) {
                        return /(წამი|წუთი|საათი|დღე|თვე)/.test(e) ? e.replace(/(ი|ე)$/, "ის წინ") : /წელი/.test(e) ? e.replace(/წელი$/, "წლის წინ") : void 0;
                    },
                    s: "რამდენიმე წამი",
                    ss: "%d წამი",
                    m: "წუთი",
                    mm: "%d წუთი",
                    h: "საათი",
                    hh: "%d საათი",
                    d: "დღე",
                    dd: "%d დღე",
                    M: "თვე",
                    MM: "%d თვე",
                    y: "წელი",
                    yy: "%d წელი"
                },
                dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
                ordinal: function(e) {
                    return 0 === e ? e : 1 === e ? e + "-ლი" : e < 20 || e <= 100 && e % 20 === 0 || e % 100 === 0 ? "მე-" + e : e + "-ე";
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    71: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                0: "-ші",
                1: "-ші",
                2: "-ші",
                3: "-ші",
                4: "-ші",
                5: "-ші",
                6: "-шы",
                7: "-ші",
                8: "-ші",
                9: "-шы",
                10: "-шы",
                20: "-шы",
                30: "-шы",
                40: "-шы",
                50: "-ші",
                60: "-шы",
                70: "-ші",
                80: "-ші",
                90: "-шы",
                100: "-ші"
            }, n = e.defineLocale("kk", {
                months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),
                monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),
                weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),
                weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"),
                weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Бүгін сағат] LT",
                    nextDay: "[Ертең сағат] LT",
                    nextWeek: "dddd [сағат] LT",
                    lastDay: "[Кеше сағат] LT",
                    lastWeek: "[Өткен аптаның] dddd [сағат] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s ішінде",
                    past: "%s бұрын",
                    s: "бірнеше секунд",
                    ss: "%d секунд",
                    m: "бір минут",
                    mm: "%d минут",
                    h: "бір сағат",
                    hh: "%d сағат",
                    d: "бір күн",
                    dd: "%d күн",
                    M: "бір ай",
                    MM: "%d ай",
                    y: "бір жыл",
                    yy: "%d жыл"
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
                ordinal: function(e) {
                    var n = e % 10, a = e >= 100 ? 100 : null;
                    return e + (t[e] || t[n] || t[a]);
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    72: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "១",
                "2": "២",
                "3": "៣",
                "4": "៤",
                "5": "៥",
                "6": "៦",
                "7": "៧",
                "8": "៨",
                "9": "៩",
                "0": "០"
            }, n = {
                "១": "1",
                "២": "2",
                "៣": "3",
                "៤": "4",
                "៥": "5",
                "៦": "6",
                "៧": "7",
                "៨": "8",
                "៩": "9",
                "០": "0"
            }, a = e.defineLocale("km", {
                months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
                monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
                weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
                weekdaysShort: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
                weekdaysMin: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                meridiemParse: /ព្រឹក|ល្ងាច/,
                isPM: function(e) {
                    return "ល្ងាច" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "ព្រឹក" : "ល្ងាច";
                },
                calendar: {
                    sameDay: "[ថ្ងៃនេះ ម៉ោង] LT",
                    nextDay: "[ស្អែក ម៉ោង] LT",
                    nextWeek: "dddd [ម៉ោង] LT",
                    lastDay: "[ម្សិលមិញ ម៉ោង] LT",
                    lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%sទៀត",
                    past: "%sមុន",
                    s: "ប៉ុន្មានវិនាទី",
                    ss: "%d វិនាទី",
                    m: "មួយនាទី",
                    mm: "%d នាទី",
                    h: "មួយម៉ោង",
                    hh: "%d ម៉ោង",
                    d: "មួយថ្ងៃ",
                    dd: "%d ថ្ងៃ",
                    M: "មួយខែ",
                    MM: "%d ខែ",
                    y: "មួយឆ្នាំ",
                    yy: "%d ឆ្នាំ"
                },
                dayOfMonthOrdinalParse: /ទី\d{1,2}/,
                ordinal: "ទី%d",
                preparse: function(e) {
                    return e.replace(/[១២៣៤៥៦៧៨៩០]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return a;
        });
    },
    73: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "೧",
                "2": "೨",
                "3": "೩",
                "4": "೪",
                "5": "೫",
                "6": "೬",
                "7": "೭",
                "8": "೮",
                "9": "೯",
                "0": "೦"
            }, n = {
                "೧": "1",
                "೨": "2",
                "೩": "3",
                "೪": "4",
                "೫": "5",
                "೬": "6",
                "೭": "7",
                "೮": "8",
                "೯": "9",
                "೦": "0"
            }, a = e.defineLocale("kn", {
                months: "ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),
                monthsShort: "ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),
                monthsParseExact: !0,
                weekdays: "ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),
                weekdaysShort: "ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),
                weekdaysMin: "ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),
                longDateFormat: {
                    LT: "A h:mm",
                    LTS: "A h:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm",
                    LLLL: "dddd, D MMMM YYYY, A h:mm"
                },
                calendar: {
                    sameDay: "[ಇಂದು] LT",
                    nextDay: "[ನಾಳೆ] LT",
                    nextWeek: "dddd, LT",
                    lastDay: "[ನಿನ್ನೆ] LT",
                    lastWeek: "[ಕೊನೆಯ] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s ನಂತರ",
                    past: "%s ಹಿಂದೆ",
                    s: "ಕೆಲವು ಕ್ಷಣಗಳು",
                    ss: "%d ಸೆಕೆಂಡುಗಳು",
                    m: "ಒಂದು ನಿಮಿಷ",
                    mm: "%d ನಿಮಿಷ",
                    h: "ಒಂದು ಗಂಟೆ",
                    hh: "%d ಗಂಟೆ",
                    d: "ಒಂದು ದಿನ",
                    dd: "%d ದಿನ",
                    M: "ಒಂದು ತಿಂಗಳು",
                    MM: "%d ತಿಂಗಳು",
                    y: "ಒಂದು ವರ್ಷ",
                    yy: "%d ವರ್ಷ"
                },
                preparse: function(e) {
                    return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "ರಾತ್ರಿ" === t ? e < 4 ? e : e + 12 : "ಬೆಳಿಗ್ಗೆ" === t ? e : "ಮಧ್ಯಾಹ್ನ" === t ? e >= 10 ? e : e + 12 : "ಸಂಜೆ" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "ರಾತ್ರಿ" : e < 10 ? "ಬೆಳಿಗ್ಗೆ" : e < 17 ? "ಮಧ್ಯಾಹ್ನ" : e < 20 ? "ಸಂಜೆ" : "ರಾತ್ರಿ";
                },
                dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
                ordinal: function(e) {
                    return e + "ನೇ";
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    74: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ko", {
                months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
                monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
                weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
                weekdaysShort: "일_월_화_수_목_금_토".split("_"),
                weekdaysMin: "일_월_화_수_목_금_토".split("_"),
                longDateFormat: {
                    LT: "A h:mm",
                    LTS: "A h:mm:ss",
                    L: "YYYY.MM.DD.",
                    LL: "YYYY년 MMMM D일",
                    LLL: "YYYY년 MMMM D일 A h:mm",
                    LLLL: "YYYY년 MMMM D일 dddd A h:mm",
                    l: "YYYY.MM.DD.",
                    ll: "YYYY년 MMMM D일",
                    lll: "YYYY년 MMMM D일 A h:mm",
                    llll: "YYYY년 MMMM D일 dddd A h:mm"
                },
                calendar: {
                    sameDay: "오늘 LT",
                    nextDay: "내일 LT",
                    nextWeek: "dddd LT",
                    lastDay: "어제 LT",
                    lastWeek: "지난주 dddd LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s 후",
                    past: "%s 전",
                    s: "몇 초",
                    ss: "%d초",
                    m: "1분",
                    mm: "%d분",
                    h: "한 시간",
                    hh: "%d시간",
                    d: "하루",
                    dd: "%d일",
                    M: "한 달",
                    MM: "%d달",
                    y: "일 년",
                    yy: "%d년"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "d":
                      case "D":
                      case "DDD":
                        return e + "일";

                      case "M":
                        return e + "월";

                      case "w":
                      case "W":
                        return e + "주";

                      default:
                        return e;
                    }
                },
                meridiemParse: /오전|오후/,
                isPM: function(e) {
                    return "오후" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "오전" : "오후";
                }
            });
            return t;
        });
    },
    75: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                0: "-чү",
                1: "-чи",
                2: "-чи",
                3: "-чү",
                4: "-чү",
                5: "-чи",
                6: "-чы",
                7: "-чи",
                8: "-чи",
                9: "-чу",
                10: "-чу",
                20: "-чы",
                30: "-чу",
                40: "-чы",
                50: "-чү",
                60: "-чы",
                70: "-чи",
                80: "-чи",
                90: "-чу",
                100: "-чү"
            }, n = e.defineLocale("ky", {
                months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
                monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),
                weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),
                weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),
                weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Бүгүн саат] LT",
                    nextDay: "[Эртең саат] LT",
                    nextWeek: "dddd [саат] LT",
                    lastDay: "[Кече саат] LT",
                    lastWeek: "[Өткен аптанын] dddd [күнү] [саат] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s ичинде",
                    past: "%s мурун",
                    s: "бирнече секунд",
                    ss: "%d секунд",
                    m: "бир мүнөт",
                    mm: "%d мүнөт",
                    h: "бир саат",
                    hh: "%d саат",
                    d: "бир күн",
                    dd: "%d күн",
                    M: "бир ай",
                    MM: "%d ай",
                    y: "бир жыл",
                    yy: "%d жыл"
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
                ordinal: function(e) {
                    var n = e % 10, a = e >= 100 ? 100 : null;
                    return e + (t[e] || t[n] || t[a]);
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    76: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = {
                    m: [ "eng Minutt", "enger Minutt" ],
                    h: [ "eng Stonn", "enger Stonn" ],
                    d: [ "een Dag", "engem Dag" ],
                    M: [ "ee Mount", "engem Mount" ],
                    y: [ "ee Joer", "engem Joer" ]
                };
                return t ? s[n][0] : s[n][1];
            }
            function n(e) {
                var t = e.substr(0, e.indexOf(" "));
                return s(t) ? "a " + e : "an " + e;
            }
            function a(e) {
                var t = e.substr(0, e.indexOf(" "));
                return s(t) ? "viru " + e : "virun " + e;
            }
            function s(e) {
                if (e = parseInt(e, 10), isNaN(e)) return !1;
                if (e < 0) return !0;
                if (e < 10) return 4 <= e && e <= 7;
                if (e < 100) {
                    var t = e % 10, n = e / 10;
                    return s(0 === t ? n : t);
                }
                if (e < 1e4) {
                    for (;e >= 10; ) e /= 10;
                    return s(e);
                }
                return e /= 1e3, s(e);
            }
            var r = e.defineLocale("lb", {
                months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
                monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
                monthsParseExact: !0,
                weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
                weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
                weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm [Auer]",
                    LTS: "H:mm:ss [Auer]",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm [Auer]",
                    LLLL: "dddd, D. MMMM YYYY H:mm [Auer]"
                },
                calendar: {
                    sameDay: "[Haut um] LT",
                    sameElse: "L",
                    nextDay: "[Muer um] LT",
                    nextWeek: "dddd [um] LT",
                    lastDay: "[Gëschter um] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 2:
                          case 4:
                            return "[Leschten] dddd [um] LT";

                          default:
                            return "[Leschte] dddd [um] LT";
                        }
                    }
                },
                relativeTime: {
                    future: n,
                    past: a,
                    s: "e puer Sekonnen",
                    ss: "%d Sekonnen",
                    m: t,
                    mm: "%d Minutten",
                    h: t,
                    hh: "%d Stonnen",
                    d: t,
                    dd: "%d Deeg",
                    M: t,
                    MM: "%d Méint",
                    y: t,
                    yy: "%d Joer"
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    77: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("lo", {
                months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
                monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
                weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
                weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
                weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "ວັນdddd D MMMM YYYY HH:mm"
                },
                meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
                isPM: function(e) {
                    return "ຕອນແລງ" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "ຕອນເຊົ້າ" : "ຕອນແລງ";
                },
                calendar: {
                    sameDay: "[ມື້ນີ້ເວລາ] LT",
                    nextDay: "[ມື້ອື່ນເວລາ] LT",
                    nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT",
                    lastDay: "[ມື້ວານນີ້ເວລາ] LT",
                    lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "ອີກ %s",
                    past: "%sຜ່ານມາ",
                    s: "ບໍ່ເທົ່າໃດວິນາທີ",
                    ss: "%d ວິນາທີ",
                    m: "1 ນາທີ",
                    mm: "%d ນາທີ",
                    h: "1 ຊົ່ວໂມງ",
                    hh: "%d ຊົ່ວໂມງ",
                    d: "1 ມື້",
                    dd: "%d ມື້",
                    M: "1 ເດືອນ",
                    MM: "%d ເດືອນ",
                    y: "1 ປີ",
                    yy: "%d ປີ"
                },
                dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
                ordinal: function(e) {
                    return "ທີ່" + e;
                }
            });
            return t;
        });
    },
    78: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                return t ? "kelios sekundės" : a ? "kelių sekundžių" : "kelias sekundes";
            }
            function n(e, t, n, a) {
                return t ? s(n)[0] : a ? s(n)[1] : s(n)[2];
            }
            function a(e) {
                return e % 10 === 0 || e > 10 && e < 20;
            }
            function s(e) {
                return i[e].split("_");
            }
            function r(e, t, r, i) {
                var o = e + " ";
                return 1 === e ? o + n(e, t, r[0], i) : t ? o + (a(e) ? s(r)[1] : s(r)[0]) : i ? o + s(r)[1] : o + (a(e) ? s(r)[1] : s(r)[2]);
            }
            var i = {
                ss: "sekundė_sekundžių_sekundes",
                m: "minutė_minutės_minutę",
                mm: "minutės_minučių_minutes",
                h: "valanda_valandos_valandą",
                hh: "valandos_valandų_valandas",
                d: "diena_dienos_dieną",
                dd: "dienos_dienų_dienas",
                M: "mėnuo_mėnesio_mėnesį",
                MM: "mėnesiai_mėnesių_mėnesius",
                y: "metai_metų_metus",
                yy: "metai_metų_metus"
            }, o = e.defineLocale("lt", {
                months: {
                    format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
                    standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),
                    isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
                },
                monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
                weekdays: {
                    format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),
                    standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),
                    isFormat: /dddd HH:mm/
                },
                weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
                weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY-MM-DD",
                    LL: "YYYY [m.] MMMM D [d.]",
                    LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
                    LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",
                    l: "YYYY-MM-DD",
                    ll: "YYYY [m.] MMMM D [d.]",
                    lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
                    llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"
                },
                calendar: {
                    sameDay: "[Šiandien] LT",
                    nextDay: "[Rytoj] LT",
                    nextWeek: "dddd LT",
                    lastDay: "[Vakar] LT",
                    lastWeek: "[Praėjusį] dddd LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "po %s",
                    past: "prieš %s",
                    s: t,
                    ss: r,
                    m: n,
                    mm: r,
                    h: n,
                    hh: r,
                    d: n,
                    dd: r,
                    M: n,
                    MM: r,
                    y: n,
                    yy: r
                },
                dayOfMonthOrdinalParse: /\d{1,2}-oji/,
                ordinal: function(e) {
                    return e + "-oji";
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return o;
        });
    },
    79: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n) {
                return n ? t % 10 === 1 && t % 100 !== 11 ? e[2] : e[3] : t % 10 === 1 && t % 100 !== 11 ? e[0] : e[1];
            }
            function n(e, n, a) {
                return e + " " + t(r[a], e, n);
            }
            function a(e, n, a) {
                return t(r[a], e, n);
            }
            function s(e, t) {
                return t ? "dažas sekundes" : "dažām sekundēm";
            }
            var r = {
                ss: "sekundes_sekundēm_sekunde_sekundes".split("_"),
                m: "minūtes_minūtēm_minūte_minūtes".split("_"),
                mm: "minūtes_minūtēm_minūte_minūtes".split("_"),
                h: "stundas_stundām_stunda_stundas".split("_"),
                hh: "stundas_stundām_stunda_stundas".split("_"),
                d: "dienas_dienām_diena_dienas".split("_"),
                dd: "dienas_dienām_diena_dienas".split("_"),
                M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
                MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
                y: "gada_gadiem_gads_gadi".split("_"),
                yy: "gada_gadiem_gads_gadi".split("_")
            }, i = e.defineLocale("lv", {
                months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
                monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
                weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
                weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"),
                weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY.",
                    LL: "YYYY. [gada] D. MMMM",
                    LLL: "YYYY. [gada] D. MMMM, HH:mm",
                    LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm"
                },
                calendar: {
                    sameDay: "[Šodien pulksten] LT",
                    nextDay: "[Rīt pulksten] LT",
                    nextWeek: "dddd [pulksten] LT",
                    lastDay: "[Vakar pulksten] LT",
                    lastWeek: "[Pagājušā] dddd [pulksten] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "pēc %s",
                    past: "pirms %s",
                    s: s,
                    ss: n,
                    m: a,
                    mm: n,
                    h: a,
                    hh: n,
                    d: a,
                    dd: n,
                    M: a,
                    MM: n,
                    y: a,
                    yy: n
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return i;
        });
    },
    80: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                words: {
                    ss: [ "sekund", "sekunda", "sekundi" ],
                    m: [ "jedan minut", "jednog minuta" ],
                    mm: [ "minut", "minuta", "minuta" ],
                    h: [ "jedan sat", "jednog sata" ],
                    hh: [ "sat", "sata", "sati" ],
                    dd: [ "dan", "dana", "dana" ],
                    MM: [ "mjesec", "mjeseca", "mjeseci" ],
                    yy: [ "godina", "godine", "godina" ]
                },
                correctGrammaticalCase: function(e, t) {
                    return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
                },
                translate: function(e, n, a) {
                    var s = t.words[a];
                    return 1 === a.length ? n ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s);
                }
            }, n = e.defineLocale("me", {
                months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
                monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
                monthsParseExact: !0,
                weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
                weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
                weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd, D. MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[danas u] LT",
                    nextDay: "[sjutra u] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[u] [nedjelju] [u] LT";

                          case 3:
                            return "[u] [srijedu] [u] LT";

                          case 6:
                            return "[u] [subotu] [u] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[u] dddd [u] LT";
                        }
                    },
                    lastDay: "[juče u] LT",
                    lastWeek: function() {
                        var e = [ "[prošle] [nedjelje] [u] LT", "[prošlog] [ponedjeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srijede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT" ];
                        return e[this.day()];
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "za %s",
                    past: "prije %s",
                    s: "nekoliko sekundi",
                    ss: t.translate,
                    m: t.translate,
                    mm: t.translate,
                    h: t.translate,
                    hh: t.translate,
                    d: "dan",
                    dd: t.translate,
                    M: "mjesec",
                    MM: t.translate,
                    y: "godinu",
                    yy: t.translate
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    81: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("mi", {
                months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),
                monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),
                monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
                monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
                monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
                monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
                weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),
                weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
                weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY [i] HH:mm",
                    LLLL: "dddd, D MMMM YYYY [i] HH:mm"
                },
                calendar: {
                    sameDay: "[i teie mahana, i] LT",
                    nextDay: "[apopo i] LT",
                    nextWeek: "dddd [i] LT",
                    lastDay: "[inanahi i] LT",
                    lastWeek: "dddd [whakamutunga i] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "i roto i %s",
                    past: "%s i mua",
                    s: "te hēkona ruarua",
                    ss: "%d hēkona",
                    m: "he meneti",
                    mm: "%d meneti",
                    h: "te haora",
                    hh: "%d haora",
                    d: "he ra",
                    dd: "%d ra",
                    M: "he marama",
                    MM: "%d marama",
                    y: "he tau",
                    yy: "%d tau"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    82: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("mk", {
                months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
                monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
                weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
                weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"),
                weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"),
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "D.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY H:mm",
                    LLLL: "dddd, D MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[Денес во] LT",
                    nextDay: "[Утре во] LT",
                    nextWeek: "[Во] dddd [во] LT",
                    lastDay: "[Вчера во] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                          case 3:
                          case 6:
                            return "[Изминатата] dddd [во] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[Изминатиот] dddd [во] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "после %s",
                    past: "пред %s",
                    s: "неколку секунди",
                    ss: "%d секунди",
                    m: "минута",
                    mm: "%d минути",
                    h: "час",
                    hh: "%d часа",
                    d: "ден",
                    dd: "%d дена",
                    M: "месец",
                    MM: "%d месеци",
                    y: "година",
                    yy: "%d години"
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
                ordinal: function(e) {
                    var t = e % 10, n = e % 100;
                    return 0 === e ? e + "-ев" : 0 === n ? e + "-ен" : n > 10 && n < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти";
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    83: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ml", {
                months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),
                monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),
                monthsParseExact: !0,
                weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),
                weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),
                weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),
                longDateFormat: {
                    LT: "A h:mm -നു",
                    LTS: "A h:mm:ss -നു",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm -നു",
                    LLLL: "dddd, D MMMM YYYY, A h:mm -നു"
                },
                calendar: {
                    sameDay: "[ഇന്ന്] LT",
                    nextDay: "[നാളെ] LT",
                    nextWeek: "dddd, LT",
                    lastDay: "[ഇന്നലെ] LT",
                    lastWeek: "[കഴിഞ്ഞ] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s കഴിഞ്ഞ്",
                    past: "%s മുൻപ്",
                    s: "അൽപ നിമിഷങ്ങൾ",
                    ss: "%d സെക്കൻഡ്",
                    m: "ഒരു മിനിറ്റ്",
                    mm: "%d മിനിറ്റ്",
                    h: "ഒരു മണിക്കൂർ",
                    hh: "%d മണിക്കൂർ",
                    d: "ഒരു ദിവസം",
                    dd: "%d ദിവസം",
                    M: "ഒരു മാസം",
                    MM: "%d മാസം",
                    y: "ഒരു വർഷം",
                    yy: "%d വർഷം"
                },
                meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "രാത്രി" === t && e >= 4 || "ഉച്ച കഴിഞ്ഞ്" === t || "വൈകുന്നേരം" === t ? e + 12 : e;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "രാത്രി" : e < 12 ? "രാവിലെ" : e < 17 ? "ഉച്ച കഴിഞ്ഞ്" : e < 20 ? "വൈകുന്നേരം" : "രാത്രി";
                }
            });
            return t;
        });
    },
    84: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                switch (n) {
                  case "s":
                    return t ? "хэдхэн секунд" : "хэдхэн секундын";

                  case "ss":
                    return e + (t ? " секунд" : " секундын");

                  case "m":
                  case "mm":
                    return e + (t ? " минут" : " минутын");

                  case "h":
                  case "hh":
                    return e + (t ? " цаг" : " цагийн");

                  case "d":
                  case "dd":
                    return e + (t ? " өдөр" : " өдрийн");

                  case "M":
                  case "MM":
                    return e + (t ? " сар" : " сарын");

                  case "y":
                  case "yy":
                    return e + (t ? " жил" : " жилийн");

                  default:
                    return e;
                }
            }
            var n = e.defineLocale("mn", {
                months: "Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),
                monthsShort: "1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),
                monthsParseExact: !0,
                weekdays: "Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),
                weekdaysShort: "Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),
                weekdaysMin: "Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY-MM-DD",
                    LL: "YYYY оны MMMMын D",
                    LLL: "YYYY оны MMMMын D HH:mm",
                    LLLL: "dddd, YYYY оны MMMMын D HH:mm"
                },
                meridiemParse: /ҮӨ|ҮХ/i,
                isPM: function(e) {
                    return "ҮХ" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "ҮӨ" : "ҮХ";
                },
                calendar: {
                    sameDay: "[Өнөөдөр] LT",
                    nextDay: "[Маргааш] LT",
                    nextWeek: "[Ирэх] dddd LT",
                    lastDay: "[Өчигдөр] LT",
                    lastWeek: "[Өнгөрсөн] dddd LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s дараа",
                    past: "%s өмнө",
                    s: t,
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "d":
                      case "D":
                      case "DDD":
                        return e + " өдөр";

                      default:
                        return e;
                    }
                }
            });
            return n;
        });
    },
    85: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = "";
                if (t) switch (n) {
                  case "s":
                    s = "काही सेकंद";
                    break;

                  case "ss":
                    s = "%d सेकंद";
                    break;

                  case "m":
                    s = "एक मिनिट";
                    break;

                  case "mm":
                    s = "%d मिनिटे";
                    break;

                  case "h":
                    s = "एक तास";
                    break;

                  case "hh":
                    s = "%d तास";
                    break;

                  case "d":
                    s = "एक दिवस";
                    break;

                  case "dd":
                    s = "%d दिवस";
                    break;

                  case "M":
                    s = "एक महिना";
                    break;

                  case "MM":
                    s = "%d महिने";
                    break;

                  case "y":
                    s = "एक वर्ष";
                    break;

                  case "yy":
                    s = "%d वर्षे";
                } else switch (n) {
                  case "s":
                    s = "काही सेकंदां";
                    break;

                  case "ss":
                    s = "%d सेकंदां";
                    break;

                  case "m":
                    s = "एका मिनिटा";
                    break;

                  case "mm":
                    s = "%d मिनिटां";
                    break;

                  case "h":
                    s = "एका तासा";
                    break;

                  case "hh":
                    s = "%d तासां";
                    break;

                  case "d":
                    s = "एका दिवसा";
                    break;

                  case "dd":
                    s = "%d दिवसां";
                    break;

                  case "M":
                    s = "एका महिन्या";
                    break;

                  case "MM":
                    s = "%d महिन्यां";
                    break;

                  case "y":
                    s = "एका वर्षा";
                    break;

                  case "yy":
                    s = "%d वर्षां";
                }
                return s.replace(/%d/i, e);
            }
            var n = {
                "1": "१",
                "2": "२",
                "3": "३",
                "4": "४",
                "5": "५",
                "6": "६",
                "7": "७",
                "8": "८",
                "9": "९",
                "0": "०"
            }, a = {
                "१": "1",
                "२": "2",
                "३": "3",
                "४": "4",
                "५": "5",
                "६": "6",
                "७": "7",
                "८": "8",
                "९": "9",
                "०": "0"
            }, s = e.defineLocale("mr", {
                months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),
                monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),
                monthsParseExact: !0,
                weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
                weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),
                weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
                longDateFormat: {
                    LT: "A h:mm वाजता",
                    LTS: "A h:mm:ss वाजता",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm वाजता",
                    LLLL: "dddd, D MMMM YYYY, A h:mm वाजता"
                },
                calendar: {
                    sameDay: "[आज] LT",
                    nextDay: "[उद्या] LT",
                    nextWeek: "dddd, LT",
                    lastDay: "[काल] LT",
                    lastWeek: "[मागील] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%sमध्ये",
                    past: "%sपूर्वी",
                    s: t,
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                preparse: function(e) {
                    return e.replace(/[१२३४५६७८९०]/g, function(e) {
                        return a[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return n[e];
                    });
                },
                meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "रात्री" === t ? e < 4 ? e : e + 12 : "सकाळी" === t ? e : "दुपारी" === t ? e >= 10 ? e : e + 12 : "सायंकाळी" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "रात्री" : e < 10 ? "सकाळी" : e < 17 ? "दुपारी" : e < 20 ? "सायंकाळी" : "रात्री";
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return s;
        });
    },
    86: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ms", {
                months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
                monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
                weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
                weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
                weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
                longDateFormat: {
                    LT: "HH.mm",
                    LTS: "HH.mm.ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY [pukul] HH.mm",
                    LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
                },
                meridiemParse: /pagi|tengahari|petang|malam/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
                },
                calendar: {
                    sameDay: "[Hari ini pukul] LT",
                    nextDay: "[Esok pukul] LT",
                    nextWeek: "dddd [pukul] LT",
                    lastDay: "[Kelmarin pukul] LT",
                    lastWeek: "dddd [lepas pukul] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "dalam %s",
                    past: "%s yang lepas",
                    s: "beberapa saat",
                    ss: "%d saat",
                    m: "seminit",
                    mm: "%d minit",
                    h: "sejam",
                    hh: "%d jam",
                    d: "sehari",
                    dd: "%d hari",
                    M: "sebulan",
                    MM: "%d bulan",
                    y: "setahun",
                    yy: "%d tahun"
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    87: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ms-my", {
                months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
                monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
                weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
                weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
                weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
                longDateFormat: {
                    LT: "HH.mm",
                    LTS: "HH.mm.ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY [pukul] HH.mm",
                    LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
                },
                meridiemParse: /pagi|tengahari|petang|malam/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
                },
                calendar: {
                    sameDay: "[Hari ini pukul] LT",
                    nextDay: "[Esok pukul] LT",
                    nextWeek: "dddd [pukul] LT",
                    lastDay: "[Kelmarin pukul] LT",
                    lastWeek: "dddd [lepas pukul] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "dalam %s",
                    past: "%s yang lepas",
                    s: "beberapa saat",
                    ss: "%d saat",
                    m: "seminit",
                    mm: "%d minit",
                    h: "sejam",
                    hh: "%d jam",
                    d: "sehari",
                    dd: "%d hari",
                    M: "sebulan",
                    MM: "%d bulan",
                    y: "setahun",
                    yy: "%d tahun"
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    88: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("mt", {
                months: "Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),
                monthsShort: "Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),
                weekdays: "Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),
                weekdaysShort: "Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),
                weekdaysMin: "Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Illum fil-]LT",
                    nextDay: "[Għada fil-]LT",
                    nextWeek: "dddd [fil-]LT",
                    lastDay: "[Il-bieraħ fil-]LT",
                    lastWeek: "dddd [li għadda] [fil-]LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "f’ %s",
                    past: "%s ilu",
                    s: "ftit sekondi",
                    ss: "%d sekondi",
                    m: "minuta",
                    mm: "%d minuti",
                    h: "siegħa",
                    hh: "%d siegħat",
                    d: "ġurnata",
                    dd: "%d ġranet",
                    M: "xahar",
                    MM: "%d xhur",
                    y: "sena",
                    yy: "%d sni"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    89: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "၁",
                "2": "၂",
                "3": "၃",
                "4": "၄",
                "5": "၅",
                "6": "၆",
                "7": "၇",
                "8": "၈",
                "9": "၉",
                "0": "၀"
            }, n = {
                "၁": "1",
                "၂": "2",
                "၃": "3",
                "၄": "4",
                "၅": "5",
                "၆": "6",
                "၇": "7",
                "၈": "8",
                "၉": "9",
                "၀": "0"
            }, a = e.defineLocale("my", {
                months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),
                monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),
                weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),
                weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
                weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[ယနေ.] LT [မှာ]",
                    nextDay: "[မနက်ဖြန်] LT [မှာ]",
                    nextWeek: "dddd LT [မှာ]",
                    lastDay: "[မနေ.က] LT [မှာ]",
                    lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "လာမည့် %s မှာ",
                    past: "လွန်ခဲ့သော %s က",
                    s: "စက္ကန်.အနည်းငယ်",
                    ss: "%d စက္ကန့်",
                    m: "တစ်မိနစ်",
                    mm: "%d မိနစ်",
                    h: "တစ်နာရီ",
                    hh: "%d နာရီ",
                    d: "တစ်ရက်",
                    dd: "%d ရက်",
                    M: "တစ်လ",
                    MM: "%d လ",
                    y: "တစ်နှစ်",
                    yy: "%d နှစ်"
                },
                preparse: function(e) {
                    return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return a;
        });
    },
    90: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("nb", {
                months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
                monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
                monthsParseExact: !0,
                weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
                weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"),
                weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY [kl.] HH:mm",
                    LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
                },
                calendar: {
                    sameDay: "[i dag kl.] LT",
                    nextDay: "[i morgen kl.] LT",
                    nextWeek: "dddd [kl.] LT",
                    lastDay: "[i går kl.] LT",
                    lastWeek: "[forrige] dddd [kl.] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "om %s",
                    past: "%s siden",
                    s: "noen sekunder",
                    ss: "%d sekunder",
                    m: "ett minutt",
                    mm: "%d minutter",
                    h: "en time",
                    hh: "%d timer",
                    d: "en dag",
                    dd: "%d dager",
                    M: "en måned",
                    MM: "%d måneder",
                    y: "ett år",
                    yy: "%d år"
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    91: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "१",
                "2": "२",
                "3": "३",
                "4": "४",
                "5": "५",
                "6": "६",
                "7": "७",
                "8": "८",
                "9": "९",
                "0": "०"
            }, n = {
                "१": "1",
                "२": "2",
                "३": "3",
                "४": "4",
                "५": "5",
                "६": "6",
                "७": "7",
                "८": "8",
                "९": "9",
                "०": "0"
            }, a = e.defineLocale("ne", {
                months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),
                monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),
                monthsParseExact: !0,
                weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),
                weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),
                weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "Aको h:mm बजे",
                    LTS: "Aको h:mm:ss बजे",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, Aको h:mm बजे",
                    LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे"
                },
                preparse: function(e) {
                    return e.replace(/[१२३४५६७८९०]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "राति" === t ? e < 4 ? e : e + 12 : "बिहान" === t ? e : "दिउँसो" === t ? e >= 10 ? e : e + 12 : "साँझ" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 3 ? "राति" : e < 12 ? "बिहान" : e < 16 ? "दिउँसो" : e < 20 ? "साँझ" : "राति";
                },
                calendar: {
                    sameDay: "[आज] LT",
                    nextDay: "[भोलि] LT",
                    nextWeek: "[आउँदो] dddd[,] LT",
                    lastDay: "[हिजो] LT",
                    lastWeek: "[गएको] dddd[,] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%sमा",
                    past: "%s अगाडि",
                    s: "केही क्षण",
                    ss: "%d सेकेण्ड",
                    m: "एक मिनेट",
                    mm: "%d मिनेट",
                    h: "एक घण्टा",
                    hh: "%d घण्टा",
                    d: "एक दिन",
                    dd: "%d दिन",
                    M: "एक महिना",
                    MM: "%d महिना",
                    y: "एक बर्ष",
                    yy: "%d बर्ष"
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    92: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), n = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), a = [ /^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i ], s = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, r = e.defineLocale("nl", {
                months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
                monthsShort: function(e, a) {
                    return e ? /-MMM-/.test(a) ? n[e.month()] : t[e.month()] : t;
                },
                monthsRegex: s,
                monthsShortRegex: s,
                monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
                monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
                monthsParse: a,
                longMonthsParse: a,
                shortMonthsParse: a,
                weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
                weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
                weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD-MM-YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[vandaag om] LT",
                    nextDay: "[morgen om] LT",
                    nextWeek: "dddd [om] LT",
                    lastDay: "[gisteren om] LT",
                    lastWeek: "[afgelopen] dddd [om] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "over %s",
                    past: "%s geleden",
                    s: "een paar seconden",
                    ss: "%d seconden",
                    m: "één minuut",
                    mm: "%d minuten",
                    h: "één uur",
                    hh: "%d uur",
                    d: "één dag",
                    dd: "%d dagen",
                    M: "één maand",
                    MM: "%d maanden",
                    y: "één jaar",
                    yy: "%d jaar"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
                ordinal: function(e) {
                    return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    93: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), n = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), a = [ /^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i ], s = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, r = e.defineLocale("nl-be", {
                months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
                monthsShort: function(e, a) {
                    return e ? /-MMM-/.test(a) ? n[e.month()] : t[e.month()] : t;
                },
                monthsRegex: s,
                monthsShortRegex: s,
                monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
                monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
                monthsParse: a,
                longMonthsParse: a,
                shortMonthsParse: a,
                weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
                weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
                weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[vandaag om] LT",
                    nextDay: "[morgen om] LT",
                    nextWeek: "dddd [om] LT",
                    lastDay: "[gisteren om] LT",
                    lastWeek: "[afgelopen] dddd [om] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "over %s",
                    past: "%s geleden",
                    s: "een paar seconden",
                    ss: "%d seconden",
                    m: "één minuut",
                    mm: "%d minuten",
                    h: "één uur",
                    hh: "%d uur",
                    d: "één dag",
                    dd: "%d dagen",
                    M: "één maand",
                    MM: "%d maanden",
                    y: "één jaar",
                    yy: "%d jaar"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
                ordinal: function(e) {
                    return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    94: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("nn", {
                months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
                monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
                weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
                weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"),
                weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY [kl.] H:mm",
                    LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
                },
                calendar: {
                    sameDay: "[I dag klokka] LT",
                    nextDay: "[I morgon klokka] LT",
                    nextWeek: "dddd [klokka] LT",
                    lastDay: "[I går klokka] LT",
                    lastWeek: "[Føregåande] dddd [klokka] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "om %s",
                    past: "%s sidan",
                    s: "nokre sekund",
                    ss: "%d sekund",
                    m: "eit minutt",
                    mm: "%d minutt",
                    h: "ein time",
                    hh: "%d timar",
                    d: "ein dag",
                    dd: "%d dagar",
                    M: "ein månad",
                    MM: "%d månader",
                    y: "eit år",
                    yy: "%d år"
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    95: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "੧",
                "2": "੨",
                "3": "੩",
                "4": "੪",
                "5": "੫",
                "6": "੬",
                "7": "੭",
                "8": "੮",
                "9": "੯",
                "0": "੦"
            }, n = {
                "੧": "1",
                "੨": "2",
                "੩": "3",
                "੪": "4",
                "੫": "5",
                "੬": "6",
                "੭": "7",
                "੮": "8",
                "੯": "9",
                "੦": "0"
            }, a = e.defineLocale("pa-in", {
                months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
                monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
                weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),
                weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
                weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
                longDateFormat: {
                    LT: "A h:mm ਵਜੇ",
                    LTS: "A h:mm:ss ਵਜੇ",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm ਵਜੇ",
                    LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ"
                },
                calendar: {
                    sameDay: "[ਅਜ] LT",
                    nextDay: "[ਕਲ] LT",
                    nextWeek: "[ਅਗਲਾ] dddd, LT",
                    lastDay: "[ਕਲ] LT",
                    lastWeek: "[ਪਿਛਲੇ] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s ਵਿੱਚ",
                    past: "%s ਪਿਛਲੇ",
                    s: "ਕੁਝ ਸਕਿੰਟ",
                    ss: "%d ਸਕਿੰਟ",
                    m: "ਇਕ ਮਿੰਟ",
                    mm: "%d ਮਿੰਟ",
                    h: "ਇੱਕ ਘੰਟਾ",
                    hh: "%d ਘੰਟੇ",
                    d: "ਇੱਕ ਦਿਨ",
                    dd: "%d ਦਿਨ",
                    M: "ਇੱਕ ਮਹੀਨਾ",
                    MM: "%d ਮਹੀਨੇ",
                    y: "ਇੱਕ ਸਾਲ",
                    yy: "%d ਸਾਲ"
                },
                preparse: function(e) {
                    return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "ਰਾਤ" === t ? e < 4 ? e : e + 12 : "ਸਵੇਰ" === t ? e : "ਦੁਪਹਿਰ" === t ? e >= 10 ? e : e + 12 : "ਸ਼ਾਮ" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "ਰਾਤ" : e < 10 ? "ਸਵੇਰ" : e < 17 ? "ਦੁਪਹਿਰ" : e < 20 ? "ਸ਼ਾਮ" : "ਰਾਤ";
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    96: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e) {
                return e % 10 < 5 && e % 10 > 1 && ~~(e / 10) % 10 !== 1;
            }
            function n(e, n, a) {
                var s = e + " ";
                switch (a) {
                  case "ss":
                    return s + (t(e) ? "sekundy" : "sekund");

                  case "m":
                    return n ? "minuta" : "minutę";

                  case "mm":
                    return s + (t(e) ? "minuty" : "minut");

                  case "h":
                    return n ? "godzina" : "godzinę";

                  case "hh":
                    return s + (t(e) ? "godziny" : "godzin");

                  case "MM":
                    return s + (t(e) ? "miesiące" : "miesięcy");

                  case "yy":
                    return s + (t(e) ? "lata" : "lat");
                }
            }
            var a = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"), s = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"), r = e.defineLocale("pl", {
                months: function(e, t) {
                    return e ? "" === t ? "(" + s[e.month()] + "|" + a[e.month()] + ")" : /D MMMM/.test(t) ? s[e.month()] : a[e.month()] : a;
                },
                monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
                weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
                weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"),
                weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Dziś o] LT",
                    nextDay: "[Jutro o] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[W niedzielę o] LT";

                          case 2:
                            return "[We wtorek o] LT";

                          case 3:
                            return "[W środę o] LT";

                          case 6:
                            return "[W sobotę o] LT";

                          default:
                            return "[W] dddd [o] LT";
                        }
                    },
                    lastDay: "[Wczoraj o] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[W zeszłą niedzielę o] LT";

                          case 3:
                            return "[W zeszłą środę o] LT";

                          case 6:
                            return "[W zeszłą sobotę o] LT";

                          default:
                            return "[W zeszły] dddd [o] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "za %s",
                    past: "%s temu",
                    s: "kilka sekund",
                    ss: n,
                    m: n,
                    mm: n,
                    h: n,
                    hh: n,
                    d: "1 dzień",
                    dd: "%d dni",
                    M: "miesiąc",
                    MM: n,
                    y: "rok",
                    yy: n
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    97: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("pt", {
                months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
                monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
                weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
                weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
                weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D [de] MMMM [de] YYYY",
                    LLL: "D [de] MMMM [de] YYYY HH:mm",
                    LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Hoje às] LT",
                    nextDay: "[Amanhã às] LT",
                    nextWeek: "dddd [às] LT",
                    lastDay: "[Ontem às] LT",
                    lastWeek: function() {
                        return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "em %s",
                    past: "há %s",
                    s: "segundos",
                    ss: "%d segundos",
                    m: "um minuto",
                    mm: "%d minutos",
                    h: "uma hora",
                    hh: "%d horas",
                    d: "um dia",
                    dd: "%d dias",
                    M: "um mês",
                    MM: "%d meses",
                    y: "um ano",
                    yy: "%d anos"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    98: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("pt-br", {
                months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
                monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
                weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
                weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
                weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D [de] MMMM [de] YYYY",
                    LLL: "D [de] MMMM [de] YYYY [às] HH:mm",
                    LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm"
                },
                calendar: {
                    sameDay: "[Hoje às] LT",
                    nextDay: "[Amanhã às] LT",
                    nextWeek: "dddd [às] LT",
                    lastDay: "[Ontem às] LT",
                    lastWeek: function() {
                        return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "em %s",
                    past: "há %s",
                    s: "poucos segundos",
                    ss: "%d segundos",
                    m: "um minuto",
                    mm: "%d minutos",
                    h: "uma hora",
                    hh: "%d horas",
                    d: "um dia",
                    dd: "%d dias",
                    M: "um mês",
                    MM: "%d meses",
                    y: "um ano",
                    yy: "%d anos"
                },
                dayOfMonthOrdinalParse: /\d{1,2}º/,
                ordinal: "%dº"
            });
            return t;
        });
    },
    99: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n) {
                var a = {
                    ss: "secunde",
                    mm: "minute",
                    hh: "ore",
                    dd: "zile",
                    MM: "luni",
                    yy: "ani"
                }, s = " ";
                return (e % 100 >= 20 || e >= 100 && e % 100 === 0) && (s = " de "), e + s + a[n];
            }
            var n = e.defineLocale("ro", {
                months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
                monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
                monthsParseExact: !0,
                weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
                weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
                weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY H:mm",
                    LLLL: "dddd, D MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[azi la] LT",
                    nextDay: "[mâine la] LT",
                    nextWeek: "dddd [la] LT",
                    lastDay: "[ieri la] LT",
                    lastWeek: "[fosta] dddd [la] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "peste %s",
                    past: "%s în urmă",
                    s: "câteva secunde",
                    ss: t,
                    m: "un minut",
                    mm: t,
                    h: "o oră",
                    hh: t,
                    d: "o zi",
                    dd: t,
                    M: "o lună",
                    MM: t,
                    y: "un an",
                    yy: t
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    100: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t) {
                var n = e.split("_");
                return t % 10 === 1 && t % 100 !== 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2];
            }
            function n(e, n, a) {
                var s = {
                    ss: n ? "секунда_секунды_секунд" : "секунду_секунды_секунд",
                    mm: n ? "минута_минуты_минут" : "минуту_минуты_минут",
                    hh: "час_часа_часов",
                    dd: "день_дня_дней",
                    MM: "месяц_месяца_месяцев",
                    yy: "год_года_лет"
                };
                return "m" === a ? n ? "минута" : "минуту" : e + " " + t(s[a], +e);
            }
            var a = [ /^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i ], s = e.defineLocale("ru", {
                months: {
                    format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),
                    standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")
                },
                monthsShort: {
                    format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),
                    standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")
                },
                weekdays: {
                    standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),
                    format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),
                    isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
                },
                weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"),
                weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"),
                monthsParse: a,
                longMonthsParse: a,
                shortMonthsParse: a,
                monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
                monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
                monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
                monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY г.",
                    LLL: "D MMMM YYYY г., H:mm",
                    LLLL: "dddd, D MMMM YYYY г., H:mm"
                },
                calendar: {
                    sameDay: "[Сегодня, в] LT",
                    nextDay: "[Завтра, в] LT",
                    lastDay: "[Вчера, в] LT",
                    nextWeek: function(e) {
                        if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
                        switch (this.day()) {
                          case 0:
                            return "[В следующее] dddd, [в] LT";

                          case 1:
                          case 2:
                          case 4:
                            return "[В следующий] dddd, [в] LT";

                          case 3:
                          case 5:
                          case 6:
                            return "[В следующую] dddd, [в] LT";
                        }
                    },
                    lastWeek: function(e) {
                        if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
                        switch (this.day()) {
                          case 0:
                            return "[В прошлое] dddd, [в] LT";

                          case 1:
                          case 2:
                          case 4:
                            return "[В прошлый] dddd, [в] LT";

                          case 3:
                          case 5:
                          case 6:
                            return "[В прошлую] dddd, [в] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "через %s",
                    past: "%s назад",
                    s: "несколько секунд",
                    ss: n,
                    m: n,
                    mm: n,
                    h: "час",
                    hh: n,
                    d: "день",
                    dd: n,
                    M: "месяц",
                    MM: n,
                    y: "год",
                    yy: n
                },
                meridiemParse: /ночи|утра|дня|вечера/i,
                isPM: function(e) {
                    return /^(дня|вечера)$/.test(e);
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "ночи" : e < 12 ? "утра" : e < 17 ? "дня" : "вечера";
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "M":
                      case "d":
                      case "DDD":
                        return e + "-й";

                      case "D":
                        return e + "-го";

                      case "w":
                      case "W":
                        return e + "-я";

                      default:
                        return e;
                    }
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return s;
        });
    },
    101: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = [ "جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر" ], n = [ "آچر", "سومر", "اڱارو", "اربع", "خميس", "جمع", "ڇنڇر" ], a = e.defineLocale("sd", {
                months: t,
                monthsShort: t,
                weekdays: n,
                weekdaysShort: n,
                weekdaysMin: n,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd، D MMMM YYYY HH:mm"
                },
                meridiemParse: /صبح|شام/,
                isPM: function(e) {
                    return "شام" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "صبح" : "شام";
                },
                calendar: {
                    sameDay: "[اڄ] LT",
                    nextDay: "[سڀاڻي] LT",
                    nextWeek: "dddd [اڳين هفتي تي] LT",
                    lastDay: "[ڪالهه] LT",
                    lastWeek: "[گزريل هفتي] dddd [تي] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s پوء",
                    past: "%s اڳ",
                    s: "چند سيڪنڊ",
                    ss: "%d سيڪنڊ",
                    m: "هڪ منٽ",
                    mm: "%d منٽ",
                    h: "هڪ ڪلاڪ",
                    hh: "%d ڪلاڪ",
                    d: "هڪ ڏينهن",
                    dd: "%d ڏينهن",
                    M: "هڪ مهينو",
                    MM: "%d مهينا",
                    y: "هڪ سال",
                    yy: "%d سال"
                },
                preparse: function(e) {
                    return e.replace(/،/g, ",");
                },
                postformat: function(e) {
                    return e.replace(/,/g, "،");
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return a;
        });
    },
    102: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("se", {
                months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),
                monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),
                weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),
                weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),
                weekdaysMin: "s_v_m_g_d_b_L".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "MMMM D. [b.] YYYY",
                    LLL: "MMMM D. [b.] YYYY [ti.] HH:mm",
                    LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm"
                },
                calendar: {
                    sameDay: "[otne ti] LT",
                    nextDay: "[ihttin ti] LT",
                    nextWeek: "dddd [ti] LT",
                    lastDay: "[ikte ti] LT",
                    lastWeek: "[ovddit] dddd [ti] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s geažes",
                    past: "maŋit %s",
                    s: "moadde sekunddat",
                    ss: "%d sekunddat",
                    m: "okta minuhta",
                    mm: "%d minuhtat",
                    h: "okta diimmu",
                    hh: "%d diimmut",
                    d: "okta beaivi",
                    dd: "%d beaivvit",
                    M: "okta mánnu",
                    MM: "%d mánut",
                    y: "okta jahki",
                    yy: "%d jagit"
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    103: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("si", {
                months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),
                monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),
                weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),
                weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),
                weekdaysMin: "ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "a h:mm",
                    LTS: "a h:mm:ss",
                    L: "YYYY/MM/DD",
                    LL: "YYYY MMMM D",
                    LLL: "YYYY MMMM D, a h:mm",
                    LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss"
                },
                calendar: {
                    sameDay: "[අද] LT[ට]",
                    nextDay: "[හෙට] LT[ට]",
                    nextWeek: "dddd LT[ට]",
                    lastDay: "[ඊයේ] LT[ට]",
                    lastWeek: "[පසුගිය] dddd LT[ට]",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%sකින්",
                    past: "%sකට පෙර",
                    s: "තත්පර කිහිපය",
                    ss: "තත්පර %d",
                    m: "මිනිත්තුව",
                    mm: "මිනිත්තු %d",
                    h: "පැය",
                    hh: "පැය %d",
                    d: "දිනය",
                    dd: "දින %d",
                    M: "මාසය",
                    MM: "මාස %d",
                    y: "වසර",
                    yy: "වසර %d"
                },
                dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
                ordinal: function(e) {
                    return e + " වැනි";
                },
                meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
                isPM: function(e) {
                    return "ප.ව." === e || "පස් වරු" === e;
                },
                meridiem: function(e, t, n) {
                    return e > 11 ? n ? "ප.ව." : "පස් වරු" : n ? "පෙ.ව." : "පෙර වරු";
                }
            });
            return t;
        });
    },
    104: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e) {
                return e > 1 && e < 5;
            }
            function n(e, n, a, s) {
                var r = e + " ";
                switch (a) {
                  case "s":
                    return n || s ? "pár sekúnd" : "pár sekundami";

                  case "ss":
                    return n || s ? r + (t(e) ? "sekundy" : "sekúnd") : r + "sekundami";

                  case "m":
                    return n ? "minúta" : s ? "minútu" : "minútou";

                  case "mm":
                    return n || s ? r + (t(e) ? "minúty" : "minút") : r + "minútami";

                  case "h":
                    return n ? "hodina" : s ? "hodinu" : "hodinou";

                  case "hh":
                    return n || s ? r + (t(e) ? "hodiny" : "hodín") : r + "hodinami";

                  case "d":
                    return n || s ? "deň" : "dňom";

                  case "dd":
                    return n || s ? r + (t(e) ? "dni" : "dní") : r + "dňami";

                  case "M":
                    return n || s ? "mesiac" : "mesiacom";

                  case "MM":
                    return n || s ? r + (t(e) ? "mesiace" : "mesiacov") : r + "mesiacmi";

                  case "y":
                    return n || s ? "rok" : "rokom";

                  case "yy":
                    return n || s ? r + (t(e) ? "roky" : "rokov") : r + "rokmi";
                }
            }
            var a = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"), s = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"), r = e.defineLocale("sk", {
                months: a,
                monthsShort: s,
                weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
                weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"),
                weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"),
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd D. MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[dnes o] LT",
                    nextDay: "[zajtra o] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[v nedeľu o] LT";

                          case 1:
                          case 2:
                            return "[v] dddd [o] LT";

                          case 3:
                            return "[v stredu o] LT";

                          case 4:
                            return "[vo štvrtok o] LT";

                          case 5:
                            return "[v piatok o] LT";

                          case 6:
                            return "[v sobotu o] LT";
                        }
                    },
                    lastDay: "[včera o] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[minulú nedeľu o] LT";

                          case 1:
                          case 2:
                            return "[minulý] dddd [o] LT";

                          case 3:
                            return "[minulú stredu o] LT";

                          case 4:
                          case 5:
                            return "[minulý] dddd [o] LT";

                          case 6:
                            return "[minulú sobotu o] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "za %s",
                    past: "pred %s",
                    s: n,
                    ss: n,
                    m: n,
                    mm: n,
                    h: n,
                    hh: n,
                    d: n,
                    dd: n,
                    M: n,
                    MM: n,
                    y: n,
                    yy: n
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return r;
        });
    },
    105: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = e + " ";
                switch (n) {
                  case "s":
                    return t || a ? "nekaj sekund" : "nekaj sekundami";

                  case "ss":
                    return s += 1 === e ? t ? "sekundo" : "sekundi" : 2 === e ? t || a ? "sekundi" : "sekundah" : e < 5 ? t || a ? "sekunde" : "sekundah" : "sekund";

                  case "m":
                    return t ? "ena minuta" : "eno minuto";

                  case "mm":
                    return s += 1 === e ? t ? "minuta" : "minuto" : 2 === e ? t || a ? "minuti" : "minutama" : e < 5 ? t || a ? "minute" : "minutami" : t || a ? "minut" : "minutami";

                  case "h":
                    return t ? "ena ura" : "eno uro";

                  case "hh":
                    return s += 1 === e ? t ? "ura" : "uro" : 2 === e ? t || a ? "uri" : "urama" : e < 5 ? t || a ? "ure" : "urami" : t || a ? "ur" : "urami";

                  case "d":
                    return t || a ? "en dan" : "enim dnem";

                  case "dd":
                    return s += 1 === e ? t || a ? "dan" : "dnem" : 2 === e ? t || a ? "dni" : "dnevoma" : t || a ? "dni" : "dnevi";

                  case "M":
                    return t || a ? "en mesec" : "enim mesecem";

                  case "MM":
                    return s += 1 === e ? t || a ? "mesec" : "mesecem" : 2 === e ? t || a ? "meseca" : "mesecema" : e < 5 ? t || a ? "mesece" : "meseci" : t || a ? "mesecev" : "meseci";

                  case "y":
                    return t || a ? "eno leto" : "enim letom";

                  case "yy":
                    return s += 1 === e ? t || a ? "leto" : "letom" : 2 === e ? t || a ? "leti" : "letoma" : e < 5 ? t || a ? "leta" : "leti" : t || a ? "let" : "leti";
                }
            }
            var n = e.defineLocale("sl", {
                months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
                monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
                monthsParseExact: !0,
                weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
                weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"),
                weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd, D. MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[danes ob] LT",
                    nextDay: "[jutri ob] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[v] [nedeljo] [ob] LT";

                          case 3:
                            return "[v] [sredo] [ob] LT";

                          case 6:
                            return "[v] [soboto] [ob] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[v] dddd [ob] LT";
                        }
                    },
                    lastDay: "[včeraj ob] LT",
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[prejšnjo] [nedeljo] [ob] LT";

                          case 3:
                            return "[prejšnjo] [sredo] [ob] LT";

                          case 6:
                            return "[prejšnjo] [soboto] [ob] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[prejšnji] dddd [ob] LT";
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "čez %s",
                    past: "pred %s",
                    s: t,
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    106: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("sq", {
                months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
                monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
                weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
                weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
                weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"),
                weekdaysParseExact: !0,
                meridiemParse: /PD|MD/,
                isPM: function(e) {
                    return "M" === e.charAt(0);
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "PD" : "MD";
                },
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Sot në] LT",
                    nextDay: "[Nesër në] LT",
                    nextWeek: "dddd [në] LT",
                    lastDay: "[Dje në] LT",
                    lastWeek: "dddd [e kaluar në] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "në %s",
                    past: "%s më parë",
                    s: "disa sekonda",
                    ss: "%d sekonda",
                    m: "një minutë",
                    mm: "%d minuta",
                    h: "një orë",
                    hh: "%d orë",
                    d: "një ditë",
                    dd: "%d ditë",
                    M: "një muaj",
                    MM: "%d muaj",
                    y: "një vit",
                    yy: "%d vite"
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    107: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                words: {
                    ss: [ "sekunda", "sekunde", "sekundi" ],
                    m: [ "jedan minut", "jedne minute" ],
                    mm: [ "minut", "minute", "minuta" ],
                    h: [ "jedan sat", "jednog sata" ],
                    hh: [ "sat", "sata", "sati" ],
                    dd: [ "dan", "dana", "dana" ],
                    MM: [ "mesec", "meseca", "meseci" ],
                    yy: [ "godina", "godine", "godina" ]
                },
                correctGrammaticalCase: function(e, t) {
                    return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
                },
                translate: function(e, n, a) {
                    var s = t.words[a];
                    return 1 === a.length ? n ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s);
                }
            }, n = e.defineLocale("sr", {
                months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
                monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
                monthsParseExact: !0,
                weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),
                weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"),
                weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd, D. MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[danas u] LT",
                    nextDay: "[sutra u] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[u] [nedelju] [u] LT";

                          case 3:
                            return "[u] [sredu] [u] LT";

                          case 6:
                            return "[u] [subotu] [u] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[u] dddd [u] LT";
                        }
                    },
                    lastDay: "[juče u] LT",
                    lastWeek: function() {
                        var e = [ "[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT" ];
                        return e[this.day()];
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "za %s",
                    past: "pre %s",
                    s: "nekoliko sekundi",
                    ss: t.translate,
                    m: t.translate,
                    mm: t.translate,
                    h: t.translate,
                    hh: t.translate,
                    d: "dan",
                    dd: t.translate,
                    M: "mesec",
                    MM: t.translate,
                    y: "godinu",
                    yy: t.translate
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    108: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                words: {
                    ss: [ "секунда", "секунде", "секунди" ],
                    m: [ "један минут", "једне минуте" ],
                    mm: [ "минут", "минуте", "минута" ],
                    h: [ "један сат", "једног сата" ],
                    hh: [ "сат", "сата", "сати" ],
                    dd: [ "дан", "дана", "дана" ],
                    MM: [ "месец", "месеца", "месеци" ],
                    yy: [ "година", "године", "година" ]
                },
                correctGrammaticalCase: function(e, t) {
                    return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
                },
                translate: function(e, n, a) {
                    var s = t.words[a];
                    return 1 === a.length ? n ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s);
                }
            }, n = e.defineLocale("sr-cyrl", {
                months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),
                monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),
                monthsParseExact: !0,
                weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),
                weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"),
                weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM YYYY",
                    LLL: "D. MMMM YYYY H:mm",
                    LLLL: "dddd, D. MMMM YYYY H:mm"
                },
                calendar: {
                    sameDay: "[данас у] LT",
                    nextDay: "[сутра у] LT",
                    nextWeek: function() {
                        switch (this.day()) {
                          case 0:
                            return "[у] [недељу] [у] LT";

                          case 3:
                            return "[у] [среду] [у] LT";

                          case 6:
                            return "[у] [суботу] [у] LT";

                          case 1:
                          case 2:
                          case 4:
                          case 5:
                            return "[у] dddd [у] LT";
                        }
                    },
                    lastDay: "[јуче у] LT",
                    lastWeek: function() {
                        var e = [ "[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT" ];
                        return e[this.day()];
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "за %s",
                    past: "пре %s",
                    s: "неколико секунди",
                    ss: t.translate,
                    m: t.translate,
                    mm: t.translate,
                    h: t.translate,
                    hh: t.translate,
                    d: "дан",
                    dd: t.translate,
                    M: "месец",
                    MM: t.translate,
                    y: "годину",
                    yy: t.translate
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    109: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ss", {
                months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),
                monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),
                weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),
                weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),
                weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY h:mm A",
                    LLLL: "dddd, D MMMM YYYY h:mm A"
                },
                calendar: {
                    sameDay: "[Namuhla nga] LT",
                    nextDay: "[Kusasa nga] LT",
                    nextWeek: "dddd [nga] LT",
                    lastDay: "[Itolo nga] LT",
                    lastWeek: "dddd [leliphelile] [nga] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "nga %s",
                    past: "wenteka nga %s",
                    s: "emizuzwana lomcane",
                    ss: "%d mzuzwana",
                    m: "umzuzu",
                    mm: "%d emizuzu",
                    h: "lihora",
                    hh: "%d emahora",
                    d: "lilanga",
                    dd: "%d emalanga",
                    M: "inyanga",
                    MM: "%d tinyanga",
                    y: "umnyaka",
                    yy: "%d iminyaka"
                },
                meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
                meridiem: function(e, t, n) {
                    return e < 11 ? "ekuseni" : e < 15 ? "emini" : e < 19 ? "entsambama" : "ebusuku";
                },
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "ekuseni" === t ? e : "emini" === t ? e >= 11 ? e : e + 12 : "entsambama" === t || "ebusuku" === t ? 0 === e ? 0 : e + 12 : void 0;
                },
                dayOfMonthOrdinalParse: /\d{1,2}/,
                ordinal: "%d",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    110: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("sv", {
                months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
                monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
                weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
                weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"),
                weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY-MM-DD",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY [kl.] HH:mm",
                    LLLL: "dddd D MMMM YYYY [kl.] HH:mm",
                    lll: "D MMM YYYY HH:mm",
                    llll: "ddd D MMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Idag] LT",
                    nextDay: "[Imorgon] LT",
                    lastDay: "[Igår] LT",
                    nextWeek: "[På] dddd LT",
                    lastWeek: "[I] dddd[s] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "om %s",
                    past: "för %s sedan",
                    s: "några sekunder",
                    ss: "%d sekunder",
                    m: "en minut",
                    mm: "%d minuter",
                    h: "en timme",
                    hh: "%d timmar",
                    d: "en dag",
                    dd: "%d dagar",
                    M: "en månad",
                    MM: "%d månader",
                    y: "ett år",
                    yy: "%d år"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "e" : 1 === t ? "a" : 2 === t ? "a" : "e";
                    return e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    111: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("sw", {
                months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),
                monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),
                weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),
                weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),
                weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[leo saa] LT",
                    nextDay: "[kesho saa] LT",
                    nextWeek: "[wiki ijayo] dddd [saat] LT",
                    lastDay: "[jana] LT",
                    lastWeek: "[wiki iliyopita] dddd [saat] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s baadaye",
                    past: "tokea %s",
                    s: "hivi punde",
                    ss: "sekunde %d",
                    m: "dakika moja",
                    mm: "dakika %d",
                    h: "saa limoja",
                    hh: "masaa %d",
                    d: "siku moja",
                    dd: "masiku %d",
                    M: "mwezi mmoja",
                    MM: "miezi %d",
                    y: "mwaka mmoja",
                    yy: "miaka %d"
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    112: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                "1": "௧",
                "2": "௨",
                "3": "௩",
                "4": "௪",
                "5": "௫",
                "6": "௬",
                "7": "௭",
                "8": "௮",
                "9": "௯",
                "0": "௦"
            }, n = {
                "௧": "1",
                "௨": "2",
                "௩": "3",
                "௪": "4",
                "௫": "5",
                "௬": "6",
                "௭": "7",
                "௮": "8",
                "௯": "9",
                "௦": "0"
            }, a = e.defineLocale("ta", {
                months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
                monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
                weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),
                weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),
                weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, HH:mm",
                    LLLL: "dddd, D MMMM YYYY, HH:mm"
                },
                calendar: {
                    sameDay: "[இன்று] LT",
                    nextDay: "[நாளை] LT",
                    nextWeek: "dddd, LT",
                    lastDay: "[நேற்று] LT",
                    lastWeek: "[கடந்த வாரம்] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s இல்",
                    past: "%s முன்",
                    s: "ஒரு சில விநாடிகள்",
                    ss: "%d விநாடிகள்",
                    m: "ஒரு நிமிடம்",
                    mm: "%d நிமிடங்கள்",
                    h: "ஒரு மணி நேரம்",
                    hh: "%d மணி நேரம்",
                    d: "ஒரு நாள்",
                    dd: "%d நாட்கள்",
                    M: "ஒரு மாதம்",
                    MM: "%d மாதங்கள்",
                    y: "ஒரு வருடம்",
                    yy: "%d ஆண்டுகள்"
                },
                dayOfMonthOrdinalParse: /\d{1,2}வது/,
                ordinal: function(e) {
                    return e + "வது";
                },
                preparse: function(e) {
                    return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function(e) {
                        return n[e];
                    });
                },
                postformat: function(e) {
                    return e.replace(/\d/g, function(e) {
                        return t[e];
                    });
                },
                meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
                meridiem: function(e, t, n) {
                    return e < 2 ? " யாமம்" : e < 6 ? " வைகறை" : e < 10 ? " காலை" : e < 14 ? " நண்பகல்" : e < 18 ? " எற்பாடு" : e < 22 ? " மாலை" : " யாமம்";
                },
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "யாமம்" === t ? e < 2 ? e : e + 12 : "வைகறை" === t || "காலை" === t ? e : "நண்பகல்" === t && e >= 10 ? e : e + 12;
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return a;
        });
    },
    113: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("te", {
                months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),
                monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),
                monthsParseExact: !0,
                weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),
                weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),
                weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"),
                longDateFormat: {
                    LT: "A h:mm",
                    LTS: "A h:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY, A h:mm",
                    LLLL: "dddd, D MMMM YYYY, A h:mm"
                },
                calendar: {
                    sameDay: "[నేడు] LT",
                    nextDay: "[రేపు] LT",
                    nextWeek: "dddd, LT",
                    lastDay: "[నిన్న] LT",
                    lastWeek: "[గత] dddd, LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s లో",
                    past: "%s క్రితం",
                    s: "కొన్ని క్షణాలు",
                    ss: "%d సెకన్లు",
                    m: "ఒక నిమిషం",
                    mm: "%d నిమిషాలు",
                    h: "ఒక గంట",
                    hh: "%d గంటలు",
                    d: "ఒక రోజు",
                    dd: "%d రోజులు",
                    M: "ఒక నెల",
                    MM: "%d నెలలు",
                    y: "ఒక సంవత్సరం",
                    yy: "%d సంవత్సరాలు"
                },
                dayOfMonthOrdinalParse: /\d{1,2}వ/,
                ordinal: "%dవ",
                meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "రాత్రి" === t ? e < 4 ? e : e + 12 : "ఉదయం" === t ? e : "మధ్యాహ్నం" === t ? e >= 10 ? e : e + 12 : "సాయంత్రం" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "రాత్రి" : e < 10 ? "ఉదయం" : e < 17 ? "మధ్యాహ్నం" : e < 20 ? "సాయంత్రం" : "రాత్రి";
                },
                week: {
                    dow: 0,
                    doy: 6
                }
            });
            return t;
        });
    },
    114: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("tet", {
                months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),
                monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
                weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),
                weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),
                weekdaysMin: "Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Ohin iha] LT",
                    nextDay: "[Aban iha] LT",
                    nextWeek: "dddd [iha] LT",
                    lastDay: "[Horiseik iha] LT",
                    lastWeek: "dddd [semana kotuk] [iha] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "iha %s",
                    past: "%s liuba",
                    s: "minutu balun",
                    ss: "minutu %d",
                    m: "minutu ida",
                    mm: "minutu %d",
                    h: "oras ida",
                    hh: "oras %d",
                    d: "loron ida",
                    dd: "loron %d",
                    M: "fulan ida",
                    MM: "fulan %d",
                    y: "tinan ida",
                    yy: "tinan %d"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    115: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                0: "-ум",
                1: "-ум",
                2: "-юм",
                3: "-юм",
                4: "-ум",
                5: "-ум",
                6: "-ум",
                7: "-ум",
                8: "-ум",
                9: "-ум",
                10: "-ум",
                12: "-ум",
                13: "-ум",
                20: "-ум",
                30: "-юм",
                40: "-ум",
                50: "-ум",
                60: "-ум",
                70: "-ум",
                80: "-ум",
                90: "-ум",
                100: "-ум"
            }, n = e.defineLocale("tg", {
                months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),
                monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
                weekdays: "якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),
                weekdaysShort: "яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),
                weekdaysMin: "яш_дш_сш_чш_пш_ҷм_шб".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Имрӯз соати] LT",
                    nextDay: "[Пагоҳ соати] LT",
                    lastDay: "[Дирӯз соати] LT",
                    nextWeek: "dddd[и] [ҳафтаи оянда соати] LT",
                    lastWeek: "dddd[и] [ҳафтаи гузашта соати] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "баъди %s",
                    past: "%s пеш",
                    s: "якчанд сония",
                    m: "як дақиқа",
                    mm: "%d дақиқа",
                    h: "як соат",
                    hh: "%d соат",
                    d: "як рӯз",
                    dd: "%d рӯз",
                    M: "як моҳ",
                    MM: "%d моҳ",
                    y: "як сол",
                    yy: "%d сол"
                },
                meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "шаб" === t ? e < 4 ? e : e + 12 : "субҳ" === t ? e : "рӯз" === t ? e >= 11 ? e : e + 12 : "бегоҳ" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "шаб" : e < 11 ? "субҳ" : e < 16 ? "рӯз" : e < 19 ? "бегоҳ" : "шаб";
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
                ordinal: function(e) {
                    var n = e % 10, a = e >= 100 ? 100 : null;
                    return e + (t[e] || t[n] || t[a]);
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    116: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("th", {
                months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
                monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),
                monthsParseExact: !0,
                weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
                weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),
                weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "H:mm",
                    LTS: "H:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY เวลา H:mm",
                    LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm"
                },
                meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
                isPM: function(e) {
                    return "หลังเที่ยง" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "ก่อนเที่ยง" : "หลังเที่ยง";
                },
                calendar: {
                    sameDay: "[วันนี้ เวลา] LT",
                    nextDay: "[พรุ่งนี้ เวลา] LT",
                    nextWeek: "dddd[หน้า เวลา] LT",
                    lastDay: "[เมื่อวานนี้ เวลา] LT",
                    lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "อีก %s",
                    past: "%sที่แล้ว",
                    s: "ไม่กี่วินาที",
                    ss: "%d วินาที",
                    m: "1 นาที",
                    mm: "%d นาที",
                    h: "1 ชั่วโมง",
                    hh: "%d ชั่วโมง",
                    d: "1 วัน",
                    dd: "%d วัน",
                    M: "1 เดือน",
                    MM: "%d เดือน",
                    y: "1 ปี",
                    yy: "%d ปี"
                }
            });
            return t;
        });
    },
    117: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("tl-ph", {
                months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
                monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
                weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
                weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
                weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "MM/D/YYYY",
                    LL: "MMMM D, YYYY",
                    LLL: "MMMM D, YYYY HH:mm",
                    LLLL: "dddd, MMMM DD, YYYY HH:mm"
                },
                calendar: {
                    sameDay: "LT [ngayong araw]",
                    nextDay: "[Bukas ng] LT",
                    nextWeek: "LT [sa susunod na] dddd",
                    lastDay: "LT [kahapon]",
                    lastWeek: "LT [noong nakaraang] dddd",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "sa loob ng %s",
                    past: "%s ang nakalipas",
                    s: "ilang segundo",
                    ss: "%d segundo",
                    m: "isang minuto",
                    mm: "%d minuto",
                    h: "isang oras",
                    hh: "%d oras",
                    d: "isang araw",
                    dd: "%d araw",
                    M: "isang buwan",
                    MM: "%d buwan",
                    y: "isang taon",
                    yy: "%d taon"
                },
                dayOfMonthOrdinalParse: /\d{1,2}/,
                ordinal: function(e) {
                    return e;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    118: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e) {
                var t = e;
                return t = e.indexOf("jaj") !== -1 ? t.slice(0, -3) + "leS" : e.indexOf("jar") !== -1 ? t.slice(0, -3) + "waQ" : e.indexOf("DIS") !== -1 ? t.slice(0, -3) + "nem" : t + " pIq";
            }
            function n(e) {
                var t = e;
                return t = e.indexOf("jaj") !== -1 ? t.slice(0, -3) + "Hu’" : e.indexOf("jar") !== -1 ? t.slice(0, -3) + "wen" : e.indexOf("DIS") !== -1 ? t.slice(0, -3) + "ben" : t + " ret";
            }
            function a(e, t, n, a) {
                var r = s(e);
                switch (n) {
                  case "ss":
                    return r + " lup";

                  case "mm":
                    return r + " tup";

                  case "hh":
                    return r + " rep";

                  case "dd":
                    return r + " jaj";

                  case "MM":
                    return r + " jar";

                  case "yy":
                    return r + " DIS";
                }
            }
            function s(e) {
                var t = Math.floor(e % 1e3 / 100), n = Math.floor(e % 100 / 10), a = e % 10, s = "";
                return t > 0 && (s += r[t] + "vatlh"), n > 0 && (s += ("" !== s ? " " : "") + r[n] + "maH"), 
                a > 0 && (s += ("" !== s ? " " : "") + r[a]), "" === s ? "pagh" : s;
            }
            var r = "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_"), i = e.defineLocale("tlh", {
                months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),
                monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),
                monthsParseExact: !0,
                weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
                weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
                weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[DaHjaj] LT",
                    nextDay: "[wa’leS] LT",
                    nextWeek: "LLL",
                    lastDay: "[wa’Hu’] LT",
                    lastWeek: "LLL",
                    sameElse: "L"
                },
                relativeTime: {
                    future: t,
                    past: n,
                    s: "puS lup",
                    ss: a,
                    m: "wa’ tup",
                    mm: a,
                    h: "wa’ rep",
                    hh: a,
                    d: "wa’ jaj",
                    dd: a,
                    M: "wa’ jar",
                    MM: a,
                    y: "wa’ DIS",
                    yy: a
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return i;
        });
    },
    119: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = {
                1: "'inci",
                5: "'inci",
                8: "'inci",
                70: "'inci",
                80: "'inci",
                2: "'nci",
                7: "'nci",
                20: "'nci",
                50: "'nci",
                3: "'üncü",
                4: "'üncü",
                100: "'üncü",
                6: "'ncı",
                9: "'uncu",
                10: "'uncu",
                30: "'uncu",
                60: "'ıncı",
                90: "'ıncı"
            }, n = e.defineLocale("tr", {
                months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
                monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
                weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
                weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
                weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[bugün saat] LT",
                    nextDay: "[yarın saat] LT",
                    nextWeek: "[gelecek] dddd [saat] LT",
                    lastDay: "[dün] LT",
                    lastWeek: "[geçen] dddd [saat] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s sonra",
                    past: "%s önce",
                    s: "birkaç saniye",
                    ss: "%d saniye",
                    m: "bir dakika",
                    mm: "%d dakika",
                    h: "bir saat",
                    hh: "%d saat",
                    d: "bir gün",
                    dd: "%d gün",
                    M: "bir ay",
                    MM: "%d ay",
                    y: "bir yıl",
                    yy: "%d yıl"
                },
                ordinal: function(e, n) {
                    switch (n) {
                      case "d":
                      case "D":
                      case "Do":
                      case "DD":
                        return e;

                      default:
                        if (0 === e) return e + "'ıncı";
                        var a = e % 10, s = e % 100 - a, r = e >= 100 ? 100 : null;
                        return e + (t[a] || t[s] || t[r]);
                    }
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return n;
        });
    },
    120: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t, n, a) {
                var s = {
                    s: [ "viensas secunds", "'iensas secunds" ],
                    ss: [ e + " secunds", "" + e + " secunds" ],
                    m: [ "'n míut", "'iens míut" ],
                    mm: [ e + " míuts", "" + e + " míuts" ],
                    h: [ "'n þora", "'iensa þora" ],
                    hh: [ e + " þoras", "" + e + " þoras" ],
                    d: [ "'n ziua", "'iensa ziua" ],
                    dd: [ e + " ziuas", "" + e + " ziuas" ],
                    M: [ "'n mes", "'iens mes" ],
                    MM: [ e + " mesen", "" + e + " mesen" ],
                    y: [ "'n ar", "'iens ar" ],
                    yy: [ e + " ars", "" + e + " ars" ]
                };
                return a ? s[n][0] : t ? s[n][0] : s[n][1];
            }
            var n = e.defineLocale("tzl", {
                months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),
                monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),
                weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),
                weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),
                weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),
                longDateFormat: {
                    LT: "HH.mm",
                    LTS: "HH.mm.ss",
                    L: "DD.MM.YYYY",
                    LL: "D. MMMM [dallas] YYYY",
                    LLL: "D. MMMM [dallas] YYYY HH.mm",
                    LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm"
                },
                meridiemParse: /d\'o|d\'a/i,
                isPM: function(e) {
                    return "d'o" === e.toLowerCase();
                },
                meridiem: function(e, t, n) {
                    return e > 11 ? n ? "d'o" : "D'O" : n ? "d'a" : "D'A";
                },
                calendar: {
                    sameDay: "[oxhi à] LT",
                    nextDay: "[demà à] LT",
                    nextWeek: "dddd [à] LT",
                    lastDay: "[ieiri à] LT",
                    lastWeek: "[sür el] dddd [lasteu à] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "osprei %s",
                    past: "ja%s",
                    s: t,
                    ss: t,
                    m: t,
                    mm: t,
                    h: t,
                    hh: t,
                    d: t,
                    dd: t,
                    M: t,
                    MM: t,
                    y: t,
                    yy: t
                },
                dayOfMonthOrdinalParse: /\d{1,2}\./,
                ordinal: "%d.",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return n;
        });
    },
    121: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("tzm", {
                months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
                monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
                weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
                weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
                weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
                    nextDay: "[ⴰⵙⴽⴰ ⴴ] LT",
                    nextWeek: "dddd [ⴴ] LT",
                    lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT",
                    lastWeek: "dddd [ⴴ] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
                    past: "ⵢⴰⵏ %s",
                    s: "ⵉⵎⵉⴽ",
                    ss: "%d ⵉⵎⵉⴽ",
                    m: "ⵎⵉⵏⵓⴺ",
                    mm: "%d ⵎⵉⵏⵓⴺ",
                    h: "ⵙⴰⵄⴰ",
                    hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
                    d: "ⴰⵙⵙ",
                    dd: "%d oⵙⵙⴰⵏ",
                    M: "ⴰⵢoⵓⵔ",
                    MM: "%d ⵉⵢⵢⵉⵔⵏ",
                    y: "ⴰⵙⴳⴰⵙ",
                    yy: "%d ⵉⵙⴳⴰⵙⵏ"
                },
                week: {
                    dow: 6,
                    doy: 12
                }
            });
            return t;
        });
    },
    122: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("tzm-latn", {
                months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
                monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
                weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
                weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
                weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[asdkh g] LT",
                    nextDay: "[aska g] LT",
                    nextWeek: "dddd [g] LT",
                    lastDay: "[assant g] LT",
                    lastWeek: "dddd [g] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "dadkh s yan %s",
                    past: "yan %s",
                    s: "imik",
                    ss: "%d imik",
                    m: "minuḍ",
                    mm: "%d minuḍ",
                    h: "saɛa",
                    hh: "%d tassaɛin",
                    d: "ass",
                    dd: "%d ossan",
                    M: "ayowr",
                    MM: "%d iyyirn",
                    y: "asgas",
                    yy: "%d isgasn"
                },
                week: {
                    dow: 6,
                    doy: 12
                }
            });
            return t;
        });
    },
    123: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("ug-cn", {
                months: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),
                monthsShort: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),
                weekdays: "يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),
                weekdaysShort: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),
                weekdaysMin: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY-MM-DD",
                    LL: "YYYY-يىلىM-ئاينىڭD-كۈنى",
                    LLL: "YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",
                    LLLL: "dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"
                },
                meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "يېرىم كېچە" === t || "سەھەر" === t || "چۈشتىن بۇرۇن" === t ? e : "چۈشتىن كېيىن" === t || "كەچ" === t ? e + 12 : e >= 11 ? e : e + 12;
                },
                meridiem: function(e, t, n) {
                    var a = 100 * e + t;
                    return a < 600 ? "يېرىم كېچە" : a < 900 ? "سەھەر" : a < 1130 ? "چۈشتىن بۇرۇن" : a < 1230 ? "چۈش" : a < 1800 ? "چۈشتىن كېيىن" : "كەچ";
                },
                calendar: {
                    sameDay: "[بۈگۈن سائەت] LT",
                    nextDay: "[ئەتە سائەت] LT",
                    nextWeek: "[كېلەركى] dddd [سائەت] LT",
                    lastDay: "[تۆنۈگۈن] LT",
                    lastWeek: "[ئالدىنقى] dddd [سائەت] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s كېيىن",
                    past: "%s بۇرۇن",
                    s: "نەچچە سېكونت",
                    ss: "%d سېكونت",
                    m: "بىر مىنۇت",
                    mm: "%d مىنۇت",
                    h: "بىر سائەت",
                    hh: "%d سائەت",
                    d: "بىر كۈن",
                    dd: "%d كۈن",
                    M: "بىر ئاي",
                    MM: "%d ئاي",
                    y: "بىر يىل",
                    yy: "%d يىل"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "d":
                      case "D":
                      case "DDD":
                        return e + "-كۈنى";

                      case "w":
                      case "W":
                        return e + "-ھەپتە";

                      default:
                        return e;
                    }
                },
                preparse: function(e) {
                    return e.replace(/،/g, ",");
                },
                postformat: function(e) {
                    return e.replace(/,/g, "،");
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    124: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            function t(e, t) {
                var n = e.split("_");
                return t % 10 === 1 && t % 100 !== 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2];
            }
            function n(e, n, a) {
                var s = {
                    ss: n ? "секунда_секунди_секунд" : "секунду_секунди_секунд",
                    mm: n ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин",
                    hh: n ? "година_години_годин" : "годину_години_годин",
                    dd: "день_дні_днів",
                    MM: "місяць_місяці_місяців",
                    yy: "рік_роки_років"
                };
                return "m" === a ? n ? "хвилина" : "хвилину" : "h" === a ? n ? "година" : "годину" : e + " " + t(s[a], +e);
            }
            function a(e, t) {
                var n = {
                    nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),
                    accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),
                    genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")
                };
                if (!e) return n.nominative;
                var a = /(\[[ВвУу]\]) ?dddd/.test(t) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(t) ? "genitive" : "nominative";
                return n[a][e.day()];
            }
            function s(e) {
                return function() {
                    return e + "о" + (11 === this.hours() ? "б" : "") + "] LT";
                };
            }
            var r = e.defineLocale("uk", {
                months: {
                    format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),
                    standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")
                },
                monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
                weekdays: a,
                weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"),
                weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD.MM.YYYY",
                    LL: "D MMMM YYYY р.",
                    LLL: "D MMMM YYYY р., HH:mm",
                    LLLL: "dddd, D MMMM YYYY р., HH:mm"
                },
                calendar: {
                    sameDay: s("[Сьогодні "),
                    nextDay: s("[Завтра "),
                    lastDay: s("[Вчора "),
                    nextWeek: s("[У] dddd ["),
                    lastWeek: function() {
                        switch (this.day()) {
                          case 0:
                          case 3:
                          case 5:
                          case 6:
                            return s("[Минулої] dddd [").call(this);

                          case 1:
                          case 2:
                          case 4:
                            return s("[Минулого] dddd [").call(this);
                        }
                    },
                    sameElse: "L"
                },
                relativeTime: {
                    future: "за %s",
                    past: "%s тому",
                    s: "декілька секунд",
                    ss: n,
                    m: n,
                    mm: n,
                    h: "годину",
                    hh: n,
                    d: "день",
                    dd: n,
                    M: "місяць",
                    MM: n,
                    y: "рік",
                    yy: n
                },
                meridiemParse: /ночі|ранку|дня|вечора/,
                isPM: function(e) {
                    return /^(дня|вечора)$/.test(e);
                },
                meridiem: function(e, t, n) {
                    return e < 4 ? "ночі" : e < 12 ? "ранку" : e < 17 ? "дня" : "вечора";
                },
                dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "M":
                      case "d":
                      case "DDD":
                      case "w":
                      case "W":
                        return e + "-й";

                      case "D":
                        return e + "-го";

                      default:
                        return e;
                    }
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return r;
        });
    },
    125: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = [ "جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر" ], n = [ "اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ" ], a = e.defineLocale("ur", {
                months: t,
                monthsShort: t,
                weekdays: n,
                weekdaysShort: n,
                weekdaysMin: n,
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd، D MMMM YYYY HH:mm"
                },
                meridiemParse: /صبح|شام/,
                isPM: function(e) {
                    return "شام" === e;
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? "صبح" : "شام";
                },
                calendar: {
                    sameDay: "[آج بوقت] LT",
                    nextDay: "[کل بوقت] LT",
                    nextWeek: "dddd [بوقت] LT",
                    lastDay: "[گذشتہ روز بوقت] LT",
                    lastWeek: "[گذشتہ] dddd [بوقت] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s بعد",
                    past: "%s قبل",
                    s: "چند سیکنڈ",
                    ss: "%d سیکنڈ",
                    m: "ایک منٹ",
                    mm: "%d منٹ",
                    h: "ایک گھنٹہ",
                    hh: "%d گھنٹے",
                    d: "ایک دن",
                    dd: "%d دن",
                    M: "ایک ماہ",
                    MM: "%d ماہ",
                    y: "ایک سال",
                    yy: "%d سال"
                },
                preparse: function(e) {
                    return e.replace(/،/g, ",");
                },
                postformat: function(e) {
                    return e.replace(/,/g, "،");
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return a;
        });
    },
    126: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("uz", {
                months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),
                monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
                weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
                weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
                weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "D MMMM YYYY, dddd HH:mm"
                },
                calendar: {
                    sameDay: "[Бугун соат] LT [да]",
                    nextDay: "[Эртага] LT [да]",
                    nextWeek: "dddd [куни соат] LT [да]",
                    lastDay: "[Кеча соат] LT [да]",
                    lastWeek: "[Утган] dddd [куни соат] LT [да]",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "Якин %s ичида",
                    past: "Бир неча %s олдин",
                    s: "фурсат",
                    ss: "%d фурсат",
                    m: "бир дакика",
                    mm: "%d дакика",
                    h: "бир соат",
                    hh: "%d соат",
                    d: "бир кун",
                    dd: "%d кун",
                    M: "бир ой",
                    MM: "%d ой",
                    y: "бир йил",
                    yy: "%d йил"
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    127: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("uz-latn", {
                months: "Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),
                monthsShort: "Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),
                weekdays: "Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),
                weekdaysShort: "Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),
                weekdaysMin: "Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "D MMMM YYYY, dddd HH:mm"
                },
                calendar: {
                    sameDay: "[Bugun soat] LT [da]",
                    nextDay: "[Ertaga] LT [da]",
                    nextWeek: "dddd [kuni soat] LT [da]",
                    lastDay: "[Kecha soat] LT [da]",
                    lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "Yaqin %s ichida",
                    past: "Bir necha %s oldin",
                    s: "soniya",
                    ss: "%d soniya",
                    m: "bir daqiqa",
                    mm: "%d daqiqa",
                    h: "bir soat",
                    hh: "%d soat",
                    d: "bir kun",
                    dd: "%d kun",
                    M: "bir oy",
                    MM: "%d oy",
                    y: "bir yil",
                    yy: "%d yil"
                },
                week: {
                    dow: 1,
                    doy: 7
                }
            });
            return t;
        });
    },
    128: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("vi", {
                months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
                monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
                monthsParseExact: !0,
                weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
                weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"),
                weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"),
                weekdaysParseExact: !0,
                meridiemParse: /sa|ch/i,
                isPM: function(e) {
                    return /^ch$/i.test(e);
                },
                meridiem: function(e, t, n) {
                    return e < 12 ? n ? "sa" : "SA" : n ? "ch" : "CH";
                },
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM [năm] YYYY",
                    LLL: "D MMMM [năm] YYYY HH:mm",
                    LLLL: "dddd, D MMMM [năm] YYYY HH:mm",
                    l: "DD/M/YYYY",
                    ll: "D MMM YYYY",
                    lll: "D MMM YYYY HH:mm",
                    llll: "ddd, D MMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[Hôm nay lúc] LT",
                    nextDay: "[Ngày mai lúc] LT",
                    nextWeek: "dddd [tuần tới lúc] LT",
                    lastDay: "[Hôm qua lúc] LT",
                    lastWeek: "dddd [tuần rồi lúc] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "%s tới",
                    past: "%s trước",
                    s: "vài giây",
                    ss: "%d giây",
                    m: "một phút",
                    mm: "%d phút",
                    h: "một giờ",
                    hh: "%d giờ",
                    d: "một ngày",
                    dd: "%d ngày",
                    M: "một tháng",
                    MM: "%d tháng",
                    y: "một năm",
                    yy: "%d năm"
                },
                dayOfMonthOrdinalParse: /\d{1,2}/,
                ordinal: function(e) {
                    return e;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    129: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("x-pseudo", {
                months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),
                monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),
                monthsParseExact: !0,
                weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),
                weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),
                weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),
                weekdaysParseExact: !0,
                longDateFormat: {
                    LT: "HH:mm",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY HH:mm",
                    LLLL: "dddd, D MMMM YYYY HH:mm"
                },
                calendar: {
                    sameDay: "[T~ódá~ý át] LT",
                    nextDay: "[T~ómó~rró~w át] LT",
                    nextWeek: "dddd [át] LT",
                    lastDay: "[Ý~ést~érdá~ý át] LT",
                    lastWeek: "[L~ást] dddd [át] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "í~ñ %s",
                    past: "%s á~gó",
                    s: "á ~féw ~sécó~ñds",
                    ss: "%d s~écóñ~ds",
                    m: "á ~míñ~úté",
                    mm: "%d m~íñú~tés",
                    h: "á~ñ hó~úr",
                    hh: "%d h~óúrs",
                    d: "á ~dáý",
                    dd: "%d d~áýs",
                    M: "á ~móñ~th",
                    MM: "%d m~óñt~hs",
                    y: "á ~ýéár",
                    yy: "%d ý~éárs"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                ordinal: function(e) {
                    var t = e % 10, n = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + n;
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    130: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("yo", {
                months: "Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),
                monthsShort: "Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),
                weekdays: "Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),
                weekdaysShort: "Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),
                weekdaysMin: "Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),
                longDateFormat: {
                    LT: "h:mm A",
                    LTS: "h:mm:ss A",
                    L: "DD/MM/YYYY",
                    LL: "D MMMM YYYY",
                    LLL: "D MMMM YYYY h:mm A",
                    LLLL: "dddd, D MMMM YYYY h:mm A"
                },
                calendar: {
                    sameDay: "[Ònì ni] LT",
                    nextDay: "[Ọ̀la ni] LT",
                    nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
                    lastDay: "[Àna ni] LT",
                    lastWeek: "dddd [Ọsẹ̀ tólọ́] [ni] LT",
                    sameElse: "L"
                },
                relativeTime: {
                    future: "ní %s",
                    past: "%s kọjá",
                    s: "ìsẹjú aayá die",
                    ss: "aayá %d",
                    m: "ìsẹjú kan",
                    mm: "ìsẹjú %d",
                    h: "wákati kan",
                    hh: "wákati %d",
                    d: "ọjọ́ kan",
                    dd: "ọjọ́ %d",
                    M: "osù kan",
                    MM: "osù %d",
                    y: "ọdún kan",
                    yy: "ọdún %d"
                },
                dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
                ordinal: "ọjọ́ %d",
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    131: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("zh-cn", {
                months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
                monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
                weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
                weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
                weekdaysMin: "日_一_二_三_四_五_六".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY/MM/DD",
                    LL: "YYYY年M月D日",
                    LLL: "YYYY年M月D日Ah点mm分",
                    LLLL: "YYYY年M月D日ddddAh点mm分",
                    l: "YYYY/M/D",
                    ll: "YYYY年M月D日",
                    lll: "YYYY年M月D日 HH:mm",
                    llll: "YYYY年M月D日dddd HH:mm"
                },
                meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "下午" === t || "晚上" === t ? e + 12 : e >= 11 ? e : e + 12;
                },
                meridiem: function(e, t, n) {
                    var a = 100 * e + t;
                    return a < 600 ? "凌晨" : a < 900 ? "早上" : a < 1130 ? "上午" : a < 1230 ? "中午" : a < 1800 ? "下午" : "晚上";
                },
                calendar: {
                    sameDay: "[今天]LT",
                    nextDay: "[明天]LT",
                    nextWeek: "[下]ddddLT",
                    lastDay: "[昨天]LT",
                    lastWeek: "[上]ddddLT",
                    sameElse: "L"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "d":
                      case "D":
                      case "DDD":
                        return e + "日";

                      case "M":
                        return e + "月";

                      case "w":
                      case "W":
                        return e + "周";

                      default:
                        return e;
                    }
                },
                relativeTime: {
                    future: "%s内",
                    past: "%s前",
                    s: "几秒",
                    ss: "%d 秒",
                    m: "1 分钟",
                    mm: "%d 分钟",
                    h: "1 小时",
                    hh: "%d 小时",
                    d: "1 天",
                    dd: "%d 天",
                    M: "1 个月",
                    MM: "%d 个月",
                    y: "1 年",
                    yy: "%d 年"
                },
                week: {
                    dow: 1,
                    doy: 4
                }
            });
            return t;
        });
    },
    132: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("zh-hk", {
                months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
                monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
                weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
                weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
                weekdaysMin: "日_一_二_三_四_五_六".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY/MM/DD",
                    LL: "YYYY年M月D日",
                    LLL: "YYYY年M月D日 HH:mm",
                    LLLL: "YYYY年M月D日dddd HH:mm",
                    l: "YYYY/M/D",
                    ll: "YYYY年M月D日",
                    lll: "YYYY年M月D日 HH:mm",
                    llll: "YYYY年M月D日dddd HH:mm"
                },
                meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    var a = 100 * e + t;
                    return a < 600 ? "凌晨" : a < 900 ? "早上" : a < 1130 ? "上午" : a < 1230 ? "中午" : a < 1800 ? "下午" : "晚上";
                },
                calendar: {
                    sameDay: "[今天]LT",
                    nextDay: "[明天]LT",
                    nextWeek: "[下]ddddLT",
                    lastDay: "[昨天]LT",
                    lastWeek: "[上]ddddLT",
                    sameElse: "L"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "d":
                      case "D":
                      case "DDD":
                        return e + "日";

                      case "M":
                        return e + "月";

                      case "w":
                      case "W":
                        return e + "週";

                      default:
                        return e;
                    }
                },
                relativeTime: {
                    future: "%s內",
                    past: "%s前",
                    s: "幾秒",
                    ss: "%d 秒",
                    m: "1 分鐘",
                    mm: "%d 分鐘",
                    h: "1 小時",
                    hh: "%d 小時",
                    d: "1 天",
                    dd: "%d 天",
                    M: "1 個月",
                    MM: "%d 個月",
                    y: "1 年",
                    yy: "%d 年"
                }
            });
            return t;
        });
    },
    133: function(e, t, n) {
        !function(e, t) {
            t(n(8));
        }(this, function(e) {
            "use strict";
            var t = e.defineLocale("zh-tw", {
                months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
                monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
                weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
                weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
                weekdaysMin: "日_一_二_三_四_五_六".split("_"),
                longDateFormat: {
                    LT: "HH:mm",
                    LTS: "HH:mm:ss",
                    L: "YYYY/MM/DD",
                    LL: "YYYY年M月D日",
                    LLL: "YYYY年M月D日 HH:mm",
                    LLLL: "YYYY年M月D日dddd HH:mm",
                    l: "YYYY/M/D",
                    ll: "YYYY年M月D日",
                    lll: "YYYY年M月D日 HH:mm",
                    llll: "YYYY年M月D日dddd HH:mm"
                },
                meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
                meridiemHour: function(e, t) {
                    return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0;
                },
                meridiem: function(e, t, n) {
                    var a = 100 * e + t;
                    return a < 600 ? "凌晨" : a < 900 ? "早上" : a < 1130 ? "上午" : a < 1230 ? "中午" : a < 1800 ? "下午" : "晚上";
                },
                calendar: {
                    sameDay: "[今天] LT",
                    nextDay: "[明天] LT",
                    nextWeek: "[下]dddd LT",
                    lastDay: "[昨天] LT",
                    lastWeek: "[上]dddd LT",
                    sameElse: "L"
                },
                dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
                ordinal: function(e, t) {
                    switch (t) {
                      case "d":
                      case "D":
                      case "DDD":
                        return e + "日";

                      case "M":
                        return e + "月";

                      case "w":
                      case "W":
                        return e + "週";

                      default:
                        return e;
                    }
                },
                relativeTime: {
                    future: "%s內",
                    past: "%s前",
                    s: "幾秒",
                    ss: "%d 秒",
                    m: "1 分鐘",
                    mm: "%d 分鐘",
                    h: "1 小時",
                    hh: "%d 小時",
                    d: "1 天",
                    dd: "%d 天",
                    M: "1 個月",
                    MM: "%d 個月",
                    y: "1 年",
                    yy: "%d 年"
                }
            });
            return t;
        });
    },
    573: function(e, t) {
        function n() {
            throw new Error("setTimeout has not been defined");
        }
        function a() {
            throw new Error("clearTimeout has not been defined");
        }
        function s(e) {
            if (_ === setTimeout) return setTimeout(e, 0);
            if ((_ === n || !_) && setTimeout) return _ = setTimeout, setTimeout(e, 0);
            try {
                return _(e, 0);
            } catch (t) {
                try {
                    return _.call(null, e, 0);
                } catch (t) {
                    return _.call(this, e, 0);
                }
            }
        }
        function r(e) {
            if (l === clearTimeout) return clearTimeout(e);
            if ((l === a || !l) && clearTimeout) return l = clearTimeout, clearTimeout(e);
            try {
                return l(e);
            } catch (t) {
                try {
                    return l.call(null, e);
                } catch (t) {
                    return l.call(this, e);
                }
            }
        }
        function i() {
            f && c && (f = !1, c.length ? h = c.concat(h) : M = -1, h.length && o());
        }
        function o() {
            if (!f) {
                var e = s(i);
                f = !0;
                for (var t = h.length; t; ) {
                    for (c = h, h = []; ++M < t; ) c && c[M].run();
                    M = -1, t = h.length;
                }
                c = null, f = !1, r(e);
            }
        }
        function d(e, t) {
            this.fun = e, this.array = t;
        }
        function u() {}
        var _, l, m = e.exports = {};
        !function() {
            try {
                _ = "function" == typeof setTimeout ? setTimeout : n;
            } catch (e) {
                _ = n;
            }
            try {
                l = "function" == typeof clearTimeout ? clearTimeout : a;
            } catch (e) {
                l = a;
            }
        }();
        var c, h = [], f = !1, M = -1;
        m.nextTick = function(e) {
            var t = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
            h.push(new d(e, t)), 1 !== h.length || f || s(o);
        }, d.prototype.run = function() {
            this.fun.apply(null, this.array);
        }, m.title = "browser", m.browser = !0, m.env = {}, m.argv = [], m.version = "", 
        m.versions = {}, m.on = u, m.addListener = u, m.once = u, m.off = u, m.removeListener = u, 
        m.removeAllListeners = u, m.emit = u, m.prependListener = u, m.prependOnceListener = u, 
        m.listeners = function(e) {
            return [];
        }, m.binding = function(e) {
            throw new Error("process.binding is not supported");
        }, m.cwd = function() {
            return "/";
        }, m.chdir = function(e) {
            throw new Error("process.chdir is not supported");
        }, m.umask = function() {
            return 0;
        };
    },
    1098: function(e, t, n) {
        "use strict";
        !function() {
            window.QUnit = n(1099), window.qunitTap = n(1100), n(1101), n(1102), e.exports = window.QUnit;
        }();
    },
    1099: function(e, t, n) {
        var a;
        (function(e, s, r) {
            /*!
	 * QUnit 2.8.0
	 * https://qunitjs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2018-11-02T16:17Z
	 */
            !function(i) {
                "use strict";
                function o(e) {
                    return function() {
                        Ve && Ve[e].apply(Ve, arguments);
                    };
                }
                function d() {
                    return qe && "undefined" != typeof qe.performance && "function" == typeof qe.performance.mark && "function" == typeof qe.performance.measure;
                }
                function u(e, t, n) {
                    try {
                        ot.measure(e, t, n);
                    } catch (e) {
                        Ze.warn("performance.measure could not be executed because of ", e.message);
                    }
                }
                function _(e, t) {
                    var n, a, s = e.slice();
                    for (n = 0; n < s.length; n++) for (a = 0; a < t.length; a++) if (s[n] === t[a]) {
                        s.splice(n, 1), n--;
                        break;
                    }
                    return s;
                }
                function l(e, t) {
                    return t.indexOf(e) !== -1;
                }
                function m(e) {
                    var t, n, a = f("array", e) ? [] : {};
                    for (t in e) st.call(e, t) && (n = e[t], a[t] = n === Object(n) ? m(n) : n);
                    return a;
                }
                function c(e, t, n) {
                    for (var a in t) st.call(t, a) && (void 0 === t[a] ? delete e[a] : n && "undefined" != typeof e[a] || (e[a] = t[a]));
                    return e;
                }
                function h(e) {
                    if ("undefined" == typeof e) return "undefined";
                    if (null === e) return "null";
                    var t = at.call(e).match(/^\[object\s(.*)\]$/), n = t && t[1];
                    switch (n) {
                      case "Number":
                        return isNaN(e) ? "nan" : "number";

                      case "String":
                      case "Boolean":
                      case "Array":
                      case "Set":
                      case "Map":
                      case "Date":
                      case "RegExp":
                      case "Function":
                      case "Symbol":
                        return n.toLowerCase();

                      default:
                        return "undefined" == typeof e ? "undefined" : Xe(e);
                    }
                }
                function f(e, t) {
                    return h(t) === e;
                }
                function M(e, t) {
                    for (var n = e + "" + t, a = 0, s = 0; s < n.length; s++) a = (a << 5) - a + n.charCodeAt(s), 
                    a |= 0;
                    var r = (4294967296 + a).toString(16);
                    return r.length < 8 && (r = "0000000" + r), r.slice(-8);
                }
                function p(e, t, n) {
                    var a = Mt.length ? Mt.slice(-1)[0] : null, s = null !== a ? [ a.name, e ].join(" > ") : e, r = a ? a.suiteReport : Qt, i = null !== a && a.skip || n.skip, o = null !== a && a.todo || n.todo, d = {
                        name: s,
                        parentModule: a,
                        tests: [],
                        moduleId: M(s),
                        testsRun: 0,
                        unskippedTestsRun: 0,
                        childModules: [],
                        suiteReport: new ht(e, r),
                        skip: i,
                        todo: !i && o
                    }, u = {};
                    return a && (a.childModules.push(d), c(u, a.testEnvironment)), c(u, t), d.testEnvironment = u, 
                    lt.modules.push(d), d;
                }
                function y(e, t, n) {
                    function a(e, t, n) {
                        var a = t[n];
                        e[n] = "function" == typeof a ? [ a ] : [], delete t[n];
                    }
                    function s(e, t) {
                        return function(n) {
                            e.hooks[t].push(n);
                        };
                    }
                    var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                    "function" === h(t) && (n = t, t = void 0);
                    var i = p(e, t, r), o = i.testEnvironment, d = i.hooks = {};
                    a(d, o, "before"), a(d, o, "beforeEach"), a(d, o, "afterEach"), a(d, o, "after");
                    var u = {
                        before: s(i, "before"),
                        beforeEach: s(i, "beforeEach"),
                        afterEach: s(i, "afterEach"),
                        after: s(i, "after")
                    }, _ = lt.currentModule;
                    "function" === h(n) && (Mt.push(i), lt.currentModule = i, n.call(i.testEnvironment, u), 
                    Mt.pop(), i = i.parentModule || _), lt.currentModule = i;
                }
                function L(e, t, n) {
                    ft || y(e, t, n);
                }
                function Y(e, t) {
                    if ("string" !== h(e)) throw new TypeError("eventName must be a string when emitting an event");
                    for (var n = pt[e], a = n ? [].concat(nt(n)) : [], s = 0; s < a.length; s++) a[s](t);
                }
                function k(e, t) {
                    if ("string" !== h(e)) throw new TypeError("eventName must be a string when registering a listener");
                    if (!l(e, yt)) {
                        var n = yt.join(", ");
                        throw new Error('"' + e + '" is not a valid event; must be one of: ' + n + ".");
                    }
                    if ("function" !== h(t)) throw new TypeError("callback must be a function when registering a listener");
                    pt[e] || (pt[e] = []), l(t, pt[e]) || pt[e].push(t);
                }
                function g(e) {
                    var t = "undefined" == typeof e ? "undefined" : Xe(e);
                    return null !== e && ("object" === t || "function" === t);
                }
                function v(e) {
                    return "function" == typeof e;
                }
                function D(e) {
                    vt = e;
                }
                function T(e) {
                    Dt = e;
                }
                function w() {
                    return function() {
                        return e.nextTick(x);
                    };
                }
                function b() {
                    return "undefined" != typeof gt ? function() {
                        gt(x);
                    } : j();
                }
                function S() {
                    var e = 0, t = new bt(x), n = document.createTextNode("");
                    return t.observe(n, {
                        characterData: !0
                    }), function() {
                        n.data = e = ++e % 2;
                    };
                }
                function H() {
                    var e = new MessageChannel();
                    return e.port1.onmessage = x, function() {
                        return e.port2.postMessage(0);
                    };
                }
                function j() {
                    var e = setTimeout;
                    return function() {
                        return e(x, 1);
                    };
                }
                function x() {
                    for (var e = 0; e < kt; e += 2) {
                        var t = jt[e], n = jt[e + 1];
                        t(n), jt[e] = void 0, jt[e + 1] = void 0;
                    }
                    kt = 0;
                }
                function E() {
                    try {
                        var e = Function("return this")().require("vertx");
                        return gt = e.runOnLoop || e.runOnContext, b();
                    } catch (e) {
                        return j();
                    }
                }
                function O(e, t) {
                    var n = this, a = new this.constructor(W);
                    void 0 === a[Et] && X(a);
                    var s = n._state;
                    if (s) {
                        var r = arguments[s - 1];
                        Dt(function() {
                            return Q(s, a, r, n._result);
                        });
                    } else G(n, a, e, t);
                    return a;
                }
                function P(e) {
                    var t = this;
                    if (e && "object" === ("undefined" == typeof e ? "undefined" : Xe(e)) && e.constructor === t) return e;
                    var n = new t(W);
                    return J(n, e), n;
                }
                function W() {}
                function A() {
                    return new TypeError("You cannot resolve a promise with itself");
                }
                function F() {
                    return new TypeError("A promises callback cannot return that same promise.");
                }
                function N(e) {
                    try {
                        return e.then;
                    } catch (e) {
                        return At.error = e, At;
                    }
                }
                function z(e, t, n, a) {
                    try {
                        e.call(t, n, a);
                    } catch (e) {
                        return e;
                    }
                }
                function C(e, t, n) {
                    Dt(function(e) {
                        var a = !1, s = z(n, t, function(n) {
                            a || (a = !0, t !== n ? J(e, n) : U(e, n));
                        }, function(t) {
                            a || (a = !0, V(e, t));
                        }, "Settle: " + (e._label || " unknown promise"));
                        !a && s && (a = !0, V(e, s));
                    }, e);
                }
                function R(e, t) {
                    t._state === Pt ? U(e, t._result) : t._state === Wt ? V(e, t._result) : G(t, void 0, function(t) {
                        return J(e, t);
                    }, function(t) {
                        return V(e, t);
                    });
                }
                function I(e, t, n) {
                    t.constructor === e.constructor && n === O && t.constructor.resolve === P ? R(e, t) : n === At ? (V(e, At.error), 
                    At.error = null) : void 0 === n ? U(e, t) : v(n) ? C(e, t, n) : U(e, t);
                }
                function J(e, t) {
                    e === t ? V(e, A()) : g(t) ? I(e, t, N(t)) : U(e, t);
                }
                function q(e) {
                    e._onerror && e._onerror(e._result), B(e);
                }
                function U(e, t) {
                    e._state === Ot && (e._result = t, e._state = Pt, 0 !== e._subscribers.length && Dt(B, e));
                }
                function V(e, t) {
                    e._state === Ot && (e._state = Wt, e._result = t, Dt(q, e));
                }
                function G(e, t, n, a) {
                    var s = e._subscribers, r = s.length;
                    e._onerror = null, s[r] = t, s[r + Pt] = n, s[r + Wt] = a, 0 === r && e._state && Dt(B, e);
                }
                function B(e) {
                    var t = e._subscribers, n = e._state;
                    if (0 !== t.length) {
                        for (var a = void 0, s = void 0, r = e._result, i = 0; i < t.length; i += 3) a = t[i], 
                        s = t[i + n], a ? Q(n, a, s, r) : s(r);
                        e._subscribers.length = 0;
                    }
                }
                function $(e, t) {
                    try {
                        return e(t);
                    } catch (e) {
                        return At.error = e, At;
                    }
                }
                function Q(e, t, n, a) {
                    var s = v(n), r = void 0, i = void 0, o = void 0, d = void 0;
                    if (s) {
                        if (r = $(n, a), r === At ? (d = !0, i = r.error, r.error = null) : o = !0, t === r) return void V(t, F());
                    } else r = a, o = !0;
                    t._state !== Ot || (s && o ? J(t, r) : d ? V(t, i) : e === Pt ? U(t, r) : e === Wt && V(t, r));
                }
                function K(e, t) {
                    try {
                        t(function(t) {
                            J(e, t);
                        }, function(t) {
                            V(e, t);
                        });
                    } catch (t) {
                        V(e, t);
                    }
                }
                function Z() {
                    return Ft++;
                }
                function X(e) {
                    e[Et] = Ft++, e._state = void 0, e._result = void 0, e._subscribers = [];
                }
                function ee() {
                    return new Error("Array Methods must be provided an Array");
                }
                function te(e) {
                    return new Nt(this, e).promise;
                }
                function ne(e) {
                    var t = this;
                    return new t(Yt(e) ? function(n, a) {
                        for (var s = e.length, r = 0; r < s; r++) t.resolve(e[r]).then(n, a);
                    } : function(e, t) {
                        return t(new TypeError("You must pass an array to race."));
                    });
                }
                function ae(e) {
                    var t = this, n = new t(W);
                    return V(n, e), n;
                }
                function se() {
                    throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                }
                function re() {
                    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                }
                function ie() {
                    var e = void 0;
                    if ("undefined" != typeof s) e = s; else if ("undefined" != typeof self) e = self; else try {
                        e = Function("return this")();
                    } catch (e) {
                        throw new Error("polyfill failed because global object is unavailable in this environment");
                    }
                    var t = e.Promise;
                    if (t) {
                        var n = null;
                        try {
                            n = Object.prototype.toString.call(t.resolve());
                        } catch (e) {}
                        if ("[object Promise]" === n && !t.cast) return;
                    }
                    e.Promise = zt;
                }
                function oe(e) {
                    function t(e) {
                        var t = function(t) {
                            if ("function" !== h(t)) throw new Error("QUnit logging methods require a callback function as their first parameters.");
                            lt.callbacks[e].push(t);
                        };
                        return t;
                    }
                    var n, a, s, r = [ "begin", "done", "log", "testStart", "testDone", "moduleStart", "moduleDone" ];
                    for (n = 0, a = r.length; n < a; n++) s = r[n], "undefined" === h(lt.callbacks[s]) && (lt.callbacks[s] = []), 
                    e[s] = t(s);
                }
                function de(e, t) {
                    var n = lt.callbacks[e];
                    return "log" === e ? void n.map(function(e) {
                        return e(t);
                    }) : n.reduce(function(e, n) {
                        return e.then(function() {
                            return Ct.resolve(n(t));
                        });
                    }, Ct.resolve([]));
                }
                function ue(e, t) {
                    t = void 0 === t ? 4 : t;
                    var n, a, s;
                    if (e && e.stack) {
                        if (n = e.stack.split("\n"), /^error$/i.test(n[0]) && n.shift(), Rt) {
                            for (a = [], s = t; s < n.length && n[s].indexOf(Rt) === -1; s++) a.push(n[s]);
                            if (a.length) return a.join("\n");
                        }
                        return n[t];
                    }
                }
                function _e(e) {
                    var t = new Error();
                    if (!t.stack) try {
                        throw t;
                    } catch (e) {
                        t = e;
                    }
                    return ue(t, e);
                }
                function le() {
                    me(), qt.length || lt.blocking || lt.current || he();
                }
                function me() {
                    var e = rt();
                    lt.depth = (lt.depth || 0) + 1, ce(e), lt.depth--;
                }
                function ce(e) {
                    if (qt.length && !lt.blocking) {
                        var t = rt() - e;
                        if (!ut.setTimeout || lt.updateRate <= 0 || t < lt.updateRate) {
                            var n = qt.shift();
                            Ct.resolve(n()).then(function() {
                                qt.length ? ce(e) : le();
                            });
                        } else Ge(le);
                    }
                }
                function he() {
                    if (!lt.blocking && !lt.queue.length && 0 === lt.depth) return void Le();
                    var e = lt.queue.shift();
                    fe(e()), It > 0 && It--, le();
                }
                function fe(e) {
                    qt.push.apply(qt, nt(e));
                }
                function Me() {
                    return qt.length;
                }
                function pe(e, t, n) {
                    if (t) lt.queue.splice(It++, 0, e); else if (n) {
                        Jt || (Jt = ye(n));
                        var a = Math.floor(Jt() * (lt.queue.length - It + 1));
                        lt.queue.splice(It + a, 0, e);
                    } else lt.queue.push(e);
                }
                function ye(e) {
                    var t = parseInt(M(e), 16) || -1;
                    return function() {
                        return t ^= t << 13, t ^= t >>> 17, t ^= t << 5, t < 0 && (t += 4294967296), t / 4294967296;
                    };
                }
                function Le() {
                    var e = lt.storage;
                    Ut.finished = !0;
                    var t = rt() - lt.started, n = lt.stats.all - lt.stats.bad;
                    if (0 === lt.stats.all) {
                        if (lt.filter && lt.filter.length) throw new Error('No tests matched the filter "' + lt.filter + '".');
                        if (lt.module && lt.module.length) throw new Error('No tests matched the module "' + lt.module + '".');
                        if (lt.moduleId && lt.moduleId.length) throw new Error('No tests matched the moduleId "' + lt.moduleId + '".');
                        if (lt.testId && lt.testId.length) throw new Error('No tests matched the testId "' + lt.testId + '".');
                        throw new Error("No tests were run.");
                    }
                    Y("runEnd", Qt.end(!0)), de("done", {
                        passed: n,
                        failed: lt.stats.bad,
                        total: lt.stats.all,
                        runtime: t
                    }).then(function() {
                        if (e && 0 === lt.stats.bad) for (var t = e.length - 1; t >= 0; t--) {
                            var n = e.key(t);
                            0 === n.indexOf("qunit-test-") && e.removeItem(n);
                        }
                    });
                }
                function Ye(e) {
                    var t, n;
                    for (++Ye.count, this.expected = null, this.assertions = [], this.semaphore = 0, 
                    this.module = lt.currentModule, this.stack = _e(3), this.steps = [], this.timeout = void 0, 
                    this.module.skip ? (e.skip = !0, e.todo = !1) : this.module.todo && !e.skip && (e.todo = !0), 
                    c(this, e), this.testReport = new Vt(e.testName, this.module.suiteReport, {
                        todo: e.todo,
                        skip: e.skip,
                        valid: this.valid()
                    }), t = 0, n = this.module.tests; t < n.length; t++) this.module.tests[t].name === this.testName && (this.testName += " ");
                    if (this.testId = M(this.module.name, this.testName), this.module.tests.push({
                        name: this.testName,
                        testId: this.testId,
                        skip: !!e.skip
                    }), e.skip) this.callback = function() {}, this.async = !1, this.expected = 0; else {
                        if ("function" != typeof this.callback) {
                            var a = this.todo ? "todo" : "test";
                            throw new TypeError("You must provide a function as a test callback to QUnit." + a + '("' + e.testName + '")');
                        }
                        this.assert = new Bt(this);
                    }
                }
                function ke(e) {
                    for (var t = e, n = []; t && 0 === t.testsRun; ) n.push(t), t = t.parentModule;
                    return n.reverse();
                }
                function ge() {
                    if (!lt.current) throw new Error("pushFailure() assertion outside test context, in " + _e(2));
                    var e = lt.current;
                    return e.pushFailure.apply(e, arguments);
                }
                function ve() {
                    if (lt.pollution = [], lt.noglobals) for (var e in i) if (st.call(i, e)) {
                        if (/^qunit-test-output/.test(e)) continue;
                        lt.pollution.push(e);
                    }
                }
                function De() {
                    var e, t, n = lt.pollution;
                    ve(), e = _(lt.pollution, n), e.length > 0 && ge("Introduced global variable(s): " + e.join(", ")), 
                    t = _(n, lt.pollution), t.length > 0 && ge("Deleted global variable(s): " + t.join(", "));
                }
                function Te(e, t) {
                    if (!Gt) {
                        var n = new Ye({
                            testName: e,
                            callback: t
                        });
                        n.queue();
                    }
                }
                function we(e, t) {
                    if (!Gt) {
                        var n = new Ye({
                            testName: e,
                            callback: t,
                            todo: !0
                        });
                        n.queue();
                    }
                }
                function be(e) {
                    if (!Gt) {
                        var t = new Ye({
                            testName: e,
                            skip: !0
                        });
                        t.queue();
                    }
                }
                function Se(e, t) {
                    if (!Gt) {
                        lt.queue.length = 0, Gt = !0;
                        var n = new Ye({
                            testName: e,
                            callback: t
                        });
                        n.queue();
                    }
                }
                function He(e) {
                    if (e.semaphore += 1, lt.blocking = !0, ut.setTimeout) {
                        var t = void 0;
                        "number" == typeof e.timeout ? t = e.timeout : "number" == typeof lt.testTimeout && (t = lt.testTimeout), 
                        "number" == typeof t && t > 0 && (Be(lt.timeout), lt.timeout = Ge(function() {
                            ge("Test took longer than " + t + "ms; test timed out.", _e(2)), je(e);
                        }, t));
                    }
                    var n = !1;
                    return function() {
                        n || (n = !0, e.semaphore -= 1, xe(e));
                    };
                }
                function je(e) {
                    e.semaphore = 0, xe(e);
                }
                function xe(e) {
                    if (isNaN(e.semaphore)) return e.semaphore = 0, void ge("Invalid value on test.semaphore", _e(2));
                    if (!(e.semaphore > 0)) return e.semaphore < 0 ? (e.semaphore = 0, void ge("Tried to restart test while already started (test's semaphore was 0 already)", _e(2))) : void (ut.setTimeout ? (lt.timeout && Be(lt.timeout), 
                    lt.timeout = Ge(function() {
                        e.semaphore > 0 || (lt.timeout && Be(lt.timeout), Ie());
                    })) : Ie());
                }
                function Ee(e) {
                    for (var t = [].concat(e.tests), n = [].concat(nt(e.childModules)); n.length; ) {
                        var a = n.shift();
                        t.push.apply(t, a.tests), n.push.apply(n, nt(a.childModules));
                    }
                    return t;
                }
                function Oe(e) {
                    return Ee(e).length;
                }
                function Pe(e) {
                    return Ee(e).filter(function(e) {
                        return !e.skip;
                    }).length;
                }
                function We(e, t) {
                    for (e.testsRun++, t || e.unskippedTestsRun++; e = e.parentModule; ) e.testsRun++, 
                    t || e.unskippedTestsRun++;
                }
                function Ae(e) {
                    var t = e.toString();
                    if ("[object" === t.substring(0, 7)) {
                        var n = e.name ? e.name.toString() : "Error", a = e.message ? e.message.toString() : "";
                        return n && a ? n + ": " + a : n ? n : a ? a : "Error";
                    }
                    return t;
                }
                function Fe(e) {
                    if (ut.document) {
                        if (qe.QUnit && qe.QUnit.version) throw new Error("QUnit has already been defined.");
                        qe.QUnit = e;
                    }
                    "undefined" != typeof r && r && r.exports && (r.exports = e, r.exports.QUnit = e), 
                    "undefined" != typeof t && t && (t.QUnit = e), a = function() {
                        return e;
                    }.call(t, n, t, r), !(void 0 !== a && (r.exports = a)), e.config.autostart = !1, 
                    Ue && Ue.WorkerGlobalScope && Ue instanceof Ue.WorkerGlobalScope && (Ue.QUnit = e);
                }
                function Ne(e) {
                    for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), a = 1; a < t; a++) n[a - 1] = arguments[a];
                    if (lt.current) {
                        if (lt.current.ignoreGlobalErrors) return !0;
                        ge.apply(void 0, [ e.message, e.stacktrace || e.fileName + ":" + e.lineNumber ].concat(n));
                    } else Te("global failure", c(function() {
                        ge.apply(void 0, [ e.message, e.stacktrace || e.fileName + ":" + e.lineNumber ].concat(n));
                    }, {
                        validTest: !0
                    }));
                    return !1;
                }
                function ze(e) {
                    var t = {
                        result: !1,
                        message: e.message || "error",
                        actual: e,
                        source: e.stack || _e(3)
                    }, n = lt.current;
                    n ? n.assert.pushResult(t) : Te("global failure", c(function(e) {
                        e.pushResult(t);
                    }, {
                        validTest: !0
                    }));
                }
                function Ce() {
                    Zt = !0, ut.setTimeout ? Ge(function() {
                        Ie();
                    }) : Ie();
                }
                function Re() {
                    lt.blocking = !1, Ut.advance();
                }
                function Ie() {
                    var e, t, n = [];
                    if (lt.started) Re(); else {
                        for (lt.started = rt(), "" === lt.modules[0].name && 0 === lt.modules[0].tests.length && lt.modules.shift(), 
                        e = 0, t = lt.modules.length; e < t; e++) n.push({
                            name: lt.modules[e].name,
                            tests: lt.modules[e].tests
                        });
                        Y("runStart", Qt.start(!0)), de("begin", {
                            totalTests: Ye.count,
                            modules: n
                        }).then(Re);
                    }
                }
                function Je(e) {
                    return e ? (e += "", e.replace(/['"<>&]/g, function(e) {
                        switch (e) {
                          case "'":
                            return "&#039;";

                          case '"':
                            return "&quot;";

                          case "<":
                            return "&lt;";

                          case ">":
                            return "&gt;";

                          case "&":
                            return "&amp;";
                        }
                    })) : "";
                }
                i = i && i.hasOwnProperty("default") ? i.default : i;
                var qe = i.window, Ue = i.self, Ve = i.console, Ge = i.setTimeout, Be = i.clearTimeout, $e = qe && qe.document, Qe = qe && qe.navigator, Ke = function() {
                    var e = "qunit-test-string";
                    try {
                        return i.sessionStorage.setItem(e, e), i.sessionStorage.removeItem(e), i.sessionStorage;
                    } catch (e) {
                        return;
                    }
                }(), Ze = {
                    warn: o("warn")
                }, Xe = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
                    return typeof e;
                } : function(e) {
                    return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
                }, et = function(e, t) {
                    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
                }, tt = function() {
                    function e(e, t) {
                        for (var n = 0; n < t.length; n++) {
                            var a = t[n];
                            a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), 
                            Object.defineProperty(e, a.key, a);
                        }
                    }
                    return function(t, n, a) {
                        return n && e(t.prototype, n), a && e(t, a), t;
                    };
                }(), nt = function(e) {
                    if (Array.isArray(e)) {
                        for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
                        return n;
                    }
                    return Array.from(e);
                }, at = Object.prototype.toString, st = Object.prototype.hasOwnProperty, rt = Date.now || function() {
                    return new Date().getTime();
                }, it = d(), ot = it ? qe.performance : void 0, dt = it ? ot.now.bind(ot) : rt, ut = {
                    document: qe && void 0 !== qe.document,
                    setTimeout: void 0 !== Ge
                }, _t = function() {
                    function e(e, t) {
                        return "object" === ("undefined" == typeof e ? "undefined" : Xe(e)) && (e = e.valueOf()), 
                        "object" === ("undefined" == typeof t ? "undefined" : Xe(t)) && (t = t.valueOf()), 
                        e === t;
                    }
                    function t(e, t) {
                        var n = d(e), a = d(t);
                        return e.constructor === t.constructor || (n && null === n.constructor && (n = null), 
                        a && null === a.constructor && (a = null), null === n && a === Object.prototype || null === a && n === Object.prototype);
                    }
                    function n(e) {
                        return "flags" in e ? e.flags : e.toString().match(/[gimuy]*$/)[0];
                    }
                    function a(e) {
                        return [ "object", "array", "map", "set" ].indexOf(h(e)) !== -1;
                    }
                    function s(e, t) {
                        return e === t || (a(e) ? (o.every(function(n) {
                            return n.a !== e || n.b !== t;
                        }) && o.push({
                            a: e,
                            b: t
                        }), !0) : r(e, t));
                    }
                    function r(e, t) {
                        var n = h(e);
                        return h(t) === n && u[n](e, t);
                    }
                    function i(e, t) {
                        var n, a;
                        if (arguments.length < 2) return !0;
                        for (o = [ {
                            a: e,
                            b: t
                        } ], n = 0; n < o.length; n++) if (a = o[n], a.a !== a.b && !r(a.a, a.b)) return !1;
                        return 2 === arguments.length || i.apply(this, [].slice.call(arguments, 1));
                    }
                    var o = [], d = Object.getPrototypeOf || function(e) {
                        return e.__proto__;
                    }, u = {
                        string: e,
                        boolean: e,
                        number: e,
                        null: e,
                        undefined: e,
                        symbol: e,
                        date: e,
                        nan: function() {
                            return !0;
                        },
                        regexp: function(e, t) {
                            return e.source === t.source && n(e) === n(t);
                        },
                        function: function() {
                            return !1;
                        },
                        array: function(e, t) {
                            var n, a;
                            if (a = e.length, a !== t.length) return !1;
                            for (n = 0; n < a; n++) if (!s(e[n], t[n])) return !1;
                            return !0;
                        },
                        set: function(e, t) {
                            var n, a = !0;
                            return e.size === t.size && (e.forEach(function(e) {
                                a && (n = !1, t.forEach(function(t) {
                                    var a;
                                    n || (a = o, i(t, e) && (n = !0), o = a);
                                }), n || (a = !1));
                            }), a);
                        },
                        map: function(e, t) {
                            var n, a = !0;
                            return e.size === t.size && (e.forEach(function(e, s) {
                                a && (n = !1, t.forEach(function(t, a) {
                                    var r;
                                    n || (r = o, i([ t, a ], [ e, s ]) && (n = !0), o = r);
                                }), n || (a = !1));
                            }), a);
                        },
                        object: function(e, n) {
                            var a, i = [], o = [];
                            if (t(e, n) === !1) return !1;
                            for (a in e) if (i.push(a), (e.constructor === Object || "undefined" == typeof e.constructor || "function" != typeof e[a] || "function" != typeof n[a] || e[a].toString() !== n[a].toString()) && !s(e[a], n[a])) return !1;
                            for (a in n) o.push(a);
                            return r(i.sort(), o.sort());
                        }
                    };
                    return function() {
                        var e = i.apply(void 0, arguments);
                        return o.length = 0, e;
                    };
                }(), lt = {
                    queue: [],
                    blocking: !0,
                    reorder: !0,
                    altertitle: !0,
                    collapse: !0,
                    scrolltop: !0,
                    maxDepth: 5,
                    requireExpects: !1,
                    urlConfig: [],
                    modules: [],
                    currentModule: {
                        name: "",
                        tests: [],
                        childModules: [],
                        testsRun: 0,
                        unskippedTestsRun: 0,
                        hooks: {
                            before: [],
                            beforeEach: [],
                            afterEach: [],
                            after: []
                        }
                    },
                    callbacks: {},
                    storage: Ke
                }, mt = qe && qe.QUnit && qe.QUnit.config;
                qe && qe.QUnit && !qe.QUnit.version && c(lt, mt), lt.modules.push(lt.currentModule);
                var ct = function() {
                    function e(e) {
                        return '"' + e.toString().replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
                    }
                    function t(e) {
                        return e + "";
                    }
                    function n(e, t, n) {
                        var a = i.separator(), s = i.indent(), r = i.indent(1);
                        return t.join && (t = t.join("," + a + r)), t ? [ e, r + t, s + n ].join(a) : e + n;
                    }
                    function a(e, t) {
                        var a = e.length, s = new Array(a);
                        if (i.maxDepth && i.depth > i.maxDepth) return "[object Array]";
                        for (this.up(); a--; ) s[a] = this.parse(e[a], void 0, t);
                        return this.down(), n("[", s, "]");
                    }
                    function s(e) {
                        return "[object Array]" === at.call(e) || "number" == typeof e.length && void 0 !== e.item && (e.length ? e.item(0) === e[0] : null === e.item(0) && void 0 === e[0]);
                    }
                    var r = /^function (\w+)/, i = {
                        parse: function(e, t, n) {
                            n = n || [];
                            var a, s, r, i = n.indexOf(e);
                            return i !== -1 ? "recursion(" + (i - n.length) + ")" : (t = t || this.typeOf(e), 
                            s = this.parsers[t], r = "undefined" == typeof s ? "undefined" : Xe(s), "function" === r ? (n.push(e), 
                            a = s.call(this, e, n), n.pop(), a) : "string" === r ? s : this.parsers.error);
                        },
                        typeOf: function(e) {
                            var t;
                            return t = null === e ? "null" : "undefined" == typeof e ? "undefined" : f("regexp", e) ? "regexp" : f("date", e) ? "date" : f("function", e) ? "function" : void 0 !== e.setInterval && void 0 !== e.document && void 0 === e.nodeType ? "window" : 9 === e.nodeType ? "document" : e.nodeType ? "node" : s(e) ? "array" : e.constructor === Error.prototype.constructor ? "error" : "undefined" == typeof e ? "undefined" : Xe(e);
                        },
                        separator: function() {
                            return this.multiline ? this.HTML ? "<br />" : "\n" : this.HTML ? "&#160;" : " ";
                        },
                        indent: function(e) {
                            if (!this.multiline) return "";
                            var t = this.indentChar;
                            return this.HTML && (t = t.replace(/\t/g, "   ").replace(/ /g, "&#160;")), new Array(this.depth + (e || 0)).join(t);
                        },
                        up: function(e) {
                            this.depth += e || 1;
                        },
                        down: function(e) {
                            this.depth -= e || 1;
                        },
                        setParser: function(e, t) {
                            this.parsers[e] = t;
                        },
                        quote: e,
                        literal: t,
                        join: n,
                        depth: 1,
                        maxDepth: lt.maxDepth,
                        parsers: {
                            window: "[Window]",
                            document: "[Document]",
                            error: function(e) {
                                return 'Error("' + e.message + '")';
                            },
                            unknown: "[Unknown]",
                            null: "null",
                            undefined: "undefined",
                            function: function(e) {
                                var t = "function", a = "name" in e ? e.name : (r.exec(e) || [])[1];
                                return a && (t += " " + a), t += "(", t = [ t, i.parse(e, "functionArgs"), "){" ].join(""), 
                                n(t, i.parse(e, "functionCode"), "}");
                            },
                            array: a,
                            nodelist: a,
                            arguments: a,
                            object: function(e, t) {
                                var a, s, r, o, d, u = [];
                                if (i.maxDepth && i.depth > i.maxDepth) return "[object Object]";
                                i.up(), a = [];
                                for (s in e) a.push(s);
                                d = [ "message", "name" ];
                                for (o in d) s = d[o], s in e && !l(s, a) && a.push(s);
                                for (a.sort(), o = 0; o < a.length; o++) s = a[o], r = e[s], u.push(i.parse(s, "key") + ": " + i.parse(r, void 0, t));
                                return i.down(), n("{", u, "}");
                            },
                            node: function(e) {
                                var t, n, a, s = i.HTML ? "&lt;" : "<", r = i.HTML ? "&gt;" : ">", o = e.nodeName.toLowerCase(), d = s + o, u = e.attributes;
                                if (u) for (n = 0, t = u.length; n < t; n++) a = u[n].nodeValue, a && "inherit" !== a && (d += " " + u[n].nodeName + "=" + i.parse(a, "attribute"));
                                return d += r, 3 !== e.nodeType && 4 !== e.nodeType || (d += e.nodeValue), d + s + "/" + o + r;
                            },
                            functionArgs: function(e) {
                                var t, n = e.length;
                                if (!n) return "";
                                for (t = new Array(n); n--; ) t[n] = String.fromCharCode(97 + n);
                                return " " + t.join(", ") + " ";
                            },
                            key: e,
                            functionCode: "[code]",
                            attribute: e,
                            string: e,
                            date: e,
                            regexp: t,
                            number: t,
                            boolean: t,
                            symbol: function(e) {
                                return e.toString();
                            }
                        },
                        HTML: !1,
                        indentChar: "  ",
                        multiline: !0
                    };
                    return i;
                }(), ht = function() {
                    function e(t, n) {
                        et(this, e), this.name = t, this.fullName = n ? n.fullName.concat(t) : [], this.tests = [], 
                        this.childSuites = [], n && n.pushChildSuite(this);
                    }
                    return tt(e, [ {
                        key: "start",
                        value: function(e) {
                            if (e && (this._startTime = dt(), ot)) {
                                var t = this.fullName.length;
                                ot.mark("qunit_suite_" + t + "_start");
                            }
                            return {
                                name: this.name,
                                fullName: this.fullName.slice(),
                                tests: this.tests.map(function(e) {
                                    return e.start();
                                }),
                                childSuites: this.childSuites.map(function(e) {
                                    return e.start();
                                }),
                                testCounts: {
                                    total: this.getTestCounts().total
                                }
                            };
                        }
                    }, {
                        key: "end",
                        value: function(e) {
                            if (e && (this._endTime = dt(), ot)) {
                                var t = this.fullName.length;
                                ot.mark("qunit_suite_" + t + "_end");
                                var n = this.fullName.join(" – ");
                                u(0 === t ? "QUnit Test Run" : "QUnit Test Suite: " + n, "qunit_suite_" + t + "_start", "qunit_suite_" + t + "_end");
                            }
                            return {
                                name: this.name,
                                fullName: this.fullName.slice(),
                                tests: this.tests.map(function(e) {
                                    return e.end();
                                }),
                                childSuites: this.childSuites.map(function(e) {
                                    return e.end();
                                }),
                                testCounts: this.getTestCounts(),
                                runtime: this.getRuntime(),
                                status: this.getStatus()
                            };
                        }
                    }, {
                        key: "pushChildSuite",
                        value: function(e) {
                            this.childSuites.push(e);
                        }
                    }, {
                        key: "pushTest",
                        value: function(e) {
                            this.tests.push(e);
                        }
                    }, {
                        key: "getRuntime",
                        value: function() {
                            return this._endTime - this._startTime;
                        }
                    }, {
                        key: "getTestCounts",
                        value: function() {
                            var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                                passed: 0,
                                failed: 0,
                                skipped: 0,
                                todo: 0,
                                total: 0
                            };
                            return e = this.tests.reduce(function(e, t) {
                                return t.valid && (e[t.getStatus()]++, e.total++), e;
                            }, e), this.childSuites.reduce(function(e, t) {
                                return t.getTestCounts(e);
                            }, e);
                        }
                    }, {
                        key: "getStatus",
                        value: function() {
                            var e = this.getTestCounts(), t = e.total, n = e.failed, a = e.skipped, s = e.todo;
                            return n ? "failed" : a === t ? "skipped" : s === t ? "todo" : "passed";
                        }
                    } ]), e;
                }(), ft = !1, Mt = [];
                L.only = function() {
                    ft || (lt.modules.length = 0, lt.queue.length = 0, L.apply(void 0, arguments), ft = !0);
                }, L.skip = function(e, t, n) {
                    ft || y(e, t, n, {
                        skip: !0
                    });
                }, L.todo = function(e, t, n) {
                    ft || y(e, t, n, {
                        todo: !0
                    });
                };
                var pt = Object.create(null), yt = [ "runStart", "suiteStart", "testStart", "assertion", "testEnd", "suiteEnd", "runEnd" ], Lt = void 0;
                Lt = Array.isArray ? Array.isArray : function(e) {
                    return "[object Array]" === Object.prototype.toString.call(e);
                };
                var Yt = Lt, kt = 0, gt = void 0, vt = void 0, Dt = function(e, t) {
                    jt[kt] = e, jt[kt + 1] = t, kt += 2, 2 === kt && (vt ? vt(x) : xt());
                }, Tt = "undefined" != typeof window ? window : void 0, wt = Tt || {}, bt = wt.MutationObserver || wt.WebKitMutationObserver, St = "undefined" == typeof self && "undefined" != typeof e && "[object process]" === {}.toString.call(e), Ht = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel, jt = new Array(1e3), xt = void 0;
                xt = St ? w() : bt ? S() : Ht ? H() : void 0 === Tt ? E() : j();
                var Et = Math.random().toString(36).substring(2), Ot = void 0, Pt = 1, Wt = 2, At = {
                    error: null
                }, Ft = 0, Nt = function() {
                    function e(t, n) {
                        et(this, e), this._instanceConstructor = t, this.promise = new t(W), this.promise[Et] || X(this.promise), 
                        Yt(n) ? (this.length = n.length, this._remaining = n.length, this._result = new Array(this.length), 
                        0 === this.length ? U(this.promise, this._result) : (this.length = this.length || 0, 
                        this._enumerate(n), 0 === this._remaining && U(this.promise, this._result))) : V(this.promise, ee());
                    }
                    return tt(e, [ {
                        key: "_enumerate",
                        value: function(e) {
                            for (var t = 0; this._state === Ot && t < e.length; t++) this._eachEntry(e[t], t);
                        }
                    }, {
                        key: "_eachEntry",
                        value: function(e, t) {
                            var n = this._instanceConstructor, a = n.resolve;
                            if (a === P) {
                                var s = N(e);
                                if (s === O && e._state !== Ot) this._settledAt(e._state, t, e._result); else if ("function" != typeof s) this._remaining--, 
                                this._result[t] = e; else if (n === zt) {
                                    var r = new n(W);
                                    I(r, e, s), this._willSettleAt(r, t);
                                } else this._willSettleAt(new n(function(t) {
                                    return t(e);
                                }), t);
                            } else this._willSettleAt(a(e), t);
                        }
                    }, {
                        key: "_settledAt",
                        value: function(e, t, n) {
                            var a = this.promise;
                            a._state === Ot && (this._remaining--, e === Wt ? V(a, n) : this._result[t] = n), 
                            0 === this._remaining && U(a, this._result);
                        }
                    }, {
                        key: "_willSettleAt",
                        value: function(e, t) {
                            var n = this;
                            G(e, void 0, function(e) {
                                return n._settledAt(Pt, t, e);
                            }, function(e) {
                                return n._settledAt(Wt, t, e);
                            });
                        }
                    } ]), e;
                }(), zt = function() {
                    function e(t) {
                        et(this, e), this[Et] = Z(), this._result = this._state = void 0, this._subscribers = [], 
                        W !== t && ("function" != typeof t && se(), this instanceof e ? K(this, t) : re());
                    }
                    return tt(e, [ {
                        key: "catch",
                        value: function(e) {
                            return this.then(null, e);
                        }
                    }, {
                        key: "finally",
                        value: function(e) {
                            var t = this, n = t.constructor;
                            return v(e) ? t.then(function(t) {
                                return n.resolve(e()).then(function() {
                                    return t;
                                });
                            }, function(t) {
                                return n.resolve(e()).then(function() {
                                    throw t;
                                });
                            }) : t.then(e, e);
                        }
                    } ]), e;
                }();
                zt.prototype.then = O, zt.all = te, zt.race = ne, zt.resolve = P, zt.reject = ae, 
                zt._setScheduler = D, zt._setAsap = T, zt._asap = Dt, zt.polyfill = ie, zt.Promise = zt;
                var Ct = "undefined" != typeof Promise ? Promise : zt, Rt = (_e(0) || "").replace(/(:\d+)+\)?/, "").replace(/.+\//, ""), It = 0, Jt = void 0, qt = [], Ut = {
                    finished: !1,
                    add: pe,
                    advance: le,
                    taskCount: Me
                }, Vt = function() {
                    function e(t, n, a) {
                        et(this, e), this.name = t, this.suiteName = n.name, this.fullName = n.fullName.concat(t), 
                        this.runtime = 0, this.assertions = [], this.skipped = !!a.skip, this.todo = !!a.todo, 
                        this.valid = a.valid, this._startTime = 0, this._endTime = 0, n.pushTest(this);
                    }
                    return tt(e, [ {
                        key: "start",
                        value: function(e) {
                            return e && (this._startTime = dt(), ot && ot.mark("qunit_test_start")), {
                                name: this.name,
                                suiteName: this.suiteName,
                                fullName: this.fullName.slice()
                            };
                        }
                    }, {
                        key: "end",
                        value: function(e) {
                            if (e && (this._endTime = dt(), ot)) {
                                ot.mark("qunit_test_end");
                                var t = this.fullName.join(" – ");
                                u("QUnit Test: " + t, "qunit_test_start", "qunit_test_end");
                            }
                            return c(this.start(), {
                                runtime: this.getRuntime(),
                                status: this.getStatus(),
                                errors: this.getFailedAssertions(),
                                assertions: this.getAssertions()
                            });
                        }
                    }, {
                        key: "pushAssertion",
                        value: function(e) {
                            this.assertions.push(e);
                        }
                    }, {
                        key: "getRuntime",
                        value: function() {
                            return this._endTime - this._startTime;
                        }
                    }, {
                        key: "getStatus",
                        value: function() {
                            if (this.skipped) return "skipped";
                            var e = this.getFailedAssertions().length > 0 ? this.todo : !this.todo;
                            return e ? this.todo ? "todo" : "passed" : "failed";
                        }
                    }, {
                        key: "getFailedAssertions",
                        value: function() {
                            return this.assertions.filter(function(e) {
                                return !e.passed;
                            });
                        }
                    }, {
                        key: "getAssertions",
                        value: function() {
                            return this.assertions.slice();
                        }
                    }, {
                        key: "slimAssertions",
                        value: function() {
                            this.assertions = this.assertions.map(function(e) {
                                return delete e.actual, delete e.expected, e;
                            });
                        }
                    } ]), e;
                }(), Gt = !1;
                Ye.count = 0, Ye.prototype = {
                    before: function() {
                        var e = this, t = this.module, n = ke(t), a = n.reduce(function(e, t) {
                            return e.then(function() {
                                return t.stats = {
                                    all: 0,
                                    bad: 0,
                                    started: rt()
                                }, Y("suiteStart", t.suiteReport.start(!0)), de("moduleStart", {
                                    name: t.name,
                                    tests: t.tests
                                });
                            });
                        }, Ct.resolve([]));
                        return a.then(function() {
                            return lt.current = e, e.testEnvironment = c({}, t.testEnvironment), e.started = rt(), 
                            Y("testStart", e.testReport.start(!0)), de("testStart", {
                                name: e.testName,
                                module: t.name,
                                testId: e.testId,
                                previousFailure: e.previousFailure
                            }).then(function() {
                                lt.pollution || ve();
                            });
                        });
                    },
                    run: function() {
                        function e(e) {
                            t = e.callback.call(e.testEnvironment, e.assert), e.resolvePromise(t), 0 === e.timeout && 0 !== e.semaphore && ge("Test did not finish synchronously even though assert.timeout( 0 ) was used.", _e(2));
                        }
                        var t;
                        if (lt.current = this, this.callbackStarted = rt(), lt.notrycatch) return void e(this);
                        try {
                            e(this);
                        } catch (e) {
                            this.pushFailure("Died on test #" + (this.assertions.length + 1) + " " + this.stack + ": " + (e.message || e), ue(e, 0)), 
                            ve(), lt.blocking && je(this);
                        }
                    },
                    after: function() {
                        De();
                    },
                    queueHook: function(e, t, n) {
                        var a = this, s = function() {
                            var n = e.call(a.testEnvironment, a.assert);
                            a.resolvePromise(n, t);
                        }, r = function() {
                            if ("before" === t) {
                                if (0 !== n.unskippedTestsRun) return;
                                a.preserveEnvironment = !0;
                            }
                            if ("after" !== t || n.unskippedTestsRun === Pe(n) - 1 || !(lt.queue.length > 0 || Ut.taskCount() > 2)) {
                                if (lt.current = a, lt.notrycatch) return void s();
                                try {
                                    s();
                                } catch (e) {
                                    a.pushFailure(t + " failed on " + a.testName + ": " + (e.message || e), ue(e, 0));
                                }
                            }
                        };
                        return r;
                    },
                    hooks: function e(t) {
                        function n(a, s) {
                            if (s.parentModule && n(a, s.parentModule), s.hooks[t].length) for (var r = 0; r < s.hooks[t].length; r++) e.push(a.queueHook(s.hooks[t][r], t, s));
                        }
                        var e = [];
                        return this.skip || n(this, this.module), e;
                    },
                    finish: function() {
                        function e(e) {
                            return e.hooks = {}, Y("suiteEnd", e.suiteReport.end(!0)), de("moduleDone", {
                                name: e.name,
                                tests: e.tests,
                                failed: e.stats.bad,
                                passed: e.stats.all - e.stats.bad,
                                total: e.stats.all,
                                runtime: rt() - e.stats.started
                            });
                        }
                        if (lt.current = this, this.callback = void 0, this.steps.length) {
                            var t = this.steps.join(", ");
                            this.pushFailure("Expected assert.verifySteps() to be called before end of test after using assert.step(). Unverified steps: " + t, this.stack);
                        }
                        lt.requireExpects && null === this.expected ? this.pushFailure("Expected number of assertions to be defined, but expect() was not called.", this.stack) : null !== this.expected && this.expected !== this.assertions.length ? this.pushFailure("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run", this.stack) : null !== this.expected || this.assertions.length || this.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
                        var n, a = this.module, s = a.name, r = this.testName, i = !!this.skip, o = !!this.todo, d = 0, u = lt.storage;
                        for (this.runtime = rt() - this.started, lt.stats.all += this.assertions.length, 
                        a.stats.all += this.assertions.length, n = 0; n < this.assertions.length; n++) this.assertions[n].result || (d++, 
                        lt.stats.bad++, a.stats.bad++);
                        return We(a, i), u && (d ? u.setItem("qunit-test-" + s + "-" + r, d) : u.removeItem("qunit-test-" + s + "-" + r)), 
                        Y("testEnd", this.testReport.end(!0)), this.testReport.slimAssertions(), de("testDone", {
                            name: r,
                            module: s,
                            skipped: i,
                            todo: o,
                            failed: d,
                            passed: this.assertions.length - d,
                            total: this.assertions.length,
                            runtime: i ? 0 : this.runtime,
                            assertions: this.assertions,
                            testId: this.testId,
                            source: this.stack
                        }).then(function() {
                            if (a.testsRun === Oe(a)) {
                                for (var t = [ a ], n = a.parentModule; n && n.testsRun === Oe(n); ) t.push(n), 
                                n = n.parentModule;
                                return t.reduce(function(t, n) {
                                    return t.then(function() {
                                        return e(n);
                                    });
                                }, Ct.resolve([]));
                            }
                        }).then(function() {
                            lt.current = void 0;
                        });
                    },
                    preserveTestEnvironment: function() {
                        this.preserveEnvironment && (this.module.testEnvironment = this.testEnvironment, 
                        this.testEnvironment = c({}, this.module.testEnvironment));
                    },
                    queue: function() {
                        function e() {
                            return [ function() {
                                return t.before();
                            } ].concat(nt(t.hooks("before")), [ function() {
                                t.preserveTestEnvironment();
                            } ], nt(t.hooks("beforeEach")), [ function() {
                                t.run();
                            } ], nt(t.hooks("afterEach").reverse()), nt(t.hooks("after").reverse()), [ function() {
                                t.after();
                            }, function() {
                                return t.finish();
                            } ]);
                        }
                        var t = this;
                        if (this.valid()) {
                            var n = lt.storage && +lt.storage.getItem("qunit-test-" + this.module.name + "-" + this.testName), a = lt.reorder && !!n;
                            this.previousFailure = !!n, Ut.add(e, a, lt.seed), Ut.finished && Ut.advance();
                        }
                    },
                    pushResult: function(e) {
                        if (this !== lt.current) throw new Error("Assertion occurred after test had finished.");
                        var t, n = {
                            module: this.module.name,
                            name: this.testName,
                            result: e.result,
                            message: e.message,
                            actual: e.actual,
                            testId: this.testId,
                            negative: e.negative || !1,
                            runtime: rt() - this.started,
                            todo: !!this.todo
                        };
                        st.call(e, "expected") && (n.expected = e.expected), e.result || (t = e.source || _e(), 
                        t && (n.source = t)), this.logAssertion(n), this.assertions.push({
                            result: !!e.result,
                            message: e.message
                        });
                    },
                    pushFailure: function(e, t, n) {
                        if (!(this instanceof Ye)) throw new Error("pushFailure() assertion outside test context, was " + _e(2));
                        this.pushResult({
                            result: !1,
                            message: e || "error",
                            actual: n || null,
                            source: t
                        });
                    },
                    logAssertion: function(e) {
                        de("log", e);
                        var t = {
                            passed: e.result,
                            actual: e.actual,
                            expected: e.expected,
                            message: e.message,
                            stack: e.source,
                            todo: e.todo
                        };
                        this.testReport.pushAssertion(t), Y("assertion", t);
                    },
                    resolvePromise: function(e, t) {
                        var n, a, s, r = this;
                        null != e && (n = e.then, "function" === h(n) && (a = He(r), lt.notrycatch ? n.call(e, function() {
                            a();
                        }) : n.call(e, function() {
                            a();
                        }, function(e) {
                            s = "Promise rejected " + (t ? t.replace(/Each$/, "") : "during") + ' "' + r.testName + '": ' + (e && e.message || e), 
                            r.pushFailure(s, ue(e, 0)), ve(), je(r);
                        })));
                    },
                    valid: function() {
                        function e(t) {
                            var n = t.name ? t.name.toLowerCase() : null;
                            return n === s || !!t.parentModule && e(t.parentModule);
                        }
                        function t(e) {
                            return l(e.moduleId, lt.moduleId) || e.parentModule && t(e.parentModule);
                        }
                        var n = lt.filter, a = /^(!?)\/([\w\W]*)\/(i?$)/.exec(n), s = lt.module && lt.module.toLowerCase(), r = this.module.name + ": " + this.testName;
                        return !(!this.callback || !this.callback.validTest) || !(lt.moduleId && lt.moduleId.length > 0 && !t(this.module)) && (!(lt.testId && lt.testId.length > 0 && !l(this.testId, lt.testId)) && (!(s && !e(this.module)) && (!n || (a ? this.regexFilter(!!a[1], a[2], a[3], r) : this.stringFilter(n, r)))));
                    },
                    regexFilter: function(e, t, n, a) {
                        var s = new RegExp(t, n), r = s.test(a);
                        return r !== e;
                    },
                    stringFilter: function(e, t) {
                        e = e.toLowerCase(), t = t.toLowerCase();
                        var n = "!" !== e.charAt(0);
                        return n || (e = e.slice(1)), t.indexOf(e) !== -1 ? n : !n;
                    }
                };
                var Bt = function() {
                    function e(t) {
                        et(this, e), this.test = t;
                    }
                    return tt(e, [ {
                        key: "timeout",
                        value: function(e) {
                            if ("number" != typeof e) throw new Error("You must pass a number as the duration to assert.timeout");
                            this.test.timeout = e;
                        }
                    }, {
                        key: "step",
                        value: function(e) {
                            var t = e, n = !!e;
                            this.test.steps.push(e), "undefined" === h(e) || "" === e ? t = "You must provide a message to assert.step" : "string" !== h(e) && (t = "You must provide a string value to assert.step", 
                            n = !1), this.pushResult({
                                result: n,
                                message: t
                            });
                        }
                    }, {
                        key: "verifySteps",
                        value: function(e, t) {
                            var n = this.test.steps.slice();
                            this.deepEqual(n, e, t), this.test.steps.length = 0;
                        }
                    }, {
                        key: "expect",
                        value: function(e) {
                            return 1 !== arguments.length ? this.test.expected : void (this.test.expected = e);
                        }
                    }, {
                        key: "async",
                        value: function(e) {
                            var t = this.test, n = !1, a = e;
                            "undefined" == typeof a && (a = 1);
                            var s = He(t);
                            return function() {
                                if (lt.current !== t) throw Error("assert.async callback called after test finished.");
                                return n ? void t.pushFailure("Too many calls to the `assert.async` callback", _e(2)) : (a -= 1, 
                                void (a > 0 || (n = !0, s())));
                            };
                        }
                    }, {
                        key: "push",
                        value: function(t, n, a, s, r) {
                            Ze.warn("assert.push is deprecated and will be removed in QUnit 3.0. Please use assert.pushResult instead (https://api.qunitjs.com/assert/pushResult).");
                            var i = this instanceof e ? this : lt.current.assert;
                            return i.pushResult({
                                result: t,
                                actual: n,
                                expected: a,
                                message: s,
                                negative: r
                            });
                        }
                    }, {
                        key: "pushResult",
                        value: function(t) {
                            var n = this, a = n instanceof e && n.test || lt.current;
                            if (!a) throw new Error("assertion outside test context, in " + _e(2));
                            return n instanceof e || (n = a.assert), n.test.pushResult(t);
                        }
                    }, {
                        key: "ok",
                        value: function(e, t) {
                            t || (t = e ? "okay" : "failed, expected argument to be truthy, was: " + ct.parse(e)), 
                            this.pushResult({
                                result: !!e,
                                actual: e,
                                expected: !0,
                                message: t
                            });
                        }
                    }, {
                        key: "notOk",
                        value: function(e, t) {
                            t || (t = e ? "failed, expected argument to be falsy, was: " + ct.parse(e) : "okay"), 
                            this.pushResult({
                                result: !e,
                                actual: e,
                                expected: !1,
                                message: t
                            });
                        }
                    }, {
                        key: "equal",
                        value: function(e, t, n) {
                            var a = t == e;
                            this.pushResult({
                                result: a,
                                actual: e,
                                expected: t,
                                message: n
                            });
                        }
                    }, {
                        key: "notEqual",
                        value: function(e, t, n) {
                            var a = t != e;
                            this.pushResult({
                                result: a,
                                actual: e,
                                expected: t,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "propEqual",
                        value: function(e, t, n) {
                            e = m(e), t = m(t), this.pushResult({
                                result: _t(e, t),
                                actual: e,
                                expected: t,
                                message: n
                            });
                        }
                    }, {
                        key: "notPropEqual",
                        value: function(e, t, n) {
                            e = m(e), t = m(t), this.pushResult({
                                result: !_t(e, t),
                                actual: e,
                                expected: t,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "deepEqual",
                        value: function(e, t, n) {
                            this.pushResult({
                                result: _t(e, t),
                                actual: e,
                                expected: t,
                                message: n
                            });
                        }
                    }, {
                        key: "notDeepEqual",
                        value: function(e, t, n) {
                            this.pushResult({
                                result: !_t(e, t),
                                actual: e,
                                expected: t,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "strictEqual",
                        value: function(e, t, n) {
                            this.pushResult({
                                result: t === e,
                                actual: e,
                                expected: t,
                                message: n
                            });
                        }
                    }, {
                        key: "notStrictEqual",
                        value: function(e, t, n) {
                            this.pushResult({
                                result: t !== e,
                                actual: e,
                                expected: t,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "throws",
                        value: function(t, n, a) {
                            var s = void 0, r = !1, i = this instanceof e && this.test || lt.current;
                            if ("string" === h(n)) {
                                if (null != a) throw new Error("throws/raises does not accept a string value for the expected argument.\nUse a non-string object value (e.g. regExp) instead if it's necessary.");
                                a = n, n = null;
                            }
                            i.ignoreGlobalErrors = !0;
                            try {
                                t.call(i.testEnvironment);
                            } catch (e) {
                                s = e;
                            }
                            if (i.ignoreGlobalErrors = !1, s) {
                                var o = h(n);
                                n ? "regexp" === o ? r = n.test(Ae(s)) : "function" === o && s instanceof n ? r = !0 : "object" === o ? r = s instanceof n.constructor && s.name === n.name && s.message === n.message : "function" === o && n.call({}, s) === !0 && (n = null, 
                                r = !0) : (r = !0, n = null);
                            }
                            i.assert.pushResult({
                                result: r,
                                actual: s,
                                expected: n,
                                message: a
                            });
                        }
                    }, {
                        key: "rejects",
                        value: function(t, n, a) {
                            var s = !1, r = this instanceof e && this.test || lt.current;
                            if ("string" === h(n)) {
                                if (void 0 !== a) return a = "assert.rejects does not accept a string value for the expected argument.\nUse a non-string object value (e.g. validator function) instead if necessary.", 
                                void r.assert.pushResult({
                                    result: !1,
                                    message: a
                                });
                                a = n, n = void 0;
                            }
                            var i = t && t.then;
                            if ("function" !== h(i)) {
                                var o = 'The value provided to `assert.rejects` in "' + r.testName + '" was not a promise.';
                                return void r.assert.pushResult({
                                    result: !1,
                                    message: o,
                                    actual: t
                                });
                            }
                            var d = this.async();
                            return i.call(t, function() {
                                var e = 'The promise returned by the `assert.rejects` callback in "' + r.testName + '" did not reject.';
                                r.assert.pushResult({
                                    result: !1,
                                    message: e,
                                    actual: t
                                }), d();
                            }, function(e) {
                                var t = h(n);
                                void 0 === n ? (s = !0, n = e) : "regexp" === t ? s = n.test(Ae(e)) : "function" === t && e instanceof n ? s = !0 : "object" === t ? s = e instanceof n.constructor && e.name === n.name && e.message === n.message : "function" === t ? (s = n.call({}, e) === !0, 
                                n = null) : (s = !1, a = 'invalid expected value provided to `assert.rejects` callback in "' + r.testName + '": ' + t + "."), 
                                r.assert.pushResult({
                                    result: s,
                                    actual: e,
                                    expected: n,
                                    message: a
                                }), d();
                            });
                        }
                    } ]), e;
                }();
                Bt.prototype.raises = Bt.prototype.throws;
                var $t = {}, Qt = new ht();
                lt.currentModule.suiteReport = Qt;
                var Kt = !1, Zt = !1;
                $t.isLocal = !(ut.document && "file:" !== qe.location.protocol), $t.version = "2.8.0", 
                c($t, {
                    on: k,
                    module: L,
                    test: Te,
                    todo: we,
                    skip: be,
                    only: Se,
                    start: function(e) {
                        var t = Kt;
                        if (lt.current) throw new Error("QUnit.start cannot be called inside a test context.");
                        if (Kt = !0, Zt) throw new Error("Called start() while test already started running");
                        if (t || e > 1) throw new Error("Called start() outside of a test context too many times");
                        if (lt.autostart) throw new Error("Called start() outside of a test context when QUnit.config.autostart was true");
                        return lt.pageLoaded ? void Ce() : (lt.autostart = !0, void (ut.document || $t.load()));
                    },
                    config: lt,
                    is: f,
                    objectType: h,
                    extend: c,
                    load: function() {
                        lt.pageLoaded = !0, c(lt, {
                            stats: {
                                all: 0,
                                bad: 0
                            },
                            started: 0,
                            updateRate: 1e3,
                            autostart: !0,
                            filter: ""
                        }, !0), Zt || (lt.blocking = !1, lt.autostart && Ce());
                    },
                    stack: function(e) {
                        return e = (e || 0) + 2, _e(e);
                    },
                    onError: Ne,
                    onUnhandledRejection: ze
                }), $t.pushFailure = ge, $t.assert = Bt.prototype, $t.equiv = _t, $t.dump = ct, 
                oe($t), Fe($t), function() {
                    function e() {
                        if (!a.call(n, "fixture")) {
                            var e = $e.getElementById("qunit-fixture");
                            e && (n.fixture = e.cloneNode(!0));
                        }
                    }
                    function t() {
                        if (null != n.fixture) {
                            var e = $e.getElementById("qunit-fixture"), t = Xe(n.fixture);
                            if ("string" === t) {
                                var a = $e.createElement("div");
                                a.setAttribute("id", "qunit-fixture"), a.innerHTML = n.fixture, e.parentNode.replaceChild(a, e);
                            } else {
                                var s = n.fixture.cloneNode(!0);
                                e.parentNode.replaceChild(s, e);
                            }
                        }
                    }
                    if ("undefined" != typeof qe && "undefined" != typeof $e) {
                        var n = $t.config, a = Object.prototype.hasOwnProperty;
                        $t.begin(e), $t.testStart(t);
                    }
                }(), function() {
                    function e() {
                        var e, a, s, r, i = Object.create(null), o = n.search.slice(1).split("&"), d = o.length;
                        for (e = 0; e < d; e++) o[e] && (a = o[e].split("="), s = t(a[0]), r = 1 === a.length || t(a.slice(1).join("=")), 
                        s in i ? i[s] = [].concat(i[s], r) : i[s] = r);
                        return i;
                    }
                    function t(e) {
                        return decodeURIComponent(e.replace(/\+/g, "%20"));
                    }
                    var n = "undefined" != typeof qe && qe.location;
                    if (n) {
                        var a = e();
                        $t.urlParams = a, $t.config.moduleId = [].concat(a.moduleId || []), $t.config.testId = [].concat(a.testId || []), 
                        $t.config.module = a.module, $t.config.filter = a.filter, a.seed === !0 ? $t.config.seed = Math.random().toString(36).slice(2) : a.seed && ($t.config.seed = a.seed), 
                        $t.config.urlConfig.push({
                            id: "hidepassed",
                            label: "Hide passed tests",
                            tooltip: "Only show tests and assertions that fail. Stored as query-strings."
                        }, {
                            id: "noglobals",
                            label: "Check for Globals",
                            tooltip: "Enabling this will test if any test introduces new properties on the global object (`window` in Browsers). Stored as query-strings."
                        }, {
                            id: "notrycatch",
                            label: "No try-catch",
                            tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings."
                        }), $t.begin(function() {
                            var e, t, n = $t.config.urlConfig;
                            for (e = 0; e < n.length; e++) t = $t.config.urlConfig[e], "string" != typeof t && (t = t.id), 
                            void 0 === $t.config[t] && ($t.config[t] = a[t]);
                        });
                    }
                }();
                var Xt = {
                    passedTests: 0,
                    failedTests: 0,
                    skippedTests: 0,
                    todoTests: 0
                };
                !function() {
                    function e(e, t, n) {
                        e.addEventListener(t, n, !1);
                    }
                    function t(e, t, n) {
                        e.removeEventListener(t, n, !1);
                    }
                    function n(t, n, a) {
                        for (var s = t.length; s--; ) e(t[s], n, a);
                    }
                    function a(e, t) {
                        return (" " + e.className + " ").indexOf(" " + t + " ") >= 0;
                    }
                    function s(e, t) {
                        a(e, t) || (e.className += (e.className ? " " : "") + t);
                    }
                    function r(e, t, n) {
                        n || "undefined" == typeof n && !a(e, t) ? s(e, t) : i(e, t);
                    }
                    function i(e, t) {
                        for (var n = " " + e.className + " "; n.indexOf(" " + t + " ") >= 0; ) n = n.replace(" " + t + " ", " ");
                        e.className = "function" == typeof n.trim ? n.trim() : n.replace(/^\s+|\s+$/g, "");
                    }
                    function o(e) {
                        return x.getElementById && x.getElementById(e);
                    }
                    function d() {
                        var e = o("qunit-abort-tests-button");
                        return e && (e.disabled = !0, e.innerHTML = "Aborting..."), $t.config.queue.length = 0, 
                        !1;
                    }
                    function u(e) {
                        return c(), e && e.preventDefault && e.preventDefault(), !1;
                    }
                    function _() {
                        var e, t, n, a, s, r = !1, i = H.urlConfig, o = "";
                        for (e = 0; e < i.length; e++) if (n = H.urlConfig[e], "string" == typeof n && (n = {
                            id: n,
                            label: n
                        }), a = Je(n.id), s = Je(n.tooltip), n.value && "string" != typeof n.value) {
                            if (o += "<label for='qunit-urlconfig-" + a + "' title='" + s + "'>" + n.label + ": </label><select id='qunit-urlconfig-" + a + "' name='" + a + "' title='" + s + "'><option></option>", 
                            $t.is("array", n.value)) for (t = 0; t < n.value.length; t++) a = Je(n.value[t]), 
                            o += "<option value='" + a + "'" + (H[n.id] === n.value[t] ? (r = !0) && " selected='selected'" : "") + ">" + a + "</option>"; else for (t in n.value) O.call(n.value, t) && (o += "<option value='" + Je(t) + "'" + (H[n.id] === t ? (r = !0) && " selected='selected'" : "") + ">" + Je(n.value[t]) + "</option>");
                            H[n.id] && !r && (a = Je(H[n.id]), o += "<option value='" + a + "' selected='selected' disabled='disabled'>" + a + "</option>"), 
                            o += "</select>";
                        } else o += "<label for='qunit-urlconfig-" + a + "' title='" + s + "'><input id='qunit-urlconfig-" + a + "' name='" + a + "' type='checkbox'" + (n.value ? " value='" + Je(n.value) + "'" : "") + (H[n.id] ? " checked='checked'" : "") + " title='" + s + "' />" + Je(n.label) + "</label>";
                        return o;
                    }
                    function l() {
                        var e, t, n, a = this, s = {};
                        if (t = "selectedIndex" in a ? a.options[a.selectedIndex].value || void 0 : a.checked ? a.defaultValue || !0 : void 0, 
                        s[a.name] = t, e = m(s), "hidepassed" === a.name && "replaceState" in qe.history) {
                            if ($t.urlParams[a.name] = t, H[a.name] = t || !1, n = o("qunit-tests")) {
                                var r = n.children.length, i = n.children;
                                if (a.checked) {
                                    for (var d = 0; d < r; d++) {
                                        var u = i[d];
                                        u && u.className.indexOf("pass") > -1 && j.push(u);
                                    }
                                    var _ = !0, l = !1, c = void 0;
                                    try {
                                        for (var h, f = j[Symbol.iterator](); !(_ = (h = f.next()).done); _ = !0) {
                                            var M = h.value;
                                            n.removeChild(M);
                                        }
                                    } catch (e) {
                                        l = !0, c = e;
                                    } finally {
                                        try {
                                            !_ && f.return && f.return();
                                        } finally {
                                            if (l) throw c;
                                        }
                                    }
                                } else for (;null != (u = j.pop()); ) n.appendChild(u);
                            }
                            qe.history.replaceState(null, "", e);
                        } else qe.location = e;
                    }
                    function m(e) {
                        var t, n, a, s = "?", r = qe.location;
                        e = $t.extend($t.extend({}, $t.urlParams), e);
                        for (t in e) if (O.call(e, t) && void 0 !== e[t]) for (n = [].concat(e[t]), a = 0; a < n.length; a++) s += encodeURIComponent(t), 
                        n[a] !== !0 && (s += "=" + encodeURIComponent(n[a])), s += "&";
                        return r.protocol + "//" + r.host + r.pathname + s.slice(0, -1);
                    }
                    function c() {
                        var e, t = [], n = o("qunit-modulefilter-dropdown-list").getElementsByTagName("input"), a = o("qunit-filter-input").value;
                        for (e = 0; e < n.length; e++) n[e].checked && t.push(n[e].value);
                        qe.location = m({
                            filter: "" === a ? void 0 : a,
                            moduleId: 0 === t.length ? void 0 : t,
                            module: void 0,
                            testId: void 0
                        });
                    }
                    function h() {
                        var e = x.createElement("span");
                        return e.innerHTML = _(), s(e, "qunit-url-config"), n(e.getElementsByTagName("input"), "change", l), 
                        n(e.getElementsByTagName("select"), "change", l), e;
                    }
                    function f() {
                        var t = x.createElement("button");
                        return t.id = "qunit-abort-tests-button", t.innerHTML = "Abort", e(t, "click", d), 
                        t;
                    }
                    function M() {
                        var t = x.createElement("form"), n = x.createElement("label"), a = x.createElement("input"), r = x.createElement("button");
                        return s(t, "qunit-filter"), n.innerHTML = "Filter: ", a.type = "text", a.value = H.filter || "", 
                        a.name = "filter", a.id = "qunit-filter-input", r.innerHTML = "Go", n.appendChild(a), 
                        t.appendChild(n), t.appendChild(x.createTextNode(" ")), t.appendChild(r), e(t, "submit", u), 
                        t;
                    }
                    function p() {
                        var e, t, n = "";
                        for (e = 0; e < H.modules.length; e++) "" !== H.modules[e].name && (t = H.moduleId.indexOf(H.modules[e].moduleId) > -1, 
                        n += "<li><label class='clickable" + (t ? " checked" : "") + "'><input type='checkbox' value='" + H.modules[e].moduleId + "'" + (t ? " checked='checked'" : "") + " />" + Je(H.modules[e].name) + "</label></li>");
                        return n;
                    }
                    function y() {
                        function n() {
                            function n(e) {
                                var s = l.contains(e.target);
                                27 !== e.keyCode && s || (27 === e.keyCode && s && h.focus(), f.style.display = "none", 
                                t(x, "click", n), t(x, "keydown", n), h.value = "", a());
                            }
                            "none" === f.style.display && (f.style.display = "block", e(x, "click", n), e(x, "keydown", n));
                        }
                        function a() {
                            var e, t, n = h.value.toLowerCase(), a = y.children;
                            for (e = 0; e < a.length; e++) t = a[e], !n || t.textContent.toLowerCase().indexOf(n) > -1 ? t.style.display = "" : t.style.display = "none";
                        }
                        function s(e) {
                            var t, n, a = e && e.target || o, s = y.getElementsByTagName("input"), u = [];
                            for (r(a.parentNode, "checked", a.checked), L = !1, a.checked && a !== o && (o.checked = !1, 
                            i(o.parentNode, "checked")), t = 0; t < s.length; t++) n = s[t], e ? a === o && a.checked && (n.checked = !1, 
                            i(n.parentNode, "checked")) : r(n.parentNode, "checked", n.checked), L = L || n.checked !== n.defaultChecked, 
                            n.checked && u.push(n.parentNode.textContent);
                            d.style.display = _.style.display = L ? "" : "none", h.placeholder = u.join(", ") || o.parentNode.textContent, 
                            h.title = "Type to filter list. Current selection:\n" + (u.join("\n") || o.parentNode.textContent);
                        }
                        var o, d, _, l = x.createElement("form"), m = x.createElement("label"), h = x.createElement("input"), f = x.createElement("div"), M = x.createElement("span"), y = x.createElement("ul"), L = !1;
                        return h.id = "qunit-modulefilter-search", h.autocomplete = "off", e(h, "input", a), 
                        e(h, "input", n), e(h, "focus", n), e(h, "click", n), m.id = "qunit-modulefilter-search-container", 
                        m.innerHTML = "Module: ", m.appendChild(h), M.id = "qunit-modulefilter-actions", 
                        M.innerHTML = "<button style='display:none'>Apply</button><button type='reset' style='display:none'>Reset</button><label class='clickable" + (H.moduleId.length ? "" : " checked") + "'><input type='checkbox'" + (H.moduleId.length ? "" : " checked='checked'") + " />All modules</label>", 
                        o = M.lastChild.firstChild, d = M.firstChild, _ = d.nextSibling, e(d, "click", c), 
                        y.id = "qunit-modulefilter-dropdown-list", y.innerHTML = p(), f.id = "qunit-modulefilter-dropdown", 
                        f.style.display = "none", f.appendChild(M), f.appendChild(y), e(f, "change", s), 
                        s(), l.id = "qunit-modulefilter", l.appendChild(m), l.appendChild(f), e(l, "submit", u), 
                        e(l, "reset", function() {
                            qe.setTimeout(s);
                        }), l;
                    }
                    function L() {
                        var e = o("qunit-testrunner-toolbar");
                        e && (e.appendChild(h()), e.appendChild(y()), e.appendChild(M()), e.appendChild(x.createElement("div")).className = "clearfix");
                    }
                    function Y() {
                        var e = o("qunit-header");
                        e && (e.innerHTML = "<a href='" + Je(P) + "'>" + e.innerHTML + "</a> ");
                    }
                    function k() {
                        var e = o("qunit-banner");
                        e && (e.className = "");
                    }
                    function g() {
                        var e, t = o("qunit-tests"), n = o("qunit-testresult");
                        n && n.parentNode.removeChild(n), t && (t.innerHTML = "", n = x.createElement("p"), 
                        n.id = "qunit-testresult", n.className = "result", t.parentNode.insertBefore(n, t), 
                        n.innerHTML = '<div id="qunit-testresult-display">Running...<br />&#160;</div><div id="qunit-testresult-controls"></div><div class="clearfix"></div>', 
                        e = o("qunit-testresult-controls")), e && e.appendChild(f());
                    }
                    function v() {
                        var e = $t.config.testId;
                        return !e || e.length <= 0 ? "" : "<div id='qunit-filteredTest'>Rerunning selected tests: " + Je(e.join(", ")) + " <a id='qunit-clearFilter' href='" + Je(P) + "'>Run all tests</a></div>";
                    }
                    function D() {
                        var e = o("qunit-userAgent");
                        e && (e.innerHTML = "", e.appendChild(x.createTextNode("QUnit " + $t.version + "; " + Qe.userAgent)));
                    }
                    function T() {
                        var e = o("qunit");
                        e && (e.innerHTML = "<h1 id='qunit-header'>" + Je(x.title) + "</h1><h2 id='qunit-banner'></h2><div id='qunit-testrunner-toolbar'></div>" + v() + "<h2 id='qunit-userAgent'></h2><ol id='qunit-tests'></ol>"), 
                        Y(), k(), g(), D(), L();
                    }
                    function w(e, t, n) {
                        var a, s, r, i, d = o("qunit-tests");
                        d && (a = x.createElement("strong"), a.innerHTML = b(e, n), s = x.createElement("a"), 
                        s.innerHTML = "Rerun", s.href = m({
                            testId: t
                        }), r = x.createElement("li"), r.appendChild(a), r.appendChild(s), r.id = "qunit-test-output-" + t, 
                        i = x.createElement("ol"), i.className = "qunit-assert-list", r.appendChild(i), 
                        d.appendChild(r));
                    }
                    function b(e, t) {
                        var n = "";
                        return t && (n = "<span class='module-name'>" + Je(t) + "</span>: "), n += "<span class='test-name'>" + Je(e) + "</span>";
                    }
                    function S(e) {
                        return e.replace(/<\/?[^>]+(>|$)/g, "").replace(/&quot;/g, "").replace(/\s+/g, "");
                    }
                    if ("undefined" != typeof qe && qe.document) {
                        var H = $t.config, j = [], x = qe.document, E = !1, O = Object.prototype.hasOwnProperty, P = m({
                            filter: void 0,
                            module: void 0,
                            moduleId: void 0,
                            testId: void 0
                        }), W = [];
                        $t.begin(function(e) {
                            var t, n;
                            for (t = 0; t < e.modules.length; t++) n = e.modules[t], n.name && W.push(n.name);
                            W.sort(function(e, t) {
                                return e.localeCompare(t);
                            }), T();
                        }), $t.done(function(e) {
                            var t, n, a, s = o("qunit-banner"), r = o("qunit-tests"), i = o("qunit-abort-tests-button"), d = Xt.passedTests + Xt.skippedTests + Xt.todoTests + Xt.failedTests, u = [ d, " tests completed in ", e.runtime, " milliseconds, with ", Xt.failedTests, " failed, ", Xt.skippedTests, " skipped, and ", Xt.todoTests, " todo.<br />", "<span class='passed'>", e.passed, "</span> assertions of <span class='total'>", e.total, "</span> passed, <span class='failed'>", e.failed, "</span> failed." ].join("");
                            if (i && i.disabled) {
                                u = "Tests aborted after " + e.runtime + " milliseconds.";
                                for (var _ = 0; _ < r.children.length; _++) t = r.children[_], "" !== t.className && "running" !== t.className || (t.className = "aborted", 
                                a = t.getElementsByTagName("ol")[0], n = x.createElement("li"), n.className = "fail", 
                                n.innerHTML = "Test aborted.", a.appendChild(n));
                            }
                            !s || i && i.disabled !== !1 || (s.className = Xt.failedTests ? "qunit-fail" : "qunit-pass"), 
                            i && i.parentNode.removeChild(i), r && (o("qunit-testresult-display").innerHTML = u), 
                            H.altertitle && x.title && (x.title = [ Xt.failedTests ? "✖" : "✔", x.title.replace(/^[\u2714\u2716] /i, "") ].join(" ")), 
                            H.scrolltop && qe.scrollTo && qe.scrollTo(0, 0);
                        }), $t.testStart(function(e) {
                            var t, n;
                            w(e.name, e.testId, e.module), t = o("qunit-testresult-display"), t && (s(t, "running"), 
                            n = $t.config.reorder && e.previousFailure, t.innerHTML = [ n ? "Rerunning previously failed test: <br />" : "Running: <br />", b(e.name, e.module) ].join(""));
                        }), $t.log(function(e) {
                            var t, n, a, s, r, i, d = !1, u = o("qunit-test-output-" + e.testId);
                            u && (a = Je(e.message) || (e.result ? "okay" : "failed"), a = "<span class='test-message'>" + a + "</span>", 
                            a += "<span class='runtime'>@ " + e.runtime + " ms</span>", !e.result && O.call(e, "expected") ? (s = e.negative ? "NOT " + $t.dump.parse(e.expected) : $t.dump.parse(e.expected), 
                            r = $t.dump.parse(e.actual), a += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + Je(s) + "</pre></td></tr>", 
                            r !== s ? (a += "<tr class='test-actual'><th>Result: </th><td><pre>" + Je(r) + "</pre></td></tr>", 
                            "number" == typeof e.actual && "number" == typeof e.expected ? isNaN(e.actual) || isNaN(e.expected) || (d = !0, 
                            i = e.actual - e.expected, i = (i > 0 ? "+" : "") + i) : "boolean" != typeof e.actual && "boolean" != typeof e.expected && (i = $t.diff(s, r), 
                            d = S(i).length !== S(s).length + S(r).length), d && (a += "<tr class='test-diff'><th>Diff: </th><td><pre>" + i + "</pre></td></tr>")) : a += s.indexOf("[object Array]") !== -1 || s.indexOf("[object Object]") !== -1 ? "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the depth of object is more than current max depth (" + $t.config.maxDepth + ").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to  run with a higher max depth or <a href='" + Je(m({
                                maxDepth: -1
                            })) + "'>Rerun</a> without max depth.</p></td></tr>" : "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the expected and actual results have an equivalent serialization</td></tr>", 
                            e.source && (a += "<tr class='test-source'><th>Source: </th><td><pre>" + Je(e.source) + "</pre></td></tr>"), 
                            a += "</table>") : !e.result && e.source && (a += "<table><tr class='test-source'><th>Source: </th><td><pre>" + Je(e.source) + "</pre></td></tr></table>"), 
                            t = u.getElementsByTagName("ol")[0], n = x.createElement("li"), n.className = e.result ? "pass" : "fail", 
                            n.innerHTML = a, t.appendChild(n));
                        }), $t.testDone(function(t) {
                            var n, a, d, u, _, l, m, c, h, f, M = o("qunit-tests");
                            if (M) {
                                d = o("qunit-test-output-" + t.testId), i(d, "running"), _ = t.failed > 0 ? "failed" : t.todo ? "todo" : t.skipped ? "skipped" : "passed", 
                                u = d.getElementsByTagName("ol")[0], l = t.passed, m = t.failed;
                                var p = t.failed > 0 ? t.todo : !t.todo;
                                if (p ? s(u, "qunit-collapsed") : H.collapse && (E ? s(u, "qunit-collapsed") : E = !0), 
                                n = d.firstChild, c = m ? "<b class='failed'>" + m + "</b>, <b class='passed'>" + l + "</b>, " : "", 
                                n.innerHTML += " <b class='counts'>(" + c + t.assertions.length + ")</b>", t.skipped) Xt.skippedTests++, 
                                d.className = "skipped", h = x.createElement("em"), h.className = "qunit-skipped-label", 
                                h.innerHTML = "skipped", d.insertBefore(h, n); else {
                                    if (e(n, "click", function() {
                                        r(u, "qunit-collapsed");
                                    }), d.className = p ? "pass" : "fail", t.todo) {
                                        var y = x.createElement("em");
                                        y.className = "qunit-todo-label", y.innerHTML = "todo", d.className += " todo", 
                                        d.insertBefore(y, n);
                                    }
                                    a = x.createElement("span"), a.className = "runtime", a.innerHTML = t.runtime + " ms", 
                                    d.insertBefore(a, u), p ? t.todo ? Xt.todoTests++ : Xt.passedTests++ : Xt.failedTests++;
                                }
                                t.source && (f = x.createElement("p"), f.innerHTML = "<strong>Source: </strong>" + t.source, 
                                s(f, "qunit-source"), p && s(f, "qunit-collapsed"), e(n, "click", function() {
                                    r(f, "qunit-collapsed");
                                }), d.appendChild(f)), H.hidepassed && "passed" === _ && (j.push(d), M.removeChild(d));
                            }
                        });
                        var A = function(e) {
                            return !(e && e.version && e.version.major > 0);
                        }(qe.phantom);
                        A && "complete" === x.readyState ? $t.load() : e(qe, "load", $t.load);
                        var F = qe.onerror;
                        qe.onerror = function(e, t, n, a, s) {
                            var r = !1;
                            if (F) {
                                for (var i = arguments.length, o = Array(i > 5 ? i - 5 : 0), d = 5; d < i; d++) o[d - 5] = arguments[d];
                                r = F.call.apply(F, [ this, e, t, n, a, s ].concat(o));
                            }
                            if (r !== !0) {
                                var u = {
                                    message: e,
                                    fileName: t,
                                    lineNumber: n
                                };
                                s && s.stack && (u.stacktrace = ue(s, 0)), r = $t.onError(u);
                            }
                            return r;
                        }, qe.addEventListener("unhandledrejection", function(e) {
                            $t.onUnhandledRejection(e.reason);
                        });
                    }
                }(), $t.diff = function() {
                    function e() {}
                    var t = -1, n = 1, a = 0;
                    return e.prototype.DiffMain = function(e, t, n) {
                        var s, r, i, o, d, u;
                        if (s = new Date().getTime() + 1e3, null === e || null === t) throw new Error("Null input. (DiffMain)");
                        return e === t ? e ? [ [ a, e ] ] : [] : ("undefined" == typeof n && (n = !0), r = n, 
                        i = this.diffCommonPrefix(e, t), o = e.substring(0, i), e = e.substring(i), t = t.substring(i), 
                        i = this.diffCommonSuffix(e, t), d = e.substring(e.length - i), e = e.substring(0, e.length - i), 
                        t = t.substring(0, t.length - i), u = this.diffCompute(e, t, r, s), o && u.unshift([ a, o ]), 
                        d && u.push([ a, d ]), this.diffCleanupMerge(u), u);
                    }, e.prototype.diffCleanupEfficiency = function(e) {
                        var s, r, i, o, d, u, _, l, m;
                        for (s = !1, r = [], i = 0, o = null, d = 0, u = !1, _ = !1, l = !1, m = !1; d < e.length; ) e[d][0] === a ? (e[d][1].length < 4 && (l || m) ? (r[i++] = d, 
                        u = l, _ = m, o = e[d][1]) : (i = 0, o = null), l = m = !1) : (e[d][0] === t ? m = !0 : l = !0, 
                        o && (u && _ && l && m || o.length < 2 && u + _ + l + m === 3) && (e.splice(r[i - 1], 0, [ t, o ]), 
                        e[r[i - 1] + 1][0] = n, i--, o = null, u && _ ? (l = m = !0, i = 0) : (i--, d = i > 0 ? r[i - 1] : -1, 
                        l = m = !1), s = !0)), d++;
                        s && this.diffCleanupMerge(e);
                    }, e.prototype.diffPrettyHtml = function(e) {
                        var s, r, i, o = [];
                        for (i = 0; i < e.length; i++) switch (s = e[i][0], r = e[i][1], s) {
                          case n:
                            o[i] = "<ins>" + Je(r) + "</ins>";
                            break;

                          case t:
                            o[i] = "<del>" + Je(r) + "</del>";
                            break;

                          case a:
                            o[i] = "<span>" + Je(r) + "</span>";
                        }
                        return o.join("");
                    }, e.prototype.diffCommonPrefix = function(e, t) {
                        var n, a, s, r;
                        if (!e || !t || e.charAt(0) !== t.charAt(0)) return 0;
                        for (s = 0, a = Math.min(e.length, t.length), n = a, r = 0; s < n; ) e.substring(r, n) === t.substring(r, n) ? (s = n, 
                        r = s) : a = n, n = Math.floor((a - s) / 2 + s);
                        return n;
                    }, e.prototype.diffCommonSuffix = function(e, t) {
                        var n, a, s, r;
                        if (!e || !t || e.charAt(e.length - 1) !== t.charAt(t.length - 1)) return 0;
                        for (s = 0, a = Math.min(e.length, t.length), n = a, r = 0; s < n; ) e.substring(e.length - n, e.length - r) === t.substring(t.length - n, t.length - r) ? (s = n, 
                        r = s) : a = n, n = Math.floor((a - s) / 2 + s);
                        return n;
                    }, e.prototype.diffCompute = function(e, s, r, i) {
                        var o, d, u, _, l, m, c, h, f, M, p, y;
                        return e ? s ? (d = e.length > s.length ? e : s, u = e.length > s.length ? s : e, 
                        _ = d.indexOf(u), _ !== -1 ? (o = [ [ n, d.substring(0, _) ], [ a, u ], [ n, d.substring(_ + u.length) ] ], 
                        e.length > s.length && (o[0][0] = o[2][0] = t), o) : 1 === u.length ? [ [ t, e ], [ n, s ] ] : (l = this.diffHalfMatch(e, s), 
                        l ? (m = l[0], h = l[1], c = l[2], f = l[3], M = l[4], p = this.DiffMain(m, c, r, i), 
                        y = this.DiffMain(h, f, r, i), p.concat([ [ a, M ] ], y)) : r && e.length > 100 && s.length > 100 ? this.diffLineMode(e, s, i) : this.diffBisect(e, s, i))) : [ [ t, e ] ] : [ [ n, s ] ];
                    }, e.prototype.diffHalfMatch = function(e, t) {
                        function n(e, t, n) {
                            var a, s, i, o, d, u, _, l, m;
                            for (a = e.substring(n, n + Math.floor(e.length / 4)), s = -1, i = ""; (s = t.indexOf(a, s + 1)) !== -1; ) o = r.diffCommonPrefix(e.substring(n), t.substring(s)), 
                            d = r.diffCommonSuffix(e.substring(0, n), t.substring(0, s)), i.length < d + o && (i = t.substring(s - d, s) + t.substring(s, s + o), 
                            u = e.substring(0, n - d), _ = e.substring(n + o), l = t.substring(0, s - d), m = t.substring(s + o));
                            return 2 * i.length >= e.length ? [ u, _, l, m, i ] : null;
                        }
                        var a, s, r, i, o, d, u, _, l, m, c;
                        return a = e.length > t.length ? e : t, s = e.length > t.length ? t : e, a.length < 4 || 2 * s.length < a.length ? null : (r = this, 
                        l = n(a, s, Math.ceil(a.length / 4)), m = n(a, s, Math.ceil(a.length / 2)), l || m ? (c = m ? l && l[4].length > m[4].length ? l : m : l, 
                        e.length > t.length ? (i = c[0], u = c[1], d = c[2], o = c[3]) : (d = c[0], o = c[1], 
                        i = c[2], u = c[3]), _ = c[4], [ i, u, d, o, _ ]) : null);
                    }, e.prototype.diffLineMode = function(e, s, r) {
                        var i, o, d, u, _, l, m, c, h;
                        for (i = this.diffLinesToChars(e, s), e = i.chars1, s = i.chars2, d = i.lineArray, 
                        o = this.DiffMain(e, s, !1, r), this.diffCharsToLines(o, d), this.diffCleanupSemantic(o), 
                        o.push([ a, "" ]), u = 0, l = 0, _ = 0, c = "", m = ""; u < o.length; ) {
                            switch (o[u][0]) {
                              case n:
                                _++, m += o[u][1];
                                break;

                              case t:
                                l++, c += o[u][1];
                                break;

                              case a:
                                if (l >= 1 && _ >= 1) {
                                    for (o.splice(u - l - _, l + _), u = u - l - _, i = this.DiffMain(c, m, !1, r), 
                                    h = i.length - 1; h >= 0; h--) o.splice(u, 0, i[h]);
                                    u += i.length;
                                }
                                _ = 0, l = 0, c = "", m = "";
                            }
                            u++;
                        }
                        return o.pop(), o;
                    }, e.prototype.diffBisect = function(e, a, s) {
                        var r, i, o, d, u, _, l, m, c, h, f, M, p, y, L, Y, k, g, v, D, T, w, b;
                        for (r = e.length, i = a.length, o = Math.ceil((r + i) / 2), d = o, u = 2 * o, _ = new Array(u), 
                        l = new Array(u), m = 0; m < u; m++) _[m] = -1, l[m] = -1;
                        for (_[d + 1] = 0, l[d + 1] = 0, c = r - i, h = c % 2 !== 0, f = 0, M = 0, p = 0, 
                        y = 0, T = 0; T < o && !(new Date().getTime() > s); T++) {
                            for (w = -T + f; w <= T - M; w += 2) {
                                for (Y = d + w, k = w === -T || w !== T && _[Y - 1] < _[Y + 1] ? _[Y + 1] : _[Y - 1] + 1, 
                                v = k - w; k < r && v < i && e.charAt(k) === a.charAt(v); ) k++, v++;
                                if (_[Y] = k, k > r) M += 2; else if (v > i) f += 2; else if (h && (L = d + c - w, 
                                L >= 0 && L < u && l[L] !== -1 && (g = r - l[L], k >= g))) return this.diffBisectSplit(e, a, k, v, s);
                            }
                            for (b = -T + p; b <= T - y; b += 2) {
                                for (L = d + b, g = b === -T || b !== T && l[L - 1] < l[L + 1] ? l[L + 1] : l[L - 1] + 1, 
                                D = g - b; g < r && D < i && e.charAt(r - g - 1) === a.charAt(i - D - 1); ) g++, 
                                D++;
                                if (l[L] = g, g > r) y += 2; else if (D > i) p += 2; else if (!h && (Y = d + c - b, 
                                Y >= 0 && Y < u && _[Y] !== -1 && (k = _[Y], v = d + k - Y, g = r - g, k >= g))) return this.diffBisectSplit(e, a, k, v, s);
                            }
                        }
                        return [ [ t, e ], [ n, a ] ];
                    }, e.prototype.diffBisectSplit = function(e, t, n, a, s) {
                        var r, i, o, d, u, _;
                        return r = e.substring(0, n), o = t.substring(0, a), i = e.substring(n), d = t.substring(a), 
                        u = this.DiffMain(r, o, !1, s), _ = this.DiffMain(i, d, !1, s), u.concat(_);
                    }, e.prototype.diffCleanupSemantic = function(e) {
                        var s, r, i, o, d, u, _, l, m, c, h, f, M;
                        for (s = !1, r = [], i = 0, o = null, d = 0, l = 0, m = 0, u = 0, _ = 0; d < e.length; ) e[d][0] === a ? (r[i++] = d, 
                        l = u, m = _, u = 0, _ = 0, o = e[d][1]) : (e[d][0] === n ? u += e[d][1].length : _ += e[d][1].length, 
                        o && o.length <= Math.max(l, m) && o.length <= Math.max(u, _) && (e.splice(r[i - 1], 0, [ t, o ]), 
                        e[r[i - 1] + 1][0] = n, i--, i--, d = i > 0 ? r[i - 1] : -1, l = 0, m = 0, u = 0, 
                        _ = 0, o = null, s = !0)), d++;
                        for (s && this.diffCleanupMerge(e), d = 1; d < e.length; ) e[d - 1][0] === t && e[d][0] === n && (c = e[d - 1][1], 
                        h = e[d][1], f = this.diffCommonOverlap(c, h), M = this.diffCommonOverlap(h, c), 
                        f >= M ? (f >= c.length / 2 || f >= h.length / 2) && (e.splice(d, 0, [ a, h.substring(0, f) ]), 
                        e[d - 1][1] = c.substring(0, c.length - f), e[d + 1][1] = h.substring(f), d++) : (M >= c.length / 2 || M >= h.length / 2) && (e.splice(d, 0, [ a, c.substring(0, M) ]), 
                        e[d - 1][0] = n, e[d - 1][1] = h.substring(0, h.length - M), e[d + 1][0] = t, e[d + 1][1] = c.substring(M), 
                        d++), d++), d++;
                    }, e.prototype.diffCommonOverlap = function(e, t) {
                        var n, a, s, r, i, o, d;
                        if (n = e.length, a = t.length, 0 === n || 0 === a) return 0;
                        if (n > a ? e = e.substring(n - a) : n < a && (t = t.substring(0, n)), s = Math.min(n, a), 
                        e === t) return s;
                        for (r = 0, i = 1; ;) {
                            if (o = e.substring(s - i), d = t.indexOf(o), d === -1) return r;
                            i += d, 0 !== d && e.substring(s - i) !== t.substring(0, i) || (r = i, i++);
                        }
                    }, e.prototype.diffLinesToChars = function(e, t) {
                        function n(e) {
                            var t, n, r, i, o;
                            for (t = "", n = 0, r = -1, i = a.length; r < e.length - 1; ) {
                                r = e.indexOf("\n", n), r === -1 && (r = e.length - 1), o = e.substring(n, r + 1), 
                                n = r + 1;
                                var d = s.hasOwnProperty ? s.hasOwnProperty(o) : void 0 !== s[o];
                                d ? t += String.fromCharCode(s[o]) : (t += String.fromCharCode(i), s[o] = i, a[i++] = o);
                            }
                            return t;
                        }
                        var a, s, r, i;
                        return a = [], s = {}, a[0] = "", r = n(e), i = n(t), {
                            chars1: r,
                            chars2: i,
                            lineArray: a
                        };
                    }, e.prototype.diffCharsToLines = function(e, t) {
                        var n, a, s, r;
                        for (n = 0; n < e.length; n++) {
                            for (a = e[n][1], s = [], r = 0; r < a.length; r++) s[r] = t[a.charCodeAt(r)];
                            e[n][1] = s.join("");
                        }
                    }, e.prototype.diffCleanupMerge = function(e) {
                        var s, r, i, o, d, u, _, l, m;
                        for (e.push([ a, "" ]), s = 0, r = 0, i = 0, d = "", o = ""; s < e.length; ) switch (e[s][0]) {
                          case n:
                            i++, o += e[s][1], s++;
                            break;

                          case t:
                            r++, d += e[s][1], s++;
                            break;

                          case a:
                            r + i > 1 ? (0 !== r && 0 !== i && (u = this.diffCommonPrefix(o, d), 0 !== u && (s - r - i > 0 && e[s - r - i - 1][0] === a ? e[s - r - i - 1][1] += o.substring(0, u) : (e.splice(0, 0, [ a, o.substring(0, u) ]), 
                            s++), o = o.substring(u), d = d.substring(u)), u = this.diffCommonSuffix(o, d), 
                            0 !== u && (e[s][1] = o.substring(o.length - u) + e[s][1], o = o.substring(0, o.length - u), 
                            d = d.substring(0, d.length - u))), 0 === r ? e.splice(s - i, r + i, [ n, o ]) : 0 === i ? e.splice(s - r, r + i, [ t, d ]) : e.splice(s - r - i, r + i, [ t, d ], [ n, o ]), 
                            s = s - r - i + (r ? 1 : 0) + (i ? 1 : 0) + 1) : 0 !== s && e[s - 1][0] === a ? (e[s - 1][1] += e[s][1], 
                            e.splice(s, 1)) : s++, i = 0, r = 0, d = "", o = "";
                        }
                        for ("" === e[e.length - 1][1] && e.pop(), _ = !1, s = 1; s < e.length - 1; ) e[s - 1][0] === a && e[s + 1][0] === a && (l = e[s][1], 
                        m = l.substring(l.length - e[s - 1][1].length), m === e[s - 1][1] ? (e[s][1] = e[s - 1][1] + e[s][1].substring(0, e[s][1].length - e[s - 1][1].length), 
                        e[s + 1][1] = e[s - 1][1] + e[s + 1][1], e.splice(s - 1, 1), _ = !0) : l.substring(0, e[s + 1][1].length) === e[s + 1][1] && (e[s - 1][1] += e[s + 1][1], 
                        e[s][1] = e[s][1].substring(e[s + 1][1].length) + e[s + 1][1], e.splice(s + 1, 1), 
                        _ = !0)), s++;
                        _ && this.diffCleanupMerge(e);
                    }, function(t, n) {
                        var a, s, r;
                        return a = new e(), s = a.DiffMain(t, n), a.diffCleanupEfficiency(s), r = a.diffPrettyHtml(s);
                    };
                }();
            }(function() {
                return this;
            }());
        }).call(t, n(573), function() {
            return this;
        }(), n(9)(e));
    },
    1100: function(e, t, n) {
        var a, s;
        !function(r, i) {
            "use strict";
            a = i, s = "function" == typeof a ? a.call(t, n, t, e) : a, !(void 0 !== s && (e.exports = s));
        }(this, function() {
            "use strict";
            function e(e, t) {
                var n;
                for (n in t) t.hasOwnProperty(n) && ("undefined" == typeof t[n] ? delete e[n] : e[n] = t[n]);
                return e;
            }
            function t(e, t) {
                var n;
                for (n = 0; n < e.length; n += 1) if (e[n] === t) return n;
                return -1;
            }
            function n(e, n) {
                var a = t(e, n);
                return a !== -1 ? e.splice(a, 1) : [];
            }
            function a(e) {
                return "undefined" != typeof e && "undefined" != typeof e.requireExpects && e.requireExpects;
            }
            function s(e) {
                return !!e.result;
            }
            function r(e) {
                return !s(e);
            }
            function i(e) {
                return r(e) && "undefined" == typeof e.expected && "undefined" == typeof e.actual;
            }
            function o(e) {
                return e.replace(/(\r?\n)/g, "$&# ");
            }
            function d(e) {
                return e.replace(/^\s+/, "");
            }
            function u(e) {
                return e;
            }
            function _(e, t, n, a) {
                e.push(t + ": " + a(n));
            }
            function l(e, t, n, a, s) {
                e && "undefined" != typeof a && _(t, n, a, s);
            }
            function m(e, t) {
                return t ? e + " - " + o(t) : e;
            }
            function c(c, p, y) {
                function L(e) {
                    return T.config[e];
                }
                function Y(e) {
                    if (s(e)) return e.message;
                    var t = [];
                    return e.message && t.push(e.message), L("showExpectationOnFailure") && !i(e) && (_(t, "expected", e.expected, H), 
                    _(t, "got", e.actual, H)), l(L("showTestNameOnFailure"), t, "test", e.name, u), 
                    l(L("showModuleNameOnFailure"), t, "module", e.module, u), l(L("showSourceOnFailure"), t, "source", e.source, d), 
                    t.join(", ");
                }
                function k(e) {
                    T.puts(T.config.initialCount + ".." + e);
                }
                function g(e) {
                    var a;
                    t(b, e) !== -1 && (a = D.config[e], "undefined" != typeof a && n(a, S[e]));
                }
                function v(e) {
                    var t;
                    for (t = 0; t < e.length; t += 1) g(e[t]);
                }
                if (!c) throw new Error('should pass QUnit object reference. Please check QUnit\'s "require" path if you are using Node.js (or any CommonJS env).');
                if ("function" != typeof p) throw new Error("should pass print-like function");
                var D = c, T = {}, w = function(e, t) {
                    y && "object" == typeof y && "undefined" != typeof y[e] && (p('# WARNING: Option "' + e + '" is deprecated and will be removed in future version.'), 
                    t(y[e]));
                }, b = [ "moduleStart", "testStart", "log", "testDone", "done" ], S = {}, H = function() {
                    return "undefined" != typeof D.dump && "function" == typeof D.dump.parse ? function(e) {
                        return D.dump.parse(e);
                    } : "undefined" != typeof D.jsDump && "function" == typeof D.jsDump.parse ? function(e) {
                        return D.jsDump.parse(e);
                    } : u;
                }();
                return T.config = e({
                    initialCount: 1,
                    showModuleNameOnFailure: !0,
                    showTestNameOnFailure: !0,
                    showExpectationOnFailure: !0,
                    showSourceOnFailure: !0
                }, y), w("noPlan", function(e) {
                    p('# Now QUnit-TAP works as with "noPlan: true" by default. If you want to delare plan explicitly, please use "QUnit.config.requireExpects" option instead.'), 
                    T.config.noPlan = e;
                }), w("count", function(e) {
                    T.config.initialCount = e + 1;
                }), w("showDetailsOnFailure", function(e) {
                    T.config.showModuleNameOnFailure = e, T.config.showTestNameOnFailure = e, T.config.showExpectationOnFailure = e, 
                    T.config.showSourceOnFailure = e;
                }), T.VERSION = h, T.puts = p, T.count = T.config.initialCount - 1, T.expectedCount = T.config.initialCount - 1, 
                T.explain = H, T.note = function(e) {
                    T.puts(o("# " + e));
                }, T.diag = function(e) {
                    return T.note(e), !1;
                }, T.moduleStart = function(e) {
                    var t = "string" == typeof e ? e : e.name;
                    T.note("module: " + t);
                }, T.testStart = function(e) {
                    var t = "string" == typeof e ? e : e.name;
                    T.note("test: " + t);
                }, T.log = function(e) {
                    var t = "";
                    T.count += 1, r(e) && (t += "not "), t += "ok " + T.count, T.puts(m(t, Y(e)));
                }, T.testDone = function() {
                    a(D.config) && (T.expectedCount += D.config.current.expected);
                }, T.done = function() {
                    ("undefined" == typeof T.config.noPlan || T.config.noPlan) && k(a(D.config) ? T.expectedCount : T.count);
                }, T.unsubscribe = function() {
                    "undefined" != typeof D.config && v(0 === arguments.length ? b : f.apply(arguments));
                }, function() {
                    var e, t, n, a = M(D);
                    for (t = 0; t < b.length; t += 1) e = b[t], n = a(D, T, e), S[e] = n;
                }(), T;
            }
            var h = "1.5.1", f = Array.prototype.slice, M = function(e) {
                return function(e, t, n) {
                    var a = e[n], s = function() {
                        t[n].apply(t, f.apply(arguments));
                    };
                    return a(s), s;
                };
            };
            return c.qunitTap = function() {
                throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require("qunit-tap") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');
            }, c;
        });
    },
    1101: function(e, t) {
        "use strict";
        var n = !1;
        QUnit.config.autostart = !1;
        var a = window.onerror;
        window.onerror = null, QUnit.begin(function() {
            window.onerror = function(e, t, n) {
                var s = !1;
                return a && (s = a(e, t, n)), QUnit.config.current && QUnit.config.current.async && QUnit.start(), 
                s;
            };
        }), QUnit.moduleStart(function() {
            n = !0;
        }), QUnit.done(function() {
            window.setTimeout(function() {
                console.log("cockpittest-tap-done");
            }, 0), window.onerror = null;
        });
        var s = /^((not )?ok [0-9]+ (- )?)(.*)$/;
        qunitTap(QUnit, function() {
            if (1 == arguments.length && QUnit.config.current) {
                var e = s.exec(arguments[0]);
                if (e) return void console.log(e[1] + QUnit.config.current.testName + ": " + e[4]);
            }
            console.log.apply(console, arguments);
        }), window.setTimeout(function() {
            n || (console.log("QUnit not started by test"), console.log("cockpittest-tap-error"));
        }, 2e4), window.tests_included = !0;
    },
    1102: function(e, t) {}
});
//# sourceMappingURL=test-util.min.js.map