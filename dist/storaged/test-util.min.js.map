{"version":3,"sources":["webpack:///storaged/test-util.min.js","webpack:///webpack/bootstrap 464edd447d94e2beb357?1a16","webpack:///../pkg/storaged/test-util.js","webpack:///external \"jQuery\"?0cb8","webpack:///external \"cockpit\"?478e","webpack:///../pkg/storaged/utils.js?e77e","webpack:///../pkg/lib/mustache.js?4126","webpack:///../~/mustache/mustache.js?0da5","webpack:///../pkg/lib/service.js?56c1","webpack:///../pkg/lib/qunit-tests.js","webpack:///../~/qunitjs/qunit/qunit.js","webpack:///../~/process/browser.js","webpack:///../~/webpack/buildin/module.js","webpack:///../~/qunit-tap/lib/qunit-tap.js","webpack:///../pkg/lib/qunit-config.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","0","utils","QUnit","assert","test","checks","expect","length","i","strictEqual","format_delay","sign","n","compare_versions","orig_hostnamed","hostnamed","StaticHostname","undefined","mdraid_name","Name","wait","start","6","jQuery","7","cockpit","9","get_children","client","path","children","blocks_cleartext","push","blocks_ptable","blocks_partitions","forEach","part","IsContainer","blocks_part","ptable_path","Table","IsContained","vgroups","vgroups_lvols","lvol","lvols_block","sync","output","input","depth","na","nb","a","b","attrs","attr","seen","nodeType","nodeName","parentNode","replaceChild","removeChild","nodeValue","attributes","name","value","setAttribute","removeAttribute","firstChild","nextSibling","appendChild","$","mustache","service","_","gettext","C_","to_ints","str","split","map","s","parseInt","a_ints","b_ints","len","Math","min","dbus","proxy","array_find","array","pred","flatten","array_of_arrays","Array","prototype","concat","apply","decode_filename","encoded","utf8_decoder","decode","base64_decode","slice","encode_filename","decoded","base64_encode","utf8_encoder","encode","fmt_size","bytes","format_bytes","fmt_size_long","with_binary_unit","with_decimal_unit","fmt_rate","bytes_per_sec","format_bytes_per_sec","format_temperature","kelvin","celcius","fahrenheit","toFixed","format_fsys_usage","used","total","text","units","parts","join","d","seconds","round","minutes","floor","hours","format_size_and_text","size","format","desc","validate_lvm2_name","match","search","block_name","block","PreferredDevice","mdraid","host","lvol_name","type","Type","ThinPool","Origin","render","drive_name","drive","name_parts","Vendor","Model","Serial","WWN","get_block_link_target","fmt_part","link","is_lvol","is_crypt","is_part","blocks_crypto","blocks","CryptoBackingDevice","blocks_lvm2","lvols","LogicalVolume","target","mdraids","MDRaid","UUID","VolumeGroup","replace","drives","Drive","html","get_partitions","process_level","level","container_start","container_size","append_free_space","result","is_container","is_contained","last_end","total_end","partitions","Offset","Size","get_available_spaces","is_free","has_fs_label","IdUsage","IdType","block_pvol","is_mpath_member","drives_block","members","drives_multipath_blocks","block_ptable","block_part","blocks_pvol","HintIgnore","make","add_free_spaces","spaces","Object","keys","filter","sort","make_block_path_cmp","available_space_to_option","spc","Title","Label","prepare_available_spaces","spcs","prepare","resolve","CreatePartition","all","block_cmp","DeviceNumber","path_a","path_b","multipathd_service","get_multipathd_service","init_arming_zones","$top","on","was_active","this","hasClass","toggleClass","parents","reset_arming_zone","$btn","$zone","$arm_btn","find","removeClass","get_active_usage","get_usage","fsys","blocks_fsys","MDRaidMember","pvol","vgroup","usage","MountPoints","res","raw","Teardown","Mounts","MDRaidMembers","PhysicalVolumes","Blocking","use","entry","active_state","MountPoint","ActiveDevices","as","VGroup","FreeSize","HasMounts","HasMDRaidMembers","HasPhysicalVolumes","teardown_active_usage","unmount","mounteds","Unmount","mdraid_remove","RemoveDevice","wipe","t","v","pvol_remove","pvols","handle_vg","vg","pvs","by_vgroup","vgroups_pvols","Delete","tear-down","pv","fn","amend","data","options","each","el","hide","selector","element","document","querySelector","show_soon","ready","hasAttribute","val","getAttribute","window","clearTimeout","setTimeout","String","10","translate","template","cache","div","createElement","innerHTML","extend","view","partials","to_html","send","clearCache","11","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","testRegExp","re","string","RegExp_test","isWhitespace","nonSpaceRe","isFunction","object","escapeRegExp","escapeHtml","entityMap","escapeTags","tags","isArray","Error","RegExp","parseTemplate","stripSpace","hasTag","nonSpace","tokens","pop","spaceRe","chr","token","openSection","tagRes","scanner","Scanner","sections","eos","pos","scanUntil","charAt","scan","tagRe","whiteRe","equalsRe","curlyRe","nestTokens","squashTokens","lastToken","squashedTokens","section","nestedTokens","collector","tail","Context","parentContext",".","parent","Writer","Object_toString","toString","&","<",">","\"","'","/","index","substring","lookup","context","indexOf","names","parse","renderTokens","originalTemplate","subRender","self","buffer","j","jlen","escape","version","defaultWriter","12","wait_valid","callback","valid","with_systemd_manager","done","systemd_manager","systemd_client","superuser","Subscribe","fail","error","console","warn","update_from_unit","exists","unit","LoadState","ActiveState","state","UnitFileState","enabled","dispatchEvent","wait_callbacks","update_from_service","refresh","refresh_interface","iface","log","props","ifaces","notify","on_job_new_removed_refresh","event","number","unit_id","promise","then","call_manager","method","args","call_manager_with_job","dfd","defer","results","pending_jobs","reject","call_manager_with_reload","stop","restart","tryRestart","enable","disable","event_target","LoadUnit","addEventListener","reloading","49","qunitTap","50","process","global","diff","splice","inArray","elem","objectValues","obj","key","vals","is","hasOwn","undefOnly","prop","objectType","isNaN","toLowerCase","extractStacktrace","e","offset","stack","include","shift","fileName","sourceURL","line","sourceFromStacktrace","err","registerLoggingCallbacks","registerLoggingCallback","loggingCallback","config","callbacks","loggingCallbacks","l","callbackNames","runLoggingCallbacks","verifyLoggingCallbacks","userCallback","begin","modulesLog","started","now","tests","totalTests","Test","count","blocking","last","next","queue","defined","updateRate","current","usedAsync","pauseProcessing","testTimeout","timeout","semaphore","pushFailure","resumeProcessing","runStarted","runtime","passed","autorun","previousModule","failed","moduleStats","bad","stats","setHook","hookName","testEnvironment","settings","assertions","currentModule","testName","testId","generateHash","skip","async","expected","Assert","hex","hash","charCodeAt","synchronize","priority","seed","priorityCount","unitSampler","unitSamplerGenerator","sample","saveGlobal","pollution","noglobals","checkPollution","newGlobals","deletedGlobals","old","asyncTest","arguments","focused","newTest","only","testContext","errorString","message","resultErrorString","Date","getTime","sessionStorage","x","setItem","removeItem","globalStartCalled","hasOwnProperty","reorder","altertitle","collapse","scrolltop","maxDepth","requireExpects","urlConfig","moduleStack","onErrorFnPrev","onerror","filePath","linerNr","ret","ignoreGlobalErrors","validTest","isLocal","location","protocol","executeNow","createModule","parentModule","moduleName","env","beforeEach","afterEach","setCurrentModule","moduleFns","setup","teardown","globalStartAlreadyCalled","autostart","pageLoaded","load","before","run","runTest","resolvePromise","callbackStarted","notrycatch","after","queueHook","hook","callHook","hooks","handler","processHooks","finish","skipped","source","duration","reset","reverse","getItem","pushResult","resultInfo","details","actual","negative","phase","moduleChainNameMatch","testModule","testModuleName","moduleChainIdMatch","regexFilter","exec","fullName","stringFilter","exclude","pattern","flags","regex","fixture","getElementById","currentTest","asserts","popped","acceptCallCount","currentAssert","ok","dump","notOk","equal","notEqual","propEqual","equiv","notPropEqual","deepEqual","notDeepEqual","notStrictEqual","throws","expectedType","expectedOutput","constructor","raises","useStrictEquality","valueOf","compareConstructors","protoA","getProto","protoB","getRegExpFlags","regexp","typeEquiv","innerEquiv","callers","parentsB","getPrototypeOf","__proto__","boolean","null","symbol","date","nan","function","caller","loop","aCircular","bCircular","set","innerEq","outerEq","aVal","bVal","aKey","bKey","eq","aProperties","bProperties","quote","literal","o","pre","arr","post","separator","base","indent","inner","up","down","reName","objType","parser","parserType","inStack","typeOf","parsers","setInterval","item","multiline","HTML","extra","indentChar","setParser","unknown","nodelist","nonEnumerableProperties","node","open","close","tag","functionArgs","fromCharCode","functionCode","attribute","jsDump","applyCurrent","getUrlParams","param","urlParams","params","decodeURIComponent","escapeText","addEvent","attachEvent","srcElement","addEvents","elems","className","addClass","force","trim","getUrlConfigHtml","escaped","escapedTooltip","selection","urlConfigHtml","label","tooltip","toolbarChanged","updatedUrl","field","selectedIndex","checked","defaultValue","setUrl","history","replaceState","arrValue","querystring","encodeURIComponent","pathname","applyUrlParams","selectedModule","modulesList","toolbarUrlConfigContainer","urlConfigContainer","getElementsByTagName","toolbarLooseFilter","button","ev","preventDefault","toolbarModuleFilterHtml","moduleFilterHtml","toolbarModuleFilter","toolbar","moduleFilter","lastChild","appendToolbar","appendHeader","header","unfilteredUrl","appendBanner","banner","appendTestResults","insertBefore","storeFixture","appendFilteredTest","appendUserAgent","userAgent","createTextNode","navigator","appendInterface","qunit","title","appendTestsList","z","moduleObj","appendTest","rerunTrigger","testBlock","assertList","getNameHtml","href","nameHtml","stripHtml","random","option","init","collapseNext","localeCompare","hidepassed","scrollTo","testStart","running","assertLi","showDiff","testItem","testDone","testTitle","time","good","testCounts","sourceName","notPhantom","major","phantom","readyState","DiffMatchPatch","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","DiffMain","text1","text2","optChecklines","deadline","checklines","commonlength","commonprefix","commonsuffix","diffs","diffCommonPrefix","diffCommonSuffix","diffCompute","unshift","diffCleanupMerge","diffCleanupEfficiency","changes","equalities","equalitiesLength","lastequality","pointer","preIns","preDel","postIns","postDel","diffPrettyHtml","op","pointermid","pointermax","pointermin","pointerstart","pointerend","longtext","shorttext","hm","text1A","text2A","text1B","text2B","midCommon","diffsA","diffsB","diffHalfMatch","diffLineMode","diffBisect","diffHalfMatchI","bestCommon","prefixLength","suffixLength","bestLongtextA","bestLongtextB","bestShorttextA","bestShorttextB","dmp","hm1","hm2","ceil","linearray","countInsert","countDelete","textInsert","textDelete","diffLinesToChars","chars1","chars2","lineArray","diffCharsToLines","diffCleanupSemantic","text1Length","text2Length","maxD","vOffset","vLength","v1","v2","delta","front","k1start","k1end","k2start","k2end","k2Offset","k1Offset","x1","x2","y1","y2","k1","k2","diffBisectSplit","y","text1a","text1b","text2a","text2b","diffsb","lengthInsertions2","lengthDeletions2","lengthInsertions1","lengthDeletions1","deletion","insertion","overlapLength1","overlapLength2","max","diffCommonOverlap","textLength","best","found","diffLinesToCharsMunge","chars","lineStart","lineEnd","lineArrayLength","lineHash","diffPointer","position","51","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","Item","noop","nextTick","browser","argv","versions","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","52","webpackPolyfill","deprecate","paths","53","ary","removeElement","isPlanRequired","conf","isPassed","isFailed","isAssertOkFailed","escapeLineEndings","ltrim","fieldName","fieldValue","formatter","renderIf","shouldRender","formatTestLine","testLine","rest","qunitObject","printLikeFunction","isEnabled","configName","tap","formatDetails","explain","printPlanLine","toCount","puts","initialCount","unsubscribeEvent","eventName","targetEvents","qu","registeredCallbacks","unsubscribeEvents","eventNames","deprecateOption","optionName","fallback","showModuleNameOnFailure","showTestNameOnFailure","showExpectationOnFailure","showSourceOnFailure","flag","noPlan","VERSION","qunitTapVersion","expectedCount","note","diag","moduleStart","arg","unsubscribe","appendCallback","createCallbackAppenderFor","subject","observer","originalLoggingCallback","54","qunit_started","qunit_onerror","file","tap_regex","tests_included","55"],"mappings":"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","file":"storaged/test-util.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2014 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar utils = __webpack_require__(9);\n\tvar QUnit = __webpack_require__(49);\n\tvar assert = QUnit;\n\t\n\tQUnit.test(\"format_delay\", function() {\n\t    var checks = [\n\t        [ 15550000, \"4 hours, 19 minutes, 10 seconds\" ]\n\t    ];\n\t\n\t    assert.expect(checks.length);\n\t    for (var i = 0; i < checks.length; i++) {\n\t        assert.strictEqual(utils.format_delay(checks[i][0]), checks[i][1],\n\t                           \"format_delay(\" + checks[i][0] + \") = \" + checks[i][1]);\n\t    }\n\t});\n\t\n\tQUnit.test(\"compare_versions\", function() {\n\t    var checks = [\n\t        [ \"\",      \"\",      0 ],\n\t        [ \"0\",     \"0\",     0 ],\n\t        [ \"1\",     \"0\",     1 ],\n\t        [ \"0\",     \"1\",    -1 ],\n\t        [ \"2\",     \"1.9\",   1 ],\n\t        [ \"2.0\",   \"2\",     1 ],\n\t        [ \"2.1.6\", \"2.5\",  -1 ],\n\t        [ \"2..6\",  \"2.0.6\", 0 ],\n\t    ];\n\t\n\t    function sign(n) {\n\t        return (n === 0) ? 0 : (n < 0)? -1 : 1;\n\t    }\n\t\n\t    assert.expect(checks.length);\n\t    for (var i = 0; i < checks.length; i++) {\n\t        assert.strictEqual(sign(utils.compare_versions(checks[i][0], checks[i][1])), checks[i][2],\n\t                           \"compare_versions(\" + checks[i][0] + \", \" + checks[i][1] + \") = \" + checks[i][2]);\n\t    }\n\t});\n\t\n\tQUnit.test(\"mdraid_name_nohostnamed\", function() {\n\t    var orig_hostnamed = utils.hostnamed;\n\t    utils.hostnamed = { StaticHostname: undefined };\n\t    assert.strictEqual(utils.mdraid_name({ \"Name\": \"somehost:mydev\" }), \"mydev\", \"remote host name is skipped when hostnamed is not available\");\n\t    utils.hostnamed = orig_hostnamed;\n\t});\n\t\n\tQUnit.test(\"mdraid_name_remote\", function() {\n\t    var orig_hostnamed = utils.hostnamed;\n\t    utils.hostnamed = { StaticHostname: \"sweethome\" };\n\t    assert.strictEqual(utils.mdraid_name({ \"Name\": \"somehost:mydev\" }), \"mydev (from somehost)\", \"expected name for remote host\");\n\t    utils.hostnamed = orig_hostnamed;\n\t});\n\t\n\tQUnit.test(\"mdraid_name_local\", function() {\n\t    var orig_hostnamed = utils.hostnamed;\n\t    utils.hostnamed = { StaticHostname: \"sweethome\" };\n\t    assert.strictEqual(utils.mdraid_name({ \"Name\": \"sweethome:mydev\" }), \"mydev\", \"expected name for local host\");\n\t    utils.hostnamed = orig_hostnamed;\n\t});\n\t\n\t/* Wait until the hostnamed dbus proxy is actually ready; otherwise the test\n\t * finishes and kills the bridge before it can respond to the dbus channel open\n\t * request for the hostnamed connection, which can cause hangs in\n\t * ./test-server due to timing out that queued request. */\n\tutils.hostnamed.wait(QUnit.start);\n\n\n/***/ },\n\n/***/ 6:\n/***/ function(module, exports) {\n\n\tmodule.exports = jQuery;\n\n/***/ },\n\n/***/ 7:\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n\n/***/ 9:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2015 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var $ = __webpack_require__(6);\n\t    var cockpit = __webpack_require__(7);\n\t\n\t    var mustache = __webpack_require__(10);\n\t    var service = __webpack_require__(12);\n\t\n\t    var _ = cockpit.gettext;\n\t    var C_ = cockpit.gettext;\n\t\n\t    /* UTILITIES\n\t     */\n\t\n\t    var utils = { };\n\t\n\t    utils.compare_versions = function compare_versions(a, b) {\n\t        function to_ints(str) {\n\t            return str.split(\".\").map(function (s) { return s ? parseInt(s, 10) : 0; });\n\t        }\n\t\n\t        var a_ints = to_ints(a);\n\t        var b_ints = to_ints(b);\n\t        var len = Math.min(a_ints.length, b_ints.length);\n\t        var i;\n\t\n\t        for (i = 0; i < len; i++) {\n\t            if (a_ints[i] == b_ints[i])\n\t                continue;\n\t            return a_ints[i] - b_ints[i];\n\t        }\n\t\n\t        return a_ints.length - b_ints.length;\n\t    };\n\t\n\t    utils.hostnamed = cockpit.dbus(\"org.freedesktop.hostname1\").proxy();\n\t\n\t    utils.array_find = function array_find(array, pred) {\n\t        for (var i = 0; i < array.length; i++)\n\t            if (pred(array[i]))\n\t                return array[i];\n\t        return undefined;\n\t    };\n\t\n\t    utils.flatten = function flatten(array_of_arrays) {\n\t        if (array_of_arrays.length > 0)\n\t            return Array.prototype.concat.apply([], array_of_arrays);\n\t        else\n\t            return [ ];\n\t    };\n\t\n\t    utils.decode_filename = function decode_filename(encoded) {\n\t        return cockpit.utf8_decoder().decode(cockpit.base64_decode(encoded).slice(0,-1));\n\t    };\n\t\n\t    utils.encode_filename = function encode_filename(decoded) {\n\t        return cockpit.base64_encode(cockpit.utf8_encoder().encode(decoded).concat([0]));\n\t    };\n\t\n\t    utils.fmt_size = function fmt_size(bytes) {\n\t        return cockpit.format_bytes(bytes, 1024);\n\t    };\n\t\n\t    utils.fmt_size_long = function fmt_size_long(bytes) {\n\t        var with_binary_unit = cockpit.format_bytes(bytes, 1024);\n\t        var with_decimal_unit = cockpit.format_bytes(bytes, 1000);\n\t        /* Translators: Used in \"...\" */\n\t        return with_binary_unit + \", \" + with_decimal_unit + \", \" + bytes + \" \" + C_(\"format-bytes\", \"bytes\");\n\t    };\n\t\n\t    utils.fmt_rate = function fmt_rate(bytes_per_sec) {\n\t        return cockpit.format_bytes_per_sec(bytes_per_sec, 1024);\n\t    };\n\t\n\t    utils.format_temperature = function format_temperature(kelvin) {\n\t        var celcius = kelvin - 273.15;\n\t        var fahrenheit = 9.0 * celcius / 5.0 + 32.0;\n\t        return celcius.toFixed(1) + \"° C / \" + fahrenheit.toFixed(1) + \"° F\";\n\t    };\n\t\n\t    utils.format_fsys_usage = function format_fsys_usage(used, total) {\n\t        var text = \"\";\n\t        var units = 1024;\n\t        var parts = cockpit.format_bytes(total, units, true);\n\t        text = \" / \" + parts.join(\" \");\n\t        units = parts[1];\n\t\n\t        parts = cockpit.format_bytes(used, units, true);\n\t        return parts[0] + text;\n\t    };\n\t\n\t    utils.format_delay = function format_delay(d) {\n\t        var seconds = Math.round(d/1000);\n\t        var minutes = Math.floor(seconds / 60);\n\t        var hours = Math.floor(minutes / 60);\n\t        seconds = seconds - minutes*60;\n\t        minutes = minutes - hours*60;\n\t\n\t        var s = seconds + \" seconds\";\n\t        if (minutes > 0)\n\t            s = minutes + \" minutes, \" + s;\n\t        if (hours > 0)\n\t            s = hours + \" hours, \" + s;\n\t        return s;\n\t    };\n\t\n\t    utils.format_size_and_text = function format_size_and_text(size, text) {\n\t        return cockpit.format(_(\"${size} ${desc}\"), { size: utils.fmt_size(size), desc: text});\n\t    };\n\t\n\t    utils.validate_lvm2_name = function validate_lvm2_name(name) {\n\t        if (name === \"\")\n\t            return _(\"Name cannot be empty.\");\n\t        if (name.length > 127)\n\t            return _(\"Name cannot be longer than 127 characters.\");\n\t        var m = name.match(/[^a-zA-Z0-9+._-]/);\n\t        if (m) {\n\t            if (m[0].search(/\\s+/) === -1)\n\t                return cockpit.format(_(\"Name cannot contain the character '$0'.\"), m[0]);\n\t            else\n\t                    return cockpit.format(_(\"Name cannot contain whitespace.\"), m[0]);\n\t        }\n\t    };\n\t\n\t    utils.block_name = function block_name(block) {\n\t        return utils.decode_filename(block.PreferredDevice);\n\t    };\n\t\n\t    utils.mdraid_name = function mdraid_name(mdraid) {\n\t        if (!mdraid.Name)\n\t            return \"\";\n\t\n\t        var parts = mdraid.Name.split(\":\");\n\t\n\t        if (parts.length != 2)\n\t            return mdraid.Name;\n\t\n\t        /* if we call hostnamed too early, before the dbus.proxy() promise is fulfilled,\n\t         * it will not be valid yet; it's too inconvenient to make this\n\t         * function asynchronous, so just don't show the host name in this case */\n\t        if (utils.hostnamed.StaticHostname === undefined || parts[0] == utils.hostnamed.StaticHostname)\n\t            return parts[1];\n\t        else\n\t            return cockpit.format(_(\"$name (from $host)\"),\n\t                                  { name: parts[1],\n\t                                    host: parts[0]\n\t                                  });\n\t    };\n\t\n\t    utils.lvol_name = function lvol_name(lvol) {\n\t        var type;\n\t        if (lvol.Type == \"pool\")\n\t            type = _(\"Pool for Thin Logical Volumes\");\n\t        else if (lvol.ThinPool != \"/\")\n\t            type =_(\"Thin Logical Volume\");\n\t        else if (lvol.Origin != \"/\")\n\t            type = _(\"Logical Volume (Snapshot)\");\n\t        else\n\t            type = _(\"Logical Volume\");\n\t        return mustache.render('{{Type}} \"{{Name}}\"', { Type: type, Name: lvol.Name });\n\t    };\n\t\n\t    utils.drive_name = function drive_name(drive) {\n\t        var name_parts = [ ];\n\t        if (drive.Vendor)\n\t            name_parts.push(drive.Vendor);\n\t        if (drive.Model)\n\t            name_parts.push(drive.Model);\n\t\n\t        var name = name_parts.join(\" \");\n\t        if (drive.Serial)\n\t            name += \" (\" + drive.Serial + \")\";\n\t        else if (drive.WWN)\n\t            name += \" (\" + drive.WWN + \")\";\n\t\n\t        return name;\n\t    };\n\t\n\t    utils.get_block_link_target = function get_block_link_target(client, path) {\n\t        var is_part, is_crypt, is_lvol;\n\t\n\t        while (true) {\n\t            if (client.blocks_part[path] && client.blocks_ptable[client.blocks_part[path].Table]) {\n\t                is_part = true;\n\t                path = client.blocks_part[path].Table;\n\t            } else if (client.blocks_crypto[path] && client.blocks[client.blocks_crypto[path].CryptoBackingDevice]) {\n\t                is_crypt = true;\n\t                path = client.blocks_crypto[path].CryptoBackingDevice;\n\t            } else\n\t                break;\n\t        }\n\t\n\t        if (client.blocks_lvm2[path] && client.lvols[client.blocks_lvm2[path].LogicalVolume])\n\t            is_lvol = true;\n\t\n\t        function fmt_part(link) {\n\t            // Partitions of logical volumes are shown as just logical volumes.\n\t            if (is_lvol && is_crypt)\n\t                return cockpit.format(_(\"<span>Encrypted Logical Volume of $0</span>\"), link);\n\t            else if (is_part && is_crypt)\n\t                return cockpit.format(_(\"<span>Encrypted Partition of $0</span>\"), link);\n\t            else if (is_lvol)\n\t                return cockpit.format(_(\"<span>Logical Volume of $0</span>\"), link);\n\t            else if (is_part)\n\t                return cockpit.format(_(\"<span>Partition of $0</span>\"), link);\n\t            else if (is_crypt)\n\t                return cockpit.format(_(\"<span>Encrypted $0</span>\"), link);\n\t            else\n\t                return link;\n\t        }\n\t\n\t        var block = client.blocks[path];\n\t        if (!block)\n\t            return;\n\t\n\t        var type, target, name;\n\t        if (client.mdraids[block.MDRaid]) {\n\t            type = \"mdraid\";\n\t            target = client.mdraids[block.MDRaid].UUID;\n\t            name = cockpit.format(_(\"RAID Device $0\"), utils.mdraid_name(client.mdraids[block.MDRaid]));\n\t        } else if (client.blocks_lvm2[path] &&\n\t                   client.lvols[client.blocks_lvm2[path].LogicalVolume] &&\n\t                   client.vgroups[client.lvols[client.blocks_lvm2[path].LogicalVolume].VolumeGroup]) {\n\t            type = \"vgroup\";\n\t            target = client.vgroups[client.lvols[client.blocks_lvm2[path].LogicalVolume].VolumeGroup].Name;\n\t            name = cockpit.format(_(\"Volume Group $0\"), target);\n\t        } else {\n\t            type = \"block\";\n\t            target = utils.block_name(block).replace(/^\\/dev\\//, \"\");\n\t            if (client.drives[block.Drive])\n\t                name = utils.drive_name(client.drives[block.Drive]);\n\t            else\n\t                name = utils.block_name(block);\n\t        }\n\t\n\t        return {\n\t            type: type,\n\t            target: target,\n\t            html: fmt_part(mustache.render('<a data-goto-{{type}}=\"{{target}}\">{{name}}</a>',\n\t                                           { type: type, target: target, name: name }))\n\t        };\n\t    };\n\t\n\t    utils.get_partitions = function get_partitions(client, block) {\n\t        var partitions = client.blocks_partitions[block.path];\n\t\n\t        function process_level(level, container_start, container_size) {\n\t            var n;\n\t            var last_end = container_start;\n\t            var total_end = container_start + container_size;\n\t            var block, start, size, is_container, is_contained;\n\t\n\t            var result = [ ];\n\t\n\t            function append_free_space(start, size) {\n\t                // There is a lot of rounding and aligning going on in\n\t                // the storage stack.  All of udisks2, libblockdev,\n\t                // and libparted seem to contribute their own ideas of\n\t                // where a partition really should start.\n\t                //\n\t                // The start of partitions are aggressively rounded\n\t                // up, sometimes twice, but the end is not aligned in\n\t                // the same way.  This means that a few megabytes of\n\t                // free space will show up between partitions.\n\t                //\n\t                // We hide these small free spaces because they are\n\t                // unexpected and can't be used for anything anyway.\n\t                //\n\t                // \"Small\" is anything less than 3 MiB, which seems to\n\t                // work okay.  (The worst case is probably creating\n\t                // the first logical partition inside a extended\n\t                // partition with udisks+libblockdev.  It leads to a 2\n\t                // MiB gap.)\n\t\n\t                if (size >= 3*1024*1024) {\n\t                    result.push({ type: 'free', start: start, size: size });\n\t                }\n\t            }\n\t\n\t            for (n = 0; n < partitions.length; n++) {\n\t                block = client.blocks[partitions[n].path];\n\t                start = partitions[n].Offset;\n\t                size = partitions[n].Size;\n\t                is_container = partitions[n].IsContainer;\n\t                is_contained = partitions[n].IsContained;\n\t\n\t                if (block === null)\n\t                    continue;\n\t\n\t                if (level === 0 && is_contained)\n\t                    continue;\n\t\n\t                if (level == 1 && !is_contained)\n\t                    continue;\n\t\n\t                if (start < container_start || start+size > container_start+container_size)\n\t                    continue;\n\t\n\t                append_free_space(last_end, start - last_end);\n\t                if (is_container) {\n\t                    result.push({ type: 'container', block: block, size: size,\n\t                                  partitions: process_level(level+1, start, size) });\n\t                } else {\n\t                    result.push({ type: 'block', block: block });\n\t                }\n\t                last_end = start + size;\n\t            }\n\t\n\t            append_free_space(last_end, total_end - last_end);\n\t\n\t            return result;\n\t        }\n\t\n\t        return process_level(0, 0, block.Size);\n\t    };\n\t\n\t    utils.get_available_spaces = function get_available_spaces(client) {\n\t        function is_free(path) {\n\t            var block = client.blocks[path];\n\t            var block_ptable = client.blocks_ptable[path];\n\t            var block_part = client.blocks_part[path];\n\t            var block_pvol = client.blocks_pvol[path];\n\t\n\t            function has_fs_label() {\n\t                if (!block.IdUsage)\n\t                    return false;\n\t                // Devices with a LVM2_member label need to actually be\n\t                // associated with a volume group.\n\t                if (block.IdType == 'LVM2_member' && (!block_pvol || !client.vgroups[block_pvol.VolumeGroup]))\n\t                    return false;\n\t                return true;\n\t            }\n\t\n\t            function is_mpath_member() {\n\t                if (!client.drives[block.Drive])\n\t                    return false;\n\t                if (!client.drives_block[block.Drive]) {\n\t                    // Broken multipath drive\n\t                    return true;\n\t                }\n\t                var members = client.drives_multipath_blocks[block.Drive];\n\t                for (var i = 0; i < members.length; i++) {\n\t                    if (members[i] == block)\n\t                        return true;\n\t                }\n\t                return false;\n\t            }\n\t\n\t            return (!block.HintIgnore &&\n\t                    block.Size > 0 &&\n\t                    !has_fs_label() &&\n\t                    !is_mpath_member() &&\n\t                    !block_ptable &&\n\t                    !(block_part && block_part.IsContainer));\n\t        }\n\t\n\t        function make(path) {\n\t            var block = client.blocks[path];\n\t            var link = utils.get_block_link_target(client, path);\n\t            var text = $('<div>').html(link.html).text();\n\t            return { type: 'block', block: block, size: block.Size, desc: text };\n\t        }\n\t\n\t        var spaces = Object.keys(client.blocks).filter(is_free).sort(utils.make_block_path_cmp(client)).map(make);\n\t\n\t        function add_free_spaces(block) {\n\t            var parts = utils.get_partitions(client, block);\n\t            var i, p, link, text;\n\t            for (i in parts) {\n\t                p = parts[i];\n\t                if (p.type == 'free') {\n\t                    link = utils.get_block_link_target(client, block.path);\n\t                    text = $('<div>').html(link.html).text();\n\t                    spaces.push({ type: 'free', block: block, start: p.start, size: p.size,\n\t                                  desc: cockpit.format(_(\"unpartitioned space on $0\"), text) });\n\t                }\n\t            }\n\t        }\n\t\n\t        for (var p in client.blocks_ptable)\n\t            add_free_spaces(client.blocks[p]);\n\t\n\t        return spaces;\n\t    };\n\t\n\t    utils.available_space_to_option = function available_space_to_option(spc) {\n\t        return {\n\t            value: spc,\n\t            Title: utils.format_size_and_text(spc.size, spc.desc),\n\t            Label: utils.block_name(spc.block)\n\t        };\n\t    };\n\t\n\t    utils.prepare_available_spaces = function prepare_available_spaces(client, spcs) {\n\t        function prepare(spc) {\n\t            if (spc.type == 'block')\n\t                return cockpit.resolve(spc.block.path);\n\t            else if (spc.type == 'free') {\n\t                var block_ptable = client.blocks_ptable[spc.block.path];\n\t                return block_ptable.CreatePartition(spc.start, spc.size, \"\", \"\", { });\n\t            }\n\t        }\n\t        return cockpit.all(spcs.map(prepare));\n\t    };\n\t\n\t    /* Comparison function for sorting lists of block devices.\n\t\n\t       We sort by major:minor numbers to get the expected order when\n\t       there are more than 10 devices of a kind.  For example, if you\n\t       have 20 loopback devices named loop0 to loop19, sorting them\n\t       alphabetically would put them in the wrong order\n\t\n\t           loop0, loop1, loop10, loop11, ..., loop2, ...\n\t\n\t       Sorting by major:minor is an easy way to do the right thing.\n\t    */\n\t\n\t    utils.block_cmp = function block_cmp(a, b) {\n\t        return a.DeviceNumber - b.DeviceNumber;\n\t    };\n\t\n\t    utils.make_block_path_cmp = function(client) {\n\t        return function(path_a, path_b) {\n\t            return utils.block_cmp(client.blocks[path_a], client.blocks[path_b]);\n\t        };\n\t    };\n\t\n\t    var multipathd_service;\n\t\n\t    utils.get_multipathd_service = function() {\n\t        if (!multipathd_service)\n\t            multipathd_service = service.proxy(\"multipathd\");\n\t        return multipathd_service;\n\t    };\n\t\n\t    utils.init_arming_zones = function init_arming_zones($top) {\n\t        $top.on('click', 'button.arm-button', function () {\n\t            var was_active = $(this).hasClass('active');\n\t            $(this).toggleClass('active', !was_active);\n\t            $(this).parents('.arming-zone').toggleClass('armed', !was_active);\n\t        });\n\t    };\n\t\n\t    utils.reset_arming_zone = function reset_arming_zone($btn) {\n\t        var $zone = $btn.parents('.arming-zone');\n\t        var $arm_btn = $zone.find('.arm-button');\n\t        $arm_btn.removeClass('active');\n\t        $zone.removeClass('armed');\n\t    };\n\t\n\t\n\t    function get_children(client, path) {\n\t        var children = [ ];\n\t\n\t        if (client.blocks_cleartext[path]) {\n\t            children.push(client.blocks_cleartext[path].path);\n\t        }\n\t\n\t        if (client.blocks_ptable[path]) {\n\t            client.blocks_partitions[path].forEach(function (part) {\n\t                if (!part.IsContainer)\n\t                    children.push(part.path);\n\t            });\n\t        }\n\t\n\t        if (client.blocks_part[path] && client.blocks_part[path].IsContainer) {\n\t            var ptable_path = client.blocks_part[path].Table;\n\t            client.blocks_partitions[ptable_path].forEach(function (part) {\n\t                if (part.IsContained)\n\t                    children.push(part.path);\n\t            });\n\t        }\n\t\n\t        if (client.vgroups[path]) {\n\t            client.vgroups_lvols[path].forEach(function (lvol) {\n\t                if (client.lvols_block[lvol.path])\n\t                    children.push(client.lvols_block[lvol.path].path);\n\t            });\n\t        }\n\t\n\t        return children;\n\t    }\n\t\n\t    utils.get_active_usage = function get_active_usage(client, path) {\n\t\n\t        function get_usage(path) {\n\t            var block = client.blocks[path];\n\t            var fsys = client.blocks_fsys[path];\n\t            var mdraid = block && client.mdraids[block.MDRaidMember];\n\t            var pvol = client.blocks_pvol[path];\n\t            var vgroup = pvol && client.vgroups[pvol.VolumeGroup];\n\t\n\t            var usage = utils.flatten(get_children(client, path).map(get_usage));\n\t\n\t            if (fsys && fsys.MountPoints.length > 0)\n\t                usage.push({ usage: 'mounted',\n\t                             block: block,\n\t                             fsys: fsys\n\t                           });\n\t\n\t            if (mdraid)\n\t                usage.push({ usage: 'mdraid-member',\n\t                             block: block,\n\t                             mdraid: mdraid\n\t                           });\n\t\n\t            if (vgroup)\n\t                usage.push({ usage: 'pvol',\n\t                             block: block,\n\t                             pvol: pvol,\n\t                             vgroup: vgroup\n\t                           });\n\t\n\t            return usage;\n\t        }\n\t\n\t        // Prepare the result for Mustache\n\t\n\t        var usage = get_usage(path);\n\t\n\t        var res = {\n\t            raw: usage,\n\t            Teardown: {\n\t                Mounts: [ ],\n\t                MDRaidMembers: [ ],\n\t                PhysicalVolumes: [ ]\n\t            },\n\t            Blocking: {\n\t                Mounts: [ ],\n\t                MDRaidMembers: [ ],\n\t                PhysicalVolumes: [ ]\n\t            }\n\t        };\n\t\n\t        usage.forEach(function (use) {\n\t            var entry, active_state;\n\t\n\t            if (use.usage == 'mounted') {\n\t                res.Teardown.Mounts.push({\n\t                    Name: utils.block_name(use.block),\n\t                    MountPoint: utils.decode_filename(use.fsys.MountPoints[0])\n\t                });\n\t            } else if (use.usage == 'mdraid-member') {\n\t                entry = {\n\t                    Name: utils.block_name(use.block),\n\t                    MDRaid: utils.mdraid_name(use.mdraid)\n\t                };\n\t                active_state = utils.array_find(use.mdraid.ActiveDevices, function (as) {\n\t                    return as[0] == use.block.path;\n\t                });\n\t                if (active_state && active_state[1] < 0)\n\t                    res.Teardown.MDRaidMembers.push(entry);\n\t                else\n\t                    res.Blocking.MDRaidMembers.push(entry);\n\t            } else if (use.usage == 'pvol') {\n\t                entry = {\n\t                    Name: utils.block_name(use.block),\n\t                    VGroup: use.vgroup.Name\n\t                };\n\t                if (use.pvol.FreeSize == use.pvol.Size) {\n\t                    res.Teardown.PhysicalVolumes.push(entry);\n\t                } else {\n\t                    res.Blocking.PhysicalVolumes.push(entry);\n\t                }\n\t            }\n\t        });\n\t\n\t        res.Teardown.HasMounts = res.Teardown.Mounts.length > 0;\n\t        res.Teardown.HasMDRaidMembers = res.Teardown.MDRaidMembers.length > 0;\n\t        res.Teardown.HasPhysicalVolumes = res.Teardown.PhysicalVolumes.length > 0;\n\t\n\t        res.Blocking.HasMounts = res.Blocking.Mounts.length > 0;\n\t        res.Blocking.HasMDRaidMembers = res.Blocking.MDRaidMembers.length > 0;\n\t        res.Blocking.HasPhysicalVolumes = res.Blocking.PhysicalVolumes.length > 0;\n\t\n\t        if (!res.Blocking.HasMounts && !res.Blocking.HasMDRaidMembers && !res.Blocking.HasPhysicalVolumes)\n\t            res.Blocking = null;\n\t\n\t        return res;\n\t    };\n\t\n\t    utils.teardown_active_usage = function teardown_active_usage(client, usage) {\n\t\n\t        // The code below is complicated by the fact that the last\n\t        // physical volume of a volume group can not be removed\n\t        // directly (even if it is completely empty).  We want to\n\t        // remove the whole volume group instead in this case.\n\t        //\n\t        // However, we might be removing the last two (or more)\n\t        // physical volumes here, and it is easiest to catch this\n\t        // condition upfront by reshuffling the data structures.\n\t\n\t        function unmount(mounteds) {\n\t            return cockpit.all(mounteds.map(function (m) {\n\t                return m.fsys.Unmount({});\n\t            }));\n\t        }\n\t\n\t        function mdraid_remove(members) {\n\t            return cockpit.all(members.map(function (m) {\n\t                return m.mdraid.RemoveDevice(m.block.path, { wipe: { t: 'b', v: true } });\n\t            }));\n\t        }\n\t\n\t        function pvol_remove(pvols) {\n\t            var by_vgroup = { }, p;\n\t            pvols.forEach(function (p) {\n\t                if (!by_vgroup[p.vgroup.path])\n\t                    by_vgroup[p.vgroup.path] = [ ];\n\t                by_vgroup[p.vgroup.path].push(p.block);\n\t            });\n\t\n\t            function handle_vg(p) {\n\t                var vg = client.vgroups[p];\n\t                var pvs = by_vgroup[p];\n\t                // If we would remove all physical volumes of a volume\n\t                // group, remove the whole volume group instead.\n\t                if (pvs.length == client.vgroups_pvols[p].length) {\n\t                    return vg.Delete({ 'tear-down': { t: 'b', v: true }\n\t                                     });\n\t                } else {\n\t                    return cockpit.all(pvs.map(function (pv) {\n\t                        return vg.RemoveDevice(pv.path, true, {});\n\t                    }));\n\t                }\n\t            }\n\t\n\t            for (p in by_vgroup)\n\t                handle_vg(p);\n\t        }\n\t\n\t        return cockpit.all([ unmount(usage.raw.filter(function(use) { return use.usage == \"mounted\"; })),\n\t                             mdraid_remove(usage.raw.filter(function(use) { return use.usage == \"mdraid-member\"; })),\n\t                             pvol_remove(usage.raw.filter(function(use) { return use.usage == \"pvol\"; }))\n\t                           ]);\n\t    };\n\t\n\t    /* jQuery.amend function. This will be removed as we move towards React */\n\t\n\t    function sync(output, input, depth) {\n\t        var na, nb, a, b, i;\n\t        var attrs, attr, seen;\n\t\n\t        if (depth > 0) {\n\t            if (output.nodeType != input.nodeType ||\n\t                output.nodeName != input.nodeName ||\n\t                (output.nodeType != 1 && output.nodeType != 3)) {\n\t                output.parentNode.replaceChild(input.parentNode.removeChild(input), output);\n\t                return;\n\t\n\t            } else if (output.nodeType == 3) {\n\t                if (output.nodeValue != input.nodeValue)\n\t                    output.nodeValue = input.nodeValue;\n\t                return;\n\t            }\n\t        }\n\t\n\t        if (output.nodeType == 1) {\n\t\n\t            /* Sync attributes */\n\t            if (depth > 0) {\n\t                seen = { };\n\t                attrs = output.attributes;\n\t                for (i = attrs.length - 1; i >= 0; i--)\n\t                    seen[attrs[i].name] = attrs[i].value;\n\t                for (i = input.attributes.length - 1; i >= 0; i--) {\n\t                    attr = input.attributes[i];\n\t                    if (seen[attr.name] !== attr.value)\n\t                        output.setAttribute(attr.name, attr.value);\n\t                    delete seen[attr.name];\n\t                }\n\t                for (i in seen)\n\t                    output.removeAttribute(i);\n\t            }\n\t\n\t            /* Sync children */\n\t            na = output.firstChild;\n\t            nb = input.firstChild;\n\t            for(;;) {\n\t                a = na;\n\t                b = nb;\n\t                while (a && a.nodeType != 1 && a.nodeType != 3)\n\t                    a = a.nextSibling;\n\t                while (b && b.nodeType != 1 && b.nodeType != 3)\n\t                    b = b.nextSibling;\n\t                if (!a && !b) {\n\t                    break;\n\t                } else if (!a) {\n\t                    na = null;\n\t                    nb = b.nextSibling;\n\t                    output.appendChild(input.removeChild(b));\n\t                } else if (!b) {\n\t                    na = a.nextSibling;\n\t                    nb = null;\n\t                    output.removeChild(a);\n\t                } else {\n\t                    na = a.nextSibling;\n\t                    nb = b.nextSibling;\n\t                    sync(a, b, (depth || 0) + 1);\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    $.fn.amend = function amend(data, options) {\n\t        this.each(function() {\n\t            var el = $(\"<div>\").html(data);\n\t            sync(this, el[0], 0);\n\t        });\n\t        return this;\n\t    };\n\t\n\t    /* Prevent flicker due to the marriage of jQuery and React here */\n\t    utils.hide = function hide(selector) {\n\t        var element = document.querySelector(\"#storage-detail\");\n\t        element.setAttribute(\"hidden\", \"\");\n\t    };\n\t\n\t    utils.show_soon = function show_soon(selector, ready) {\n\t        var element = document.querySelector(selector);\n\t        if (!element.hasAttribute(\"hidden\"))\n\t            return;\n\t        var val = element.getAttribute(\"hidden\");\n\t        if (ready) {\n\t            element.removeAttribute(\"hidden\");\n\t            window.clearTimeout(parseInt(val, 10));\n\t        } else if (!val) {\n\t            val = window.setTimeout(function() {\n\t                show_soon(selector, true);\n\t            }, 2000);\n\t            element.setAttribute(\"hidden\", String(val));\n\t        }\n\t    };\n\t\n\t    module.exports = utils;\n\t}());\n\n\n/***/ },\n\n/***/ 10:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar cockpit = __webpack_require__(7);\n\tvar mustache = __webpack_require__(11);\n\t\n\t/*\n\t * Turns a mustache template into a translated mustache template\n\t * by preparsing it and translating it.\n\t */\n\tvar cache = { };\n\t\n\tfunction translate(template) {\n\t    if (template in cache)\n\t        return cache[template];\n\t    var div = document.createElement(\"div\");\n\t    div.innerHTML = template;\n\t    cockpit.translate(div);\n\t    var result = div.innerHTML;\n\t    cache[template] = result;\n\t    return result;\n\t}\n\t\n\t/* Just like the mustache object, except for translated */\n\tmodule.exports = cockpit.extend({ }, mustache, {\n\t    render: function render(template, view, partials) {\n\t        return translate(mustache.render(template, view, partials));\n\t    },\n\t    to_html: function to_html(template, view, partials, send) {\n\t        return translate(mustache.to_html(template, view, partials, send));\n\t    },\n\t    clearCache: function clearCache() {\n\t        cache = { };\n\t        return mustache.clearCache();\n\t    }\n\t});\n\n\n/***/ },\n\n/***/ 11:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n\t * mustache.js - Logic-less {{mustache}} templates with JavaScript\n\t * http://github.com/janl/mustache.js\n\t */\n\t\n\t/*global define: false*/\n\t\n\t(function (root, factory) {\n\t  if (typeof exports === \"object\" && exports) {\n\t    factory(exports); // CommonJS\n\t  } else {\n\t    var mustache = {};\n\t    factory(mustache);\n\t    if (true) {\n\t      !(__WEBPACK_AMD_DEFINE_FACTORY__ = (mustache), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD\n\t    } else {\n\t      root.Mustache = mustache; // <script>\n\t    }\n\t  }\n\t}(this, function (mustache) {\n\t\n\t  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n\t  // See https://github.com/janl/mustache.js/issues/189\n\t  var RegExp_test = RegExp.prototype.test;\n\t  function testRegExp(re, string) {\n\t    return RegExp_test.call(re, string);\n\t  }\n\t\n\t  var nonSpaceRe = /\\S/;\n\t  function isWhitespace(string) {\n\t    return !testRegExp(nonSpaceRe, string);\n\t  }\n\t\n\t  var Object_toString = Object.prototype.toString;\n\t  var isArray = Array.isArray || function (object) {\n\t    return Object_toString.call(object) === '[object Array]';\n\t  };\n\t\n\t  function isFunction(object) {\n\t    return typeof object === 'function';\n\t  }\n\t\n\t  function escapeRegExp(string) {\n\t    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n\t  }\n\t\n\t  var entityMap = {\n\t    \"&\": \"&amp;\",\n\t    \"<\": \"&lt;\",\n\t    \">\": \"&gt;\",\n\t    '\"': '&quot;',\n\t    \"'\": '&#39;',\n\t    \"/\": '&#x2F;'\n\t  };\n\t\n\t  function escapeHtml(string) {\n\t    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n\t      return entityMap[s];\n\t    });\n\t  }\n\t\n\t  function escapeTags(tags) {\n\t    if (!isArray(tags) || tags.length !== 2) {\n\t      throw new Error('Invalid tags: ' + tags);\n\t    }\n\t\n\t    return [\n\t      new RegExp(escapeRegExp(tags[0]) + \"\\\\s*\"),\n\t      new RegExp(\"\\\\s*\" + escapeRegExp(tags[1]))\n\t    ];\n\t  }\n\t\n\t  var whiteRe = /\\s*/;\n\t  var spaceRe = /\\s+/;\n\t  var equalsRe = /\\s*=/;\n\t  var curlyRe = /\\s*\\}/;\n\t  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\t\n\t  /**\n\t   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n\t   * argument is given here it must be an array with two string values: the\n\t   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n\t   * course, the default is to use mustaches (i.e. mustache.tags).\n\t   *\n\t   * A token is an array with at least 4 elements. The first element is the\n\t   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n\t   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n\t   * all text that appears outside a symbol this element is \"text\".\n\t   *\n\t   * The second element of a token is its \"value\". For mustache tags this is\n\t   * whatever else was inside the tag besides the opening symbol. For text tokens\n\t   * this is the text itself.\n\t   *\n\t   * The third and fourth elements of the token are the start and end indices,\n\t   * respectively, of the token in the original template.\n\t   *\n\t   * Tokens that are the root node of a subtree contain two more elements: 1) an\n\t   * array of tokens in the subtree and 2) the index in the original template at\n\t   * which the closing tag for that section begins.\n\t   */\n\t  function parseTemplate(template, tags) {\n\t    tags = tags || mustache.tags;\n\t    template = template || '';\n\t\n\t    if (typeof tags === 'string') {\n\t      tags = tags.split(spaceRe);\n\t    }\n\t\n\t    var tagRes = escapeTags(tags);\n\t    var scanner = new Scanner(template);\n\t\n\t    var sections = [];     // Stack to hold section tokens\n\t    var tokens = [];       // Buffer to hold the tokens\n\t    var spaces = [];       // Indices of whitespace tokens on the current line\n\t    var hasTag = false;    // Is there a {{tag}} on the current line?\n\t    var nonSpace = false;  // Is there a non-space char on the current line?\n\t\n\t    // Strips all whitespace tokens array for the current line\n\t    // if there was a {{#tag}} on it and otherwise only space.\n\t    function stripSpace() {\n\t      if (hasTag && !nonSpace) {\n\t        while (spaces.length) {\n\t          delete tokens[spaces.pop()];\n\t        }\n\t      } else {\n\t        spaces = [];\n\t      }\n\t\n\t      hasTag = false;\n\t      nonSpace = false;\n\t    }\n\t\n\t    var start, type, value, chr, token, openSection;\n\t    while (!scanner.eos()) {\n\t      start = scanner.pos;\n\t\n\t      // Match any text between tags.\n\t      value = scanner.scanUntil(tagRes[0]);\n\t      if (value) {\n\t        for (var i = 0, len = value.length; i < len; ++i) {\n\t          chr = value.charAt(i);\n\t\n\t          if (isWhitespace(chr)) {\n\t            spaces.push(tokens.length);\n\t          } else {\n\t            nonSpace = true;\n\t          }\n\t\n\t          tokens.push(['text', chr, start, start + 1]);\n\t          start += 1;\n\t\n\t          // Check for whitespace on the current line.\n\t          if (chr === '\\n') {\n\t            stripSpace();\n\t          }\n\t        }\n\t      }\n\t\n\t      // Match the opening tag.\n\t      if (!scanner.scan(tagRes[0])) break;\n\t      hasTag = true;\n\t\n\t      // Get the tag type.\n\t      type = scanner.scan(tagRe) || 'name';\n\t      scanner.scan(whiteRe);\n\t\n\t      // Get the tag value.\n\t      if (type === '=') {\n\t        value = scanner.scanUntil(equalsRe);\n\t        scanner.scan(equalsRe);\n\t        scanner.scanUntil(tagRes[1]);\n\t      } else if (type === '{') {\n\t        value = scanner.scanUntil(new RegExp('\\\\s*' + escapeRegExp('}' + tags[1])));\n\t        scanner.scan(curlyRe);\n\t        scanner.scanUntil(tagRes[1]);\n\t        type = '&';\n\t      } else {\n\t        value = scanner.scanUntil(tagRes[1]);\n\t      }\n\t\n\t      // Match the closing tag.\n\t      if (!scanner.scan(tagRes[1])) {\n\t        throw new Error('Unclosed tag at ' + scanner.pos);\n\t      }\n\t\n\t      token = [ type, value, start, scanner.pos ];\n\t      tokens.push(token);\n\t\n\t      if (type === '#' || type === '^') {\n\t        sections.push(token);\n\t      } else if (type === '/') {\n\t        // Check section nesting.\n\t        openSection = sections.pop();\n\t\n\t        if (!openSection) {\n\t          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\t        }\n\t        if (openSection[1] !== value) {\n\t          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n\t        }\n\t      } else if (type === 'name' || type === '{' || type === '&') {\n\t        nonSpace = true;\n\t      } else if (type === '=') {\n\t        // Set the tags for the next time around.\n\t        tagRes = escapeTags(tags = value.split(spaceRe));\n\t      }\n\t    }\n\t\n\t    // Make sure there are no open sections when we're done.\n\t    openSection = sections.pop();\n\t    if (openSection) {\n\t      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\t    }\n\t\n\t    return nestTokens(squashTokens(tokens));\n\t  }\n\t\n\t  /**\n\t   * Combines the values of consecutive text tokens in the given `tokens` array\n\t   * to a single token.\n\t   */\n\t  function squashTokens(tokens) {\n\t    var squashedTokens = [];\n\t\n\t    var token, lastToken;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      if (token) {\n\t        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n\t          lastToken[1] += token[1];\n\t          lastToken[3] = token[3];\n\t        } else {\n\t          squashedTokens.push(token);\n\t          lastToken = token;\n\t        }\n\t      }\n\t    }\n\t\n\t    return squashedTokens;\n\t  }\n\t\n\t  /**\n\t   * Forms the given array of `tokens` into a nested tree structure where\n\t   * tokens that represent a section have two additional items: 1) an array of\n\t   * all tokens that appear in that section and 2) the index in the original\n\t   * template that represents the end of that section.\n\t   */\n\t  function nestTokens(tokens) {\n\t    var nestedTokens = [];\n\t    var collector = nestedTokens;\n\t    var sections = [];\n\t\n\t    var token, section;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      switch (token[0]) {\n\t      case '#':\n\t      case '^':\n\t        collector.push(token);\n\t        sections.push(token);\n\t        collector = token[4] = [];\n\t        break;\n\t      case '/':\n\t        section = sections.pop();\n\t        section[5] = token[2];\n\t        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n\t        break;\n\t      default:\n\t        collector.push(token);\n\t      }\n\t    }\n\t\n\t    return nestedTokens;\n\t  }\n\t\n\t  /**\n\t   * A simple string scanner that is used by the template parser to find\n\t   * tokens in template strings.\n\t   */\n\t  function Scanner(string) {\n\t    this.string = string;\n\t    this.tail = string;\n\t    this.pos = 0;\n\t  }\n\t\n\t  /**\n\t   * Returns `true` if the tail is empty (end of string).\n\t   */\n\t  Scanner.prototype.eos = function () {\n\t    return this.tail === \"\";\n\t  };\n\t\n\t  /**\n\t   * Tries to match the given regular expression at the current position.\n\t   * Returns the matched text if it can match, the empty string otherwise.\n\t   */\n\t  Scanner.prototype.scan = function (re) {\n\t    var match = this.tail.match(re);\n\t\n\t    if (match && match.index === 0) {\n\t      var string = match[0];\n\t      this.tail = this.tail.substring(string.length);\n\t      this.pos += string.length;\n\t      return string;\n\t    }\n\t\n\t    return \"\";\n\t  };\n\t\n\t  /**\n\t   * Skips all text until the given regular expression can be matched. Returns\n\t   * the skipped string, which is the entire tail if no match can be made.\n\t   */\n\t  Scanner.prototype.scanUntil = function (re) {\n\t    var index = this.tail.search(re), match;\n\t\n\t    switch (index) {\n\t    case -1:\n\t      match = this.tail;\n\t      this.tail = \"\";\n\t      break;\n\t    case 0:\n\t      match = \"\";\n\t      break;\n\t    default:\n\t      match = this.tail.substring(0, index);\n\t      this.tail = this.tail.substring(index);\n\t    }\n\t\n\t    this.pos += match.length;\n\t\n\t    return match;\n\t  };\n\t\n\t  /**\n\t   * Represents a rendering context by wrapping a view object and\n\t   * maintaining a reference to the parent context.\n\t   */\n\t  function Context(view, parentContext) {\n\t    this.view = view == null ? {} : view;\n\t    this.cache = { '.': this.view };\n\t    this.parent = parentContext;\n\t  }\n\t\n\t  /**\n\t   * Creates a new context using the given view with this context\n\t   * as the parent.\n\t   */\n\t  Context.prototype.push = function (view) {\n\t    return new Context(view, this);\n\t  };\n\t\n\t  /**\n\t   * Returns the value of the given name in this context, traversing\n\t   * up the context hierarchy if the value is absent in this context's view.\n\t   */\n\t  Context.prototype.lookup = function (name) {\n\t    var value;\n\t    if (name in this.cache) {\n\t      value = this.cache[name];\n\t    } else {\n\t      var context = this;\n\t\n\t      while (context) {\n\t        if (name.indexOf('.') > 0) {\n\t          value = context.view;\n\t\n\t          var names = name.split('.'), i = 0;\n\t          while (value != null && i < names.length) {\n\t            value = value[names[i++]];\n\t          }\n\t        } else {\n\t          value = context.view[name];\n\t        }\n\t\n\t        if (value != null) break;\n\t\n\t        context = context.parent;\n\t      }\n\t\n\t      this.cache[name] = value;\n\t    }\n\t\n\t    if (isFunction(value)) {\n\t      value = value.call(this.view);\n\t    }\n\t\n\t    return value;\n\t  };\n\t\n\t  /**\n\t   * A Writer knows how to take a stream of tokens and render them to a\n\t   * string, given a context. It also maintains a cache of templates to\n\t   * avoid the need to parse the same template twice.\n\t   */\n\t  function Writer() {\n\t    this.cache = {};\n\t  }\n\t\n\t  /**\n\t   * Clears all cached templates in this writer.\n\t   */\n\t  Writer.prototype.clearCache = function () {\n\t    this.cache = {};\n\t  };\n\t\n\t  /**\n\t   * Parses and caches the given `template` and returns the array of tokens\n\t   * that is generated from the parse.\n\t   */\n\t  Writer.prototype.parse = function (template, tags) {\n\t    var cache = this.cache;\n\t    var tokens = cache[template];\n\t\n\t    if (tokens == null) {\n\t      tokens = cache[template] = parseTemplate(template, tags);\n\t    }\n\t\n\t    return tokens;\n\t  };\n\t\n\t  /**\n\t   * High-level method that is used to render the given `template` with\n\t   * the given `view`.\n\t   *\n\t   * The optional `partials` argument may be an object that contains the\n\t   * names and templates of partials that are used in the template. It may\n\t   * also be a function that is used to load partial templates on the fly\n\t   * that takes a single argument: the name of the partial.\n\t   */\n\t  Writer.prototype.render = function (template, view, partials) {\n\t    var tokens = this.parse(template);\n\t    var context = (view instanceof Context) ? view : new Context(view);\n\t    return this.renderTokens(tokens, context, partials, template);\n\t  };\n\t\n\t  /**\n\t   * Low-level method that renders the given array of `tokens` using\n\t   * the given `context` and `partials`.\n\t   *\n\t   * Note: The `originalTemplate` is only ever used to extract the portion\n\t   * of the original template that was contained in a higher-order section.\n\t   * If the template doesn't use higher-order sections, this argument may\n\t   * be omitted.\n\t   */\n\t  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n\t    var buffer = '';\n\t\n\t    // This function is used to render an arbitrary template\n\t    // in the current context by higher-order sections.\n\t    var self = this;\n\t    function subRender(template) {\n\t      return self.render(template, context, partials);\n\t    }\n\t\n\t    var token, value;\n\t    for (var i = 0, len = tokens.length; i < len; ++i) {\n\t      token = tokens[i];\n\t\n\t      switch (token[0]) {\n\t      case '#':\n\t        value = context.lookup(token[1]);\n\t        if (!value) continue;\n\t\n\t        if (isArray(value)) {\n\t          for (var j = 0, jlen = value.length; j < jlen; ++j) {\n\t            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n\t          }\n\t        } else if (typeof value === 'object' || typeof value === 'string') {\n\t          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n\t        } else if (isFunction(value)) {\n\t          if (typeof originalTemplate !== 'string') {\n\t            throw new Error('Cannot use higher-order sections without the original template');\n\t          }\n\t\n\t          // Extract the portion of the original template that the section contains.\n\t          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\t\n\t          if (value != null) buffer += value;\n\t        } else {\n\t          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n\t        }\n\t\n\t        break;\n\t      case '^':\n\t        value = context.lookup(token[1]);\n\t\n\t        // Use JavaScript's definition of falsy. Include empty arrays.\n\t        // See https://github.com/janl/mustache.js/issues/186\n\t        if (!value || (isArray(value) && value.length === 0)) {\n\t          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n\t        }\n\t\n\t        break;\n\t      case '>':\n\t        if (!partials) continue;\n\t        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n\t        if (value != null) buffer += this.renderTokens(this.parse(value), context, partials, value);\n\t        break;\n\t      case '&':\n\t        value = context.lookup(token[1]);\n\t        if (value != null) buffer += value;\n\t        break;\n\t      case 'name':\n\t        value = context.lookup(token[1]);\n\t        if (value != null) buffer += mustache.escape(value);\n\t        break;\n\t      case 'text':\n\t        buffer += token[1];\n\t        break;\n\t      }\n\t    }\n\t\n\t    return buffer;\n\t  };\n\t\n\t  mustache.name = \"mustache.js\";\n\t  mustache.version = \"0.8.1\";\n\t  mustache.tags = [ \"{{\", \"}}\" ];\n\t\n\t  // All high-level mustache.* functions use this writer.\n\t  var defaultWriter = new Writer();\n\t\n\t  /**\n\t   * Clears all cached templates in the default writer.\n\t   */\n\t  mustache.clearCache = function () {\n\t    return defaultWriter.clearCache();\n\t  };\n\t\n\t  /**\n\t   * Parses and caches the given template in the default writer and returns the\n\t   * array of tokens it contains. Doing this ahead of time avoids the need to\n\t   * parse templates on the fly as they are rendered.\n\t   */\n\t  mustache.parse = function (template, tags) {\n\t    return defaultWriter.parse(template, tags);\n\t  };\n\t\n\t  /**\n\t   * Renders the `template` with the given `view` and `partials` using the\n\t   * default writer.\n\t   */\n\t  mustache.render = function (template, view, partials) {\n\t    return defaultWriter.render(template, view, partials);\n\t  };\n\t\n\t  // This is here for backwards compatibility with 0.4.x.\n\t  mustache.to_html = function (template, view, partials, send) {\n\t    var result = mustache.render(template, view, partials);\n\t\n\t    if (isFunction(send)) {\n\t      send(result);\n\t    } else {\n\t      return result;\n\t    }\n\t  };\n\t\n\t  // Export the escaping function so that the user may override it.\n\t  // See https://github.com/janl/mustache.js/issues/244\n\t  mustache.escape = escapeHtml;\n\t\n\t  // Export these mainly for testing, but also for advanced usage.\n\t  mustache.Scanner = Scanner;\n\t  mustache.Context = Context;\n\t  mustache.Writer = Writer;\n\t\n\t}));\n\n\n/***/ },\n\n/***/ 12:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var cockpit = __webpack_require__(7);\n\t\n\t    /* SERVICE MANAGEMENT API\n\t     *\n\t     * The \"service\" module lets you monitor and manage a\n\t     * system service on localhost in a simple way.\n\t     *\n\t     * It mainly exists because talking to the systemd D-Bus API is\n\t     * not trivial enough to do it directly.\n\t     *\n\t     * - proxy = service.proxy(name)\n\t     *\n\t     * Create a proxy that represents the service named NAME.\n\t     *\n\t     * The proxy has properties and methods (described below) that\n\t     * allow you to monitor the state of the service, and perform\n\t     * simple actions on it.\n\t     *\n\t     * Initially, any of the properties can be \"null\" until their\n\t     * actual values have been retrieved in the background.\n\t     *\n\t     * - $(proxy).on('changed', function (event) { ... })\n\t     *\n\t     * The 'changed' event is emitted whenever one of the properties\n\t     * of the proxy changes.\n\t     *\n\t     * - proxy.exists\n\t     *\n\t     * A boolean that tells whether the service is known or not.  A\n\t     * proxy with 'exists == false' will have 'state == undefined' and\n\t     * 'enabled == undefined'.\n\t     *\n\t     * - proxy.state\n\t     *\n\t     * Either 'undefined' when the state can't be retrieved, or a\n\t     * string that has one of the values \"starting\", \"running\",\n\t     * \"stopping\", \"stopped\", or \"failed\".\n\t     *\n\t     * - proxy.enabled\n\t     *\n\t     * Either 'undefined' when the value can't be retrieved, or a\n\t     * boolean that tells whether the service is started 'enabled'.\n\t     * What it means exactly for a service to be enabled depends on\n\t     * the service, but a enabled service is usually started on boot,\n\t     * no matter wether other services need it or not.  A disabled\n\t     * service is usually only started when it is needed by some other\n\t     * service.\n\t     *\n\t     * - proxy.unit\n\t     * - proxy.service\n\t     *\n\t     * The raw org.freedesktop.systemd1.Unit and Service D-Bus\n\t     * interface proxies for the service.\n\t     *\n\t     * - promise = proxy.start()\n\t     *\n\t     * Start the service.  The return value is a standard jQuery\n\t     * promise as returned from DBusClient.call.\n\t     *\n\t     * - promise =  proxy.restart()\n\t     *\n\t     * Restart the service.\n\t     *\n\t     * - promise = proxy.tryRestart()\n\t     * \n\t     * Try to restart the service if it's running or starting\n\t     *\n\t     * - promise = proxy.stop()\n\t     *\n\t     * Stop the service.\n\t     *\n\t     * - promise = proxy.enable()\n\t     *\n\t     * Enable the service.\n\t     *\n\t     * - promise = proxy.disable()\n\t     *\n\t     * Disable the service.\n\t     */\n\t\n\t    var systemd_client;\n\t    var systemd_manager;\n\t\n\t    function wait_valid(proxy, callback) {\n\t        proxy.wait(function() {\n\t            if (proxy.valid)\n\t                callback();\n\t        });\n\t    }\n\t\n\t    function with_systemd_manager(done) {\n\t        if (!systemd_manager) {\n\t            systemd_client = cockpit.dbus(\"org.freedesktop.systemd1\", { superuser: \"try\" });\n\t            systemd_manager = systemd_client.proxy(\"org.freedesktop.systemd1.Manager\",\n\t                                                   \"/org/freedesktop/systemd1\");\n\t            wait_valid(systemd_manager, function() {\n\t                systemd_manager.Subscribe().\n\t                    fail(function (error) {\n\t                        if (error.name != \"org.freedesktop.systemd1.AlreadySubscribed\" &&\n\t                            error.name != \"org.freedesktop.DBus.Error.FileExists\")\n\t                            console.warn(\"Subscribing to systemd signals failed\", error);\n\t                    });\n\t            });\n\t        }\n\t        wait_valid(systemd_manager, done);\n\t    }\n\t\n\t    function proxy(name) {\n\t        var self = {\n\t            exists: null,\n\t            state: null,\n\t            enabled: null,\n\t\n\t            wait: wait,\n\t\n\t            start: start,\n\t            stop: stop,\n\t            restart: restart,\n\t            tryRestart: tryRestart,\n\t\n\t            enable: enable,\n\t            disable: disable\n\t        };\n\t\n\t        cockpit.event_target(self);\n\t\n\t        var unit, service;\n\t        var wait_callbacks = cockpit.defer();\n\t\n\t        if (name.indexOf(\".\") == -1)\n\t            name = name + \".service\";\n\t\n\t        function update_from_unit() {\n\t            self.exists = (unit.LoadState != \"not-found\" || unit.ActiveState != \"inactive\");\n\t\n\t            if (unit.ActiveState == \"activating\")\n\t                self.state = \"starting\";\n\t            else if (unit.ActiveState == \"deactivating\")\n\t                self.state = \"stopping\";\n\t            else if (unit.ActiveState == \"active\" || unit.ActiveState == \"reloading\")\n\t                self.state = \"running\";\n\t            else if (unit.ActiveState == \"failed\")\n\t                self.state = \"failed\";\n\t            else if (unit.ActiveState == \"inactive\" && self.exists)\n\t                self.state = \"stopped\";\n\t            else\n\t                self.state = undefined;\n\t\n\t            if (unit.UnitFileState == \"enabled\" || unit.UnitFileState == \"linked\")\n\t                self.enabled = true;\n\t            else if (unit.UnitFileState == \"disabled\" || unit.UnitFileState == \"masked\")\n\t                self.enabled = false;\n\t            else\n\t                self.enabled = undefined;\n\t\n\t            self.unit = unit;\n\t\n\t            self.dispatchEvent(\"changed\");\n\t            wait_callbacks.resolve();\n\t        }\n\t\n\t        function update_from_service() {\n\t            self.service = service;\n\t            self.dispatchEvent(\"changed\");\n\t        }\n\t\n\t        with_systemd_manager(function () {\n\t            systemd_manager.LoadUnit(name).\n\t                done(function (path) {\n\t                    unit = systemd_client.proxy('org.freedesktop.systemd1.Unit', path);\n\t                    unit.addEventListener('changed', update_from_unit);\n\t                    wait_valid(unit, update_from_unit);\n\t\n\t                    service = systemd_client.proxy('org.freedesktop.systemd1.Service', path);\n\t                    service.addEventListener('changed', update_from_service);\n\t                    wait_valid(service, update_from_service);\n\t                }).\n\t                fail(function (error) {\n\t                    self.exists = false;\n\t                    self.dispatchEvent('changed');\n\t                });\n\t        });\n\t\n\t        function refresh() {\n\t            if (!unit || !service)\n\t                return;\n\t\n\t            function refresh_interface(path, iface) {\n\t                systemd_client.call(path,\n\t                                    \"org.freedesktop.DBus.Properties\", \"GetAll\", [ iface ]).\n\t                    fail(function (error) {\n\t                        console.log(error);\n\t                    }).\n\t                    done(function (result) {\n\t                        var props = { };\n\t                        for (var p in result[0])\n\t                            props[p] = result[0][p].v;\n\t                        var ifaces = { };\n\t                        ifaces[iface] = props;\n\t                        var data = { };\n\t                        data[unit.path] = ifaces;\n\t                        systemd_client.notify(data);\n\t                    });\n\t            }\n\t\n\t            refresh_interface(unit.path, \"org.freedesktop.systemd1.Unit\");\n\t            refresh_interface(service.path, \"org.freedesktop.systemd1.Service\");\n\t        }\n\t\n\t        function on_job_new_removed_refresh(event, number, path, unit_id, result) {\n\t            if (unit_id == name)\n\t                refresh();\n\t        }\n\t\n\t        /* HACK - https://bugs.freedesktop.org/show_bug.cgi?id=69575\n\t         *\n\t         * We need to explicitly get new property values when getting\n\t         * a UnitNew signal since UnitNew doesn't carry them.\n\t         * However, reacting to UnitNew with GetAll could lead to an\n\t         * infinite loop since systemd emits a UnitNew in reaction to\n\t         * GetAll for units that it doesn't want to keep loaded, such\n\t         * as units without unit files.\n\t         *\n\t         * So we ignore UnitNew and instead assume that the unit state\n\t         * only changes in interesting ways when there is a job for it\n\t         * or when the daemon is reloaded (or when we get a property\n\t         * change notification, of course).\n\t         */\n\t\n\t        if (false) {\n\t            // This is what we want to do.\n\t\n\t            systemd_manager.addEventListener(\"UnitNew\", function (event, unit_id, path) {\n\t                if (unit_id == name)\n\t                    refresh();\n\t            });\n\t        } else {\n\t            // This is what we have to do.\n\t\n\t            systemd_manager.addEventListener(\"Reloading\", function (event, reloading) {\n\t                if (!reloading)\n\t                    refresh();\n\t            });\n\t\n\t            systemd_manager.addEventListener(\"JobNew\", on_job_new_removed_refresh);\n\t            systemd_manager.addEventListener(\"JobRemoved\", on_job_new_removed_refresh);\n\t        }\n\t\n\t        function wait(callback) {\n\t            wait_callbacks.promise.then(callback);\n\t        }\n\t\n\t        /* Actions\n\t         *\n\t         * We don't call methods on the D-Bus proxies here since they\n\t         * might not be ready when these functions are called.\n\t         */\n\t\n\t        var pending_jobs = { };\n\t\n\t        systemd_manager.addEventListener(\"JobRemoved\", function (event, number, path, unit_id, result) {\n\t            if (pending_jobs[path]) {\n\t                if (result == \"done\")\n\t                    pending_jobs[path].resolve();\n\t                else\n\t                    pending_jobs[path].reject(result);\n\t                delete pending_jobs[path];\n\t            }\n\t        });\n\t\n\t        function call_manager(method, args) {\n\t            return systemd_client.call(\"/org/freedesktop/systemd1\",\n\t                                       \"org.freedesktop.systemd1.Manager\",\n\t                                       method, args);\n\t        }\n\t\n\t        function call_manager_with_job(method, args) {\n\t            var dfd = cockpit.defer();\n\t            call_manager(method, args).\n\t                done(function (results) {\n\t                    var path = results[0];\n\t                    pending_jobs[path] = dfd;\n\t                }).\n\t                fail(function (error) {\n\t                    dfd.reject(error);\n\t                });\n\t            return dfd.promise();\n\t        }\n\t\n\t        function call_manager_with_reload(method, args) {\n\t            return call_manager(method, args).then(function () {\n\t                return call_manager(\"Reload\", [ ]);\n\t            });\n\t        }\n\t\n\t        function start() {\n\t            return call_manager_with_job(\"StartUnit\", [ name, \"replace\" ]);\n\t        }\n\t\n\t        function stop() {\n\t            return call_manager_with_job(\"StopUnit\", [ name, \"replace\" ]);\n\t        }\n\t\n\t        function restart() {\n\t            return call_manager_with_job(\"RestartUnit\", [ name, \"replace\" ]);\n\t        }\n\t\n\t        function tryRestart() {\n\t            return call_manager_with_job(\"TryRestartUnit\", [ name, \"replace\" ]);\n\t        }\n\t\n\t        function enable() {\n\t            return call_manager_with_reload(\"EnableUnitFiles\", [ [ name ], false, false ]);\n\t        }\n\t\n\t        function disable() {\n\t            return call_manager_with_reload(\"DisableUnitFiles\", [ [ name ], false ]);\n\t        }\n\t\n\t        return self;\n\t    }\n\t\n\t    module.exports = {\n\t        proxy: proxy\n\t    };\n\t}());\n\n\n/***/ },\n\n/***/ 49:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2014 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    /* QUnit needs to have 'window' as 'this' in order to load */\n\t    window.QUnit = __webpack_require__(50);\n\t    window.qunitTap = __webpack_require__(53);\n\t\n\t    __webpack_require__(54);\n\t\n\t    __webpack_require__(55);\n\t\n\t    module.exports = window.QUnit;\n\t\n\t}());\n\n\n/***/ },\n\n/***/ 50:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, module) {/*!\n\t * QUnit 1.23.1\n\t * https://qunitjs.com/\n\t *\n\t * Copyright jQuery Foundation and other contributors\n\t * Released under the MIT license\n\t * https://jquery.org/license\n\t *\n\t * Date: 2016-04-12T17:29Z\n\t */\n\t\n\t( function( global ) {\n\t\n\tvar QUnit = {};\n\t\n\tvar Date = global.Date;\n\tvar now = Date.now || function() {\n\t\treturn new Date().getTime();\n\t};\n\t\n\tvar setTimeout = global.setTimeout;\n\tvar clearTimeout = global.clearTimeout;\n\t\n\t// Store a local window from the global to allow direct references.\n\tvar window = global.window;\n\t\n\tvar defined = {\n\t\tdocument: window && window.document !== undefined,\n\t\tsetTimeout: setTimeout !== undefined,\n\t\tsessionStorage: ( function() {\n\t\t\tvar x = \"qunit-test-string\";\n\t\t\ttry {\n\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\treturn true;\n\t\t\t} catch ( e ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}() )\n\t};\n\t\n\tvar fileName = ( sourceFromStacktrace( 0 ) || \"\" ).replace( /(:\\d+)+\\)?/, \"\" ).replace( /.+\\//, \"\" );\n\tvar globalStartCalled = false;\n\tvar runStarted = false;\n\t\n\tvar toString = Object.prototype.toString,\n\t\thasOwn = Object.prototype.hasOwnProperty;\n\t\n\t// Returns a new Array with the elements that are in a but not in b\n\tfunction diff( a, b ) {\n\t\tvar i, j,\n\t\t\tresult = a.slice();\n\t\n\t\tfor ( i = 0; i < result.length; i++ ) {\n\t\t\tfor ( j = 0; j < b.length; j++ ) {\n\t\t\t\tif ( result[ i ] === b[ j ] ) {\n\t\t\t\t\tresult.splice( i, 1 );\n\t\t\t\t\ti--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t// From jquery.js\n\tfunction inArray( elem, array ) {\n\t\tif ( array.indexOf ) {\n\t\t\treturn array.indexOf( elem );\n\t\t}\n\t\n\t\tfor ( var i = 0, length = array.length; i < length; i++ ) {\n\t\t\tif ( array[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\n\t\treturn -1;\n\t}\n\t\n\t/**\n\t * Makes a clone of an object using only Array or Object as base,\n\t * and copies over the own enumerable properties.\n\t *\n\t * @param {Object} obj\n\t * @return {Object} New object with only the own properties (recursively).\n\t */\n\tfunction objectValues ( obj ) {\n\t\tvar key, val,\n\t\t\tvals = QUnit.is( \"array\", obj ) ? [] : {};\n\t\tfor ( key in obj ) {\n\t\t\tif ( hasOwn.call( obj, key ) ) {\n\t\t\t\tval = obj[ key ];\n\t\t\t\tvals[ key ] = val === Object( val ) ? objectValues( val ) : val;\n\t\t\t}\n\t\t}\n\t\treturn vals;\n\t}\n\t\n\tfunction extend( a, b, undefOnly ) {\n\t\tfor ( var prop in b ) {\n\t\t\tif ( hasOwn.call( b, prop ) ) {\n\t\n\t\t\t\t// Avoid \"Member not found\" error in IE8 caused by messing with window.constructor\n\t\t\t\t// This block runs on every environment, so `global` is being used instead of `window`\n\t\t\t\t// to avoid errors on node.\n\t\t\t\tif ( prop !== \"constructor\" || a !== global ) {\n\t\t\t\t\tif ( b[ prop ] === undefined ) {\n\t\t\t\t\t\tdelete a[ prop ];\n\t\t\t\t\t} else if ( !( undefOnly && typeof a[ prop ] !== \"undefined\" ) ) {\n\t\t\t\t\t\ta[ prop ] = b[ prop ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn a;\n\t}\n\t\n\tfunction objectType( obj ) {\n\t\tif ( typeof obj === \"undefined\" ) {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\n\t\t// Consider: typeof null === object\n\t\tif ( obj === null ) {\n\t\t\treturn \"null\";\n\t\t}\n\t\n\t\tvar match = toString.call( obj ).match( /^\\[object\\s(.*)\\]$/ ),\n\t\t\ttype = match && match[ 1 ];\n\t\n\t\tswitch ( type ) {\n\t\t\tcase \"Number\":\n\t\t\t\tif ( isNaN( obj ) ) {\n\t\t\t\t\treturn \"nan\";\n\t\t\t\t}\n\t\t\t\treturn \"number\";\n\t\t\tcase \"String\":\n\t\t\tcase \"Boolean\":\n\t\t\tcase \"Array\":\n\t\t\tcase \"Set\":\n\t\t\tcase \"Map\":\n\t\t\tcase \"Date\":\n\t\t\tcase \"RegExp\":\n\t\t\tcase \"Function\":\n\t\t\tcase \"Symbol\":\n\t\t\t\treturn type.toLowerCase();\n\t\t}\n\t\tif ( typeof obj === \"object\" ) {\n\t\t\treturn \"object\";\n\t\t}\n\t}\n\t\n\t// Safe object type checking\n\tfunction is( type, obj ) {\n\t\treturn QUnit.objectType( obj ) === type;\n\t}\n\t\n\t// Doesn't support IE6 to IE9, it will return undefined on these browsers\n\t// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\n\tfunction extractStacktrace( e, offset ) {\n\t\toffset = offset === undefined ? 4 : offset;\n\t\n\t\tvar stack, include, i;\n\t\n\t\tif ( e.stack ) {\n\t\t\tstack = e.stack.split( \"\\n\" );\n\t\t\tif ( /^error$/i.test( stack[ 0 ] ) ) {\n\t\t\t\tstack.shift();\n\t\t\t}\n\t\t\tif ( fileName ) {\n\t\t\t\tinclude = [];\n\t\t\t\tfor ( i = offset; i < stack.length; i++ ) {\n\t\t\t\t\tif ( stack[ i ].indexOf( fileName ) !== -1 ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tinclude.push( stack[ i ] );\n\t\t\t\t}\n\t\t\t\tif ( include.length ) {\n\t\t\t\t\treturn include.join( \"\\n\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn stack[ offset ];\n\t\n\t\t// Support: Safari <=6 only\n\t\t} else if ( e.sourceURL ) {\n\t\n\t\t\t// Exclude useless self-reference for generated Error objects\n\t\t\tif ( /qunit.js$/.test( e.sourceURL ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// For actual exceptions, this is useful\n\t\t\treturn e.sourceURL + \":\" + e.line;\n\t\t}\n\t}\n\t\n\tfunction sourceFromStacktrace( offset ) {\n\t\tvar error = new Error();\n\t\n\t\t// Support: Safari <=7 only, IE <=10 - 11 only\n\t\t// Not all browsers generate the `stack` property for `new Error()`, see also #636\n\t\tif ( !error.stack ) {\n\t\t\ttry {\n\t\t\t\tthrow error;\n\t\t\t} catch ( err ) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t}\n\t\n\t\treturn extractStacktrace( error, offset );\n\t}\n\t\n\t/**\n\t * Config object: Maintain internal state\n\t * Later exposed as QUnit.config\n\t * `config` initialized at top of scope\n\t */\n\tvar config = {\n\t\n\t\t// The queue of tests to run\n\t\tqueue: [],\n\t\n\t\t// Block until document ready\n\t\tblocking: true,\n\t\n\t\t// By default, run previously failed tests first\n\t\t// very useful in combination with \"Hide passed tests\" checked\n\t\treorder: true,\n\t\n\t\t// By default, modify document.title when suite is done\n\t\taltertitle: true,\n\t\n\t\t// HTML Reporter: collapse every test except the first failing test\n\t\t// If false, all failing tests will be expanded\n\t\tcollapse: true,\n\t\n\t\t// By default, scroll to top of the page when suite is done\n\t\tscrolltop: true,\n\t\n\t\t// Depth up-to which object will be dumped\n\t\tmaxDepth: 5,\n\t\n\t\t// When enabled, all tests must call expect()\n\t\trequireExpects: false,\n\t\n\t\t// Placeholder for user-configurable form-exposed URL parameters\n\t\turlConfig: [],\n\t\n\t\t// Set of all modules.\n\t\tmodules: [],\n\t\n\t\t// Stack of nested modules\n\t\tmoduleStack: [],\n\t\n\t\t// The first unnamed module\n\t\tcurrentModule: {\n\t\t\tname: \"\",\n\t\t\ttests: []\n\t\t},\n\t\n\t\tcallbacks: {}\n\t};\n\t\n\t// Push a loose unnamed module to the modules collection\n\tconfig.modules.push( config.currentModule );\n\t\n\tvar loggingCallbacks = {};\n\t\n\t// Register logging callbacks\n\tfunction registerLoggingCallbacks( obj ) {\n\t\tvar i, l, key,\n\t\t\tcallbackNames = [ \"begin\", \"done\", \"log\", \"testStart\", \"testDone\",\n\t\t\t\t\"moduleStart\", \"moduleDone\" ];\n\t\n\t\tfunction registerLoggingCallback( key ) {\n\t\t\tvar loggingCallback = function( callback ) {\n\t\t\t\tif ( objectType( callback ) !== \"function\" ) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"QUnit logging methods require a callback function as their first parameters.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\n\t\t\t\tconfig.callbacks[ key ].push( callback );\n\t\t\t};\n\t\n\t\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t\t// Stores the registered functions allowing restoring\n\t\t\t// at verifyLoggingCallbacks() if modified\n\t\t\tloggingCallbacks[ key ] = loggingCallback;\n\t\n\t\t\treturn loggingCallback;\n\t\t}\n\t\n\t\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\n\t\t\tkey = callbackNames[ i ];\n\t\n\t\t\t// Initialize key collection of logging callback\n\t\t\tif ( objectType( config.callbacks[ key ] ) === \"undefined\" ) {\n\t\t\t\tconfig.callbacks[ key ] = [];\n\t\t\t}\n\t\n\t\t\tobj[ key ] = registerLoggingCallback( key );\n\t\t}\n\t}\n\t\n\tfunction runLoggingCallbacks( key, args ) {\n\t\tvar i, l, callbacks;\n\t\n\t\tcallbacks = config.callbacks[ key ];\n\t\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\n\t\t\tcallbacks[ i ]( args );\n\t\t}\n\t}\n\t\n\t// DEPRECATED: This will be removed on 2.0.0+\n\t// This function verifies if the loggingCallbacks were modified by the user\n\t// If so, it will restore it, assign the given callback and print a console warning\n\tfunction verifyLoggingCallbacks() {\n\t\tvar loggingCallback, userCallback;\n\t\n\t\tfor ( loggingCallback in loggingCallbacks ) {\n\t\t\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\n\t\n\t\t\t\tuserCallback = QUnit[ loggingCallback ];\n\t\n\t\t\t\t// Restore the callback function\n\t\t\t\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\n\t\n\t\t\t\t// Assign the deprecated given callback\n\t\t\t\tQUnit[ loggingCallback ]( userCallback );\n\t\n\t\t\t\tif ( global.console && global.console.warn ) {\n\t\t\t\t\tglobal.console.warn(\n\t\t\t\t\t\t\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" +\n\t\t\t\t\t\t\"Please, check out the documentation on how to apply logging callbacks.\\n\" +\n\t\t\t\t\t\t\"Reference: https://api.qunitjs.com/category/callbacks/\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t( function() {\n\t\tif ( !defined.document ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\t// `onErrorFnPrev` initialized at top of scope\n\t\t// Preserve other handlers\n\t\tvar onErrorFnPrev = window.onerror;\n\t\n\t\t// Cover uncaught exceptions\n\t\t// Returning true will suppress the default browser handler,\n\t\t// returning false will let it run.\n\t\twindow.onerror = function( error, filePath, linerNr ) {\n\t\t\tvar ret = false;\n\t\t\tif ( onErrorFnPrev ) {\n\t\t\t\tret = onErrorFnPrev( error, filePath, linerNr );\n\t\t\t}\n\t\n\t\t\t// Treat return value as window.onerror itself does,\n\t\t\t// Only do our handling if not suppressed.\n\t\t\tif ( ret !== true ) {\n\t\t\t\tif ( QUnit.config.current ) {\n\t\t\t\t\tif ( QUnit.config.current.ignoreGlobalErrors ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.test( \"global failure\", extend( function() {\n\t\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t\t}, { validTest: true } ) );\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\treturn ret;\n\t\t};\n\t}() );\n\t\n\t// Figure out if we're running the tests from a server or not\n\tQUnit.isLocal = !( defined.document && window.location.protocol !== \"file:\" );\n\t\n\t// Expose the current QUnit version\n\tQUnit.version = \"1.23.1\";\n\t\n\textend( QUnit, {\n\t\n\t\t// Call on start of module test to prepend name to all tests\n\t\tmodule: function( name, testEnvironment, executeNow ) {\n\t\t\tvar module, moduleFns;\n\t\t\tvar currentModule = config.currentModule;\n\t\n\t\t\tif ( arguments.length === 2 ) {\n\t\t\t\tif ( objectType( testEnvironment ) === \"function\" ) {\n\t\t\t\t\texecuteNow = testEnvironment;\n\t\t\t\t\ttestEnvironment = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// DEPRECATED: handles setup/teardown functions,\n\t\t\t// beforeEach and afterEach should be used instead\n\t\t\tif ( testEnvironment && testEnvironment.setup ) {\n\t\t\t\ttestEnvironment.beforeEach = testEnvironment.setup;\n\t\t\t\tdelete testEnvironment.setup;\n\t\t\t}\n\t\t\tif ( testEnvironment && testEnvironment.teardown ) {\n\t\t\t\ttestEnvironment.afterEach = testEnvironment.teardown;\n\t\t\t\tdelete testEnvironment.teardown;\n\t\t\t}\n\t\n\t\t\tmodule = createModule();\n\t\n\t\t\tmoduleFns = {\n\t\t\t\tbeforeEach: setHook( module, \"beforeEach\" ),\n\t\t\t\tafterEach: setHook( module, \"afterEach\" )\n\t\t\t};\n\t\n\t\t\tif ( objectType( executeNow ) === \"function\" ) {\n\t\t\t\tconfig.moduleStack.push( module );\n\t\t\t\tsetCurrentModule( module );\n\t\t\t\texecuteNow.call( module.testEnvironment, moduleFns );\n\t\t\t\tconfig.moduleStack.pop();\n\t\t\t\tmodule = module.parentModule || currentModule;\n\t\t\t}\n\t\n\t\t\tsetCurrentModule( module );\n\t\n\t\t\tfunction createModule() {\n\t\t\t\tvar parentModule = config.moduleStack.length ?\n\t\t\t\t\tconfig.moduleStack.slice( -1 )[ 0 ] : null;\n\t\t\t\tvar moduleName = parentModule !== null ?\n\t\t\t\t\t[ parentModule.name, name ].join( \" > \" ) : name;\n\t\t\t\tvar module = {\n\t\t\t\t\tname: moduleName,\n\t\t\t\t\tparentModule: parentModule,\n\t\t\t\t\ttests: [],\n\t\t\t\t\tmoduleId: generateHash( moduleName )\n\t\t\t\t};\n\t\n\t\t\t\tvar env = {};\n\t\t\t\tif ( parentModule ) {\n\t\t\t\t\textend( env, parentModule.testEnvironment );\n\t\t\t\t\tdelete env.beforeEach;\n\t\t\t\t\tdelete env.afterEach;\n\t\t\t\t}\n\t\t\t\textend( env, testEnvironment );\n\t\t\t\tmodule.testEnvironment = env;\n\t\n\t\t\t\tconfig.modules.push( module );\n\t\t\t\treturn module;\n\t\t\t}\n\t\n\t\t\tfunction setCurrentModule( module ) {\n\t\t\t\tconfig.currentModule = module;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// DEPRECATED: QUnit.asyncTest() will be removed in QUnit 2.0.\n\t\tasyncTest: asyncTest,\n\t\n\t\ttest: test,\n\t\n\t\tskip: skip,\n\t\n\t\tonly: only,\n\t\n\t\t// DEPRECATED: The functionality of QUnit.start() will be altered in QUnit 2.0.\n\t\t// In QUnit 2.0, invoking it will ONLY affect the `QUnit.config.autostart` blocking behavior.\n\t\tstart: function( count ) {\n\t\t\tvar globalStartAlreadyCalled = globalStartCalled;\n\t\n\t\t\tif ( !config.current ) {\n\t\t\t\tglobalStartCalled = true;\n\t\n\t\t\t\tif ( runStarted ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context while already started\" );\n\t\t\t\t} else if ( globalStartAlreadyCalled || count > 1 ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context too many times\" );\n\t\t\t\t} else if ( config.autostart ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context when \" +\n\t\t\t\t\t\t\"QUnit.config.autostart was true\" );\n\t\t\t\t} else if ( !config.pageLoaded ) {\n\t\n\t\t\t\t\t// The page isn't completely loaded yet, so bail out and let `QUnit.load` handle it\n\t\t\t\t\tconfig.autostart = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\n\t\t\t\t// If a test is running, adjust its semaphore\n\t\t\t\tconfig.current.semaphore -= count || 1;\n\t\n\t\t\t\t// If semaphore is non-numeric, throw error\n\t\t\t\tif ( isNaN( config.current.semaphore ) ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\n\t\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\t\"Called start() with a non-numeric decrement.\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Don't start until equal number of stop-calls\n\t\t\t\tif ( config.current.semaphore > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Throw an Error if start is called more often than stop\n\t\t\t\tif ( config.current.semaphore < 0 ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\n\t\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\t\"Called start() while already started (test's semaphore was 0 already)\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tresumeProcessing();\n\t\t},\n\t\n\t\t// DEPRECATED: QUnit.stop() will be removed in QUnit 2.0.\n\t\tstop: function( count ) {\n\t\n\t\t\t// If there isn't a test running, don't allow QUnit.stop() to be called\n\t\t\tif ( !config.current ) {\n\t\t\t\tthrow new Error( \"Called stop() outside of a test context\" );\n\t\t\t}\n\t\n\t\t\t// If a test is running, adjust its semaphore\n\t\t\tconfig.current.semaphore += count || 1;\n\t\n\t\t\tpauseProcessing();\n\t\t},\n\t\n\t\tconfig: config,\n\t\n\t\tis: is,\n\t\n\t\tobjectType: objectType,\n\t\n\t\textend: extend,\n\t\n\t\tload: function() {\n\t\t\tconfig.pageLoaded = true;\n\t\n\t\t\t// Initialize the configuration options\n\t\t\textend( config, {\n\t\t\t\tstats: { all: 0, bad: 0 },\n\t\t\t\tmoduleStats: { all: 0, bad: 0 },\n\t\t\t\tstarted: 0,\n\t\t\t\tupdateRate: 1000,\n\t\t\t\tautostart: true,\n\t\t\t\tfilter: \"\"\n\t\t\t}, true );\n\t\n\t\t\tconfig.blocking = false;\n\t\n\t\t\tif ( config.autostart ) {\n\t\t\t\tresumeProcessing();\n\t\t\t}\n\t\t},\n\t\n\t\tstack: function( offset ) {\n\t\t\toffset = ( offset || 0 ) + 2;\n\t\t\treturn sourceFromStacktrace( offset );\n\t\t}\n\t} );\n\t\n\tregisterLoggingCallbacks( QUnit );\n\t\n\tfunction begin() {\n\t\tvar i, l,\n\t\t\tmodulesLog = [];\n\t\n\t\t// If the test run hasn't officially begun yet\n\t\tif ( !config.started ) {\n\t\n\t\t\t// Record the time of the test run's beginning\n\t\t\tconfig.started = now();\n\t\n\t\t\tverifyLoggingCallbacks();\n\t\n\t\t\t// Delete the loose unnamed module if unused.\n\t\t\tif ( config.modules[ 0 ].name === \"\" && config.modules[ 0 ].tests.length === 0 ) {\n\t\t\t\tconfig.modules.shift();\n\t\t\t}\n\t\n\t\t\t// Avoid unnecessary information by not logging modules' test environments\n\t\t\tfor ( i = 0, l = config.modules.length; i < l; i++ ) {\n\t\t\t\tmodulesLog.push( {\n\t\t\t\t\tname: config.modules[ i ].name,\n\t\t\t\t\ttests: config.modules[ i ].tests\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// The test run is officially beginning now\n\t\t\trunLoggingCallbacks( \"begin\", {\n\t\t\t\ttotalTests: Test.count,\n\t\t\t\tmodules: modulesLog\n\t\t\t} );\n\t\t}\n\t\n\t\tconfig.blocking = false;\n\t\tprocess( true );\n\t}\n\t\n\tfunction process( last ) {\n\t\tfunction next() {\n\t\t\tprocess( last );\n\t\t}\n\t\tvar start = now();\n\t\tconfig.depth = ( config.depth || 0 ) + 1;\n\t\n\t\twhile ( config.queue.length && !config.blocking ) {\n\t\t\tif ( !defined.setTimeout || config.updateRate <= 0 ||\n\t\t\t\t\t( ( now() - start ) < config.updateRate ) ) {\n\t\t\t\tif ( config.current ) {\n\t\n\t\t\t\t\t// Reset async tracking for each phase of the Test lifecycle\n\t\t\t\t\tconfig.current.usedAsync = false;\n\t\t\t\t}\n\t\t\t\tconfig.queue.shift()();\n\t\t\t} else {\n\t\t\t\tsetTimeout( next, 13 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconfig.depth--;\n\t\tif ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\n\t\t\tdone();\n\t\t}\n\t}\n\t\n\tfunction pauseProcessing() {\n\t\tconfig.blocking = true;\n\t\n\t\tif ( config.testTimeout && defined.setTimeout ) {\n\t\t\tclearTimeout( config.timeout );\n\t\t\tconfig.timeout = setTimeout( function() {\n\t\t\t\tif ( config.current ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\t\t\t\tQUnit.pushFailure( \"Test timed out\", sourceFromStacktrace( 2 ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error( \"Test timed out\" );\n\t\t\t\t}\n\t\t\t\tresumeProcessing();\n\t\t\t}, config.testTimeout );\n\t\t}\n\t}\n\t\n\tfunction resumeProcessing() {\n\t\trunStarted = true;\n\t\n\t\t// A slight delay to allow this iteration of the event loop to finish (more assertions, etc.)\n\t\tif ( defined.setTimeout ) {\n\t\t\tsetTimeout( function() {\n\t\t\t\tif ( config.current && config.current.semaphore > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( config.timeout ) {\n\t\t\t\t\tclearTimeout( config.timeout );\n\t\t\t\t}\n\t\n\t\t\t\tbegin();\n\t\t\t}, 13 );\n\t\t} else {\n\t\t\tbegin();\n\t\t}\n\t}\n\t\n\tfunction done() {\n\t\tvar runtime, passed;\n\t\n\t\tconfig.autorun = true;\n\t\n\t\t// Log the last module results\n\t\tif ( config.previousModule ) {\n\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\tname: config.previousModule.name,\n\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t} );\n\t\t}\n\t\tdelete config.previousModule;\n\t\n\t\truntime = now() - config.started;\n\t\tpassed = config.stats.all - config.stats.bad;\n\t\n\t\trunLoggingCallbacks( \"done\", {\n\t\t\tfailed: config.stats.bad,\n\t\t\tpassed: passed,\n\t\t\ttotal: config.stats.all,\n\t\t\truntime: runtime\n\t\t} );\n\t}\n\t\n\tfunction setHook( module, hookName ) {\n\t\tif ( module.testEnvironment === undefined ) {\n\t\t\tmodule.testEnvironment = {};\n\t\t}\n\t\n\t\treturn function( callback ) {\n\t\t\tmodule.testEnvironment[ hookName ] = callback;\n\t\t};\n\t}\n\t\n\tvar focused = false;\n\tvar priorityCount = 0;\n\tvar unitSampler;\n\t\n\tfunction Test( settings ) {\n\t\tvar i, l;\n\t\n\t\t++Test.count;\n\t\n\t\textend( this, settings );\n\t\tthis.assertions = [];\n\t\tthis.semaphore = 0;\n\t\tthis.usedAsync = false;\n\t\tthis.module = config.currentModule;\n\t\tthis.stack = sourceFromStacktrace( 3 );\n\t\n\t\t// Register unique strings\n\t\tfor ( i = 0, l = this.module.tests; i < l.length; i++ ) {\n\t\t\tif ( this.module.tests[ i ].name === this.testName ) {\n\t\t\t\tthis.testName += \" \";\n\t\t\t}\n\t\t}\n\t\n\t\tthis.testId = generateHash( this.module.name, this.testName );\n\t\n\t\tthis.module.tests.push( {\n\t\t\tname: this.testName,\n\t\t\ttestId: this.testId\n\t\t} );\n\t\n\t\tif ( settings.skip ) {\n\t\n\t\t\t// Skipped tests will fully ignore any sent callback\n\t\t\tthis.callback = function() {};\n\t\t\tthis.async = false;\n\t\t\tthis.expected = 0;\n\t\t} else {\n\t\t\tthis.assert = new Assert( this );\n\t\t}\n\t}\n\t\n\tTest.count = 0;\n\t\n\tTest.prototype = {\n\t\tbefore: function() {\n\t\t\tif (\n\t\n\t\t\t\t// Emit moduleStart when we're switching from one module to another\n\t\t\t\tthis.module !== config.previousModule ||\n\t\n\t\t\t\t\t// They could be equal (both undefined) but if the previousModule property doesn't\n\t\t\t\t\t// yet exist it means this is the first test in a suite that isn't wrapped in a\n\t\t\t\t\t// module, in which case we'll just emit a moduleStart event for 'undefined'.\n\t\t\t\t\t// Without this, reporters can get testStart before moduleStart  which is a problem.\n\t\t\t\t\t!hasOwn.call( config, \"previousModule\" )\n\t\t\t) {\n\t\t\t\tif ( hasOwn.call( config, \"previousModule\" ) ) {\n\t\t\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\t\t\tname: config.previousModule.name,\n\t\t\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tconfig.previousModule = this.module;\n\t\t\t\tconfig.moduleStats = { all: 0, bad: 0, started: now() };\n\t\t\t\trunLoggingCallbacks( \"moduleStart\", {\n\t\t\t\t\tname: this.module.name,\n\t\t\t\t\ttests: this.module.tests\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\tconfig.current = this;\n\t\n\t\t\tif ( this.module.testEnvironment ) {\n\t\t\t\tdelete this.module.testEnvironment.beforeEach;\n\t\t\t\tdelete this.module.testEnvironment.afterEach;\n\t\t\t}\n\t\t\tthis.testEnvironment = extend( {}, this.module.testEnvironment );\n\t\n\t\t\tthis.started = now();\n\t\t\trunLoggingCallbacks( \"testStart\", {\n\t\t\t\tname: this.testName,\n\t\t\t\tmodule: this.module.name,\n\t\t\t\ttestId: this.testId\n\t\t\t} );\n\t\n\t\t\tif ( !config.pollution ) {\n\t\t\t\tsaveGlobal();\n\t\t\t}\n\t\t},\n\t\n\t\trun: function() {\n\t\t\tvar promise;\n\t\n\t\t\tconfig.current = this;\n\t\n\t\t\tif ( this.async ) {\n\t\t\t\tQUnit.stop();\n\t\t\t}\n\t\n\t\t\tthis.callbackStarted = now();\n\t\n\t\t\tif ( config.notrycatch ) {\n\t\t\t\trunTest( this );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\ttry {\n\t\t\t\trunTest( this );\n\t\t\t} catch ( e ) {\n\t\t\t\tthis.pushFailure( \"Died on test #\" + ( this.assertions.length + 1 ) + \" \" +\n\t\t\t\t\tthis.stack + \": \" + ( e.message || e ), extractStacktrace( e, 0 ) );\n\t\n\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\tsaveGlobal();\n\t\n\t\t\t\t// Restart the tests if they're blocking\n\t\t\t\tif ( config.blocking ) {\n\t\t\t\t\tQUnit.start();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction runTest( test ) {\n\t\t\t\tpromise = test.callback.call( test.testEnvironment, test.assert );\n\t\t\t\ttest.resolvePromise( promise );\n\t\t\t}\n\t\t},\n\t\n\t\tafter: function() {\n\t\t\tcheckPollution();\n\t\t},\n\t\n\t\tqueueHook: function( hook, hookName ) {\n\t\t\tvar promise,\n\t\t\t\ttest = this;\n\t\t\treturn function runHook() {\n\t\t\t\tconfig.current = test;\n\t\t\t\tif ( config.notrycatch ) {\n\t\t\t\t\tcallHook();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tcallHook();\n\t\t\t\t} catch ( error ) {\n\t\t\t\t\ttest.pushFailure( hookName + \" failed on \" + test.testName + \": \" +\n\t\t\t\t\t( error.message || error ), extractStacktrace( error, 0 ) );\n\t\t\t\t}\n\t\n\t\t\t\tfunction callHook() {\n\t\t\t\t\tpromise = hook.call( test.testEnvironment, test.assert );\n\t\t\t\t\ttest.resolvePromise( promise, hookName );\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\n\t\t// Currently only used for module level hooks, can be used to add global level ones\n\t\thooks: function( handler ) {\n\t\t\tvar hooks = [];\n\t\n\t\t\tfunction processHooks( test, module ) {\n\t\t\t\tif ( module.parentModule ) {\n\t\t\t\t\tprocessHooks( test, module.parentModule );\n\t\t\t\t}\n\t\t\t\tif ( module.testEnvironment &&\n\t\t\t\t\tQUnit.objectType( module.testEnvironment[ handler ] ) === \"function\" ) {\n\t\t\t\t\thooks.push( test.queueHook( module.testEnvironment[ handler ], handler ) );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Hooks are ignored on skipped tests\n\t\t\tif ( !this.skip ) {\n\t\t\t\tprocessHooks( this, this.module );\n\t\t\t}\n\t\t\treturn hooks;\n\t\t},\n\t\n\t\tfinish: function() {\n\t\t\tconfig.current = this;\n\t\t\tif ( config.requireExpects && this.expected === null ) {\n\t\t\t\tthis.pushFailure( \"Expected number of assertions to be defined, but expect() was \" +\n\t\t\t\t\t\"not called.\", this.stack );\n\t\t\t} else if ( this.expected !== null && this.expected !== this.assertions.length ) {\n\t\t\t\tthis.pushFailure( \"Expected \" + this.expected + \" assertions, but \" +\n\t\t\t\t\tthis.assertions.length + \" were run\", this.stack );\n\t\t\t} else if ( this.expected === null && !this.assertions.length ) {\n\t\t\t\tthis.pushFailure( \"Expected at least one assertion, but none were run - call \" +\n\t\t\t\t\t\"expect(0) to accept zero assertions.\", this.stack );\n\t\t\t}\n\t\n\t\t\tvar i,\n\t\t\t\tbad = 0;\n\t\n\t\t\tthis.runtime = now() - this.started;\n\t\t\tconfig.stats.all += this.assertions.length;\n\t\t\tconfig.moduleStats.all += this.assertions.length;\n\t\n\t\t\tfor ( i = 0; i < this.assertions.length; i++ ) {\n\t\t\t\tif ( !this.assertions[ i ].result ) {\n\t\t\t\t\tbad++;\n\t\t\t\t\tconfig.stats.bad++;\n\t\t\t\t\tconfig.moduleStats.bad++;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"testDone\", {\n\t\t\t\tname: this.testName,\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tskipped: !!this.skip,\n\t\t\t\tfailed: bad,\n\t\t\t\tpassed: this.assertions.length - bad,\n\t\t\t\ttotal: this.assertions.length,\n\t\t\t\truntime: this.runtime,\n\t\n\t\t\t\t// HTML Reporter use\n\t\t\t\tassertions: this.assertions,\n\t\t\t\ttestId: this.testId,\n\t\n\t\t\t\t// Source of Test\n\t\t\t\tsource: this.stack,\n\t\n\t\t\t\t// DEPRECATED: this property will be removed in 2.0.0, use runtime instead\n\t\t\t\tduration: this.runtime\n\t\t\t} );\n\t\n\t\t\t// QUnit.reset() is deprecated and will be replaced for a new\n\t\t\t// fixture reset function on QUnit 2.0/2.1.\n\t\t\t// It's still called here for backwards compatibility handling\n\t\t\tQUnit.reset();\n\t\n\t\t\tconfig.current = undefined;\n\t\t},\n\t\n\t\tqueue: function() {\n\t\t\tvar priority,\n\t\t\t\ttest = this;\n\t\n\t\t\tif ( !this.valid() ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tfunction run() {\n\t\n\t\t\t\t// Each of these can by async\n\t\t\t\tsynchronize( [\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.before();\n\t\t\t\t\t},\n\t\n\t\t\t\t\ttest.hooks( \"beforeEach\" ),\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.run();\n\t\t\t\t\t},\n\t\n\t\t\t\t\ttest.hooks( \"afterEach\" ).reverse(),\n\t\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.after();\n\t\t\t\t\t},\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.finish();\n\t\t\t\t\t}\n\t\t\t\t] );\n\t\t\t}\n\t\n\t\t\t// Prioritize previously failed tests, detected from sessionStorage\n\t\t\tpriority = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + this.module.name + \"-\" + this.testName );\n\t\n\t\t\treturn synchronize( run, priority, config.seed );\n\t\t},\n\t\n\t\tpushResult: function( resultInfo ) {\n\t\n\t\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\t\tvar source,\n\t\t\t\tdetails = {\n\t\t\t\t\tmodule: this.module.name,\n\t\t\t\t\tname: this.testName,\n\t\t\t\t\tresult: resultInfo.result,\n\t\t\t\t\tmessage: resultInfo.message,\n\t\t\t\t\tactual: resultInfo.actual,\n\t\t\t\t\texpected: resultInfo.expected,\n\t\t\t\t\ttestId: this.testId,\n\t\t\t\t\tnegative: resultInfo.negative || false,\n\t\t\t\t\truntime: now() - this.started\n\t\t\t\t};\n\t\n\t\t\tif ( !resultInfo.result ) {\n\t\t\t\tsource = sourceFromStacktrace();\n\t\n\t\t\t\tif ( source ) {\n\t\t\t\t\tdetails.source = source;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"log\", details );\n\t\n\t\t\tthis.assertions.push( {\n\t\t\t\tresult: !!resultInfo.result,\n\t\t\t\tmessage: resultInfo.message\n\t\t\t} );\n\t\t},\n\t\n\t\tpushFailure: function( message, source, actual ) {\n\t\t\tif ( !( this instanceof Test ) ) {\n\t\t\t\tthrow new Error( \"pushFailure() assertion outside test context, was \" +\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t}\n\t\n\t\t\tvar details = {\n\t\t\t\t\tmodule: this.module.name,\n\t\t\t\t\tname: this.testName,\n\t\t\t\t\tresult: false,\n\t\t\t\t\tmessage: message || \"error\",\n\t\t\t\t\tactual: actual || null,\n\t\t\t\t\ttestId: this.testId,\n\t\t\t\t\truntime: now() - this.started\n\t\t\t\t};\n\t\n\t\t\tif ( source ) {\n\t\t\t\tdetails.source = source;\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"log\", details );\n\t\n\t\t\tthis.assertions.push( {\n\t\t\t\tresult: false,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tresolvePromise: function( promise, phase ) {\n\t\t\tvar then, message,\n\t\t\t\ttest = this;\n\t\t\tif ( promise != null ) {\n\t\t\t\tthen = promise.then;\n\t\t\t\tif ( QUnit.objectType( then ) === \"function\" ) {\n\t\t\t\t\tQUnit.stop();\n\t\t\t\t\tthen.call(\n\t\t\t\t\t\tpromise,\n\t\t\t\t\t\tfunction() { QUnit.start(); },\n\t\t\t\t\t\tfunction( error ) {\n\t\t\t\t\t\t\tmessage = \"Promise rejected \" +\n\t\t\t\t\t\t\t\t( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) +\n\t\t\t\t\t\t\t\t\" \" + test.testName + \": \" + ( error.message || error );\n\t\t\t\t\t\t\ttest.pushFailure( message, extractStacktrace( error, 0 ) );\n\t\n\t\t\t\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\t\t\t\tsaveGlobal();\n\t\n\t\t\t\t\t\t\t// Unblock\n\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tvalid: function() {\n\t\t\tvar filter = config.filter,\n\t\t\t\tregexFilter = /^(!?)\\/([\\w\\W]*)\\/(i?$)/.exec( filter ),\n\t\t\t\tmodule = config.module && config.module.toLowerCase(),\n\t\t\t\tfullName = ( this.module.name + \": \" + this.testName );\n\t\n\t\t\tfunction moduleChainNameMatch( testModule ) {\n\t\t\t\tvar testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\n\t\t\t\tif ( testModuleName === module ) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if ( testModule.parentModule ) {\n\t\t\t\t\treturn moduleChainNameMatch( testModule.parentModule );\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction moduleChainIdMatch( testModule ) {\n\t\t\t\treturn inArray( testModule.moduleId, config.moduleId ) > -1 ||\n\t\t\t\t\ttestModule.parentModule && moduleChainIdMatch( testModule.parentModule );\n\t\t\t}\n\t\n\t\t\t// Internally-generated tests are always valid\n\t\t\tif ( this.callback && this.callback.validTest ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\tif ( config.moduleId && config.moduleId.length > 0 &&\n\t\t\t\t!moduleChainIdMatch( this.module ) ) {\n\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( config.testId && config.testId.length > 0 &&\n\t\t\t\tinArray( this.testId, config.testId ) < 0 ) {\n\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( module && !moduleChainNameMatch( this.module ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( !filter ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\treturn regexFilter ?\n\t\t\t\tthis.regexFilter( !!regexFilter[ 1 ], regexFilter[ 2 ], regexFilter[ 3 ], fullName ) :\n\t\t\t\tthis.stringFilter( filter, fullName );\n\t\t},\n\t\n\t\tregexFilter: function( exclude, pattern, flags, fullName ) {\n\t\t\tvar regex = new RegExp( pattern, flags );\n\t\t\tvar match = regex.test( fullName );\n\t\n\t\t\treturn match !== exclude;\n\t\t},\n\t\n\t\tstringFilter: function( filter, fullName ) {\n\t\t\tfilter = filter.toLowerCase();\n\t\t\tfullName = fullName.toLowerCase();\n\t\n\t\t\tvar include = filter.charAt( 0 ) !== \"!\";\n\t\t\tif ( !include ) {\n\t\t\t\tfilter = filter.slice( 1 );\n\t\t\t}\n\t\n\t\t\t// If the filter matches, we need to honour include\n\t\t\tif ( fullName.indexOf( filter ) !== -1 ) {\n\t\t\t\treturn include;\n\t\t\t}\n\t\n\t\t\t// Otherwise, do the opposite\n\t\t\treturn !include;\n\t\t}\n\t};\n\t\n\t// Resets the test setup. Useful for tests that modify the DOM.\n\t/*\n\tDEPRECATED: Use multiple tests instead of resetting inside a test.\n\tUse testStart or testDone for custom cleanup.\n\tThis method will throw an error in 2.0, and will be removed in 2.1\n\t*/\n\tQUnit.reset = function() {\n\t\n\t\t// Return on non-browser environments\n\t\t// This is necessary to not break on node tests\n\t\tif ( !defined.document ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar fixture = defined.document && document.getElementById &&\n\t\t\t\tdocument.getElementById( \"qunit-fixture\" );\n\t\n\t\tif ( fixture ) {\n\t\t\tfixture.innerHTML = config.fixture;\n\t\t}\n\t};\n\t\n\tQUnit.pushFailure = function() {\n\t\tif ( !QUnit.config.current ) {\n\t\t\tthrow new Error( \"pushFailure() assertion outside test context, in \" +\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t}\n\t\n\t\t// Gets current test obj\n\t\tvar currentTest = QUnit.config.current;\n\t\n\t\treturn currentTest.pushFailure.apply( currentTest, arguments );\n\t};\n\t\n\t// Based on Java's String.hashCode, a simple but not\n\t// rigorously collision resistant hashing function\n\tfunction generateHash( module, testName ) {\n\t\tvar hex,\n\t\t\ti = 0,\n\t\t\thash = 0,\n\t\t\tstr = module + \"\\x1C\" + testName,\n\t\t\tlen = str.length;\n\t\n\t\tfor ( ; i < len; i++ ) {\n\t\t\thash  = ( ( hash << 5 ) - hash ) + str.charCodeAt( i );\n\t\t\thash |= 0;\n\t\t}\n\t\n\t\t// Convert the possibly negative integer hash code into an 8 character hex string, which isn't\n\t\t// strictly necessary but increases user understanding that the id is a SHA-like hash\n\t\thex = ( 0x100000000 + hash ).toString( 16 );\n\t\tif ( hex.length < 8 ) {\n\t\t\thex = \"0000000\" + hex;\n\t\t}\n\t\n\t\treturn hex.slice( -8 );\n\t}\n\t\n\tfunction synchronize( callback, priority, seed ) {\n\t\tvar last = !priority,\n\t\t\tindex;\n\t\n\t\tif ( QUnit.objectType( callback ) === \"array\" ) {\n\t\t\twhile ( callback.length ) {\n\t\t\t\tsynchronize( callback.shift() );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( priority ) {\n\t\t\tconfig.queue.splice( priorityCount++, 0, callback );\n\t\t} else if ( seed ) {\n\t\t\tif ( !unitSampler ) {\n\t\t\t\tunitSampler = unitSamplerGenerator( seed );\n\t\t\t}\n\t\n\t\t\t// Insert into a random position after all priority items\n\t\t\tindex = Math.floor( unitSampler() * ( config.queue.length - priorityCount + 1 ) );\n\t\t\tconfig.queue.splice( priorityCount + index, 0, callback );\n\t\t} else {\n\t\t\tconfig.queue.push( callback );\n\t\t}\n\t\n\t\tif ( config.autorun && !config.blocking ) {\n\t\t\tprocess( last );\n\t\t}\n\t}\n\t\n\tfunction unitSamplerGenerator( seed ) {\n\t\n\t\t// 32-bit xorshift, requires only a nonzero seed\n\t\t// http://excamera.com/sphinx/article-xorshift.html\n\t\tvar sample = parseInt( generateHash( seed ), 16 ) || -1;\n\t\treturn function() {\n\t\t\tsample ^= sample << 13;\n\t\t\tsample ^= sample >>> 17;\n\t\t\tsample ^= sample << 5;\n\t\n\t\t\t// ECMAScript has no unsigned number type\n\t\t\tif ( sample < 0 ) {\n\t\t\t\tsample += 0x100000000;\n\t\t\t}\n\t\n\t\t\treturn sample / 0x100000000;\n\t\t};\n\t}\n\t\n\tfunction saveGlobal() {\n\t\tconfig.pollution = [];\n\t\n\t\tif ( config.noglobals ) {\n\t\t\tfor ( var key in global ) {\n\t\t\t\tif ( hasOwn.call( global, key ) ) {\n\t\n\t\t\t\t\t// In Opera sometimes DOM element ids show up here, ignore them\n\t\t\t\t\tif ( /^qunit-test-output/.test( key ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconfig.pollution.push( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction checkPollution() {\n\t\tvar newGlobals,\n\t\t\tdeletedGlobals,\n\t\t\told = config.pollution;\n\t\n\t\tsaveGlobal();\n\t\n\t\tnewGlobals = diff( config.pollution, old );\n\t\tif ( newGlobals.length > 0 ) {\n\t\t\tQUnit.pushFailure( \"Introduced global variable(s): \" + newGlobals.join( \", \" ) );\n\t\t}\n\t\n\t\tdeletedGlobals = diff( old, config.pollution );\n\t\tif ( deletedGlobals.length > 0 ) {\n\t\t\tQUnit.pushFailure( \"Deleted global variable(s): \" + deletedGlobals.join( \", \" ) );\n\t\t}\n\t}\n\t\n\t// Will be exposed as QUnit.asyncTest\n\tfunction asyncTest( testName, expected, callback ) {\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tQUnit.test( testName, expected, callback, true );\n\t}\n\t\n\t// Will be exposed as QUnit.test\n\tfunction test( testName, expected, callback, async ) {\n\t\tif ( focused )  { return; }\n\t\n\t\tvar newTest;\n\t\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tnewTest = new Test( {\n\t\t\ttestName: testName,\n\t\t\texpected: expected,\n\t\t\tasync: async,\n\t\t\tcallback: callback\n\t\t} );\n\t\n\t\tnewTest.queue();\n\t}\n\t\n\t// Will be exposed as QUnit.skip\n\tfunction skip( testName ) {\n\t\tif ( focused )  { return; }\n\t\n\t\tvar test = new Test( {\n\t\t\ttestName: testName,\n\t\t\tskip: true\n\t\t} );\n\t\n\t\ttest.queue();\n\t}\n\t\n\t// Will be exposed as QUnit.only\n\tfunction only( testName, expected, callback, async ) {\n\t\tvar newTest;\n\t\n\t\tif ( focused )  { return; }\n\t\n\t\tQUnit.config.queue.length = 0;\n\t\tfocused = true;\n\t\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tnewTest = new Test( {\n\t\t\ttestName: testName,\n\t\t\texpected: expected,\n\t\t\tasync: async,\n\t\t\tcallback: callback\n\t\t} );\n\t\n\t\tnewTest.queue();\n\t}\n\t\n\tfunction Assert( testContext ) {\n\t\tthis.test = testContext;\n\t}\n\t\n\t// Assert helpers\n\tQUnit.assert = Assert.prototype = {\n\t\n\t\t// Specify the number of expected assertions to guarantee that failed test\n\t\t// (no assertions are run at all) don't slip through.\n\t\texpect: function( asserts ) {\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tthis.test.expected = asserts;\n\t\t\t} else {\n\t\t\t\treturn this.test.expected;\n\t\t\t}\n\t\t},\n\t\n\t\t// Increment this Test's semaphore counter, then return a function that\n\t\t// decrements that counter a maximum of once.\n\t\tasync: function( count ) {\n\t\t\tvar test = this.test,\n\t\t\t\tpopped = false,\n\t\t\t\tacceptCallCount = count;\n\t\n\t\t\tif ( typeof acceptCallCount === \"undefined\" ) {\n\t\t\t\tacceptCallCount = 1;\n\t\t\t}\n\t\n\t\t\ttest.semaphore += 1;\n\t\t\ttest.usedAsync = true;\n\t\t\tpauseProcessing();\n\t\n\t\t\treturn function done() {\n\t\n\t\t\t\tif ( popped ) {\n\t\t\t\t\ttest.pushFailure( \"Too many calls to the `assert.async` callback\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tacceptCallCount -= 1;\n\t\t\t\tif ( acceptCallCount > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\ttest.semaphore -= 1;\n\t\t\t\tpopped = true;\n\t\t\t\tresumeProcessing();\n\t\t\t};\n\t\t},\n\t\n\t\t// Exports test.push() to the user API\n\t\t// Alias of pushResult.\n\t\tpush: function( result, actual, expected, message, negative ) {\n\t\t\tvar currentAssert = this instanceof Assert ? this : QUnit.config.current.assert;\n\t\t\treturn currentAssert.pushResult( {\n\t\t\t\tresult: result,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: negative\n\t\t\t} );\n\t\t},\n\t\n\t\tpushResult: function( resultInfo ) {\n\t\n\t\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\t\tvar assert = this,\n\t\t\t\tcurrentTest = ( assert instanceof Assert && assert.test ) || QUnit.config.current;\n\t\n\t\t\t// Backwards compatibility fix.\n\t\t\t// Allows the direct use of global exported assertions and QUnit.assert.*\n\t\t\t// Although, it's use is not recommended as it can leak assertions\n\t\t\t// to other tests from async tests, because we only get a reference to the current test,\n\t\t\t// not exactly the test where assertion were intended to be called.\n\t\t\tif ( !currentTest ) {\n\t\t\t\tthrow new Error( \"assertion outside test context, in \" + sourceFromStacktrace( 2 ) );\n\t\t\t}\n\t\n\t\t\tif ( currentTest.usedAsync === true && currentTest.semaphore === 0 ) {\n\t\t\t\tcurrentTest.pushFailure( \"Assertion after the final `assert.async` was resolved\",\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\n\t\t\t\t// Allow this assertion to continue running anyway...\n\t\t\t}\n\t\n\t\t\tif ( !( assert instanceof Assert ) ) {\n\t\t\t\tassert = currentTest.assert;\n\t\t\t}\n\t\n\t\t\treturn assert.test.pushResult( resultInfo );\n\t\t},\n\t\n\t\tok: function( result, message ) {\n\t\t\tmessage = message || ( result ? \"okay\" : \"failed, expected argument to be truthy, was: \" +\n\t\t\t\tQUnit.dump.parse( result ) );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !!result,\n\t\t\t\tactual: result,\n\t\t\t\texpected: true,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotOk: function( result, message ) {\n\t\t\tmessage = message || ( !result ? \"okay\" : \"failed, expected argument to be falsy, was: \" +\n\t\t\t\tQUnit.dump.parse( result ) );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !result,\n\t\t\t\tactual: result,\n\t\t\t\texpected: false,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tequal: function( actual, expected, message ) {\n\t\t\t/*jshint eqeqeq:false */\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected == actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotEqual: function( actual, expected, message ) {\n\t\t\t/*jshint eqeqeq:false */\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected != actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tpropEqual: function( actual, expected, message ) {\n\t\t\tactual = objectValues( actual );\n\t\t\texpected = objectValues( expected );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotPropEqual: function( actual, expected, message ) {\n\t\t\tactual = objectValues( actual );\n\t\t\texpected = objectValues( expected );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tdeepEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotDeepEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tstrictEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected === actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotStrictEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected !== actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\t\"throws\": function( block, expected, message ) {\n\t\t\tvar actual, expectedType,\n\t\t\t\texpectedOutput = expected,\n\t\t\t\tok = false,\n\t\t\t\tcurrentTest = ( this instanceof Assert && this.test ) || QUnit.config.current;\n\t\n\t\t\t// 'expected' is optional unless doing string comparison\n\t\t\tif ( message == null && typeof expected === \"string\" ) {\n\t\t\t\tmessage = expected;\n\t\t\t\texpected = null;\n\t\t\t}\n\t\n\t\t\tcurrentTest.ignoreGlobalErrors = true;\n\t\t\ttry {\n\t\t\t\tblock.call( currentTest.testEnvironment );\n\t\t\t} catch ( e ) {\n\t\t\t\tactual = e;\n\t\t\t}\n\t\t\tcurrentTest.ignoreGlobalErrors = false;\n\t\n\t\t\tif ( actual ) {\n\t\t\t\texpectedType = QUnit.objectType( expected );\n\t\n\t\t\t\t// We don't want to validate thrown error\n\t\t\t\tif ( !expected ) {\n\t\t\t\t\tok = true;\n\t\t\t\t\texpectedOutput = null;\n\t\n\t\t\t\t// Expected is a regexp\n\t\t\t\t} else if ( expectedType === \"regexp\" ) {\n\t\t\t\t\tok = expected.test( errorString( actual ) );\n\t\n\t\t\t\t// Expected is a string\n\t\t\t\t} else if ( expectedType === \"string\" ) {\n\t\t\t\t\tok = expected === errorString( actual );\n\t\n\t\t\t\t// Expected is a constructor, maybe an Error constructor\n\t\t\t\t} else if ( expectedType === \"function\" && actual instanceof expected ) {\n\t\t\t\t\tok = true;\n\t\n\t\t\t\t// Expected is an Error object\n\t\t\t\t} else if ( expectedType === \"object\" ) {\n\t\t\t\t\tok = actual instanceof expected.constructor &&\n\t\t\t\t\t\tactual.name === expected.name &&\n\t\t\t\t\t\tactual.message === expected.message;\n\t\n\t\t\t\t// Expected is a validation function which returns true if validation passed\n\t\t\t\t} else if ( expectedType === \"function\" && expected.call( {}, actual ) === true ) {\n\t\t\t\t\texpectedOutput = null;\n\t\t\t\t\tok = true;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tcurrentTest.assert.pushResult( {\n\t\t\t\tresult: ok,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expectedOutput,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t// Provide an alternative to assert.throws(), for environments that consider throws a reserved word\n\t// Known to us are: Closure Compiler, Narwhal\n\t( function() {\n\t\t/*jshint sub:true */\n\t\tAssert.prototype.raises = Assert.prototype [ \"throws\" ]; //jscs:ignore requireDotNotation\n\t}() );\n\t\n\tfunction errorString( error ) {\n\t\tvar name, message,\n\t\t\tresultErrorString = error.toString();\n\t\tif ( resultErrorString.substring( 0, 7 ) === \"[object\" ) {\n\t\t\tname = error.name ? error.name.toString() : \"Error\";\n\t\t\tmessage = error.message ? error.message.toString() : \"\";\n\t\t\tif ( name && message ) {\n\t\t\t\treturn name + \": \" + message;\n\t\t\t} else if ( name ) {\n\t\t\t\treturn name;\n\t\t\t} else if ( message ) {\n\t\t\t\treturn message;\n\t\t\t} else {\n\t\t\t\treturn \"Error\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn resultErrorString;\n\t\t}\n\t}\n\t\n\t// Test for equality any JavaScript type.\n\t// Author: Philippe Rathé <prathe@gmail.com>\n\tQUnit.equiv = ( function() {\n\t\n\t\t// Stack to decide between skip/abort functions\n\t\tvar callers = [];\n\t\n\t\t// Stack to avoiding loops from circular referencing\n\t\tvar parents = [];\n\t\tvar parentsB = [];\n\t\n\t\tvar getProto = Object.getPrototypeOf || function( obj ) {\n\t\n\t\t\t/*jshint proto: true */\n\t\t\treturn obj.__proto__;\n\t\t};\n\t\n\t\tfunction useStrictEquality( b, a ) {\n\t\n\t\t\t// To catch short annotation VS 'new' annotation of a declaration. e.g.:\n\t\t\t// `var i = 1;`\n\t\t\t// `var j = new Number(1);`\n\t\t\tif ( typeof a === \"object\" ) {\n\t\t\t\ta = a.valueOf();\n\t\t\t}\n\t\t\tif ( typeof b === \"object\" ) {\n\t\t\t\tb = b.valueOf();\n\t\t\t}\n\t\n\t\t\treturn a === b;\n\t\t}\n\t\n\t\tfunction compareConstructors( a, b ) {\n\t\t\tvar protoA = getProto( a );\n\t\t\tvar protoB = getProto( b );\n\t\n\t\t\t// Comparing constructors is more strict than using `instanceof`\n\t\t\tif ( a.constructor === b.constructor ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\t// Ref #851\n\t\t\t// If the obj prototype descends from a null constructor, treat it\n\t\t\t// as a null prototype.\n\t\t\tif ( protoA && protoA.constructor === null ) {\n\t\t\t\tprotoA = null;\n\t\t\t}\n\t\t\tif ( protoB && protoB.constructor === null ) {\n\t\t\t\tprotoB = null;\n\t\t\t}\n\t\n\t\t\t// Allow objects with no prototype to be equivalent to\n\t\t\t// objects with Object as their constructor.\n\t\t\tif ( ( protoA === null && protoB === Object.prototype ) ||\n\t\t\t\t\t( protoB === null && protoA === Object.prototype ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\t}\n\t\n\t\tfunction getRegExpFlags( regexp ) {\n\t\t\treturn \"flags\" in regexp ? regexp.flags : regexp.toString().match( /[gimuy]*$/ )[ 0 ];\n\t\t}\n\t\n\t\tvar callbacks = {\n\t\t\t\"string\": useStrictEquality,\n\t\t\t\"boolean\": useStrictEquality,\n\t\t\t\"number\": useStrictEquality,\n\t\t\t\"null\": useStrictEquality,\n\t\t\t\"undefined\": useStrictEquality,\n\t\t\t\"symbol\": useStrictEquality,\n\t\t\t\"date\": useStrictEquality,\n\t\n\t\t\t\"nan\": function() {\n\t\t\t\treturn true;\n\t\t\t},\n\t\n\t\t\t\"regexp\": function( b, a ) {\n\t\t\t\treturn a.source === b.source &&\n\t\n\t\t\t\t\t// Include flags in the comparison\n\t\t\t\t\tgetRegExpFlags( a ) === getRegExpFlags( b );\n\t\t\t},\n\t\n\t\t\t// - skip when the property is a method of an instance (OOP)\n\t\t\t// - abort otherwise,\n\t\t\t// initial === would have catch identical references anyway\n\t\t\t\"function\": function() {\n\t\t\t\tvar caller = callers[ callers.length - 1 ];\n\t\t\t\treturn caller !== Object && typeof caller !== \"undefined\";\n\t\t\t},\n\t\n\t\t\t\"array\": function( b, a ) {\n\t\t\t\tvar i, j, len, loop, aCircular, bCircular;\n\t\n\t\t\t\tlen = a.length;\n\t\t\t\tif ( len !== b.length ) {\n\t\n\t\t\t\t\t// Safe and faster\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\t// Track reference to avoid circular references\n\t\t\t\tparents.push( a );\n\t\t\t\tparentsB.push( b );\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tloop = false;\n\t\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparents.pop();\n\t\t\t\tparentsB.pop();\n\t\t\t\treturn true;\n\t\t\t},\n\t\n\t\t\t\"set\": function( b, a ) {\n\t\t\t\tvar innerEq,\n\t\t\t\t\touterEq = true;\n\t\n\t\t\t\tif ( a.size !== b.size ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\ta.forEach( function( aVal ) {\n\t\t\t\t\tinnerEq = false;\n\t\n\t\t\t\t\tb.forEach( function( bVal ) {\n\t\t\t\t\t\tif ( innerEquiv( bVal, aVal ) ) {\n\t\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\t\touterEq = false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\n\t\t\t\treturn outerEq;\n\t\t\t},\n\t\n\t\t\t\"map\": function( b, a ) {\n\t\t\t\tvar innerEq,\n\t\t\t\t\touterEq = true;\n\t\n\t\t\t\tif ( a.size !== b.size ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\ta.forEach( function( aVal, aKey ) {\n\t\t\t\t\tinnerEq = false;\n\t\n\t\t\t\t\tb.forEach( function( bVal, bKey ) {\n\t\t\t\t\t\tif ( innerEquiv( [ bVal, bKey ], [ aVal, aKey ] ) ) {\n\t\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\t\touterEq = false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\n\t\t\t\treturn outerEq;\n\t\t\t},\n\t\n\t\t\t\"object\": function( b, a ) {\n\t\t\t\tvar i, j, loop, aCircular, bCircular;\n\t\n\t\t\t\t// Default to true\n\t\t\t\tvar eq = true;\n\t\t\t\tvar aProperties = [];\n\t\t\t\tvar bProperties = [];\n\t\n\t\t\t\tif ( compareConstructors( a, b ) === false ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\t// Stack constructor before traversing properties\n\t\t\t\tcallers.push( a.constructor );\n\t\n\t\t\t\t// Track reference to avoid circular references\n\t\t\t\tparents.push( a );\n\t\t\t\tparentsB.push( b );\n\t\n\t\t\t\t// Be strict: don't ensure hasOwnProperty and go deep\n\t\t\t\tfor ( i in a ) {\n\t\t\t\t\tloop = false;\n\t\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\teq = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\taProperties.push( i );\n\t\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\t\teq = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tparents.pop();\n\t\t\t\tparentsB.pop();\n\t\n\t\t\t\t// Unstack, we are done\n\t\t\t\tcallers.pop();\n\t\n\t\t\t\tfor ( i in b ) {\n\t\n\t\t\t\t\t// Collect b's properties\n\t\t\t\t\tbProperties.push( i );\n\t\t\t\t}\n\t\n\t\t\t\t// Ensures identical properties name\n\t\t\t\treturn eq && innerEquiv( aProperties.sort(), bProperties.sort() );\n\t\t\t}\n\t\t};\n\t\n\t\tfunction typeEquiv( a, b ) {\n\t\t\tvar type = QUnit.objectType( a );\n\t\t\treturn QUnit.objectType( b ) === type && callbacks[ type ]( b, a );\n\t\t}\n\t\n\t\t// The real equiv function\n\t\tfunction innerEquiv( a, b ) {\n\t\n\t\t\t// We're done when there's nothing more to compare\n\t\t\tif ( arguments.length < 2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\t// Require type-specific equality\n\t\t\treturn ( a === b || typeEquiv( a, b ) ) &&\n\t\n\t\t\t\t// ...across all consecutive argument pairs\n\t\t\t\t( arguments.length === 2 || innerEquiv.apply( this, [].slice.call( arguments, 1 ) ) );\n\t\t}\n\t\n\t\treturn innerEquiv;\n\t}() );\n\t\n\t// Based on jsDump by Ariel Flesler\n\t// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html\n\tQUnit.dump = ( function() {\n\t\tfunction quote( str ) {\n\t\t\treturn \"\\\"\" + str.toString().replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\"/g, \"\\\\\\\"\" ) + \"\\\"\";\n\t\t}\n\t\tfunction literal( o ) {\n\t\t\treturn o + \"\";\n\t\t}\n\t\tfunction join( pre, arr, post ) {\n\t\t\tvar s = dump.separator(),\n\t\t\t\tbase = dump.indent(),\n\t\t\t\tinner = dump.indent( 1 );\n\t\t\tif ( arr.join ) {\n\t\t\t\tarr = arr.join( \",\" + s + inner );\n\t\t\t}\n\t\t\tif ( !arr ) {\n\t\t\t\treturn pre + post;\n\t\t\t}\n\t\t\treturn [ pre, inner + arr, base + post ].join( s );\n\t\t}\n\t\tfunction array( arr, stack ) {\n\t\t\tvar i = arr.length,\n\t\t\t\tret = new Array( i );\n\t\n\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\treturn \"[object Array]\";\n\t\t\t}\n\t\n\t\t\tthis.up();\n\t\t\twhile ( i-- ) {\n\t\t\t\tret[ i ] = this.parse( arr[ i ], undefined, stack );\n\t\t\t}\n\t\t\tthis.down();\n\t\t\treturn join( \"[\", ret, \"]\" );\n\t\t}\n\t\n\t\tvar reName = /^function (\\w+)/,\n\t\t\tdump = {\n\t\n\t\t\t\t// The objType is used mostly internally, you can fix a (custom) type in advance\n\t\t\t\tparse: function( obj, objType, stack ) {\n\t\t\t\t\tstack = stack || [];\n\t\t\t\t\tvar res, parser, parserType,\n\t\t\t\t\t\tinStack = inArray( obj, stack );\n\t\n\t\t\t\t\tif ( inStack !== -1 ) {\n\t\t\t\t\t\treturn \"recursion(\" + ( inStack - stack.length ) + \")\";\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobjType = objType || this.typeOf( obj  );\n\t\t\t\t\tparser = this.parsers[ objType ];\n\t\t\t\t\tparserType = typeof parser;\n\t\n\t\t\t\t\tif ( parserType === \"function\" ) {\n\t\t\t\t\t\tstack.push( obj );\n\t\t\t\t\t\tres = parser.call( this, obj, stack );\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t\treturn ( parserType === \"string\" ) ? parser : this.parsers.error;\n\t\t\t\t},\n\t\t\t\ttypeOf: function( obj ) {\n\t\t\t\t\tvar type;\n\t\t\t\t\tif ( obj === null ) {\n\t\t\t\t\t\ttype = \"null\";\n\t\t\t\t\t} else if ( typeof obj === \"undefined\" ) {\n\t\t\t\t\t\ttype = \"undefined\";\n\t\t\t\t\t} else if ( QUnit.is( \"regexp\", obj ) ) {\n\t\t\t\t\t\ttype = \"regexp\";\n\t\t\t\t\t} else if ( QUnit.is( \"date\", obj ) ) {\n\t\t\t\t\t\ttype = \"date\";\n\t\t\t\t\t} else if ( QUnit.is( \"function\", obj ) ) {\n\t\t\t\t\t\ttype = \"function\";\n\t\t\t\t\t} else if ( obj.setInterval !== undefined &&\n\t\t\t\t\t\t\tobj.document !== undefined &&\n\t\t\t\t\t\t\tobj.nodeType === undefined ) {\n\t\t\t\t\t\ttype = \"window\";\n\t\t\t\t\t} else if ( obj.nodeType === 9 ) {\n\t\t\t\t\t\ttype = \"document\";\n\t\t\t\t\t} else if ( obj.nodeType ) {\n\t\t\t\t\t\ttype = \"node\";\n\t\t\t\t\t} else if (\n\t\n\t\t\t\t\t\t// Native arrays\n\t\t\t\t\t\ttoString.call( obj ) === \"[object Array]\" ||\n\t\n\t\t\t\t\t\t// NodeList objects\n\t\t\t\t\t\t( typeof obj.length === \"number\" && obj.item !== undefined &&\n\t\t\t\t\t\t( obj.length ? obj.item( 0 ) === obj[ 0 ] : ( obj.item( 0 ) === null &&\n\t\t\t\t\t\tobj[ 0 ] === undefined ) ) )\n\t\t\t\t\t) {\n\t\t\t\t\t\ttype = \"array\";\n\t\t\t\t\t} else if ( obj.constructor === Error.prototype.constructor ) {\n\t\t\t\t\t\ttype = \"error\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = typeof obj;\n\t\t\t\t\t}\n\t\t\t\t\treturn type;\n\t\t\t\t},\n\t\n\t\t\t\tseparator: function() {\n\t\t\t\t\treturn this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&#160;\" : \" \";\n\t\t\t\t},\n\t\n\t\t\t\t// Extra can be a number, shortcut for increasing-calling-decreasing\n\t\t\t\tindent: function( extra ) {\n\t\t\t\t\tif ( !this.multiline ) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\tvar chr = this.indentChar;\n\t\t\t\t\tif ( this.HTML ) {\n\t\t\t\t\t\tchr = chr.replace( /\\t/g, \"   \" ).replace( / /g, \"&#160;\" );\n\t\t\t\t\t}\n\t\t\t\t\treturn new Array( this.depth + ( extra || 0 ) ).join( chr );\n\t\t\t\t},\n\t\t\t\tup: function( a ) {\n\t\t\t\t\tthis.depth += a || 1;\n\t\t\t\t},\n\t\t\t\tdown: function( a ) {\n\t\t\t\t\tthis.depth -= a || 1;\n\t\t\t\t},\n\t\t\t\tsetParser: function( name, parser ) {\n\t\t\t\t\tthis.parsers[ name ] = parser;\n\t\t\t\t},\n\t\n\t\t\t\t// The next 3 are exposed so you can use them\n\t\t\t\tquote: quote,\n\t\t\t\tliteral: literal,\n\t\t\t\tjoin: join,\n\t\t\t\tdepth: 1,\n\t\t\t\tmaxDepth: QUnit.config.maxDepth,\n\t\n\t\t\t\t// This is the list of parsers, to modify them, use dump.setParser\n\t\t\t\tparsers: {\n\t\t\t\t\twindow: \"[Window]\",\n\t\t\t\t\tdocument: \"[Document]\",\n\t\t\t\t\terror: function( error ) {\n\t\t\t\t\t\treturn \"Error(\\\"\" + error.message + \"\\\")\";\n\t\t\t\t\t},\n\t\t\t\t\tunknown: \"[Unknown]\",\n\t\t\t\t\t\"null\": \"null\",\n\t\t\t\t\t\"undefined\": \"undefined\",\n\t\t\t\t\t\"function\": function( fn ) {\n\t\t\t\t\t\tvar ret = \"function\",\n\t\n\t\t\t\t\t\t\t// Functions never have name in IE\n\t\t\t\t\t\t\tname = \"name\" in fn ? fn.name : ( reName.exec( fn ) || [] )[ 1 ];\n\t\n\t\t\t\t\t\tif ( name ) {\n\t\t\t\t\t\t\tret += \" \" + name;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tret += \"(\";\n\t\n\t\t\t\t\t\tret = [ ret, dump.parse( fn, \"functionArgs\" ), \"){\" ].join( \"\" );\n\t\t\t\t\t\treturn join( ret, dump.parse( fn, \"functionCode\" ), \"}\" );\n\t\t\t\t\t},\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnodelist: array,\n\t\t\t\t\t\"arguments\": array,\n\t\t\t\t\tobject: function( map, stack ) {\n\t\t\t\t\t\tvar keys, key, val, i, nonEnumerableProperties,\n\t\t\t\t\t\t\tret = [];\n\t\n\t\t\t\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\t\t\t\treturn \"[object Object]\";\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tdump.up();\n\t\t\t\t\t\tkeys = [];\n\t\t\t\t\t\tfor ( key in map ) {\n\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Some properties are not always enumerable on Error objects.\n\t\t\t\t\t\tnonEnumerableProperties = [ \"message\", \"name\" ];\n\t\t\t\t\t\tfor ( i in nonEnumerableProperties ) {\n\t\t\t\t\t\t\tkey = nonEnumerableProperties[ i ];\n\t\t\t\t\t\t\tif ( key in map && inArray( key, keys ) < 0 ) {\n\t\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tkeys.sort();\n\t\t\t\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\t\t\tval = map[ key ];\n\t\t\t\t\t\t\tret.push( dump.parse( key, \"key\" ) + \": \" +\n\t\t\t\t\t\t\t\tdump.parse( val, undefined, stack ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdump.down();\n\t\t\t\t\t\treturn join( \"{\", ret, \"}\" );\n\t\t\t\t\t},\n\t\t\t\t\tnode: function( node ) {\n\t\t\t\t\t\tvar len, i, val,\n\t\t\t\t\t\t\topen = dump.HTML ? \"&lt;\" : \"<\",\n\t\t\t\t\t\t\tclose = dump.HTML ? \"&gt;\" : \">\",\n\t\t\t\t\t\t\ttag = node.nodeName.toLowerCase(),\n\t\t\t\t\t\t\tret = open + tag,\n\t\t\t\t\t\t\tattrs = node.attributes;\n\t\n\t\t\t\t\t\tif ( attrs ) {\n\t\t\t\t\t\t\tfor ( i = 0, len = attrs.length; i < len; i++ ) {\n\t\t\t\t\t\t\t\tval = attrs[ i ].nodeValue;\n\t\n\t\t\t\t\t\t\t\t// IE6 includes all attributes in .attributes, even ones not explicitly\n\t\t\t\t\t\t\t\t// set. Those have values like undefined, null, 0, false, \"\" or\n\t\t\t\t\t\t\t\t// \"inherit\".\n\t\t\t\t\t\t\t\tif ( val && val !== \"inherit\" ) {\n\t\t\t\t\t\t\t\t\tret += \" \" + attrs[ i ].nodeName + \"=\" +\n\t\t\t\t\t\t\t\t\t\tdump.parse( val, \"attribute\" );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tret += close;\n\t\n\t\t\t\t\t\t// Show content of TextNode or CDATASection\n\t\t\t\t\t\tif ( node.nodeType === 3 || node.nodeType === 4 ) {\n\t\t\t\t\t\t\tret += node.nodeValue;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn ret + open + \"/\" + tag + close;\n\t\t\t\t\t},\n\t\n\t\t\t\t\t// Function calls it internally, it's the arguments part of the function\n\t\t\t\t\tfunctionArgs: function( fn ) {\n\t\t\t\t\t\tvar args,\n\t\t\t\t\t\t\tl = fn.length;\n\t\n\t\t\t\t\t\tif ( !l ) {\n\t\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\targs = new Array( l );\n\t\t\t\t\t\twhile ( l-- ) {\n\t\n\t\t\t\t\t\t\t// 97 is 'a'\n\t\t\t\t\t\t\targs[ l ] = String.fromCharCode( 97 + l );\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn \" \" + args.join( \", \" ) + \" \";\n\t\t\t\t\t},\n\t\n\t\t\t\t\t// Object calls it internally, the key part of an item in a map\n\t\t\t\t\tkey: quote,\n\t\n\t\t\t\t\t// Function calls it internally, it's the content of the function\n\t\t\t\t\tfunctionCode: \"[code]\",\n\t\n\t\t\t\t\t// Node calls it internally, it's a html attribute value\n\t\t\t\t\tattribute: quote,\n\t\t\t\t\tstring: quote,\n\t\t\t\t\tdate: quote,\n\t\t\t\t\tregexp: literal,\n\t\t\t\t\tnumber: literal,\n\t\t\t\t\t\"boolean\": literal\n\t\t\t\t},\n\t\n\t\t\t\t// If true, entities are escaped ( <, >, \\t, space and \\n )\n\t\t\t\tHTML: false,\n\t\n\t\t\t\t// Indentation unit\n\t\t\t\tindentChar: \"  \",\n\t\n\t\t\t\t// If true, items in a collection, are separated by a \\n, else just a space.\n\t\t\t\tmultiline: true\n\t\t\t};\n\t\n\t\treturn dump;\n\t}() );\n\t\n\t// Back compat\n\tQUnit.jsDump = QUnit.dump;\n\t\n\t// Deprecated\n\t// Extend assert methods to QUnit for Backwards compatibility\n\t( function() {\n\t\tvar i,\n\t\t\tassertions = Assert.prototype;\n\t\n\t\tfunction applyCurrent( current ) {\n\t\t\treturn function() {\n\t\t\t\tvar assert = new Assert( QUnit.config.current );\n\t\t\t\tcurrent.apply( assert, arguments );\n\t\t\t};\n\t\t}\n\t\n\t\tfor ( i in assertions ) {\n\t\t\tQUnit[ i ] = applyCurrent( assertions[ i ] );\n\t\t}\n\t}() );\n\t\n\t// For browser, export only select globals\n\tif ( defined.document ) {\n\t\n\t\t( function() {\n\t\t\tvar i, l,\n\t\t\t\tkeys = [\n\t\t\t\t\t\"test\",\n\t\t\t\t\t\"module\",\n\t\t\t\t\t\"expect\",\n\t\t\t\t\t\"asyncTest\",\n\t\t\t\t\t\"start\",\n\t\t\t\t\t\"stop\",\n\t\t\t\t\t\"ok\",\n\t\t\t\t\t\"notOk\",\n\t\t\t\t\t\"equal\",\n\t\t\t\t\t\"notEqual\",\n\t\t\t\t\t\"propEqual\",\n\t\t\t\t\t\"notPropEqual\",\n\t\t\t\t\t\"deepEqual\",\n\t\t\t\t\t\"notDeepEqual\",\n\t\t\t\t\t\"strictEqual\",\n\t\t\t\t\t\"notStrictEqual\",\n\t\t\t\t\t\"throws\",\n\t\t\t\t\t\"raises\"\n\t\t\t\t];\n\t\n\t\t\tfor ( i = 0, l = keys.length; i < l; i++ ) {\n\t\t\t\twindow[ keys[ i ] ] = QUnit[ keys[ i ] ];\n\t\t\t}\n\t\t}() );\n\t\n\t\twindow.QUnit = QUnit;\n\t}\n\t\n\t// For nodejs\n\tif ( typeof module !== \"undefined\" && module && module.exports ) {\n\t\tmodule.exports = QUnit;\n\t\n\t\t// For consistency with CommonJS environments' exports\n\t\tmodule.exports.QUnit = QUnit;\n\t}\n\t\n\t// For CommonJS with exports, but without module.exports, like Rhino\n\tif ( typeof exports !== \"undefined\" && exports ) {\n\t\texports.QUnit = QUnit;\n\t}\n\t\n\tif ( true ) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn QUnit;\n\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\tQUnit.config.autostart = false;\n\t}\n\t\n\t// Get a reference to the global object, like window in browsers\n\t}( ( function() {\n\t\treturn this;\n\t}() ) ) );\n\t\n\t( function() {\n\t\n\t// Only interact with URLs via window.location\n\tvar location = typeof window !== \"undefined\" && window.location;\n\tif ( !location ) {\n\t\treturn;\n\t}\n\t\n\tvar urlParams = getUrlParams();\n\t\n\tQUnit.urlParams = urlParams;\n\t\n\t// Match module/test by inclusion in an array\n\tQUnit.config.moduleId = [].concat( urlParams.moduleId || [] );\n\tQUnit.config.testId = [].concat( urlParams.testId || [] );\n\t\n\t// Exact case-insensitive match of the module name\n\tQUnit.config.module = urlParams.module;\n\t\n\t// Regular expression or case-insenstive substring match against \"moduleName: testName\"\n\tQUnit.config.filter = urlParams.filter;\n\t\n\t// Test order randomization\n\tif ( urlParams.seed === true ) {\n\t\n\t\t// Generate a random seed if the option is specified without a value\n\t\tQUnit.config.seed = Math.random().toString( 36 ).slice( 2 );\n\t} else if ( urlParams.seed ) {\n\t\tQUnit.config.seed = urlParams.seed;\n\t}\n\t\n\t// Add URL-parameter-mapped config values with UI form rendering data\n\tQUnit.config.urlConfig.push(\n\t\t{\n\t\t\tid: \"hidepassed\",\n\t\t\tlabel: \"Hide passed tests\",\n\t\t\ttooltip: \"Only show tests and assertions that fail. Stored as query-strings.\"\n\t\t},\n\t\t{\n\t\t\tid: \"noglobals\",\n\t\t\tlabel: \"Check for Globals\",\n\t\t\ttooltip: \"Enabling this will test if any test introduces new properties on the \" +\n\t\t\t\t\"global object (`window` in Browsers). Stored as query-strings.\"\n\t\t},\n\t\t{\n\t\t\tid: \"notrycatch\",\n\t\t\tlabel: \"No try-catch\",\n\t\t\ttooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging \" +\n\t\t\t\t\"exceptions in IE reasonable. Stored as query-strings.\"\n\t\t}\n\t);\n\t\n\tQUnit.begin( function() {\n\t\tvar i, option,\n\t\t\turlConfig = QUnit.config.urlConfig;\n\t\n\t\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\t\n\t\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\t\toption = QUnit.config.urlConfig[ i ];\n\t\t\tif ( typeof option !== \"string\" ) {\n\t\t\t\toption = option.id;\n\t\t\t}\n\t\n\t\t\tif ( QUnit.config[ option ] === undefined ) {\n\t\t\t\tQUnit.config[ option ] = urlParams[ option ];\n\t\t\t}\n\t\t}\n\t} );\n\t\n\tfunction getUrlParams() {\n\t\tvar i, param, name, value;\n\t\tvar urlParams = {};\n\t\tvar params = location.search.slice( 1 ).split( \"&\" );\n\t\tvar length = params.length;\n\t\n\t\tfor ( i = 0; i < length; i++ ) {\n\t\t\tif ( params[ i ] ) {\n\t\t\t\tparam = params[ i ].split( \"=\" );\n\t\t\t\tname = decodeURIComponent( param[ 0 ] );\n\t\n\t\t\t\t// Allow just a key to turn on a flag, e.g., test.html?noglobals\n\t\t\t\tvalue = param.length === 1 ||\n\t\t\t\t\tdecodeURIComponent( param.slice( 1 ).join( \"=\" ) ) ;\n\t\t\t\tif ( urlParams[ name ] ) {\n\t\t\t\t\turlParams[ name ] = [].concat( urlParams[ name ], value );\n\t\t\t\t} else {\n\t\t\t\t\turlParams[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn urlParams;\n\t}\n\t\n\t// Don't load the HTML Reporter on non-browser environments\n\tif ( typeof window === \"undefined\" || !window.document ) {\n\t\treturn;\n\t}\n\t\n\t// Deprecated QUnit.init - Ref #530\n\t// Re-initialize the configuration options\n\tQUnit.init = function() {\n\t\tvar config = QUnit.config;\n\t\n\t\tconfig.stats = { all: 0, bad: 0 };\n\t\tconfig.moduleStats = { all: 0, bad: 0 };\n\t\tconfig.started = 0;\n\t\tconfig.updateRate = 1000;\n\t\tconfig.blocking = false;\n\t\tconfig.autostart = true;\n\t\tconfig.autorun = false;\n\t\tconfig.filter = \"\";\n\t\tconfig.queue = [];\n\t\n\t\tappendInterface();\n\t};\n\t\n\tvar config = QUnit.config,\n\t\tdocument = window.document,\n\t\tcollapseNext = false,\n\t\thasOwn = Object.prototype.hasOwnProperty,\n\t\tunfilteredUrl = setUrl( { filter: undefined, module: undefined,\n\t\t\tmoduleId: undefined, testId: undefined } ),\n\t\tdefined = {\n\t\t\tsessionStorage: ( function() {\n\t\t\t\tvar x = \"qunit-test-string\";\n\t\t\t\ttry {\n\t\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\t\treturn true;\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}() )\n\t\t},\n\t\tmodulesList = [];\n\t\n\t/**\n\t* Escape text for attribute or text content.\n\t*/\n\tfunction escapeText( s ) {\n\t\tif ( !s ) {\n\t\t\treturn \"\";\n\t\t}\n\t\ts = s + \"\";\n\t\n\t\t// Both single quotes and double quotes (for attributes)\n\t\treturn s.replace( /['\"<>&]/g, function( s ) {\n\t\t\tswitch ( s ) {\n\t\t\tcase \"'\":\n\t\t\t\treturn \"&#039;\";\n\t\t\tcase \"\\\"\":\n\t\t\t\treturn \"&quot;\";\n\t\t\tcase \"<\":\n\t\t\t\treturn \"&lt;\";\n\t\t\tcase \">\":\n\t\t\t\treturn \"&gt;\";\n\t\t\tcase \"&\":\n\t\t\t\treturn \"&amp;\";\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t/**\n\t * @param {HTMLElement} elem\n\t * @param {string} type\n\t * @param {Function} fn\n\t */\n\tfunction addEvent( elem, type, fn ) {\n\t\tif ( elem.addEventListener ) {\n\t\n\t\t\t// Standards-based browsers\n\t\t\telem.addEventListener( type, fn, false );\n\t\t} else if ( elem.attachEvent ) {\n\t\n\t\t\t// Support: IE <9\n\t\t\telem.attachEvent( \"on\" + type, function() {\n\t\t\t\tvar event = window.event;\n\t\t\t\tif ( !event.target ) {\n\t\t\t\t\tevent.target = event.srcElement || document;\n\t\t\t\t}\n\t\n\t\t\t\tfn.call( elem, event );\n\t\t\t} );\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {Array|NodeList} elems\n\t * @param {string} type\n\t * @param {Function} fn\n\t */\n\tfunction addEvents( elems, type, fn ) {\n\t\tvar i = elems.length;\n\t\twhile ( i-- ) {\n\t\t\taddEvent( elems[ i ], type, fn );\n\t\t}\n\t}\n\t\n\tfunction hasClass( elem, name ) {\n\t\treturn ( \" \" + elem.className + \" \" ).indexOf( \" \" + name + \" \" ) >= 0;\n\t}\n\t\n\tfunction addClass( elem, name ) {\n\t\tif ( !hasClass( elem, name ) ) {\n\t\t\telem.className += ( elem.className ? \" \" : \"\" ) + name;\n\t\t}\n\t}\n\t\n\tfunction toggleClass( elem, name, force ) {\n\t\tif ( force || typeof force === \"undefined\" && !hasClass( elem, name ) ) {\n\t\t\taddClass( elem, name );\n\t\t} else {\n\t\t\tremoveClass( elem, name );\n\t\t}\n\t}\n\t\n\tfunction removeClass( elem, name ) {\n\t\tvar set = \" \" + elem.className + \" \";\n\t\n\t\t// Class name may appear multiple times\n\t\twhile ( set.indexOf( \" \" + name + \" \" ) >= 0 ) {\n\t\t\tset = set.replace( \" \" + name + \" \", \" \" );\n\t\t}\n\t\n\t\t// Trim for prettiness\n\t\telem.className = typeof set.trim === \"function\" ? set.trim() : set.replace( /^\\s+|\\s+$/g, \"\" );\n\t}\n\t\n\tfunction id( name ) {\n\t\treturn document.getElementById && document.getElementById( name );\n\t}\n\t\n\tfunction getUrlConfigHtml() {\n\t\tvar i, j, val,\n\t\t\tescaped, escapedTooltip,\n\t\t\tselection = false,\n\t\t\turlConfig = config.urlConfig,\n\t\t\turlConfigHtml = \"\";\n\t\n\t\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\t\n\t\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\t\tval = config.urlConfig[ i ];\n\t\t\tif ( typeof val === \"string\" ) {\n\t\t\t\tval = {\n\t\t\t\t\tid: val,\n\t\t\t\t\tlabel: val\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\tescaped = escapeText( val.id );\n\t\t\tescapedTooltip = escapeText( val.tooltip );\n\t\n\t\t\tif ( !val.value || typeof val.value === \"string\" ) {\n\t\t\t\turlConfigHtml += \"<input id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' name='\" + escaped + \"' type='checkbox'\" +\n\t\t\t\t\t( val.value ? \" value='\" + escapeText( val.value ) + \"'\" : \"\" ) +\n\t\t\t\t\t( config[ val.id ] ? \" checked='checked'\" : \"\" ) +\n\t\t\t\t\t\" title='\" + escapedTooltip + \"' /><label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label + \"</label>\";\n\t\t\t} else {\n\t\t\t\turlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label +\n\t\t\t\t\t\": </label><select id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' name='\" + escaped + \"' title='\" + escapedTooltip + \"'><option></option>\";\n\t\n\t\t\t\tif ( QUnit.is( \"array\", val.value ) ) {\n\t\t\t\t\tfor ( j = 0; j < val.value.length; j++ ) {\n\t\t\t\t\t\tescaped = escapeText( val.value[ j ] );\n\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped + \"'\" +\n\t\t\t\t\t\t\t( config[ val.id ] === val.value[ j ] ?\n\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\">\" + escaped + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( j in val.value ) {\n\t\t\t\t\t\tif ( hasOwn.call( val.value, j ) ) {\n\t\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escapeText( j ) + \"'\" +\n\t\t\t\t\t\t\t\t( config[ val.id ] === j ?\n\t\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\t\">\" + escapeText( val.value[ j ] ) + \"</option>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( config[ val.id ] && !selection ) {\n\t\t\t\t\tescaped = escapeText( config[ val.id ] );\n\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped +\n\t\t\t\t\t\t\"' selected='selected' disabled='disabled'>\" + escaped + \"</option>\";\n\t\t\t\t}\n\t\t\t\turlConfigHtml += \"</select>\";\n\t\t\t}\n\t\t}\n\t\n\t\treturn urlConfigHtml;\n\t}\n\t\n\t// Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.\n\t// Updates the URL with the new state of `config.urlConfig` values.\n\tfunction toolbarChanged() {\n\t\tvar updatedUrl, value, tests,\n\t\t\tfield = this,\n\t\t\tparams = {};\n\t\n\t\t// Detect if field is a select menu or a checkbox\n\t\tif ( \"selectedIndex\" in field ) {\n\t\t\tvalue = field.options[ field.selectedIndex ].value || undefined;\n\t\t} else {\n\t\t\tvalue = field.checked ? ( field.defaultValue || true ) : undefined;\n\t\t}\n\t\n\t\tparams[ field.name ] = value;\n\t\tupdatedUrl = setUrl( params );\n\t\n\t\t// Check if we can apply the change without a page refresh\n\t\tif ( \"hidepassed\" === field.name && \"replaceState\" in window.history ) {\n\t\t\tQUnit.urlParams[ field.name ] = value;\n\t\t\tconfig[ field.name ] = value || false;\n\t\t\ttests = id( \"qunit-tests\" );\n\t\t\tif ( tests ) {\n\t\t\t\ttoggleClass( tests, \"hidepass\", value || false );\n\t\t\t}\n\t\t\twindow.history.replaceState( null, \"\", updatedUrl );\n\t\t} else {\n\t\t\twindow.location = updatedUrl;\n\t\t}\n\t}\n\t\n\tfunction setUrl( params ) {\n\t\tvar key, arrValue, i,\n\t\t\tquerystring = \"?\",\n\t\t\tlocation = window.location;\n\t\n\t\tparams = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\n\t\n\t\tfor ( key in params ) {\n\t\n\t\t\t// Skip inherited or undefined properties\n\t\t\tif ( hasOwn.call( params, key ) && params[ key ] !== undefined ) {\n\t\n\t\t\t\t// Output a parameter for each value of this key (but usually just one)\n\t\t\t\tarrValue = [].concat( params[ key ] );\n\t\t\t\tfor ( i = 0; i < arrValue.length; i++ ) {\n\t\t\t\t\tquerystring += encodeURIComponent( key );\n\t\t\t\t\tif ( arrValue[ i ] !== true ) {\n\t\t\t\t\t\tquerystring += \"=\" + encodeURIComponent( arrValue[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tquerystring += \"&\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn location.protocol + \"//\" + location.host +\n\t\t\tlocation.pathname + querystring.slice( 0, -1 );\n\t}\n\t\n\tfunction applyUrlParams() {\n\t\tvar selectedModule,\n\t\t\tmodulesList = id( \"qunit-modulefilter\" ),\n\t\t\tfilter = id( \"qunit-filter-input\" ).value;\n\t\n\t\tselectedModule = modulesList ?\n\t\t\tdecodeURIComponent( modulesList.options[ modulesList.selectedIndex ].value ) :\n\t\t\tundefined;\n\t\n\t\twindow.location = setUrl( {\n\t\t\tmodule: ( selectedModule === \"\" ) ? undefined : selectedModule,\n\t\t\tfilter: ( filter === \"\" ) ? undefined : filter,\n\t\n\t\t\t// Remove moduleId and testId filters\n\t\t\tmoduleId: undefined,\n\t\t\ttestId: undefined\n\t\t} );\n\t}\n\t\n\tfunction toolbarUrlConfigContainer() {\n\t\tvar urlConfigContainer = document.createElement( \"span\" );\n\t\n\t\turlConfigContainer.innerHTML = getUrlConfigHtml();\n\t\taddClass( urlConfigContainer, \"qunit-url-config\" );\n\t\n\t\t// For oldIE support:\n\t\t// * Add handlers to the individual elements instead of the container\n\t\t// * Use \"click\" instead of \"change\" for checkboxes\n\t\taddEvents( urlConfigContainer.getElementsByTagName( \"input\" ), \"click\", toolbarChanged );\n\t\taddEvents( urlConfigContainer.getElementsByTagName( \"select\" ), \"change\", toolbarChanged );\n\t\n\t\treturn urlConfigContainer;\n\t}\n\t\n\tfunction toolbarLooseFilter() {\n\t\tvar filter = document.createElement( \"form\" ),\n\t\t\tlabel = document.createElement( \"label\" ),\n\t\t\tinput = document.createElement( \"input\" ),\n\t\t\tbutton = document.createElement( \"button\" );\n\t\n\t\taddClass( filter, \"qunit-filter\" );\n\t\n\t\tlabel.innerHTML = \"Filter: \";\n\t\n\t\tinput.type = \"text\";\n\t\tinput.value = config.filter || \"\";\n\t\tinput.name = \"filter\";\n\t\tinput.id = \"qunit-filter-input\";\n\t\n\t\tbutton.innerHTML = \"Go\";\n\t\n\t\tlabel.appendChild( input );\n\t\n\t\tfilter.appendChild( label );\n\t\tfilter.appendChild( button );\n\t\taddEvent( filter, \"submit\", function( ev ) {\n\t\t\tapplyUrlParams();\n\t\n\t\t\tif ( ev && ev.preventDefault ) {\n\t\t\t\tev.preventDefault();\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\t} );\n\t\n\t\treturn filter;\n\t}\n\t\n\tfunction toolbarModuleFilterHtml() {\n\t\tvar i,\n\t\t\tmoduleFilterHtml = \"\";\n\t\n\t\tif ( !modulesList.length ) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tmoduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label>\" +\n\t\t\t\"<select id='qunit-modulefilter' name='modulefilter'><option value='' \" +\n\t\t\t( QUnit.urlParams.module === undefined ? \"selected='selected'\" : \"\" ) +\n\t\t\t\">< All Modules ></option>\";\n\t\n\t\tfor ( i = 0; i < modulesList.length; i++ ) {\n\t\t\tmoduleFilterHtml += \"<option value='\" +\n\t\t\t\tescapeText( encodeURIComponent( modulesList[ i ] ) ) + \"' \" +\n\t\t\t\t( QUnit.urlParams.module === modulesList[ i ] ? \"selected='selected'\" : \"\" ) +\n\t\t\t\t\">\" + escapeText( modulesList[ i ] ) + \"</option>\";\n\t\t}\n\t\tmoduleFilterHtml += \"</select>\";\n\t\n\t\treturn moduleFilterHtml;\n\t}\n\t\n\tfunction toolbarModuleFilter() {\n\t\tvar toolbar = id( \"qunit-testrunner-toolbar\" ),\n\t\t\tmoduleFilter = document.createElement( \"span\" ),\n\t\t\tmoduleFilterHtml = toolbarModuleFilterHtml();\n\t\n\t\tif ( !toolbar || !moduleFilterHtml ) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tmoduleFilter.setAttribute( \"id\", \"qunit-modulefilter-container\" );\n\t\tmoduleFilter.innerHTML = moduleFilterHtml;\n\t\n\t\taddEvent( moduleFilter.lastChild, \"change\", applyUrlParams );\n\t\n\t\ttoolbar.appendChild( moduleFilter );\n\t}\n\t\n\tfunction appendToolbar() {\n\t\tvar toolbar = id( \"qunit-testrunner-toolbar\" );\n\t\n\t\tif ( toolbar ) {\n\t\t\ttoolbar.appendChild( toolbarUrlConfigContainer() );\n\t\t\ttoolbar.appendChild( toolbarLooseFilter() );\n\t\t\ttoolbarModuleFilter();\n\t\t}\n\t}\n\t\n\tfunction appendHeader() {\n\t\tvar header = id( \"qunit-header\" );\n\t\n\t\tif ( header ) {\n\t\t\theader.innerHTML = \"<a href='\" + escapeText( unfilteredUrl ) + \"'>\" + header.innerHTML +\n\t\t\t\t\"</a> \";\n\t\t}\n\t}\n\t\n\tfunction appendBanner() {\n\t\tvar banner = id( \"qunit-banner\" );\n\t\n\t\tif ( banner ) {\n\t\t\tbanner.className = \"\";\n\t\t}\n\t}\n\t\n\tfunction appendTestResults() {\n\t\tvar tests = id( \"qunit-tests\" ),\n\t\t\tresult = id( \"qunit-testresult\" );\n\t\n\t\tif ( result ) {\n\t\t\tresult.parentNode.removeChild( result );\n\t\t}\n\t\n\t\tif ( tests ) {\n\t\t\ttests.innerHTML = \"\";\n\t\t\tresult = document.createElement( \"p\" );\n\t\t\tresult.id = \"qunit-testresult\";\n\t\t\tresult.className = \"result\";\n\t\t\ttests.parentNode.insertBefore( result, tests );\n\t\t\tresult.innerHTML = \"Running...<br />&#160;\";\n\t\t}\n\t}\n\t\n\tfunction storeFixture() {\n\t\tvar fixture = id( \"qunit-fixture\" );\n\t\tif ( fixture ) {\n\t\t\tconfig.fixture = fixture.innerHTML;\n\t\t}\n\t}\n\t\n\tfunction appendFilteredTest() {\n\t\tvar testId = QUnit.config.testId;\n\t\tif ( !testId || testId.length <= 0 ) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn \"<div id='qunit-filteredTest'>Rerunning selected tests: \" +\n\t\t\tescapeText( testId.join( \", \" ) ) +\n\t\t\t\" <a id='qunit-clearFilter' href='\" +\n\t\t\tescapeText( unfilteredUrl ) +\n\t\t\t\"'>Run all tests</a></div>\";\n\t}\n\t\n\tfunction appendUserAgent() {\n\t\tvar userAgent = id( \"qunit-userAgent\" );\n\t\n\t\tif ( userAgent ) {\n\t\t\tuserAgent.innerHTML = \"\";\n\t\t\tuserAgent.appendChild(\n\t\t\t\tdocument.createTextNode(\n\t\t\t\t\t\"QUnit \" + QUnit.version + \"; \" + navigator.userAgent\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\t\n\tfunction appendInterface() {\n\t\tvar qunit = id( \"qunit\" );\n\t\n\t\tif ( qunit ) {\n\t\t\tqunit.innerHTML =\n\t\t\t\t\"<h1 id='qunit-header'>\" + escapeText( document.title ) + \"</h1>\" +\n\t\t\t\t\"<h2 id='qunit-banner'></h2>\" +\n\t\t\t\t\"<div id='qunit-testrunner-toolbar'></div>\" +\n\t\t\t\tappendFilteredTest() +\n\t\t\t\t\"<h2 id='qunit-userAgent'></h2>\" +\n\t\t\t\t\"<ol id='qunit-tests'></ol>\";\n\t\t}\n\t\n\t\tappendHeader();\n\t\tappendBanner();\n\t\tappendTestResults();\n\t\tappendUserAgent();\n\t\tappendToolbar();\n\t}\n\t\n\tfunction appendTestsList( modules ) {\n\t\tvar i, l, x, z, test, moduleObj;\n\t\n\t\tfor ( i = 0, l = modules.length; i < l; i++ ) {\n\t\t\tmoduleObj = modules[ i ];\n\t\n\t\t\tfor ( x = 0, z = moduleObj.tests.length; x < z; x++ ) {\n\t\t\t\ttest = moduleObj.tests[ x ];\n\t\n\t\t\t\tappendTest( test.name, test.testId, moduleObj.name );\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction appendTest( name, testId, moduleName ) {\n\t\tvar title, rerunTrigger, testBlock, assertList,\n\t\t\ttests = id( \"qunit-tests\" );\n\t\n\t\tif ( !tests ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\ttitle = document.createElement( \"strong\" );\n\t\ttitle.innerHTML = getNameHtml( name, moduleName );\n\t\n\t\trerunTrigger = document.createElement( \"a\" );\n\t\trerunTrigger.innerHTML = \"Rerun\";\n\t\trerunTrigger.href = setUrl( { testId: testId } );\n\t\n\t\ttestBlock = document.createElement( \"li\" );\n\t\ttestBlock.appendChild( title );\n\t\ttestBlock.appendChild( rerunTrigger );\n\t\ttestBlock.id = \"qunit-test-output-\" + testId;\n\t\n\t\tassertList = document.createElement( \"ol\" );\n\t\tassertList.className = \"qunit-assert-list\";\n\t\n\t\ttestBlock.appendChild( assertList );\n\t\n\t\ttests.appendChild( testBlock );\n\t}\n\t\n\t// HTML Reporter initialization and load\n\tQUnit.begin( function( details ) {\n\t\tvar i, moduleObj, tests;\n\t\n\t\t// Sort modules by name for the picker\n\t\tfor ( i = 0; i < details.modules.length; i++ ) {\n\t\t\tmoduleObj = details.modules[ i ];\n\t\t\tif ( moduleObj.name ) {\n\t\t\t\tmodulesList.push( moduleObj.name );\n\t\t\t}\n\t\t}\n\t\tmodulesList.sort( function( a, b ) {\n\t\t\treturn a.localeCompare( b );\n\t\t} );\n\t\n\t\t// Capture fixture HTML from the page\n\t\tstoreFixture();\n\t\n\t\t// Initialize QUnit elements\n\t\tappendInterface();\n\t\tappendTestsList( details.modules );\n\t\ttests = id( \"qunit-tests\" );\n\t\tif ( tests && config.hidepassed ) {\n\t\t\taddClass( tests, \"hidepass\" );\n\t\t}\n\t} );\n\t\n\tQUnit.done( function( details ) {\n\t\tvar i, key,\n\t\t\tbanner = id( \"qunit-banner\" ),\n\t\t\ttests = id( \"qunit-tests\" ),\n\t\t\thtml = [\n\t\t\t\t\"Tests completed in \",\n\t\t\t\tdetails.runtime,\n\t\t\t\t\" milliseconds.<br />\",\n\t\t\t\t\"<span class='passed'>\",\n\t\t\t\tdetails.passed,\n\t\t\t\t\"</span> assertions of <span class='total'>\",\n\t\t\t\tdetails.total,\n\t\t\t\t\"</span> passed, <span class='failed'>\",\n\t\t\t\tdetails.failed,\n\t\t\t\t\"</span> failed.\"\n\t\t\t].join( \"\" );\n\t\n\t\tif ( banner ) {\n\t\t\tbanner.className = details.failed ? \"qunit-fail\" : \"qunit-pass\";\n\t\t}\n\t\n\t\tif ( tests ) {\n\t\t\tid( \"qunit-testresult\" ).innerHTML = html;\n\t\t}\n\t\n\t\tif ( config.altertitle && document.title ) {\n\t\n\t\t\t// Show ✖ for good, ✔ for bad suite result in title\n\t\t\t// use escape sequences in case file gets loaded with non-utf-8-charset\n\t\t\tdocument.title = [\n\t\t\t\t( details.failed ? \"\\u2716\" : \"\\u2714\" ),\n\t\t\t\tdocument.title.replace( /^[\\u2714\\u2716] /i, \"\" )\n\t\t\t].join( \" \" );\n\t\t}\n\t\n\t\t// Clear own sessionStorage items if all tests passed\n\t\tif ( config.reorder && defined.sessionStorage && details.failed === 0 ) {\n\t\t\tfor ( i = 0; i < sessionStorage.length; i++ ) {\n\t\t\t\tkey = sessionStorage.key( i++ );\n\t\t\t\tif ( key.indexOf( \"qunit-test-\" ) === 0 ) {\n\t\t\t\t\tsessionStorage.removeItem( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Scroll back to top to show results\n\t\tif ( config.scrolltop && window.scrollTo ) {\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t}\n\t} );\n\t\n\tfunction getNameHtml( name, module ) {\n\t\tvar nameHtml = \"\";\n\t\n\t\tif ( module ) {\n\t\t\tnameHtml = \"<span class='module-name'>\" + escapeText( module ) + \"</span>: \";\n\t\t}\n\t\n\t\tnameHtml += \"<span class='test-name'>\" + escapeText( name ) + \"</span>\";\n\t\n\t\treturn nameHtml;\n\t}\n\t\n\tQUnit.testStart( function( details ) {\n\t\tvar running, testBlock, bad;\n\t\n\t\ttestBlock = id( \"qunit-test-output-\" + details.testId );\n\t\tif ( testBlock ) {\n\t\t\ttestBlock.className = \"running\";\n\t\t} else {\n\t\n\t\t\t// Report later registered tests\n\t\t\tappendTest( details.name, details.testId, details.module );\n\t\t}\n\t\n\t\trunning = id( \"qunit-testresult\" );\n\t\tif ( running ) {\n\t\t\tbad = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\n\t\t\trunning.innerHTML = ( bad ?\n\t\t\t\t\"Rerunning previously failed test: <br />\" :\n\t\t\t\t\"Running: <br />\" ) +\n\t\t\t\tgetNameHtml( details.name, details.module );\n\t\t}\n\t\n\t} );\n\t\n\tfunction stripHtml( string ) {\n\t\n\t\t// Strip tags, html entity and whitespaces\n\t\treturn string.replace( /<\\/?[^>]+(>|$)/g, \"\" ).replace( /\\&quot;/g, \"\" ).replace( /\\s+/g, \"\" );\n\t}\n\t\n\tQUnit.log( function( details ) {\n\t\tvar assertList, assertLi,\n\t\t\tmessage, expected, actual, diff,\n\t\t\tshowDiff = false,\n\t\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\t\n\t\tif ( !testItem ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tmessage = escapeText( details.message ) || ( details.result ? \"okay\" : \"failed\" );\n\t\tmessage = \"<span class='test-message'>\" + message + \"</span>\";\n\t\tmessage += \"<span class='runtime'>@ \" + details.runtime + \" ms</span>\";\n\t\n\t\t// The pushFailure doesn't provide details.expected\n\t\t// when it calls, it's implicit to also not show expected and diff stuff\n\t\t// Also, we need to check details.expected existence, as it can exist and be undefined\n\t\tif ( !details.result && hasOwn.call( details, \"expected\" ) ) {\n\t\t\tif ( details.negative ) {\n\t\t\t\texpected = \"NOT \" + QUnit.dump.parse( details.expected );\n\t\t\t} else {\n\t\t\t\texpected = QUnit.dump.parse( details.expected );\n\t\t\t}\n\t\n\t\t\tactual = QUnit.dump.parse( details.actual );\n\t\t\tmessage += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" +\n\t\t\t\tescapeText( expected ) +\n\t\t\t\t\"</pre></td></tr>\";\n\t\n\t\t\tif ( actual !== expected ) {\n\t\n\t\t\t\tmessage += \"<tr class='test-actual'><th>Result: </th><td><pre>\" +\n\t\t\t\t\tescapeText( actual ) + \"</pre></td></tr>\";\n\t\n\t\t\t\t// Don't show diff if actual or expected are booleans\n\t\t\t\tif ( !( /^(true|false)$/.test( actual ) ) &&\n\t\t\t\t\t\t!( /^(true|false)$/.test( expected ) ) ) {\n\t\t\t\t\tdiff = QUnit.diff( expected, actual );\n\t\t\t\t\tshowDiff = stripHtml( diff ).length !==\n\t\t\t\t\t\tstripHtml( expected ).length +\n\t\t\t\t\t\tstripHtml( actual ).length;\n\t\t\t\t}\n\t\n\t\t\t\t// Don't show diff if expected and actual are totally different\n\t\t\t\tif ( showDiff ) {\n\t\t\t\t\tmessage += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" +\n\t\t\t\t\t\tdiff + \"</pre></td></tr>\";\n\t\t\t\t}\n\t\t\t} else if ( expected.indexOf( \"[object Array]\" ) !== -1 ||\n\t\t\t\t\texpected.indexOf( \"[object Object]\" ) !== -1 ) {\n\t\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\t\"Diff suppressed as the depth of object is more than current max depth (\" +\n\t\t\t\t\tQUnit.config.maxDepth + \").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \" +\n\t\t\t\t\t\" run with a higher max depth or <a href='\" +\n\t\t\t\t\tescapeText( setUrl( { maxDepth: -1 } ) ) + \"'>\" +\n\t\t\t\t\t\"Rerun</a> without max depth.</p></td></tr>\";\n\t\t\t} else {\n\t\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\t\"Diff suppressed as the expected and actual results have an equivalent\" +\n\t\t\t\t\t\" serialization</td></tr>\";\n\t\t\t}\n\t\n\t\t\tif ( details.source ) {\n\t\t\t\tmessage += \"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\";\n\t\t\t}\n\t\n\t\t\tmessage += \"</table>\";\n\t\n\t\t// This occurs when pushFailure is set and we have an extracted stack trace\n\t\t} else if ( !details.result && details.source ) {\n\t\t\tmessage += \"<table>\" +\n\t\t\t\t\"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\" +\n\t\t\t\t\"</table>\";\n\t\t}\n\t\n\t\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\t\n\t\tassertLi = document.createElement( \"li\" );\n\t\tassertLi.className = details.result ? \"pass\" : \"fail\";\n\t\tassertLi.innerHTML = message;\n\t\tassertList.appendChild( assertLi );\n\t} );\n\t\n\tQUnit.testDone( function( details ) {\n\t\tvar testTitle, time, testItem, assertList,\n\t\t\tgood, bad, testCounts, skipped, sourceName,\n\t\t\ttests = id( \"qunit-tests\" );\n\t\n\t\tif ( !tests ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\t\n\t\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\t\n\t\tgood = details.passed;\n\t\tbad = details.failed;\n\t\n\t\t// Store result when possible\n\t\tif ( config.reorder && defined.sessionStorage ) {\n\t\t\tif ( bad ) {\n\t\t\t\tsessionStorage.setItem( \"qunit-test-\" + details.module + \"-\" + details.name, bad );\n\t\t\t} else {\n\t\t\t\tsessionStorage.removeItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\t\t}\n\t\t}\n\t\n\t\tif ( bad === 0 ) {\n\t\n\t\t\t// Collapse the passing tests\n\t\t\taddClass( assertList, \"qunit-collapsed\" );\n\t\t} else if ( bad && config.collapse && !collapseNext ) {\n\t\n\t\t\t// Skip collapsing the first failing test\n\t\t\tcollapseNext = true;\n\t\t} else {\n\t\n\t\t\t// Collapse remaining tests\n\t\t\taddClass( assertList, \"qunit-collapsed\" );\n\t\t}\n\t\n\t\t// The testItem.firstChild is the test name\n\t\ttestTitle = testItem.firstChild;\n\t\n\t\ttestCounts = bad ?\n\t\t\t\"<b class='failed'>\" + bad + \"</b>, \" + \"<b class='passed'>\" + good + \"</b>, \" :\n\t\t\t\"\";\n\t\n\t\ttestTitle.innerHTML += \" <b class='counts'>(\" + testCounts +\n\t\t\tdetails.assertions.length + \")</b>\";\n\t\n\t\tif ( details.skipped ) {\n\t\t\ttestItem.className = \"skipped\";\n\t\t\tskipped = document.createElement( \"em\" );\n\t\t\tskipped.className = \"qunit-skipped-label\";\n\t\t\tskipped.innerHTML = \"skipped\";\n\t\t\ttestItem.insertBefore( skipped, testTitle );\n\t\t} else {\n\t\t\taddEvent( testTitle, \"click\", function() {\n\t\t\t\ttoggleClass( assertList, \"qunit-collapsed\" );\n\t\t\t} );\n\t\n\t\t\ttestItem.className = bad ? \"fail\" : \"pass\";\n\t\n\t\t\ttime = document.createElement( \"span\" );\n\t\t\ttime.className = \"runtime\";\n\t\t\ttime.innerHTML = details.runtime + \" ms\";\n\t\t\ttestItem.insertBefore( time, assertList );\n\t\t}\n\t\n\t\t// Show the source of the test when showing assertions\n\t\tif ( details.source ) {\n\t\t\tsourceName = document.createElement( \"p\" );\n\t\t\tsourceName.innerHTML = \"<strong>Source: </strong>\" + details.source;\n\t\t\taddClass( sourceName, \"qunit-source\" );\n\t\t\tif ( bad === 0 ) {\n\t\t\t\taddClass( sourceName, \"qunit-collapsed\" );\n\t\t\t}\n\t\t\taddEvent( testTitle, \"click\", function() {\n\t\t\t\ttoggleClass( sourceName, \"qunit-collapsed\" );\n\t\t\t} );\n\t\t\ttestItem.appendChild( sourceName );\n\t\t}\n\t} );\n\t\n\t// Avoid readyState issue with phantomjs\n\t// Ref: #818\n\tvar notPhantom = ( function( p ) {\n\t\treturn !( p && p.version && p.version.major > 0 );\n\t} )( window.phantom );\n\t\n\tif ( notPhantom && document.readyState === \"complete\" ) {\n\t\tQUnit.load();\n\t} else {\n\t\taddEvent( window, \"load\", QUnit.load );\n\t}\n\t\n\t/*\n\t * This file is a modified version of google-diff-match-patch's JavaScript implementation\n\t * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\n\t * modifications are licensed as more fully set forth in LICENSE.txt.\n\t *\n\t * The original source of google-diff-match-patch is attributable and licensed as follows:\n\t *\n\t * Copyright 2006 Google Inc.\n\t * https://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * https://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t * More Info:\n\t *  https://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Usage: QUnit.diff(expected, actual)\n\t *\n\t */\n\tQUnit.diff = ( function() {\n\t\tfunction DiffMatchPatch() {\n\t\t}\n\t\n\t\t//  DIFF FUNCTIONS\n\t\n\t\t/**\n\t\t * The data structure representing a diff is an array of tuples:\n\t\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t\t */\n\t\tvar DIFF_DELETE = -1,\n\t\t\tDIFF_INSERT = 1,\n\t\t\tDIFF_EQUAL = 0;\n\t\n\t\t/**\n\t\t * Find the differences between two texts.  Simplifies the problem by stripping\n\t\t * any common prefix or suffix off the texts before diffing.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {boolean=} optChecklines Optional speedup flag. If present and false,\n\t\t *     then don't run a line-level diff first to identify the changed areas.\n\t\t *     Defaults to true, which does a faster, slightly less optimal diff.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.DiffMain = function( text1, text2, optChecklines ) {\n\t\t\tvar deadline, checklines, commonlength,\n\t\t\t\tcommonprefix, commonsuffix, diffs;\n\t\n\t\t\t// The diff must be complete in up to 1 second.\n\t\t\tdeadline = ( new Date() ).getTime() + 1000;\n\t\n\t\t\t// Check for null inputs.\n\t\t\tif ( text1 === null || text2 === null ) {\n\t\t\t\tthrow new Error( \"Null input. (DiffMain)\" );\n\t\t\t}\n\t\n\t\t\t// Check for equality (speedup).\n\t\t\tif ( text1 === text2 ) {\n\t\t\t\tif ( text1 ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t[ DIFF_EQUAL, text1 ]\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\n\t\t\tif ( typeof optChecklines === \"undefined\" ) {\n\t\t\t\toptChecklines = true;\n\t\t\t}\n\t\n\t\t\tchecklines = optChecklines;\n\t\n\t\t\t// Trim off common prefix (speedup).\n\t\t\tcommonlength = this.diffCommonPrefix( text1, text2 );\n\t\t\tcommonprefix = text1.substring( 0, commonlength );\n\t\t\ttext1 = text1.substring( commonlength );\n\t\t\ttext2 = text2.substring( commonlength );\n\t\n\t\t\t// Trim off common suffix (speedup).\n\t\t\tcommonlength = this.diffCommonSuffix( text1, text2 );\n\t\t\tcommonsuffix = text1.substring( text1.length - commonlength );\n\t\t\ttext1 = text1.substring( 0, text1.length - commonlength );\n\t\t\ttext2 = text2.substring( 0, text2.length - commonlength );\n\t\n\t\t\t// Compute the diff on the middle block.\n\t\t\tdiffs = this.diffCompute( text1, text2, checklines, deadline );\n\t\n\t\t\t// Restore the prefix and suffix.\n\t\t\tif ( commonprefix ) {\n\t\t\t\tdiffs.unshift( [ DIFF_EQUAL, commonprefix ] );\n\t\t\t}\n\t\t\tif ( commonsuffix ) {\n\t\t\t\tdiffs.push( [ DIFF_EQUAL, commonsuffix ] );\n\t\t\t}\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\treturn diffs;\n\t\t};\n\t\n\t\t/**\n\t\t * Reduce the number of edits by eliminating operationally trivial equalities.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupEfficiency = function( diffs ) {\n\t\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\t\tpointer, preIns, preDel, postIns, postDel;\n\t\t\tchanges = false;\n\t\t\tequalities = []; // Stack of indices where equalities are found.\n\t\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t\t/** @type {?string} */\n\t\t\tlastequality = null;\n\t\n\t\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\t\tpointer = 0; // Index of current position.\n\t\n\t\t\t// Is there an insertion operation before the last equality.\n\t\t\tpreIns = false;\n\t\n\t\t\t// Is there a deletion operation before the last equality.\n\t\t\tpreDel = false;\n\t\n\t\t\t// Is there an insertion operation after the last equality.\n\t\t\tpostIns = false;\n\t\n\t\t\t// Is there a deletion operation after the last equality.\n\t\t\tpostDel = false;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\n\t\t\t\t// Equality found.\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) {\n\t\t\t\t\tif ( diffs[ pointer ][ 1 ].length < 4 && ( postIns || postDel ) ) {\n\t\n\t\t\t\t\t\t// Candidate found.\n\t\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\t\tpreIns = postIns;\n\t\t\t\t\t\tpreDel = postDel;\n\t\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// Not a candidate, and can never become one.\n\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t}\n\t\t\t\t\tpostIns = postDel = false;\n\t\n\t\t\t\t// An insertion or deletion.\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_DELETE ) {\n\t\t\t\t\t\tpostDel = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpostIns = true;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/*\n\t\t\t\t\t * Five types to be split:\n\t\t\t\t\t * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins>X<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins><del>B</del>X<ins>C</ins>\n\t\t\t\t\t * <ins>A</del>X<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins><del>B</del>X<del>C</del>\n\t\t\t\t\t */\n\t\t\t\t\tif ( lastequality && ( ( preIns && preDel && postIns && postDel ) ||\n\t\t\t\t\t\t\t( ( lastequality.length < 2 ) &&\n\t\t\t\t\t\t\t( preIns + preDel + postIns + postDel ) === 3 ) ) ) {\n\t\n\t\t\t\t\t\t// Duplicate record.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\tequalitiesLength--; // Throw away the equality we just deleted;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t\tif ( preIns && preDel ) {\n\t\n\t\t\t\t\t\t\t// No changes made which could affect previous entry, keep going.\n\t\t\t\t\t\t\tpostIns = postDel = true;\n\t\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tequalitiesLength--; // Throw away the previous equality.\n\t\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\t\t\t\t\t\tpostIns = postDel = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Convert a diff array into a pretty HTML report.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t * @param {integer} string to be beautified.\n\t\t * @return {string} HTML representation.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffPrettyHtml = function( diffs ) {\n\t\t\tvar op, data, x,\n\t\t\t\thtml = [];\n\t\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\t\top = diffs[ x ][ 0 ]; // Operation (insert, delete, equal)\n\t\t\t\tdata = diffs[ x ][ 1 ]; // Text of change.\n\t\t\t\tswitch ( op ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\thtml[ x ] = \"<ins>\" + escapeText( data ) + \"</ins>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\thtml[ x ] = \"<del>\" + escapeText( data ) + \"</del>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\t\t\t\thtml[ x ] = \"<span>\" + escapeText( data ) + \"</span>\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn html.join( \"\" );\n\t\t};\n\t\n\t\t/**\n\t\t * Determine the common prefix of two strings.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the start of each\n\t\t *     string.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonPrefix = function( text1, text2 ) {\n\t\t\tvar pointermid, pointermax, pointermin, pointerstart;\n\t\n\t\t\t// Quick check for common null cases.\n\t\t\tif ( !text1 || !text2 || text1.charAt( 0 ) !== text2.charAt( 0 ) ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Binary search.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\t\tpointermin = 0;\n\t\t\tpointermax = Math.min( text1.length, text2.length );\n\t\t\tpointermid = pointermax;\n\t\t\tpointerstart = 0;\n\t\t\twhile ( pointermin < pointermid ) {\n\t\t\t\tif ( text1.substring( pointerstart, pointermid ) ===\n\t\t\t\t\t\ttext2.substring( pointerstart, pointermid ) ) {\n\t\t\t\t\tpointermin = pointermid;\n\t\t\t\t\tpointerstart = pointermin;\n\t\t\t\t} else {\n\t\t\t\t\tpointermax = pointermid;\n\t\t\t\t}\n\t\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t\t}\n\t\t\treturn pointermid;\n\t\t};\n\t\n\t\t/**\n\t\t * Determine the common suffix of two strings.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the end of each string.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonSuffix = function( text1, text2 ) {\n\t\t\tvar pointermid, pointermax, pointermin, pointerend;\n\t\n\t\t\t// Quick check for common null cases.\n\t\t\tif ( !text1 ||\n\t\t\t\t\t!text2 ||\n\t\t\t\t\ttext1.charAt( text1.length - 1 ) !== text2.charAt( text2.length - 1 ) ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Binary search.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\t\tpointermin = 0;\n\t\t\tpointermax = Math.min( text1.length, text2.length );\n\t\t\tpointermid = pointermax;\n\t\t\tpointerend = 0;\n\t\t\twhile ( pointermin < pointermid ) {\n\t\t\t\tif ( text1.substring( text1.length - pointermid, text1.length - pointerend ) ===\n\t\t\t\t\t\ttext2.substring( text2.length - pointermid, text2.length - pointerend ) ) {\n\t\t\t\t\tpointermin = pointermid;\n\t\t\t\t\tpointerend = pointermin;\n\t\t\t\t} else {\n\t\t\t\t\tpointermax = pointermid;\n\t\t\t\t}\n\t\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t\t}\n\t\t\treturn pointermid;\n\t\t};\n\t\n\t\t/**\n\t\t * Find the differences between two texts.  Assumes that the texts do not\n\t\t * have any common prefix or suffix.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {boolean} checklines Speedup flag.  If false, then don't run a\n\t\t *     line-level diff first to identify the changed areas.\n\t\t *     If true, then run a faster, slightly less optimal diff.\n\t\t * @param {number} deadline Time when the diff should be complete by.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCompute = function( text1, text2, checklines, deadline ) {\n\t\t\tvar diffs, longtext, shorttext, i, hm,\n\t\t\t\ttext1A, text2A, text1B, text2B,\n\t\t\t\tmidCommon, diffsA, diffsB;\n\t\n\t\t\tif ( !text1 ) {\n\t\n\t\t\t\t// Just add some text (speedup).\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\tif ( !text2 ) {\n\t\n\t\t\t\t// Just delete some text (speedup).\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_DELETE, text1 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\t\ti = longtext.indexOf( shorttext );\n\t\t\tif ( i !== -1 ) {\n\t\n\t\t\t\t// Shorter text is inside the longer text (speedup).\n\t\t\t\tdiffs = [\n\t\t\t\t\t[ DIFF_INSERT, longtext.substring( 0, i ) ],\n\t\t\t\t\t[ DIFF_EQUAL, shorttext ],\n\t\t\t\t\t[ DIFF_INSERT, longtext.substring( i + shorttext.length ) ]\n\t\t\t\t];\n\t\n\t\t\t\t// Swap insertions for deletions if diff is reversed.\n\t\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\t\tdiffs[ 0 ][ 0 ] = diffs[ 2 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t}\n\t\t\t\treturn diffs;\n\t\t\t}\n\t\n\t\t\tif ( shorttext.length === 1 ) {\n\t\n\t\t\t\t// Single character string.\n\t\t\t\t// After the previous speedup, the character can't be an equality.\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\t// Check to see if the problem can be split in two.\n\t\t\thm = this.diffHalfMatch( text1, text2 );\n\t\t\tif ( hm ) {\n\t\n\t\t\t\t// A half-match was found, sort out the return data.\n\t\t\t\ttext1A = hm[ 0 ];\n\t\t\t\ttext1B = hm[ 1 ];\n\t\t\t\ttext2A = hm[ 2 ];\n\t\t\t\ttext2B = hm[ 3 ];\n\t\t\t\tmidCommon = hm[ 4 ];\n\t\n\t\t\t\t// Send both pairs off for separate processing.\n\t\t\t\tdiffsA = this.DiffMain( text1A, text2A, checklines, deadline );\n\t\t\t\tdiffsB = this.DiffMain( text1B, text2B, checklines, deadline );\n\t\n\t\t\t\t// Merge the results.\n\t\t\t\treturn diffsA.concat( [\n\t\t\t\t\t[ DIFF_EQUAL, midCommon ]\n\t\t\t\t], diffsB );\n\t\t\t}\n\t\n\t\t\tif ( checklines && text1.length > 100 && text2.length > 100 ) {\n\t\t\t\treturn this.diffLineMode( text1, text2, deadline );\n\t\t\t}\n\t\n\t\t\treturn this.diffBisect( text1, text2, deadline );\n\t\t};\n\t\n\t\t/**\n\t\t * Do the two texts share a substring which is at least half the length of the\n\t\t * longer text?\n\t\t * This speedup can produce non-minimal diffs.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t\t *     text2 and the common middle.  Or null if there was no match.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffHalfMatch = function( text1, text2 ) {\n\t\t\tvar longtext, shorttext, dmp,\n\t\t\t\ttext1A, text2B, text2A, text1B, midCommon,\n\t\t\t\thm1, hm2, hm;\n\t\n\t\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\t\tif ( longtext.length < 4 || shorttext.length * 2 < longtext.length ) {\n\t\t\t\treturn null; // Pointless.\n\t\t\t}\n\t\t\tdmp = this; // 'this' becomes 'window' in a closure.\n\t\n\t\t\t/**\n\t\t\t * Does a substring of shorttext exist within longtext such that the substring\n\t\t\t * is at least half the length of longtext?\n\t\t\t * Closure, but does not reference any external variables.\n\t\t\t * @param {string} longtext Longer string.\n\t\t\t * @param {string} shorttext Shorter string.\n\t\t\t * @param {number} i Start index of quarter length substring within longtext.\n\t\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t\t *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t\t\t *     of shorttext and the common middle.  Or null if there was no match.\n\t\t\t * @private\n\t\t\t */\n\t\t\tfunction diffHalfMatchI( longtext, shorttext, i ) {\n\t\t\t\tvar seed, j, bestCommon, prefixLength, suffixLength,\n\t\t\t\t\tbestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;\n\t\n\t\t\t\t// Start with a 1/4 length substring at position i as a seed.\n\t\t\t\tseed = longtext.substring( i, i + Math.floor( longtext.length / 4 ) );\n\t\t\t\tj = -1;\n\t\t\t\tbestCommon = \"\";\n\t\t\t\twhile ( ( j = shorttext.indexOf( seed, j + 1 ) ) !== -1 ) {\n\t\t\t\t\tprefixLength = dmp.diffCommonPrefix( longtext.substring( i ),\n\t\t\t\t\t\tshorttext.substring( j ) );\n\t\t\t\t\tsuffixLength = dmp.diffCommonSuffix( longtext.substring( 0, i ),\n\t\t\t\t\t\tshorttext.substring( 0, j ) );\n\t\t\t\t\tif ( bestCommon.length < suffixLength + prefixLength ) {\n\t\t\t\t\t\tbestCommon = shorttext.substring( j - suffixLength, j ) +\n\t\t\t\t\t\t\tshorttext.substring( j, j + prefixLength );\n\t\t\t\t\t\tbestLongtextA = longtext.substring( 0, i - suffixLength );\n\t\t\t\t\t\tbestLongtextB = longtext.substring( i + prefixLength );\n\t\t\t\t\t\tbestShorttextA = shorttext.substring( 0, j - suffixLength );\n\t\t\t\t\t\tbestShorttextB = shorttext.substring( j + prefixLength );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( bestCommon.length * 2 >= longtext.length ) {\n\t\t\t\t\treturn [ bestLongtextA, bestLongtextB,\n\t\t\t\t\t\tbestShorttextA, bestShorttextB, bestCommon\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// First check if the second quarter is the seed for a half-match.\n\t\t\thm1 = diffHalfMatchI( longtext, shorttext,\n\t\t\t\tMath.ceil( longtext.length / 4 ) );\n\t\n\t\t\t// Check again based on the third quarter.\n\t\t\thm2 = diffHalfMatchI( longtext, shorttext,\n\t\t\t\tMath.ceil( longtext.length / 2 ) );\n\t\t\tif ( !hm1 && !hm2 ) {\n\t\t\t\treturn null;\n\t\t\t} else if ( !hm2 ) {\n\t\t\t\thm = hm1;\n\t\t\t} else if ( !hm1 ) {\n\t\t\t\thm = hm2;\n\t\t\t} else {\n\t\n\t\t\t\t// Both matched.  Select the longest.\n\t\t\t\thm = hm1[ 4 ].length > hm2[ 4 ].length ? hm1 : hm2;\n\t\t\t}\n\t\n\t\t\t// A half-match was found, sort out the return data.\n\t\t\ttext1A, text1B, text2A, text2B;\n\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\ttext1A = hm[ 0 ];\n\t\t\t\ttext1B = hm[ 1 ];\n\t\t\t\ttext2A = hm[ 2 ];\n\t\t\t\ttext2B = hm[ 3 ];\n\t\t\t} else {\n\t\t\t\ttext2A = hm[ 0 ];\n\t\t\t\ttext2B = hm[ 1 ];\n\t\t\t\ttext1A = hm[ 2 ];\n\t\t\t\ttext1B = hm[ 3 ];\n\t\t\t}\n\t\t\tmidCommon = hm[ 4 ];\n\t\t\treturn [ text1A, text1B, text2A, text2B, midCommon ];\n\t\t};\n\t\n\t\t/**\n\t\t * Do a quick line-level diff on both strings, then rediff the parts for\n\t\t * greater accuracy.\n\t\t * This speedup can produce non-minimal diffs.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} deadline Time when the diff should be complete by.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffLineMode = function( text1, text2, deadline ) {\n\t\t\tvar a, diffs, linearray, pointer, countInsert,\n\t\t\t\tcountDelete, textInsert, textDelete, j;\n\t\n\t\t\t// Scan the text on a line-by-line basis first.\n\t\t\ta = this.diffLinesToChars( text1, text2 );\n\t\t\ttext1 = a.chars1;\n\t\t\ttext2 = a.chars2;\n\t\t\tlinearray = a.lineArray;\n\t\n\t\t\tdiffs = this.DiffMain( text1, text2, false, deadline );\n\t\n\t\t\t// Convert the diff back to original text.\n\t\t\tthis.diffCharsToLines( diffs, linearray );\n\t\n\t\t\t// Eliminate freak matches (e.g. blank lines)\n\t\t\tthis.diffCleanupSemantic( diffs );\n\t\n\t\t\t// Rediff any replacement blocks, this time character-by-character.\n\t\t\t// Add a dummy entry at the end.\n\t\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] );\n\t\t\tpointer = 0;\n\t\t\tcountDelete = 0;\n\t\t\tcountInsert = 0;\n\t\t\ttextDelete = \"\";\n\t\t\ttextInsert = \"\";\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\tcountInsert++;\n\t\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\tcountDelete++;\n\t\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\n\t\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\t\tif ( countDelete >= 1 && countInsert >= 1 ) {\n\t\n\t\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\t\tdiffs.splice( pointer - countDelete - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert );\n\t\t\t\t\t\tpointer = pointer - countDelete - countInsert;\n\t\t\t\t\t\ta = this.DiffMain( textDelete, textInsert, false, deadline );\n\t\t\t\t\t\tfor ( j = a.length - 1; j >= 0; j-- ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer, 0, a[ j ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpointer = pointer + a.length;\n\t\t\t\t\t}\n\t\t\t\t\tcountInsert = 0;\n\t\t\t\t\tcountDelete = 0;\n\t\t\t\t\ttextDelete = \"\";\n\t\t\t\t\ttextInsert = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\n\t\t\treturn diffs;\n\t\t};\n\t\n\t\t/**\n\t\t * Find the 'middle snake' of a diff, split the problem in two\n\t\t * and return the recursively constructed diff.\n\t\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} deadline Time at which to bail if not yet complete.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffBisect = function( text1, text2, deadline ) {\n\t\t\tvar text1Length, text2Length, maxD, vOffset, vLength,\n\t\t\t\tv1, v2, x, delta, front, k1start, k1end, k2start,\n\t\t\t\tk2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;\n\t\n\t\t\t// Cache the text lengths to prevent multiple calls.\n\t\t\ttext1Length = text1.length;\n\t\t\ttext2Length = text2.length;\n\t\t\tmaxD = Math.ceil( ( text1Length + text2Length ) / 2 );\n\t\t\tvOffset = maxD;\n\t\t\tvLength = 2 * maxD;\n\t\t\tv1 = new Array( vLength );\n\t\t\tv2 = new Array( vLength );\n\t\n\t\t\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t\t\t// integers and undefined.\n\t\t\tfor ( x = 0; x < vLength; x++ ) {\n\t\t\t\tv1[ x ] = -1;\n\t\t\t\tv2[ x ] = -1;\n\t\t\t}\n\t\t\tv1[ vOffset + 1 ] = 0;\n\t\t\tv2[ vOffset + 1 ] = 0;\n\t\t\tdelta = text1Length - text2Length;\n\t\n\t\t\t// If the total number of characters is odd, then the front path will collide\n\t\t\t// with the reverse path.\n\t\t\tfront = ( delta % 2 !== 0 );\n\t\n\t\t\t// Offsets for start and end of k loop.\n\t\t\t// Prevents mapping of space beyond the grid.\n\t\t\tk1start = 0;\n\t\t\tk1end = 0;\n\t\t\tk2start = 0;\n\t\t\tk2end = 0;\n\t\t\tfor ( d = 0; d < maxD; d++ ) {\n\t\n\t\t\t\t// Bail out if deadline is reached.\n\t\t\t\tif ( ( new Date() ).getTime() > deadline ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\n\t\t\t\t// Walk the front path one step.\n\t\t\t\tfor ( k1 = -d + k1start; k1 <= d - k1end; k1 += 2 ) {\n\t\t\t\t\tk1Offset = vOffset + k1;\n\t\t\t\t\tif ( k1 === -d || ( k1 !== d && v1[ k1Offset - 1 ] < v1[ k1Offset + 1 ] ) ) {\n\t\t\t\t\t\tx1 = v1[ k1Offset + 1 ];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx1 = v1[ k1Offset - 1 ] + 1;\n\t\t\t\t\t}\n\t\t\t\t\ty1 = x1 - k1;\n\t\t\t\t\twhile ( x1 < text1Length && y1 < text2Length &&\n\t\t\t\t\t\ttext1.charAt( x1 ) === text2.charAt( y1 ) ) {\n\t\t\t\t\t\tx1++;\n\t\t\t\t\t\ty1++;\n\t\t\t\t\t}\n\t\t\t\t\tv1[ k1Offset ] = x1;\n\t\t\t\t\tif ( x1 > text1Length ) {\n\t\n\t\t\t\t\t\t// Ran off the right of the graph.\n\t\t\t\t\t\tk1end += 2;\n\t\t\t\t\t} else if ( y1 > text2Length ) {\n\t\n\t\t\t\t\t\t// Ran off the bottom of the graph.\n\t\t\t\t\t\tk1start += 2;\n\t\t\t\t\t} else if ( front ) {\n\t\t\t\t\t\tk2Offset = vOffset + delta - k1;\n\t\t\t\t\t\tif ( k2Offset >= 0 && k2Offset < vLength && v2[ k2Offset ] !== -1 ) {\n\t\n\t\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\t\tx2 = text1Length - v2[ k2Offset ];\n\t\t\t\t\t\t\tif ( x1 >= x2 ) {\n\t\n\t\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Walk the reverse path one step.\n\t\t\t\tfor ( k2 = -d + k2start; k2 <= d - k2end; k2 += 2 ) {\n\t\t\t\t\tk2Offset = vOffset + k2;\n\t\t\t\t\tif ( k2 === -d || ( k2 !== d && v2[ k2Offset - 1 ] < v2[ k2Offset + 1 ] ) ) {\n\t\t\t\t\t\tx2 = v2[ k2Offset + 1 ];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx2 = v2[ k2Offset - 1 ] + 1;\n\t\t\t\t\t}\n\t\t\t\t\ty2 = x2 - k2;\n\t\t\t\t\twhile ( x2 < text1Length && y2 < text2Length &&\n\t\t\t\t\t\ttext1.charAt( text1Length - x2 - 1 ) ===\n\t\t\t\t\t\ttext2.charAt( text2Length - y2 - 1 ) ) {\n\t\t\t\t\t\tx2++;\n\t\t\t\t\t\ty2++;\n\t\t\t\t\t}\n\t\t\t\t\tv2[ k2Offset ] = x2;\n\t\t\t\t\tif ( x2 > text1Length ) {\n\t\n\t\t\t\t\t\t// Ran off the left of the graph.\n\t\t\t\t\t\tk2end += 2;\n\t\t\t\t\t} else if ( y2 > text2Length ) {\n\t\n\t\t\t\t\t\t// Ran off the top of the graph.\n\t\t\t\t\t\tk2start += 2;\n\t\t\t\t\t} else if ( !front ) {\n\t\t\t\t\t\tk1Offset = vOffset + delta - k2;\n\t\t\t\t\t\tif ( k1Offset >= 0 && k1Offset < vLength && v1[ k1Offset ] !== -1 ) {\n\t\t\t\t\t\t\tx1 = v1[ k1Offset ];\n\t\t\t\t\t\t\ty1 = vOffset + x1 - k1Offset;\n\t\n\t\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\t\tx2 = text1Length - x2;\n\t\t\t\t\t\t\tif ( x1 >= x2 ) {\n\t\n\t\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Diff took too long and hit the deadline or\n\t\t\t// number of diffs equals number of characters, no commonality at all.\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t};\n\t\n\t\t/**\n\t\t * Given the location of the 'middle snake', split the diff in two parts\n\t\t * and recurse.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} x Index of split point in text1.\n\t\t * @param {number} y Index of split point in text2.\n\t\t * @param {number} deadline Time at which to bail if not yet complete.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffBisectSplit = function( text1, text2, x, y, deadline ) {\n\t\t\tvar text1a, text1b, text2a, text2b, diffs, diffsb;\n\t\t\ttext1a = text1.substring( 0, x );\n\t\t\ttext2a = text2.substring( 0, y );\n\t\t\ttext1b = text1.substring( x );\n\t\t\ttext2b = text2.substring( y );\n\t\n\t\t\t// Compute both diffs serially.\n\t\t\tdiffs = this.DiffMain( text1a, text2a, false, deadline );\n\t\t\tdiffsb = this.DiffMain( text1b, text2b, false, deadline );\n\t\n\t\t\treturn diffs.concat( diffsb );\n\t\t};\n\t\n\t\t/**\n\t\t * Reduce the number of edits by eliminating semantically trivial equalities.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupSemantic = function( diffs ) {\n\t\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\t\tpointer, lengthInsertions2, lengthDeletions2, lengthInsertions1,\n\t\t\t\tlengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\n\t\t\tchanges = false;\n\t\t\tequalities = []; // Stack of indices where equalities are found.\n\t\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t\t/** @type {?string} */\n\t\t\tlastequality = null;\n\t\n\t\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\t\tpointer = 0; // Index of current position.\n\t\n\t\t\t// Number of characters that changed prior to the equality.\n\t\t\tlengthInsertions1 = 0;\n\t\t\tlengthDeletions1 = 0;\n\t\n\t\t\t// Number of characters that changed after the equality.\n\t\t\tlengthInsertions2 = 0;\n\t\t\tlengthDeletions2 = 0;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) { // Equality found.\n\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\tlengthInsertions1 = lengthInsertions2;\n\t\t\t\t\tlengthDeletions1 = lengthDeletions2;\n\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t} else { // An insertion or deletion.\n\t\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\t\tlengthInsertions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlengthDeletions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Eliminate an equality that is smaller or equal to the edits on both\n\t\t\t\t\t// sides of it.\n\t\t\t\t\tif ( lastequality && ( lastequality.length <=\n\t\t\t\t\t\t\tMath.max( lengthInsertions1, lengthDeletions1 ) ) &&\n\t\t\t\t\t\t\t( lastequality.length <= Math.max( lengthInsertions2,\n\t\t\t\t\t\t\t\tlengthDeletions2 ) ) ) {\n\t\n\t\t\t\t\t\t// Duplicate record.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\n\t\t\t\t\t\t// Throw away the equality we just deleted.\n\t\t\t\t\t\tequalitiesLength--;\n\t\n\t\t\t\t\t\t// Throw away the previous equality (it needs to be reevaluated).\n\t\t\t\t\t\tequalitiesLength--;\n\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\n\t\t\t\t\t\t// Reset the counters.\n\t\t\t\t\t\tlengthInsertions1 = 0;\n\t\t\t\t\t\tlengthDeletions1 = 0;\n\t\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\t// Normalize the diff.\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\n\t\t\t// Find any overlaps between deletions and insertions.\n\t\t\t// e.g: <del>abcxxx</del><ins>xxxdef</ins>\n\t\t\t//   -> <del>abc</del>xxx<ins>def</ins>\n\t\t\t// e.g: <del>xxxabc</del><ins>defxxx</ins>\n\t\t\t//   -> <ins>def</ins>xxx<del>abc</del>\n\t\t\t// Only extract an overlap if it is as big as the edit ahead or behind it.\n\t\t\tpointer = 1;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_DELETE &&\n\t\t\t\t\t\tdiffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\tdeletion = diffs[ pointer - 1 ][ 1 ];\n\t\t\t\t\tinsertion = diffs[ pointer ][ 1 ];\n\t\t\t\t\toverlapLength1 = this.diffCommonOverlap( deletion, insertion );\n\t\t\t\t\toverlapLength2 = this.diffCommonOverlap( insertion, deletion );\n\t\t\t\t\tif ( overlapLength1 >= overlapLength2 ) {\n\t\t\t\t\t\tif ( overlapLength1 >= deletion.length / 2 ||\n\t\t\t\t\t\t\t\toverlapLength1 >= insertion.length / 2 ) {\n\t\n\t\t\t\t\t\t\t// Overlap found.  Insert an equality and trim the surrounding edits.\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t[ DIFF_EQUAL, insertion.substring( 0, overlapLength1 ) ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tdeletion.substring( 0, deletion.length - overlapLength1 );\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] = insertion.substring( overlapLength1 );\n\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( overlapLength2 >= deletion.length / 2 ||\n\t\t\t\t\t\t\t\toverlapLength2 >= insertion.length / 2 ) {\n\t\n\t\t\t\t\t\t\t// Reverse overlap found.\n\t\t\t\t\t\t\t// Insert an equality and swap and trim the surrounding edits.\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t[ DIFF_EQUAL, deletion.substring( 0, overlapLength2 ) ]\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tinsertion.substring( 0, insertion.length - overlapLength2 );\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tdeletion.substring( overlapLength2 );\n\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpointer++;\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Determine if the suffix of one string is the prefix of another.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the end of the first\n\t\t *     string and the start of the second string.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonOverlap = function( text1, text2 ) {\n\t\t\tvar text1Length, text2Length, textLength,\n\t\t\t\tbest, length, pattern, found;\n\t\n\t\t\t// Cache the text lengths to prevent multiple calls.\n\t\t\ttext1Length = text1.length;\n\t\t\ttext2Length = text2.length;\n\t\n\t\t\t// Eliminate the null case.\n\t\t\tif ( text1Length === 0 || text2Length === 0 ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Truncate the longer string.\n\t\t\tif ( text1Length > text2Length ) {\n\t\t\t\ttext1 = text1.substring( text1Length - text2Length );\n\t\t\t} else if ( text1Length < text2Length ) {\n\t\t\t\ttext2 = text2.substring( 0, text1Length );\n\t\t\t}\n\t\t\ttextLength = Math.min( text1Length, text2Length );\n\t\n\t\t\t// Quick check for the worst case.\n\t\t\tif ( text1 === text2 ) {\n\t\t\t\treturn textLength;\n\t\t\t}\n\t\n\t\t\t// Start by looking for a single character match\n\t\t\t// and increase length until no match is found.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\t\t\tbest = 0;\n\t\t\tlength = 1;\n\t\t\twhile ( true ) {\n\t\t\t\tpattern = text1.substring( textLength - length );\n\t\t\t\tfound = text2.indexOf( pattern );\n\t\t\t\tif ( found === -1 ) {\n\t\t\t\t\treturn best;\n\t\t\t\t}\n\t\t\t\tlength += found;\n\t\t\t\tif ( found === 0 || text1.substring( textLength - length ) ===\n\t\t\t\t\t\ttext2.substring( 0, length ) ) {\n\t\t\t\t\tbest = length;\n\t\t\t\t\tlength++;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Split two texts into an array of strings.  Reduce the texts to a string of\n\t\t * hashes where each Unicode character represents one line.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n\t\t *     An object containing the encoded text1, the encoded text2 and\n\t\t *     the array of unique strings.\n\t\t *     The zeroth element of the array of unique strings is intentionally blank.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffLinesToChars = function( text1, text2 ) {\n\t\t\tvar lineArray, lineHash, chars1, chars2;\n\t\t\tlineArray = []; // E.g. lineArray[4] === 'Hello\\n'\n\t\t\tlineHash = {};  // E.g. lineHash['Hello\\n'] === 4\n\t\n\t\t\t// '\\x00' is a valid character, but various debuggers don't like it.\n\t\t\t// So we'll insert a junk entry to avoid generating a null character.\n\t\t\tlineArray[ 0 ] = \"\";\n\t\n\t\t\t/**\n\t\t\t * Split a text into an array of strings.  Reduce the texts to a string of\n\t\t\t * hashes where each Unicode character represents one line.\n\t\t\t * Modifies linearray and linehash through being a closure.\n\t\t\t * @param {string} text String to encode.\n\t\t\t * @return {string} Encoded string.\n\t\t\t * @private\n\t\t\t */\n\t\t\tfunction diffLinesToCharsMunge( text ) {\n\t\t\t\tvar chars, lineStart, lineEnd, lineArrayLength, line;\n\t\t\t\tchars = \"\";\n\t\n\t\t\t\t// Walk the text, pulling out a substring for each line.\n\t\t\t\t// text.split('\\n') would would temporarily double our memory footprint.\n\t\t\t\t// Modifying text would create many large strings to garbage collect.\n\t\t\t\tlineStart = 0;\n\t\t\t\tlineEnd = -1;\n\t\n\t\t\t\t// Keeping our own length variable is faster than looking it up.\n\t\t\t\tlineArrayLength = lineArray.length;\n\t\t\t\twhile ( lineEnd < text.length - 1 ) {\n\t\t\t\t\tlineEnd = text.indexOf( \"\\n\", lineStart );\n\t\t\t\t\tif ( lineEnd === -1 ) {\n\t\t\t\t\t\tlineEnd = text.length - 1;\n\t\t\t\t\t}\n\t\t\t\t\tline = text.substring( lineStart, lineEnd + 1 );\n\t\t\t\t\tlineStart = lineEnd + 1;\n\t\n\t\t\t\t\tif ( lineHash.hasOwnProperty ? lineHash.hasOwnProperty( line ) :\n\t\t\t\t\t\t\t\t( lineHash[ line ] !== undefined ) ) {\n\t\t\t\t\t\tchars += String.fromCharCode( lineHash[ line ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchars += String.fromCharCode( lineArrayLength );\n\t\t\t\t\t\tlineHash[ line ] = lineArrayLength;\n\t\t\t\t\t\tlineArray[ lineArrayLength++ ] = line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn chars;\n\t\t\t}\n\t\n\t\t\tchars1 = diffLinesToCharsMunge( text1 );\n\t\t\tchars2 = diffLinesToCharsMunge( text2 );\n\t\t\treturn {\n\t\t\t\tchars1: chars1,\n\t\t\t\tchars2: chars2,\n\t\t\t\tlineArray: lineArray\n\t\t\t};\n\t\t};\n\t\n\t\t/**\n\t\t * Rehydrate the text in a diff from a string of line hashes to real lines of\n\t\t * text.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t * @param {!Array.<string>} lineArray Array of unique strings.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCharsToLines = function( diffs, lineArray ) {\n\t\t\tvar x, chars, text, y;\n\t\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\t\tchars = diffs[ x ][ 1 ];\n\t\t\t\ttext = [];\n\t\t\t\tfor ( y = 0; y < chars.length; y++ ) {\n\t\t\t\t\ttext[ y ] = lineArray[ chars.charCodeAt( y ) ];\n\t\t\t\t}\n\t\t\t\tdiffs[ x ][ 1 ] = text.join( \"\" );\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Reorder and merge like edit sections.  Merge equalities.\n\t\t * Any edit section can move as long as it doesn't cross an equality.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupMerge = function( diffs ) {\n\t\t\tvar pointer, countDelete, countInsert, textInsert, textDelete,\n\t\t\t\tcommonlength, changes, diffPointer, position;\n\t\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] ); // Add a dummy entry at the end.\n\t\t\tpointer = 0;\n\t\t\tcountDelete = 0;\n\t\t\tcountInsert = 0;\n\t\t\ttextDelete = \"\";\n\t\t\ttextInsert = \"\";\n\t\t\tcommonlength;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\tcountInsert++;\n\t\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\t\tpointer++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\tcountDelete++;\n\t\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\t\tpointer++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\n\t\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\t\tif ( countDelete + countInsert > 1 ) {\n\t\t\t\t\t\tif ( countDelete !== 0 && countInsert !== 0 ) {\n\t\n\t\t\t\t\t\t\t// Factor out any common prefixes.\n\t\t\t\t\t\t\tcommonlength = this.diffCommonPrefix( textInsert, textDelete );\n\t\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\t\tif ( ( pointer - countDelete - countInsert ) > 0 &&\n\t\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 0 ] ===\n\t\t\t\t\t\t\t\t\t\tDIFF_EQUAL ) {\n\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 1 ] +=\n\t\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdiffs.splice( 0, 0, [ DIFF_EQUAL,\n\t\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength )\n\t\t\t\t\t\t\t\t\t] );\n\t\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttextInsert = textInsert.substring( commonlength );\n\t\t\t\t\t\t\t\ttextDelete = textDelete.substring( commonlength );\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Factor out any common suffixies.\n\t\t\t\t\t\t\tcommonlength = this.diffCommonSuffix( textInsert, textDelete );\n\t\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = textInsert.substring( textInsert.length -\n\t\t\t\t\t\t\t\t\t\tcommonlength ) + diffs[ pointer ][ 1 ];\n\t\t\t\t\t\t\t\ttextInsert = textInsert.substring( 0, textInsert.length -\n\t\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\t\ttextDelete = textDelete.substring( 0, textDelete.length -\n\t\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\t\tif ( countDelete === 0 ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer - countInsert,\n\t\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_INSERT, textInsert ] );\n\t\t\t\t\t\t} else if ( countInsert === 0 ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer - countDelete,\n\t\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_DELETE, textDelete ] );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer - countDelete - countInsert,\n\t\t\t\t\t\t\t\tcountDelete + countInsert,\n\t\t\t\t\t\t\t\t[ DIFF_DELETE, textDelete ], [ DIFF_INSERT, textInsert ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpointer = pointer - countDelete - countInsert +\n\t\t\t\t\t\t\t( countDelete ? 1 : 0 ) + ( countInsert ? 1 : 0 ) + 1;\n\t\t\t\t\t} else if ( pointer !== 0 && diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL ) {\n\t\n\t\t\t\t\t\t// Merge this equality with the previous one.\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer, 1 );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t\tcountInsert = 0;\n\t\t\t\t\tcountDelete = 0;\n\t\t\t\t\ttextDelete = \"\";\n\t\t\t\t\ttextInsert = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( diffs[ diffs.length - 1 ][ 1 ] === \"\" ) {\n\t\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\t\t}\n\t\n\t\t\t// Second pass: look for single edits surrounded on both sides by equalities\n\t\t\t// which can be shifted sideways to eliminate an equality.\n\t\t\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t\t\tchanges = false;\n\t\t\tpointer = 1;\n\t\n\t\t\t// Intentionally ignore the first and last element (don't need checking).\n\t\t\twhile ( pointer < diffs.length - 1 ) {\n\t\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL &&\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] === DIFF_EQUAL ) {\n\t\n\t\t\t\t\tdiffPointer = diffs[ pointer ][ 1 ];\n\t\t\t\t\tposition = diffPointer.substring(\n\t\t\t\t\t\tdiffPointer.length - diffs[ pointer - 1 ][ 1 ].length\n\t\t\t\t\t);\n\t\n\t\t\t\t\t// This is a single edit surrounded by equalities.\n\t\t\t\t\tif ( position === diffs[ pointer - 1 ][ 1 ] ) {\n\t\n\t\t\t\t\t\t// Shift the edit over the previous equality.\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = diffs[ pointer - 1 ][ 1 ] +\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( 0, diffs[ pointer ][ 1 ].length -\n\t\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ].length );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] + diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer - 1, 1 );\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t} else if ( diffPointer.substring( 0, diffs[ pointer + 1 ][ 1 ].length ) ===\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] ) {\n\t\n\t\t\t\t\t\t// Shift the edit over the next equality.\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ] =\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( diffs[ pointer + 1 ][ 1 ].length ) +\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer + 1, 1 );\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\t// If shifts were made, the diff needs reordering and another shift sweep.\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\t};\n\t\n\t\treturn function( o, n ) {\n\t\t\tvar diff, output, text;\n\t\t\tdiff = new DiffMatchPatch();\n\t\t\toutput = diff.DiffMain( o, n );\n\t\t\tdiff.diffCleanupEfficiency( output );\n\t\t\ttext = diff.diffPrettyHtml( output );\n\t\n\t\t\treturn text;\n\t\t};\n\t}() );\n\t\n\t}() );\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(51), __webpack_require__(52)(module)))\n\n/***/ },\n\n/***/ 51:\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\t\n\tprocess.listeners = function (name) { return [] }\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n\n/***/ 52:\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },\n\n/***/ 53:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n\t *\n\t * https://github.com/twada/qunit-tap\n\t * version: 1.5.1\n\t *\n\t * Copyright (c) 2010-2016 Takuto Wada\n\t * Dual licensed under the MIT and GPLv2 licenses.\n\t *   https://raw.github.com/twada/qunit-tap/master/MIT-LICENSE.txt\n\t *   https://raw.github.com/twada/qunit-tap/master/GPL-LICENSE.txt\n\t *\n\t * A part of extend function is:\n\t *   Copyright 2012 jQuery Foundation and other contributors\n\t *   Released under the MIT license.\n\t *   http://jquery.org/license\n\t */\n\t(function (root, factory) {\n\t    'use strict';\n\t\n\t    // using returnExports UMD pattern\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === 'object') {\n\t        module.exports = factory();\n\t    } else {\n\t        root.qunitTap = factory();\n\t    }\n\t}(this, function () {\n\t    'use strict';\n\t\n\t    var qunitTapVersion = '1.5.1',\n\t        slice = Array.prototype.slice;\n\t\n\t    // borrowed from qunit.js\n\t    function extend (a, b) {\n\t        var prop;\n\t        for (prop in b) {\n\t            if (b.hasOwnProperty(prop)) {\n\t                if (typeof b[prop] === 'undefined') {\n\t                    delete a[prop];\n\t                } else {\n\t                    a[prop] = b[prop];\n\t                }\n\t            }\n\t        }\n\t        return a;\n\t    }\n\t\n\t    function indexOf (ary, element) {\n\t        var i;\n\t        for (i = 0; i < ary.length; i += 1) {\n\t            if (ary[i] === element) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t\n\t    function removeElement (ary, element) {\n\t        var index = indexOf(ary, element);\n\t        if (index !== -1) {\n\t            return ary.splice(index, 1);\n\t        } else {\n\t            return [];\n\t        }\n\t    }\n\t\n\t    function isPlanRequired (conf) {\n\t        return (typeof conf !== 'undefined' && typeof conf.requireExpects !== 'undefined' && conf.requireExpects);\n\t    }\n\t\n\t    function isPassed (details) {\n\t        return !!(details.result);\n\t    }\n\t\n\t    function isFailed (details) {\n\t        return !(isPassed(details));\n\t    }\n\t\n\t    function isAssertOkFailed (details) {\n\t        return isFailed(details) && typeof details.expected === 'undefined' && typeof details.actual === 'undefined';\n\t    }\n\t\n\t    function escapeLineEndings (str) {\n\t        return str.replace(/(\\r?\\n)/g, '$&# ');\n\t    }\n\t\n\t    function ltrim (str) {\n\t        return str.replace(/^\\s+/, '');\n\t    }\n\t\n\t    function noop (obj) {\n\t        return obj;\n\t    }\n\t\n\t    function render (desc, fieldName, fieldValue, formatter) {\n\t        desc.push(fieldName + ': ' + formatter(fieldValue));\n\t    }\n\t\n\t    function renderIf (shouldRender, desc, fieldName, fieldValue, formatter) {\n\t        if (!shouldRender || typeof fieldValue === 'undefined') {\n\t            return;\n\t        }\n\t        render(desc, fieldName, fieldValue, formatter);\n\t    }\n\t\n\t    function formatTestLine (testLine, rest) {\n\t        if (!rest) {\n\t            return testLine;\n\t        }\n\t        return testLine + ' - ' + escapeLineEndings(rest);\n\t    }\n\t\n\t    var createCallbackAppenderFor = function (qu) {\n\t        return function (subject, observer, event) {\n\t            var originalLoggingCallback = subject[event],\n\t                callback = function () {\n\t                    // make listener methods (moduleStart,testStart,log, ...) overridable.\n\t                    observer[event].apply(observer, slice.apply(arguments));\n\t                };\n\t            originalLoggingCallback(callback);\n\t            return callback;\n\t        };\n\t    };\n\t\n\t\n\t    /**\n\t     * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n\t     * @param qunitObject QUnit object reference.\n\t     * @param printLikeFunction print-like function for TAP output (assumes line-separator is added by this function for each call).\n\t     * @param options configuration options to customize default behavior.\n\t     * @return object to provide QUnit-TAP API and customization subject.\n\t     */\n\t    function qunitTap(qunitObject, printLikeFunction, options) {\n\t        if (!qunitObject) {\n\t            throw new Error('should pass QUnit object reference. Please check QUnit\\'s \"require\" path if you are using Node.js (or any CommonJS env).');\n\t        } else if (typeof printLikeFunction !== 'function') {\n\t            throw new Error('should pass print-like function');\n\t        }\n\t\n\t        var qu = qunitObject,\n\t            tap = {},\n\t            deprecateOption = function deprecateOption (optionName, fallback) {\n\t                // option deprecation and fallback function\n\t                if (!options || typeof options !== 'object') {\n\t                    return;\n\t                }\n\t                if (typeof options[optionName] === 'undefined') {\n\t                    return;\n\t                }\n\t                printLikeFunction('# WARNING: Option \"' + optionName + '\" is deprecated and will be removed in future version.');\n\t                fallback(options[optionName]);\n\t            },\n\t            targetEvents = [\n\t                'moduleStart',\n\t                'testStart',\n\t                'log',\n\t                'testDone',\n\t                'done'\n\t            ],\n\t            registeredCallbacks = {},\n\t            explain = (function () {\n\t                if (typeof qu.dump !== 'undefined' && typeof qu.dump.parse === 'function') {\n\t                    return function explain (obj) {\n\t                        return qu.dump.parse(obj);\n\t                    };\n\t                }\n\t                if (typeof qu.jsDump !== 'undefined' && typeof qu.jsDump.parse === 'function') {\n\t                    return function explain (obj) {\n\t                        return qu.jsDump.parse(obj);\n\t                    };\n\t                }\n\t                return noop;\n\t            })();\n\t\n\t        tap.config = extend(\n\t            {\n\t                initialCount: 1,\n\t                showModuleNameOnFailure: true,\n\t                showTestNameOnFailure: true,\n\t                showExpectationOnFailure: true,\n\t                showSourceOnFailure: true\n\t            },\n\t            options\n\t        );\n\t        deprecateOption('noPlan', function (flag) {\n\t            printLikeFunction('# Now QUnit-TAP works as with \"noPlan: true\" by default. If you want to delare plan explicitly, please use \"QUnit.config.requireExpects\" option instead.');\n\t            tap.config.noPlan = flag;\n\t        });\n\t        deprecateOption('count', function (count) {\n\t            tap.config.initialCount = (count + 1);\n\t        });\n\t        deprecateOption('showDetailsOnFailure', function (flag) {\n\t            tap.config.showModuleNameOnFailure = flag;\n\t            tap.config.showTestNameOnFailure = flag;\n\t            tap.config.showExpectationOnFailure = flag;\n\t            tap.config.showSourceOnFailure = flag;\n\t        });\n\t        tap.VERSION = qunitTapVersion;\n\t        tap.puts = printLikeFunction;\n\t        tap.count = tap.config.initialCount - 1;\n\t        tap.expectedCount = tap.config.initialCount - 1;\n\t\n\t        function isEnabled (configName) {\n\t            return tap.config[configName];\n\t        }\n\t\n\t        function formatDetails (details) {\n\t            if (isPassed(details)) {\n\t                return details.message;\n\t            }\n\t            var desc = [];\n\t            if (details.message) {\n\t                desc.push(details.message);\n\t            }\n\t            if (isEnabled('showExpectationOnFailure') && !(isAssertOkFailed(details))) {\n\t                render(desc, 'expected', details.expected, explain);\n\t                render(desc, 'got', details.actual, explain);\n\t            }\n\t            renderIf(isEnabled('showTestNameOnFailure'), desc, 'test', details.name, noop);\n\t            renderIf(isEnabled('showModuleNameOnFailure'), desc, 'module', details.module, noop);\n\t            renderIf(isEnabled('showSourceOnFailure'), desc, 'source', details.source, ltrim);\n\t            return desc.join(', ');\n\t        }\n\t\n\t        function printPlanLine (toCount) {\n\t            tap.puts(tap.config.initialCount + '..' + toCount);\n\t        }\n\t\n\t        function unsubscribeEvent (eventName) {\n\t            var listeners;\n\t            if (indexOf(targetEvents, eventName) === -1) {\n\t                return;\n\t            }\n\t            listeners = qu.config[eventName];\n\t            if (typeof listeners === 'undefined') {\n\t                return;\n\t            }\n\t            removeElement(listeners, registeredCallbacks[eventName]);\n\t        }\n\t\n\t        function unsubscribeEvents (eventNames) {\n\t            var i;\n\t            for (i = 0; i < eventNames.length; i += 1) {\n\t                unsubscribeEvent(eventNames[i]);\n\t            }\n\t        }\n\t\n\t        tap.explain = explain;\n\t\n\t        tap.note = function note (obj) {\n\t            tap.puts(escapeLineEndings('# ' + obj));\n\t        };\n\t\n\t        tap.diag = function diag (obj) {\n\t            tap.note(obj);\n\t            return false;\n\t        };\n\t\n\t        tap.moduleStart = function moduleStart (arg) {\n\t            var name = (typeof arg === 'string') ? arg : arg.name;\n\t            tap.note('module: ' + name);\n\t        };\n\t\n\t        tap.testStart = function testStart (arg) {\n\t            var name = (typeof arg === 'string') ? arg : arg.name;\n\t            tap.note('test: ' + name);\n\t        };\n\t\n\t        tap.log = function log (details) {\n\t            var testLine = '';\n\t            tap.count += 1;\n\t            if (isFailed(details)) {\n\t                testLine += 'not ';\n\t            }\n\t            testLine += ('ok ' + tap.count);\n\t            tap.puts(formatTestLine(testLine, formatDetails(details)));\n\t        };\n\t\n\t        tap.testDone = function testDone () {\n\t            if (isPlanRequired(qu.config)) {\n\t                tap.expectedCount += qu.config.current.expected;\n\t            }\n\t        };\n\t\n\t        tap.done = function done () {\n\t            if (typeof tap.config.noPlan !== 'undefined' && !(tap.config.noPlan)) {\n\t                // Do nothing until removal of 'noPlan' option.\n\t            } else if (isPlanRequired(qu.config)) {\n\t                printPlanLine(tap.expectedCount);\n\t            } else {\n\t                printPlanLine(tap.count);\n\t            }\n\t        };\n\t\n\t        tap.unsubscribe = function unsubscribe () {\n\t            if (typeof qu.config === 'undefined') {\n\t                return;\n\t            }\n\t            if (arguments.length === 0) {\n\t                unsubscribeEvents(targetEvents);\n\t            } else {\n\t                unsubscribeEvents(slice.apply(arguments));\n\t            }\n\t        };\n\t\n\t        (function () {\n\t            var appendCallback = createCallbackAppenderFor(qu),\n\t                eventName, i, callback;\n\t            for (i = 0; i < targetEvents.length; i += 1) {\n\t                eventName = targetEvents[i];\n\t                callback = appendCallback(qu, tap, eventName);\n\t                registeredCallbacks[eventName] = callback;\n\t            }\n\t        })();\n\t\n\t        return tap;\n\t    }\n\t\n\t    qunitTap.qunitTap = function () {\n\t        throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require(\"qunit-tap\") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');\n\t    };\n\t\n\t    // using substack pattern (export single function)\n\t    return qunitTap;\n\t}));\n\n\n/***/ },\n\n/***/ 54:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\t\n\t/* global QUnit, qunitTap */\n\t\n\tvar qunit_started = false;\n\t\n\t/* Always use explicit start */\n\tQUnit.config.autostart = false;\n\t\n\t/*\n\t * HACK: phantomjs doesn't handle uncaught exceptions as it should if\n\t * window.onerror is non-null, even when that handler returns false\n\t * (expecting that the browser default behavior will occur).\n\t *\n\t * So remove the qunit window.onerror handler until the tests actually\n\t * start, and any errors become part of the test suite results.\n\t */\n\tvar qunit_onerror = window.onerror;\n\twindow.onerror = null;\n\tQUnit.begin(function() {\n\t    window.onerror = function(error, file, line) {\n\t        var ret = false;\n\t        if (qunit_onerror)\n\t            ret = qunit_onerror(error, file, line);\n\t\n\t        /*\n\t         * If a global exception happens during an async test\n\t         * then that test won't be able to call the start() function\n\t         * to move to the next test, so call it here.\n\t         */\n\t        if (QUnit.config.current && QUnit.config.current.async)\n\t            QUnit.start();\n\t\n\t        return ret;\n\t    };\n\t});\n\t\n\tQUnit.moduleStart(function() {\n\t    qunit_started = true;\n\t});\n\t\n\tQUnit.done(function() {\n\t    console.log(\"phantom-tap-done\");\n\t    window.onerror = null;\n\t});\n\t/*\n\t * Now initialize qunit-tap\n\t *\n\t * When not running under tap-phantom this stuff will just show up in\n\t * the console. We print out a special canary at the end of the tests\n\t * so that tap-phantom can know when the testing is done.\n\t *\n\t * In addition double check for a test file that doesn't properly call\n\t * QUnit.start() after its done setting up its tests.\n\t *\n\t * We also want to insert the current test name into all tap lines.\n\t */\n\tvar tap_regex = /^((not )?ok [0-9]+ (- )?)(.*)$/;\n\tqunitTap(QUnit, function() {\n\t    if (arguments.length == 1 && QUnit.config.current) {\n\t        var match = tap_regex.exec(arguments[0]);\n\t        if (match) {\n\t            console.log(match[1] + QUnit.config.current.testName + \": \" + match[4]);\n\t            return;\n\t        }\n\t    }\n\t    console.log.apply(console, arguments);\n\t});\n\t\n\twindow.setTimeout(function() {\n\t    if (!qunit_started) {\n\t        console.log(\"QUnit not started by test\");\n\t        console.log(\"phantom-tap-error\");\n\t    }\n\t}, 20000);\n\t\n\twindow.tests_included = true;\n\t\n\tif (module && module.exports)\n\t    module.exports = QUnit;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(52)(module)))\n\n/***/ },\n\n/***/ 55:\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n\n/******/ });\n\n\n// WEBPACK FOOTER //\n// storaged/test-util.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 464edd447d94e2beb357","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2014 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar utils = require(\"./utils\");\nvar QUnit = require(\"qunit-tests\");\nvar assert = QUnit;\n\nQUnit.test(\"format_delay\", function() {\n    var checks = [\n        [ 15550000, \"4 hours, 19 minutes, 10 seconds\" ]\n    ];\n\n    assert.expect(checks.length);\n    for (var i = 0; i < checks.length; i++) {\n        assert.strictEqual(utils.format_delay(checks[i][0]), checks[i][1],\n                           \"format_delay(\" + checks[i][0] + \") = \" + checks[i][1]);\n    }\n});\n\nQUnit.test(\"compare_versions\", function() {\n    var checks = [\n        [ \"\",      \"\",      0 ],\n        [ \"0\",     \"0\",     0 ],\n        [ \"1\",     \"0\",     1 ],\n        [ \"0\",     \"1\",    -1 ],\n        [ \"2\",     \"1.9\",   1 ],\n        [ \"2.0\",   \"2\",     1 ],\n        [ \"2.1.6\", \"2.5\",  -1 ],\n        [ \"2..6\",  \"2.0.6\", 0 ],\n    ];\n\n    function sign(n) {\n        return (n === 0) ? 0 : (n < 0)? -1 : 1;\n    }\n\n    assert.expect(checks.length);\n    for (var i = 0; i < checks.length; i++) {\n        assert.strictEqual(sign(utils.compare_versions(checks[i][0], checks[i][1])), checks[i][2],\n                           \"compare_versions(\" + checks[i][0] + \", \" + checks[i][1] + \") = \" + checks[i][2]);\n    }\n});\n\nQUnit.test(\"mdraid_name_nohostnamed\", function() {\n    var orig_hostnamed = utils.hostnamed;\n    utils.hostnamed = { StaticHostname: undefined };\n    assert.strictEqual(utils.mdraid_name({ \"Name\": \"somehost:mydev\" }), \"mydev\", \"remote host name is skipped when hostnamed is not available\");\n    utils.hostnamed = orig_hostnamed;\n});\n\nQUnit.test(\"mdraid_name_remote\", function() {\n    var orig_hostnamed = utils.hostnamed;\n    utils.hostnamed = { StaticHostname: \"sweethome\" };\n    assert.strictEqual(utils.mdraid_name({ \"Name\": \"somehost:mydev\" }), \"mydev (from somehost)\", \"expected name for remote host\");\n    utils.hostnamed = orig_hostnamed;\n});\n\nQUnit.test(\"mdraid_name_local\", function() {\n    var orig_hostnamed = utils.hostnamed;\n    utils.hostnamed = { StaticHostname: \"sweethome\" };\n    assert.strictEqual(utils.mdraid_name({ \"Name\": \"sweethome:mydev\" }), \"mydev\", \"expected name for local host\");\n    utils.hostnamed = orig_hostnamed;\n});\n\n/* Wait until the hostnamed dbus proxy is actually ready; otherwise the test\n * finishes and kills the bridge before it can respond to the dbus channel open\n * request for the hostnamed connection, which can cause hangs in\n * ./test-server due to timing out that queued request. */\nutils.hostnamed.wait(QUnit.start);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/storaged/test-util.js\n// module id = 0\n// module chunks = 1","module.exports = jQuery;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jQuery\"\n// module id = 6\n// module chunks = 0 1","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 7\n// module chunks = 0 1","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2015 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    var $ = require(\"jquery\");\n    var cockpit = require(\"cockpit\");\n\n    var mustache = require(\"mustache\");\n    var service = require(\"service\");\n\n    var _ = cockpit.gettext;\n    var C_ = cockpit.gettext;\n\n    /* UTILITIES\n     */\n\n    var utils = { };\n\n    utils.compare_versions = function compare_versions(a, b) {\n        function to_ints(str) {\n            return str.split(\".\").map(function (s) { return s ? parseInt(s, 10) : 0; });\n        }\n\n        var a_ints = to_ints(a);\n        var b_ints = to_ints(b);\n        var len = Math.min(a_ints.length, b_ints.length);\n        var i;\n\n        for (i = 0; i < len; i++) {\n            if (a_ints[i] == b_ints[i])\n                continue;\n            return a_ints[i] - b_ints[i];\n        }\n\n        return a_ints.length - b_ints.length;\n    };\n\n    utils.hostnamed = cockpit.dbus(\"org.freedesktop.hostname1\").proxy();\n\n    utils.array_find = function array_find(array, pred) {\n        for (var i = 0; i < array.length; i++)\n            if (pred(array[i]))\n                return array[i];\n        return undefined;\n    };\n\n    utils.flatten = function flatten(array_of_arrays) {\n        if (array_of_arrays.length > 0)\n            return Array.prototype.concat.apply([], array_of_arrays);\n        else\n            return [ ];\n    };\n\n    utils.decode_filename = function decode_filename(encoded) {\n        return cockpit.utf8_decoder().decode(cockpit.base64_decode(encoded).slice(0,-1));\n    };\n\n    utils.encode_filename = function encode_filename(decoded) {\n        return cockpit.base64_encode(cockpit.utf8_encoder().encode(decoded).concat([0]));\n    };\n\n    utils.fmt_size = function fmt_size(bytes) {\n        return cockpit.format_bytes(bytes, 1024);\n    };\n\n    utils.fmt_size_long = function fmt_size_long(bytes) {\n        var with_binary_unit = cockpit.format_bytes(bytes, 1024);\n        var with_decimal_unit = cockpit.format_bytes(bytes, 1000);\n        /* Translators: Used in \"...\" */\n        return with_binary_unit + \", \" + with_decimal_unit + \", \" + bytes + \" \" + C_(\"format-bytes\", \"bytes\");\n    };\n\n    utils.fmt_rate = function fmt_rate(bytes_per_sec) {\n        return cockpit.format_bytes_per_sec(bytes_per_sec, 1024);\n    };\n\n    utils.format_temperature = function format_temperature(kelvin) {\n        var celcius = kelvin - 273.15;\n        var fahrenheit = 9.0 * celcius / 5.0 + 32.0;\n        return celcius.toFixed(1) + \"° C / \" + fahrenheit.toFixed(1) + \"° F\";\n    };\n\n    utils.format_fsys_usage = function format_fsys_usage(used, total) {\n        var text = \"\";\n        var units = 1024;\n        var parts = cockpit.format_bytes(total, units, true);\n        text = \" / \" + parts.join(\" \");\n        units = parts[1];\n\n        parts = cockpit.format_bytes(used, units, true);\n        return parts[0] + text;\n    };\n\n    utils.format_delay = function format_delay(d) {\n        var seconds = Math.round(d/1000);\n        var minutes = Math.floor(seconds / 60);\n        var hours = Math.floor(minutes / 60);\n        seconds = seconds - minutes*60;\n        minutes = minutes - hours*60;\n\n        var s = seconds + \" seconds\";\n        if (minutes > 0)\n            s = minutes + \" minutes, \" + s;\n        if (hours > 0)\n            s = hours + \" hours, \" + s;\n        return s;\n    };\n\n    utils.format_size_and_text = function format_size_and_text(size, text) {\n        return cockpit.format(_(\"${size} ${desc}\"), { size: utils.fmt_size(size), desc: text});\n    };\n\n    utils.validate_lvm2_name = function validate_lvm2_name(name) {\n        if (name === \"\")\n            return _(\"Name cannot be empty.\");\n        if (name.length > 127)\n            return _(\"Name cannot be longer than 127 characters.\");\n        var m = name.match(/[^a-zA-Z0-9+._-]/);\n        if (m) {\n            if (m[0].search(/\\s+/) === -1)\n                return cockpit.format(_(\"Name cannot contain the character '$0'.\"), m[0]);\n            else\n                    return cockpit.format(_(\"Name cannot contain whitespace.\"), m[0]);\n        }\n    };\n\n    utils.block_name = function block_name(block) {\n        return utils.decode_filename(block.PreferredDevice);\n    };\n\n    utils.mdraid_name = function mdraid_name(mdraid) {\n        if (!mdraid.Name)\n            return \"\";\n\n        var parts = mdraid.Name.split(\":\");\n\n        if (parts.length != 2)\n            return mdraid.Name;\n\n        /* if we call hostnamed too early, before the dbus.proxy() promise is fulfilled,\n         * it will not be valid yet; it's too inconvenient to make this\n         * function asynchronous, so just don't show the host name in this case */\n        if (utils.hostnamed.StaticHostname === undefined || parts[0] == utils.hostnamed.StaticHostname)\n            return parts[1];\n        else\n            return cockpit.format(_(\"$name (from $host)\"),\n                                  { name: parts[1],\n                                    host: parts[0]\n                                  });\n    };\n\n    utils.lvol_name = function lvol_name(lvol) {\n        var type;\n        if (lvol.Type == \"pool\")\n            type = _(\"Pool for Thin Logical Volumes\");\n        else if (lvol.ThinPool != \"/\")\n            type =_(\"Thin Logical Volume\");\n        else if (lvol.Origin != \"/\")\n            type = _(\"Logical Volume (Snapshot)\");\n        else\n            type = _(\"Logical Volume\");\n        return mustache.render('{{Type}} \"{{Name}}\"', { Type: type, Name: lvol.Name });\n    };\n\n    utils.drive_name = function drive_name(drive) {\n        var name_parts = [ ];\n        if (drive.Vendor)\n            name_parts.push(drive.Vendor);\n        if (drive.Model)\n            name_parts.push(drive.Model);\n\n        var name = name_parts.join(\" \");\n        if (drive.Serial)\n            name += \" (\" + drive.Serial + \")\";\n        else if (drive.WWN)\n            name += \" (\" + drive.WWN + \")\";\n\n        return name;\n    };\n\n    utils.get_block_link_target = function get_block_link_target(client, path) {\n        var is_part, is_crypt, is_lvol;\n\n        while (true) {\n            if (client.blocks_part[path] && client.blocks_ptable[client.blocks_part[path].Table]) {\n                is_part = true;\n                path = client.blocks_part[path].Table;\n            } else if (client.blocks_crypto[path] && client.blocks[client.blocks_crypto[path].CryptoBackingDevice]) {\n                is_crypt = true;\n                path = client.blocks_crypto[path].CryptoBackingDevice;\n            } else\n                break;\n        }\n\n        if (client.blocks_lvm2[path] && client.lvols[client.blocks_lvm2[path].LogicalVolume])\n            is_lvol = true;\n\n        function fmt_part(link) {\n            // Partitions of logical volumes are shown as just logical volumes.\n            if (is_lvol && is_crypt)\n                return cockpit.format(_(\"<span>Encrypted Logical Volume of $0</span>\"), link);\n            else if (is_part && is_crypt)\n                return cockpit.format(_(\"<span>Encrypted Partition of $0</span>\"), link);\n            else if (is_lvol)\n                return cockpit.format(_(\"<span>Logical Volume of $0</span>\"), link);\n            else if (is_part)\n                return cockpit.format(_(\"<span>Partition of $0</span>\"), link);\n            else if (is_crypt)\n                return cockpit.format(_(\"<span>Encrypted $0</span>\"), link);\n            else\n                return link;\n        }\n\n        var block = client.blocks[path];\n        if (!block)\n            return;\n\n        var type, target, name;\n        if (client.mdraids[block.MDRaid]) {\n            type = \"mdraid\";\n            target = client.mdraids[block.MDRaid].UUID;\n            name = cockpit.format(_(\"RAID Device $0\"), utils.mdraid_name(client.mdraids[block.MDRaid]));\n        } else if (client.blocks_lvm2[path] &&\n                   client.lvols[client.blocks_lvm2[path].LogicalVolume] &&\n                   client.vgroups[client.lvols[client.blocks_lvm2[path].LogicalVolume].VolumeGroup]) {\n            type = \"vgroup\";\n            target = client.vgroups[client.lvols[client.blocks_lvm2[path].LogicalVolume].VolumeGroup].Name;\n            name = cockpit.format(_(\"Volume Group $0\"), target);\n        } else {\n            type = \"block\";\n            target = utils.block_name(block).replace(/^\\/dev\\//, \"\");\n            if (client.drives[block.Drive])\n                name = utils.drive_name(client.drives[block.Drive]);\n            else\n                name = utils.block_name(block);\n        }\n\n        return {\n            type: type,\n            target: target,\n            html: fmt_part(mustache.render('<a data-goto-{{type}}=\"{{target}}\">{{name}}</a>',\n                                           { type: type, target: target, name: name }))\n        };\n    };\n\n    utils.get_partitions = function get_partitions(client, block) {\n        var partitions = client.blocks_partitions[block.path];\n\n        function process_level(level, container_start, container_size) {\n            var n;\n            var last_end = container_start;\n            var total_end = container_start + container_size;\n            var block, start, size, is_container, is_contained;\n\n            var result = [ ];\n\n            function append_free_space(start, size) {\n                // There is a lot of rounding and aligning going on in\n                // the storage stack.  All of udisks2, libblockdev,\n                // and libparted seem to contribute their own ideas of\n                // where a partition really should start.\n                //\n                // The start of partitions are aggressively rounded\n                // up, sometimes twice, but the end is not aligned in\n                // the same way.  This means that a few megabytes of\n                // free space will show up between partitions.\n                //\n                // We hide these small free spaces because they are\n                // unexpected and can't be used for anything anyway.\n                //\n                // \"Small\" is anything less than 3 MiB, which seems to\n                // work okay.  (The worst case is probably creating\n                // the first logical partition inside a extended\n                // partition with udisks+libblockdev.  It leads to a 2\n                // MiB gap.)\n\n                if (size >= 3*1024*1024) {\n                    result.push({ type: 'free', start: start, size: size });\n                }\n            }\n\n            for (n = 0; n < partitions.length; n++) {\n                block = client.blocks[partitions[n].path];\n                start = partitions[n].Offset;\n                size = partitions[n].Size;\n                is_container = partitions[n].IsContainer;\n                is_contained = partitions[n].IsContained;\n\n                if (block === null)\n                    continue;\n\n                if (level === 0 && is_contained)\n                    continue;\n\n                if (level == 1 && !is_contained)\n                    continue;\n\n                if (start < container_start || start+size > container_start+container_size)\n                    continue;\n\n                append_free_space(last_end, start - last_end);\n                if (is_container) {\n                    result.push({ type: 'container', block: block, size: size,\n                                  partitions: process_level(level+1, start, size) });\n                } else {\n                    result.push({ type: 'block', block: block });\n                }\n                last_end = start + size;\n            }\n\n            append_free_space(last_end, total_end - last_end);\n\n            return result;\n        }\n\n        return process_level(0, 0, block.Size);\n    };\n\n    utils.get_available_spaces = function get_available_spaces(client) {\n        function is_free(path) {\n            var block = client.blocks[path];\n            var block_ptable = client.blocks_ptable[path];\n            var block_part = client.blocks_part[path];\n            var block_pvol = client.blocks_pvol[path];\n\n            function has_fs_label() {\n                if (!block.IdUsage)\n                    return false;\n                // Devices with a LVM2_member label need to actually be\n                // associated with a volume group.\n                if (block.IdType == 'LVM2_member' && (!block_pvol || !client.vgroups[block_pvol.VolumeGroup]))\n                    return false;\n                return true;\n            }\n\n            function is_mpath_member() {\n                if (!client.drives[block.Drive])\n                    return false;\n                if (!client.drives_block[block.Drive]) {\n                    // Broken multipath drive\n                    return true;\n                }\n                var members = client.drives_multipath_blocks[block.Drive];\n                for (var i = 0; i < members.length; i++) {\n                    if (members[i] == block)\n                        return true;\n                }\n                return false;\n            }\n\n            return (!block.HintIgnore &&\n                    block.Size > 0 &&\n                    !has_fs_label() &&\n                    !is_mpath_member() &&\n                    !block_ptable &&\n                    !(block_part && block_part.IsContainer));\n        }\n\n        function make(path) {\n            var block = client.blocks[path];\n            var link = utils.get_block_link_target(client, path);\n            var text = $('<div>').html(link.html).text();\n            return { type: 'block', block: block, size: block.Size, desc: text };\n        }\n\n        var spaces = Object.keys(client.blocks).filter(is_free).sort(utils.make_block_path_cmp(client)).map(make);\n\n        function add_free_spaces(block) {\n            var parts = utils.get_partitions(client, block);\n            var i, p, link, text;\n            for (i in parts) {\n                p = parts[i];\n                if (p.type == 'free') {\n                    link = utils.get_block_link_target(client, block.path);\n                    text = $('<div>').html(link.html).text();\n                    spaces.push({ type: 'free', block: block, start: p.start, size: p.size,\n                                  desc: cockpit.format(_(\"unpartitioned space on $0\"), text) });\n                }\n            }\n        }\n\n        for (var p in client.blocks_ptable)\n            add_free_spaces(client.blocks[p]);\n\n        return spaces;\n    };\n\n    utils.available_space_to_option = function available_space_to_option(spc) {\n        return {\n            value: spc,\n            Title: utils.format_size_and_text(spc.size, spc.desc),\n            Label: utils.block_name(spc.block)\n        };\n    };\n\n    utils.prepare_available_spaces = function prepare_available_spaces(client, spcs) {\n        function prepare(spc) {\n            if (spc.type == 'block')\n                return cockpit.resolve(spc.block.path);\n            else if (spc.type == 'free') {\n                var block_ptable = client.blocks_ptable[spc.block.path];\n                return block_ptable.CreatePartition(spc.start, spc.size, \"\", \"\", { });\n            }\n        }\n        return cockpit.all(spcs.map(prepare));\n    };\n\n    /* Comparison function for sorting lists of block devices.\n\n       We sort by major:minor numbers to get the expected order when\n       there are more than 10 devices of a kind.  For example, if you\n       have 20 loopback devices named loop0 to loop19, sorting them\n       alphabetically would put them in the wrong order\n\n           loop0, loop1, loop10, loop11, ..., loop2, ...\n\n       Sorting by major:minor is an easy way to do the right thing.\n    */\n\n    utils.block_cmp = function block_cmp(a, b) {\n        return a.DeviceNumber - b.DeviceNumber;\n    };\n\n    utils.make_block_path_cmp = function(client) {\n        return function(path_a, path_b) {\n            return utils.block_cmp(client.blocks[path_a], client.blocks[path_b]);\n        };\n    };\n\n    var multipathd_service;\n\n    utils.get_multipathd_service = function() {\n        if (!multipathd_service)\n            multipathd_service = service.proxy(\"multipathd\");\n        return multipathd_service;\n    };\n\n    utils.init_arming_zones = function init_arming_zones($top) {\n        $top.on('click', 'button.arm-button', function () {\n            var was_active = $(this).hasClass('active');\n            $(this).toggleClass('active', !was_active);\n            $(this).parents('.arming-zone').toggleClass('armed', !was_active);\n        });\n    };\n\n    utils.reset_arming_zone = function reset_arming_zone($btn) {\n        var $zone = $btn.parents('.arming-zone');\n        var $arm_btn = $zone.find('.arm-button');\n        $arm_btn.removeClass('active');\n        $zone.removeClass('armed');\n    };\n\n\n    function get_children(client, path) {\n        var children = [ ];\n\n        if (client.blocks_cleartext[path]) {\n            children.push(client.blocks_cleartext[path].path);\n        }\n\n        if (client.blocks_ptable[path]) {\n            client.blocks_partitions[path].forEach(function (part) {\n                if (!part.IsContainer)\n                    children.push(part.path);\n            });\n        }\n\n        if (client.blocks_part[path] && client.blocks_part[path].IsContainer) {\n            var ptable_path = client.blocks_part[path].Table;\n            client.blocks_partitions[ptable_path].forEach(function (part) {\n                if (part.IsContained)\n                    children.push(part.path);\n            });\n        }\n\n        if (client.vgroups[path]) {\n            client.vgroups_lvols[path].forEach(function (lvol) {\n                if (client.lvols_block[lvol.path])\n                    children.push(client.lvols_block[lvol.path].path);\n            });\n        }\n\n        return children;\n    }\n\n    utils.get_active_usage = function get_active_usage(client, path) {\n\n        function get_usage(path) {\n            var block = client.blocks[path];\n            var fsys = client.blocks_fsys[path];\n            var mdraid = block && client.mdraids[block.MDRaidMember];\n            var pvol = client.blocks_pvol[path];\n            var vgroup = pvol && client.vgroups[pvol.VolumeGroup];\n\n            var usage = utils.flatten(get_children(client, path).map(get_usage));\n\n            if (fsys && fsys.MountPoints.length > 0)\n                usage.push({ usage: 'mounted',\n                             block: block,\n                             fsys: fsys\n                           });\n\n            if (mdraid)\n                usage.push({ usage: 'mdraid-member',\n                             block: block,\n                             mdraid: mdraid\n                           });\n\n            if (vgroup)\n                usage.push({ usage: 'pvol',\n                             block: block,\n                             pvol: pvol,\n                             vgroup: vgroup\n                           });\n\n            return usage;\n        }\n\n        // Prepare the result for Mustache\n\n        var usage = get_usage(path);\n\n        var res = {\n            raw: usage,\n            Teardown: {\n                Mounts: [ ],\n                MDRaidMembers: [ ],\n                PhysicalVolumes: [ ]\n            },\n            Blocking: {\n                Mounts: [ ],\n                MDRaidMembers: [ ],\n                PhysicalVolumes: [ ]\n            }\n        };\n\n        usage.forEach(function (use) {\n            var entry, active_state;\n\n            if (use.usage == 'mounted') {\n                res.Teardown.Mounts.push({\n                    Name: utils.block_name(use.block),\n                    MountPoint: utils.decode_filename(use.fsys.MountPoints[0])\n                });\n            } else if (use.usage == 'mdraid-member') {\n                entry = {\n                    Name: utils.block_name(use.block),\n                    MDRaid: utils.mdraid_name(use.mdraid)\n                };\n                active_state = utils.array_find(use.mdraid.ActiveDevices, function (as) {\n                    return as[0] == use.block.path;\n                });\n                if (active_state && active_state[1] < 0)\n                    res.Teardown.MDRaidMembers.push(entry);\n                else\n                    res.Blocking.MDRaidMembers.push(entry);\n            } else if (use.usage == 'pvol') {\n                entry = {\n                    Name: utils.block_name(use.block),\n                    VGroup: use.vgroup.Name\n                };\n                if (use.pvol.FreeSize == use.pvol.Size) {\n                    res.Teardown.PhysicalVolumes.push(entry);\n                } else {\n                    res.Blocking.PhysicalVolumes.push(entry);\n                }\n            }\n        });\n\n        res.Teardown.HasMounts = res.Teardown.Mounts.length > 0;\n        res.Teardown.HasMDRaidMembers = res.Teardown.MDRaidMembers.length > 0;\n        res.Teardown.HasPhysicalVolumes = res.Teardown.PhysicalVolumes.length > 0;\n\n        res.Blocking.HasMounts = res.Blocking.Mounts.length > 0;\n        res.Blocking.HasMDRaidMembers = res.Blocking.MDRaidMembers.length > 0;\n        res.Blocking.HasPhysicalVolumes = res.Blocking.PhysicalVolumes.length > 0;\n\n        if (!res.Blocking.HasMounts && !res.Blocking.HasMDRaidMembers && !res.Blocking.HasPhysicalVolumes)\n            res.Blocking = null;\n\n        return res;\n    };\n\n    utils.teardown_active_usage = function teardown_active_usage(client, usage) {\n\n        // The code below is complicated by the fact that the last\n        // physical volume of a volume group can not be removed\n        // directly (even if it is completely empty).  We want to\n        // remove the whole volume group instead in this case.\n        //\n        // However, we might be removing the last two (or more)\n        // physical volumes here, and it is easiest to catch this\n        // condition upfront by reshuffling the data structures.\n\n        function unmount(mounteds) {\n            return cockpit.all(mounteds.map(function (m) {\n                return m.fsys.Unmount({});\n            }));\n        }\n\n        function mdraid_remove(members) {\n            return cockpit.all(members.map(function (m) {\n                return m.mdraid.RemoveDevice(m.block.path, { wipe: { t: 'b', v: true } });\n            }));\n        }\n\n        function pvol_remove(pvols) {\n            var by_vgroup = { }, p;\n            pvols.forEach(function (p) {\n                if (!by_vgroup[p.vgroup.path])\n                    by_vgroup[p.vgroup.path] = [ ];\n                by_vgroup[p.vgroup.path].push(p.block);\n            });\n\n            function handle_vg(p) {\n                var vg = client.vgroups[p];\n                var pvs = by_vgroup[p];\n                // If we would remove all physical volumes of a volume\n                // group, remove the whole volume group instead.\n                if (pvs.length == client.vgroups_pvols[p].length) {\n                    return vg.Delete({ 'tear-down': { t: 'b', v: true }\n                                     });\n                } else {\n                    return cockpit.all(pvs.map(function (pv) {\n                        return vg.RemoveDevice(pv.path, true, {});\n                    }));\n                }\n            }\n\n            for (p in by_vgroup)\n                handle_vg(p);\n        }\n\n        return cockpit.all([ unmount(usage.raw.filter(function(use) { return use.usage == \"mounted\"; })),\n                             mdraid_remove(usage.raw.filter(function(use) { return use.usage == \"mdraid-member\"; })),\n                             pvol_remove(usage.raw.filter(function(use) { return use.usage == \"pvol\"; }))\n                           ]);\n    };\n\n    /* jQuery.amend function. This will be removed as we move towards React */\n\n    function sync(output, input, depth) {\n        var na, nb, a, b, i;\n        var attrs, attr, seen;\n\n        if (depth > 0) {\n            if (output.nodeType != input.nodeType ||\n                output.nodeName != input.nodeName ||\n                (output.nodeType != 1 && output.nodeType != 3)) {\n                output.parentNode.replaceChild(input.parentNode.removeChild(input), output);\n                return;\n\n            } else if (output.nodeType == 3) {\n                if (output.nodeValue != input.nodeValue)\n                    output.nodeValue = input.nodeValue;\n                return;\n            }\n        }\n\n        if (output.nodeType == 1) {\n\n            /* Sync attributes */\n            if (depth > 0) {\n                seen = { };\n                attrs = output.attributes;\n                for (i = attrs.length - 1; i >= 0; i--)\n                    seen[attrs[i].name] = attrs[i].value;\n                for (i = input.attributes.length - 1; i >= 0; i--) {\n                    attr = input.attributes[i];\n                    if (seen[attr.name] !== attr.value)\n                        output.setAttribute(attr.name, attr.value);\n                    delete seen[attr.name];\n                }\n                for (i in seen)\n                    output.removeAttribute(i);\n            }\n\n            /* Sync children */\n            na = output.firstChild;\n            nb = input.firstChild;\n            for(;;) {\n                a = na;\n                b = nb;\n                while (a && a.nodeType != 1 && a.nodeType != 3)\n                    a = a.nextSibling;\n                while (b && b.nodeType != 1 && b.nodeType != 3)\n                    b = b.nextSibling;\n                if (!a && !b) {\n                    break;\n                } else if (!a) {\n                    na = null;\n                    nb = b.nextSibling;\n                    output.appendChild(input.removeChild(b));\n                } else if (!b) {\n                    na = a.nextSibling;\n                    nb = null;\n                    output.removeChild(a);\n                } else {\n                    na = a.nextSibling;\n                    nb = b.nextSibling;\n                    sync(a, b, (depth || 0) + 1);\n                }\n            }\n        }\n    }\n\n    $.fn.amend = function amend(data, options) {\n        this.each(function() {\n            var el = $(\"<div>\").html(data);\n            sync(this, el[0], 0);\n        });\n        return this;\n    };\n\n    /* Prevent flicker due to the marriage of jQuery and React here */\n    utils.hide = function hide(selector) {\n        var element = document.querySelector(\"#storage-detail\");\n        element.setAttribute(\"hidden\", \"\");\n    };\n\n    utils.show_soon = function show_soon(selector, ready) {\n        var element = document.querySelector(selector);\n        if (!element.hasAttribute(\"hidden\"))\n            return;\n        var val = element.getAttribute(\"hidden\");\n        if (ready) {\n            element.removeAttribute(\"hidden\");\n            window.clearTimeout(parseInt(val, 10));\n        } else if (!val) {\n            val = window.setTimeout(function() {\n                show_soon(selector, true);\n            }, 2000);\n            element.setAttribute(\"hidden\", String(val));\n        }\n    };\n\n    module.exports = utils;\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/storaged/utils.js\n// module id = 9\n// module chunks = 0 1","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar cockpit = require(\"cockpit\");\nvar mustache = require(\"mustache/mustache\");\n\n/*\n * Turns a mustache template into a translated mustache template\n * by preparsing it and translating it.\n */\nvar cache = { };\n\nfunction translate(template) {\n    if (template in cache)\n        return cache[template];\n    var div = document.createElement(\"div\");\n    div.innerHTML = template;\n    cockpit.translate(div);\n    var result = div.innerHTML;\n    cache[template] = result;\n    return result;\n}\n\n/* Just like the mustache object, except for translated */\nmodule.exports = cockpit.extend({ }, mustache, {\n    render: function render(template, view, partials) {\n        return translate(mustache.render(template, view, partials));\n    },\n    to_html: function to_html(template, view, partials, send) {\n        return translate(mustache.to_html(template, view, partials, send));\n    },\n    clearCache: function clearCache() {\n        cache = { };\n        return mustache.clearCache();\n    }\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/mustache.js\n// module id = 10\n// module chunks = 0 1","/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false*/\n\n(function (root, factory) {\n  if (typeof exports === \"object\" && exports) {\n    factory(exports); // CommonJS\n  } else {\n    var mustache = {};\n    factory(mustache);\n    if (typeof define === \"function\" && define.amd) {\n      define(mustache); // AMD\n    } else {\n      root.Mustache = mustache; // <script>\n    }\n  }\n}(this, function (mustache) {\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var RegExp_test = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return RegExp_test.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var Object_toString = Object.prototype.toString;\n  var isArray = Array.isArray || function (object) {\n    return Object_toString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  var entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  function escapeTags(tags) {\n    if (!isArray(tags) || tags.length !== 2) {\n      throw new Error('Invalid tags: ' + tags);\n    }\n\n    return [\n      new RegExp(escapeRegExp(tags[0]) + \"\\\\s*\"),\n      new RegExp(\"\\\\s*\" + escapeRegExp(tags[1]))\n    ];\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate(template, tags) {\n    tags = tags || mustache.tags;\n    template = template || '';\n\n    if (typeof tags === 'string') {\n      tags = tags.split(spaceRe);\n    }\n\n    var tagRes = escapeTags(tags);\n    var scanner = new Scanner(template);\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) {\n          delete tokens[spaces.pop()];\n        }\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(tagRes[0]);\n      if (value) {\n        for (var i = 0, len = value.length; i < len; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push(['text', chr, start, start + 1]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(tagRes[0])) break;\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(tagRes[1]);\n      } else if (type === '{') {\n        value = scanner.scanUntil(new RegExp('\\\\s*' + escapeRegExp('}' + tags[1])));\n        scanner.scan(curlyRe);\n        scanner.scanUntil(tagRes[1]);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(tagRes[1]);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(tagRes[1])) {\n        throw new Error('Unclosed tag at ' + scanner.pos);\n      }\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection) {\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n        }\n        if (openSection[1] !== value) {\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n        }\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        tagRes = escapeTags(tags = value.split(spaceRe));\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n    if (openSection) {\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n    }\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function () {\n    return this.tail === \"\";\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function (re) {\n    var match = this.tail.match(re);\n\n    if (match && match.index === 0) {\n      var string = match[0];\n      this.tail = this.tail.substring(string.length);\n      this.pos += string.length;\n      return string;\n    }\n\n    return \"\";\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = \"\";\n      break;\n    case 0:\n      match = \"\";\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view == null ? {} : view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function (name) {\n    var value;\n    if (name in this.cache) {\n      value = this.cache[name];\n    } else {\n      var context = this;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n\n          var names = name.split('.'), i = 0;\n          while (value != null && i < names.length) {\n            value = value[names[i++]];\n          }\n        } else {\n          value = context.view[name];\n        }\n\n        if (value != null) break;\n\n        context = context.parent;\n      }\n\n      this.cache[name] = value;\n    }\n\n    if (isFunction(value)) {\n      value = value.call(this.view);\n    }\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null) {\n      tokens = cache[template] = parseTemplate(template, tags);\n    }\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    var self = this;\n    function subRender(template) {\n      return self.render(template, context, partials);\n    }\n\n    var token, value;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n        value = context.lookup(token[1]);\n        if (!value) continue;\n\n        if (isArray(value)) {\n          for (var j = 0, jlen = value.length; j < jlen; ++j) {\n            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n          }\n        } else if (typeof value === 'object' || typeof value === 'string') {\n          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n        } else if (isFunction(value)) {\n          if (typeof originalTemplate !== 'string') {\n            throw new Error('Cannot use higher-order sections without the original template');\n          }\n\n          // Extract the portion of the original template that the section contains.\n          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n          if (value != null) buffer += value;\n        } else {\n          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n        }\n\n        break;\n      case '^':\n        value = context.lookup(token[1]);\n\n        // Use JavaScript's definition of falsy. Include empty arrays.\n        // See https://github.com/janl/mustache.js/issues/186\n        if (!value || (isArray(value) && value.length === 0)) {\n          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n        }\n\n        break;\n      case '>':\n        if (!partials) continue;\n        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n        if (value != null) buffer += this.renderTokens(this.parse(value), context, partials, value);\n        break;\n      case '&':\n        value = context.lookup(token[1]);\n        if (value != null) buffer += value;\n        break;\n      case 'name':\n        value = context.lookup(token[1]);\n        if (value != null) buffer += mustache.escape(value);\n        break;\n      case 'text':\n        buffer += token[1];\n        break;\n      }\n    }\n\n    return buffer;\n  };\n\n  mustache.name = \"mustache.js\";\n  mustache.version = \"0.8.1\";\n  mustache.tags = [ \"{{\", \"}}\" ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function (template, view, partials) {\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.\n  mustache.to_html = function (template, view, partials, send) {\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/mustache/mustache.js\n// module id = 11\n// module chunks = 0 1","'use strict';\n\n(function() {\n    \"use strict\";\n\n    var cockpit = require(\"cockpit\");\n\n    /* SERVICE MANAGEMENT API\n     *\n     * The \"service\" module lets you monitor and manage a\n     * system service on localhost in a simple way.\n     *\n     * It mainly exists because talking to the systemd D-Bus API is\n     * not trivial enough to do it directly.\n     *\n     * - proxy = service.proxy(name)\n     *\n     * Create a proxy that represents the service named NAME.\n     *\n     * The proxy has properties and methods (described below) that\n     * allow you to monitor the state of the service, and perform\n     * simple actions on it.\n     *\n     * Initially, any of the properties can be \"null\" until their\n     * actual values have been retrieved in the background.\n     *\n     * - $(proxy).on('changed', function (event) { ... })\n     *\n     * The 'changed' event is emitted whenever one of the properties\n     * of the proxy changes.\n     *\n     * - proxy.exists\n     *\n     * A boolean that tells whether the service is known or not.  A\n     * proxy with 'exists == false' will have 'state == undefined' and\n     * 'enabled == undefined'.\n     *\n     * - proxy.state\n     *\n     * Either 'undefined' when the state can't be retrieved, or a\n     * string that has one of the values \"starting\", \"running\",\n     * \"stopping\", \"stopped\", or \"failed\".\n     *\n     * - proxy.enabled\n     *\n     * Either 'undefined' when the value can't be retrieved, or a\n     * boolean that tells whether the service is started 'enabled'.\n     * What it means exactly for a service to be enabled depends on\n     * the service, but a enabled service is usually started on boot,\n     * no matter wether other services need it or not.  A disabled\n     * service is usually only started when it is needed by some other\n     * service.\n     *\n     * - proxy.unit\n     * - proxy.service\n     *\n     * The raw org.freedesktop.systemd1.Unit and Service D-Bus\n     * interface proxies for the service.\n     *\n     * - promise = proxy.start()\n     *\n     * Start the service.  The return value is a standard jQuery\n     * promise as returned from DBusClient.call.\n     *\n     * - promise =  proxy.restart()\n     *\n     * Restart the service.\n     *\n     * - promise = proxy.tryRestart()\n     * \n     * Try to restart the service if it's running or starting\n     *\n     * - promise = proxy.stop()\n     *\n     * Stop the service.\n     *\n     * - promise = proxy.enable()\n     *\n     * Enable the service.\n     *\n     * - promise = proxy.disable()\n     *\n     * Disable the service.\n     */\n\n    var systemd_client;\n    var systemd_manager;\n\n    function wait_valid(proxy, callback) {\n        proxy.wait(function() {\n            if (proxy.valid)\n                callback();\n        });\n    }\n\n    function with_systemd_manager(done) {\n        if (!systemd_manager) {\n            systemd_client = cockpit.dbus(\"org.freedesktop.systemd1\", { superuser: \"try\" });\n            systemd_manager = systemd_client.proxy(\"org.freedesktop.systemd1.Manager\",\n                                                   \"/org/freedesktop/systemd1\");\n            wait_valid(systemd_manager, function() {\n                systemd_manager.Subscribe().\n                    fail(function (error) {\n                        if (error.name != \"org.freedesktop.systemd1.AlreadySubscribed\" &&\n                            error.name != \"org.freedesktop.DBus.Error.FileExists\")\n                            console.warn(\"Subscribing to systemd signals failed\", error);\n                    });\n            });\n        }\n        wait_valid(systemd_manager, done);\n    }\n\n    function proxy(name) {\n        var self = {\n            exists: null,\n            state: null,\n            enabled: null,\n\n            wait: wait,\n\n            start: start,\n            stop: stop,\n            restart: restart,\n            tryRestart: tryRestart,\n\n            enable: enable,\n            disable: disable\n        };\n\n        cockpit.event_target(self);\n\n        var unit, service;\n        var wait_callbacks = cockpit.defer();\n\n        if (name.indexOf(\".\") == -1)\n            name = name + \".service\";\n\n        function update_from_unit() {\n            self.exists = (unit.LoadState != \"not-found\" || unit.ActiveState != \"inactive\");\n\n            if (unit.ActiveState == \"activating\")\n                self.state = \"starting\";\n            else if (unit.ActiveState == \"deactivating\")\n                self.state = \"stopping\";\n            else if (unit.ActiveState == \"active\" || unit.ActiveState == \"reloading\")\n                self.state = \"running\";\n            else if (unit.ActiveState == \"failed\")\n                self.state = \"failed\";\n            else if (unit.ActiveState == \"inactive\" && self.exists)\n                self.state = \"stopped\";\n            else\n                self.state = undefined;\n\n            if (unit.UnitFileState == \"enabled\" || unit.UnitFileState == \"linked\")\n                self.enabled = true;\n            else if (unit.UnitFileState == \"disabled\" || unit.UnitFileState == \"masked\")\n                self.enabled = false;\n            else\n                self.enabled = undefined;\n\n            self.unit = unit;\n\n            self.dispatchEvent(\"changed\");\n            wait_callbacks.resolve();\n        }\n\n        function update_from_service() {\n            self.service = service;\n            self.dispatchEvent(\"changed\");\n        }\n\n        with_systemd_manager(function () {\n            systemd_manager.LoadUnit(name).\n                done(function (path) {\n                    unit = systemd_client.proxy('org.freedesktop.systemd1.Unit', path);\n                    unit.addEventListener('changed', update_from_unit);\n                    wait_valid(unit, update_from_unit);\n\n                    service = systemd_client.proxy('org.freedesktop.systemd1.Service', path);\n                    service.addEventListener('changed', update_from_service);\n                    wait_valid(service, update_from_service);\n                }).\n                fail(function (error) {\n                    self.exists = false;\n                    self.dispatchEvent('changed');\n                });\n        });\n\n        function refresh() {\n            if (!unit || !service)\n                return;\n\n            function refresh_interface(path, iface) {\n                systemd_client.call(path,\n                                    \"org.freedesktop.DBus.Properties\", \"GetAll\", [ iface ]).\n                    fail(function (error) {\n                        console.log(error);\n                    }).\n                    done(function (result) {\n                        var props = { };\n                        for (var p in result[0])\n                            props[p] = result[0][p].v;\n                        var ifaces = { };\n                        ifaces[iface] = props;\n                        var data = { };\n                        data[unit.path] = ifaces;\n                        systemd_client.notify(data);\n                    });\n            }\n\n            refresh_interface(unit.path, \"org.freedesktop.systemd1.Unit\");\n            refresh_interface(service.path, \"org.freedesktop.systemd1.Service\");\n        }\n\n        function on_job_new_removed_refresh(event, number, path, unit_id, result) {\n            if (unit_id == name)\n                refresh();\n        }\n\n        /* HACK - https://bugs.freedesktop.org/show_bug.cgi?id=69575\n         *\n         * We need to explicitly get new property values when getting\n         * a UnitNew signal since UnitNew doesn't carry them.\n         * However, reacting to UnitNew with GetAll could lead to an\n         * infinite loop since systemd emits a UnitNew in reaction to\n         * GetAll for units that it doesn't want to keep loaded, such\n         * as units without unit files.\n         *\n         * So we ignore UnitNew and instead assume that the unit state\n         * only changes in interesting ways when there is a job for it\n         * or when the daemon is reloaded (or when we get a property\n         * change notification, of course).\n         */\n\n        if (false) {\n            // This is what we want to do.\n\n            systemd_manager.addEventListener(\"UnitNew\", function (event, unit_id, path) {\n                if (unit_id == name)\n                    refresh();\n            });\n        } else {\n            // This is what we have to do.\n\n            systemd_manager.addEventListener(\"Reloading\", function (event, reloading) {\n                if (!reloading)\n                    refresh();\n            });\n\n            systemd_manager.addEventListener(\"JobNew\", on_job_new_removed_refresh);\n            systemd_manager.addEventListener(\"JobRemoved\", on_job_new_removed_refresh);\n        }\n\n        function wait(callback) {\n            wait_callbacks.promise.then(callback);\n        }\n\n        /* Actions\n         *\n         * We don't call methods on the D-Bus proxies here since they\n         * might not be ready when these functions are called.\n         */\n\n        var pending_jobs = { };\n\n        systemd_manager.addEventListener(\"JobRemoved\", function (event, number, path, unit_id, result) {\n            if (pending_jobs[path]) {\n                if (result == \"done\")\n                    pending_jobs[path].resolve();\n                else\n                    pending_jobs[path].reject(result);\n                delete pending_jobs[path];\n            }\n        });\n\n        function call_manager(method, args) {\n            return systemd_client.call(\"/org/freedesktop/systemd1\",\n                                       \"org.freedesktop.systemd1.Manager\",\n                                       method, args);\n        }\n\n        function call_manager_with_job(method, args) {\n            var dfd = cockpit.defer();\n            call_manager(method, args).\n                done(function (results) {\n                    var path = results[0];\n                    pending_jobs[path] = dfd;\n                }).\n                fail(function (error) {\n                    dfd.reject(error);\n                });\n            return dfd.promise();\n        }\n\n        function call_manager_with_reload(method, args) {\n            return call_manager(method, args).then(function () {\n                return call_manager(\"Reload\", [ ]);\n            });\n        }\n\n        function start() {\n            return call_manager_with_job(\"StartUnit\", [ name, \"replace\" ]);\n        }\n\n        function stop() {\n            return call_manager_with_job(\"StopUnit\", [ name, \"replace\" ]);\n        }\n\n        function restart() {\n            return call_manager_with_job(\"RestartUnit\", [ name, \"replace\" ]);\n        }\n\n        function tryRestart() {\n            return call_manager_with_job(\"TryRestartUnit\", [ name, \"replace\" ]);\n        }\n\n        function enable() {\n            return call_manager_with_reload(\"EnableUnitFiles\", [ [ name ], false, false ]);\n        }\n\n        function disable() {\n            return call_manager_with_reload(\"DisableUnitFiles\", [ [ name ], false ]);\n        }\n\n        return self;\n    }\n\n    module.exports = {\n        proxy: proxy\n    };\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/service.js\n// module id = 12\n// module chunks = 0 1","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2014 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    /* QUnit needs to have 'window' as 'this' in order to load */\n    window.QUnit = require(\"qunitjs/qunit/qunit.js\");\n    window.qunitTap = require(\"qunit-tap/lib/qunit-tap.js\");\n\n    require(\"./qunit-config.js\");\n\n    require(\"qunitjs/qunit/qunit.css\");\n\n    module.exports = window.QUnit;\n\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/qunit-tests.js\n// module id = 49\n// module chunks = 1","/*!\n * QUnit 1.23.1\n * https://qunitjs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-04-12T17:29Z\n */\n\n( function( global ) {\n\nvar QUnit = {};\n\nvar Date = global.Date;\nvar now = Date.now || function() {\n\treturn new Date().getTime();\n};\n\nvar setTimeout = global.setTimeout;\nvar clearTimeout = global.clearTimeout;\n\n// Store a local window from the global to allow direct references.\nvar window = global.window;\n\nvar defined = {\n\tdocument: window && window.document !== undefined,\n\tsetTimeout: setTimeout !== undefined,\n\tsessionStorage: ( function() {\n\t\tvar x = \"qunit-test-string\";\n\t\ttry {\n\t\t\tsessionStorage.setItem( x, x );\n\t\t\tsessionStorage.removeItem( x );\n\t\t\treturn true;\n\t\t} catch ( e ) {\n\t\t\treturn false;\n\t\t}\n\t}() )\n};\n\nvar fileName = ( sourceFromStacktrace( 0 ) || \"\" ).replace( /(:\\d+)+\\)?/, \"\" ).replace( /.+\\//, \"\" );\nvar globalStartCalled = false;\nvar runStarted = false;\n\nvar toString = Object.prototype.toString,\n\thasOwn = Object.prototype.hasOwnProperty;\n\n// Returns a new Array with the elements that are in a but not in b\nfunction diff( a, b ) {\n\tvar i, j,\n\t\tresult = a.slice();\n\n\tfor ( i = 0; i < result.length; i++ ) {\n\t\tfor ( j = 0; j < b.length; j++ ) {\n\t\t\tif ( result[ i ] === b[ j ] ) {\n\t\t\t\tresult.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n// From jquery.js\nfunction inArray( elem, array ) {\n\tif ( array.indexOf ) {\n\t\treturn array.indexOf( elem );\n\t}\n\n\tfor ( var i = 0, length = array.length; i < length; i++ ) {\n\t\tif ( array[ i ] === elem ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * Makes a clone of an object using only Array or Object as base,\n * and copies over the own enumerable properties.\n *\n * @param {Object} obj\n * @return {Object} New object with only the own properties (recursively).\n */\nfunction objectValues ( obj ) {\n\tvar key, val,\n\t\tvals = QUnit.is( \"array\", obj ) ? [] : {};\n\tfor ( key in obj ) {\n\t\tif ( hasOwn.call( obj, key ) ) {\n\t\t\tval = obj[ key ];\n\t\t\tvals[ key ] = val === Object( val ) ? objectValues( val ) : val;\n\t\t}\n\t}\n\treturn vals;\n}\n\nfunction extend( a, b, undefOnly ) {\n\tfor ( var prop in b ) {\n\t\tif ( hasOwn.call( b, prop ) ) {\n\n\t\t\t// Avoid \"Member not found\" error in IE8 caused by messing with window.constructor\n\t\t\t// This block runs on every environment, so `global` is being used instead of `window`\n\t\t\t// to avoid errors on node.\n\t\t\tif ( prop !== \"constructor\" || a !== global ) {\n\t\t\t\tif ( b[ prop ] === undefined ) {\n\t\t\t\t\tdelete a[ prop ];\n\t\t\t\t} else if ( !( undefOnly && typeof a[ prop ] !== \"undefined\" ) ) {\n\t\t\t\t\ta[ prop ] = b[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a;\n}\n\nfunction objectType( obj ) {\n\tif ( typeof obj === \"undefined\" ) {\n\t\treturn \"undefined\";\n\t}\n\n\t// Consider: typeof null === object\n\tif ( obj === null ) {\n\t\treturn \"null\";\n\t}\n\n\tvar match = toString.call( obj ).match( /^\\[object\\s(.*)\\]$/ ),\n\t\ttype = match && match[ 1 ];\n\n\tswitch ( type ) {\n\t\tcase \"Number\":\n\t\t\tif ( isNaN( obj ) ) {\n\t\t\t\treturn \"nan\";\n\t\t\t}\n\t\t\treturn \"number\";\n\t\tcase \"String\":\n\t\tcase \"Boolean\":\n\t\tcase \"Array\":\n\t\tcase \"Set\":\n\t\tcase \"Map\":\n\t\tcase \"Date\":\n\t\tcase \"RegExp\":\n\t\tcase \"Function\":\n\t\tcase \"Symbol\":\n\t\t\treturn type.toLowerCase();\n\t}\n\tif ( typeof obj === \"object\" ) {\n\t\treturn \"object\";\n\t}\n}\n\n// Safe object type checking\nfunction is( type, obj ) {\n\treturn QUnit.objectType( obj ) === type;\n}\n\n// Doesn't support IE6 to IE9, it will return undefined on these browsers\n// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\nfunction extractStacktrace( e, offset ) {\n\toffset = offset === undefined ? 4 : offset;\n\n\tvar stack, include, i;\n\n\tif ( e.stack ) {\n\t\tstack = e.stack.split( \"\\n\" );\n\t\tif ( /^error$/i.test( stack[ 0 ] ) ) {\n\t\t\tstack.shift();\n\t\t}\n\t\tif ( fileName ) {\n\t\t\tinclude = [];\n\t\t\tfor ( i = offset; i < stack.length; i++ ) {\n\t\t\t\tif ( stack[ i ].indexOf( fileName ) !== -1 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tinclude.push( stack[ i ] );\n\t\t\t}\n\t\t\tif ( include.length ) {\n\t\t\t\treturn include.join( \"\\n\" );\n\t\t\t}\n\t\t}\n\t\treturn stack[ offset ];\n\n\t// Support: Safari <=6 only\n\t} else if ( e.sourceURL ) {\n\n\t\t// Exclude useless self-reference for generated Error objects\n\t\tif ( /qunit.js$/.test( e.sourceURL ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// For actual exceptions, this is useful\n\t\treturn e.sourceURL + \":\" + e.line;\n\t}\n}\n\nfunction sourceFromStacktrace( offset ) {\n\tvar error = new Error();\n\n\t// Support: Safari <=7 only, IE <=10 - 11 only\n\t// Not all browsers generate the `stack` property for `new Error()`, see also #636\n\tif ( !error.stack ) {\n\t\ttry {\n\t\t\tthrow error;\n\t\t} catch ( err ) {\n\t\t\terror = err;\n\t\t}\n\t}\n\n\treturn extractStacktrace( error, offset );\n}\n\n/**\n * Config object: Maintain internal state\n * Later exposed as QUnit.config\n * `config` initialized at top of scope\n */\nvar config = {\n\n\t// The queue of tests to run\n\tqueue: [],\n\n\t// Block until document ready\n\tblocking: true,\n\n\t// By default, run previously failed tests first\n\t// very useful in combination with \"Hide passed tests\" checked\n\treorder: true,\n\n\t// By default, modify document.title when suite is done\n\taltertitle: true,\n\n\t// HTML Reporter: collapse every test except the first failing test\n\t// If false, all failing tests will be expanded\n\tcollapse: true,\n\n\t// By default, scroll to top of the page when suite is done\n\tscrolltop: true,\n\n\t// Depth up-to which object will be dumped\n\tmaxDepth: 5,\n\n\t// When enabled, all tests must call expect()\n\trequireExpects: false,\n\n\t// Placeholder for user-configurable form-exposed URL parameters\n\turlConfig: [],\n\n\t// Set of all modules.\n\tmodules: [],\n\n\t// Stack of nested modules\n\tmoduleStack: [],\n\n\t// The first unnamed module\n\tcurrentModule: {\n\t\tname: \"\",\n\t\ttests: []\n\t},\n\n\tcallbacks: {}\n};\n\n// Push a loose unnamed module to the modules collection\nconfig.modules.push( config.currentModule );\n\nvar loggingCallbacks = {};\n\n// Register logging callbacks\nfunction registerLoggingCallbacks( obj ) {\n\tvar i, l, key,\n\t\tcallbackNames = [ \"begin\", \"done\", \"log\", \"testStart\", \"testDone\",\n\t\t\t\"moduleStart\", \"moduleDone\" ];\n\n\tfunction registerLoggingCallback( key ) {\n\t\tvar loggingCallback = function( callback ) {\n\t\t\tif ( objectType( callback ) !== \"function\" ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"QUnit logging methods require a callback function as their first parameters.\"\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconfig.callbacks[ key ].push( callback );\n\t\t};\n\n\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t// Stores the registered functions allowing restoring\n\t\t// at verifyLoggingCallbacks() if modified\n\t\tloggingCallbacks[ key ] = loggingCallback;\n\n\t\treturn loggingCallback;\n\t}\n\n\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\n\t\tkey = callbackNames[ i ];\n\n\t\t// Initialize key collection of logging callback\n\t\tif ( objectType( config.callbacks[ key ] ) === \"undefined\" ) {\n\t\t\tconfig.callbacks[ key ] = [];\n\t\t}\n\n\t\tobj[ key ] = registerLoggingCallback( key );\n\t}\n}\n\nfunction runLoggingCallbacks( key, args ) {\n\tvar i, l, callbacks;\n\n\tcallbacks = config.callbacks[ key ];\n\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\n\t\tcallbacks[ i ]( args );\n\t}\n}\n\n// DEPRECATED: This will be removed on 2.0.0+\n// This function verifies if the loggingCallbacks were modified by the user\n// If so, it will restore it, assign the given callback and print a console warning\nfunction verifyLoggingCallbacks() {\n\tvar loggingCallback, userCallback;\n\n\tfor ( loggingCallback in loggingCallbacks ) {\n\t\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\n\n\t\t\tuserCallback = QUnit[ loggingCallback ];\n\n\t\t\t// Restore the callback function\n\t\t\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\n\n\t\t\t// Assign the deprecated given callback\n\t\t\tQUnit[ loggingCallback ]( userCallback );\n\n\t\t\tif ( global.console && global.console.warn ) {\n\t\t\t\tglobal.console.warn(\n\t\t\t\t\t\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" +\n\t\t\t\t\t\"Please, check out the documentation on how to apply logging callbacks.\\n\" +\n\t\t\t\t\t\"Reference: https://api.qunitjs.com/category/callbacks/\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n( function() {\n\tif ( !defined.document ) {\n\t\treturn;\n\t}\n\n\t// `onErrorFnPrev` initialized at top of scope\n\t// Preserve other handlers\n\tvar onErrorFnPrev = window.onerror;\n\n\t// Cover uncaught exceptions\n\t// Returning true will suppress the default browser handler,\n\t// returning false will let it run.\n\twindow.onerror = function( error, filePath, linerNr ) {\n\t\tvar ret = false;\n\t\tif ( onErrorFnPrev ) {\n\t\t\tret = onErrorFnPrev( error, filePath, linerNr );\n\t\t}\n\n\t\t// Treat return value as window.onerror itself does,\n\t\t// Only do our handling if not suppressed.\n\t\tif ( ret !== true ) {\n\t\t\tif ( QUnit.config.current ) {\n\t\t\t\tif ( QUnit.config.current.ignoreGlobalErrors ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t} else {\n\t\t\t\tQUnit.test( \"global failure\", extend( function() {\n\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t}, { validTest: true } ) );\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ret;\n\t};\n}() );\n\n// Figure out if we're running the tests from a server or not\nQUnit.isLocal = !( defined.document && window.location.protocol !== \"file:\" );\n\n// Expose the current QUnit version\nQUnit.version = \"1.23.1\";\n\nextend( QUnit, {\n\n\t// Call on start of module test to prepend name to all tests\n\tmodule: function( name, testEnvironment, executeNow ) {\n\t\tvar module, moduleFns;\n\t\tvar currentModule = config.currentModule;\n\n\t\tif ( arguments.length === 2 ) {\n\t\t\tif ( objectType( testEnvironment ) === \"function\" ) {\n\t\t\t\texecuteNow = testEnvironment;\n\t\t\t\ttestEnvironment = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// DEPRECATED: handles setup/teardown functions,\n\t\t// beforeEach and afterEach should be used instead\n\t\tif ( testEnvironment && testEnvironment.setup ) {\n\t\t\ttestEnvironment.beforeEach = testEnvironment.setup;\n\t\t\tdelete testEnvironment.setup;\n\t\t}\n\t\tif ( testEnvironment && testEnvironment.teardown ) {\n\t\t\ttestEnvironment.afterEach = testEnvironment.teardown;\n\t\t\tdelete testEnvironment.teardown;\n\t\t}\n\n\t\tmodule = createModule();\n\n\t\tmoduleFns = {\n\t\t\tbeforeEach: setHook( module, \"beforeEach\" ),\n\t\t\tafterEach: setHook( module, \"afterEach\" )\n\t\t};\n\n\t\tif ( objectType( executeNow ) === \"function\" ) {\n\t\t\tconfig.moduleStack.push( module );\n\t\t\tsetCurrentModule( module );\n\t\t\texecuteNow.call( module.testEnvironment, moduleFns );\n\t\t\tconfig.moduleStack.pop();\n\t\t\tmodule = module.parentModule || currentModule;\n\t\t}\n\n\t\tsetCurrentModule( module );\n\n\t\tfunction createModule() {\n\t\t\tvar parentModule = config.moduleStack.length ?\n\t\t\t\tconfig.moduleStack.slice( -1 )[ 0 ] : null;\n\t\t\tvar moduleName = parentModule !== null ?\n\t\t\t\t[ parentModule.name, name ].join( \" > \" ) : name;\n\t\t\tvar module = {\n\t\t\t\tname: moduleName,\n\t\t\t\tparentModule: parentModule,\n\t\t\t\ttests: [],\n\t\t\t\tmoduleId: generateHash( moduleName )\n\t\t\t};\n\n\t\t\tvar env = {};\n\t\t\tif ( parentModule ) {\n\t\t\t\textend( env, parentModule.testEnvironment );\n\t\t\t\tdelete env.beforeEach;\n\t\t\t\tdelete env.afterEach;\n\t\t\t}\n\t\t\textend( env, testEnvironment );\n\t\t\tmodule.testEnvironment = env;\n\n\t\t\tconfig.modules.push( module );\n\t\t\treturn module;\n\t\t}\n\n\t\tfunction setCurrentModule( module ) {\n\t\t\tconfig.currentModule = module;\n\t\t}\n\n\t},\n\n\t// DEPRECATED: QUnit.asyncTest() will be removed in QUnit 2.0.\n\tasyncTest: asyncTest,\n\n\ttest: test,\n\n\tskip: skip,\n\n\tonly: only,\n\n\t// DEPRECATED: The functionality of QUnit.start() will be altered in QUnit 2.0.\n\t// In QUnit 2.0, invoking it will ONLY affect the `QUnit.config.autostart` blocking behavior.\n\tstart: function( count ) {\n\t\tvar globalStartAlreadyCalled = globalStartCalled;\n\n\t\tif ( !config.current ) {\n\t\t\tglobalStartCalled = true;\n\n\t\t\tif ( runStarted ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context while already started\" );\n\t\t\t} else if ( globalStartAlreadyCalled || count > 1 ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context too many times\" );\n\t\t\t} else if ( config.autostart ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context when \" +\n\t\t\t\t\t\"QUnit.config.autostart was true\" );\n\t\t\t} else if ( !config.pageLoaded ) {\n\n\t\t\t\t// The page isn't completely loaded yet, so bail out and let `QUnit.load` handle it\n\t\t\t\tconfig.autostart = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\n\t\t\t// If a test is running, adjust its semaphore\n\t\t\tconfig.current.semaphore -= count || 1;\n\n\t\t\t// If semaphore is non-numeric, throw error\n\t\t\tif ( isNaN( config.current.semaphore ) ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\n\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\"Called start() with a non-numeric decrement.\",\n\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't start until equal number of stop-calls\n\t\t\tif ( config.current.semaphore > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Throw an Error if start is called more often than stop\n\t\t\tif ( config.current.semaphore < 0 ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\n\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\"Called start() while already started (test's semaphore was 0 already)\",\n\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tresumeProcessing();\n\t},\n\n\t// DEPRECATED: QUnit.stop() will be removed in QUnit 2.0.\n\tstop: function( count ) {\n\n\t\t// If there isn't a test running, don't allow QUnit.stop() to be called\n\t\tif ( !config.current ) {\n\t\t\tthrow new Error( \"Called stop() outside of a test context\" );\n\t\t}\n\n\t\t// If a test is running, adjust its semaphore\n\t\tconfig.current.semaphore += count || 1;\n\n\t\tpauseProcessing();\n\t},\n\n\tconfig: config,\n\n\tis: is,\n\n\tobjectType: objectType,\n\n\textend: extend,\n\n\tload: function() {\n\t\tconfig.pageLoaded = true;\n\n\t\t// Initialize the configuration options\n\t\textend( config, {\n\t\t\tstats: { all: 0, bad: 0 },\n\t\t\tmoduleStats: { all: 0, bad: 0 },\n\t\t\tstarted: 0,\n\t\t\tupdateRate: 1000,\n\t\t\tautostart: true,\n\t\t\tfilter: \"\"\n\t\t}, true );\n\n\t\tconfig.blocking = false;\n\n\t\tif ( config.autostart ) {\n\t\t\tresumeProcessing();\n\t\t}\n\t},\n\n\tstack: function( offset ) {\n\t\toffset = ( offset || 0 ) + 2;\n\t\treturn sourceFromStacktrace( offset );\n\t}\n} );\n\nregisterLoggingCallbacks( QUnit );\n\nfunction begin() {\n\tvar i, l,\n\t\tmodulesLog = [];\n\n\t// If the test run hasn't officially begun yet\n\tif ( !config.started ) {\n\n\t\t// Record the time of the test run's beginning\n\t\tconfig.started = now();\n\n\t\tverifyLoggingCallbacks();\n\n\t\t// Delete the loose unnamed module if unused.\n\t\tif ( config.modules[ 0 ].name === \"\" && config.modules[ 0 ].tests.length === 0 ) {\n\t\t\tconfig.modules.shift();\n\t\t}\n\n\t\t// Avoid unnecessary information by not logging modules' test environments\n\t\tfor ( i = 0, l = config.modules.length; i < l; i++ ) {\n\t\t\tmodulesLog.push( {\n\t\t\t\tname: config.modules[ i ].name,\n\t\t\t\ttests: config.modules[ i ].tests\n\t\t\t} );\n\t\t}\n\n\t\t// The test run is officially beginning now\n\t\trunLoggingCallbacks( \"begin\", {\n\t\t\ttotalTests: Test.count,\n\t\t\tmodules: modulesLog\n\t\t} );\n\t}\n\n\tconfig.blocking = false;\n\tprocess( true );\n}\n\nfunction process( last ) {\n\tfunction next() {\n\t\tprocess( last );\n\t}\n\tvar start = now();\n\tconfig.depth = ( config.depth || 0 ) + 1;\n\n\twhile ( config.queue.length && !config.blocking ) {\n\t\tif ( !defined.setTimeout || config.updateRate <= 0 ||\n\t\t\t\t( ( now() - start ) < config.updateRate ) ) {\n\t\t\tif ( config.current ) {\n\n\t\t\t\t// Reset async tracking for each phase of the Test lifecycle\n\t\t\t\tconfig.current.usedAsync = false;\n\t\t\t}\n\t\t\tconfig.queue.shift()();\n\t\t} else {\n\t\t\tsetTimeout( next, 13 );\n\t\t\tbreak;\n\t\t}\n\t}\n\tconfig.depth--;\n\tif ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\n\t\tdone();\n\t}\n}\n\nfunction pauseProcessing() {\n\tconfig.blocking = true;\n\n\tif ( config.testTimeout && defined.setTimeout ) {\n\t\tclearTimeout( config.timeout );\n\t\tconfig.timeout = setTimeout( function() {\n\t\t\tif ( config.current ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\t\t\t\tQUnit.pushFailure( \"Test timed out\", sourceFromStacktrace( 2 ) );\n\t\t\t} else {\n\t\t\t\tthrow new Error( \"Test timed out\" );\n\t\t\t}\n\t\t\tresumeProcessing();\n\t\t}, config.testTimeout );\n\t}\n}\n\nfunction resumeProcessing() {\n\trunStarted = true;\n\n\t// A slight delay to allow this iteration of the event loop to finish (more assertions, etc.)\n\tif ( defined.setTimeout ) {\n\t\tsetTimeout( function() {\n\t\t\tif ( config.current && config.current.semaphore > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( config.timeout ) {\n\t\t\t\tclearTimeout( config.timeout );\n\t\t\t}\n\n\t\t\tbegin();\n\t\t}, 13 );\n\t} else {\n\t\tbegin();\n\t}\n}\n\nfunction done() {\n\tvar runtime, passed;\n\n\tconfig.autorun = true;\n\n\t// Log the last module results\n\tif ( config.previousModule ) {\n\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\tname: config.previousModule.name,\n\t\t\ttests: config.previousModule.tests,\n\t\t\tfailed: config.moduleStats.bad,\n\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\ttotal: config.moduleStats.all,\n\t\t\truntime: now() - config.moduleStats.started\n\t\t} );\n\t}\n\tdelete config.previousModule;\n\n\truntime = now() - config.started;\n\tpassed = config.stats.all - config.stats.bad;\n\n\trunLoggingCallbacks( \"done\", {\n\t\tfailed: config.stats.bad,\n\t\tpassed: passed,\n\t\ttotal: config.stats.all,\n\t\truntime: runtime\n\t} );\n}\n\nfunction setHook( module, hookName ) {\n\tif ( module.testEnvironment === undefined ) {\n\t\tmodule.testEnvironment = {};\n\t}\n\n\treturn function( callback ) {\n\t\tmodule.testEnvironment[ hookName ] = callback;\n\t};\n}\n\nvar focused = false;\nvar priorityCount = 0;\nvar unitSampler;\n\nfunction Test( settings ) {\n\tvar i, l;\n\n\t++Test.count;\n\n\textend( this, settings );\n\tthis.assertions = [];\n\tthis.semaphore = 0;\n\tthis.usedAsync = false;\n\tthis.module = config.currentModule;\n\tthis.stack = sourceFromStacktrace( 3 );\n\n\t// Register unique strings\n\tfor ( i = 0, l = this.module.tests; i < l.length; i++ ) {\n\t\tif ( this.module.tests[ i ].name === this.testName ) {\n\t\t\tthis.testName += \" \";\n\t\t}\n\t}\n\n\tthis.testId = generateHash( this.module.name, this.testName );\n\n\tthis.module.tests.push( {\n\t\tname: this.testName,\n\t\ttestId: this.testId\n\t} );\n\n\tif ( settings.skip ) {\n\n\t\t// Skipped tests will fully ignore any sent callback\n\t\tthis.callback = function() {};\n\t\tthis.async = false;\n\t\tthis.expected = 0;\n\t} else {\n\t\tthis.assert = new Assert( this );\n\t}\n}\n\nTest.count = 0;\n\nTest.prototype = {\n\tbefore: function() {\n\t\tif (\n\n\t\t\t// Emit moduleStart when we're switching from one module to another\n\t\t\tthis.module !== config.previousModule ||\n\n\t\t\t\t// They could be equal (both undefined) but if the previousModule property doesn't\n\t\t\t\t// yet exist it means this is the first test in a suite that isn't wrapped in a\n\t\t\t\t// module, in which case we'll just emit a moduleStart event for 'undefined'.\n\t\t\t\t// Without this, reporters can get testStart before moduleStart  which is a problem.\n\t\t\t\t!hasOwn.call( config, \"previousModule\" )\n\t\t) {\n\t\t\tif ( hasOwn.call( config, \"previousModule\" ) ) {\n\t\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\t\tname: config.previousModule.name,\n\t\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t\t} );\n\t\t\t}\n\t\t\tconfig.previousModule = this.module;\n\t\t\tconfig.moduleStats = { all: 0, bad: 0, started: now() };\n\t\t\trunLoggingCallbacks( \"moduleStart\", {\n\t\t\t\tname: this.module.name,\n\t\t\t\ttests: this.module.tests\n\t\t\t} );\n\t\t}\n\n\t\tconfig.current = this;\n\n\t\tif ( this.module.testEnvironment ) {\n\t\t\tdelete this.module.testEnvironment.beforeEach;\n\t\t\tdelete this.module.testEnvironment.afterEach;\n\t\t}\n\t\tthis.testEnvironment = extend( {}, this.module.testEnvironment );\n\n\t\tthis.started = now();\n\t\trunLoggingCallbacks( \"testStart\", {\n\t\t\tname: this.testName,\n\t\t\tmodule: this.module.name,\n\t\t\ttestId: this.testId\n\t\t} );\n\n\t\tif ( !config.pollution ) {\n\t\t\tsaveGlobal();\n\t\t}\n\t},\n\n\trun: function() {\n\t\tvar promise;\n\n\t\tconfig.current = this;\n\n\t\tif ( this.async ) {\n\t\t\tQUnit.stop();\n\t\t}\n\n\t\tthis.callbackStarted = now();\n\n\t\tif ( config.notrycatch ) {\n\t\t\trunTest( this );\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\trunTest( this );\n\t\t} catch ( e ) {\n\t\t\tthis.pushFailure( \"Died on test #\" + ( this.assertions.length + 1 ) + \" \" +\n\t\t\t\tthis.stack + \": \" + ( e.message || e ), extractStacktrace( e, 0 ) );\n\n\t\t\t// Else next test will carry the responsibility\n\t\t\tsaveGlobal();\n\n\t\t\t// Restart the tests if they're blocking\n\t\t\tif ( config.blocking ) {\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t}\n\n\t\tfunction runTest( test ) {\n\t\t\tpromise = test.callback.call( test.testEnvironment, test.assert );\n\t\t\ttest.resolvePromise( promise );\n\t\t}\n\t},\n\n\tafter: function() {\n\t\tcheckPollution();\n\t},\n\n\tqueueHook: function( hook, hookName ) {\n\t\tvar promise,\n\t\t\ttest = this;\n\t\treturn function runHook() {\n\t\t\tconfig.current = test;\n\t\t\tif ( config.notrycatch ) {\n\t\t\t\tcallHook();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tcallHook();\n\t\t\t} catch ( error ) {\n\t\t\t\ttest.pushFailure( hookName + \" failed on \" + test.testName + \": \" +\n\t\t\t\t( error.message || error ), extractStacktrace( error, 0 ) );\n\t\t\t}\n\n\t\t\tfunction callHook() {\n\t\t\t\tpromise = hook.call( test.testEnvironment, test.assert );\n\t\t\t\ttest.resolvePromise( promise, hookName );\n\t\t\t}\n\t\t};\n\t},\n\n\t// Currently only used for module level hooks, can be used to add global level ones\n\thooks: function( handler ) {\n\t\tvar hooks = [];\n\n\t\tfunction processHooks( test, module ) {\n\t\t\tif ( module.parentModule ) {\n\t\t\t\tprocessHooks( test, module.parentModule );\n\t\t\t}\n\t\t\tif ( module.testEnvironment &&\n\t\t\t\tQUnit.objectType( module.testEnvironment[ handler ] ) === \"function\" ) {\n\t\t\t\thooks.push( test.queueHook( module.testEnvironment[ handler ], handler ) );\n\t\t\t}\n\t\t}\n\n\t\t// Hooks are ignored on skipped tests\n\t\tif ( !this.skip ) {\n\t\t\tprocessHooks( this, this.module );\n\t\t}\n\t\treturn hooks;\n\t},\n\n\tfinish: function() {\n\t\tconfig.current = this;\n\t\tif ( config.requireExpects && this.expected === null ) {\n\t\t\tthis.pushFailure( \"Expected number of assertions to be defined, but expect() was \" +\n\t\t\t\t\"not called.\", this.stack );\n\t\t} else if ( this.expected !== null && this.expected !== this.assertions.length ) {\n\t\t\tthis.pushFailure( \"Expected \" + this.expected + \" assertions, but \" +\n\t\t\t\tthis.assertions.length + \" were run\", this.stack );\n\t\t} else if ( this.expected === null && !this.assertions.length ) {\n\t\t\tthis.pushFailure( \"Expected at least one assertion, but none were run - call \" +\n\t\t\t\t\"expect(0) to accept zero assertions.\", this.stack );\n\t\t}\n\n\t\tvar i,\n\t\t\tbad = 0;\n\n\t\tthis.runtime = now() - this.started;\n\t\tconfig.stats.all += this.assertions.length;\n\t\tconfig.moduleStats.all += this.assertions.length;\n\n\t\tfor ( i = 0; i < this.assertions.length; i++ ) {\n\t\t\tif ( !this.assertions[ i ].result ) {\n\t\t\t\tbad++;\n\t\t\t\tconfig.stats.bad++;\n\t\t\t\tconfig.moduleStats.bad++;\n\t\t\t}\n\t\t}\n\n\t\trunLoggingCallbacks( \"testDone\", {\n\t\t\tname: this.testName,\n\t\t\tmodule: this.module.name,\n\t\t\tskipped: !!this.skip,\n\t\t\tfailed: bad,\n\t\t\tpassed: this.assertions.length - bad,\n\t\t\ttotal: this.assertions.length,\n\t\t\truntime: this.runtime,\n\n\t\t\t// HTML Reporter use\n\t\t\tassertions: this.assertions,\n\t\t\ttestId: this.testId,\n\n\t\t\t// Source of Test\n\t\t\tsource: this.stack,\n\n\t\t\t// DEPRECATED: this property will be removed in 2.0.0, use runtime instead\n\t\t\tduration: this.runtime\n\t\t} );\n\n\t\t// QUnit.reset() is deprecated and will be replaced for a new\n\t\t// fixture reset function on QUnit 2.0/2.1.\n\t\t// It's still called here for backwards compatibility handling\n\t\tQUnit.reset();\n\n\t\tconfig.current = undefined;\n\t},\n\n\tqueue: function() {\n\t\tvar priority,\n\t\t\ttest = this;\n\n\t\tif ( !this.valid() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction run() {\n\n\t\t\t// Each of these can by async\n\t\t\tsynchronize( [\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.before();\n\t\t\t\t},\n\n\t\t\t\ttest.hooks( \"beforeEach\" ),\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.run();\n\t\t\t\t},\n\n\t\t\t\ttest.hooks( \"afterEach\" ).reverse(),\n\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.after();\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.finish();\n\t\t\t\t}\n\t\t\t] );\n\t\t}\n\n\t\t// Prioritize previously failed tests, detected from sessionStorage\n\t\tpriority = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + this.module.name + \"-\" + this.testName );\n\n\t\treturn synchronize( run, priority, config.seed );\n\t},\n\n\tpushResult: function( resultInfo ) {\n\n\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\tvar source,\n\t\t\tdetails = {\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tname: this.testName,\n\t\t\t\tresult: resultInfo.result,\n\t\t\t\tmessage: resultInfo.message,\n\t\t\t\tactual: resultInfo.actual,\n\t\t\t\texpected: resultInfo.expected,\n\t\t\t\ttestId: this.testId,\n\t\t\t\tnegative: resultInfo.negative || false,\n\t\t\t\truntime: now() - this.started\n\t\t\t};\n\n\t\tif ( !resultInfo.result ) {\n\t\t\tsource = sourceFromStacktrace();\n\n\t\t\tif ( source ) {\n\t\t\t\tdetails.source = source;\n\t\t\t}\n\t\t}\n\n\t\trunLoggingCallbacks( \"log\", details );\n\n\t\tthis.assertions.push( {\n\t\t\tresult: !!resultInfo.result,\n\t\t\tmessage: resultInfo.message\n\t\t} );\n\t},\n\n\tpushFailure: function( message, source, actual ) {\n\t\tif ( !( this instanceof Test ) ) {\n\t\t\tthrow new Error( \"pushFailure() assertion outside test context, was \" +\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t}\n\n\t\tvar details = {\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tname: this.testName,\n\t\t\t\tresult: false,\n\t\t\t\tmessage: message || \"error\",\n\t\t\t\tactual: actual || null,\n\t\t\t\ttestId: this.testId,\n\t\t\t\truntime: now() - this.started\n\t\t\t};\n\n\t\tif ( source ) {\n\t\t\tdetails.source = source;\n\t\t}\n\n\t\trunLoggingCallbacks( \"log\", details );\n\n\t\tthis.assertions.push( {\n\t\t\tresult: false,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tresolvePromise: function( promise, phase ) {\n\t\tvar then, message,\n\t\t\ttest = this;\n\t\tif ( promise != null ) {\n\t\t\tthen = promise.then;\n\t\t\tif ( QUnit.objectType( then ) === \"function\" ) {\n\t\t\t\tQUnit.stop();\n\t\t\t\tthen.call(\n\t\t\t\t\tpromise,\n\t\t\t\t\tfunction() { QUnit.start(); },\n\t\t\t\t\tfunction( error ) {\n\t\t\t\t\t\tmessage = \"Promise rejected \" +\n\t\t\t\t\t\t\t( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) +\n\t\t\t\t\t\t\t\" \" + test.testName + \": \" + ( error.message || error );\n\t\t\t\t\t\ttest.pushFailure( message, extractStacktrace( error, 0 ) );\n\n\t\t\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\t\t\tsaveGlobal();\n\n\t\t\t\t\t\t// Unblock\n\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\n\tvalid: function() {\n\t\tvar filter = config.filter,\n\t\t\tregexFilter = /^(!?)\\/([\\w\\W]*)\\/(i?$)/.exec( filter ),\n\t\t\tmodule = config.module && config.module.toLowerCase(),\n\t\t\tfullName = ( this.module.name + \": \" + this.testName );\n\n\t\tfunction moduleChainNameMatch( testModule ) {\n\t\t\tvar testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\n\t\t\tif ( testModuleName === module ) {\n\t\t\t\treturn true;\n\t\t\t} else if ( testModule.parentModule ) {\n\t\t\t\treturn moduleChainNameMatch( testModule.parentModule );\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfunction moduleChainIdMatch( testModule ) {\n\t\t\treturn inArray( testModule.moduleId, config.moduleId ) > -1 ||\n\t\t\t\ttestModule.parentModule && moduleChainIdMatch( testModule.parentModule );\n\t\t}\n\n\t\t// Internally-generated tests are always valid\n\t\tif ( this.callback && this.callback.validTest ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( config.moduleId && config.moduleId.length > 0 &&\n\t\t\t!moduleChainIdMatch( this.module ) ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( config.testId && config.testId.length > 0 &&\n\t\t\tinArray( this.testId, config.testId ) < 0 ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( module && !moduleChainNameMatch( this.module ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !filter ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn regexFilter ?\n\t\t\tthis.regexFilter( !!regexFilter[ 1 ], regexFilter[ 2 ], regexFilter[ 3 ], fullName ) :\n\t\t\tthis.stringFilter( filter, fullName );\n\t},\n\n\tregexFilter: function( exclude, pattern, flags, fullName ) {\n\t\tvar regex = new RegExp( pattern, flags );\n\t\tvar match = regex.test( fullName );\n\n\t\treturn match !== exclude;\n\t},\n\n\tstringFilter: function( filter, fullName ) {\n\t\tfilter = filter.toLowerCase();\n\t\tfullName = fullName.toLowerCase();\n\n\t\tvar include = filter.charAt( 0 ) !== \"!\";\n\t\tif ( !include ) {\n\t\t\tfilter = filter.slice( 1 );\n\t\t}\n\n\t\t// If the filter matches, we need to honour include\n\t\tif ( fullName.indexOf( filter ) !== -1 ) {\n\t\t\treturn include;\n\t\t}\n\n\t\t// Otherwise, do the opposite\n\t\treturn !include;\n\t}\n};\n\n// Resets the test setup. Useful for tests that modify the DOM.\n/*\nDEPRECATED: Use multiple tests instead of resetting inside a test.\nUse testStart or testDone for custom cleanup.\nThis method will throw an error in 2.0, and will be removed in 2.1\n*/\nQUnit.reset = function() {\n\n\t// Return on non-browser environments\n\t// This is necessary to not break on node tests\n\tif ( !defined.document ) {\n\t\treturn;\n\t}\n\n\tvar fixture = defined.document && document.getElementById &&\n\t\t\tdocument.getElementById( \"qunit-fixture\" );\n\n\tif ( fixture ) {\n\t\tfixture.innerHTML = config.fixture;\n\t}\n};\n\nQUnit.pushFailure = function() {\n\tif ( !QUnit.config.current ) {\n\t\tthrow new Error( \"pushFailure() assertion outside test context, in \" +\n\t\t\tsourceFromStacktrace( 2 ) );\n\t}\n\n\t// Gets current test obj\n\tvar currentTest = QUnit.config.current;\n\n\treturn currentTest.pushFailure.apply( currentTest, arguments );\n};\n\n// Based on Java's String.hashCode, a simple but not\n// rigorously collision resistant hashing function\nfunction generateHash( module, testName ) {\n\tvar hex,\n\t\ti = 0,\n\t\thash = 0,\n\t\tstr = module + \"\\x1C\" + testName,\n\t\tlen = str.length;\n\n\tfor ( ; i < len; i++ ) {\n\t\thash  = ( ( hash << 5 ) - hash ) + str.charCodeAt( i );\n\t\thash |= 0;\n\t}\n\n\t// Convert the possibly negative integer hash code into an 8 character hex string, which isn't\n\t// strictly necessary but increases user understanding that the id is a SHA-like hash\n\thex = ( 0x100000000 + hash ).toString( 16 );\n\tif ( hex.length < 8 ) {\n\t\thex = \"0000000\" + hex;\n\t}\n\n\treturn hex.slice( -8 );\n}\n\nfunction synchronize( callback, priority, seed ) {\n\tvar last = !priority,\n\t\tindex;\n\n\tif ( QUnit.objectType( callback ) === \"array\" ) {\n\t\twhile ( callback.length ) {\n\t\t\tsynchronize( callback.shift() );\n\t\t}\n\t\treturn;\n\t}\n\n\tif ( priority ) {\n\t\tconfig.queue.splice( priorityCount++, 0, callback );\n\t} else if ( seed ) {\n\t\tif ( !unitSampler ) {\n\t\t\tunitSampler = unitSamplerGenerator( seed );\n\t\t}\n\n\t\t// Insert into a random position after all priority items\n\t\tindex = Math.floor( unitSampler() * ( config.queue.length - priorityCount + 1 ) );\n\t\tconfig.queue.splice( priorityCount + index, 0, callback );\n\t} else {\n\t\tconfig.queue.push( callback );\n\t}\n\n\tif ( config.autorun && !config.blocking ) {\n\t\tprocess( last );\n\t}\n}\n\nfunction unitSamplerGenerator( seed ) {\n\n\t// 32-bit xorshift, requires only a nonzero seed\n\t// http://excamera.com/sphinx/article-xorshift.html\n\tvar sample = parseInt( generateHash( seed ), 16 ) || -1;\n\treturn function() {\n\t\tsample ^= sample << 13;\n\t\tsample ^= sample >>> 17;\n\t\tsample ^= sample << 5;\n\n\t\t// ECMAScript has no unsigned number type\n\t\tif ( sample < 0 ) {\n\t\t\tsample += 0x100000000;\n\t\t}\n\n\t\treturn sample / 0x100000000;\n\t};\n}\n\nfunction saveGlobal() {\n\tconfig.pollution = [];\n\n\tif ( config.noglobals ) {\n\t\tfor ( var key in global ) {\n\t\t\tif ( hasOwn.call( global, key ) ) {\n\n\t\t\t\t// In Opera sometimes DOM element ids show up here, ignore them\n\t\t\t\tif ( /^qunit-test-output/.test( key ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconfig.pollution.push( key );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction checkPollution() {\n\tvar newGlobals,\n\t\tdeletedGlobals,\n\t\told = config.pollution;\n\n\tsaveGlobal();\n\n\tnewGlobals = diff( config.pollution, old );\n\tif ( newGlobals.length > 0 ) {\n\t\tQUnit.pushFailure( \"Introduced global variable(s): \" + newGlobals.join( \", \" ) );\n\t}\n\n\tdeletedGlobals = diff( old, config.pollution );\n\tif ( deletedGlobals.length > 0 ) {\n\t\tQUnit.pushFailure( \"Deleted global variable(s): \" + deletedGlobals.join( \", \" ) );\n\t}\n}\n\n// Will be exposed as QUnit.asyncTest\nfunction asyncTest( testName, expected, callback ) {\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tQUnit.test( testName, expected, callback, true );\n}\n\n// Will be exposed as QUnit.test\nfunction test( testName, expected, callback, async ) {\n\tif ( focused )  { return; }\n\n\tvar newTest;\n\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tnewTest = new Test( {\n\t\ttestName: testName,\n\t\texpected: expected,\n\t\tasync: async,\n\t\tcallback: callback\n\t} );\n\n\tnewTest.queue();\n}\n\n// Will be exposed as QUnit.skip\nfunction skip( testName ) {\n\tif ( focused )  { return; }\n\n\tvar test = new Test( {\n\t\ttestName: testName,\n\t\tskip: true\n\t} );\n\n\ttest.queue();\n}\n\n// Will be exposed as QUnit.only\nfunction only( testName, expected, callback, async ) {\n\tvar newTest;\n\n\tif ( focused )  { return; }\n\n\tQUnit.config.queue.length = 0;\n\tfocused = true;\n\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tnewTest = new Test( {\n\t\ttestName: testName,\n\t\texpected: expected,\n\t\tasync: async,\n\t\tcallback: callback\n\t} );\n\n\tnewTest.queue();\n}\n\nfunction Assert( testContext ) {\n\tthis.test = testContext;\n}\n\n// Assert helpers\nQUnit.assert = Assert.prototype = {\n\n\t// Specify the number of expected assertions to guarantee that failed test\n\t// (no assertions are run at all) don't slip through.\n\texpect: function( asserts ) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\tthis.test.expected = asserts;\n\t\t} else {\n\t\t\treturn this.test.expected;\n\t\t}\n\t},\n\n\t// Increment this Test's semaphore counter, then return a function that\n\t// decrements that counter a maximum of once.\n\tasync: function( count ) {\n\t\tvar test = this.test,\n\t\t\tpopped = false,\n\t\t\tacceptCallCount = count;\n\n\t\tif ( typeof acceptCallCount === \"undefined\" ) {\n\t\t\tacceptCallCount = 1;\n\t\t}\n\n\t\ttest.semaphore += 1;\n\t\ttest.usedAsync = true;\n\t\tpauseProcessing();\n\n\t\treturn function done() {\n\n\t\t\tif ( popped ) {\n\t\t\t\ttest.pushFailure( \"Too many calls to the `assert.async` callback\",\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tacceptCallCount -= 1;\n\t\t\tif ( acceptCallCount > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttest.semaphore -= 1;\n\t\t\tpopped = true;\n\t\t\tresumeProcessing();\n\t\t};\n\t},\n\n\t// Exports test.push() to the user API\n\t// Alias of pushResult.\n\tpush: function( result, actual, expected, message, negative ) {\n\t\tvar currentAssert = this instanceof Assert ? this : QUnit.config.current.assert;\n\t\treturn currentAssert.pushResult( {\n\t\t\tresult: result,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: negative\n\t\t} );\n\t},\n\n\tpushResult: function( resultInfo ) {\n\n\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\tvar assert = this,\n\t\t\tcurrentTest = ( assert instanceof Assert && assert.test ) || QUnit.config.current;\n\n\t\t// Backwards compatibility fix.\n\t\t// Allows the direct use of global exported assertions and QUnit.assert.*\n\t\t// Although, it's use is not recommended as it can leak assertions\n\t\t// to other tests from async tests, because we only get a reference to the current test,\n\t\t// not exactly the test where assertion were intended to be called.\n\t\tif ( !currentTest ) {\n\t\t\tthrow new Error( \"assertion outside test context, in \" + sourceFromStacktrace( 2 ) );\n\t\t}\n\n\t\tif ( currentTest.usedAsync === true && currentTest.semaphore === 0 ) {\n\t\t\tcurrentTest.pushFailure( \"Assertion after the final `assert.async` was resolved\",\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\n\t\t\t// Allow this assertion to continue running anyway...\n\t\t}\n\n\t\tif ( !( assert instanceof Assert ) ) {\n\t\t\tassert = currentTest.assert;\n\t\t}\n\n\t\treturn assert.test.pushResult( resultInfo );\n\t},\n\n\tok: function( result, message ) {\n\t\tmessage = message || ( result ? \"okay\" : \"failed, expected argument to be truthy, was: \" +\n\t\t\tQUnit.dump.parse( result ) );\n\t\tthis.pushResult( {\n\t\t\tresult: !!result,\n\t\t\tactual: result,\n\t\t\texpected: true,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotOk: function( result, message ) {\n\t\tmessage = message || ( !result ? \"okay\" : \"failed, expected argument to be falsy, was: \" +\n\t\t\tQUnit.dump.parse( result ) );\n\t\tthis.pushResult( {\n\t\t\tresult: !result,\n\t\t\tactual: result,\n\t\t\texpected: false,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tequal: function( actual, expected, message ) {\n\t\t/*jshint eqeqeq:false */\n\t\tthis.pushResult( {\n\t\t\tresult: expected == actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotEqual: function( actual, expected, message ) {\n\t\t/*jshint eqeqeq:false */\n\t\tthis.pushResult( {\n\t\t\tresult: expected != actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tpropEqual: function( actual, expected, message ) {\n\t\tactual = objectValues( actual );\n\t\texpected = objectValues( expected );\n\t\tthis.pushResult( {\n\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotPropEqual: function( actual, expected, message ) {\n\t\tactual = objectValues( actual );\n\t\texpected = objectValues( expected );\n\t\tthis.pushResult( {\n\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tdeepEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotDeepEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tstrictEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: expected === actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotStrictEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: expected !== actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\t\"throws\": function( block, expected, message ) {\n\t\tvar actual, expectedType,\n\t\t\texpectedOutput = expected,\n\t\t\tok = false,\n\t\t\tcurrentTest = ( this instanceof Assert && this.test ) || QUnit.config.current;\n\n\t\t// 'expected' is optional unless doing string comparison\n\t\tif ( message == null && typeof expected === \"string\" ) {\n\t\t\tmessage = expected;\n\t\t\texpected = null;\n\t\t}\n\n\t\tcurrentTest.ignoreGlobalErrors = true;\n\t\ttry {\n\t\t\tblock.call( currentTest.testEnvironment );\n\t\t} catch ( e ) {\n\t\t\tactual = e;\n\t\t}\n\t\tcurrentTest.ignoreGlobalErrors = false;\n\n\t\tif ( actual ) {\n\t\t\texpectedType = QUnit.objectType( expected );\n\n\t\t\t// We don't want to validate thrown error\n\t\t\tif ( !expected ) {\n\t\t\t\tok = true;\n\t\t\t\texpectedOutput = null;\n\n\t\t\t// Expected is a regexp\n\t\t\t} else if ( expectedType === \"regexp\" ) {\n\t\t\t\tok = expected.test( errorString( actual ) );\n\n\t\t\t// Expected is a string\n\t\t\t} else if ( expectedType === \"string\" ) {\n\t\t\t\tok = expected === errorString( actual );\n\n\t\t\t// Expected is a constructor, maybe an Error constructor\n\t\t\t} else if ( expectedType === \"function\" && actual instanceof expected ) {\n\t\t\t\tok = true;\n\n\t\t\t// Expected is an Error object\n\t\t\t} else if ( expectedType === \"object\" ) {\n\t\t\t\tok = actual instanceof expected.constructor &&\n\t\t\t\t\tactual.name === expected.name &&\n\t\t\t\t\tactual.message === expected.message;\n\n\t\t\t// Expected is a validation function which returns true if validation passed\n\t\t\t} else if ( expectedType === \"function\" && expected.call( {}, actual ) === true ) {\n\t\t\t\texpectedOutput = null;\n\t\t\t\tok = true;\n\t\t\t}\n\t\t}\n\n\t\tcurrentTest.assert.pushResult( {\n\t\t\tresult: ok,\n\t\t\tactual: actual,\n\t\t\texpected: expectedOutput,\n\t\t\tmessage: message\n\t\t} );\n\t}\n};\n\n// Provide an alternative to assert.throws(), for environments that consider throws a reserved word\n// Known to us are: Closure Compiler, Narwhal\n( function() {\n\t/*jshint sub:true */\n\tAssert.prototype.raises = Assert.prototype [ \"throws\" ]; //jscs:ignore requireDotNotation\n}() );\n\nfunction errorString( error ) {\n\tvar name, message,\n\t\tresultErrorString = error.toString();\n\tif ( resultErrorString.substring( 0, 7 ) === \"[object\" ) {\n\t\tname = error.name ? error.name.toString() : \"Error\";\n\t\tmessage = error.message ? error.message.toString() : \"\";\n\t\tif ( name && message ) {\n\t\t\treturn name + \": \" + message;\n\t\t} else if ( name ) {\n\t\t\treturn name;\n\t\t} else if ( message ) {\n\t\t\treturn message;\n\t\t} else {\n\t\t\treturn \"Error\";\n\t\t}\n\t} else {\n\t\treturn resultErrorString;\n\t}\n}\n\n// Test for equality any JavaScript type.\n// Author: Philippe Rathé <prathe@gmail.com>\nQUnit.equiv = ( function() {\n\n\t// Stack to decide between skip/abort functions\n\tvar callers = [];\n\n\t// Stack to avoiding loops from circular referencing\n\tvar parents = [];\n\tvar parentsB = [];\n\n\tvar getProto = Object.getPrototypeOf || function( obj ) {\n\n\t\t/*jshint proto: true */\n\t\treturn obj.__proto__;\n\t};\n\n\tfunction useStrictEquality( b, a ) {\n\n\t\t// To catch short annotation VS 'new' annotation of a declaration. e.g.:\n\t\t// `var i = 1;`\n\t\t// `var j = new Number(1);`\n\t\tif ( typeof a === \"object\" ) {\n\t\t\ta = a.valueOf();\n\t\t}\n\t\tif ( typeof b === \"object\" ) {\n\t\t\tb = b.valueOf();\n\t\t}\n\n\t\treturn a === b;\n\t}\n\n\tfunction compareConstructors( a, b ) {\n\t\tvar protoA = getProto( a );\n\t\tvar protoB = getProto( b );\n\n\t\t// Comparing constructors is more strict than using `instanceof`\n\t\tif ( a.constructor === b.constructor ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ref #851\n\t\t// If the obj prototype descends from a null constructor, treat it\n\t\t// as a null prototype.\n\t\tif ( protoA && protoA.constructor === null ) {\n\t\t\tprotoA = null;\n\t\t}\n\t\tif ( protoB && protoB.constructor === null ) {\n\t\t\tprotoB = null;\n\t\t}\n\n\t\t// Allow objects with no prototype to be equivalent to\n\t\t// objects with Object as their constructor.\n\t\tif ( ( protoA === null && protoB === Object.prototype ) ||\n\t\t\t\t( protoB === null && protoA === Object.prototype ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction getRegExpFlags( regexp ) {\n\t\treturn \"flags\" in regexp ? regexp.flags : regexp.toString().match( /[gimuy]*$/ )[ 0 ];\n\t}\n\n\tvar callbacks = {\n\t\t\"string\": useStrictEquality,\n\t\t\"boolean\": useStrictEquality,\n\t\t\"number\": useStrictEquality,\n\t\t\"null\": useStrictEquality,\n\t\t\"undefined\": useStrictEquality,\n\t\t\"symbol\": useStrictEquality,\n\t\t\"date\": useStrictEquality,\n\n\t\t\"nan\": function() {\n\t\t\treturn true;\n\t\t},\n\n\t\t\"regexp\": function( b, a ) {\n\t\t\treturn a.source === b.source &&\n\n\t\t\t\t// Include flags in the comparison\n\t\t\t\tgetRegExpFlags( a ) === getRegExpFlags( b );\n\t\t},\n\n\t\t// - skip when the property is a method of an instance (OOP)\n\t\t// - abort otherwise,\n\t\t// initial === would have catch identical references anyway\n\t\t\"function\": function() {\n\t\t\tvar caller = callers[ callers.length - 1 ];\n\t\t\treturn caller !== Object && typeof caller !== \"undefined\";\n\t\t},\n\n\t\t\"array\": function( b, a ) {\n\t\t\tvar i, j, len, loop, aCircular, bCircular;\n\n\t\t\tlen = a.length;\n\t\t\tif ( len !== b.length ) {\n\n\t\t\t\t// Safe and faster\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Track reference to avoid circular references\n\t\t\tparents.push( a );\n\t\t\tparentsB.push( b );\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tloop = false;\n\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\tparents.pop();\n\t\t\t\t\tparentsB.pop();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparents.pop();\n\t\t\tparentsB.pop();\n\t\t\treturn true;\n\t\t},\n\n\t\t\"set\": function( b, a ) {\n\t\t\tvar innerEq,\n\t\t\t\touterEq = true;\n\n\t\t\tif ( a.size !== b.size ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ta.forEach( function( aVal ) {\n\t\t\t\tinnerEq = false;\n\n\t\t\t\tb.forEach( function( bVal ) {\n\t\t\t\t\tif ( innerEquiv( bVal, aVal ) ) {\n\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\touterEq = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn outerEq;\n\t\t},\n\n\t\t\"map\": function( b, a ) {\n\t\t\tvar innerEq,\n\t\t\t\touterEq = true;\n\n\t\t\tif ( a.size !== b.size ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ta.forEach( function( aVal, aKey ) {\n\t\t\t\tinnerEq = false;\n\n\t\t\t\tb.forEach( function( bVal, bKey ) {\n\t\t\t\t\tif ( innerEquiv( [ bVal, bKey ], [ aVal, aKey ] ) ) {\n\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\touterEq = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn outerEq;\n\t\t},\n\n\t\t\"object\": function( b, a ) {\n\t\t\tvar i, j, loop, aCircular, bCircular;\n\n\t\t\t// Default to true\n\t\t\tvar eq = true;\n\t\t\tvar aProperties = [];\n\t\t\tvar bProperties = [];\n\n\t\t\tif ( compareConstructors( a, b ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Stack constructor before traversing properties\n\t\t\tcallers.push( a.constructor );\n\n\t\t\t// Track reference to avoid circular references\n\t\t\tparents.push( a );\n\t\t\tparentsB.push( b );\n\n\t\t\t// Be strict: don't ensure hasOwnProperty and go deep\n\t\t\tfor ( i in a ) {\n\t\t\t\tloop = false;\n\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teq = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\taProperties.push( i );\n\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\teq = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparents.pop();\n\t\t\tparentsB.pop();\n\n\t\t\t// Unstack, we are done\n\t\t\tcallers.pop();\n\n\t\t\tfor ( i in b ) {\n\n\t\t\t\t// Collect b's properties\n\t\t\t\tbProperties.push( i );\n\t\t\t}\n\n\t\t\t// Ensures identical properties name\n\t\t\treturn eq && innerEquiv( aProperties.sort(), bProperties.sort() );\n\t\t}\n\t};\n\n\tfunction typeEquiv( a, b ) {\n\t\tvar type = QUnit.objectType( a );\n\t\treturn QUnit.objectType( b ) === type && callbacks[ type ]( b, a );\n\t}\n\n\t// The real equiv function\n\tfunction innerEquiv( a, b ) {\n\n\t\t// We're done when there's nothing more to compare\n\t\tif ( arguments.length < 2 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Require type-specific equality\n\t\treturn ( a === b || typeEquiv( a, b ) ) &&\n\n\t\t\t// ...across all consecutive argument pairs\n\t\t\t( arguments.length === 2 || innerEquiv.apply( this, [].slice.call( arguments, 1 ) ) );\n\t}\n\n\treturn innerEquiv;\n}() );\n\n// Based on jsDump by Ariel Flesler\n// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html\nQUnit.dump = ( function() {\n\tfunction quote( str ) {\n\t\treturn \"\\\"\" + str.toString().replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\"/g, \"\\\\\\\"\" ) + \"\\\"\";\n\t}\n\tfunction literal( o ) {\n\t\treturn o + \"\";\n\t}\n\tfunction join( pre, arr, post ) {\n\t\tvar s = dump.separator(),\n\t\t\tbase = dump.indent(),\n\t\t\tinner = dump.indent( 1 );\n\t\tif ( arr.join ) {\n\t\t\tarr = arr.join( \",\" + s + inner );\n\t\t}\n\t\tif ( !arr ) {\n\t\t\treturn pre + post;\n\t\t}\n\t\treturn [ pre, inner + arr, base + post ].join( s );\n\t}\n\tfunction array( arr, stack ) {\n\t\tvar i = arr.length,\n\t\t\tret = new Array( i );\n\n\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\treturn \"[object Array]\";\n\t\t}\n\n\t\tthis.up();\n\t\twhile ( i-- ) {\n\t\t\tret[ i ] = this.parse( arr[ i ], undefined, stack );\n\t\t}\n\t\tthis.down();\n\t\treturn join( \"[\", ret, \"]\" );\n\t}\n\n\tvar reName = /^function (\\w+)/,\n\t\tdump = {\n\n\t\t\t// The objType is used mostly internally, you can fix a (custom) type in advance\n\t\t\tparse: function( obj, objType, stack ) {\n\t\t\t\tstack = stack || [];\n\t\t\t\tvar res, parser, parserType,\n\t\t\t\t\tinStack = inArray( obj, stack );\n\n\t\t\t\tif ( inStack !== -1 ) {\n\t\t\t\t\treturn \"recursion(\" + ( inStack - stack.length ) + \")\";\n\t\t\t\t}\n\n\t\t\t\tobjType = objType || this.typeOf( obj  );\n\t\t\t\tparser = this.parsers[ objType ];\n\t\t\t\tparserType = typeof parser;\n\n\t\t\t\tif ( parserType === \"function\" ) {\n\t\t\t\t\tstack.push( obj );\n\t\t\t\t\tres = parser.call( this, obj, stack );\n\t\t\t\t\tstack.pop();\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t\treturn ( parserType === \"string\" ) ? parser : this.parsers.error;\n\t\t\t},\n\t\t\ttypeOf: function( obj ) {\n\t\t\t\tvar type;\n\t\t\t\tif ( obj === null ) {\n\t\t\t\t\ttype = \"null\";\n\t\t\t\t} else if ( typeof obj === \"undefined\" ) {\n\t\t\t\t\ttype = \"undefined\";\n\t\t\t\t} else if ( QUnit.is( \"regexp\", obj ) ) {\n\t\t\t\t\ttype = \"regexp\";\n\t\t\t\t} else if ( QUnit.is( \"date\", obj ) ) {\n\t\t\t\t\ttype = \"date\";\n\t\t\t\t} else if ( QUnit.is( \"function\", obj ) ) {\n\t\t\t\t\ttype = \"function\";\n\t\t\t\t} else if ( obj.setInterval !== undefined &&\n\t\t\t\t\t\tobj.document !== undefined &&\n\t\t\t\t\t\tobj.nodeType === undefined ) {\n\t\t\t\t\ttype = \"window\";\n\t\t\t\t} else if ( obj.nodeType === 9 ) {\n\t\t\t\t\ttype = \"document\";\n\t\t\t\t} else if ( obj.nodeType ) {\n\t\t\t\t\ttype = \"node\";\n\t\t\t\t} else if (\n\n\t\t\t\t\t// Native arrays\n\t\t\t\t\ttoString.call( obj ) === \"[object Array]\" ||\n\n\t\t\t\t\t// NodeList objects\n\t\t\t\t\t( typeof obj.length === \"number\" && obj.item !== undefined &&\n\t\t\t\t\t( obj.length ? obj.item( 0 ) === obj[ 0 ] : ( obj.item( 0 ) === null &&\n\t\t\t\t\tobj[ 0 ] === undefined ) ) )\n\t\t\t\t) {\n\t\t\t\t\ttype = \"array\";\n\t\t\t\t} else if ( obj.constructor === Error.prototype.constructor ) {\n\t\t\t\t\ttype = \"error\";\n\t\t\t\t} else {\n\t\t\t\t\ttype = typeof obj;\n\t\t\t\t}\n\t\t\t\treturn type;\n\t\t\t},\n\n\t\t\tseparator: function() {\n\t\t\t\treturn this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&#160;\" : \" \";\n\t\t\t},\n\n\t\t\t// Extra can be a number, shortcut for increasing-calling-decreasing\n\t\t\tindent: function( extra ) {\n\t\t\t\tif ( !this.multiline ) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\tvar chr = this.indentChar;\n\t\t\t\tif ( this.HTML ) {\n\t\t\t\t\tchr = chr.replace( /\\t/g, \"   \" ).replace( / /g, \"&#160;\" );\n\t\t\t\t}\n\t\t\t\treturn new Array( this.depth + ( extra || 0 ) ).join( chr );\n\t\t\t},\n\t\t\tup: function( a ) {\n\t\t\t\tthis.depth += a || 1;\n\t\t\t},\n\t\t\tdown: function( a ) {\n\t\t\t\tthis.depth -= a || 1;\n\t\t\t},\n\t\t\tsetParser: function( name, parser ) {\n\t\t\t\tthis.parsers[ name ] = parser;\n\t\t\t},\n\n\t\t\t// The next 3 are exposed so you can use them\n\t\t\tquote: quote,\n\t\t\tliteral: literal,\n\t\t\tjoin: join,\n\t\t\tdepth: 1,\n\t\t\tmaxDepth: QUnit.config.maxDepth,\n\n\t\t\t// This is the list of parsers, to modify them, use dump.setParser\n\t\t\tparsers: {\n\t\t\t\twindow: \"[Window]\",\n\t\t\t\tdocument: \"[Document]\",\n\t\t\t\terror: function( error ) {\n\t\t\t\t\treturn \"Error(\\\"\" + error.message + \"\\\")\";\n\t\t\t\t},\n\t\t\t\tunknown: \"[Unknown]\",\n\t\t\t\t\"null\": \"null\",\n\t\t\t\t\"undefined\": \"undefined\",\n\t\t\t\t\"function\": function( fn ) {\n\t\t\t\t\tvar ret = \"function\",\n\n\t\t\t\t\t\t// Functions never have name in IE\n\t\t\t\t\t\tname = \"name\" in fn ? fn.name : ( reName.exec( fn ) || [] )[ 1 ];\n\n\t\t\t\t\tif ( name ) {\n\t\t\t\t\t\tret += \" \" + name;\n\t\t\t\t\t}\n\t\t\t\t\tret += \"(\";\n\n\t\t\t\t\tret = [ ret, dump.parse( fn, \"functionArgs\" ), \"){\" ].join( \"\" );\n\t\t\t\t\treturn join( ret, dump.parse( fn, \"functionCode\" ), \"}\" );\n\t\t\t\t},\n\t\t\t\tarray: array,\n\t\t\t\tnodelist: array,\n\t\t\t\t\"arguments\": array,\n\t\t\t\tobject: function( map, stack ) {\n\t\t\t\t\tvar keys, key, val, i, nonEnumerableProperties,\n\t\t\t\t\t\tret = [];\n\n\t\t\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\t\t\treturn \"[object Object]\";\n\t\t\t\t\t}\n\n\t\t\t\t\tdump.up();\n\t\t\t\t\tkeys = [];\n\t\t\t\t\tfor ( key in map ) {\n\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Some properties are not always enumerable on Error objects.\n\t\t\t\t\tnonEnumerableProperties = [ \"message\", \"name\" ];\n\t\t\t\t\tfor ( i in nonEnumerableProperties ) {\n\t\t\t\t\t\tkey = nonEnumerableProperties[ i ];\n\t\t\t\t\t\tif ( key in map && inArray( key, keys ) < 0 ) {\n\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tkeys.sort();\n\t\t\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\t\tval = map[ key ];\n\t\t\t\t\t\tret.push( dump.parse( key, \"key\" ) + \": \" +\n\t\t\t\t\t\t\tdump.parse( val, undefined, stack ) );\n\t\t\t\t\t}\n\t\t\t\t\tdump.down();\n\t\t\t\t\treturn join( \"{\", ret, \"}\" );\n\t\t\t\t},\n\t\t\t\tnode: function( node ) {\n\t\t\t\t\tvar len, i, val,\n\t\t\t\t\t\topen = dump.HTML ? \"&lt;\" : \"<\",\n\t\t\t\t\t\tclose = dump.HTML ? \"&gt;\" : \">\",\n\t\t\t\t\t\ttag = node.nodeName.toLowerCase(),\n\t\t\t\t\t\tret = open + tag,\n\t\t\t\t\t\tattrs = node.attributes;\n\n\t\t\t\t\tif ( attrs ) {\n\t\t\t\t\t\tfor ( i = 0, len = attrs.length; i < len; i++ ) {\n\t\t\t\t\t\t\tval = attrs[ i ].nodeValue;\n\n\t\t\t\t\t\t\t// IE6 includes all attributes in .attributes, even ones not explicitly\n\t\t\t\t\t\t\t// set. Those have values like undefined, null, 0, false, \"\" or\n\t\t\t\t\t\t\t// \"inherit\".\n\t\t\t\t\t\t\tif ( val && val !== \"inherit\" ) {\n\t\t\t\t\t\t\t\tret += \" \" + attrs[ i ].nodeName + \"=\" +\n\t\t\t\t\t\t\t\t\tdump.parse( val, \"attribute\" );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tret += close;\n\n\t\t\t\t\t// Show content of TextNode or CDATASection\n\t\t\t\t\tif ( node.nodeType === 3 || node.nodeType === 4 ) {\n\t\t\t\t\t\tret += node.nodeValue;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ret + open + \"/\" + tag + close;\n\t\t\t\t},\n\n\t\t\t\t// Function calls it internally, it's the arguments part of the function\n\t\t\t\tfunctionArgs: function( fn ) {\n\t\t\t\t\tvar args,\n\t\t\t\t\t\tl = fn.length;\n\n\t\t\t\t\tif ( !l ) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\targs = new Array( l );\n\t\t\t\t\twhile ( l-- ) {\n\n\t\t\t\t\t\t// 97 is 'a'\n\t\t\t\t\t\targs[ l ] = String.fromCharCode( 97 + l );\n\t\t\t\t\t}\n\t\t\t\t\treturn \" \" + args.join( \", \" ) + \" \";\n\t\t\t\t},\n\n\t\t\t\t// Object calls it internally, the key part of an item in a map\n\t\t\t\tkey: quote,\n\n\t\t\t\t// Function calls it internally, it's the content of the function\n\t\t\t\tfunctionCode: \"[code]\",\n\n\t\t\t\t// Node calls it internally, it's a html attribute value\n\t\t\t\tattribute: quote,\n\t\t\t\tstring: quote,\n\t\t\t\tdate: quote,\n\t\t\t\tregexp: literal,\n\t\t\t\tnumber: literal,\n\t\t\t\t\"boolean\": literal\n\t\t\t},\n\n\t\t\t// If true, entities are escaped ( <, >, \\t, space and \\n )\n\t\t\tHTML: false,\n\n\t\t\t// Indentation unit\n\t\t\tindentChar: \"  \",\n\n\t\t\t// If true, items in a collection, are separated by a \\n, else just a space.\n\t\t\tmultiline: true\n\t\t};\n\n\treturn dump;\n}() );\n\n// Back compat\nQUnit.jsDump = QUnit.dump;\n\n// Deprecated\n// Extend assert methods to QUnit for Backwards compatibility\n( function() {\n\tvar i,\n\t\tassertions = Assert.prototype;\n\n\tfunction applyCurrent( current ) {\n\t\treturn function() {\n\t\t\tvar assert = new Assert( QUnit.config.current );\n\t\t\tcurrent.apply( assert, arguments );\n\t\t};\n\t}\n\n\tfor ( i in assertions ) {\n\t\tQUnit[ i ] = applyCurrent( assertions[ i ] );\n\t}\n}() );\n\n// For browser, export only select globals\nif ( defined.document ) {\n\n\t( function() {\n\t\tvar i, l,\n\t\t\tkeys = [\n\t\t\t\t\"test\",\n\t\t\t\t\"module\",\n\t\t\t\t\"expect\",\n\t\t\t\t\"asyncTest\",\n\t\t\t\t\"start\",\n\t\t\t\t\"stop\",\n\t\t\t\t\"ok\",\n\t\t\t\t\"notOk\",\n\t\t\t\t\"equal\",\n\t\t\t\t\"notEqual\",\n\t\t\t\t\"propEqual\",\n\t\t\t\t\"notPropEqual\",\n\t\t\t\t\"deepEqual\",\n\t\t\t\t\"notDeepEqual\",\n\t\t\t\t\"strictEqual\",\n\t\t\t\t\"notStrictEqual\",\n\t\t\t\t\"throws\",\n\t\t\t\t\"raises\"\n\t\t\t];\n\n\t\tfor ( i = 0, l = keys.length; i < l; i++ ) {\n\t\t\twindow[ keys[ i ] ] = QUnit[ keys[ i ] ];\n\t\t}\n\t}() );\n\n\twindow.QUnit = QUnit;\n}\n\n// For nodejs\nif ( typeof module !== \"undefined\" && module && module.exports ) {\n\tmodule.exports = QUnit;\n\n\t// For consistency with CommonJS environments' exports\n\tmodule.exports.QUnit = QUnit;\n}\n\n// For CommonJS with exports, but without module.exports, like Rhino\nif ( typeof exports !== \"undefined\" && exports ) {\n\texports.QUnit = QUnit;\n}\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( function() {\n\t\treturn QUnit;\n\t} );\n\tQUnit.config.autostart = false;\n}\n\n// Get a reference to the global object, like window in browsers\n}( ( function() {\n\treturn this;\n}() ) ) );\n\n( function() {\n\n// Only interact with URLs via window.location\nvar location = typeof window !== \"undefined\" && window.location;\nif ( !location ) {\n\treturn;\n}\n\nvar urlParams = getUrlParams();\n\nQUnit.urlParams = urlParams;\n\n// Match module/test by inclusion in an array\nQUnit.config.moduleId = [].concat( urlParams.moduleId || [] );\nQUnit.config.testId = [].concat( urlParams.testId || [] );\n\n// Exact case-insensitive match of the module name\nQUnit.config.module = urlParams.module;\n\n// Regular expression or case-insenstive substring match against \"moduleName: testName\"\nQUnit.config.filter = urlParams.filter;\n\n// Test order randomization\nif ( urlParams.seed === true ) {\n\n\t// Generate a random seed if the option is specified without a value\n\tQUnit.config.seed = Math.random().toString( 36 ).slice( 2 );\n} else if ( urlParams.seed ) {\n\tQUnit.config.seed = urlParams.seed;\n}\n\n// Add URL-parameter-mapped config values with UI form rendering data\nQUnit.config.urlConfig.push(\n\t{\n\t\tid: \"hidepassed\",\n\t\tlabel: \"Hide passed tests\",\n\t\ttooltip: \"Only show tests and assertions that fail. Stored as query-strings.\"\n\t},\n\t{\n\t\tid: \"noglobals\",\n\t\tlabel: \"Check for Globals\",\n\t\ttooltip: \"Enabling this will test if any test introduces new properties on the \" +\n\t\t\t\"global object (`window` in Browsers). Stored as query-strings.\"\n\t},\n\t{\n\t\tid: \"notrycatch\",\n\t\tlabel: \"No try-catch\",\n\t\ttooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging \" +\n\t\t\t\"exceptions in IE reasonable. Stored as query-strings.\"\n\t}\n);\n\nQUnit.begin( function() {\n\tvar i, option,\n\t\turlConfig = QUnit.config.urlConfig;\n\n\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\n\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\toption = QUnit.config.urlConfig[ i ];\n\t\tif ( typeof option !== \"string\" ) {\n\t\t\toption = option.id;\n\t\t}\n\n\t\tif ( QUnit.config[ option ] === undefined ) {\n\t\t\tQUnit.config[ option ] = urlParams[ option ];\n\t\t}\n\t}\n} );\n\nfunction getUrlParams() {\n\tvar i, param, name, value;\n\tvar urlParams = {};\n\tvar params = location.search.slice( 1 ).split( \"&\" );\n\tvar length = params.length;\n\n\tfor ( i = 0; i < length; i++ ) {\n\t\tif ( params[ i ] ) {\n\t\t\tparam = params[ i ].split( \"=\" );\n\t\t\tname = decodeURIComponent( param[ 0 ] );\n\n\t\t\t// Allow just a key to turn on a flag, e.g., test.html?noglobals\n\t\t\tvalue = param.length === 1 ||\n\t\t\t\tdecodeURIComponent( param.slice( 1 ).join( \"=\" ) ) ;\n\t\t\tif ( urlParams[ name ] ) {\n\t\t\t\turlParams[ name ] = [].concat( urlParams[ name ], value );\n\t\t\t} else {\n\t\t\t\turlParams[ name ] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn urlParams;\n}\n\n// Don't load the HTML Reporter on non-browser environments\nif ( typeof window === \"undefined\" || !window.document ) {\n\treturn;\n}\n\n// Deprecated QUnit.init - Ref #530\n// Re-initialize the configuration options\nQUnit.init = function() {\n\tvar config = QUnit.config;\n\n\tconfig.stats = { all: 0, bad: 0 };\n\tconfig.moduleStats = { all: 0, bad: 0 };\n\tconfig.started = 0;\n\tconfig.updateRate = 1000;\n\tconfig.blocking = false;\n\tconfig.autostart = true;\n\tconfig.autorun = false;\n\tconfig.filter = \"\";\n\tconfig.queue = [];\n\n\tappendInterface();\n};\n\nvar config = QUnit.config,\n\tdocument = window.document,\n\tcollapseNext = false,\n\thasOwn = Object.prototype.hasOwnProperty,\n\tunfilteredUrl = setUrl( { filter: undefined, module: undefined,\n\t\tmoduleId: undefined, testId: undefined } ),\n\tdefined = {\n\t\tsessionStorage: ( function() {\n\t\t\tvar x = \"qunit-test-string\";\n\t\t\ttry {\n\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\treturn true;\n\t\t\t} catch ( e ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}() )\n\t},\n\tmodulesList = [];\n\n/**\n* Escape text for attribute or text content.\n*/\nfunction escapeText( s ) {\n\tif ( !s ) {\n\t\treturn \"\";\n\t}\n\ts = s + \"\";\n\n\t// Both single quotes and double quotes (for attributes)\n\treturn s.replace( /['\"<>&]/g, function( s ) {\n\t\tswitch ( s ) {\n\t\tcase \"'\":\n\t\t\treturn \"&#039;\";\n\t\tcase \"\\\"\":\n\t\t\treturn \"&quot;\";\n\t\tcase \"<\":\n\t\t\treturn \"&lt;\";\n\t\tcase \">\":\n\t\t\treturn \"&gt;\";\n\t\tcase \"&\":\n\t\t\treturn \"&amp;\";\n\t\t}\n\t} );\n}\n\n/**\n * @param {HTMLElement} elem\n * @param {string} type\n * @param {Function} fn\n */\nfunction addEvent( elem, type, fn ) {\n\tif ( elem.addEventListener ) {\n\n\t\t// Standards-based browsers\n\t\telem.addEventListener( type, fn, false );\n\t} else if ( elem.attachEvent ) {\n\n\t\t// Support: IE <9\n\t\telem.attachEvent( \"on\" + type, function() {\n\t\t\tvar event = window.event;\n\t\t\tif ( !event.target ) {\n\t\t\t\tevent.target = event.srcElement || document;\n\t\t\t}\n\n\t\t\tfn.call( elem, event );\n\t\t} );\n\t}\n}\n\n/**\n * @param {Array|NodeList} elems\n * @param {string} type\n * @param {Function} fn\n */\nfunction addEvents( elems, type, fn ) {\n\tvar i = elems.length;\n\twhile ( i-- ) {\n\t\taddEvent( elems[ i ], type, fn );\n\t}\n}\n\nfunction hasClass( elem, name ) {\n\treturn ( \" \" + elem.className + \" \" ).indexOf( \" \" + name + \" \" ) >= 0;\n}\n\nfunction addClass( elem, name ) {\n\tif ( !hasClass( elem, name ) ) {\n\t\telem.className += ( elem.className ? \" \" : \"\" ) + name;\n\t}\n}\n\nfunction toggleClass( elem, name, force ) {\n\tif ( force || typeof force === \"undefined\" && !hasClass( elem, name ) ) {\n\t\taddClass( elem, name );\n\t} else {\n\t\tremoveClass( elem, name );\n\t}\n}\n\nfunction removeClass( elem, name ) {\n\tvar set = \" \" + elem.className + \" \";\n\n\t// Class name may appear multiple times\n\twhile ( set.indexOf( \" \" + name + \" \" ) >= 0 ) {\n\t\tset = set.replace( \" \" + name + \" \", \" \" );\n\t}\n\n\t// Trim for prettiness\n\telem.className = typeof set.trim === \"function\" ? set.trim() : set.replace( /^\\s+|\\s+$/g, \"\" );\n}\n\nfunction id( name ) {\n\treturn document.getElementById && document.getElementById( name );\n}\n\nfunction getUrlConfigHtml() {\n\tvar i, j, val,\n\t\tescaped, escapedTooltip,\n\t\tselection = false,\n\t\turlConfig = config.urlConfig,\n\t\turlConfigHtml = \"\";\n\n\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\n\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\tval = config.urlConfig[ i ];\n\t\tif ( typeof val === \"string\" ) {\n\t\t\tval = {\n\t\t\t\tid: val,\n\t\t\t\tlabel: val\n\t\t\t};\n\t\t}\n\n\t\tescaped = escapeText( val.id );\n\t\tescapedTooltip = escapeText( val.tooltip );\n\n\t\tif ( !val.value || typeof val.value === \"string\" ) {\n\t\t\turlConfigHtml += \"<input id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' name='\" + escaped + \"' type='checkbox'\" +\n\t\t\t\t( val.value ? \" value='\" + escapeText( val.value ) + \"'\" : \"\" ) +\n\t\t\t\t( config[ val.id ] ? \" checked='checked'\" : \"\" ) +\n\t\t\t\t\" title='\" + escapedTooltip + \"' /><label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label + \"</label>\";\n\t\t} else {\n\t\t\turlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label +\n\t\t\t\t\": </label><select id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' name='\" + escaped + \"' title='\" + escapedTooltip + \"'><option></option>\";\n\n\t\t\tif ( QUnit.is( \"array\", val.value ) ) {\n\t\t\t\tfor ( j = 0; j < val.value.length; j++ ) {\n\t\t\t\t\tescaped = escapeText( val.value[ j ] );\n\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped + \"'\" +\n\t\t\t\t\t\t( config[ val.id ] === val.value[ j ] ?\n\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\">\" + escaped + \"</option>\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( j in val.value ) {\n\t\t\t\t\tif ( hasOwn.call( val.value, j ) ) {\n\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escapeText( j ) + \"'\" +\n\t\t\t\t\t\t\t( config[ val.id ] === j ?\n\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\">\" + escapeText( val.value[ j ] ) + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( config[ val.id ] && !selection ) {\n\t\t\t\tescaped = escapeText( config[ val.id ] );\n\t\t\t\turlConfigHtml += \"<option value='\" + escaped +\n\t\t\t\t\t\"' selected='selected' disabled='disabled'>\" + escaped + \"</option>\";\n\t\t\t}\n\t\t\turlConfigHtml += \"</select>\";\n\t\t}\n\t}\n\n\treturn urlConfigHtml;\n}\n\n// Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.\n// Updates the URL with the new state of `config.urlConfig` values.\nfunction toolbarChanged() {\n\tvar updatedUrl, value, tests,\n\t\tfield = this,\n\t\tparams = {};\n\n\t// Detect if field is a select menu or a checkbox\n\tif ( \"selectedIndex\" in field ) {\n\t\tvalue = field.options[ field.selectedIndex ].value || undefined;\n\t} else {\n\t\tvalue = field.checked ? ( field.defaultValue || true ) : undefined;\n\t}\n\n\tparams[ field.name ] = value;\n\tupdatedUrl = setUrl( params );\n\n\t// Check if we can apply the change without a page refresh\n\tif ( \"hidepassed\" === field.name && \"replaceState\" in window.history ) {\n\t\tQUnit.urlParams[ field.name ] = value;\n\t\tconfig[ field.name ] = value || false;\n\t\ttests = id( \"qunit-tests\" );\n\t\tif ( tests ) {\n\t\t\ttoggleClass( tests, \"hidepass\", value || false );\n\t\t}\n\t\twindow.history.replaceState( null, \"\", updatedUrl );\n\t} else {\n\t\twindow.location = updatedUrl;\n\t}\n}\n\nfunction setUrl( params ) {\n\tvar key, arrValue, i,\n\t\tquerystring = \"?\",\n\t\tlocation = window.location;\n\n\tparams = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\n\n\tfor ( key in params ) {\n\n\t\t// Skip inherited or undefined properties\n\t\tif ( hasOwn.call( params, key ) && params[ key ] !== undefined ) {\n\n\t\t\t// Output a parameter for each value of this key (but usually just one)\n\t\t\tarrValue = [].concat( params[ key ] );\n\t\t\tfor ( i = 0; i < arrValue.length; i++ ) {\n\t\t\t\tquerystring += encodeURIComponent( key );\n\t\t\t\tif ( arrValue[ i ] !== true ) {\n\t\t\t\t\tquerystring += \"=\" + encodeURIComponent( arrValue[ i ] );\n\t\t\t\t}\n\t\t\t\tquerystring += \"&\";\n\t\t\t}\n\t\t}\n\t}\n\treturn location.protocol + \"//\" + location.host +\n\t\tlocation.pathname + querystring.slice( 0, -1 );\n}\n\nfunction applyUrlParams() {\n\tvar selectedModule,\n\t\tmodulesList = id( \"qunit-modulefilter\" ),\n\t\tfilter = id( \"qunit-filter-input\" ).value;\n\n\tselectedModule = modulesList ?\n\t\tdecodeURIComponent( modulesList.options[ modulesList.selectedIndex ].value ) :\n\t\tundefined;\n\n\twindow.location = setUrl( {\n\t\tmodule: ( selectedModule === \"\" ) ? undefined : selectedModule,\n\t\tfilter: ( filter === \"\" ) ? undefined : filter,\n\n\t\t// Remove moduleId and testId filters\n\t\tmoduleId: undefined,\n\t\ttestId: undefined\n\t} );\n}\n\nfunction toolbarUrlConfigContainer() {\n\tvar urlConfigContainer = document.createElement( \"span\" );\n\n\turlConfigContainer.innerHTML = getUrlConfigHtml();\n\taddClass( urlConfigContainer, \"qunit-url-config\" );\n\n\t// For oldIE support:\n\t// * Add handlers to the individual elements instead of the container\n\t// * Use \"click\" instead of \"change\" for checkboxes\n\taddEvents( urlConfigContainer.getElementsByTagName( \"input\" ), \"click\", toolbarChanged );\n\taddEvents( urlConfigContainer.getElementsByTagName( \"select\" ), \"change\", toolbarChanged );\n\n\treturn urlConfigContainer;\n}\n\nfunction toolbarLooseFilter() {\n\tvar filter = document.createElement( \"form\" ),\n\t\tlabel = document.createElement( \"label\" ),\n\t\tinput = document.createElement( \"input\" ),\n\t\tbutton = document.createElement( \"button\" );\n\n\taddClass( filter, \"qunit-filter\" );\n\n\tlabel.innerHTML = \"Filter: \";\n\n\tinput.type = \"text\";\n\tinput.value = config.filter || \"\";\n\tinput.name = \"filter\";\n\tinput.id = \"qunit-filter-input\";\n\n\tbutton.innerHTML = \"Go\";\n\n\tlabel.appendChild( input );\n\n\tfilter.appendChild( label );\n\tfilter.appendChild( button );\n\taddEvent( filter, \"submit\", function( ev ) {\n\t\tapplyUrlParams();\n\n\t\tif ( ev && ev.preventDefault ) {\n\t\t\tev.preventDefault();\n\t\t}\n\n\t\treturn false;\n\t} );\n\n\treturn filter;\n}\n\nfunction toolbarModuleFilterHtml() {\n\tvar i,\n\t\tmoduleFilterHtml = \"\";\n\n\tif ( !modulesList.length ) {\n\t\treturn false;\n\t}\n\n\tmoduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label>\" +\n\t\t\"<select id='qunit-modulefilter' name='modulefilter'><option value='' \" +\n\t\t( QUnit.urlParams.module === undefined ? \"selected='selected'\" : \"\" ) +\n\t\t\">< All Modules ></option>\";\n\n\tfor ( i = 0; i < modulesList.length; i++ ) {\n\t\tmoduleFilterHtml += \"<option value='\" +\n\t\t\tescapeText( encodeURIComponent( modulesList[ i ] ) ) + \"' \" +\n\t\t\t( QUnit.urlParams.module === modulesList[ i ] ? \"selected='selected'\" : \"\" ) +\n\t\t\t\">\" + escapeText( modulesList[ i ] ) + \"</option>\";\n\t}\n\tmoduleFilterHtml += \"</select>\";\n\n\treturn moduleFilterHtml;\n}\n\nfunction toolbarModuleFilter() {\n\tvar toolbar = id( \"qunit-testrunner-toolbar\" ),\n\t\tmoduleFilter = document.createElement( \"span\" ),\n\t\tmoduleFilterHtml = toolbarModuleFilterHtml();\n\n\tif ( !toolbar || !moduleFilterHtml ) {\n\t\treturn false;\n\t}\n\n\tmoduleFilter.setAttribute( \"id\", \"qunit-modulefilter-container\" );\n\tmoduleFilter.innerHTML = moduleFilterHtml;\n\n\taddEvent( moduleFilter.lastChild, \"change\", applyUrlParams );\n\n\ttoolbar.appendChild( moduleFilter );\n}\n\nfunction appendToolbar() {\n\tvar toolbar = id( \"qunit-testrunner-toolbar\" );\n\n\tif ( toolbar ) {\n\t\ttoolbar.appendChild( toolbarUrlConfigContainer() );\n\t\ttoolbar.appendChild( toolbarLooseFilter() );\n\t\ttoolbarModuleFilter();\n\t}\n}\n\nfunction appendHeader() {\n\tvar header = id( \"qunit-header\" );\n\n\tif ( header ) {\n\t\theader.innerHTML = \"<a href='\" + escapeText( unfilteredUrl ) + \"'>\" + header.innerHTML +\n\t\t\t\"</a> \";\n\t}\n}\n\nfunction appendBanner() {\n\tvar banner = id( \"qunit-banner\" );\n\n\tif ( banner ) {\n\t\tbanner.className = \"\";\n\t}\n}\n\nfunction appendTestResults() {\n\tvar tests = id( \"qunit-tests\" ),\n\t\tresult = id( \"qunit-testresult\" );\n\n\tif ( result ) {\n\t\tresult.parentNode.removeChild( result );\n\t}\n\n\tif ( tests ) {\n\t\ttests.innerHTML = \"\";\n\t\tresult = document.createElement( \"p\" );\n\t\tresult.id = \"qunit-testresult\";\n\t\tresult.className = \"result\";\n\t\ttests.parentNode.insertBefore( result, tests );\n\t\tresult.innerHTML = \"Running...<br />&#160;\";\n\t}\n}\n\nfunction storeFixture() {\n\tvar fixture = id( \"qunit-fixture\" );\n\tif ( fixture ) {\n\t\tconfig.fixture = fixture.innerHTML;\n\t}\n}\n\nfunction appendFilteredTest() {\n\tvar testId = QUnit.config.testId;\n\tif ( !testId || testId.length <= 0 ) {\n\t\treturn \"\";\n\t}\n\treturn \"<div id='qunit-filteredTest'>Rerunning selected tests: \" +\n\t\tescapeText( testId.join( \", \" ) ) +\n\t\t\" <a id='qunit-clearFilter' href='\" +\n\t\tescapeText( unfilteredUrl ) +\n\t\t\"'>Run all tests</a></div>\";\n}\n\nfunction appendUserAgent() {\n\tvar userAgent = id( \"qunit-userAgent\" );\n\n\tif ( userAgent ) {\n\t\tuserAgent.innerHTML = \"\";\n\t\tuserAgent.appendChild(\n\t\t\tdocument.createTextNode(\n\t\t\t\t\"QUnit \" + QUnit.version + \"; \" + navigator.userAgent\n\t\t\t)\n\t\t);\n\t}\n}\n\nfunction appendInterface() {\n\tvar qunit = id( \"qunit\" );\n\n\tif ( qunit ) {\n\t\tqunit.innerHTML =\n\t\t\t\"<h1 id='qunit-header'>\" + escapeText( document.title ) + \"</h1>\" +\n\t\t\t\"<h2 id='qunit-banner'></h2>\" +\n\t\t\t\"<div id='qunit-testrunner-toolbar'></div>\" +\n\t\t\tappendFilteredTest() +\n\t\t\t\"<h2 id='qunit-userAgent'></h2>\" +\n\t\t\t\"<ol id='qunit-tests'></ol>\";\n\t}\n\n\tappendHeader();\n\tappendBanner();\n\tappendTestResults();\n\tappendUserAgent();\n\tappendToolbar();\n}\n\nfunction appendTestsList( modules ) {\n\tvar i, l, x, z, test, moduleObj;\n\n\tfor ( i = 0, l = modules.length; i < l; i++ ) {\n\t\tmoduleObj = modules[ i ];\n\n\t\tfor ( x = 0, z = moduleObj.tests.length; x < z; x++ ) {\n\t\t\ttest = moduleObj.tests[ x ];\n\n\t\t\tappendTest( test.name, test.testId, moduleObj.name );\n\t\t}\n\t}\n}\n\nfunction appendTest( name, testId, moduleName ) {\n\tvar title, rerunTrigger, testBlock, assertList,\n\t\ttests = id( \"qunit-tests\" );\n\n\tif ( !tests ) {\n\t\treturn;\n\t}\n\n\ttitle = document.createElement( \"strong\" );\n\ttitle.innerHTML = getNameHtml( name, moduleName );\n\n\trerunTrigger = document.createElement( \"a\" );\n\trerunTrigger.innerHTML = \"Rerun\";\n\trerunTrigger.href = setUrl( { testId: testId } );\n\n\ttestBlock = document.createElement( \"li\" );\n\ttestBlock.appendChild( title );\n\ttestBlock.appendChild( rerunTrigger );\n\ttestBlock.id = \"qunit-test-output-\" + testId;\n\n\tassertList = document.createElement( \"ol\" );\n\tassertList.className = \"qunit-assert-list\";\n\n\ttestBlock.appendChild( assertList );\n\n\ttests.appendChild( testBlock );\n}\n\n// HTML Reporter initialization and load\nQUnit.begin( function( details ) {\n\tvar i, moduleObj, tests;\n\n\t// Sort modules by name for the picker\n\tfor ( i = 0; i < details.modules.length; i++ ) {\n\t\tmoduleObj = details.modules[ i ];\n\t\tif ( moduleObj.name ) {\n\t\t\tmodulesList.push( moduleObj.name );\n\t\t}\n\t}\n\tmodulesList.sort( function( a, b ) {\n\t\treturn a.localeCompare( b );\n\t} );\n\n\t// Capture fixture HTML from the page\n\tstoreFixture();\n\n\t// Initialize QUnit elements\n\tappendInterface();\n\tappendTestsList( details.modules );\n\ttests = id( \"qunit-tests\" );\n\tif ( tests && config.hidepassed ) {\n\t\taddClass( tests, \"hidepass\" );\n\t}\n} );\n\nQUnit.done( function( details ) {\n\tvar i, key,\n\t\tbanner = id( \"qunit-banner\" ),\n\t\ttests = id( \"qunit-tests\" ),\n\t\thtml = [\n\t\t\t\"Tests completed in \",\n\t\t\tdetails.runtime,\n\t\t\t\" milliseconds.<br />\",\n\t\t\t\"<span class='passed'>\",\n\t\t\tdetails.passed,\n\t\t\t\"</span> assertions of <span class='total'>\",\n\t\t\tdetails.total,\n\t\t\t\"</span> passed, <span class='failed'>\",\n\t\t\tdetails.failed,\n\t\t\t\"</span> failed.\"\n\t\t].join( \"\" );\n\n\tif ( banner ) {\n\t\tbanner.className = details.failed ? \"qunit-fail\" : \"qunit-pass\";\n\t}\n\n\tif ( tests ) {\n\t\tid( \"qunit-testresult\" ).innerHTML = html;\n\t}\n\n\tif ( config.altertitle && document.title ) {\n\n\t\t// Show ✖ for good, ✔ for bad suite result in title\n\t\t// use escape sequences in case file gets loaded with non-utf-8-charset\n\t\tdocument.title = [\n\t\t\t( details.failed ? \"\\u2716\" : \"\\u2714\" ),\n\t\t\tdocument.title.replace( /^[\\u2714\\u2716] /i, \"\" )\n\t\t].join( \" \" );\n\t}\n\n\t// Clear own sessionStorage items if all tests passed\n\tif ( config.reorder && defined.sessionStorage && details.failed === 0 ) {\n\t\tfor ( i = 0; i < sessionStorage.length; i++ ) {\n\t\t\tkey = sessionStorage.key( i++ );\n\t\t\tif ( key.indexOf( \"qunit-test-\" ) === 0 ) {\n\t\t\t\tsessionStorage.removeItem( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Scroll back to top to show results\n\tif ( config.scrolltop && window.scrollTo ) {\n\t\twindow.scrollTo( 0, 0 );\n\t}\n} );\n\nfunction getNameHtml( name, module ) {\n\tvar nameHtml = \"\";\n\n\tif ( module ) {\n\t\tnameHtml = \"<span class='module-name'>\" + escapeText( module ) + \"</span>: \";\n\t}\n\n\tnameHtml += \"<span class='test-name'>\" + escapeText( name ) + \"</span>\";\n\n\treturn nameHtml;\n}\n\nQUnit.testStart( function( details ) {\n\tvar running, testBlock, bad;\n\n\ttestBlock = id( \"qunit-test-output-\" + details.testId );\n\tif ( testBlock ) {\n\t\ttestBlock.className = \"running\";\n\t} else {\n\n\t\t// Report later registered tests\n\t\tappendTest( details.name, details.testId, details.module );\n\t}\n\n\trunning = id( \"qunit-testresult\" );\n\tif ( running ) {\n\t\tbad = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t+sessionStorage.getItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\n\t\trunning.innerHTML = ( bad ?\n\t\t\t\"Rerunning previously failed test: <br />\" :\n\t\t\t\"Running: <br />\" ) +\n\t\t\tgetNameHtml( details.name, details.module );\n\t}\n\n} );\n\nfunction stripHtml( string ) {\n\n\t// Strip tags, html entity and whitespaces\n\treturn string.replace( /<\\/?[^>]+(>|$)/g, \"\" ).replace( /\\&quot;/g, \"\" ).replace( /\\s+/g, \"\" );\n}\n\nQUnit.log( function( details ) {\n\tvar assertList, assertLi,\n\t\tmessage, expected, actual, diff,\n\t\tshowDiff = false,\n\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\n\tif ( !testItem ) {\n\t\treturn;\n\t}\n\n\tmessage = escapeText( details.message ) || ( details.result ? \"okay\" : \"failed\" );\n\tmessage = \"<span class='test-message'>\" + message + \"</span>\";\n\tmessage += \"<span class='runtime'>@ \" + details.runtime + \" ms</span>\";\n\n\t// The pushFailure doesn't provide details.expected\n\t// when it calls, it's implicit to also not show expected and diff stuff\n\t// Also, we need to check details.expected existence, as it can exist and be undefined\n\tif ( !details.result && hasOwn.call( details, \"expected\" ) ) {\n\t\tif ( details.negative ) {\n\t\t\texpected = \"NOT \" + QUnit.dump.parse( details.expected );\n\t\t} else {\n\t\t\texpected = QUnit.dump.parse( details.expected );\n\t\t}\n\n\t\tactual = QUnit.dump.parse( details.actual );\n\t\tmessage += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" +\n\t\t\tescapeText( expected ) +\n\t\t\t\"</pre></td></tr>\";\n\n\t\tif ( actual !== expected ) {\n\n\t\t\tmessage += \"<tr class='test-actual'><th>Result: </th><td><pre>\" +\n\t\t\t\tescapeText( actual ) + \"</pre></td></tr>\";\n\n\t\t\t// Don't show diff if actual or expected are booleans\n\t\t\tif ( !( /^(true|false)$/.test( actual ) ) &&\n\t\t\t\t\t!( /^(true|false)$/.test( expected ) ) ) {\n\t\t\t\tdiff = QUnit.diff( expected, actual );\n\t\t\t\tshowDiff = stripHtml( diff ).length !==\n\t\t\t\t\tstripHtml( expected ).length +\n\t\t\t\t\tstripHtml( actual ).length;\n\t\t\t}\n\n\t\t\t// Don't show diff if expected and actual are totally different\n\t\t\tif ( showDiff ) {\n\t\t\t\tmessage += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" +\n\t\t\t\t\tdiff + \"</pre></td></tr>\";\n\t\t\t}\n\t\t} else if ( expected.indexOf( \"[object Array]\" ) !== -1 ||\n\t\t\t\texpected.indexOf( \"[object Object]\" ) !== -1 ) {\n\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\"Diff suppressed as the depth of object is more than current max depth (\" +\n\t\t\t\tQUnit.config.maxDepth + \").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \" +\n\t\t\t\t\" run with a higher max depth or <a href='\" +\n\t\t\t\tescapeText( setUrl( { maxDepth: -1 } ) ) + \"'>\" +\n\t\t\t\t\"Rerun</a> without max depth.</p></td></tr>\";\n\t\t} else {\n\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\"Diff suppressed as the expected and actual results have an equivalent\" +\n\t\t\t\t\" serialization</td></tr>\";\n\t\t}\n\n\t\tif ( details.source ) {\n\t\t\tmessage += \"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\";\n\t\t}\n\n\t\tmessage += \"</table>\";\n\n\t// This occurs when pushFailure is set and we have an extracted stack trace\n\t} else if ( !details.result && details.source ) {\n\t\tmessage += \"<table>\" +\n\t\t\t\"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\tescapeText( details.source ) + \"</pre></td></tr>\" +\n\t\t\t\"</table>\";\n\t}\n\n\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\n\tassertLi = document.createElement( \"li\" );\n\tassertLi.className = details.result ? \"pass\" : \"fail\";\n\tassertLi.innerHTML = message;\n\tassertList.appendChild( assertLi );\n} );\n\nQUnit.testDone( function( details ) {\n\tvar testTitle, time, testItem, assertList,\n\t\tgood, bad, testCounts, skipped, sourceName,\n\t\ttests = id( \"qunit-tests\" );\n\n\tif ( !tests ) {\n\t\treturn;\n\t}\n\n\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\n\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\n\tgood = details.passed;\n\tbad = details.failed;\n\n\t// Store result when possible\n\tif ( config.reorder && defined.sessionStorage ) {\n\t\tif ( bad ) {\n\t\t\tsessionStorage.setItem( \"qunit-test-\" + details.module + \"-\" + details.name, bad );\n\t\t} else {\n\t\t\tsessionStorage.removeItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\t}\n\t}\n\n\tif ( bad === 0 ) {\n\n\t\t// Collapse the passing tests\n\t\taddClass( assertList, \"qunit-collapsed\" );\n\t} else if ( bad && config.collapse && !collapseNext ) {\n\n\t\t// Skip collapsing the first failing test\n\t\tcollapseNext = true;\n\t} else {\n\n\t\t// Collapse remaining tests\n\t\taddClass( assertList, \"qunit-collapsed\" );\n\t}\n\n\t// The testItem.firstChild is the test name\n\ttestTitle = testItem.firstChild;\n\n\ttestCounts = bad ?\n\t\t\"<b class='failed'>\" + bad + \"</b>, \" + \"<b class='passed'>\" + good + \"</b>, \" :\n\t\t\"\";\n\n\ttestTitle.innerHTML += \" <b class='counts'>(\" + testCounts +\n\t\tdetails.assertions.length + \")</b>\";\n\n\tif ( details.skipped ) {\n\t\ttestItem.className = \"skipped\";\n\t\tskipped = document.createElement( \"em\" );\n\t\tskipped.className = \"qunit-skipped-label\";\n\t\tskipped.innerHTML = \"skipped\";\n\t\ttestItem.insertBefore( skipped, testTitle );\n\t} else {\n\t\taddEvent( testTitle, \"click\", function() {\n\t\t\ttoggleClass( assertList, \"qunit-collapsed\" );\n\t\t} );\n\n\t\ttestItem.className = bad ? \"fail\" : \"pass\";\n\n\t\ttime = document.createElement( \"span\" );\n\t\ttime.className = \"runtime\";\n\t\ttime.innerHTML = details.runtime + \" ms\";\n\t\ttestItem.insertBefore( time, assertList );\n\t}\n\n\t// Show the source of the test when showing assertions\n\tif ( details.source ) {\n\t\tsourceName = document.createElement( \"p\" );\n\t\tsourceName.innerHTML = \"<strong>Source: </strong>\" + details.source;\n\t\taddClass( sourceName, \"qunit-source\" );\n\t\tif ( bad === 0 ) {\n\t\t\taddClass( sourceName, \"qunit-collapsed\" );\n\t\t}\n\t\taddEvent( testTitle, \"click\", function() {\n\t\t\ttoggleClass( sourceName, \"qunit-collapsed\" );\n\t\t} );\n\t\ttestItem.appendChild( sourceName );\n\t}\n} );\n\n// Avoid readyState issue with phantomjs\n// Ref: #818\nvar notPhantom = ( function( p ) {\n\treturn !( p && p.version && p.version.major > 0 );\n} )( window.phantom );\n\nif ( notPhantom && document.readyState === \"complete\" ) {\n\tQUnit.load();\n} else {\n\taddEvent( window, \"load\", QUnit.load );\n}\n\n/*\n * This file is a modified version of google-diff-match-patch's JavaScript implementation\n * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\n * modifications are licensed as more fully set forth in LICENSE.txt.\n *\n * The original source of google-diff-match-patch is attributable and licensed as follows:\n *\n * Copyright 2006 Google Inc.\n * https://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * More Info:\n *  https://code.google.com/p/google-diff-match-patch/\n *\n * Usage: QUnit.diff(expected, actual)\n *\n */\nQUnit.diff = ( function() {\n\tfunction DiffMatchPatch() {\n\t}\n\n\t//  DIFF FUNCTIONS\n\n\t/**\n\t * The data structure representing a diff is an array of tuples:\n\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t */\n\tvar DIFF_DELETE = -1,\n\t\tDIFF_INSERT = 1,\n\t\tDIFF_EQUAL = 0;\n\n\t/**\n\t * Find the differences between two texts.  Simplifies the problem by stripping\n\t * any common prefix or suffix off the texts before diffing.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {boolean=} optChecklines Optional speedup flag. If present and false,\n\t *     then don't run a line-level diff first to identify the changed areas.\n\t *     Defaults to true, which does a faster, slightly less optimal diff.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.DiffMain = function( text1, text2, optChecklines ) {\n\t\tvar deadline, checklines, commonlength,\n\t\t\tcommonprefix, commonsuffix, diffs;\n\n\t\t// The diff must be complete in up to 1 second.\n\t\tdeadline = ( new Date() ).getTime() + 1000;\n\n\t\t// Check for null inputs.\n\t\tif ( text1 === null || text2 === null ) {\n\t\t\tthrow new Error( \"Null input. (DiffMain)\" );\n\t\t}\n\n\t\t// Check for equality (speedup).\n\t\tif ( text1 === text2 ) {\n\t\t\tif ( text1 ) {\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_EQUAL, text1 ]\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn [];\n\t\t}\n\n\t\tif ( typeof optChecklines === \"undefined\" ) {\n\t\t\toptChecklines = true;\n\t\t}\n\n\t\tchecklines = optChecklines;\n\n\t\t// Trim off common prefix (speedup).\n\t\tcommonlength = this.diffCommonPrefix( text1, text2 );\n\t\tcommonprefix = text1.substring( 0, commonlength );\n\t\ttext1 = text1.substring( commonlength );\n\t\ttext2 = text2.substring( commonlength );\n\n\t\t// Trim off common suffix (speedup).\n\t\tcommonlength = this.diffCommonSuffix( text1, text2 );\n\t\tcommonsuffix = text1.substring( text1.length - commonlength );\n\t\ttext1 = text1.substring( 0, text1.length - commonlength );\n\t\ttext2 = text2.substring( 0, text2.length - commonlength );\n\n\t\t// Compute the diff on the middle block.\n\t\tdiffs = this.diffCompute( text1, text2, checklines, deadline );\n\n\t\t// Restore the prefix and suffix.\n\t\tif ( commonprefix ) {\n\t\t\tdiffs.unshift( [ DIFF_EQUAL, commonprefix ] );\n\t\t}\n\t\tif ( commonsuffix ) {\n\t\t\tdiffs.push( [ DIFF_EQUAL, commonsuffix ] );\n\t\t}\n\t\tthis.diffCleanupMerge( diffs );\n\t\treturn diffs;\n\t};\n\n\t/**\n\t * Reduce the number of edits by eliminating operationally trivial equalities.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupEfficiency = function( diffs ) {\n\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\tpointer, preIns, preDel, postIns, postDel;\n\t\tchanges = false;\n\t\tequalities = []; // Stack of indices where equalities are found.\n\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t/** @type {?string} */\n\t\tlastequality = null;\n\n\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\tpointer = 0; // Index of current position.\n\n\t\t// Is there an insertion operation before the last equality.\n\t\tpreIns = false;\n\n\t\t// Is there a deletion operation before the last equality.\n\t\tpreDel = false;\n\n\t\t// Is there an insertion operation after the last equality.\n\t\tpostIns = false;\n\n\t\t// Is there a deletion operation after the last equality.\n\t\tpostDel = false;\n\t\twhile ( pointer < diffs.length ) {\n\n\t\t\t// Equality found.\n\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) {\n\t\t\t\tif ( diffs[ pointer ][ 1 ].length < 4 && ( postIns || postDel ) ) {\n\n\t\t\t\t\t// Candidate found.\n\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\tpreIns = postIns;\n\t\t\t\t\tpreDel = postDel;\n\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// Not a candidate, and can never become one.\n\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t}\n\t\t\t\tpostIns = postDel = false;\n\n\t\t\t// An insertion or deletion.\n\t\t\t} else {\n\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_DELETE ) {\n\t\t\t\t\tpostDel = true;\n\t\t\t\t} else {\n\t\t\t\t\tpostIns = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Five types to be split:\n\t\t\t\t * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins>X<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins><del>B</del>X<ins>C</ins>\n\t\t\t\t * <ins>A</del>X<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins><del>B</del>X<del>C</del>\n\t\t\t\t */\n\t\t\t\tif ( lastequality && ( ( preIns && preDel && postIns && postDel ) ||\n\t\t\t\t\t\t( ( lastequality.length < 2 ) &&\n\t\t\t\t\t\t( preIns + preDel + postIns + postDel ) === 3 ) ) ) {\n\n\t\t\t\t\t// Duplicate record.\n\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t);\n\n\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\tequalitiesLength--; // Throw away the equality we just deleted;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t\tif ( preIns && preDel ) {\n\n\t\t\t\t\t\t// No changes made which could affect previous entry, keep going.\n\t\t\t\t\t\tpostIns = postDel = true;\n\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tequalitiesLength--; // Throw away the previous equality.\n\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\t\t\t\t\tpostIns = postDel = false;\n\t\t\t\t\t}\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\t};\n\n\t/**\n\t * Convert a diff array into a pretty HTML report.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t * @param {integer} string to be beautified.\n\t * @return {string} HTML representation.\n\t */\n\tDiffMatchPatch.prototype.diffPrettyHtml = function( diffs ) {\n\t\tvar op, data, x,\n\t\t\thtml = [];\n\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\top = diffs[ x ][ 0 ]; // Operation (insert, delete, equal)\n\t\t\tdata = diffs[ x ][ 1 ]; // Text of change.\n\t\t\tswitch ( op ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\thtml[ x ] = \"<ins>\" + escapeText( data ) + \"</ins>\";\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\thtml[ x ] = \"<del>\" + escapeText( data ) + \"</del>\";\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\t\t\t\thtml[ x ] = \"<span>\" + escapeText( data ) + \"</span>\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn html.join( \"\" );\n\t};\n\n\t/**\n\t * Determine the common prefix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the start of each\n\t *     string.\n\t */\n\tDiffMatchPatch.prototype.diffCommonPrefix = function( text1, text2 ) {\n\t\tvar pointermid, pointermax, pointermin, pointerstart;\n\n\t\t// Quick check for common null cases.\n\t\tif ( !text1 || !text2 || text1.charAt( 0 ) !== text2.charAt( 0 ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Binary search.\n\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\tpointermin = 0;\n\t\tpointermax = Math.min( text1.length, text2.length );\n\t\tpointermid = pointermax;\n\t\tpointerstart = 0;\n\t\twhile ( pointermin < pointermid ) {\n\t\t\tif ( text1.substring( pointerstart, pointermid ) ===\n\t\t\t\t\ttext2.substring( pointerstart, pointermid ) ) {\n\t\t\t\tpointermin = pointermid;\n\t\t\t\tpointerstart = pointermin;\n\t\t\t} else {\n\t\t\t\tpointermax = pointermid;\n\t\t\t}\n\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t}\n\t\treturn pointermid;\n\t};\n\n\t/**\n\t * Determine the common suffix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of each string.\n\t */\n\tDiffMatchPatch.prototype.diffCommonSuffix = function( text1, text2 ) {\n\t\tvar pointermid, pointermax, pointermin, pointerend;\n\n\t\t// Quick check for common null cases.\n\t\tif ( !text1 ||\n\t\t\t\t!text2 ||\n\t\t\t\ttext1.charAt( text1.length - 1 ) !== text2.charAt( text2.length - 1 ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Binary search.\n\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\tpointermin = 0;\n\t\tpointermax = Math.min( text1.length, text2.length );\n\t\tpointermid = pointermax;\n\t\tpointerend = 0;\n\t\twhile ( pointermin < pointermid ) {\n\t\t\tif ( text1.substring( text1.length - pointermid, text1.length - pointerend ) ===\n\t\t\t\t\ttext2.substring( text2.length - pointermid, text2.length - pointerend ) ) {\n\t\t\t\tpointermin = pointermid;\n\t\t\t\tpointerend = pointermin;\n\t\t\t} else {\n\t\t\t\tpointermax = pointermid;\n\t\t\t}\n\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t}\n\t\treturn pointermid;\n\t};\n\n\t/**\n\t * Find the differences between two texts.  Assumes that the texts do not\n\t * have any common prefix or suffix.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {boolean} checklines Speedup flag.  If false, then don't run a\n\t *     line-level diff first to identify the changed areas.\n\t *     If true, then run a faster, slightly less optimal diff.\n\t * @param {number} deadline Time when the diff should be complete by.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCompute = function( text1, text2, checklines, deadline ) {\n\t\tvar diffs, longtext, shorttext, i, hm,\n\t\t\ttext1A, text2A, text1B, text2B,\n\t\t\tmidCommon, diffsA, diffsB;\n\n\t\tif ( !text1 ) {\n\n\t\t\t// Just add some text (speedup).\n\t\t\treturn [\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t}\n\n\t\tif ( !text2 ) {\n\n\t\t\t// Just delete some text (speedup).\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ]\n\t\t\t];\n\t\t}\n\n\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\ti = longtext.indexOf( shorttext );\n\t\tif ( i !== -1 ) {\n\n\t\t\t// Shorter text is inside the longer text (speedup).\n\t\t\tdiffs = [\n\t\t\t\t[ DIFF_INSERT, longtext.substring( 0, i ) ],\n\t\t\t\t[ DIFF_EQUAL, shorttext ],\n\t\t\t\t[ DIFF_INSERT, longtext.substring( i + shorttext.length ) ]\n\t\t\t];\n\n\t\t\t// Swap insertions for deletions if diff is reversed.\n\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\tdiffs[ 0 ][ 0 ] = diffs[ 2 ][ 0 ] = DIFF_DELETE;\n\t\t\t}\n\t\t\treturn diffs;\n\t\t}\n\n\t\tif ( shorttext.length === 1 ) {\n\n\t\t\t// Single character string.\n\t\t\t// After the previous speedup, the character can't be an equality.\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t}\n\n\t\t// Check to see if the problem can be split in two.\n\t\thm = this.diffHalfMatch( text1, text2 );\n\t\tif ( hm ) {\n\n\t\t\t// A half-match was found, sort out the return data.\n\t\t\ttext1A = hm[ 0 ];\n\t\t\ttext1B = hm[ 1 ];\n\t\t\ttext2A = hm[ 2 ];\n\t\t\ttext2B = hm[ 3 ];\n\t\t\tmidCommon = hm[ 4 ];\n\n\t\t\t// Send both pairs off for separate processing.\n\t\t\tdiffsA = this.DiffMain( text1A, text2A, checklines, deadline );\n\t\t\tdiffsB = this.DiffMain( text1B, text2B, checklines, deadline );\n\n\t\t\t// Merge the results.\n\t\t\treturn diffsA.concat( [\n\t\t\t\t[ DIFF_EQUAL, midCommon ]\n\t\t\t], diffsB );\n\t\t}\n\n\t\tif ( checklines && text1.length > 100 && text2.length > 100 ) {\n\t\t\treturn this.diffLineMode( text1, text2, deadline );\n\t\t}\n\n\t\treturn this.diffBisect( text1, text2, deadline );\n\t};\n\n\t/**\n\t * Do the two texts share a substring which is at least half the length of the\n\t * longer text?\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t *     text2 and the common middle.  Or null if there was no match.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffHalfMatch = function( text1, text2 ) {\n\t\tvar longtext, shorttext, dmp,\n\t\t\ttext1A, text2B, text2A, text1B, midCommon,\n\t\t\thm1, hm2, hm;\n\n\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\tif ( longtext.length < 4 || shorttext.length * 2 < longtext.length ) {\n\t\t\treturn null; // Pointless.\n\t\t}\n\t\tdmp = this; // 'this' becomes 'window' in a closure.\n\n\t\t/**\n\t\t * Does a substring of shorttext exist within longtext such that the substring\n\t\t * is at least half the length of longtext?\n\t\t * Closure, but does not reference any external variables.\n\t\t * @param {string} longtext Longer string.\n\t\t * @param {string} shorttext Shorter string.\n\t\t * @param {number} i Start index of quarter length substring within longtext.\n\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t\t *     of shorttext and the common middle.  Or null if there was no match.\n\t\t * @private\n\t\t */\n\t\tfunction diffHalfMatchI( longtext, shorttext, i ) {\n\t\t\tvar seed, j, bestCommon, prefixLength, suffixLength,\n\t\t\t\tbestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;\n\n\t\t\t// Start with a 1/4 length substring at position i as a seed.\n\t\t\tseed = longtext.substring( i, i + Math.floor( longtext.length / 4 ) );\n\t\t\tj = -1;\n\t\t\tbestCommon = \"\";\n\t\t\twhile ( ( j = shorttext.indexOf( seed, j + 1 ) ) !== -1 ) {\n\t\t\t\tprefixLength = dmp.diffCommonPrefix( longtext.substring( i ),\n\t\t\t\t\tshorttext.substring( j ) );\n\t\t\t\tsuffixLength = dmp.diffCommonSuffix( longtext.substring( 0, i ),\n\t\t\t\t\tshorttext.substring( 0, j ) );\n\t\t\t\tif ( bestCommon.length < suffixLength + prefixLength ) {\n\t\t\t\t\tbestCommon = shorttext.substring( j - suffixLength, j ) +\n\t\t\t\t\t\tshorttext.substring( j, j + prefixLength );\n\t\t\t\t\tbestLongtextA = longtext.substring( 0, i - suffixLength );\n\t\t\t\t\tbestLongtextB = longtext.substring( i + prefixLength );\n\t\t\t\t\tbestShorttextA = shorttext.substring( 0, j - suffixLength );\n\t\t\t\t\tbestShorttextB = shorttext.substring( j + prefixLength );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( bestCommon.length * 2 >= longtext.length ) {\n\t\t\t\treturn [ bestLongtextA, bestLongtextB,\n\t\t\t\t\tbestShorttextA, bestShorttextB, bestCommon\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// First check if the second quarter is the seed for a half-match.\n\t\thm1 = diffHalfMatchI( longtext, shorttext,\n\t\t\tMath.ceil( longtext.length / 4 ) );\n\n\t\t// Check again based on the third quarter.\n\t\thm2 = diffHalfMatchI( longtext, shorttext,\n\t\t\tMath.ceil( longtext.length / 2 ) );\n\t\tif ( !hm1 && !hm2 ) {\n\t\t\treturn null;\n\t\t} else if ( !hm2 ) {\n\t\t\thm = hm1;\n\t\t} else if ( !hm1 ) {\n\t\t\thm = hm2;\n\t\t} else {\n\n\t\t\t// Both matched.  Select the longest.\n\t\t\thm = hm1[ 4 ].length > hm2[ 4 ].length ? hm1 : hm2;\n\t\t}\n\n\t\t// A half-match was found, sort out the return data.\n\t\ttext1A, text1B, text2A, text2B;\n\t\tif ( text1.length > text2.length ) {\n\t\t\ttext1A = hm[ 0 ];\n\t\t\ttext1B = hm[ 1 ];\n\t\t\ttext2A = hm[ 2 ];\n\t\t\ttext2B = hm[ 3 ];\n\t\t} else {\n\t\t\ttext2A = hm[ 0 ];\n\t\t\ttext2B = hm[ 1 ];\n\t\t\ttext1A = hm[ 2 ];\n\t\t\ttext1B = hm[ 3 ];\n\t\t}\n\t\tmidCommon = hm[ 4 ];\n\t\treturn [ text1A, text1B, text2A, text2B, midCommon ];\n\t};\n\n\t/**\n\t * Do a quick line-level diff on both strings, then rediff the parts for\n\t * greater accuracy.\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} deadline Time when the diff should be complete by.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffLineMode = function( text1, text2, deadline ) {\n\t\tvar a, diffs, linearray, pointer, countInsert,\n\t\t\tcountDelete, textInsert, textDelete, j;\n\n\t\t// Scan the text on a line-by-line basis first.\n\t\ta = this.diffLinesToChars( text1, text2 );\n\t\ttext1 = a.chars1;\n\t\ttext2 = a.chars2;\n\t\tlinearray = a.lineArray;\n\n\t\tdiffs = this.DiffMain( text1, text2, false, deadline );\n\n\t\t// Convert the diff back to original text.\n\t\tthis.diffCharsToLines( diffs, linearray );\n\n\t\t// Eliminate freak matches (e.g. blank lines)\n\t\tthis.diffCleanupSemantic( diffs );\n\n\t\t// Rediff any replacement blocks, this time character-by-character.\n\t\t// Add a dummy entry at the end.\n\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] );\n\t\tpointer = 0;\n\t\tcountDelete = 0;\n\t\tcountInsert = 0;\n\t\ttextDelete = \"\";\n\t\ttextInsert = \"\";\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\tcountInsert++;\n\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\tcountDelete++;\n\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\n\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\tif ( countDelete >= 1 && countInsert >= 1 ) {\n\n\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\tdiffs.splice( pointer - countDelete - countInsert,\n\t\t\t\t\t\tcountDelete + countInsert );\n\t\t\t\t\tpointer = pointer - countDelete - countInsert;\n\t\t\t\t\ta = this.DiffMain( textDelete, textInsert, false, deadline );\n\t\t\t\t\tfor ( j = a.length - 1; j >= 0; j-- ) {\n\t\t\t\t\t\tdiffs.splice( pointer, 0, a[ j ] );\n\t\t\t\t\t}\n\t\t\t\t\tpointer = pointer + a.length;\n\t\t\t\t}\n\t\t\t\tcountInsert = 0;\n\t\t\t\tcountDelete = 0;\n\t\t\t\ttextDelete = \"\";\n\t\t\t\ttextInsert = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\n\t\treturn diffs;\n\t};\n\n\t/**\n\t * Find the 'middle snake' of a diff, split the problem in two\n\t * and return the recursively constructed diff.\n\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} deadline Time at which to bail if not yet complete.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffBisect = function( text1, text2, deadline ) {\n\t\tvar text1Length, text2Length, maxD, vOffset, vLength,\n\t\t\tv1, v2, x, delta, front, k1start, k1end, k2start,\n\t\t\tk2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;\n\n\t\t// Cache the text lengths to prevent multiple calls.\n\t\ttext1Length = text1.length;\n\t\ttext2Length = text2.length;\n\t\tmaxD = Math.ceil( ( text1Length + text2Length ) / 2 );\n\t\tvOffset = maxD;\n\t\tvLength = 2 * maxD;\n\t\tv1 = new Array( vLength );\n\t\tv2 = new Array( vLength );\n\n\t\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t\t// integers and undefined.\n\t\tfor ( x = 0; x < vLength; x++ ) {\n\t\t\tv1[ x ] = -1;\n\t\t\tv2[ x ] = -1;\n\t\t}\n\t\tv1[ vOffset + 1 ] = 0;\n\t\tv2[ vOffset + 1 ] = 0;\n\t\tdelta = text1Length - text2Length;\n\n\t\t// If the total number of characters is odd, then the front path will collide\n\t\t// with the reverse path.\n\t\tfront = ( delta % 2 !== 0 );\n\n\t\t// Offsets for start and end of k loop.\n\t\t// Prevents mapping of space beyond the grid.\n\t\tk1start = 0;\n\t\tk1end = 0;\n\t\tk2start = 0;\n\t\tk2end = 0;\n\t\tfor ( d = 0; d < maxD; d++ ) {\n\n\t\t\t// Bail out if deadline is reached.\n\t\t\tif ( ( new Date() ).getTime() > deadline ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Walk the front path one step.\n\t\t\tfor ( k1 = -d + k1start; k1 <= d - k1end; k1 += 2 ) {\n\t\t\t\tk1Offset = vOffset + k1;\n\t\t\t\tif ( k1 === -d || ( k1 !== d && v1[ k1Offset - 1 ] < v1[ k1Offset + 1 ] ) ) {\n\t\t\t\t\tx1 = v1[ k1Offset + 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tx1 = v1[ k1Offset - 1 ] + 1;\n\t\t\t\t}\n\t\t\t\ty1 = x1 - k1;\n\t\t\t\twhile ( x1 < text1Length && y1 < text2Length &&\n\t\t\t\t\ttext1.charAt( x1 ) === text2.charAt( y1 ) ) {\n\t\t\t\t\tx1++;\n\t\t\t\t\ty1++;\n\t\t\t\t}\n\t\t\t\tv1[ k1Offset ] = x1;\n\t\t\t\tif ( x1 > text1Length ) {\n\n\t\t\t\t\t// Ran off the right of the graph.\n\t\t\t\t\tk1end += 2;\n\t\t\t\t} else if ( y1 > text2Length ) {\n\n\t\t\t\t\t// Ran off the bottom of the graph.\n\t\t\t\t\tk1start += 2;\n\t\t\t\t} else if ( front ) {\n\t\t\t\t\tk2Offset = vOffset + delta - k1;\n\t\t\t\t\tif ( k2Offset >= 0 && k2Offset < vLength && v2[ k2Offset ] !== -1 ) {\n\n\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\tx2 = text1Length - v2[ k2Offset ];\n\t\t\t\t\t\tif ( x1 >= x2 ) {\n\n\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Walk the reverse path one step.\n\t\t\tfor ( k2 = -d + k2start; k2 <= d - k2end; k2 += 2 ) {\n\t\t\t\tk2Offset = vOffset + k2;\n\t\t\t\tif ( k2 === -d || ( k2 !== d && v2[ k2Offset - 1 ] < v2[ k2Offset + 1 ] ) ) {\n\t\t\t\t\tx2 = v2[ k2Offset + 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tx2 = v2[ k2Offset - 1 ] + 1;\n\t\t\t\t}\n\t\t\t\ty2 = x2 - k2;\n\t\t\t\twhile ( x2 < text1Length && y2 < text2Length &&\n\t\t\t\t\ttext1.charAt( text1Length - x2 - 1 ) ===\n\t\t\t\t\ttext2.charAt( text2Length - y2 - 1 ) ) {\n\t\t\t\t\tx2++;\n\t\t\t\t\ty2++;\n\t\t\t\t}\n\t\t\t\tv2[ k2Offset ] = x2;\n\t\t\t\tif ( x2 > text1Length ) {\n\n\t\t\t\t\t// Ran off the left of the graph.\n\t\t\t\t\tk2end += 2;\n\t\t\t\t} else if ( y2 > text2Length ) {\n\n\t\t\t\t\t// Ran off the top of the graph.\n\t\t\t\t\tk2start += 2;\n\t\t\t\t} else if ( !front ) {\n\t\t\t\t\tk1Offset = vOffset + delta - k2;\n\t\t\t\t\tif ( k1Offset >= 0 && k1Offset < vLength && v1[ k1Offset ] !== -1 ) {\n\t\t\t\t\t\tx1 = v1[ k1Offset ];\n\t\t\t\t\t\ty1 = vOffset + x1 - k1Offset;\n\n\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\tx2 = text1Length - x2;\n\t\t\t\t\t\tif ( x1 >= x2 ) {\n\n\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Diff took too long and hit the deadline or\n\t\t// number of diffs equals number of characters, no commonality at all.\n\t\treturn [\n\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t[ DIFF_INSERT, text2 ]\n\t\t];\n\t};\n\n\t/**\n\t * Given the location of the 'middle snake', split the diff in two parts\n\t * and recurse.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} x Index of split point in text1.\n\t * @param {number} y Index of split point in text2.\n\t * @param {number} deadline Time at which to bail if not yet complete.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffBisectSplit = function( text1, text2, x, y, deadline ) {\n\t\tvar text1a, text1b, text2a, text2b, diffs, diffsb;\n\t\ttext1a = text1.substring( 0, x );\n\t\ttext2a = text2.substring( 0, y );\n\t\ttext1b = text1.substring( x );\n\t\ttext2b = text2.substring( y );\n\n\t\t// Compute both diffs serially.\n\t\tdiffs = this.DiffMain( text1a, text2a, false, deadline );\n\t\tdiffsb = this.DiffMain( text1b, text2b, false, deadline );\n\n\t\treturn diffs.concat( diffsb );\n\t};\n\n\t/**\n\t * Reduce the number of edits by eliminating semantically trivial equalities.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupSemantic = function( diffs ) {\n\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\tpointer, lengthInsertions2, lengthDeletions2, lengthInsertions1,\n\t\t\tlengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\n\t\tchanges = false;\n\t\tequalities = []; // Stack of indices where equalities are found.\n\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t/** @type {?string} */\n\t\tlastequality = null;\n\n\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\tpointer = 0; // Index of current position.\n\n\t\t// Number of characters that changed prior to the equality.\n\t\tlengthInsertions1 = 0;\n\t\tlengthDeletions1 = 0;\n\n\t\t// Number of characters that changed after the equality.\n\t\tlengthInsertions2 = 0;\n\t\tlengthDeletions2 = 0;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) { // Equality found.\n\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\tlengthInsertions1 = lengthInsertions2;\n\t\t\t\tlengthDeletions1 = lengthDeletions2;\n\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t} else { // An insertion or deletion.\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\tlengthInsertions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t} else {\n\t\t\t\t\tlengthDeletions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t}\n\n\t\t\t\t// Eliminate an equality that is smaller or equal to the edits on both\n\t\t\t\t// sides of it.\n\t\t\t\tif ( lastequality && ( lastequality.length <=\n\t\t\t\t\t\tMath.max( lengthInsertions1, lengthDeletions1 ) ) &&\n\t\t\t\t\t\t( lastequality.length <= Math.max( lengthInsertions2,\n\t\t\t\t\t\t\tlengthDeletions2 ) ) ) {\n\n\t\t\t\t\t// Duplicate record.\n\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t);\n\n\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\n\t\t\t\t\t// Throw away the equality we just deleted.\n\t\t\t\t\tequalitiesLength--;\n\n\t\t\t\t\t// Throw away the previous equality (it needs to be reevaluated).\n\t\t\t\t\tequalitiesLength--;\n\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\n\t\t\t\t\t// Reset the counters.\n\t\t\t\t\tlengthInsertions1 = 0;\n\t\t\t\t\tlengthDeletions1 = 0;\n\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\t// Normalize the diff.\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\n\t\t// Find any overlaps between deletions and insertions.\n\t\t// e.g: <del>abcxxx</del><ins>xxxdef</ins>\n\t\t//   -> <del>abc</del>xxx<ins>def</ins>\n\t\t// e.g: <del>xxxabc</del><ins>defxxx</ins>\n\t\t//   -> <ins>def</ins>xxx<del>abc</del>\n\t\t// Only extract an overlap if it is as big as the edit ahead or behind it.\n\t\tpointer = 1;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_DELETE &&\n\t\t\t\t\tdiffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\tdeletion = diffs[ pointer - 1 ][ 1 ];\n\t\t\t\tinsertion = diffs[ pointer ][ 1 ];\n\t\t\t\toverlapLength1 = this.diffCommonOverlap( deletion, insertion );\n\t\t\t\toverlapLength2 = this.diffCommonOverlap( insertion, deletion );\n\t\t\t\tif ( overlapLength1 >= overlapLength2 ) {\n\t\t\t\t\tif ( overlapLength1 >= deletion.length / 2 ||\n\t\t\t\t\t\t\toverlapLength1 >= insertion.length / 2 ) {\n\n\t\t\t\t\t\t// Overlap found.  Insert an equality and trim the surrounding edits.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_EQUAL, insertion.substring( 0, overlapLength1 ) ]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\tdeletion.substring( 0, deletion.length - overlapLength1 );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] = insertion.substring( overlapLength1 );\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( overlapLength2 >= deletion.length / 2 ||\n\t\t\t\t\t\t\toverlapLength2 >= insertion.length / 2 ) {\n\n\t\t\t\t\t\t// Reverse overlap found.\n\t\t\t\t\t\t// Insert an equality and swap and trim the surrounding edits.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_EQUAL, deletion.substring( 0, overlapLength2 ) ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\tinsertion.substring( 0, insertion.length - overlapLength2 );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\tdeletion.substring( overlapLength2 );\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t};\n\n\t/**\n\t * Determine if the suffix of one string is the prefix of another.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of the first\n\t *     string and the start of the second string.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCommonOverlap = function( text1, text2 ) {\n\t\tvar text1Length, text2Length, textLength,\n\t\t\tbest, length, pattern, found;\n\n\t\t// Cache the text lengths to prevent multiple calls.\n\t\ttext1Length = text1.length;\n\t\ttext2Length = text2.length;\n\n\t\t// Eliminate the null case.\n\t\tif ( text1Length === 0 || text2Length === 0 ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Truncate the longer string.\n\t\tif ( text1Length > text2Length ) {\n\t\t\ttext1 = text1.substring( text1Length - text2Length );\n\t\t} else if ( text1Length < text2Length ) {\n\t\t\ttext2 = text2.substring( 0, text1Length );\n\t\t}\n\t\ttextLength = Math.min( text1Length, text2Length );\n\n\t\t// Quick check for the worst case.\n\t\tif ( text1 === text2 ) {\n\t\t\treturn textLength;\n\t\t}\n\n\t\t// Start by looking for a single character match\n\t\t// and increase length until no match is found.\n\t\t// Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\t\tbest = 0;\n\t\tlength = 1;\n\t\twhile ( true ) {\n\t\t\tpattern = text1.substring( textLength - length );\n\t\t\tfound = text2.indexOf( pattern );\n\t\t\tif ( found === -1 ) {\n\t\t\t\treturn best;\n\t\t\t}\n\t\t\tlength += found;\n\t\t\tif ( found === 0 || text1.substring( textLength - length ) ===\n\t\t\t\t\ttext2.substring( 0, length ) ) {\n\t\t\t\tbest = length;\n\t\t\t\tlength++;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Split two texts into an array of strings.  Reduce the texts to a string of\n\t * hashes where each Unicode character represents one line.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n\t *     An object containing the encoded text1, the encoded text2 and\n\t *     the array of unique strings.\n\t *     The zeroth element of the array of unique strings is intentionally blank.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffLinesToChars = function( text1, text2 ) {\n\t\tvar lineArray, lineHash, chars1, chars2;\n\t\tlineArray = []; // E.g. lineArray[4] === 'Hello\\n'\n\t\tlineHash = {};  // E.g. lineHash['Hello\\n'] === 4\n\n\t\t// '\\x00' is a valid character, but various debuggers don't like it.\n\t\t// So we'll insert a junk entry to avoid generating a null character.\n\t\tlineArray[ 0 ] = \"\";\n\n\t\t/**\n\t\t * Split a text into an array of strings.  Reduce the texts to a string of\n\t\t * hashes where each Unicode character represents one line.\n\t\t * Modifies linearray and linehash through being a closure.\n\t\t * @param {string} text String to encode.\n\t\t * @return {string} Encoded string.\n\t\t * @private\n\t\t */\n\t\tfunction diffLinesToCharsMunge( text ) {\n\t\t\tvar chars, lineStart, lineEnd, lineArrayLength, line;\n\t\t\tchars = \"\";\n\n\t\t\t// Walk the text, pulling out a substring for each line.\n\t\t\t// text.split('\\n') would would temporarily double our memory footprint.\n\t\t\t// Modifying text would create many large strings to garbage collect.\n\t\t\tlineStart = 0;\n\t\t\tlineEnd = -1;\n\n\t\t\t// Keeping our own length variable is faster than looking it up.\n\t\t\tlineArrayLength = lineArray.length;\n\t\t\twhile ( lineEnd < text.length - 1 ) {\n\t\t\t\tlineEnd = text.indexOf( \"\\n\", lineStart );\n\t\t\t\tif ( lineEnd === -1 ) {\n\t\t\t\t\tlineEnd = text.length - 1;\n\t\t\t\t}\n\t\t\t\tline = text.substring( lineStart, lineEnd + 1 );\n\t\t\t\tlineStart = lineEnd + 1;\n\n\t\t\t\tif ( lineHash.hasOwnProperty ? lineHash.hasOwnProperty( line ) :\n\t\t\t\t\t\t\t( lineHash[ line ] !== undefined ) ) {\n\t\t\t\t\tchars += String.fromCharCode( lineHash[ line ] );\n\t\t\t\t} else {\n\t\t\t\t\tchars += String.fromCharCode( lineArrayLength );\n\t\t\t\t\tlineHash[ line ] = lineArrayLength;\n\t\t\t\t\tlineArray[ lineArrayLength++ ] = line;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn chars;\n\t\t}\n\n\t\tchars1 = diffLinesToCharsMunge( text1 );\n\t\tchars2 = diffLinesToCharsMunge( text2 );\n\t\treturn {\n\t\t\tchars1: chars1,\n\t\t\tchars2: chars2,\n\t\t\tlineArray: lineArray\n\t\t};\n\t};\n\n\t/**\n\t * Rehydrate the text in a diff from a string of line hashes to real lines of\n\t * text.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t * @param {!Array.<string>} lineArray Array of unique strings.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCharsToLines = function( diffs, lineArray ) {\n\t\tvar x, chars, text, y;\n\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\tchars = diffs[ x ][ 1 ];\n\t\t\ttext = [];\n\t\t\tfor ( y = 0; y < chars.length; y++ ) {\n\t\t\t\ttext[ y ] = lineArray[ chars.charCodeAt( y ) ];\n\t\t\t}\n\t\t\tdiffs[ x ][ 1 ] = text.join( \"\" );\n\t\t}\n\t};\n\n\t/**\n\t * Reorder and merge like edit sections.  Merge equalities.\n\t * Any edit section can move as long as it doesn't cross an equality.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupMerge = function( diffs ) {\n\t\tvar pointer, countDelete, countInsert, textInsert, textDelete,\n\t\t\tcommonlength, changes, diffPointer, position;\n\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] ); // Add a dummy entry at the end.\n\t\tpointer = 0;\n\t\tcountDelete = 0;\n\t\tcountInsert = 0;\n\t\ttextDelete = \"\";\n\t\ttextInsert = \"\";\n\t\tcommonlength;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\tcountInsert++;\n\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\tpointer++;\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\tcountDelete++;\n\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\tpointer++;\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\n\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\tif ( countDelete + countInsert > 1 ) {\n\t\t\t\t\tif ( countDelete !== 0 && countInsert !== 0 ) {\n\n\t\t\t\t\t\t// Factor out any common prefixes.\n\t\t\t\t\t\tcommonlength = this.diffCommonPrefix( textInsert, textDelete );\n\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\tif ( ( pointer - countDelete - countInsert ) > 0 &&\n\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 0 ] ===\n\t\t\t\t\t\t\t\t\tDIFF_EQUAL ) {\n\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 1 ] +=\n\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdiffs.splice( 0, 0, [ DIFF_EQUAL,\n\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength )\n\t\t\t\t\t\t\t\t] );\n\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttextInsert = textInsert.substring( commonlength );\n\t\t\t\t\t\t\ttextDelete = textDelete.substring( commonlength );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Factor out any common suffixies.\n\t\t\t\t\t\tcommonlength = this.diffCommonSuffix( textInsert, textDelete );\n\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = textInsert.substring( textInsert.length -\n\t\t\t\t\t\t\t\t\tcommonlength ) + diffs[ pointer ][ 1 ];\n\t\t\t\t\t\t\ttextInsert = textInsert.substring( 0, textInsert.length -\n\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\ttextDelete = textDelete.substring( 0, textDelete.length -\n\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\tif ( countDelete === 0 ) {\n\t\t\t\t\t\tdiffs.splice( pointer - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_INSERT, textInsert ] );\n\t\t\t\t\t} else if ( countInsert === 0 ) {\n\t\t\t\t\t\tdiffs.splice( pointer - countDelete,\n\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_DELETE, textDelete ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer - countDelete - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert,\n\t\t\t\t\t\t\t[ DIFF_DELETE, textDelete ], [ DIFF_INSERT, textInsert ]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tpointer = pointer - countDelete - countInsert +\n\t\t\t\t\t\t( countDelete ? 1 : 0 ) + ( countInsert ? 1 : 0 ) + 1;\n\t\t\t\t} else if ( pointer !== 0 && diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL ) {\n\n\t\t\t\t\t// Merge this equality with the previous one.\n\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer, 1 );\n\t\t\t\t} else {\n\t\t\t\t\tpointer++;\n\t\t\t\t}\n\t\t\t\tcountInsert = 0;\n\t\t\t\tcountDelete = 0;\n\t\t\t\ttextDelete = \"\";\n\t\t\t\ttextInsert = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( diffs[ diffs.length - 1 ][ 1 ] === \"\" ) {\n\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\t}\n\n\t\t// Second pass: look for single edits surrounded on both sides by equalities\n\t\t// which can be shifted sideways to eliminate an equality.\n\t\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t\tchanges = false;\n\t\tpointer = 1;\n\n\t\t// Intentionally ignore the first and last element (don't need checking).\n\t\twhile ( pointer < diffs.length - 1 ) {\n\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL &&\n\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] === DIFF_EQUAL ) {\n\n\t\t\t\tdiffPointer = diffs[ pointer ][ 1 ];\n\t\t\t\tposition = diffPointer.substring(\n\t\t\t\t\tdiffPointer.length - diffs[ pointer - 1 ][ 1 ].length\n\t\t\t\t);\n\n\t\t\t\t// This is a single edit surrounded by equalities.\n\t\t\t\tif ( position === diffs[ pointer - 1 ][ 1 ] ) {\n\n\t\t\t\t\t// Shift the edit over the previous equality.\n\t\t\t\t\tdiffs[ pointer ][ 1 ] = diffs[ pointer - 1 ][ 1 ] +\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( 0, diffs[ pointer ][ 1 ].length -\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ].length );\n\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] + diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer - 1, 1 );\n\t\t\t\t\tchanges = true;\n\t\t\t\t} else if ( diffPointer.substring( 0, diffs[ pointer + 1 ][ 1 ].length ) ===\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] ) {\n\n\t\t\t\t\t// Shift the edit over the next equality.\n\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs[ pointer ][ 1 ] =\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( diffs[ pointer + 1 ][ 1 ].length ) +\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer + 1, 1 );\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\t// If shifts were made, the diff needs reordering and another shift sweep.\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\t};\n\n\treturn function( o, n ) {\n\t\tvar diff, output, text;\n\t\tdiff = new DiffMatchPatch();\n\t\toutput = diff.DiffMain( o, n );\n\t\tdiff.diffCleanupEfficiency( output );\n\t\ttext = diff.diffPrettyHtml( output );\n\n\t\treturn text;\n\t};\n}() );\n\n}() );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/qunitjs/qunit/qunit.js\n// module id = 50\n// module chunks = 1","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/process/browser.js\n// module id = 51\n// module chunks = 1","module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/buildin/module.js\n// module id = 52\n// module chunks = 1","/**\n * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n *\n * https://github.com/twada/qunit-tap\n * version: 1.5.1\n *\n * Copyright (c) 2010-2016 Takuto Wada\n * Dual licensed under the MIT and GPLv2 licenses.\n *   https://raw.github.com/twada/qunit-tap/master/MIT-LICENSE.txt\n *   https://raw.github.com/twada/qunit-tap/master/GPL-LICENSE.txt\n *\n * A part of extend function is:\n *   Copyright 2012 jQuery Foundation and other contributors\n *   Released under the MIT license.\n *   http://jquery.org/license\n */\n(function (root, factory) {\n    'use strict';\n\n    // using returnExports UMD pattern\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.qunitTap = factory();\n    }\n}(this, function () {\n    'use strict';\n\n    var qunitTapVersion = '1.5.1',\n        slice = Array.prototype.slice;\n\n    // borrowed from qunit.js\n    function extend (a, b) {\n        var prop;\n        for (prop in b) {\n            if (b.hasOwnProperty(prop)) {\n                if (typeof b[prop] === 'undefined') {\n                    delete a[prop];\n                } else {\n                    a[prop] = b[prop];\n                }\n            }\n        }\n        return a;\n    }\n\n    function indexOf (ary, element) {\n        var i;\n        for (i = 0; i < ary.length; i += 1) {\n            if (ary[i] === element) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function removeElement (ary, element) {\n        var index = indexOf(ary, element);\n        if (index !== -1) {\n            return ary.splice(index, 1);\n        } else {\n            return [];\n        }\n    }\n\n    function isPlanRequired (conf) {\n        return (typeof conf !== 'undefined' && typeof conf.requireExpects !== 'undefined' && conf.requireExpects);\n    }\n\n    function isPassed (details) {\n        return !!(details.result);\n    }\n\n    function isFailed (details) {\n        return !(isPassed(details));\n    }\n\n    function isAssertOkFailed (details) {\n        return isFailed(details) && typeof details.expected === 'undefined' && typeof details.actual === 'undefined';\n    }\n\n    function escapeLineEndings (str) {\n        return str.replace(/(\\r?\\n)/g, '$&# ');\n    }\n\n    function ltrim (str) {\n        return str.replace(/^\\s+/, '');\n    }\n\n    function noop (obj) {\n        return obj;\n    }\n\n    function render (desc, fieldName, fieldValue, formatter) {\n        desc.push(fieldName + ': ' + formatter(fieldValue));\n    }\n\n    function renderIf (shouldRender, desc, fieldName, fieldValue, formatter) {\n        if (!shouldRender || typeof fieldValue === 'undefined') {\n            return;\n        }\n        render(desc, fieldName, fieldValue, formatter);\n    }\n\n    function formatTestLine (testLine, rest) {\n        if (!rest) {\n            return testLine;\n        }\n        return testLine + ' - ' + escapeLineEndings(rest);\n    }\n\n    var createCallbackAppenderFor = function (qu) {\n        return function (subject, observer, event) {\n            var originalLoggingCallback = subject[event],\n                callback = function () {\n                    // make listener methods (moduleStart,testStart,log, ...) overridable.\n                    observer[event].apply(observer, slice.apply(arguments));\n                };\n            originalLoggingCallback(callback);\n            return callback;\n        };\n    };\n\n\n    /**\n     * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n     * @param qunitObject QUnit object reference.\n     * @param printLikeFunction print-like function for TAP output (assumes line-separator is added by this function for each call).\n     * @param options configuration options to customize default behavior.\n     * @return object to provide QUnit-TAP API and customization subject.\n     */\n    function qunitTap(qunitObject, printLikeFunction, options) {\n        if (!qunitObject) {\n            throw new Error('should pass QUnit object reference. Please check QUnit\\'s \"require\" path if you are using Node.js (or any CommonJS env).');\n        } else if (typeof printLikeFunction !== 'function') {\n            throw new Error('should pass print-like function');\n        }\n\n        var qu = qunitObject,\n            tap = {},\n            deprecateOption = function deprecateOption (optionName, fallback) {\n                // option deprecation and fallback function\n                if (!options || typeof options !== 'object') {\n                    return;\n                }\n                if (typeof options[optionName] === 'undefined') {\n                    return;\n                }\n                printLikeFunction('# WARNING: Option \"' + optionName + '\" is deprecated and will be removed in future version.');\n                fallback(options[optionName]);\n            },\n            targetEvents = [\n                'moduleStart',\n                'testStart',\n                'log',\n                'testDone',\n                'done'\n            ],\n            registeredCallbacks = {},\n            explain = (function () {\n                if (typeof qu.dump !== 'undefined' && typeof qu.dump.parse === 'function') {\n                    return function explain (obj) {\n                        return qu.dump.parse(obj);\n                    };\n                }\n                if (typeof qu.jsDump !== 'undefined' && typeof qu.jsDump.parse === 'function') {\n                    return function explain (obj) {\n                        return qu.jsDump.parse(obj);\n                    };\n                }\n                return noop;\n            })();\n\n        tap.config = extend(\n            {\n                initialCount: 1,\n                showModuleNameOnFailure: true,\n                showTestNameOnFailure: true,\n                showExpectationOnFailure: true,\n                showSourceOnFailure: true\n            },\n            options\n        );\n        deprecateOption('noPlan', function (flag) {\n            printLikeFunction('# Now QUnit-TAP works as with \"noPlan: true\" by default. If you want to delare plan explicitly, please use \"QUnit.config.requireExpects\" option instead.');\n            tap.config.noPlan = flag;\n        });\n        deprecateOption('count', function (count) {\n            tap.config.initialCount = (count + 1);\n        });\n        deprecateOption('showDetailsOnFailure', function (flag) {\n            tap.config.showModuleNameOnFailure = flag;\n            tap.config.showTestNameOnFailure = flag;\n            tap.config.showExpectationOnFailure = flag;\n            tap.config.showSourceOnFailure = flag;\n        });\n        tap.VERSION = qunitTapVersion;\n        tap.puts = printLikeFunction;\n        tap.count = tap.config.initialCount - 1;\n        tap.expectedCount = tap.config.initialCount - 1;\n\n        function isEnabled (configName) {\n            return tap.config[configName];\n        }\n\n        function formatDetails (details) {\n            if (isPassed(details)) {\n                return details.message;\n            }\n            var desc = [];\n            if (details.message) {\n                desc.push(details.message);\n            }\n            if (isEnabled('showExpectationOnFailure') && !(isAssertOkFailed(details))) {\n                render(desc, 'expected', details.expected, explain);\n                render(desc, 'got', details.actual, explain);\n            }\n            renderIf(isEnabled('showTestNameOnFailure'), desc, 'test', details.name, noop);\n            renderIf(isEnabled('showModuleNameOnFailure'), desc, 'module', details.module, noop);\n            renderIf(isEnabled('showSourceOnFailure'), desc, 'source', details.source, ltrim);\n            return desc.join(', ');\n        }\n\n        function printPlanLine (toCount) {\n            tap.puts(tap.config.initialCount + '..' + toCount);\n        }\n\n        function unsubscribeEvent (eventName) {\n            var listeners;\n            if (indexOf(targetEvents, eventName) === -1) {\n                return;\n            }\n            listeners = qu.config[eventName];\n            if (typeof listeners === 'undefined') {\n                return;\n            }\n            removeElement(listeners, registeredCallbacks[eventName]);\n        }\n\n        function unsubscribeEvents (eventNames) {\n            var i;\n            for (i = 0; i < eventNames.length; i += 1) {\n                unsubscribeEvent(eventNames[i]);\n            }\n        }\n\n        tap.explain = explain;\n\n        tap.note = function note (obj) {\n            tap.puts(escapeLineEndings('# ' + obj));\n        };\n\n        tap.diag = function diag (obj) {\n            tap.note(obj);\n            return false;\n        };\n\n        tap.moduleStart = function moduleStart (arg) {\n            var name = (typeof arg === 'string') ? arg : arg.name;\n            tap.note('module: ' + name);\n        };\n\n        tap.testStart = function testStart (arg) {\n            var name = (typeof arg === 'string') ? arg : arg.name;\n            tap.note('test: ' + name);\n        };\n\n        tap.log = function log (details) {\n            var testLine = '';\n            tap.count += 1;\n            if (isFailed(details)) {\n                testLine += 'not ';\n            }\n            testLine += ('ok ' + tap.count);\n            tap.puts(formatTestLine(testLine, formatDetails(details)));\n        };\n\n        tap.testDone = function testDone () {\n            if (isPlanRequired(qu.config)) {\n                tap.expectedCount += qu.config.current.expected;\n            }\n        };\n\n        tap.done = function done () {\n            if (typeof tap.config.noPlan !== 'undefined' && !(tap.config.noPlan)) {\n                // Do nothing until removal of 'noPlan' option.\n            } else if (isPlanRequired(qu.config)) {\n                printPlanLine(tap.expectedCount);\n            } else {\n                printPlanLine(tap.count);\n            }\n        };\n\n        tap.unsubscribe = function unsubscribe () {\n            if (typeof qu.config === 'undefined') {\n                return;\n            }\n            if (arguments.length === 0) {\n                unsubscribeEvents(targetEvents);\n            } else {\n                unsubscribeEvents(slice.apply(arguments));\n            }\n        };\n\n        (function () {\n            var appendCallback = createCallbackAppenderFor(qu),\n                eventName, i, callback;\n            for (i = 0; i < targetEvents.length; i += 1) {\n                eventName = targetEvents[i];\n                callback = appendCallback(qu, tap, eventName);\n                registeredCallbacks[eventName] = callback;\n            }\n        })();\n\n        return tap;\n    }\n\n    qunitTap.qunitTap = function () {\n        throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require(\"qunit-tap\") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');\n    };\n\n    // using substack pattern (export single function)\n    return qunitTap;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/qunit-tap/lib/qunit-tap.js\n// module id = 53\n// module chunks = 1","'use strict';\n\n/* global QUnit, qunitTap */\n\nvar qunit_started = false;\n\n/* Always use explicit start */\nQUnit.config.autostart = false;\n\n/*\n * HACK: phantomjs doesn't handle uncaught exceptions as it should if\n * window.onerror is non-null, even when that handler returns false\n * (expecting that the browser default behavior will occur).\n *\n * So remove the qunit window.onerror handler until the tests actually\n * start, and any errors become part of the test suite results.\n */\nvar qunit_onerror = window.onerror;\nwindow.onerror = null;\nQUnit.begin(function() {\n    window.onerror = function(error, file, line) {\n        var ret = false;\n        if (qunit_onerror)\n            ret = qunit_onerror(error, file, line);\n\n        /*\n         * If a global exception happens during an async test\n         * then that test won't be able to call the start() function\n         * to move to the next test, so call it here.\n         */\n        if (QUnit.config.current && QUnit.config.current.async)\n            QUnit.start();\n\n        return ret;\n    };\n});\n\nQUnit.moduleStart(function() {\n    qunit_started = true;\n});\n\nQUnit.done(function() {\n    console.log(\"phantom-tap-done\");\n    window.onerror = null;\n});\n/*\n * Now initialize qunit-tap\n *\n * When not running under tap-phantom this stuff will just show up in\n * the console. We print out a special canary at the end of the tests\n * so that tap-phantom can know when the testing is done.\n *\n * In addition double check for a test file that doesn't properly call\n * QUnit.start() after its done setting up its tests.\n *\n * We also want to insert the current test name into all tap lines.\n */\nvar tap_regex = /^((not )?ok [0-9]+ (- )?)(.*)$/;\nqunitTap(QUnit, function() {\n    if (arguments.length == 1 && QUnit.config.current) {\n        var match = tap_regex.exec(arguments[0]);\n        if (match) {\n            console.log(match[1] + QUnit.config.current.testName + \": \" + match[4]);\n            return;\n        }\n    }\n    console.log.apply(console, arguments);\n});\n\nwindow.setTimeout(function() {\n    if (!qunit_started) {\n        console.log(\"QUnit not started by test\");\n        console.log(\"phantom-tap-error\");\n    }\n}, 20000);\n\nwindow.tests_included = true;\n\nif (module && module.exports)\n    module.exports = QUnit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/qunit-config.js\n// module id = 54\n// module chunks = 1"],"sourceRoot":""}