{"version":3,"sources":["dist/base1/mustache.js"],"names":["console","warn","Error","fileName","split","reverse","root","factory","exports","mustache","define","amd","Mustache","this","RegExp_test","RegExp","prototype","test","testRegExp","re","string","call","nonSpaceRe","isWhitespace","Object_toString","Object","toString","isArray","Array","object","isFunction","escapeRegExp","replace","entityMap","&","<",">","\"","'","/","escapeHtml","String","s","escapeTags","tags","length","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","parseTemplate","template","tagRes","scanner","Scanner","sections","tokens","spaces","hasTag","nonSpace","stripSpace","pop","start","type","value","chr","token","openSection","eos","pos","scanUntil","i","len","charAt","push","scan","nestTokens","squashTokens","squashedTokens","lastToken","nestedTokens","collector","section","tail","match","index","substring","search","Context","view","parentContext","cache",".","parent","lookup","name","context","indexOf","names","Writer","clearCache","parse","render","partials","renderTokens","originalTemplate","buffer","self","subRender","j","jlen","slice","escape","version","defaultWriter","to_html","send","result"],"mappings":"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","sourcesContent":["/* @preserve: WARNING: This javascript file in the base1 package is deprecated */\nconsole.warn(\"Deprecated: \" +\n             ((new Error).fileName || \"This javascript file\").split(\"/\").reverse()[0] +\n             \" in the Cockpit base1 package is deprecated\");\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false*/\n\n(function (root, factory) {\n  if (typeof exports === \"object\" && exports) {\n    factory(exports); // CommonJS\n  } else {\n    var mustache = {};\n    factory(mustache);\n    if (typeof define === \"function\" && define.amd) {\n      define(mustache); // AMD\n    } else {\n      root.Mustache = mustache; // <script>\n    }\n  }\n}(this, function (mustache) {\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var RegExp_test = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return RegExp_test.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var Object_toString = Object.prototype.toString;\n  var isArray = Array.isArray || function (object) {\n    return Object_toString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, \"\\\\$&\");\n  }\n\n  var entityMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    \"/\": '&#x2F;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n\n  function escapeTags(tags) {\n    if (!isArray(tags) || tags.length !== 2) {\n      throw new Error('Invalid tags: ' + tags);\n    }\n\n    return [\n      new RegExp(escapeRegExp(tags[0]) + \"\\\\s*\"),\n      new RegExp(\"\\\\s*\" + escapeRegExp(tags[1]))\n    ];\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate(template, tags) {\n    tags = tags || mustache.tags;\n    template = template || '';\n\n    if (typeof tags === 'string') {\n      tags = tags.split(spaceRe);\n    }\n\n    var tagRes = escapeTags(tags);\n    var scanner = new Scanner(template);\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) {\n          delete tokens[spaces.pop()];\n        }\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(tagRes[0]);\n      if (value) {\n        for (var i = 0, len = value.length; i < len; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push(['text', chr, start, start + 1]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(tagRes[0])) break;\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(tagRes[1]);\n      } else if (type === '{') {\n        value = scanner.scanUntil(new RegExp('\\\\s*' + escapeRegExp('}' + tags[1])));\n        scanner.scan(curlyRe);\n        scanner.scanUntil(tagRes[1]);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(tagRes[1]);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(tagRes[1])) {\n        throw new Error('Unclosed tag at ' + scanner.pos);\n      }\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection) {\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n        }\n        if (openSection[1] !== value) {\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n        }\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        tagRes = escapeTags(tags = value.split(spaceRe));\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n    if (openSection) {\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n    }\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function () {\n    return this.tail === \"\";\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function (re) {\n    var match = this.tail.match(re);\n\n    if (match && match.index === 0) {\n      var string = match[0];\n      this.tail = this.tail.substring(string.length);\n      this.pos += string.length;\n      return string;\n    }\n\n    return \"\";\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = \"\";\n      break;\n    case 0:\n      match = \"\";\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view == null ? {} : view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function (name) {\n    var value;\n    if (name in this.cache) {\n      value = this.cache[name];\n    } else {\n      var context = this;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n\n          var names = name.split('.'), i = 0;\n          while (value != null && i < names.length) {\n            value = value[names[i++]];\n          }\n        } else {\n          value = context.view[name];\n        }\n\n        if (value != null) break;\n\n        context = context.parent;\n      }\n\n      this.cache[name] = value;\n    }\n\n    if (isFunction(value)) {\n      value = value.call(this.view);\n    }\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null) {\n      tokens = cache[template] = parseTemplate(template, tags);\n    }\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    var self = this;\n    function subRender(template) {\n      return self.render(template, context, partials);\n    }\n\n    var token, value;\n    for (var i = 0, len = tokens.length; i < len; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n      case '#':\n        value = context.lookup(token[1]);\n        if (!value) continue;\n\n        if (isArray(value)) {\n          for (var j = 0, jlen = value.length; j < jlen; ++j) {\n            buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n          }\n        } else if (typeof value === 'object' || typeof value === 'string') {\n          buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n        } else if (isFunction(value)) {\n          if (typeof originalTemplate !== 'string') {\n            throw new Error('Cannot use higher-order sections without the original template');\n          }\n\n          // Extract the portion of the original template that the section contains.\n          value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n          if (value != null) buffer += value;\n        } else {\n          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n        }\n\n        break;\n      case '^':\n        value = context.lookup(token[1]);\n\n        // Use JavaScript's definition of falsy. Include empty arrays.\n        // See https://github.com/janl/mustache.js/issues/186\n        if (!value || (isArray(value) && value.length === 0)) {\n          buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n        }\n\n        break;\n      case '>':\n        if (!partials) continue;\n        value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n        if (value != null) buffer += this.renderTokens(this.parse(value), context, partials, value);\n        break;\n      case '&':\n        value = context.lookup(token[1]);\n        if (value != null) buffer += value;\n        break;\n      case 'name':\n        value = context.lookup(token[1]);\n        if (value != null) buffer += mustache.escape(value);\n        break;\n      case 'text':\n        buffer += token[1];\n        break;\n      }\n    }\n\n    return buffer;\n  };\n\n  mustache.name = \"mustache.js\";\n  mustache.version = \"0.8.1\";\n  mustache.tags = [ \"{{\", \"}}\" ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function (template, view, partials) {\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.\n  mustache.to_html = function (template, view, partials, send) {\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n}));\n"]}