{"version":3,"sources":["dist/base1/mustache.js"],"names":["console","warn","Error","fileName","split","reverse","defineMustache","global","factory","exports","nodeName","define","amd","Mustache","this","mustacheFactory","mustache","objectToString","Object","prototype","toString","isArray","Array","isArrayPolyfill","object","call","isFunction","typeStr","obj","escapeRegExp","string","replace","hasProperty","propName","regExpTest","RegExp","test","testRegExp","re","nonSpaceRe","isWhitespace","entityMap","&","<",">","\"","'","/","`","=","escapeHtml","String","fromEntityMap","s","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","parseTemplate","template","tags","sections","tokens","spaces","hasTag","nonSpace","stripSpace","length","pop","openingTagRe","closingTagRe","closingCurlyRe","compileTags","tagsToCompile","scanner","Scanner","start","type","value","chr","token","openSection","eos","pos","scanUntil","i","valueLength","charAt","push","scan","nestTokens","squashTokens","squashedTokens","lastToken","numTokens","nestedTokens","collector","section","tail","match","index","substring","search","Context","view","parentContext","cache",".","parent","lookup","name","hasOwnProperty","context","names","lookupHit","indexOf","Writer","clearCache","parse","render","partials","renderTokens","originalTemplate","buffer","symbol","undefined","renderSection","renderInverted","renderPartial","unescapedValue","escapedValue","rawValue","self","subRender","j","slice","escape","version","defaultWriter","TypeError","to_html","send","result"],"mappings":"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","sourcesContent":["/* @preserve: WARNING: This javascript file in the base1 package is deprecated */\nconsole.warn(\"Deprecated: \" +\n             ((new Error).fileName || \"This javascript file\").split(\"/\").reverse()[0] +\n             \" in the Cockpit base1 package is deprecated\");\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache (global, factory) {\n  if (typeof exports === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (typeof define === 'function' && define.amd) {\n    define(['exports'], factory); // AMD\n  } else {\n    global.Mustache = {};\n    factory(global.Mustache); // script, wsh, asp\n  }\n}(this, function mustacheFactory (mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n')\n            stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [ type, value, start, scanner.pos ];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit)\n          break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null)\n      tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render (template, view, partials) {\n    var tokens = this.parse(template);\n    var context = (view instanceof Context) ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null)\n      return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.2';\n  mustache.tags = [ '{{', '}}' ];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render (template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html (template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n}));\n"]}