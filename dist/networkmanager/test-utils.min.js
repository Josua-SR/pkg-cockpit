!function(t) {
    function e(r) {
        if (n[r]) return n[r].exports;
        var i = n[r] = {
            exports: {},
            id: r,
            loaded: !1
        };
        return t[r].call(i.exports, i, i.exports, e), i.loaded = !0, i.exports;
    }
    var n = {};
    return e.m = t, e.c = n, e.p = "", e(0);
}({
    0: function(t, e, n) {
        "use strict";
        function r(t, e, n) {
            t.expect(n.length), n.forEach(function(n) {
                t.throws(function() {
                    e(n);
                });
            });
        }
        var i = n(905), o = n(2), s = n(919);
        s.test("ip_prefix_from_text", function(t) {
            var e = [ [ "0", 0 ], [ "12", 12 ], [ " 12  ", 12 ] ];
            t.expect(e.length), e.forEach(function(e) {
                t.strictEqual(i.ip_prefix_from_text(e[0]), e[1]);
            });
        }), s.test("ip_prefix_from_text invalids", function(t) {
            var e = [ "", "-1", "foo", "1foo", "1.5", "1 2 3" ];
            r(t, i.ip_prefix_from_text, e);
        }), s.test("ip_metric_from_text", function(t) {
            var e = [ [ "", 0 ], [ "0", 0 ], [ "12", 12 ], [ " 12  ", 12 ] ];
            t.expect(e.length), e.forEach(function(e) {
                t.strictEqual(i.ip_metric_from_text(e[0]), e[1]);
            });
        }), s.test("ip_metric_from_text invalids", function(t) {
            var e = [ "-1", "foo", "1foo", "1.5", "1 2 3" ];
            r(t, i.ip_metric_from_text, e);
        }), s.test("ip4_to/from_text be", function(t) {
            var e = [ [ "0.0.0.0", 0 ], [ "255.255.255.255", 4294967295 ], [ "1.2.3.4", 16909060 ], [ " 1.2.3.4 ", 16909060 ], [ " 1 . 2 . 3. 4 ", 16909060 ] ];
            t.expect(2 * e.length), i.set_byteorder("be"), e.forEach(function(e) {
                t.strictEqual(i.ip4_to_text(e[1]), e[0].replace(/ /g, "")), t.strictEqual(i.ip4_from_text(e[0]), e[1]);
            });
        }), s.test("ip4_to/from_text le", function(t) {
            var e = [ [ "0.0.0.0", 0 ], [ "255.255.255.255", 4294967295 ], [ "1.2.3.4", 67305985 ], [ " 1.2.3.4 ", 67305985 ], [ " 1 . 2 . 3. 4 ", 67305985 ] ];
            t.expect(2 * e.length), i.set_byteorder("le"), e.forEach(function(e) {
                t.strictEqual(i.ip4_to_text(e[1]), e[0].replace(/ /g, "")), t.strictEqual(i.ip4_from_text(e[0]), e[1]);
            });
        }), s.test("ip4_from_text invalids", function(t) {
            var e = [ "", "0", "0.0", "0.0.0", "0.0.0.0.0", "-1.2.3.4", "foo", "1.foo.3.4", "1foo.2.3.4", "1.2.3.400", "1,2,3,4", "1 1.2.3 3.4" ];
            r(t, i.ip4_from_text, e);
        }), s.test("ip4_to_text zero", function(t) {
            i.set_byteorder("be"), t.strictEqual(i.ip4_to_text(0, !0), "");
        }), s.test("ip4_from_text empty", function(t) {
            i.set_byteorder("be"), t.strictEqual(i.ip4_from_text("", !0), 0);
        }), s.test("ip4_prefix_from_text", function(t) {
            var e = [ "0.0.0.0", " 128.0.0.0", "192.0.0.0 ", "224. 0. 0.0", "240. 0.0 .0", "248.0.0.0", "252. 0.0.0", "254.0.0.0", "255.0.0.0", "255.128.0.0", "255.192.0.0", "255.224.0.0", "255.240.0.0", "255.248.0.0", "255.252.0.0", "255.254.0.0", "255.255.0.0", "255.255.128.0", "255.255.192.0", "255.255.224.0", "255.255.240.0", "255.255.248.0", "255.255.252.0", "255.255.254.0", "255.255.255.0", "255.255.255.128", "255.255.255.192", "255.255.255.224", "255.255.255.240", "255.255.255.248", "255.255.255.252", "255.255.255.254", "255.255.255.255" ];
            t.expect(e.length), e.forEach(function(e, n) {
                t.strictEqual(i.ip4_prefix_from_text(e), n);
            });
        }), s.test("ip4_prefix_from_text invalids", function(t) {
            var e = [ "", "-1", "foo", "1foo", "1.5", "0.0", "0.0.0", "0.0.0.0.0", "1.2.3.4", "255.255.255.8", "255.192.0.10" ];
            r(t, i.ip4_prefix_from_text, e);
        }), s.test("ip6_to/from_text", function(t) {
            var e = [ [ [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], "0:0:0:0:0:0:0:0" ], [ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ], "1:203:405:607:809:a0b:c0d:e0f" ], [ [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 ], " 1: 203 :  405: 607: 809:a0b :c0d:e0f" ] ];
            t.expect(2 * e.length), e.forEach(function(e) {
                t.strictEqual(i.ip6_to_text(o.base64_encode(e[0])), e[1].replace(/ /g, "")), t.deepEqual(o.base64_decode(i.ip6_from_text(e[1])), e[0]);
            });
        }), s.test("ip6_from_text abbrevs", function(t) {
            var e = [ [ "::", [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ], [ "::1", [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ] ], [ "1::", [ 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ], [ "1:2:3::2:1", [ 0, 1, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1 ] ], [ "2001::1", [ 32, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 ] ] ];
            e.forEach(function(e) {
                t.deepEqual(o.base64_decode(i.ip6_from_text(e[0])), e[1]);
            });
        }), s.test("ip6_from_text invalids", function(t) {
            var e = [ "", "0", "0:0", "0:0:0", "0:0:0:0", "0:0:0:0:0", "0:0:0:0:0:0", "0:0:0:0:0:0:0", "0:0:0:0:0:0:0:0:0", "foo", "1:2:3:four:5:6:7:8", "1:2:3:-4:5:6:7:8", "1:2:3:4.0:5:6:7:8", "1:2:3:4foo:5:6:7:8", "1:2:3:10000:5:6:7:8", "1::4::8", "::8::", "1:2:3:4 4:5:6:7:8" ];
            r(t, i.ip6_from_text, e);
        }), s.test("ip6_to_text zero", function(t) {
            var e = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
            t.strictEqual(i.ip6_to_text(o.base64_encode(e), !0), "");
        }), s.test("ip6_from_text empty", function(t) {
            var e = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
            t.deepEqual(o.base64_decode(i.ip6_from_text("", !0)), e);
        }), s.start();
    },
    2: function(t, e) {
        t.exports = cockpit;
    },
    290: function(t, e) {
        t.exports = function(t) {
            return t.webpackPolyfill || (t.deprecate = function() {}, t.paths = [], t.children = [], 
            t.webpackPolyfill = 1), t;
        };
    },
    431: function(t, e) {
        function n() {
            throw new Error("setTimeout has not been defined");
        }
        function r() {
            throw new Error("clearTimeout has not been defined");
        }
        function i(t) {
            if (c === setTimeout) return setTimeout(t, 0);
            if ((c === n || !c) && setTimeout) return c = setTimeout, setTimeout(t, 0);
            try {
                return c(t, 0);
            } catch (e) {
                try {
                    return c.call(null, t, 0);
                } catch (e) {
                    return c.call(this, t, 0);
                }
            }
        }
        function o(t) {
            if (f === clearTimeout) return clearTimeout(t);
            if ((f === r || !f) && clearTimeout) return f = clearTimeout, clearTimeout(t);
            try {
                return f(t);
            } catch (e) {
                try {
                    return f.call(null, t);
                } catch (e) {
                    return f.call(this, t);
                }
            }
        }
        function s() {
            m && h && (m = !1, h.length ? p = h.concat(p) : g = -1, p.length && u());
        }
        function u() {
            if (!m) {
                var t = i(s);
                m = !0;
                for (var e = p.length; e; ) {
                    for (h = p, p = []; ++g < e; ) h && h[g].run();
                    g = -1, e = p.length;
                }
                h = null, m = !1, o(t);
            }
        }
        function a(t, e) {
            this.fun = t, this.array = e;
        }
        function l() {}
        var c, f, d = t.exports = {};
        !function() {
            try {
                c = "function" == typeof setTimeout ? setTimeout : n;
            } catch (t) {
                c = n;
            }
            try {
                f = "function" == typeof clearTimeout ? clearTimeout : r;
            } catch (t) {
                f = r;
            }
        }();
        var h, p = [], m = !1, g = -1;
        d.nextTick = function(t) {
            var e = new Array(arguments.length - 1);
            if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) e[n - 1] = arguments[n];
            p.push(new a(t, e)), 1 !== p.length || m || i(u);
        }, a.prototype.run = function() {
            this.fun.apply(null, this.array);
        }, d.title = "browser", d.browser = !0, d.env = {}, d.argv = [], d.version = "", 
        d.versions = {}, d.on = l, d.addListener = l, d.once = l, d.off = l, d.removeListener = l, 
        d.removeAllListeners = l, d.emit = l, d.prependListener = l, d.prependOnceListener = l, 
        d.listeners = function(t) {
            return [];
        }, d.binding = function(t) {
            throw new Error("process.binding is not supported");
        }, d.cwd = function() {
            return "/";
        }, d.chdir = function(t) {
            throw new Error("process.chdir is not supported");
        }, d.umask = function() {
            return 0;
        };
    },
    905: function(t, e, n) {
        "use strict";
        !function() {
            function e(t) {
                p = t;
            }
            function r(t) {
                return t.toString();
            }
            function i(t) {
                if (/^[0-9]+$/.test(t.trim())) return parseInt(t, 10);
                throw m.format(g("Invalid prefix $0"), t);
            }
            function o(t) {
                return t.toString();
            }
            function s(t) {
                if ("" === t) return 0;
                if (/^[0-9]+$/.test(t.trim())) return parseInt(t, 10);
                throw m.format(g("Invalid metric $0"), t);
            }
            function u(t) {
                return t.toString(10);
            }
            function a(t) {
                var e, n = [];
                if ("be" == p) for (e = 3; e >= 0; e--) n[e] = 255 & t, t >>>= 8; else for (e = 0; e < 4; e++) n[e] = 255 & t, 
                t >>>= 8;
                return n;
            }
            function l(t, e) {
                return 0 === t && e ? "" : a(t).map(u).join(".");
            }
            function c(t, e) {
                function n() {
                    throw m.format(g("Invalid address $0"), t);
                }
                function r(t) {
                    (isNaN(t) || t < 0 || t > 255) && n(), u = 256 * u + t;
                }
                if ("" === t && e) return 0;
                var i = t.split(".");
                4 != i.length && n();
                var o, s = i.map(function(t) {
                    return /^[0-9]+$/.test(t.trim()) ? parseInt(t, 10) : void n();
                }), u = 0;
                if ("be" == p) for (o = 0; o < 4; o++) r(s[o]); else for (o = 3; o >= 0; o--) r(s[o]);
                return u;
            }
            function f(t) {
                function e() {
                    throw m.format(g("Invalid prefix or netmask $0"), t);
                }
                if (/^[0-9]+$/.test(t.trim())) return parseInt(t, 10);
                var n = t.split(".");
                4 != n.length && e();
                var r, i = 0;
                for (r = 0; r < 4; r++) {
                    var o = v[n[r].trim()];
                    if (void 0 !== o) {
                        if (i += o, o < 8) break;
                    } else e();
                }
                for (r += 1; r < 4; r++) /^0+$/.test(n[r].trim()) === !1 && e();
                return i;
            }
            function d(t, e) {
                for (var n = [], r = m.base64_decode(t), i = 0; i < 8; i++) n[i] = ((r[2 * i] << 8) + r[2 * i + 1]).toString(16);
                var o = n.join(":");
                return "0:0:0:0:0:0:0:0" == o && e ? "" : o;
            }
            function h(t, e) {
                function n() {
                    throw m.format(g("Invalid address $0"), t);
                }
                if ("" === t && e) return m.base64_encode([ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]);
                var r = t.split(":");
                (r.length < 1 || r.length > 8) && n(), "" === r[0] && (r[0] = "0"), "" === r[r.length - 1] && (r[r.length - 1] = "0");
                var i, o, s, u = [], a = !1;
                for (o = 0, s = 0; o < r.length; o++, s++) if ("" === r[o]) for (a && n(), a = !0; s < o + (8 - r.length); ) u[2 * s] = u[2 * s + 1] = 0, 
                s++; else /^[0-9a-fA-F]+$/.test(r[o].trim()) || n(), i = parseInt(r[o], 16), (isNaN(i) || i < 0 || i > 65535) && n(), 
                u[2 * s] = i >> 8, u[2 * s + 1] = 255 & i;
                return 8 != s && n(), m.base64_encode(u);
            }
            var p, m = n(2), g = m.gettext, v = {
                "255": 8,
                "254": 7,
                "252": 6,
                "248": 5,
                "240": 4,
                "224": 3,
                "192": 2,
                "128": 1,
                "0": 0
            };
            t.exports = {
                set_byteorder: e,
                ip_prefix_to_text: r,
                ip_prefix_from_text: i,
                ip_metric_to_text: o,
                ip_metric_from_text: s,
                ip4_to_text: l,
                ip4_from_text: c,
                ip4_prefix_from_text: f,
                ip6_to_text: d,
                ip6_from_text: h
            };
        }();
    },
    919: function(t, e, n) {
        "use strict";
        !function() {
            window.QUnit = n(920), window.qunitTap = n(921), n(922), n(923), t.exports = window.QUnit;
        }();
    },
    920: function(t, e, n) {
        var r;
        (function(t, i, o) {
            /*!
	 * QUnit 2.8.0
	 * https://qunitjs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2018-11-02T16:17Z
	 */
            !function(s) {
                "use strict";
                function u(t) {
                    return function() {
                        Gt && Gt[t].apply(Gt, arguments);
                    };
                }
                function a() {
                    return $t && "undefined" != typeof $t.performance && "function" == typeof $t.performance.mark && "function" == typeof $t.performance.measure;
                }
                function l(t, e, n) {
                    try {
                        ue.measure(t, e, n);
                    } catch (t) {
                        Xt.warn("performance.measure could not be executed because of ", t.message);
                    }
                }
                function c(t, e) {
                    var n, r, i = t.slice();
                    for (n = 0; n < i.length; n++) for (r = 0; r < e.length; r++) if (i[n] === e[r]) {
                        i.splice(n, 1), n--;
                        break;
                    }
                    return i;
                }
                function f(t, e) {
                    return e.indexOf(t) !== -1;
                }
                function d(t) {
                    var e, n, r = m("array", t) ? [] : {};
                    for (e in t) ie.call(t, e) && (n = t[e], r[e] = n === Object(n) ? d(n) : n);
                    return r;
                }
                function h(t, e, n) {
                    for (var r in e) ie.call(e, r) && (void 0 === e[r] ? delete t[r] : n && "undefined" != typeof t[r] || (t[r] = e[r]));
                    return t;
                }
                function p(t) {
                    if ("undefined" == typeof t) return "undefined";
                    if (null === t) return "null";
                    var e = re.call(t).match(/^\[object\s(.*)\]$/), n = e && e[1];
                    switch (n) {
                      case "Number":
                        return isNaN(t) ? "nan" : "number";

                      case "String":
                      case "Boolean":
                      case "Array":
                      case "Set":
                      case "Map":
                      case "Date":
                      case "RegExp":
                      case "Function":
                      case "Symbol":
                        return n.toLowerCase();

                      default:
                        return "undefined" == typeof t ? "undefined" : Zt(t);
                    }
                }
                function m(t, e) {
                    return p(e) === t;
                }
                function g(t, e) {
                    for (var n = t + "" + e, r = 0, i = 0; i < n.length; i++) r = (r << 5) - r + n.charCodeAt(i), 
                    r |= 0;
                    var o = (4294967296 + r).toString(16);
                    return o.length < 8 && (o = "0000000" + o), o.slice(-8);
                }
                function v(t, e, n) {
                    var r = ge.length ? ge.slice(-1)[0] : null, i = null !== r ? [ r.name, t ].join(" > ") : t, o = r ? r.suiteReport : Je, s = null !== r && r.skip || n.skip, u = null !== r && r.todo || n.todo, a = {
                        name: i,
                        parentModule: r,
                        tests: [],
                        moduleId: g(i),
                        testsRun: 0,
                        unskippedTestsRun: 0,
                        childModules: [],
                        suiteReport: new pe(t, o),
                        skip: s,
                        todo: !s && u
                    }, l = {};
                    return r && (r.childModules.push(a), h(l, r.testEnvironment)), h(l, e), a.testEnvironment = l, 
                    fe.modules.push(a), a;
                }
                function y(t, e, n) {
                    function r(t, e, n) {
                        var r = e[n];
                        t[n] = "function" == typeof r ? [ r ] : [], delete e[n];
                    }
                    function i(t, e) {
                        return function(n) {
                            t.hooks[e].push(n);
                        };
                    }
                    var o = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
                    "function" === p(e) && (n = e, e = void 0);
                    var s = v(t, e, o), u = s.testEnvironment, a = s.hooks = {};
                    r(a, u, "before"), r(a, u, "beforeEach"), r(a, u, "afterEach"), r(a, u, "after");
                    var l = {
                        before: i(s, "before"),
                        beforeEach: i(s, "beforeEach"),
                        afterEach: i(s, "afterEach"),
                        after: i(s, "after")
                    }, c = fe.currentModule;
                    "function" === p(n) && (ge.push(s), fe.currentModule = s, n.call(s.testEnvironment, l), 
                    ge.pop(), s = s.parentModule || c), fe.currentModule = s;
                }
                function b(t, e, n) {
                    me || y(t, e, n);
                }
                function w(t, e) {
                    if ("string" !== p(t)) throw new TypeError("eventName must be a string when emitting an event");
                    for (var n = ve[t], r = n ? [].concat(ne(n)) : [], i = 0; i < r.length; i++) r[i](e);
                }
                function x(t, e) {
                    if ("string" !== p(t)) throw new TypeError("eventName must be a string when registering a listener");
                    if (!f(t, ye)) {
                        var n = ye.join(", ");
                        throw new Error('"' + t + '" is not a valid event; must be one of: ' + n + ".");
                    }
                    if ("function" !== p(e)) throw new TypeError("callback must be a function when registering a listener");
                    ve[t] || (ve[t] = []), f(e, ve[t]) || ve[t].push(e);
                }
                function k(t) {
                    var e = "undefined" == typeof t ? "undefined" : Zt(t);
                    return null !== t && ("object" === e || "function" === e);
                }
                function _(t) {
                    return "function" == typeof t;
                }
                function E(t) {
                    _e = t;
                }
                function T(t) {
                    Ee = t;
                }
                function q() {
                    return function() {
                        return t.nextTick(j);
                    };
                }
                function C() {
                    return "undefined" != typeof ke ? function() {
                        ke(j);
                    } : M();
                }
                function N() {
                    var t = 0, e = new Ce(j), n = document.createTextNode("");
                    return e.observe(n, {
                        characterData: !0
                    }), function() {
                        n.data = t = ++t % 2;
                    };
                }
                function S() {
                    var t = new MessageChannel();
                    return t.port1.onmessage = j, function() {
                        return t.port2.postMessage(0);
                    };
                }
                function M() {
                    var t = setTimeout;
                    return function() {
                        return t(j, 1);
                    };
                }
                function j() {
                    for (var t = 0; t < xe; t += 2) {
                        var e = Me[t], n = Me[t + 1];
                        e(n), Me[t] = void 0, Me[t + 1] = void 0;
                    }
                    xe = 0;
                }
                function A() {
                    try {
                        var t = Function("return this")().require("vertx");
                        return ke = t.runOnLoop || t.runOnContext, C();
                    } catch (t) {
                        return M();
                    }
                }
                function I(t, e) {
                    var n = this, r = new this.constructor(O);
                    void 0 === r[Ae] && Z(r);
                    var i = n._state;
                    if (i) {
                        var o = arguments[i - 1];
                        Ee(function() {
                            return J(i, r, o, n._result);
                        });
                    } else Y(n, r, t, e);
                    return r;
                }
                function R(t) {
                    var e = this;
                    if (t && "object" === ("undefined" == typeof t ? "undefined" : Zt(t)) && t.constructor === e) return t;
                    var n = new e(O);
                    return B(n, t), n;
                }
                function O() {}
                function L() {
                    return new TypeError("You cannot resolve a promise with itself");
                }
                function U() {
                    return new TypeError("A promises callback cannot return that same promise.");
                }
                function D(t) {
                    try {
                        return t.then;
                    } catch (t) {
                        return Le.error = t, Le;
                    }
                }
                function F(t, e, n, r) {
                    try {
                        t.call(e, n, r);
                    } catch (t) {
                        return t;
                    }
                }
                function P(t, e, n) {
                    Ee(function(t) {
                        var r = !1, i = F(n, e, function(n) {
                            r || (r = !0, e !== n ? B(t, n) : z(t, n));
                        }, function(e) {
                            r || (r = !0, G(t, e));
                        }, "Settle: " + (t._label || " unknown promise"));
                        !r && i && (r = !0, G(t, i));
                    }, t);
                }
                function H(t, e) {
                    e._state === Re ? z(t, e._result) : e._state === Oe ? G(t, e._result) : Y(e, void 0, function(e) {
                        return B(t, e);
                    }, function(e) {
                        return G(t, e);
                    });
                }
                function Q(t, e, n) {
                    e.constructor === t.constructor && n === I && e.constructor.resolve === R ? H(t, e) : n === Le ? (G(t, Le.error), 
                    Le.error = null) : void 0 === n ? z(t, e) : _(n) ? P(t, e, n) : z(t, e);
                }
                function B(t, e) {
                    t === e ? G(t, L()) : k(e) ? Q(t, e, D(e)) : z(t, e);
                }
                function $(t) {
                    t._onerror && t._onerror(t._result), W(t);
                }
                function z(t, e) {
                    t._state === Ie && (t._result = e, t._state = Re, 0 !== t._subscribers.length && Ee(W, t));
                }
                function G(t, e) {
                    t._state === Ie && (t._state = Oe, t._result = e, Ee($, t));
                }
                function Y(t, e, n, r) {
                    var i = t._subscribers, o = i.length;
                    t._onerror = null, i[o] = e, i[o + Re] = n, i[o + Oe] = r, 0 === o && t._state && Ee(W, t);
                }
                function W(t) {
                    var e = t._subscribers, n = t._state;
                    if (0 !== e.length) {
                        for (var r = void 0, i = void 0, o = t._result, s = 0; s < e.length; s += 3) r = e[s], 
                        i = e[s + n], r ? J(n, r, i, o) : i(o);
                        t._subscribers.length = 0;
                    }
                }
                function V(t, e) {
                    try {
                        return t(e);
                    } catch (t) {
                        return Le.error = t, Le;
                    }
                }
                function J(t, e, n, r) {
                    var i = _(n), o = void 0, s = void 0, u = void 0, a = void 0;
                    if (i) {
                        if (o = V(n, r), o === Le ? (a = !0, s = o.error, o.error = null) : u = !0, e === o) return void G(e, U());
                    } else o = r, u = !0;
                    e._state !== Ie || (i && u ? B(e, o) : a ? G(e, s) : t === Re ? z(e, o) : t === Oe && G(e, o));
                }
                function K(t, e) {
                    try {
                        e(function(e) {
                            B(t, e);
                        }, function(e) {
                            G(t, e);
                        });
                    } catch (e) {
                        G(t, e);
                    }
                }
                function X() {
                    return Ue++;
                }
                function Z(t) {
                    t[Ae] = Ue++, t._state = void 0, t._result = void 0, t._subscribers = [];
                }
                function tt() {
                    return new Error("Array Methods must be provided an Array");
                }
                function et(t) {
                    return new De(this, t).promise;
                }
                function nt(t) {
                    var e = this;
                    return new e(we(t) ? function(n, r) {
                        for (var i = t.length, o = 0; o < i; o++) e.resolve(t[o]).then(n, r);
                    } : function(t, e) {
                        return e(new TypeError("You must pass an array to race."));
                    });
                }
                function rt(t) {
                    var e = this, n = new e(O);
                    return G(n, t), n;
                }
                function it() {
                    throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
                }
                function ot() {
                    throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
                }
                function st() {
                    var t = void 0;
                    if ("undefined" != typeof i) t = i; else if ("undefined" != typeof self) t = self; else try {
                        t = Function("return this")();
                    } catch (t) {
                        throw new Error("polyfill failed because global object is unavailable in this environment");
                    }
                    var e = t.Promise;
                    if (e) {
                        var n = null;
                        try {
                            n = Object.prototype.toString.call(e.resolve());
                        } catch (t) {}
                        if ("[object Promise]" === n && !e.cast) return;
                    }
                    t.Promise = Fe;
                }
                function ut(t) {
                    function e(t) {
                        var e = function(e) {
                            if ("function" !== p(e)) throw new Error("QUnit logging methods require a callback function as their first parameters.");
                            fe.callbacks[t].push(e);
                        };
                        return e;
                    }
                    var n, r, i, o = [ "begin", "done", "log", "testStart", "testDone", "moduleStart", "moduleDone" ];
                    for (n = 0, r = o.length; n < r; n++) i = o[n], "undefined" === p(fe.callbacks[i]) && (fe.callbacks[i] = []), 
                    t[i] = e(i);
                }
                function at(t, e) {
                    var n = fe.callbacks[t];
                    return "log" === t ? void n.map(function(t) {
                        return t(e);
                    }) : n.reduce(function(t, n) {
                        return t.then(function() {
                            return Pe.resolve(n(e));
                        });
                    }, Pe.resolve([]));
                }
                function lt(t, e) {
                    e = void 0 === e ? 4 : e;
                    var n, r, i;
                    if (t && t.stack) {
                        if (n = t.stack.split("\n"), /^error$/i.test(n[0]) && n.shift(), He) {
                            for (r = [], i = e; i < n.length && n[i].indexOf(He) === -1; i++) r.push(n[i]);
                            if (r.length) return r.join("\n");
                        }
                        return n[e];
                    }
                }
                function ct(t) {
                    var e = new Error();
                    if (!e.stack) try {
                        throw e;
                    } catch (t) {
                        e = t;
                    }
                    return lt(e, t);
                }
                function ft() {
                    dt(), $e.length || fe.blocking || fe.current || pt();
                }
                function dt() {
                    var t = oe();
                    fe.depth = (fe.depth || 0) + 1, ht(t), fe.depth--;
                }
                function ht(t) {
                    if ($e.length && !fe.blocking) {
                        var e = oe() - t;
                        if (!le.setTimeout || fe.updateRate <= 0 || e < fe.updateRate) {
                            var n = $e.shift();
                            Pe.resolve(n()).then(function() {
                                $e.length ? ht(t) : ft();
                            });
                        } else Yt(ft);
                    }
                }
                function pt() {
                    if (!fe.blocking && !fe.queue.length && 0 === fe.depth) return void bt();
                    var t = fe.queue.shift();
                    mt(t()), Qe > 0 && Qe--, ft();
                }
                function mt(t) {
                    $e.push.apply($e, ne(t));
                }
                function gt() {
                    return $e.length;
                }
                function vt(t, e, n) {
                    if (e) fe.queue.splice(Qe++, 0, t); else if (n) {
                        Be || (Be = yt(n));
                        var r = Math.floor(Be() * (fe.queue.length - Qe + 1));
                        fe.queue.splice(Qe + r, 0, t);
                    } else fe.queue.push(t);
                }
                function yt(t) {
                    var e = parseInt(g(t), 16) || -1;
                    return function() {
                        return e ^= e << 13, e ^= e >>> 17, e ^= e << 5, e < 0 && (e += 4294967296), e / 4294967296;
                    };
                }
                function bt() {
                    var t = fe.storage;
                    ze.finished = !0;
                    var e = oe() - fe.started, n = fe.stats.all - fe.stats.bad;
                    if (0 === fe.stats.all) {
                        if (fe.filter && fe.filter.length) throw new Error('No tests matched the filter "' + fe.filter + '".');
                        if (fe.module && fe.module.length) throw new Error('No tests matched the module "' + fe.module + '".');
                        if (fe.moduleId && fe.moduleId.length) throw new Error('No tests matched the moduleId "' + fe.moduleId + '".');
                        if (fe.testId && fe.testId.length) throw new Error('No tests matched the testId "' + fe.testId + '".');
                        throw new Error("No tests were run.");
                    }
                    w("runEnd", Je.end(!0)), at("done", {
                        passed: n,
                        failed: fe.stats.bad,
                        total: fe.stats.all,
                        runtime: e
                    }).then(function() {
                        if (t && 0 === fe.stats.bad) for (var e = t.length - 1; e >= 0; e--) {
                            var n = t.key(e);
                            0 === n.indexOf("qunit-test-") && t.removeItem(n);
                        }
                    });
                }
                function wt(t) {
                    var e, n;
                    for (++wt.count, this.expected = null, this.assertions = [], this.semaphore = 0, 
                    this.module = fe.currentModule, this.stack = ct(3), this.steps = [], this.timeout = void 0, 
                    this.module.skip ? (t.skip = !0, t.todo = !1) : this.module.todo && !t.skip && (t.todo = !0), 
                    h(this, t), this.testReport = new Ge(t.testName, this.module.suiteReport, {
                        todo: t.todo,
                        skip: t.skip,
                        valid: this.valid()
                    }), e = 0, n = this.module.tests; e < n.length; e++) this.module.tests[e].name === this.testName && (this.testName += " ");
                    if (this.testId = g(this.module.name, this.testName), this.module.tests.push({
                        name: this.testName,
                        testId: this.testId,
                        skip: !!t.skip
                    }), t.skip) this.callback = function() {}, this.async = !1, this.expected = 0; else {
                        if ("function" != typeof this.callback) {
                            var r = this.todo ? "todo" : "test";
                            throw new TypeError("You must provide a function as a test callback to QUnit." + r + '("' + t.testName + '")');
                        }
                        this.assert = new We(this);
                    }
                }
                function xt(t) {
                    for (var e = t, n = []; e && 0 === e.testsRun; ) n.push(e), e = e.parentModule;
                    return n.reverse();
                }
                function kt() {
                    if (!fe.current) throw new Error("pushFailure() assertion outside test context, in " + ct(2));
                    var t = fe.current;
                    return t.pushFailure.apply(t, arguments);
                }
                function _t() {
                    if (fe.pollution = [], fe.noglobals) for (var t in s) if (ie.call(s, t)) {
                        if (/^qunit-test-output/.test(t)) continue;
                        fe.pollution.push(t);
                    }
                }
                function Et() {
                    var t, e, n = fe.pollution;
                    _t(), t = c(fe.pollution, n), t.length > 0 && kt("Introduced global variable(s): " + t.join(", ")), 
                    e = c(n, fe.pollution), e.length > 0 && kt("Deleted global variable(s): " + e.join(", "));
                }
                function Tt(t, e) {
                    if (!Ye) {
                        var n = new wt({
                            testName: t,
                            callback: e
                        });
                        n.queue();
                    }
                }
                function qt(t, e) {
                    if (!Ye) {
                        var n = new wt({
                            testName: t,
                            callback: e,
                            todo: !0
                        });
                        n.queue();
                    }
                }
                function Ct(t) {
                    if (!Ye) {
                        var e = new wt({
                            testName: t,
                            skip: !0
                        });
                        e.queue();
                    }
                }
                function Nt(t, e) {
                    if (!Ye) {
                        fe.queue.length = 0, Ye = !0;
                        var n = new wt({
                            testName: t,
                            callback: e
                        });
                        n.queue();
                    }
                }
                function St(t) {
                    if (t.semaphore += 1, fe.blocking = !0, le.setTimeout) {
                        var e = void 0;
                        "number" == typeof t.timeout ? e = t.timeout : "number" == typeof fe.testTimeout && (e = fe.testTimeout), 
                        "number" == typeof e && e > 0 && (Wt(fe.timeout), fe.timeout = Yt(function() {
                            kt("Test took longer than " + e + "ms; test timed out.", ct(2)), Mt(t);
                        }, e));
                    }
                    var n = !1;
                    return function() {
                        n || (n = !0, t.semaphore -= 1, jt(t));
                    };
                }
                function Mt(t) {
                    t.semaphore = 0, jt(t);
                }
                function jt(t) {
                    if (isNaN(t.semaphore)) return t.semaphore = 0, void kt("Invalid value on test.semaphore", ct(2));
                    if (!(t.semaphore > 0)) return t.semaphore < 0 ? (t.semaphore = 0, void kt("Tried to restart test while already started (test's semaphore was 0 already)", ct(2))) : void (le.setTimeout ? (fe.timeout && Wt(fe.timeout), 
                    fe.timeout = Yt(function() {
                        t.semaphore > 0 || (fe.timeout && Wt(fe.timeout), Qt());
                    })) : Qt());
                }
                function At(t) {
                    for (var e = [].concat(t.tests), n = [].concat(ne(t.childModules)); n.length; ) {
                        var r = n.shift();
                        e.push.apply(e, r.tests), n.push.apply(n, ne(r.childModules));
                    }
                    return e;
                }
                function It(t) {
                    return At(t).length;
                }
                function Rt(t) {
                    return At(t).filter(function(t) {
                        return !t.skip;
                    }).length;
                }
                function Ot(t, e) {
                    for (t.testsRun++, e || t.unskippedTestsRun++; t = t.parentModule; ) t.testsRun++, 
                    e || t.unskippedTestsRun++;
                }
                function Lt(t) {
                    var e = t.toString();
                    if ("[object" === e.substring(0, 7)) {
                        var n = t.name ? t.name.toString() : "Error", r = t.message ? t.message.toString() : "";
                        return n && r ? n + ": " + r : n ? n : r ? r : "Error";
                    }
                    return e;
                }
                function Ut(t) {
                    if (le.document) {
                        if ($t.QUnit && $t.QUnit.version) throw new Error("QUnit has already been defined.");
                        $t.QUnit = t;
                    }
                    "undefined" != typeof o && o && o.exports && (o.exports = t, o.exports.QUnit = t), 
                    "undefined" != typeof e && e && (e.QUnit = t), r = function() {
                        return t;
                    }.call(e, n, e, o), !(void 0 !== r && (o.exports = r)), t.config.autostart = !1, 
                    zt && zt.WorkerGlobalScope && zt instanceof zt.WorkerGlobalScope && (zt.QUnit = t);
                }
                function Dt(t) {
                    for (var e = arguments.length, n = Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++) n[r - 1] = arguments[r];
                    if (fe.current) {
                        if (fe.current.ignoreGlobalErrors) return !0;
                        kt.apply(void 0, [ t.message, t.stacktrace || t.fileName + ":" + t.lineNumber ].concat(n));
                    } else Tt("global failure", h(function() {
                        kt.apply(void 0, [ t.message, t.stacktrace || t.fileName + ":" + t.lineNumber ].concat(n));
                    }, {
                        validTest: !0
                    }));
                    return !1;
                }
                function Ft(t) {
                    var e = {
                        result: !1,
                        message: t.message || "error",
                        actual: t,
                        source: t.stack || ct(3)
                    }, n = fe.current;
                    n ? n.assert.pushResult(e) : Tt("global failure", h(function(t) {
                        t.pushResult(e);
                    }, {
                        validTest: !0
                    }));
                }
                function Pt() {
                    Xe = !0, le.setTimeout ? Yt(function() {
                        Qt();
                    }) : Qt();
                }
                function Ht() {
                    fe.blocking = !1, ze.advance();
                }
                function Qt() {
                    var t, e, n = [];
                    if (fe.started) Ht(); else {
                        for (fe.started = oe(), "" === fe.modules[0].name && 0 === fe.modules[0].tests.length && fe.modules.shift(), 
                        t = 0, e = fe.modules.length; t < e; t++) n.push({
                            name: fe.modules[t].name,
                            tests: fe.modules[t].tests
                        });
                        w("runStart", Je.start(!0)), at("begin", {
                            totalTests: wt.count,
                            modules: n
                        }).then(Ht);
                    }
                }
                function Bt(t) {
                    return t ? (t += "", t.replace(/['"<>&]/g, function(t) {
                        switch (t) {
                          case "'":
                            return "&#039;";

                          case '"':
                            return "&quot;";

                          case "<":
                            return "&lt;";

                          case ">":
                            return "&gt;";

                          case "&":
                            return "&amp;";
                        }
                    })) : "";
                }
                s = s && s.hasOwnProperty("default") ? s.default : s;
                var $t = s.window, zt = s.self, Gt = s.console, Yt = s.setTimeout, Wt = s.clearTimeout, Vt = $t && $t.document, Jt = $t && $t.navigator, Kt = function() {
                    var t = "qunit-test-string";
                    try {
                        return s.sessionStorage.setItem(t, t), s.sessionStorage.removeItem(t), s.sessionStorage;
                    } catch (t) {
                        return;
                    }
                }(), Xt = {
                    warn: u("warn")
                }, Zt = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                    return typeof t;
                } : function(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
                }, te = function(t, e) {
                    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
                }, ee = function() {
                    function t(t, e) {
                        for (var n = 0; n < e.length; n++) {
                            var r = e[n];
                            r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), 
                            Object.defineProperty(t, r.key, r);
                        }
                    }
                    return function(e, n, r) {
                        return n && t(e.prototype, n), r && t(e, r), e;
                    };
                }(), ne = function(t) {
                    if (Array.isArray(t)) {
                        for (var e = 0, n = Array(t.length); e < t.length; e++) n[e] = t[e];
                        return n;
                    }
                    return Array.from(t);
                }, re = Object.prototype.toString, ie = Object.prototype.hasOwnProperty, oe = Date.now || function() {
                    return new Date().getTime();
                }, se = a(), ue = se ? $t.performance : void 0, ae = se ? ue.now.bind(ue) : oe, le = {
                    document: $t && void 0 !== $t.document,
                    setTimeout: void 0 !== Yt
                }, ce = function() {
                    function t(t, e) {
                        return "object" === ("undefined" == typeof t ? "undefined" : Zt(t)) && (t = t.valueOf()), 
                        "object" === ("undefined" == typeof e ? "undefined" : Zt(e)) && (e = e.valueOf()), 
                        t === e;
                    }
                    function e(t, e) {
                        var n = a(t), r = a(e);
                        return t.constructor === e.constructor || (n && null === n.constructor && (n = null), 
                        r && null === r.constructor && (r = null), null === n && r === Object.prototype || null === r && n === Object.prototype);
                    }
                    function n(t) {
                        return "flags" in t ? t.flags : t.toString().match(/[gimuy]*$/)[0];
                    }
                    function r(t) {
                        return [ "object", "array", "map", "set" ].indexOf(p(t)) !== -1;
                    }
                    function i(t, e) {
                        return t === e || (r(t) ? (u.every(function(n) {
                            return n.a !== t || n.b !== e;
                        }) && u.push({
                            a: t,
                            b: e
                        }), !0) : o(t, e));
                    }
                    function o(t, e) {
                        var n = p(t);
                        return p(e) === n && l[n](t, e);
                    }
                    function s(t, e) {
                        var n, r;
                        if (arguments.length < 2) return !0;
                        for (u = [ {
                            a: t,
                            b: e
                        } ], n = 0; n < u.length; n++) if (r = u[n], r.a !== r.b && !o(r.a, r.b)) return !1;
                        return 2 === arguments.length || s.apply(this, [].slice.call(arguments, 1));
                    }
                    var u = [], a = Object.getPrototypeOf || function(t) {
                        return t.__proto__;
                    }, l = {
                        string: t,
                        boolean: t,
                        number: t,
                        null: t,
                        undefined: t,
                        symbol: t,
                        date: t,
                        nan: function() {
                            return !0;
                        },
                        regexp: function(t, e) {
                            return t.source === e.source && n(t) === n(e);
                        },
                        function: function() {
                            return !1;
                        },
                        array: function(t, e) {
                            var n, r;
                            if (r = t.length, r !== e.length) return !1;
                            for (n = 0; n < r; n++) if (!i(t[n], e[n])) return !1;
                            return !0;
                        },
                        set: function(t, e) {
                            var n, r = !0;
                            return t.size === e.size && (t.forEach(function(t) {
                                r && (n = !1, e.forEach(function(e) {
                                    var r;
                                    n || (r = u, s(e, t) && (n = !0), u = r);
                                }), n || (r = !1));
                            }), r);
                        },
                        map: function(t, e) {
                            var n, r = !0;
                            return t.size === e.size && (t.forEach(function(t, i) {
                                r && (n = !1, e.forEach(function(e, r) {
                                    var o;
                                    n || (o = u, s([ e, r ], [ t, i ]) && (n = !0), u = o);
                                }), n || (r = !1));
                            }), r);
                        },
                        object: function(t, n) {
                            var r, s = [], u = [];
                            if (e(t, n) === !1) return !1;
                            for (r in t) if (s.push(r), (t.constructor === Object || "undefined" == typeof t.constructor || "function" != typeof t[r] || "function" != typeof n[r] || t[r].toString() !== n[r].toString()) && !i(t[r], n[r])) return !1;
                            for (r in n) u.push(r);
                            return o(s.sort(), u.sort());
                        }
                    };
                    return function() {
                        var t = s.apply(void 0, arguments);
                        return u.length = 0, t;
                    };
                }(), fe = {
                    queue: [],
                    blocking: !0,
                    reorder: !0,
                    altertitle: !0,
                    collapse: !0,
                    scrolltop: !0,
                    maxDepth: 5,
                    requireExpects: !1,
                    urlConfig: [],
                    modules: [],
                    currentModule: {
                        name: "",
                        tests: [],
                        childModules: [],
                        testsRun: 0,
                        unskippedTestsRun: 0,
                        hooks: {
                            before: [],
                            beforeEach: [],
                            afterEach: [],
                            after: []
                        }
                    },
                    callbacks: {},
                    storage: Kt
                }, de = $t && $t.QUnit && $t.QUnit.config;
                $t && $t.QUnit && !$t.QUnit.version && h(fe, de), fe.modules.push(fe.currentModule);
                var he = function() {
                    function t(t) {
                        return '"' + t.toString().replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
                    }
                    function e(t) {
                        return t + "";
                    }
                    function n(t, e, n) {
                        var r = s.separator(), i = s.indent(), o = s.indent(1);
                        return e.join && (e = e.join("," + r + o)), e ? [ t, o + e, i + n ].join(r) : t + n;
                    }
                    function r(t, e) {
                        var r = t.length, i = new Array(r);
                        if (s.maxDepth && s.depth > s.maxDepth) return "[object Array]";
                        for (this.up(); r--; ) i[r] = this.parse(t[r], void 0, e);
                        return this.down(), n("[", i, "]");
                    }
                    function i(t) {
                        return "[object Array]" === re.call(t) || "number" == typeof t.length && void 0 !== t.item && (t.length ? t.item(0) === t[0] : null === t.item(0) && void 0 === t[0]);
                    }
                    var o = /^function (\w+)/, s = {
                        parse: function(t, e, n) {
                            n = n || [];
                            var r, i, o, s = n.indexOf(t);
                            return s !== -1 ? "recursion(" + (s - n.length) + ")" : (e = e || this.typeOf(t), 
                            i = this.parsers[e], o = "undefined" == typeof i ? "undefined" : Zt(i), "function" === o ? (n.push(t), 
                            r = i.call(this, t, n), n.pop(), r) : "string" === o ? i : this.parsers.error);
                        },
                        typeOf: function(t) {
                            var e;
                            return e = null === t ? "null" : "undefined" == typeof t ? "undefined" : m("regexp", t) ? "regexp" : m("date", t) ? "date" : m("function", t) ? "function" : void 0 !== t.setInterval && void 0 !== t.document && void 0 === t.nodeType ? "window" : 9 === t.nodeType ? "document" : t.nodeType ? "node" : i(t) ? "array" : t.constructor === Error.prototype.constructor ? "error" : "undefined" == typeof t ? "undefined" : Zt(t);
                        },
                        separator: function() {
                            return this.multiline ? this.HTML ? "<br />" : "\n" : this.HTML ? "&#160;" : " ";
                        },
                        indent: function(t) {
                            if (!this.multiline) return "";
                            var e = this.indentChar;
                            return this.HTML && (e = e.replace(/\t/g, "   ").replace(/ /g, "&#160;")), new Array(this.depth + (t || 0)).join(e);
                        },
                        up: function(t) {
                            this.depth += t || 1;
                        },
                        down: function(t) {
                            this.depth -= t || 1;
                        },
                        setParser: function(t, e) {
                            this.parsers[t] = e;
                        },
                        quote: t,
                        literal: e,
                        join: n,
                        depth: 1,
                        maxDepth: fe.maxDepth,
                        parsers: {
                            window: "[Window]",
                            document: "[Document]",
                            error: function(t) {
                                return 'Error("' + t.message + '")';
                            },
                            unknown: "[Unknown]",
                            null: "null",
                            undefined: "undefined",
                            function: function(t) {
                                var e = "function", r = "name" in t ? t.name : (o.exec(t) || [])[1];
                                return r && (e += " " + r), e += "(", e = [ e, s.parse(t, "functionArgs"), "){" ].join(""), 
                                n(e, s.parse(t, "functionCode"), "}");
                            },
                            array: r,
                            nodelist: r,
                            arguments: r,
                            object: function(t, e) {
                                var r, i, o, u, a, l = [];
                                if (s.maxDepth && s.depth > s.maxDepth) return "[object Object]";
                                s.up(), r = [];
                                for (i in t) r.push(i);
                                a = [ "message", "name" ];
                                for (u in a) i = a[u], i in t && !f(i, r) && r.push(i);
                                for (r.sort(), u = 0; u < r.length; u++) i = r[u], o = t[i], l.push(s.parse(i, "key") + ": " + s.parse(o, void 0, e));
                                return s.down(), n("{", l, "}");
                            },
                            node: function(t) {
                                var e, n, r, i = s.HTML ? "&lt;" : "<", o = s.HTML ? "&gt;" : ">", u = t.nodeName.toLowerCase(), a = i + u, l = t.attributes;
                                if (l) for (n = 0, e = l.length; n < e; n++) r = l[n].nodeValue, r && "inherit" !== r && (a += " " + l[n].nodeName + "=" + s.parse(r, "attribute"));
                                return a += o, 3 !== t.nodeType && 4 !== t.nodeType || (a += t.nodeValue), a + i + "/" + u + o;
                            },
                            functionArgs: function(t) {
                                var e, n = t.length;
                                if (!n) return "";
                                for (e = new Array(n); n--; ) e[n] = String.fromCharCode(97 + n);
                                return " " + e.join(", ") + " ";
                            },
                            key: t,
                            functionCode: "[code]",
                            attribute: t,
                            string: t,
                            date: t,
                            regexp: e,
                            number: e,
                            boolean: e,
                            symbol: function(t) {
                                return t.toString();
                            }
                        },
                        HTML: !1,
                        indentChar: "  ",
                        multiline: !0
                    };
                    return s;
                }(), pe = function() {
                    function t(e, n) {
                        te(this, t), this.name = e, this.fullName = n ? n.fullName.concat(e) : [], this.tests = [], 
                        this.childSuites = [], n && n.pushChildSuite(this);
                    }
                    return ee(t, [ {
                        key: "start",
                        value: function(t) {
                            if (t && (this._startTime = ae(), ue)) {
                                var e = this.fullName.length;
                                ue.mark("qunit_suite_" + e + "_start");
                            }
                            return {
                                name: this.name,
                                fullName: this.fullName.slice(),
                                tests: this.tests.map(function(t) {
                                    return t.start();
                                }),
                                childSuites: this.childSuites.map(function(t) {
                                    return t.start();
                                }),
                                testCounts: {
                                    total: this.getTestCounts().total
                                }
                            };
                        }
                    }, {
                        key: "end",
                        value: function(t) {
                            if (t && (this._endTime = ae(), ue)) {
                                var e = this.fullName.length;
                                ue.mark("qunit_suite_" + e + "_end");
                                var n = this.fullName.join(" – ");
                                l(0 === e ? "QUnit Test Run" : "QUnit Test Suite: " + n, "qunit_suite_" + e + "_start", "qunit_suite_" + e + "_end");
                            }
                            return {
                                name: this.name,
                                fullName: this.fullName.slice(),
                                tests: this.tests.map(function(t) {
                                    return t.end();
                                }),
                                childSuites: this.childSuites.map(function(t) {
                                    return t.end();
                                }),
                                testCounts: this.getTestCounts(),
                                runtime: this.getRuntime(),
                                status: this.getStatus()
                            };
                        }
                    }, {
                        key: "pushChildSuite",
                        value: function(t) {
                            this.childSuites.push(t);
                        }
                    }, {
                        key: "pushTest",
                        value: function(t) {
                            this.tests.push(t);
                        }
                    }, {
                        key: "getRuntime",
                        value: function() {
                            return this._endTime - this._startTime;
                        }
                    }, {
                        key: "getTestCounts",
                        value: function() {
                            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {
                                passed: 0,
                                failed: 0,
                                skipped: 0,
                                todo: 0,
                                total: 0
                            };
                            return t = this.tests.reduce(function(t, e) {
                                return e.valid && (t[e.getStatus()]++, t.total++), t;
                            }, t), this.childSuites.reduce(function(t, e) {
                                return e.getTestCounts(t);
                            }, t);
                        }
                    }, {
                        key: "getStatus",
                        value: function() {
                            var t = this.getTestCounts(), e = t.total, n = t.failed, r = t.skipped, i = t.todo;
                            return n ? "failed" : r === e ? "skipped" : i === e ? "todo" : "passed";
                        }
                    } ]), t;
                }(), me = !1, ge = [];
                b.only = function() {
                    me || (fe.modules.length = 0, fe.queue.length = 0, b.apply(void 0, arguments), me = !0);
                }, b.skip = function(t, e, n) {
                    me || y(t, e, n, {
                        skip: !0
                    });
                }, b.todo = function(t, e, n) {
                    me || y(t, e, n, {
                        todo: !0
                    });
                };
                var ve = Object.create(null), ye = [ "runStart", "suiteStart", "testStart", "assertion", "testEnd", "suiteEnd", "runEnd" ], be = void 0;
                be = Array.isArray ? Array.isArray : function(t) {
                    return "[object Array]" === Object.prototype.toString.call(t);
                };
                var we = be, xe = 0, ke = void 0, _e = void 0, Ee = function(t, e) {
                    Me[xe] = t, Me[xe + 1] = e, xe += 2, 2 === xe && (_e ? _e(j) : je());
                }, Te = "undefined" != typeof window ? window : void 0, qe = Te || {}, Ce = qe.MutationObserver || qe.WebKitMutationObserver, Ne = "undefined" == typeof self && "undefined" != typeof t && "[object process]" === {}.toString.call(t), Se = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel, Me = new Array(1e3), je = void 0;
                je = Ne ? q() : Ce ? N() : Se ? S() : void 0 === Te ? A() : M();
                var Ae = Math.random().toString(36).substring(2), Ie = void 0, Re = 1, Oe = 2, Le = {
                    error: null
                }, Ue = 0, De = function() {
                    function t(e, n) {
                        te(this, t), this._instanceConstructor = e, this.promise = new e(O), this.promise[Ae] || Z(this.promise), 
                        we(n) ? (this.length = n.length, this._remaining = n.length, this._result = new Array(this.length), 
                        0 === this.length ? z(this.promise, this._result) : (this.length = this.length || 0, 
                        this._enumerate(n), 0 === this._remaining && z(this.promise, this._result))) : G(this.promise, tt());
                    }
                    return ee(t, [ {
                        key: "_enumerate",
                        value: function(t) {
                            for (var e = 0; this._state === Ie && e < t.length; e++) this._eachEntry(t[e], e);
                        }
                    }, {
                        key: "_eachEntry",
                        value: function(t, e) {
                            var n = this._instanceConstructor, r = n.resolve;
                            if (r === R) {
                                var i = D(t);
                                if (i === I && t._state !== Ie) this._settledAt(t._state, e, t._result); else if ("function" != typeof i) this._remaining--, 
                                this._result[e] = t; else if (n === Fe) {
                                    var o = new n(O);
                                    Q(o, t, i), this._willSettleAt(o, e);
                                } else this._willSettleAt(new n(function(e) {
                                    return e(t);
                                }), e);
                            } else this._willSettleAt(r(t), e);
                        }
                    }, {
                        key: "_settledAt",
                        value: function(t, e, n) {
                            var r = this.promise;
                            r._state === Ie && (this._remaining--, t === Oe ? G(r, n) : this._result[e] = n), 
                            0 === this._remaining && z(r, this._result);
                        }
                    }, {
                        key: "_willSettleAt",
                        value: function(t, e) {
                            var n = this;
                            Y(t, void 0, function(t) {
                                return n._settledAt(Re, e, t);
                            }, function(t) {
                                return n._settledAt(Oe, e, t);
                            });
                        }
                    } ]), t;
                }(), Fe = function() {
                    function t(e) {
                        te(this, t), this[Ae] = X(), this._result = this._state = void 0, this._subscribers = [], 
                        O !== e && ("function" != typeof e && it(), this instanceof t ? K(this, e) : ot());
                    }
                    return ee(t, [ {
                        key: "catch",
                        value: function(t) {
                            return this.then(null, t);
                        }
                    }, {
                        key: "finally",
                        value: function(t) {
                            var e = this, n = e.constructor;
                            return _(t) ? e.then(function(e) {
                                return n.resolve(t()).then(function() {
                                    return e;
                                });
                            }, function(e) {
                                return n.resolve(t()).then(function() {
                                    throw e;
                                });
                            }) : e.then(t, t);
                        }
                    } ]), t;
                }();
                Fe.prototype.then = I, Fe.all = et, Fe.race = nt, Fe.resolve = R, Fe.reject = rt, 
                Fe._setScheduler = E, Fe._setAsap = T, Fe._asap = Ee, Fe.polyfill = st, Fe.Promise = Fe;
                var Pe = "undefined" != typeof Promise ? Promise : Fe, He = (ct(0) || "").replace(/(:\d+)+\)?/, "").replace(/.+\//, ""), Qe = 0, Be = void 0, $e = [], ze = {
                    finished: !1,
                    add: vt,
                    advance: ft,
                    taskCount: gt
                }, Ge = function() {
                    function t(e, n, r) {
                        te(this, t), this.name = e, this.suiteName = n.name, this.fullName = n.fullName.concat(e), 
                        this.runtime = 0, this.assertions = [], this.skipped = !!r.skip, this.todo = !!r.todo, 
                        this.valid = r.valid, this._startTime = 0, this._endTime = 0, n.pushTest(this);
                    }
                    return ee(t, [ {
                        key: "start",
                        value: function(t) {
                            return t && (this._startTime = ae(), ue && ue.mark("qunit_test_start")), {
                                name: this.name,
                                suiteName: this.suiteName,
                                fullName: this.fullName.slice()
                            };
                        }
                    }, {
                        key: "end",
                        value: function(t) {
                            if (t && (this._endTime = ae(), ue)) {
                                ue.mark("qunit_test_end");
                                var e = this.fullName.join(" – ");
                                l("QUnit Test: " + e, "qunit_test_start", "qunit_test_end");
                            }
                            return h(this.start(), {
                                runtime: this.getRuntime(),
                                status: this.getStatus(),
                                errors: this.getFailedAssertions(),
                                assertions: this.getAssertions()
                            });
                        }
                    }, {
                        key: "pushAssertion",
                        value: function(t) {
                            this.assertions.push(t);
                        }
                    }, {
                        key: "getRuntime",
                        value: function() {
                            return this._endTime - this._startTime;
                        }
                    }, {
                        key: "getStatus",
                        value: function() {
                            if (this.skipped) return "skipped";
                            var t = this.getFailedAssertions().length > 0 ? this.todo : !this.todo;
                            return t ? this.todo ? "todo" : "passed" : "failed";
                        }
                    }, {
                        key: "getFailedAssertions",
                        value: function() {
                            return this.assertions.filter(function(t) {
                                return !t.passed;
                            });
                        }
                    }, {
                        key: "getAssertions",
                        value: function() {
                            return this.assertions.slice();
                        }
                    }, {
                        key: "slimAssertions",
                        value: function() {
                            this.assertions = this.assertions.map(function(t) {
                                return delete t.actual, delete t.expected, t;
                            });
                        }
                    } ]), t;
                }(), Ye = !1;
                wt.count = 0, wt.prototype = {
                    before: function() {
                        var t = this, e = this.module, n = xt(e), r = n.reduce(function(t, e) {
                            return t.then(function() {
                                return e.stats = {
                                    all: 0,
                                    bad: 0,
                                    started: oe()
                                }, w("suiteStart", e.suiteReport.start(!0)), at("moduleStart", {
                                    name: e.name,
                                    tests: e.tests
                                });
                            });
                        }, Pe.resolve([]));
                        return r.then(function() {
                            return fe.current = t, t.testEnvironment = h({}, e.testEnvironment), t.started = oe(), 
                            w("testStart", t.testReport.start(!0)), at("testStart", {
                                name: t.testName,
                                module: e.name,
                                testId: t.testId,
                                previousFailure: t.previousFailure
                            }).then(function() {
                                fe.pollution || _t();
                            });
                        });
                    },
                    run: function() {
                        function t(t) {
                            e = t.callback.call(t.testEnvironment, t.assert), t.resolvePromise(e), 0 === t.timeout && 0 !== t.semaphore && kt("Test did not finish synchronously even though assert.timeout( 0 ) was used.", ct(2));
                        }
                        var e;
                        if (fe.current = this, this.callbackStarted = oe(), fe.notrycatch) return void t(this);
                        try {
                            t(this);
                        } catch (t) {
                            this.pushFailure("Died on test #" + (this.assertions.length + 1) + " " + this.stack + ": " + (t.message || t), lt(t, 0)), 
                            _t(), fe.blocking && Mt(this);
                        }
                    },
                    after: function() {
                        Et();
                    },
                    queueHook: function(t, e, n) {
                        var r = this, i = function() {
                            var n = t.call(r.testEnvironment, r.assert);
                            r.resolvePromise(n, e);
                        }, o = function() {
                            if ("before" === e) {
                                if (0 !== n.unskippedTestsRun) return;
                                r.preserveEnvironment = !0;
                            }
                            if ("after" !== e || n.unskippedTestsRun === Rt(n) - 1 || !(fe.queue.length > 0 || ze.taskCount() > 2)) {
                                if (fe.current = r, fe.notrycatch) return void i();
                                try {
                                    i();
                                } catch (t) {
                                    r.pushFailure(e + " failed on " + r.testName + ": " + (t.message || t), lt(t, 0));
                                }
                            }
                        };
                        return o;
                    },
                    hooks: function t(e) {
                        function n(r, i) {
                            if (i.parentModule && n(r, i.parentModule), i.hooks[e].length) for (var o = 0; o < i.hooks[e].length; o++) t.push(r.queueHook(i.hooks[e][o], e, i));
                        }
                        var t = [];
                        return this.skip || n(this, this.module), t;
                    },
                    finish: function() {
                        function t(t) {
                            return t.hooks = {}, w("suiteEnd", t.suiteReport.end(!0)), at("moduleDone", {
                                name: t.name,
                                tests: t.tests,
                                failed: t.stats.bad,
                                passed: t.stats.all - t.stats.bad,
                                total: t.stats.all,
                                runtime: oe() - t.stats.started
                            });
                        }
                        if (fe.current = this, this.callback = void 0, this.steps.length) {
                            var e = this.steps.join(", ");
                            this.pushFailure("Expected assert.verifySteps() to be called before end of test after using assert.step(). Unverified steps: " + e, this.stack);
                        }
                        fe.requireExpects && null === this.expected ? this.pushFailure("Expected number of assertions to be defined, but expect() was not called.", this.stack) : null !== this.expected && this.expected !== this.assertions.length ? this.pushFailure("Expected " + this.expected + " assertions, but " + this.assertions.length + " were run", this.stack) : null !== this.expected || this.assertions.length || this.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
                        var n, r = this.module, i = r.name, o = this.testName, s = !!this.skip, u = !!this.todo, a = 0, l = fe.storage;
                        for (this.runtime = oe() - this.started, fe.stats.all += this.assertions.length, 
                        r.stats.all += this.assertions.length, n = 0; n < this.assertions.length; n++) this.assertions[n].result || (a++, 
                        fe.stats.bad++, r.stats.bad++);
                        return Ot(r, s), l && (a ? l.setItem("qunit-test-" + i + "-" + o, a) : l.removeItem("qunit-test-" + i + "-" + o)), 
                        w("testEnd", this.testReport.end(!0)), this.testReport.slimAssertions(), at("testDone", {
                            name: o,
                            module: i,
                            skipped: s,
                            todo: u,
                            failed: a,
                            passed: this.assertions.length - a,
                            total: this.assertions.length,
                            runtime: s ? 0 : this.runtime,
                            assertions: this.assertions,
                            testId: this.testId,
                            source: this.stack
                        }).then(function() {
                            if (r.testsRun === It(r)) {
                                for (var e = [ r ], n = r.parentModule; n && n.testsRun === It(n); ) e.push(n), 
                                n = n.parentModule;
                                return e.reduce(function(e, n) {
                                    return e.then(function() {
                                        return t(n);
                                    });
                                }, Pe.resolve([]));
                            }
                        }).then(function() {
                            fe.current = void 0;
                        });
                    },
                    preserveTestEnvironment: function() {
                        this.preserveEnvironment && (this.module.testEnvironment = this.testEnvironment, 
                        this.testEnvironment = h({}, this.module.testEnvironment));
                    },
                    queue: function() {
                        function t() {
                            return [ function() {
                                return e.before();
                            } ].concat(ne(e.hooks("before")), [ function() {
                                e.preserveTestEnvironment();
                            } ], ne(e.hooks("beforeEach")), [ function() {
                                e.run();
                            } ], ne(e.hooks("afterEach").reverse()), ne(e.hooks("after").reverse()), [ function() {
                                e.after();
                            }, function() {
                                return e.finish();
                            } ]);
                        }
                        var e = this;
                        if (this.valid()) {
                            var n = fe.storage && +fe.storage.getItem("qunit-test-" + this.module.name + "-" + this.testName), r = fe.reorder && !!n;
                            this.previousFailure = !!n, ze.add(t, r, fe.seed), ze.finished && ze.advance();
                        }
                    },
                    pushResult: function(t) {
                        if (this !== fe.current) throw new Error("Assertion occurred after test had finished.");
                        var e, n = {
                            module: this.module.name,
                            name: this.testName,
                            result: t.result,
                            message: t.message,
                            actual: t.actual,
                            testId: this.testId,
                            negative: t.negative || !1,
                            runtime: oe() - this.started,
                            todo: !!this.todo
                        };
                        ie.call(t, "expected") && (n.expected = t.expected), t.result || (e = t.source || ct(), 
                        e && (n.source = e)), this.logAssertion(n), this.assertions.push({
                            result: !!t.result,
                            message: t.message
                        });
                    },
                    pushFailure: function(t, e, n) {
                        if (!(this instanceof wt)) throw new Error("pushFailure() assertion outside test context, was " + ct(2));
                        this.pushResult({
                            result: !1,
                            message: t || "error",
                            actual: n || null,
                            source: e
                        });
                    },
                    logAssertion: function(t) {
                        at("log", t);
                        var e = {
                            passed: t.result,
                            actual: t.actual,
                            expected: t.expected,
                            message: t.message,
                            stack: t.source,
                            todo: t.todo
                        };
                        this.testReport.pushAssertion(e), w("assertion", e);
                    },
                    resolvePromise: function(t, e) {
                        var n, r, i, o = this;
                        null != t && (n = t.then, "function" === p(n) && (r = St(o), fe.notrycatch ? n.call(t, function() {
                            r();
                        }) : n.call(t, function() {
                            r();
                        }, function(t) {
                            i = "Promise rejected " + (e ? e.replace(/Each$/, "") : "during") + ' "' + o.testName + '": ' + (t && t.message || t), 
                            o.pushFailure(i, lt(t, 0)), _t(), Mt(o);
                        })));
                    },
                    valid: function() {
                        function t(e) {
                            var n = e.name ? e.name.toLowerCase() : null;
                            return n === i || !!e.parentModule && t(e.parentModule);
                        }
                        function e(t) {
                            return f(t.moduleId, fe.moduleId) || t.parentModule && e(t.parentModule);
                        }
                        var n = fe.filter, r = /^(!?)\/([\w\W]*)\/(i?$)/.exec(n), i = fe.module && fe.module.toLowerCase(), o = this.module.name + ": " + this.testName;
                        return !(!this.callback || !this.callback.validTest) || !(fe.moduleId && fe.moduleId.length > 0 && !e(this.module)) && (!(fe.testId && fe.testId.length > 0 && !f(this.testId, fe.testId)) && (!(i && !t(this.module)) && (!n || (r ? this.regexFilter(!!r[1], r[2], r[3], o) : this.stringFilter(n, o)))));
                    },
                    regexFilter: function(t, e, n, r) {
                        var i = new RegExp(e, n), o = i.test(r);
                        return o !== t;
                    },
                    stringFilter: function(t, e) {
                        t = t.toLowerCase(), e = e.toLowerCase();
                        var n = "!" !== t.charAt(0);
                        return n || (t = t.slice(1)), e.indexOf(t) !== -1 ? n : !n;
                    }
                };
                var We = function() {
                    function t(e) {
                        te(this, t), this.test = e;
                    }
                    return ee(t, [ {
                        key: "timeout",
                        value: function(t) {
                            if ("number" != typeof t) throw new Error("You must pass a number as the duration to assert.timeout");
                            this.test.timeout = t;
                        }
                    }, {
                        key: "step",
                        value: function(t) {
                            var e = t, n = !!t;
                            this.test.steps.push(t), "undefined" === p(t) || "" === t ? e = "You must provide a message to assert.step" : "string" !== p(t) && (e = "You must provide a string value to assert.step", 
                            n = !1), this.pushResult({
                                result: n,
                                message: e
                            });
                        }
                    }, {
                        key: "verifySteps",
                        value: function(t, e) {
                            var n = this.test.steps.slice();
                            this.deepEqual(n, t, e), this.test.steps.length = 0;
                        }
                    }, {
                        key: "expect",
                        value: function(t) {
                            return 1 !== arguments.length ? this.test.expected : void (this.test.expected = t);
                        }
                    }, {
                        key: "async",
                        value: function(t) {
                            var e = this.test, n = !1, r = t;
                            "undefined" == typeof r && (r = 1);
                            var i = St(e);
                            return function() {
                                if (fe.current !== e) throw Error("assert.async callback called after test finished.");
                                return n ? void e.pushFailure("Too many calls to the `assert.async` callback", ct(2)) : (r -= 1, 
                                void (r > 0 || (n = !0, i())));
                            };
                        }
                    }, {
                        key: "push",
                        value: function(e, n, r, i, o) {
                            Xt.warn("assert.push is deprecated and will be removed in QUnit 3.0. Please use assert.pushResult instead (https://api.qunitjs.com/assert/pushResult).");
                            var s = this instanceof t ? this : fe.current.assert;
                            return s.pushResult({
                                result: e,
                                actual: n,
                                expected: r,
                                message: i,
                                negative: o
                            });
                        }
                    }, {
                        key: "pushResult",
                        value: function(e) {
                            var n = this, r = n instanceof t && n.test || fe.current;
                            if (!r) throw new Error("assertion outside test context, in " + ct(2));
                            return n instanceof t || (n = r.assert), n.test.pushResult(e);
                        }
                    }, {
                        key: "ok",
                        value: function(t, e) {
                            e || (e = t ? "okay" : "failed, expected argument to be truthy, was: " + he.parse(t)), 
                            this.pushResult({
                                result: !!t,
                                actual: t,
                                expected: !0,
                                message: e
                            });
                        }
                    }, {
                        key: "notOk",
                        value: function(t, e) {
                            e || (e = t ? "failed, expected argument to be falsy, was: " + he.parse(t) : "okay"), 
                            this.pushResult({
                                result: !t,
                                actual: t,
                                expected: !1,
                                message: e
                            });
                        }
                    }, {
                        key: "equal",
                        value: function(t, e, n) {
                            var r = e == t;
                            this.pushResult({
                                result: r,
                                actual: t,
                                expected: e,
                                message: n
                            });
                        }
                    }, {
                        key: "notEqual",
                        value: function(t, e, n) {
                            var r = e != t;
                            this.pushResult({
                                result: r,
                                actual: t,
                                expected: e,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "propEqual",
                        value: function(t, e, n) {
                            t = d(t), e = d(e), this.pushResult({
                                result: ce(t, e),
                                actual: t,
                                expected: e,
                                message: n
                            });
                        }
                    }, {
                        key: "notPropEqual",
                        value: function(t, e, n) {
                            t = d(t), e = d(e), this.pushResult({
                                result: !ce(t, e),
                                actual: t,
                                expected: e,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "deepEqual",
                        value: function(t, e, n) {
                            this.pushResult({
                                result: ce(t, e),
                                actual: t,
                                expected: e,
                                message: n
                            });
                        }
                    }, {
                        key: "notDeepEqual",
                        value: function(t, e, n) {
                            this.pushResult({
                                result: !ce(t, e),
                                actual: t,
                                expected: e,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "strictEqual",
                        value: function(t, e, n) {
                            this.pushResult({
                                result: e === t,
                                actual: t,
                                expected: e,
                                message: n
                            });
                        }
                    }, {
                        key: "notStrictEqual",
                        value: function(t, e, n) {
                            this.pushResult({
                                result: e !== t,
                                actual: t,
                                expected: e,
                                message: n,
                                negative: !0
                            });
                        }
                    }, {
                        key: "throws",
                        value: function(e, n, r) {
                            var i = void 0, o = !1, s = this instanceof t && this.test || fe.current;
                            if ("string" === p(n)) {
                                if (null != r) throw new Error("throws/raises does not accept a string value for the expected argument.\nUse a non-string object value (e.g. regExp) instead if it's necessary.");
                                r = n, n = null;
                            }
                            s.ignoreGlobalErrors = !0;
                            try {
                                e.call(s.testEnvironment);
                            } catch (t) {
                                i = t;
                            }
                            if (s.ignoreGlobalErrors = !1, i) {
                                var u = p(n);
                                n ? "regexp" === u ? o = n.test(Lt(i)) : "function" === u && i instanceof n ? o = !0 : "object" === u ? o = i instanceof n.constructor && i.name === n.name && i.message === n.message : "function" === u && n.call({}, i) === !0 && (n = null, 
                                o = !0) : (o = !0, n = null);
                            }
                            s.assert.pushResult({
                                result: o,
                                actual: i,
                                expected: n,
                                message: r
                            });
                        }
                    }, {
                        key: "rejects",
                        value: function(e, n, r) {
                            var i = !1, o = this instanceof t && this.test || fe.current;
                            if ("string" === p(n)) {
                                if (void 0 !== r) return r = "assert.rejects does not accept a string value for the expected argument.\nUse a non-string object value (e.g. validator function) instead if necessary.", 
                                void o.assert.pushResult({
                                    result: !1,
                                    message: r
                                });
                                r = n, n = void 0;
                            }
                            var s = e && e.then;
                            if ("function" !== p(s)) {
                                var u = 'The value provided to `assert.rejects` in "' + o.testName + '" was not a promise.';
                                return void o.assert.pushResult({
                                    result: !1,
                                    message: u,
                                    actual: e
                                });
                            }
                            var a = this.async();
                            return s.call(e, function() {
                                var t = 'The promise returned by the `assert.rejects` callback in "' + o.testName + '" did not reject.';
                                o.assert.pushResult({
                                    result: !1,
                                    message: t,
                                    actual: e
                                }), a();
                            }, function(t) {
                                var e = p(n);
                                void 0 === n ? (i = !0, n = t) : "regexp" === e ? i = n.test(Lt(t)) : "function" === e && t instanceof n ? i = !0 : "object" === e ? i = t instanceof n.constructor && t.name === n.name && t.message === n.message : "function" === e ? (i = n.call({}, t) === !0, 
                                n = null) : (i = !1, r = 'invalid expected value provided to `assert.rejects` callback in "' + o.testName + '": ' + e + "."), 
                                o.assert.pushResult({
                                    result: i,
                                    actual: t,
                                    expected: n,
                                    message: r
                                }), a();
                            });
                        }
                    } ]), t;
                }();
                We.prototype.raises = We.prototype.throws;
                var Ve = {}, Je = new pe();
                fe.currentModule.suiteReport = Je;
                var Ke = !1, Xe = !1;
                Ve.isLocal = !(le.document && "file:" !== $t.location.protocol), Ve.version = "2.8.0", 
                h(Ve, {
                    on: x,
                    module: b,
                    test: Tt,
                    todo: qt,
                    skip: Ct,
                    only: Nt,
                    start: function(t) {
                        var e = Ke;
                        if (fe.current) throw new Error("QUnit.start cannot be called inside a test context.");
                        if (Ke = !0, Xe) throw new Error("Called start() while test already started running");
                        if (e || t > 1) throw new Error("Called start() outside of a test context too many times");
                        if (fe.autostart) throw new Error("Called start() outside of a test context when QUnit.config.autostart was true");
                        return fe.pageLoaded ? void Pt() : (fe.autostart = !0, void (le.document || Ve.load()));
                    },
                    config: fe,
                    is: m,
                    objectType: p,
                    extend: h,
                    load: function() {
                        fe.pageLoaded = !0, h(fe, {
                            stats: {
                                all: 0,
                                bad: 0
                            },
                            started: 0,
                            updateRate: 1e3,
                            autostart: !0,
                            filter: ""
                        }, !0), Xe || (fe.blocking = !1, fe.autostart && Pt());
                    },
                    stack: function(t) {
                        return t = (t || 0) + 2, ct(t);
                    },
                    onError: Dt,
                    onUnhandledRejection: Ft
                }), Ve.pushFailure = kt, Ve.assert = We.prototype, Ve.equiv = ce, Ve.dump = he, 
                ut(Ve), Ut(Ve), function() {
                    function t() {
                        if (!r.call(n, "fixture")) {
                            var t = Vt.getElementById("qunit-fixture");
                            t && (n.fixture = t.cloneNode(!0));
                        }
                    }
                    function e() {
                        if (null != n.fixture) {
                            var t = Vt.getElementById("qunit-fixture"), e = Zt(n.fixture);
                            if ("string" === e) {
                                var r = Vt.createElement("div");
                                r.setAttribute("id", "qunit-fixture"), r.innerHTML = n.fixture, t.parentNode.replaceChild(r, t);
                            } else {
                                var i = n.fixture.cloneNode(!0);
                                t.parentNode.replaceChild(i, t);
                            }
                        }
                    }
                    if ("undefined" != typeof $t && "undefined" != typeof Vt) {
                        var n = Ve.config, r = Object.prototype.hasOwnProperty;
                        Ve.begin(t), Ve.testStart(e);
                    }
                }(), function() {
                    function t() {
                        var t, r, i, o, s = Object.create(null), u = n.search.slice(1).split("&"), a = u.length;
                        for (t = 0; t < a; t++) u[t] && (r = u[t].split("="), i = e(r[0]), o = 1 === r.length || e(r.slice(1).join("=")), 
                        i in s ? s[i] = [].concat(s[i], o) : s[i] = o);
                        return s;
                    }
                    function e(t) {
                        return decodeURIComponent(t.replace(/\+/g, "%20"));
                    }
                    var n = "undefined" != typeof $t && $t.location;
                    if (n) {
                        var r = t();
                        Ve.urlParams = r, Ve.config.moduleId = [].concat(r.moduleId || []), Ve.config.testId = [].concat(r.testId || []), 
                        Ve.config.module = r.module, Ve.config.filter = r.filter, r.seed === !0 ? Ve.config.seed = Math.random().toString(36).slice(2) : r.seed && (Ve.config.seed = r.seed), 
                        Ve.config.urlConfig.push({
                            id: "hidepassed",
                            label: "Hide passed tests",
                            tooltip: "Only show tests and assertions that fail. Stored as query-strings."
                        }, {
                            id: "noglobals",
                            label: "Check for Globals",
                            tooltip: "Enabling this will test if any test introduces new properties on the global object (`window` in Browsers). Stored as query-strings."
                        }, {
                            id: "notrycatch",
                            label: "No try-catch",
                            tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings."
                        }), Ve.begin(function() {
                            var t, e, n = Ve.config.urlConfig;
                            for (t = 0; t < n.length; t++) e = Ve.config.urlConfig[t], "string" != typeof e && (e = e.id), 
                            void 0 === Ve.config[e] && (Ve.config[e] = r[e]);
                        });
                    }
                }();
                var Ze = {
                    passedTests: 0,
                    failedTests: 0,
                    skippedTests: 0,
                    todoTests: 0
                };
                !function() {
                    function t(t, e, n) {
                        t.addEventListener(e, n, !1);
                    }
                    function e(t, e, n) {
                        t.removeEventListener(e, n, !1);
                    }
                    function n(e, n, r) {
                        for (var i = e.length; i--; ) t(e[i], n, r);
                    }
                    function r(t, e) {
                        return (" " + t.className + " ").indexOf(" " + e + " ") >= 0;
                    }
                    function i(t, e) {
                        r(t, e) || (t.className += (t.className ? " " : "") + e);
                    }
                    function o(t, e, n) {
                        n || "undefined" == typeof n && !r(t, e) ? i(t, e) : s(t, e);
                    }
                    function s(t, e) {
                        for (var n = " " + t.className + " "; n.indexOf(" " + e + " ") >= 0; ) n = n.replace(" " + e + " ", " ");
                        t.className = "function" == typeof n.trim ? n.trim() : n.replace(/^\s+|\s+$/g, "");
                    }
                    function u(t) {
                        return j.getElementById && j.getElementById(t);
                    }
                    function a() {
                        var t = u("qunit-abort-tests-button");
                        return t && (t.disabled = !0, t.innerHTML = "Aborting..."), Ve.config.queue.length = 0, 
                        !1;
                    }
                    function l(t) {
                        return h(), t && t.preventDefault && t.preventDefault(), !1;
                    }
                    function c() {
                        var t, e, n, r, i, o = !1, s = S.urlConfig, u = "";
                        for (t = 0; t < s.length; t++) if (n = S.urlConfig[t], "string" == typeof n && (n = {
                            id: n,
                            label: n
                        }), r = Bt(n.id), i = Bt(n.tooltip), n.value && "string" != typeof n.value) {
                            if (u += "<label for='qunit-urlconfig-" + r + "' title='" + i + "'>" + n.label + ": </label><select id='qunit-urlconfig-" + r + "' name='" + r + "' title='" + i + "'><option></option>", 
                            Ve.is("array", n.value)) for (e = 0; e < n.value.length; e++) r = Bt(n.value[e]), 
                            u += "<option value='" + r + "'" + (S[n.id] === n.value[e] ? (o = !0) && " selected='selected'" : "") + ">" + r + "</option>"; else for (e in n.value) I.call(n.value, e) && (u += "<option value='" + Bt(e) + "'" + (S[n.id] === e ? (o = !0) && " selected='selected'" : "") + ">" + Bt(n.value[e]) + "</option>");
                            S[n.id] && !o && (r = Bt(S[n.id]), u += "<option value='" + r + "' selected='selected' disabled='disabled'>" + r + "</option>"), 
                            u += "</select>";
                        } else u += "<label for='qunit-urlconfig-" + r + "' title='" + i + "'><input id='qunit-urlconfig-" + r + "' name='" + r + "' type='checkbox'" + (n.value ? " value='" + Bt(n.value) + "'" : "") + (S[n.id] ? " checked='checked'" : "") + " title='" + i + "' />" + Bt(n.label) + "</label>";
                        return u;
                    }
                    function f() {
                        var t, e, n, r = this, i = {};
                        if (e = "selectedIndex" in r ? r.options[r.selectedIndex].value || void 0 : r.checked ? r.defaultValue || !0 : void 0, 
                        i[r.name] = e, t = d(i), "hidepassed" === r.name && "replaceState" in $t.history) {
                            if (Ve.urlParams[r.name] = e, S[r.name] = e || !1, n = u("qunit-tests")) {
                                var o = n.children.length, s = n.children;
                                if (r.checked) {
                                    for (var a = 0; a < o; a++) {
                                        var l = s[a];
                                        l && l.className.indexOf("pass") > -1 && M.push(l);
                                    }
                                    var c = !0, f = !1, h = void 0;
                                    try {
                                        for (var p, m = M[Symbol.iterator](); !(c = (p = m.next()).done); c = !0) {
                                            var g = p.value;
                                            n.removeChild(g);
                                        }
                                    } catch (t) {
                                        f = !0, h = t;
                                    } finally {
                                        try {
                                            !c && m.return && m.return();
                                        } finally {
                                            if (f) throw h;
                                        }
                                    }
                                } else for (;null != (l = M.pop()); ) n.appendChild(l);
                            }
                            $t.history.replaceState(null, "", t);
                        } else $t.location = t;
                    }
                    function d(t) {
                        var e, n, r, i = "?", o = $t.location;
                        t = Ve.extend(Ve.extend({}, Ve.urlParams), t);
                        for (e in t) if (I.call(t, e) && void 0 !== t[e]) for (n = [].concat(t[e]), r = 0; r < n.length; r++) i += encodeURIComponent(e), 
                        n[r] !== !0 && (i += "=" + encodeURIComponent(n[r])), i += "&";
                        return o.protocol + "//" + o.host + o.pathname + i.slice(0, -1);
                    }
                    function h() {
                        var t, e = [], n = u("qunit-modulefilter-dropdown-list").getElementsByTagName("input"), r = u("qunit-filter-input").value;
                        for (t = 0; t < n.length; t++) n[t].checked && e.push(n[t].value);
                        $t.location = d({
                            filter: "" === r ? void 0 : r,
                            moduleId: 0 === e.length ? void 0 : e,
                            module: void 0,
                            testId: void 0
                        });
                    }
                    function p() {
                        var t = j.createElement("span");
                        return t.innerHTML = c(), i(t, "qunit-url-config"), n(t.getElementsByTagName("input"), "change", f), 
                        n(t.getElementsByTagName("select"), "change", f), t;
                    }
                    function m() {
                        var e = j.createElement("button");
                        return e.id = "qunit-abort-tests-button", e.innerHTML = "Abort", t(e, "click", a), 
                        e;
                    }
                    function g() {
                        var e = j.createElement("form"), n = j.createElement("label"), r = j.createElement("input"), o = j.createElement("button");
                        return i(e, "qunit-filter"), n.innerHTML = "Filter: ", r.type = "text", r.value = S.filter || "", 
                        r.name = "filter", r.id = "qunit-filter-input", o.innerHTML = "Go", n.appendChild(r), 
                        e.appendChild(n), e.appendChild(j.createTextNode(" ")), e.appendChild(o), t(e, "submit", l), 
                        e;
                    }
                    function v() {
                        var t, e, n = "";
                        for (t = 0; t < S.modules.length; t++) "" !== S.modules[t].name && (e = S.moduleId.indexOf(S.modules[t].moduleId) > -1, 
                        n += "<li><label class='clickable" + (e ? " checked" : "") + "'><input type='checkbox' value='" + S.modules[t].moduleId + "'" + (e ? " checked='checked'" : "") + " />" + Bt(S.modules[t].name) + "</label></li>");
                        return n;
                    }
                    function y() {
                        function n() {
                            function n(t) {
                                var i = f.contains(t.target);
                                27 !== t.keyCode && i || (27 === t.keyCode && i && p.focus(), m.style.display = "none", 
                                e(j, "click", n), e(j, "keydown", n), p.value = "", r());
                            }
                            "none" === m.style.display && (m.style.display = "block", t(j, "click", n), t(j, "keydown", n));
                        }
                        function r() {
                            var t, e, n = p.value.toLowerCase(), r = y.children;
                            for (t = 0; t < r.length; t++) e = r[t], !n || e.textContent.toLowerCase().indexOf(n) > -1 ? e.style.display = "" : e.style.display = "none";
                        }
                        function i(t) {
                            var e, n, r = t && t.target || u, i = y.getElementsByTagName("input"), l = [];
                            for (o(r.parentNode, "checked", r.checked), b = !1, r.checked && r !== u && (u.checked = !1, 
                            s(u.parentNode, "checked")), e = 0; e < i.length; e++) n = i[e], t ? r === u && r.checked && (n.checked = !1, 
                            s(n.parentNode, "checked")) : o(n.parentNode, "checked", n.checked), b = b || n.checked !== n.defaultChecked, 
                            n.checked && l.push(n.parentNode.textContent);
                            a.style.display = c.style.display = b ? "" : "none", p.placeholder = l.join(", ") || u.parentNode.textContent, 
                            p.title = "Type to filter list. Current selection:\n" + (l.join("\n") || u.parentNode.textContent);
                        }
                        var u, a, c, f = j.createElement("form"), d = j.createElement("label"), p = j.createElement("input"), m = j.createElement("div"), g = j.createElement("span"), y = j.createElement("ul"), b = !1;
                        return p.id = "qunit-modulefilter-search", p.autocomplete = "off", t(p, "input", r), 
                        t(p, "input", n), t(p, "focus", n), t(p, "click", n), d.id = "qunit-modulefilter-search-container", 
                        d.innerHTML = "Module: ", d.appendChild(p), g.id = "qunit-modulefilter-actions", 
                        g.innerHTML = "<button style='display:none'>Apply</button><button type='reset' style='display:none'>Reset</button><label class='clickable" + (S.moduleId.length ? "" : " checked") + "'><input type='checkbox'" + (S.moduleId.length ? "" : " checked='checked'") + " />All modules</label>", 
                        u = g.lastChild.firstChild, a = g.firstChild, c = a.nextSibling, t(a, "click", h), 
                        y.id = "qunit-modulefilter-dropdown-list", y.innerHTML = v(), m.id = "qunit-modulefilter-dropdown", 
                        m.style.display = "none", m.appendChild(g), m.appendChild(y), t(m, "change", i), 
                        i(), f.id = "qunit-modulefilter", f.appendChild(d), f.appendChild(m), t(f, "submit", l), 
                        t(f, "reset", function() {
                            $t.setTimeout(i);
                        }), f;
                    }
                    function b() {
                        var t = u("qunit-testrunner-toolbar");
                        t && (t.appendChild(p()), t.appendChild(y()), t.appendChild(g()), t.appendChild(j.createElement("div")).className = "clearfix");
                    }
                    function w() {
                        var t = u("qunit-header");
                        t && (t.innerHTML = "<a href='" + Bt(R) + "'>" + t.innerHTML + "</a> ");
                    }
                    function x() {
                        var t = u("qunit-banner");
                        t && (t.className = "");
                    }
                    function k() {
                        var t, e = u("qunit-tests"), n = u("qunit-testresult");
                        n && n.parentNode.removeChild(n), e && (e.innerHTML = "", n = j.createElement("p"), 
                        n.id = "qunit-testresult", n.className = "result", e.parentNode.insertBefore(n, e), 
                        n.innerHTML = '<div id="qunit-testresult-display">Running...<br />&#160;</div><div id="qunit-testresult-controls"></div><div class="clearfix"></div>', 
                        t = u("qunit-testresult-controls")), t && t.appendChild(m());
                    }
                    function _() {
                        var t = Ve.config.testId;
                        return !t || t.length <= 0 ? "" : "<div id='qunit-filteredTest'>Rerunning selected tests: " + Bt(t.join(", ")) + " <a id='qunit-clearFilter' href='" + Bt(R) + "'>Run all tests</a></div>";
                    }
                    function E() {
                        var t = u("qunit-userAgent");
                        t && (t.innerHTML = "", t.appendChild(j.createTextNode("QUnit " + Ve.version + "; " + Jt.userAgent)));
                    }
                    function T() {
                        var t = u("qunit");
                        t && (t.innerHTML = "<h1 id='qunit-header'>" + Bt(j.title) + "</h1><h2 id='qunit-banner'></h2><div id='qunit-testrunner-toolbar'></div>" + _() + "<h2 id='qunit-userAgent'></h2><ol id='qunit-tests'></ol>"), 
                        w(), x(), k(), E(), b();
                    }
                    function q(t, e, n) {
                        var r, i, o, s, a = u("qunit-tests");
                        a && (r = j.createElement("strong"), r.innerHTML = C(t, n), i = j.createElement("a"), 
                        i.innerHTML = "Rerun", i.href = d({
                            testId: e
                        }), o = j.createElement("li"), o.appendChild(r), o.appendChild(i), o.id = "qunit-test-output-" + e, 
                        s = j.createElement("ol"), s.className = "qunit-assert-list", o.appendChild(s), 
                        a.appendChild(o));
                    }
                    function C(t, e) {
                        var n = "";
                        return e && (n = "<span class='module-name'>" + Bt(e) + "</span>: "), n += "<span class='test-name'>" + Bt(t) + "</span>";
                    }
                    function N(t) {
                        return t.replace(/<\/?[^>]+(>|$)/g, "").replace(/&quot;/g, "").replace(/\s+/g, "");
                    }
                    if ("undefined" != typeof $t && $t.document) {
                        var S = Ve.config, M = [], j = $t.document, A = !1, I = Object.prototype.hasOwnProperty, R = d({
                            filter: void 0,
                            module: void 0,
                            moduleId: void 0,
                            testId: void 0
                        }), O = [];
                        Ve.begin(function(t) {
                            var e, n;
                            for (e = 0; e < t.modules.length; e++) n = t.modules[e], n.name && O.push(n.name);
                            O.sort(function(t, e) {
                                return t.localeCompare(e);
                            }), T();
                        }), Ve.done(function(t) {
                            var e, n, r, i = u("qunit-banner"), o = u("qunit-tests"), s = u("qunit-abort-tests-button"), a = Ze.passedTests + Ze.skippedTests + Ze.todoTests + Ze.failedTests, l = [ a, " tests completed in ", t.runtime, " milliseconds, with ", Ze.failedTests, " failed, ", Ze.skippedTests, " skipped, and ", Ze.todoTests, " todo.<br />", "<span class='passed'>", t.passed, "</span> assertions of <span class='total'>", t.total, "</span> passed, <span class='failed'>", t.failed, "</span> failed." ].join("");
                            if (s && s.disabled) {
                                l = "Tests aborted after " + t.runtime + " milliseconds.";
                                for (var c = 0; c < o.children.length; c++) e = o.children[c], "" !== e.className && "running" !== e.className || (e.className = "aborted", 
                                r = e.getElementsByTagName("ol")[0], n = j.createElement("li"), n.className = "fail", 
                                n.innerHTML = "Test aborted.", r.appendChild(n));
                            }
                            !i || s && s.disabled !== !1 || (i.className = Ze.failedTests ? "qunit-fail" : "qunit-pass"), 
                            s && s.parentNode.removeChild(s), o && (u("qunit-testresult-display").innerHTML = l), 
                            S.altertitle && j.title && (j.title = [ Ze.failedTests ? "✖" : "✔", j.title.replace(/^[\u2714\u2716] /i, "") ].join(" ")), 
                            S.scrolltop && $t.scrollTo && $t.scrollTo(0, 0);
                        }), Ve.testStart(function(t) {
                            var e, n;
                            q(t.name, t.testId, t.module), e = u("qunit-testresult-display"), e && (i(e, "running"), 
                            n = Ve.config.reorder && t.previousFailure, e.innerHTML = [ n ? "Rerunning previously failed test: <br />" : "Running: <br />", C(t.name, t.module) ].join(""));
                        }), Ve.log(function(t) {
                            var e, n, r, i, o, s, a = !1, l = u("qunit-test-output-" + t.testId);
                            l && (r = Bt(t.message) || (t.result ? "okay" : "failed"), r = "<span class='test-message'>" + r + "</span>", 
                            r += "<span class='runtime'>@ " + t.runtime + " ms</span>", !t.result && I.call(t, "expected") ? (i = t.negative ? "NOT " + Ve.dump.parse(t.expected) : Ve.dump.parse(t.expected), 
                            o = Ve.dump.parse(t.actual), r += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + Bt(i) + "</pre></td></tr>", 
                            o !== i ? (r += "<tr class='test-actual'><th>Result: </th><td><pre>" + Bt(o) + "</pre></td></tr>", 
                            "number" == typeof t.actual && "number" == typeof t.expected ? isNaN(t.actual) || isNaN(t.expected) || (a = !0, 
                            s = t.actual - t.expected, s = (s > 0 ? "+" : "") + s) : "boolean" != typeof t.actual && "boolean" != typeof t.expected && (s = Ve.diff(i, o), 
                            a = N(s).length !== N(i).length + N(o).length), a && (r += "<tr class='test-diff'><th>Diff: </th><td><pre>" + s + "</pre></td></tr>")) : r += i.indexOf("[object Array]") !== -1 || i.indexOf("[object Object]") !== -1 ? "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the depth of object is more than current max depth (" + Ve.config.maxDepth + ").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to  run with a higher max depth or <a href='" + Bt(d({
                                maxDepth: -1
                            })) + "'>Rerun</a> without max depth.</p></td></tr>" : "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the expected and actual results have an equivalent serialization</td></tr>", 
                            t.source && (r += "<tr class='test-source'><th>Source: </th><td><pre>" + Bt(t.source) + "</pre></td></tr>"), 
                            r += "</table>") : !t.result && t.source && (r += "<table><tr class='test-source'><th>Source: </th><td><pre>" + Bt(t.source) + "</pre></td></tr></table>"), 
                            e = l.getElementsByTagName("ol")[0], n = j.createElement("li"), n.className = t.result ? "pass" : "fail", 
                            n.innerHTML = r, e.appendChild(n));
                        }), Ve.testDone(function(e) {
                            var n, r, a, l, c, f, d, h, p, m, g = u("qunit-tests");
                            if (g) {
                                a = u("qunit-test-output-" + e.testId), s(a, "running"), c = e.failed > 0 ? "failed" : e.todo ? "todo" : e.skipped ? "skipped" : "passed", 
                                l = a.getElementsByTagName("ol")[0], f = e.passed, d = e.failed;
                                var v = e.failed > 0 ? e.todo : !e.todo;
                                if (v ? i(l, "qunit-collapsed") : S.collapse && (A ? i(l, "qunit-collapsed") : A = !0), 
                                n = a.firstChild, h = d ? "<b class='failed'>" + d + "</b>, <b class='passed'>" + f + "</b>, " : "", 
                                n.innerHTML += " <b class='counts'>(" + h + e.assertions.length + ")</b>", e.skipped) Ze.skippedTests++, 
                                a.className = "skipped", p = j.createElement("em"), p.className = "qunit-skipped-label", 
                                p.innerHTML = "skipped", a.insertBefore(p, n); else {
                                    if (t(n, "click", function() {
                                        o(l, "qunit-collapsed");
                                    }), a.className = v ? "pass" : "fail", e.todo) {
                                        var y = j.createElement("em");
                                        y.className = "qunit-todo-label", y.innerHTML = "todo", a.className += " todo", 
                                        a.insertBefore(y, n);
                                    }
                                    r = j.createElement("span"), r.className = "runtime", r.innerHTML = e.runtime + " ms", 
                                    a.insertBefore(r, l), v ? e.todo ? Ze.todoTests++ : Ze.passedTests++ : Ze.failedTests++;
                                }
                                e.source && (m = j.createElement("p"), m.innerHTML = "<strong>Source: </strong>" + e.source, 
                                i(m, "qunit-source"), v && i(m, "qunit-collapsed"), t(n, "click", function() {
                                    o(m, "qunit-collapsed");
                                }), a.appendChild(m)), S.hidepassed && "passed" === c && (M.push(a), g.removeChild(a));
                            }
                        });
                        var L = function(t) {
                            return !(t && t.version && t.version.major > 0);
                        }($t.phantom);
                        L && "complete" === j.readyState ? Ve.load() : t($t, "load", Ve.load);
                        var U = $t.onerror;
                        $t.onerror = function(t, e, n, r, i) {
                            var o = !1;
                            if (U) {
                                for (var s = arguments.length, u = Array(s > 5 ? s - 5 : 0), a = 5; a < s; a++) u[a - 5] = arguments[a];
                                o = U.call.apply(U, [ this, t, e, n, r, i ].concat(u));
                            }
                            if (o !== !0) {
                                var l = {
                                    message: t,
                                    fileName: e,
                                    lineNumber: n
                                };
                                i && i.stack && (l.stacktrace = lt(i, 0)), o = Ve.onError(l);
                            }
                            return o;
                        }, $t.addEventListener("unhandledrejection", function(t) {
                            Ve.onUnhandledRejection(t.reason);
                        });
                    }
                }(), Ve.diff = function() {
                    function t() {}
                    var e = -1, n = 1, r = 0;
                    return t.prototype.DiffMain = function(t, e, n) {
                        var i, o, s, u, a, l;
                        if (i = new Date().getTime() + 1e3, null === t || null === e) throw new Error("Null input. (DiffMain)");
                        return t === e ? t ? [ [ r, t ] ] : [] : ("undefined" == typeof n && (n = !0), o = n, 
                        s = this.diffCommonPrefix(t, e), u = t.substring(0, s), t = t.substring(s), e = e.substring(s), 
                        s = this.diffCommonSuffix(t, e), a = t.substring(t.length - s), t = t.substring(0, t.length - s), 
                        e = e.substring(0, e.length - s), l = this.diffCompute(t, e, o, i), u && l.unshift([ r, u ]), 
                        a && l.push([ r, a ]), this.diffCleanupMerge(l), l);
                    }, t.prototype.diffCleanupEfficiency = function(t) {
                        var i, o, s, u, a, l, c, f, d;
                        for (i = !1, o = [], s = 0, u = null, a = 0, l = !1, c = !1, f = !1, d = !1; a < t.length; ) t[a][0] === r ? (t[a][1].length < 4 && (f || d) ? (o[s++] = a, 
                        l = f, c = d, u = t[a][1]) : (s = 0, u = null), f = d = !1) : (t[a][0] === e ? d = !0 : f = !0, 
                        u && (l && c && f && d || u.length < 2 && l + c + f + d === 3) && (t.splice(o[s - 1], 0, [ e, u ]), 
                        t[o[s - 1] + 1][0] = n, s--, u = null, l && c ? (f = d = !0, s = 0) : (s--, a = s > 0 ? o[s - 1] : -1, 
                        f = d = !1), i = !0)), a++;
                        i && this.diffCleanupMerge(t);
                    }, t.prototype.diffPrettyHtml = function(t) {
                        var i, o, s, u = [];
                        for (s = 0; s < t.length; s++) switch (i = t[s][0], o = t[s][1], i) {
                          case n:
                            u[s] = "<ins>" + Bt(o) + "</ins>";
                            break;

                          case e:
                            u[s] = "<del>" + Bt(o) + "</del>";
                            break;

                          case r:
                            u[s] = "<span>" + Bt(o) + "</span>";
                        }
                        return u.join("");
                    }, t.prototype.diffCommonPrefix = function(t, e) {
                        var n, r, i, o;
                        if (!t || !e || t.charAt(0) !== e.charAt(0)) return 0;
                        for (i = 0, r = Math.min(t.length, e.length), n = r, o = 0; i < n; ) t.substring(o, n) === e.substring(o, n) ? (i = n, 
                        o = i) : r = n, n = Math.floor((r - i) / 2 + i);
                        return n;
                    }, t.prototype.diffCommonSuffix = function(t, e) {
                        var n, r, i, o;
                        if (!t || !e || t.charAt(t.length - 1) !== e.charAt(e.length - 1)) return 0;
                        for (i = 0, r = Math.min(t.length, e.length), n = r, o = 0; i < n; ) t.substring(t.length - n, t.length - o) === e.substring(e.length - n, e.length - o) ? (i = n, 
                        o = i) : r = n, n = Math.floor((r - i) / 2 + i);
                        return n;
                    }, t.prototype.diffCompute = function(t, i, o, s) {
                        var u, a, l, c, f, d, h, p, m, g, v, y;
                        return t ? i ? (a = t.length > i.length ? t : i, l = t.length > i.length ? i : t, 
                        c = a.indexOf(l), c !== -1 ? (u = [ [ n, a.substring(0, c) ], [ r, l ], [ n, a.substring(c + l.length) ] ], 
                        t.length > i.length && (u[0][0] = u[2][0] = e), u) : 1 === l.length ? [ [ e, t ], [ n, i ] ] : (f = this.diffHalfMatch(t, i), 
                        f ? (d = f[0], p = f[1], h = f[2], m = f[3], g = f[4], v = this.DiffMain(d, h, o, s), 
                        y = this.DiffMain(p, m, o, s), v.concat([ [ r, g ] ], y)) : o && t.length > 100 && i.length > 100 ? this.diffLineMode(t, i, s) : this.diffBisect(t, i, s))) : [ [ e, t ] ] : [ [ n, i ] ];
                    }, t.prototype.diffHalfMatch = function(t, e) {
                        function n(t, e, n) {
                            var r, i, s, u, a, l, c, f, d;
                            for (r = t.substring(n, n + Math.floor(t.length / 4)), i = -1, s = ""; (i = e.indexOf(r, i + 1)) !== -1; ) u = o.diffCommonPrefix(t.substring(n), e.substring(i)), 
                            a = o.diffCommonSuffix(t.substring(0, n), e.substring(0, i)), s.length < a + u && (s = e.substring(i - a, i) + e.substring(i, i + u), 
                            l = t.substring(0, n - a), c = t.substring(n + u), f = e.substring(0, i - a), d = e.substring(i + u));
                            return 2 * s.length >= t.length ? [ l, c, f, d, s ] : null;
                        }
                        var r, i, o, s, u, a, l, c, f, d, h;
                        return r = t.length > e.length ? t : e, i = t.length > e.length ? e : t, r.length < 4 || 2 * i.length < r.length ? null : (o = this, 
                        f = n(r, i, Math.ceil(r.length / 4)), d = n(r, i, Math.ceil(r.length / 2)), f || d ? (h = d ? f && f[4].length > d[4].length ? f : d : f, 
                        t.length > e.length ? (s = h[0], l = h[1], a = h[2], u = h[3]) : (a = h[0], u = h[1], 
                        s = h[2], l = h[3]), c = h[4], [ s, l, a, u, c ]) : null);
                    }, t.prototype.diffLineMode = function(t, i, o) {
                        var s, u, a, l, c, f, d, h, p;
                        for (s = this.diffLinesToChars(t, i), t = s.chars1, i = s.chars2, a = s.lineArray, 
                        u = this.DiffMain(t, i, !1, o), this.diffCharsToLines(u, a), this.diffCleanupSemantic(u), 
                        u.push([ r, "" ]), l = 0, f = 0, c = 0, h = "", d = ""; l < u.length; ) {
                            switch (u[l][0]) {
                              case n:
                                c++, d += u[l][1];
                                break;

                              case e:
                                f++, h += u[l][1];
                                break;

                              case r:
                                if (f >= 1 && c >= 1) {
                                    for (u.splice(l - f - c, f + c), l = l - f - c, s = this.DiffMain(h, d, !1, o), 
                                    p = s.length - 1; p >= 0; p--) u.splice(l, 0, s[p]);
                                    l += s.length;
                                }
                                c = 0, f = 0, h = "", d = "";
                            }
                            l++;
                        }
                        return u.pop(), u;
                    }, t.prototype.diffBisect = function(t, r, i) {
                        var o, s, u, a, l, c, f, d, h, p, m, g, v, y, b, w, x, k, _, E, T, q, C;
                        for (o = t.length, s = r.length, u = Math.ceil((o + s) / 2), a = u, l = 2 * u, c = new Array(l), 
                        f = new Array(l), d = 0; d < l; d++) c[d] = -1, f[d] = -1;
                        for (c[a + 1] = 0, f[a + 1] = 0, h = o - s, p = h % 2 !== 0, m = 0, g = 0, v = 0, 
                        y = 0, T = 0; T < u && !(new Date().getTime() > i); T++) {
                            for (q = -T + m; q <= T - g; q += 2) {
                                for (w = a + q, x = q === -T || q !== T && c[w - 1] < c[w + 1] ? c[w + 1] : c[w - 1] + 1, 
                                _ = x - q; x < o && _ < s && t.charAt(x) === r.charAt(_); ) x++, _++;
                                if (c[w] = x, x > o) g += 2; else if (_ > s) m += 2; else if (p && (b = a + h - q, 
                                b >= 0 && b < l && f[b] !== -1 && (k = o - f[b], x >= k))) return this.diffBisectSplit(t, r, x, _, i);
                            }
                            for (C = -T + v; C <= T - y; C += 2) {
                                for (b = a + C, k = C === -T || C !== T && f[b - 1] < f[b + 1] ? f[b + 1] : f[b - 1] + 1, 
                                E = k - C; k < o && E < s && t.charAt(o - k - 1) === r.charAt(s - E - 1); ) k++, 
                                E++;
                                if (f[b] = k, k > o) y += 2; else if (E > s) v += 2; else if (!p && (w = a + h - C, 
                                w >= 0 && w < l && c[w] !== -1 && (x = c[w], _ = a + x - w, k = o - k, x >= k))) return this.diffBisectSplit(t, r, x, _, i);
                            }
                        }
                        return [ [ e, t ], [ n, r ] ];
                    }, t.prototype.diffBisectSplit = function(t, e, n, r, i) {
                        var o, s, u, a, l, c;
                        return o = t.substring(0, n), u = e.substring(0, r), s = t.substring(n), a = e.substring(r), 
                        l = this.DiffMain(o, u, !1, i), c = this.DiffMain(s, a, !1, i), l.concat(c);
                    }, t.prototype.diffCleanupSemantic = function(t) {
                        var i, o, s, u, a, l, c, f, d, h, p, m, g;
                        for (i = !1, o = [], s = 0, u = null, a = 0, f = 0, d = 0, l = 0, c = 0; a < t.length; ) t[a][0] === r ? (o[s++] = a, 
                        f = l, d = c, l = 0, c = 0, u = t[a][1]) : (t[a][0] === n ? l += t[a][1].length : c += t[a][1].length, 
                        u && u.length <= Math.max(f, d) && u.length <= Math.max(l, c) && (t.splice(o[s - 1], 0, [ e, u ]), 
                        t[o[s - 1] + 1][0] = n, s--, s--, a = s > 0 ? o[s - 1] : -1, f = 0, d = 0, l = 0, 
                        c = 0, u = null, i = !0)), a++;
                        for (i && this.diffCleanupMerge(t), a = 1; a < t.length; ) t[a - 1][0] === e && t[a][0] === n && (h = t[a - 1][1], 
                        p = t[a][1], m = this.diffCommonOverlap(h, p), g = this.diffCommonOverlap(p, h), 
                        m >= g ? (m >= h.length / 2 || m >= p.length / 2) && (t.splice(a, 0, [ r, p.substring(0, m) ]), 
                        t[a - 1][1] = h.substring(0, h.length - m), t[a + 1][1] = p.substring(m), a++) : (g >= h.length / 2 || g >= p.length / 2) && (t.splice(a, 0, [ r, h.substring(0, g) ]), 
                        t[a - 1][0] = n, t[a - 1][1] = p.substring(0, p.length - g), t[a + 1][0] = e, t[a + 1][1] = h.substring(g), 
                        a++), a++), a++;
                    }, t.prototype.diffCommonOverlap = function(t, e) {
                        var n, r, i, o, s, u, a;
                        if (n = t.length, r = e.length, 0 === n || 0 === r) return 0;
                        if (n > r ? t = t.substring(n - r) : n < r && (e = e.substring(0, n)), i = Math.min(n, r), 
                        t === e) return i;
                        for (o = 0, s = 1; ;) {
                            if (u = t.substring(i - s), a = e.indexOf(u), a === -1) return o;
                            s += a, 0 !== a && t.substring(i - s) !== e.substring(0, s) || (o = s, s++);
                        }
                    }, t.prototype.diffLinesToChars = function(t, e) {
                        function n(t) {
                            var e, n, o, s, u;
                            for (e = "", n = 0, o = -1, s = r.length; o < t.length - 1; ) {
                                o = t.indexOf("\n", n), o === -1 && (o = t.length - 1), u = t.substring(n, o + 1), 
                                n = o + 1;
                                var a = i.hasOwnProperty ? i.hasOwnProperty(u) : void 0 !== i[u];
                                a ? e += String.fromCharCode(i[u]) : (e += String.fromCharCode(s), i[u] = s, r[s++] = u);
                            }
                            return e;
                        }
                        var r, i, o, s;
                        return r = [], i = {}, r[0] = "", o = n(t), s = n(e), {
                            chars1: o,
                            chars2: s,
                            lineArray: r
                        };
                    }, t.prototype.diffCharsToLines = function(t, e) {
                        var n, r, i, o;
                        for (n = 0; n < t.length; n++) {
                            for (r = t[n][1], i = [], o = 0; o < r.length; o++) i[o] = e[r.charCodeAt(o)];
                            t[n][1] = i.join("");
                        }
                    }, t.prototype.diffCleanupMerge = function(t) {
                        var i, o, s, u, a, l, c, f, d;
                        for (t.push([ r, "" ]), i = 0, o = 0, s = 0, a = "", u = ""; i < t.length; ) switch (t[i][0]) {
                          case n:
                            s++, u += t[i][1], i++;
                            break;

                          case e:
                            o++, a += t[i][1], i++;
                            break;

                          case r:
                            o + s > 1 ? (0 !== o && 0 !== s && (l = this.diffCommonPrefix(u, a), 0 !== l && (i - o - s > 0 && t[i - o - s - 1][0] === r ? t[i - o - s - 1][1] += u.substring(0, l) : (t.splice(0, 0, [ r, u.substring(0, l) ]), 
                            i++), u = u.substring(l), a = a.substring(l)), l = this.diffCommonSuffix(u, a), 
                            0 !== l && (t[i][1] = u.substring(u.length - l) + t[i][1], u = u.substring(0, u.length - l), 
                            a = a.substring(0, a.length - l))), 0 === o ? t.splice(i - s, o + s, [ n, u ]) : 0 === s ? t.splice(i - o, o + s, [ e, a ]) : t.splice(i - o - s, o + s, [ e, a ], [ n, u ]), 
                            i = i - o - s + (o ? 1 : 0) + (s ? 1 : 0) + 1) : 0 !== i && t[i - 1][0] === r ? (t[i - 1][1] += t[i][1], 
                            t.splice(i, 1)) : i++, s = 0, o = 0, a = "", u = "";
                        }
                        for ("" === t[t.length - 1][1] && t.pop(), c = !1, i = 1; i < t.length - 1; ) t[i - 1][0] === r && t[i + 1][0] === r && (f = t[i][1], 
                        d = f.substring(f.length - t[i - 1][1].length), d === t[i - 1][1] ? (t[i][1] = t[i - 1][1] + t[i][1].substring(0, t[i][1].length - t[i - 1][1].length), 
                        t[i + 1][1] = t[i - 1][1] + t[i + 1][1], t.splice(i - 1, 1), c = !0) : f.substring(0, t[i + 1][1].length) === t[i + 1][1] && (t[i - 1][1] += t[i + 1][1], 
                        t[i][1] = t[i][1].substring(t[i + 1][1].length) + t[i + 1][1], t.splice(i + 1, 1), 
                        c = !0)), i++;
                        c && this.diffCleanupMerge(t);
                    }, function(e, n) {
                        var r, i, o;
                        return r = new t(), i = r.DiffMain(e, n), r.diffCleanupEfficiency(i), o = r.diffPrettyHtml(i);
                    };
                }();
            }(function() {
                return this;
            }());
        }).call(e, n(431), function() {
            return this;
        }(), n(290)(t));
    },
    921: function(t, e, n) {
        var r, i;
        !function(o, s) {
            "use strict";
            r = s, i = "function" == typeof r ? r.call(e, n, e, t) : r, !(void 0 !== i && (t.exports = i));
        }(this, function() {
            "use strict";
            function t(t, e) {
                var n;
                for (n in e) e.hasOwnProperty(n) && ("undefined" == typeof e[n] ? delete t[n] : t[n] = e[n]);
                return t;
            }
            function e(t, e) {
                var n;
                for (n = 0; n < t.length; n += 1) if (t[n] === e) return n;
                return -1;
            }
            function n(t, n) {
                var r = e(t, n);
                return r !== -1 ? t.splice(r, 1) : [];
            }
            function r(t) {
                return "undefined" != typeof t && "undefined" != typeof t.requireExpects && t.requireExpects;
            }
            function i(t) {
                return !!t.result;
            }
            function o(t) {
                return !i(t);
            }
            function s(t) {
                return o(t) && "undefined" == typeof t.expected && "undefined" == typeof t.actual;
            }
            function u(t) {
                return t.replace(/(\r?\n)/g, "$&# ");
            }
            function a(t) {
                return t.replace(/^\s+/, "");
            }
            function l(t) {
                return t;
            }
            function c(t, e, n, r) {
                t.push(e + ": " + r(n));
            }
            function f(t, e, n, r, i) {
                t && "undefined" != typeof r && c(e, n, r, i);
            }
            function d(t, e) {
                return e ? t + " - " + u(e) : t;
            }
            function h(h, v, y) {
                function b(t) {
                    return T.config[t];
                }
                function w(t) {
                    if (i(t)) return t.message;
                    var e = [];
                    return t.message && e.push(t.message), b("showExpectationOnFailure") && !s(t) && (c(e, "expected", t.expected, S), 
                    c(e, "got", t.actual, S)), f(b("showTestNameOnFailure"), e, "test", t.name, l), 
                    f(b("showModuleNameOnFailure"), e, "module", t.module, l), f(b("showSourceOnFailure"), e, "source", t.source, a), 
                    e.join(", ");
                }
                function x(t) {
                    T.puts(T.config.initialCount + ".." + t);
                }
                function k(t) {
                    var r;
                    e(C, t) !== -1 && (r = E.config[t], "undefined" != typeof r && n(r, N[t]));
                }
                function _(t) {
                    var e;
                    for (e = 0; e < t.length; e += 1) k(t[e]);
                }
                if (!h) throw new Error('should pass QUnit object reference. Please check QUnit\'s "require" path if you are using Node.js (or any CommonJS env).');
                if ("function" != typeof v) throw new Error("should pass print-like function");
                var E = h, T = {}, q = function(t, e) {
                    y && "object" == typeof y && "undefined" != typeof y[t] && (v('# WARNING: Option "' + t + '" is deprecated and will be removed in future version.'), 
                    e(y[t]));
                }, C = [ "moduleStart", "testStart", "log", "testDone", "done" ], N = {}, S = function() {
                    return "undefined" != typeof E.dump && "function" == typeof E.dump.parse ? function(t) {
                        return E.dump.parse(t);
                    } : "undefined" != typeof E.jsDump && "function" == typeof E.jsDump.parse ? function(t) {
                        return E.jsDump.parse(t);
                    } : l;
                }();
                return T.config = t({
                    initialCount: 1,
                    showModuleNameOnFailure: !0,
                    showTestNameOnFailure: !0,
                    showExpectationOnFailure: !0,
                    showSourceOnFailure: !0
                }, y), q("noPlan", function(t) {
                    v('# Now QUnit-TAP works as with "noPlan: true" by default. If you want to delare plan explicitly, please use "QUnit.config.requireExpects" option instead.'), 
                    T.config.noPlan = t;
                }), q("count", function(t) {
                    T.config.initialCount = t + 1;
                }), q("showDetailsOnFailure", function(t) {
                    T.config.showModuleNameOnFailure = t, T.config.showTestNameOnFailure = t, T.config.showExpectationOnFailure = t, 
                    T.config.showSourceOnFailure = t;
                }), T.VERSION = p, T.puts = v, T.count = T.config.initialCount - 1, T.expectedCount = T.config.initialCount - 1, 
                T.explain = S, T.note = function(t) {
                    T.puts(u("# " + t));
                }, T.diag = function(t) {
                    return T.note(t), !1;
                }, T.moduleStart = function(t) {
                    var e = "string" == typeof t ? t : t.name;
                    T.note("module: " + e);
                }, T.testStart = function(t) {
                    var e = "string" == typeof t ? t : t.name;
                    T.note("test: " + e);
                }, T.log = function(t) {
                    var e = "";
                    T.count += 1, o(t) && (e += "not "), e += "ok " + T.count, T.puts(d(e, w(t)));
                }, T.testDone = function() {
                    r(E.config) && (T.expectedCount += E.config.current.expected);
                }, T.done = function() {
                    ("undefined" == typeof T.config.noPlan || T.config.noPlan) && x(r(E.config) ? T.expectedCount : T.count);
                }, T.unsubscribe = function() {
                    "undefined" != typeof E.config && _(0 === arguments.length ? C : m.apply(arguments));
                }, function() {
                    var t, e, n, r = g(E);
                    for (e = 0; e < C.length; e += 1) t = C[e], n = r(E, T, t), N[t] = n;
                }(), T;
            }
            var p = "1.5.1", m = Array.prototype.slice, g = function(t) {
                return function(t, e, n) {
                    var r = t[n], i = function() {
                        e[n].apply(e, m.apply(arguments));
                    };
                    return r(i), i;
                };
            };
            return h.qunitTap = function() {
                throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require("qunit-tap") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');
            }, h;
        });
    },
    922: function(t, e) {
        "use strict";
        var n = !1;
        QUnit.config.autostart = !1;
        var r = window.onerror;
        window.onerror = null, QUnit.begin(function() {
            window.onerror = function(t, e, n) {
                var i = !1;
                return r && (i = r(t, e, n)), QUnit.config.current && QUnit.config.current.async && QUnit.start(), 
                i;
            };
        }), QUnit.moduleStart(function() {
            n = !0;
        }), QUnit.done(function() {
            window.setTimeout(function() {
                console.log("cockpittest-tap-done");
            }, 0), window.onerror = null;
        });
        var i = /^((not )?ok [0-9]+ (- )?)(.*)$/;
        qunitTap(QUnit, function() {
            if (1 == arguments.length && QUnit.config.current) {
                var t = i.exec(arguments[0]);
                if (t) return void console.log(t[1] + QUnit.config.current.testName + ": " + t[4]);
            }
            console.log.apply(console, arguments);
        }), window.setTimeout(function() {
            n || (console.log("QUnit not started by test"), console.log("cockpittest-tap-error"));
        }, 2e4), window.tests_included = !0;
    },
    923: function(t, e) {}
});
//# sourceMappingURL=test-utils.min.js.map