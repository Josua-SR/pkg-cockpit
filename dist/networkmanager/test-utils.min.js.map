{"version":3,"sources":["webpack:///networkmanager/test-utils.min.js","webpack:///webpack/bootstrap 33f16c6aa8ffb9642269?ad90","webpack:///../pkg/networkmanager/test-utils.js","webpack:///external \"cockpit\"?478e","webpack:///../pkg/networkmanager/utils.js?0508","webpack:///../pkg/lib/qunit-tests.js","webpack:///../~/qunitjs/qunit/qunit.js","webpack:///../~/process/browser.js","webpack:///../~/webpack/buildin/module.js","webpack:///../~/qunit-tap/lib/qunit-tap.js","webpack:///../pkg/lib/qunit-config.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","assert_throws","func","checks","assert","expect","length","forEach","throws","utils","cockpit","QUnit","test","strictEqual","ip_prefix_from_text","ip_metric_from_text","set_byteorder","ip4_to_text","replace","ip4_from_text","i","ip4_prefix_from_text","ip6_to_text","base64_encode","deepEqual","base64_decode","ip6_from_text","zero","start","bo","byteorder","ip_prefix_to_text","num","toString","text","trim","parseInt","format","_","ip_metric_to_text","toDec","n","bytes_from_nm32","bytes","zero_is_empty","map","join","empty_is_zero","invalid","shift","b","isNaN","parts","split","s","prefix","text_to_prefix_bits","undefined","data","result","j","empty_seen","gettext","255","254","252","248","240","224","192","128","0","window","qunitTap","__WEBPACK_AMD_DEFINE_RESULT__","process","global","diff","a","slice","splice","inArray","elem","array","indexOf","objectValues","obj","key","val","vals","is","hasOwn","Object","extend","undefOnly","prop","objectType","match","type","toLowerCase","extractStacktrace","e","offset","stack","include","fileName","push","sourceURL","line","sourceFromStacktrace","error","Error","err","registerLoggingCallbacks","registerLoggingCallback","loggingCallback","callback","config","callbacks","loggingCallbacks","l","callbackNames","runLoggingCallbacks","args","verifyLoggingCallbacks","userCallback","console","warn","begin","modulesLog","started","now","name","tests","totalTests","Test","count","blocking","last","next","depth","queue","defined","setTimeout","updateRate","current","usedAsync","done","pauseProcessing","testTimeout","clearTimeout","timeout","semaphore","pushFailure","resumeProcessing","runStarted","runtime","passed","autorun","previousModule","failed","moduleStats","bad","all","total","stats","setHook","hookName","testEnvironment","settings","this","assertions","currentModule","testName","testId","generateHash","skip","async","expected","Assert","hex","hash","str","len","charCodeAt","synchronize","priority","seed","index","priorityCount","unitSampler","unitSamplerGenerator","Math","floor","sample","saveGlobal","pollution","noglobals","checkPollution","newGlobals","deletedGlobals","old","asyncTest","arguments","focused","newTest","only","testContext","errorString","message","resultErrorString","substring","Date","getTime","document","sessionStorage","x","setItem","removeItem","globalStartCalled","prototype","hasOwnProperty","reorder","altertitle","collapse","scrolltop","maxDepth","requireExpects","urlConfig","moduleStack","onErrorFnPrev","onerror","filePath","linerNr","ret","ignoreGlobalErrors","validTest","isLocal","location","protocol","version","executeNow","createModule","parentModule","moduleName","env","beforeEach","afterEach","setCurrentModule","moduleFns","setup","teardown","pop","globalStartAlreadyCalled","autostart","pageLoaded","stop","load","filter","before","run","runTest","promise","resolvePromise","callbackStarted","notrycatch","after","queueHook","hook","callHook","hooks","handler","processHooks","finish","skipped","source","duration","reset","reverse","valid","getItem","pushResult","resultInfo","details","actual","negative","phase","then","moduleChainNameMatch","testModule","testModuleName","moduleChainIdMatch","regexFilter","exec","fullName","stringFilter","exclude","pattern","flags","regex","RegExp","charAt","fixture","getElementById","innerHTML","currentTest","apply","asserts","popped","acceptCallCount","currentAssert","ok","dump","parse","notOk","equal","notEqual","propEqual","equiv","notPropEqual","notDeepEqual","notStrictEqual","block","expectedType","expectedOutput","constructor","raises","useStrictEquality","valueOf","compareConstructors","protoA","getProto","protoB","getRegExpFlags","regexp","typeEquiv","innerEquiv","callers","parents","parentsB","getPrototypeOf","__proto__","string","boolean","number","null","symbol","date","nan","function","caller","loop","aCircular","bCircular","set","innerEq","outerEq","size","aVal","bVal","aKey","bKey","object","eq","aProperties","bProperties","sort","quote","literal","o","pre","arr","post","separator","base","indent","inner","Array","up","down","reName","objType","res","parser","parserType","inStack","typeOf","parsers","setInterval","nodeType","item","multiline","HTML","extra","chr","indentChar","setParser","unknown","fn","nodelist","keys","nonEnumerableProperties","node","open","close","tag","nodeName","attrs","attributes","nodeValue","functionArgs","String","fromCharCode","functionCode","attribute","jsDump","applyCurrent","getUrlParams","param","value","urlParams","params","search","decodeURIComponent","concat","escapeText","addEvent","addEventListener","attachEvent","event","target","srcElement","addEvents","elems","hasClass","className","addClass","toggleClass","force","removeClass","getUrlConfigHtml","escaped","escapedTooltip","selection","urlConfigHtml","label","tooltip","toolbarChanged","updatedUrl","field","options","selectedIndex","checked","defaultValue","setUrl","history","replaceState","arrValue","querystring","encodeURIComponent","host","pathname","applyUrlParams","selectedModule","modulesList","toolbarUrlConfigContainer","urlConfigContainer","createElement","getElementsByTagName","toolbarLooseFilter","input","button","appendChild","ev","preventDefault","toolbarModuleFilterHtml","moduleFilterHtml","toolbarModuleFilter","toolbar","moduleFilter","setAttribute","lastChild","appendToolbar","appendHeader","header","unfilteredUrl","appendBanner","banner","appendTestResults","parentNode","removeChild","insertBefore","storeFixture","appendFilteredTest","appendUserAgent","userAgent","createTextNode","navigator","appendInterface","qunit","title","appendTestsList","z","moduleObj","appendTest","rerunTrigger","testBlock","assertList","getNameHtml","href","nameHtml","stripHtml","random","option","init","collapseNext","localeCompare","hidepassed","html","scrollTo","testStart","running","log","assertLi","showDiff","testItem","testDone","testTitle","time","good","testCounts","sourceName","firstChild","notPhantom","major","phantom","readyState","DiffMatchPatch","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","DiffMain","text1","text2","optChecklines","deadline","checklines","commonlength","commonprefix","commonsuffix","diffs","diffCommonPrefix","diffCommonSuffix","diffCompute","unshift","diffCleanupMerge","diffCleanupEfficiency","changes","equalities","equalitiesLength","lastequality","pointer","preIns","preDel","postIns","postDel","diffPrettyHtml","op","pointermid","pointermax","pointermin","pointerstart","min","pointerend","longtext","shorttext","hm","text1A","text2A","text1B","text2B","midCommon","diffsA","diffsB","diffHalfMatch","diffLineMode","diffBisect","diffHalfMatchI","bestCommon","prefixLength","suffixLength","bestLongtextA","bestLongtextB","bestShorttextA","bestShorttextB","dmp","hm1","hm2","ceil","linearray","countInsert","countDelete","textInsert","textDelete","diffLinesToChars","chars1","chars2","lineArray","diffCharsToLines","diffCleanupSemantic","text1Length","text2Length","maxD","vOffset","vLength","v1","v2","delta","front","k1start","k1end","k2start","k2end","k2Offset","k1Offset","x1","x2","y1","y2","d","k1","k2","diffBisectSplit","y","text1a","text1b","text2a","text2b","diffsb","lengthInsertions2","lengthDeletions2","lengthInsertions1","lengthDeletions1","deletion","insertion","overlapLength1","overlapLength2","max","diffCommonOverlap","textLength","best","found","diffLinesToCharsMunge","chars","lineStart","lineEnd","lineArrayLength","lineHash","diffPointer","position","output","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","Item","noop","nextTick","browser","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","webpackPolyfill","deprecate","paths","children","__WEBPACK_AMD_DEFINE_FACTORY__","root","factory","ary","element","removeElement","isPlanRequired","conf","isPassed","isFailed","isAssertOkFailed","escapeLineEndings","ltrim","render","desc","fieldName","fieldValue","formatter","renderIf","shouldRender","formatTestLine","testLine","rest","qunitObject","printLikeFunction","isEnabled","configName","tap","formatDetails","explain","printPlanLine","toCount","puts","initialCount","unsubscribeEvent","eventName","targetEvents","qu","registeredCallbacks","unsubscribeEvents","eventNames","deprecateOption","optionName","fallback","showModuleNameOnFailure","showTestNameOnFailure","showExpectationOnFailure","showSourceOnFailure","flag","noPlan","VERSION","qunitTapVersion","expectedCount","note","diag","moduleStart","arg","unsubscribe","appendCallback","createCallbackAppenderFor","subject","observer","originalLoggingCallback","qunit_started","qunit_onerror","file","tap_regex","tests_included"],"mappings":"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","file":"networkmanager/test-utils.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2014 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\tvar utils = __webpack_require__(4);\n\tvar cockpit = __webpack_require__(3);\n\tvar QUnit = __webpack_require__(22);\n\tvar assert = QUnit;\n\t\n\tfunction assert_throws(func, checks) {\n\t    assert.expect(checks.length);\n\t\n\t    checks.forEach(function(c) {\n\t        assert.throws(function() {\n\t            func(c);\n\t        });\n\t    });\n\t}\n\t\n\tQUnit.test(\"ip_prefix_from_text\", function() {\n\t    var checks = [\n\t        [ \"0\",      0 ],\n\t        [ \"12\",    12 ],\n\t        [ \" 12  \", 12 ]\n\t    ];\n\t\n\t    assert.expect(checks.length);\n\t\n\t    checks.forEach(function(c) {\n\t        assert.strictEqual(utils.ip_prefix_from_text(c[0]), c[1]);\n\t    });\n\t});\n\t\n\tQUnit.test(\"ip_prefix_from_text invalids\", function() {\n\t    var checks = [\n\t        \"\",\n\t        \"-1\",\n\t        \"foo\",\n\t        \"1foo\",\n\t        \"1.5\",\n\t        \"1 2 3\"\n\t    ];\n\t\n\t    assert_throws(utils.ip_prefix_from_text, checks);\n\t});\n\t\n\tQUnit.test(\"ip_metric_from_text\", function() {\n\t    var checks = [\n\t        [ \"\",       0 ],\n\t        [ \"0\",      0 ],\n\t        [ \"12\",    12 ],\n\t        [ \" 12  \", 12 ]\n\t    ];\n\t\n\t    assert.expect(checks.length);\n\t\n\t    checks.forEach(function(c) {\n\t        assert.strictEqual(utils.ip_metric_from_text(c[0]), c[1]);\n\t    });\n\t});\n\t\n\tQUnit.test(\"ip_metric_from_text invalids\", function() {\n\t    var checks = [\n\t        \"-1\",\n\t        \"foo\",\n\t        \"1foo\",\n\t        \"1.5\",\n\t        \"1 2 3\"\n\t    ];\n\t\n\t    assert_throws(utils.ip_metric_from_text, checks);\n\t});\n\t\n\tQUnit.test(\"ip4_to/from_text be\", function() {\n\t    var checks = [\n\t        [ \"0.0.0.0\",           0x00000000 ],\n\t        [ \"255.255.255.255\",   0xFFFFFFFF ],\n\t        [ \"1.2.3.4\",           0x01020304 ],\n\t        [ \" 1.2.3.4 \",         0x01020304 ],\n\t        [ \" 1 . 2 . 3. 4 \",    0x01020304 ]\n\t    ];\n\t\n\t    assert.expect(2*checks.length);\n\t\n\t    utils.set_byteorder(\"be\");\n\t    checks.forEach(function(c) {\n\t        assert.strictEqual(utils.ip4_to_text(c[1]), c[0].replace(/ /g, \"\"));\n\t        assert.strictEqual(utils.ip4_from_text(c[0]), c[1]);\n\t    });\n\t});\n\t\n\tQUnit.test(\"ip4_to/from_text le\", function() {\n\t    var checks = [\n\t        [ \"0.0.0.0\",           0x00000000 ],\n\t        [ \"255.255.255.255\",   0xFFFFFFFF ],\n\t        [ \"1.2.3.4\",           0x04030201 ],\n\t        [ \" 1.2.3.4 \",         0x04030201 ],\n\t        [ \" 1 . 2 . 3. 4 \",    0x04030201 ]\n\t    ];\n\t\n\t    assert.expect(2*checks.length);\n\t\n\t    utils.set_byteorder(\"le\");\n\t    checks.forEach(function(c) {\n\t        assert.strictEqual(utils.ip4_to_text(c[1]), c[0].replace(/ /g, \"\"));\n\t        assert.strictEqual(utils.ip4_from_text(c[0]), c[1]);\n\t    });\n\t});\n\t\n\tQUnit.test(\"ip4_from_text invalids\", function() {\n\t    var checks = [\n\t        \"\",\n\t        \"0\",\n\t        \"0.0\",\n\t        \"0.0.0\",\n\t        \"0.0.0.0.0\",\n\t        \"-1.2.3.4\",\n\t        \"foo\",\n\t        \"1.foo.3.4\",\n\t        \"1foo.2.3.4\",\n\t        \"1.2.3.400\",\n\t        \"1,2,3,4\",\n\t        \"1 1.2.3 3.4\"\n\t    ];\n\t\n\t    assert_throws(utils.ip4_from_text, checks);\n\t});\n\t\n\tQUnit.test(\"ip4_to_text zero\", function() {\n\t    utils.set_byteorder(\"be\");\n\t    assert.strictEqual(utils.ip4_to_text(0, true), \"\");\n\t});\n\t\n\tQUnit.test(\"ip4_from_text empty\", function() {\n\t    utils.set_byteorder(\"be\");\n\t    assert.strictEqual(utils.ip4_from_text(\"\", true), 0);\n\t});\n\t\n\tQUnit.test(\"ip4_prefix_from_text\", function() {\n\t    var checks = [\n\t        \"0.0.0.0\",\n\t\n\t        \" 128.0.0.0\",\n\t        \"192.0.0.0 \",\n\t        \"224. 0. 0.0\",\n\t        \"240. 0.0 .0\",\n\t        \"248.0.0.0\",\n\t        \"252. 0.0.0\",\n\t        \"254.0.0.0\",\n\t        \"255.0.0.0\",\n\t\n\t        \"255.128.0.0\",\n\t        \"255.192.0.0\",\n\t        \"255.224.0.0\",\n\t        \"255.240.0.0\",\n\t        \"255.248.0.0\",\n\t        \"255.252.0.0\",\n\t        \"255.254.0.0\",\n\t        \"255.255.0.0\",\n\t\n\t        \"255.255.128.0\",\n\t        \"255.255.192.0\",\n\t        \"255.255.224.0\",\n\t        \"255.255.240.0\",\n\t        \"255.255.248.0\",\n\t        \"255.255.252.0\",\n\t        \"255.255.254.0\",\n\t        \"255.255.255.0\",\n\t\n\t        \"255.255.255.128\",\n\t        \"255.255.255.192\",\n\t        \"255.255.255.224\",\n\t        \"255.255.255.240\",\n\t        \"255.255.255.248\",\n\t        \"255.255.255.252\",\n\t        \"255.255.255.254\",\n\t        \"255.255.255.255\"\n\t    ];\n\t\n\t    assert.expect(checks.length);\n\t\n\t    checks.forEach(function(c, i) {\n\t        assert.strictEqual(utils.ip4_prefix_from_text(c), i);\n\t    });\n\t});\n\t\n\tQUnit.test(\"ip4_prefix_from_text invalids\", function() {\n\t    var checks = [\n\t        \"\",\n\t        \"-1\",\n\t        \"foo\",\n\t        \"1foo\",\n\t        \"1.5\",\n\t\n\t        \"0.0\",\n\t        \"0.0.0\",\n\t        \"0.0.0.0.0\",\n\t        \"1.2.3.4\",\n\t        \"255.255.255.8\",\n\t        \"255.192.0.10\"\n\t    ];\n\t\n\t    assert_throws(utils.ip4_prefix_from_text, checks);\n\t});\n\t\n\tQUnit.test(\"ip6_to/from_text\", function() {\n\t    var checks = [\n\t        [ [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],\n\t          \"0:0:0:0:0:0:0:0\"\n\t        ],\n\t        [ [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n\t            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F ],\n\t          \"1:203:405:607:809:a0b:c0d:e0f\"\n\t        ],\n\t        [ [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n\t            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F ],\n\t          \" 1: 203 :  405: 607: 809:a0b :c0d:e0f\"\n\t        ],\n\t    ];\n\t\n\t    assert.expect(2*checks.length);\n\t\n\t    checks.forEach(function(c) {\n\t        assert.strictEqual(utils.ip6_to_text(cockpit.base64_encode(c[0])), c[1].replace(/ /g, \"\"));\n\t        assert.deepEqual(cockpit.base64_decode(utils.ip6_from_text(c[1])), c[0]);\n\t    });\n\t});\n\t\n\tQUnit.test(\"ip6_from_text abbrevs\", function() {\n\t    var checks = [\n\t        [ \"::\",\n\t          [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],\n\t        ],\n\t        [ \"::1\",\n\t          [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 ],\n\t        ],\n\t        [ \"1::\",\n\t          [ 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],\n\t        ],\n\t        [ \"1:2:3::2:1\",\n\t          [ 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,\n\t            0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01 ],\n\t        ],\n\t        [ \"2001::1\",\n\t          [ 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\t            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 ],\n\t        ],\n\t    ];\n\t\n\t    checks.forEach(function(c) {\n\t        assert.deepEqual(cockpit.base64_decode(utils.ip6_from_text(c[0])), c[1]);\n\t    });\n\t});\n\t\n\tQUnit.test(\"ip6_from_text invalids\", function() {\n\t    var checks = [\n\t        \"\",\n\t        \"0\",\n\t        \"0:0\",\n\t        \"0:0:0\",\n\t        \"0:0:0:0\",\n\t        \"0:0:0:0:0\",\n\t        \"0:0:0:0:0:0\",\n\t        \"0:0:0:0:0:0:0\",\n\t        \"0:0:0:0:0:0:0:0:0\",\n\t        \"foo\",\n\t        \"1:2:3:four:5:6:7:8\",\n\t        \"1:2:3:-4:5:6:7:8\",\n\t        \"1:2:3:4.0:5:6:7:8\",\n\t        \"1:2:3:4foo:5:6:7:8\",\n\t        \"1:2:3:10000:5:6:7:8\",\n\t        \"1::4::8\",\n\t        \"::8::\",\n\t        \"1:2:3:4 4:5:6:7:8\",\n\t    ];\n\t\n\t    assert_throws(utils.ip6_from_text, checks);\n\t});\n\t\n\tQUnit.test(\"ip6_to_text zero\", function() {\n\t    var zero = [ 0, 0, 0, 0, 0, 0, 0, 0,\n\t                 0, 0, 0, 0, 0, 0, 0, 0\n\t               ];\n\t    assert.strictEqual(utils.ip6_to_text(cockpit.base64_encode(zero), true), \"\");\n\t});\n\t\n\tQUnit.test(\"ip6_from_text empty\", function() {\n\t    var zero = [ 0, 0, 0, 0, 0, 0, 0, 0,\n\t                 0, 0, 0, 0, 0, 0, 0, 0\n\t               ];\n\t    assert.deepEqual(cockpit.base64_decode(utils.ip6_from_text(\"\", true)), zero);\n\t});\n\t\n\tQUnit.start();\n\n\n/***/ },\n/* 1 */,\n/* 2 */,\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = cockpit;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2016 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    var cockpit = __webpack_require__(3);\n\t\n\t    var _ = cockpit.gettext;\n\t\n\t    /* NetworkManager specific data conversions and utility functions.\n\t     */\n\t\n\t    var byteorder;\n\t\n\t    function set_byteorder(bo) {\n\t        byteorder = bo;\n\t    }\n\t\n\t    function ip_prefix_to_text(num) {\n\t        return num.toString();\n\t    }\n\t\n\t    function ip_prefix_from_text(text) {\n\t        if (/^[0-9]+$/.test(text.trim()))\n\t            return parseInt(text, 10);\n\t\n\t        throw cockpit.format(_(\"Invalid prefix $0\"), text);\n\t    }\n\t\n\t    function ip_metric_to_text(num) {\n\t        return num.toString();\n\t    }\n\t\n\t    function ip_metric_from_text(text) {\n\t        if (text === \"\")\n\t            return 0;\n\t\n\t        if (/^[0-9]+$/.test(text.trim()))\n\t            return parseInt(text, 10);\n\t\n\t        throw cockpit.format(_(\"Invalid metric $0\"), text);\n\t    }\n\t\n\t    function toDec(n) {\n\t        return n.toString(10);\n\t    }\n\t\n\t    function bytes_from_nm32(num) {\n\t        var bytes = [], i;\n\t        if (byteorder == \"be\") {\n\t            for (i = 3; i >= 0; i--) {\n\t                bytes[i] = num & 0xFF;\n\t                num = num >>> 8;\n\t            }\n\t        } else {\n\t            for (i = 0; i < 4; i++) {\n\t                bytes[i] = num & 0xFF;\n\t                num = num >>> 8;\n\t            }\n\t        }\n\t        return bytes;\n\t    }\n\t\n\t    function ip4_to_text(num, zero_is_empty) {\n\t        if (num === 0 && zero_is_empty)\n\t            return \"\";\n\t        return bytes_from_nm32(num).map(toDec).join('.');\n\t    }\n\t\n\t    function ip4_from_text(text, empty_is_zero) {\n\t        function invalid() {\n\t            throw cockpit.format(_(\"Invalid address $0\"), text);\n\t        }\n\t\n\t        if (text === \"\" && empty_is_zero)\n\t            return 0;\n\t\n\t        var parts = text.split('.');\n\t        if (parts.length != 4)\n\t            invalid();\n\t\n\t        var bytes = parts.map(function(s) {\n\t            if (/^[0-9]+$/.test(s.trim()))\n\t                return parseInt(s, 10);\n\t            else\n\t                invalid();\n\t        });\n\t\n\t        var num = 0;\n\t        function shift(b) {\n\t            if (isNaN(b) || b < 0 || b > 0xFF)\n\t                invalid();\n\t            num = 0x100*num + b;\n\t        }\n\t\n\t        var i;\n\t        if (byteorder == \"be\") {\n\t            for (i = 0; i < 4; i++) {\n\t                shift(bytes[i]);\n\t            }\n\t        } else {\n\t            for (i = 3; i >= 0; i--) {\n\t                shift(bytes[i]);\n\t            }\n\t        }\n\t\n\t        return num;\n\t    }\n\t\n\t    var text_to_prefix_bits = {\n\t        \"255\": 8, \"254\": 7, \"252\": 6, \"248\": 5, \"240\": 4, \"224\": 3, \"192\": 2, \"128\": 1, \"0\": 0\n\t    };\n\t\n\t    function ip4_prefix_from_text(text) {\n\t        function invalid() {\n\t            throw cockpit.format(_(\"Invalid prefix or netmask $0\"), text);\n\t        }\n\t\n\t        if (/^[0-9]+$/.test(text.trim()))\n\t            return parseInt(text, 10);\n\t        var parts = text.split('.');\n\t        if (parts.length != 4)\n\t            invalid();\n\t        var prefix = 0;\n\t        var i;\n\t        for (i = 0; i < 4; i++) {\n\t            var p = text_to_prefix_bits[parts[i].trim()];\n\t            if (p !== undefined) {\n\t                prefix += p;\n\t                if (p < 8)\n\t                    break;\n\t            } else\n\t                invalid();\n\t        }\n\t        for (i += 1; i < 4; i++) {\n\t            if (/^0+$/.test(parts[i].trim()) === false)\n\t                invalid();\n\t        }\n\t        return prefix;\n\t    }\n\t\n\t    function ip6_to_text(data, zero_is_empty) {\n\t        var parts = [];\n\t        var bytes = cockpit.base64_decode(data);\n\t        for (var i = 0; i < 8; i++)\n\t            parts[i] = ((bytes[2*i] << 8) + bytes[2*i+1]).toString(16);\n\t        var result = parts.join(':');\n\t        if (result == \"0:0:0:0:0:0:0:0\" && zero_is_empty)\n\t            return \"\";\n\t        return result;\n\t    }\n\t\n\t    function ip6_from_text(text, empty_is_zero) {\n\t        function invalid() {\n\t            throw cockpit.format(_(\"Invalid address $0\"), text);\n\t        }\n\t\n\t        if (text === \"\" && empty_is_zero)\n\t            return cockpit.base64_encode([ 0, 0, 0, 0, 0, 0, 0, 0,\n\t                                           0, 0, 0, 0, 0, 0, 0, 0,\n\t                                         ]);\n\t\n\t        var parts = text.split(':');\n\t        if (parts.length < 1 || parts.length > 8)\n\t            invalid();\n\t\n\t        if (parts[0] === \"\")\n\t            parts[0] = \"0\";\n\t        if (parts[parts.length-1] === \"\")\n\t            parts[parts.length-1] = \"0\";\n\t\n\t        var bytes = [], n, i, j;\n\t        var empty_seen = false;\n\t        for (i = 0, j = 0; i < parts.length; i++, j++) {\n\t            if (parts[i] === \"\") {\n\t                if (empty_seen)\n\t                    invalid();\n\t                empty_seen = true;\n\t                while (j < i + (8 - parts.length)) {\n\t                    bytes[2*j] = bytes[2*j+1] = 0;\n\t                    j++;\n\t                }\n\t            } else {\n\t                if (!/^[0-9a-fA-F]+$/.test(parts[i].trim()))\n\t                    invalid();\n\t                n = parseInt(parts[i], 16);\n\t                if (isNaN(n) || n < 0 || n > 0xFFFF)\n\t                    invalid();\n\t                bytes[2*j] = n >> 8;\n\t                bytes[2*j+1] = n & 0xFF;\n\t            }\n\t        }\n\t        if (j != 8)\n\t            invalid();\n\t\n\t        return cockpit.base64_encode(bytes);\n\t    }\n\t\n\t    module.exports = {\n\t        set_byteorder: set_byteorder,\n\t\n\t        ip_prefix_to_text: ip_prefix_to_text,\n\t        ip_prefix_from_text: ip_prefix_from_text,\n\t        ip_metric_to_text: ip_metric_to_text,\n\t        ip_metric_from_text: ip_metric_from_text,\n\t\n\t        ip4_to_text: ip4_to_text,\n\t        ip4_from_text: ip4_from_text,\n\t        ip4_prefix_from_text: ip4_prefix_from_text,\n\t\n\t        ip6_to_text: ip6_to_text,\n\t        ip6_from_text: ip6_from_text\n\t    };\n\t\n\t})();\n\n\n/***/ },\n/* 5 */,\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */,\n/* 15 */,\n/* 16 */,\n/* 17 */,\n/* 18 */,\n/* 19 */,\n/* 20 */,\n/* 21 */,\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t/*\n\t * This file is part of Cockpit.\n\t *\n\t * Copyright (C) 2014 Red Hat, Inc.\n\t *\n\t * Cockpit is free software; you can redistribute it and/or modify it\n\t * under the terms of the GNU Lesser General Public License as published by\n\t * the Free Software Foundation; either version 2.1 of the License, or\n\t * (at your option) any later version.\n\t *\n\t * Cockpit is distributed in the hope that it will be useful, but\n\t * WITHOUT ANY WARRANTY; without even the implied warranty of\n\t * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n\t * Lesser General Public License for more details.\n\t *\n\t * You should have received a copy of the GNU Lesser General Public License\n\t * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n\t */\n\t\n\t(function() {\n\t    \"use strict\";\n\t\n\t    /* QUnit needs to have 'window' as 'this' in order to load */\n\t    window.QUnit = __webpack_require__(23);\n\t    window.qunitTap = __webpack_require__(26);\n\t\n\t    __webpack_require__(27);\n\t\n\t    __webpack_require__(28);\n\t\n\t    module.exports = window.QUnit;\n\t\n\t}());\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, module) {/*!\n\t * QUnit 1.23.1\n\t * https://qunitjs.com/\n\t *\n\t * Copyright jQuery Foundation and other contributors\n\t * Released under the MIT license\n\t * https://jquery.org/license\n\t *\n\t * Date: 2016-04-12T17:29Z\n\t */\n\t\n\t( function( global ) {\n\t\n\tvar QUnit = {};\n\t\n\tvar Date = global.Date;\n\tvar now = Date.now || function() {\n\t\treturn new Date().getTime();\n\t};\n\t\n\tvar setTimeout = global.setTimeout;\n\tvar clearTimeout = global.clearTimeout;\n\t\n\t// Store a local window from the global to allow direct references.\n\tvar window = global.window;\n\t\n\tvar defined = {\n\t\tdocument: window && window.document !== undefined,\n\t\tsetTimeout: setTimeout !== undefined,\n\t\tsessionStorage: ( function() {\n\t\t\tvar x = \"qunit-test-string\";\n\t\t\ttry {\n\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\treturn true;\n\t\t\t} catch ( e ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}() )\n\t};\n\t\n\tvar fileName = ( sourceFromStacktrace( 0 ) || \"\" ).replace( /(:\\d+)+\\)?/, \"\" ).replace( /.+\\//, \"\" );\n\tvar globalStartCalled = false;\n\tvar runStarted = false;\n\t\n\tvar toString = Object.prototype.toString,\n\t\thasOwn = Object.prototype.hasOwnProperty;\n\t\n\t// Returns a new Array with the elements that are in a but not in b\n\tfunction diff( a, b ) {\n\t\tvar i, j,\n\t\t\tresult = a.slice();\n\t\n\t\tfor ( i = 0; i < result.length; i++ ) {\n\t\t\tfor ( j = 0; j < b.length; j++ ) {\n\t\t\t\tif ( result[ i ] === b[ j ] ) {\n\t\t\t\t\tresult.splice( i, 1 );\n\t\t\t\t\ti--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\t// From jquery.js\n\tfunction inArray( elem, array ) {\n\t\tif ( array.indexOf ) {\n\t\t\treturn array.indexOf( elem );\n\t\t}\n\t\n\t\tfor ( var i = 0, length = array.length; i < length; i++ ) {\n\t\t\tif ( array[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\n\t\treturn -1;\n\t}\n\t\n\t/**\n\t * Makes a clone of an object using only Array or Object as base,\n\t * and copies over the own enumerable properties.\n\t *\n\t * @param {Object} obj\n\t * @return {Object} New object with only the own properties (recursively).\n\t */\n\tfunction objectValues ( obj ) {\n\t\tvar key, val,\n\t\t\tvals = QUnit.is( \"array\", obj ) ? [] : {};\n\t\tfor ( key in obj ) {\n\t\t\tif ( hasOwn.call( obj, key ) ) {\n\t\t\t\tval = obj[ key ];\n\t\t\t\tvals[ key ] = val === Object( val ) ? objectValues( val ) : val;\n\t\t\t}\n\t\t}\n\t\treturn vals;\n\t}\n\t\n\tfunction extend( a, b, undefOnly ) {\n\t\tfor ( var prop in b ) {\n\t\t\tif ( hasOwn.call( b, prop ) ) {\n\t\n\t\t\t\t// Avoid \"Member not found\" error in IE8 caused by messing with window.constructor\n\t\t\t\t// This block runs on every environment, so `global` is being used instead of `window`\n\t\t\t\t// to avoid errors on node.\n\t\t\t\tif ( prop !== \"constructor\" || a !== global ) {\n\t\t\t\t\tif ( b[ prop ] === undefined ) {\n\t\t\t\t\t\tdelete a[ prop ];\n\t\t\t\t\t} else if ( !( undefOnly && typeof a[ prop ] !== \"undefined\" ) ) {\n\t\t\t\t\t\ta[ prop ] = b[ prop ];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn a;\n\t}\n\t\n\tfunction objectType( obj ) {\n\t\tif ( typeof obj === \"undefined\" ) {\n\t\t\treturn \"undefined\";\n\t\t}\n\t\n\t\t// Consider: typeof null === object\n\t\tif ( obj === null ) {\n\t\t\treturn \"null\";\n\t\t}\n\t\n\t\tvar match = toString.call( obj ).match( /^\\[object\\s(.*)\\]$/ ),\n\t\t\ttype = match && match[ 1 ];\n\t\n\t\tswitch ( type ) {\n\t\t\tcase \"Number\":\n\t\t\t\tif ( isNaN( obj ) ) {\n\t\t\t\t\treturn \"nan\";\n\t\t\t\t}\n\t\t\t\treturn \"number\";\n\t\t\tcase \"String\":\n\t\t\tcase \"Boolean\":\n\t\t\tcase \"Array\":\n\t\t\tcase \"Set\":\n\t\t\tcase \"Map\":\n\t\t\tcase \"Date\":\n\t\t\tcase \"RegExp\":\n\t\t\tcase \"Function\":\n\t\t\tcase \"Symbol\":\n\t\t\t\treturn type.toLowerCase();\n\t\t}\n\t\tif ( typeof obj === \"object\" ) {\n\t\t\treturn \"object\";\n\t\t}\n\t}\n\t\n\t// Safe object type checking\n\tfunction is( type, obj ) {\n\t\treturn QUnit.objectType( obj ) === type;\n\t}\n\t\n\t// Doesn't support IE6 to IE9, it will return undefined on these browsers\n\t// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\n\tfunction extractStacktrace( e, offset ) {\n\t\toffset = offset === undefined ? 4 : offset;\n\t\n\t\tvar stack, include, i;\n\t\n\t\tif ( e.stack ) {\n\t\t\tstack = e.stack.split( \"\\n\" );\n\t\t\tif ( /^error$/i.test( stack[ 0 ] ) ) {\n\t\t\t\tstack.shift();\n\t\t\t}\n\t\t\tif ( fileName ) {\n\t\t\t\tinclude = [];\n\t\t\t\tfor ( i = offset; i < stack.length; i++ ) {\n\t\t\t\t\tif ( stack[ i ].indexOf( fileName ) !== -1 ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tinclude.push( stack[ i ] );\n\t\t\t\t}\n\t\t\t\tif ( include.length ) {\n\t\t\t\t\treturn include.join( \"\\n\" );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn stack[ offset ];\n\t\n\t\t// Support: Safari <=6 only\n\t\t} else if ( e.sourceURL ) {\n\t\n\t\t\t// Exclude useless self-reference for generated Error objects\n\t\t\tif ( /qunit.js$/.test( e.sourceURL ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\t// For actual exceptions, this is useful\n\t\t\treturn e.sourceURL + \":\" + e.line;\n\t\t}\n\t}\n\t\n\tfunction sourceFromStacktrace( offset ) {\n\t\tvar error = new Error();\n\t\n\t\t// Support: Safari <=7 only, IE <=10 - 11 only\n\t\t// Not all browsers generate the `stack` property for `new Error()`, see also #636\n\t\tif ( !error.stack ) {\n\t\t\ttry {\n\t\t\t\tthrow error;\n\t\t\t} catch ( err ) {\n\t\t\t\terror = err;\n\t\t\t}\n\t\t}\n\t\n\t\treturn extractStacktrace( error, offset );\n\t}\n\t\n\t/**\n\t * Config object: Maintain internal state\n\t * Later exposed as QUnit.config\n\t * `config` initialized at top of scope\n\t */\n\tvar config = {\n\t\n\t\t// The queue of tests to run\n\t\tqueue: [],\n\t\n\t\t// Block until document ready\n\t\tblocking: true,\n\t\n\t\t// By default, run previously failed tests first\n\t\t// very useful in combination with \"Hide passed tests\" checked\n\t\treorder: true,\n\t\n\t\t// By default, modify document.title when suite is done\n\t\taltertitle: true,\n\t\n\t\t// HTML Reporter: collapse every test except the first failing test\n\t\t// If false, all failing tests will be expanded\n\t\tcollapse: true,\n\t\n\t\t// By default, scroll to top of the page when suite is done\n\t\tscrolltop: true,\n\t\n\t\t// Depth up-to which object will be dumped\n\t\tmaxDepth: 5,\n\t\n\t\t// When enabled, all tests must call expect()\n\t\trequireExpects: false,\n\t\n\t\t// Placeholder for user-configurable form-exposed URL parameters\n\t\turlConfig: [],\n\t\n\t\t// Set of all modules.\n\t\tmodules: [],\n\t\n\t\t// Stack of nested modules\n\t\tmoduleStack: [],\n\t\n\t\t// The first unnamed module\n\t\tcurrentModule: {\n\t\t\tname: \"\",\n\t\t\ttests: []\n\t\t},\n\t\n\t\tcallbacks: {}\n\t};\n\t\n\t// Push a loose unnamed module to the modules collection\n\tconfig.modules.push( config.currentModule );\n\t\n\tvar loggingCallbacks = {};\n\t\n\t// Register logging callbacks\n\tfunction registerLoggingCallbacks( obj ) {\n\t\tvar i, l, key,\n\t\t\tcallbackNames = [ \"begin\", \"done\", \"log\", \"testStart\", \"testDone\",\n\t\t\t\t\"moduleStart\", \"moduleDone\" ];\n\t\n\t\tfunction registerLoggingCallback( key ) {\n\t\t\tvar loggingCallback = function( callback ) {\n\t\t\t\tif ( objectType( callback ) !== \"function\" ) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"QUnit logging methods require a callback function as their first parameters.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\n\t\t\t\tconfig.callbacks[ key ].push( callback );\n\t\t\t};\n\t\n\t\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t\t// Stores the registered functions allowing restoring\n\t\t\t// at verifyLoggingCallbacks() if modified\n\t\t\tloggingCallbacks[ key ] = loggingCallback;\n\t\n\t\t\treturn loggingCallback;\n\t\t}\n\t\n\t\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\n\t\t\tkey = callbackNames[ i ];\n\t\n\t\t\t// Initialize key collection of logging callback\n\t\t\tif ( objectType( config.callbacks[ key ] ) === \"undefined\" ) {\n\t\t\t\tconfig.callbacks[ key ] = [];\n\t\t\t}\n\t\n\t\t\tobj[ key ] = registerLoggingCallback( key );\n\t\t}\n\t}\n\t\n\tfunction runLoggingCallbacks( key, args ) {\n\t\tvar i, l, callbacks;\n\t\n\t\tcallbacks = config.callbacks[ key ];\n\t\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\n\t\t\tcallbacks[ i ]( args );\n\t\t}\n\t}\n\t\n\t// DEPRECATED: This will be removed on 2.0.0+\n\t// This function verifies if the loggingCallbacks were modified by the user\n\t// If so, it will restore it, assign the given callback and print a console warning\n\tfunction verifyLoggingCallbacks() {\n\t\tvar loggingCallback, userCallback;\n\t\n\t\tfor ( loggingCallback in loggingCallbacks ) {\n\t\t\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\n\t\n\t\t\t\tuserCallback = QUnit[ loggingCallback ];\n\t\n\t\t\t\t// Restore the callback function\n\t\t\t\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\n\t\n\t\t\t\t// Assign the deprecated given callback\n\t\t\t\tQUnit[ loggingCallback ]( userCallback );\n\t\n\t\t\t\tif ( global.console && global.console.warn ) {\n\t\t\t\t\tglobal.console.warn(\n\t\t\t\t\t\t\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" +\n\t\t\t\t\t\t\"Please, check out the documentation on how to apply logging callbacks.\\n\" +\n\t\t\t\t\t\t\"Reference: https://api.qunitjs.com/category/callbacks/\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t( function() {\n\t\tif ( !defined.document ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\t// `onErrorFnPrev` initialized at top of scope\n\t\t// Preserve other handlers\n\t\tvar onErrorFnPrev = window.onerror;\n\t\n\t\t// Cover uncaught exceptions\n\t\t// Returning true will suppress the default browser handler,\n\t\t// returning false will let it run.\n\t\twindow.onerror = function( error, filePath, linerNr ) {\n\t\t\tvar ret = false;\n\t\t\tif ( onErrorFnPrev ) {\n\t\t\t\tret = onErrorFnPrev( error, filePath, linerNr );\n\t\t\t}\n\t\n\t\t\t// Treat return value as window.onerror itself does,\n\t\t\t// Only do our handling if not suppressed.\n\t\t\tif ( ret !== true ) {\n\t\t\t\tif ( QUnit.config.current ) {\n\t\t\t\t\tif ( QUnit.config.current.ignoreGlobalErrors ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t} else {\n\t\t\t\t\tQUnit.test( \"global failure\", extend( function() {\n\t\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t\t}, { validTest: true } ) );\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\treturn ret;\n\t\t};\n\t}() );\n\t\n\t// Figure out if we're running the tests from a server or not\n\tQUnit.isLocal = !( defined.document && window.location.protocol !== \"file:\" );\n\t\n\t// Expose the current QUnit version\n\tQUnit.version = \"1.23.1\";\n\t\n\textend( QUnit, {\n\t\n\t\t// Call on start of module test to prepend name to all tests\n\t\tmodule: function( name, testEnvironment, executeNow ) {\n\t\t\tvar module, moduleFns;\n\t\t\tvar currentModule = config.currentModule;\n\t\n\t\t\tif ( arguments.length === 2 ) {\n\t\t\t\tif ( objectType( testEnvironment ) === \"function\" ) {\n\t\t\t\t\texecuteNow = testEnvironment;\n\t\t\t\t\ttestEnvironment = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// DEPRECATED: handles setup/teardown functions,\n\t\t\t// beforeEach and afterEach should be used instead\n\t\t\tif ( testEnvironment && testEnvironment.setup ) {\n\t\t\t\ttestEnvironment.beforeEach = testEnvironment.setup;\n\t\t\t\tdelete testEnvironment.setup;\n\t\t\t}\n\t\t\tif ( testEnvironment && testEnvironment.teardown ) {\n\t\t\t\ttestEnvironment.afterEach = testEnvironment.teardown;\n\t\t\t\tdelete testEnvironment.teardown;\n\t\t\t}\n\t\n\t\t\tmodule = createModule();\n\t\n\t\t\tmoduleFns = {\n\t\t\t\tbeforeEach: setHook( module, \"beforeEach\" ),\n\t\t\t\tafterEach: setHook( module, \"afterEach\" )\n\t\t\t};\n\t\n\t\t\tif ( objectType( executeNow ) === \"function\" ) {\n\t\t\t\tconfig.moduleStack.push( module );\n\t\t\t\tsetCurrentModule( module );\n\t\t\t\texecuteNow.call( module.testEnvironment, moduleFns );\n\t\t\t\tconfig.moduleStack.pop();\n\t\t\t\tmodule = module.parentModule || currentModule;\n\t\t\t}\n\t\n\t\t\tsetCurrentModule( module );\n\t\n\t\t\tfunction createModule() {\n\t\t\t\tvar parentModule = config.moduleStack.length ?\n\t\t\t\t\tconfig.moduleStack.slice( -1 )[ 0 ] : null;\n\t\t\t\tvar moduleName = parentModule !== null ?\n\t\t\t\t\t[ parentModule.name, name ].join( \" > \" ) : name;\n\t\t\t\tvar module = {\n\t\t\t\t\tname: moduleName,\n\t\t\t\t\tparentModule: parentModule,\n\t\t\t\t\ttests: [],\n\t\t\t\t\tmoduleId: generateHash( moduleName )\n\t\t\t\t};\n\t\n\t\t\t\tvar env = {};\n\t\t\t\tif ( parentModule ) {\n\t\t\t\t\textend( env, parentModule.testEnvironment );\n\t\t\t\t\tdelete env.beforeEach;\n\t\t\t\t\tdelete env.afterEach;\n\t\t\t\t}\n\t\t\t\textend( env, testEnvironment );\n\t\t\t\tmodule.testEnvironment = env;\n\t\n\t\t\t\tconfig.modules.push( module );\n\t\t\t\treturn module;\n\t\t\t}\n\t\n\t\t\tfunction setCurrentModule( module ) {\n\t\t\t\tconfig.currentModule = module;\n\t\t\t}\n\t\n\t\t},\n\t\n\t\t// DEPRECATED: QUnit.asyncTest() will be removed in QUnit 2.0.\n\t\tasyncTest: asyncTest,\n\t\n\t\ttest: test,\n\t\n\t\tskip: skip,\n\t\n\t\tonly: only,\n\t\n\t\t// DEPRECATED: The functionality of QUnit.start() will be altered in QUnit 2.0.\n\t\t// In QUnit 2.0, invoking it will ONLY affect the `QUnit.config.autostart` blocking behavior.\n\t\tstart: function( count ) {\n\t\t\tvar globalStartAlreadyCalled = globalStartCalled;\n\t\n\t\t\tif ( !config.current ) {\n\t\t\t\tglobalStartCalled = true;\n\t\n\t\t\t\tif ( runStarted ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context while already started\" );\n\t\t\t\t} else if ( globalStartAlreadyCalled || count > 1 ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context too many times\" );\n\t\t\t\t} else if ( config.autostart ) {\n\t\t\t\t\tthrow new Error( \"Called start() outside of a test context when \" +\n\t\t\t\t\t\t\"QUnit.config.autostart was true\" );\n\t\t\t\t} else if ( !config.pageLoaded ) {\n\t\n\t\t\t\t\t// The page isn't completely loaded yet, so bail out and let `QUnit.load` handle it\n\t\t\t\t\tconfig.autostart = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\n\t\t\t\t// If a test is running, adjust its semaphore\n\t\t\t\tconfig.current.semaphore -= count || 1;\n\t\n\t\t\t\t// If semaphore is non-numeric, throw error\n\t\t\t\tif ( isNaN( config.current.semaphore ) ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\n\t\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\t\"Called start() with a non-numeric decrement.\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Don't start until equal number of stop-calls\n\t\t\t\tif ( config.current.semaphore > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\t// Throw an Error if start is called more often than stop\n\t\t\t\tif ( config.current.semaphore < 0 ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\n\t\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\t\"Called start() while already started (test's semaphore was 0 already)\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t\t);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tresumeProcessing();\n\t\t},\n\t\n\t\t// DEPRECATED: QUnit.stop() will be removed in QUnit 2.0.\n\t\tstop: function( count ) {\n\t\n\t\t\t// If there isn't a test running, don't allow QUnit.stop() to be called\n\t\t\tif ( !config.current ) {\n\t\t\t\tthrow new Error( \"Called stop() outside of a test context\" );\n\t\t\t}\n\t\n\t\t\t// If a test is running, adjust its semaphore\n\t\t\tconfig.current.semaphore += count || 1;\n\t\n\t\t\tpauseProcessing();\n\t\t},\n\t\n\t\tconfig: config,\n\t\n\t\tis: is,\n\t\n\t\tobjectType: objectType,\n\t\n\t\textend: extend,\n\t\n\t\tload: function() {\n\t\t\tconfig.pageLoaded = true;\n\t\n\t\t\t// Initialize the configuration options\n\t\t\textend( config, {\n\t\t\t\tstats: { all: 0, bad: 0 },\n\t\t\t\tmoduleStats: { all: 0, bad: 0 },\n\t\t\t\tstarted: 0,\n\t\t\t\tupdateRate: 1000,\n\t\t\t\tautostart: true,\n\t\t\t\tfilter: \"\"\n\t\t\t}, true );\n\t\n\t\t\tconfig.blocking = false;\n\t\n\t\t\tif ( config.autostart ) {\n\t\t\t\tresumeProcessing();\n\t\t\t}\n\t\t},\n\t\n\t\tstack: function( offset ) {\n\t\t\toffset = ( offset || 0 ) + 2;\n\t\t\treturn sourceFromStacktrace( offset );\n\t\t}\n\t} );\n\t\n\tregisterLoggingCallbacks( QUnit );\n\t\n\tfunction begin() {\n\t\tvar i, l,\n\t\t\tmodulesLog = [];\n\t\n\t\t// If the test run hasn't officially begun yet\n\t\tif ( !config.started ) {\n\t\n\t\t\t// Record the time of the test run's beginning\n\t\t\tconfig.started = now();\n\t\n\t\t\tverifyLoggingCallbacks();\n\t\n\t\t\t// Delete the loose unnamed module if unused.\n\t\t\tif ( config.modules[ 0 ].name === \"\" && config.modules[ 0 ].tests.length === 0 ) {\n\t\t\t\tconfig.modules.shift();\n\t\t\t}\n\t\n\t\t\t// Avoid unnecessary information by not logging modules' test environments\n\t\t\tfor ( i = 0, l = config.modules.length; i < l; i++ ) {\n\t\t\t\tmodulesLog.push( {\n\t\t\t\t\tname: config.modules[ i ].name,\n\t\t\t\t\ttests: config.modules[ i ].tests\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\t// The test run is officially beginning now\n\t\t\trunLoggingCallbacks( \"begin\", {\n\t\t\t\ttotalTests: Test.count,\n\t\t\t\tmodules: modulesLog\n\t\t\t} );\n\t\t}\n\t\n\t\tconfig.blocking = false;\n\t\tprocess( true );\n\t}\n\t\n\tfunction process( last ) {\n\t\tfunction next() {\n\t\t\tprocess( last );\n\t\t}\n\t\tvar start = now();\n\t\tconfig.depth = ( config.depth || 0 ) + 1;\n\t\n\t\twhile ( config.queue.length && !config.blocking ) {\n\t\t\tif ( !defined.setTimeout || config.updateRate <= 0 ||\n\t\t\t\t\t( ( now() - start ) < config.updateRate ) ) {\n\t\t\t\tif ( config.current ) {\n\t\n\t\t\t\t\t// Reset async tracking for each phase of the Test lifecycle\n\t\t\t\t\tconfig.current.usedAsync = false;\n\t\t\t\t}\n\t\t\t\tconfig.queue.shift()();\n\t\t\t} else {\n\t\t\t\tsetTimeout( next, 13 );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconfig.depth--;\n\t\tif ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\n\t\t\tdone();\n\t\t}\n\t}\n\t\n\tfunction pauseProcessing() {\n\t\tconfig.blocking = true;\n\t\n\t\tif ( config.testTimeout && defined.setTimeout ) {\n\t\t\tclearTimeout( config.timeout );\n\t\t\tconfig.timeout = setTimeout( function() {\n\t\t\t\tif ( config.current ) {\n\t\t\t\t\tconfig.current.semaphore = 0;\n\t\t\t\t\tQUnit.pushFailure( \"Test timed out\", sourceFromStacktrace( 2 ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error( \"Test timed out\" );\n\t\t\t\t}\n\t\t\t\tresumeProcessing();\n\t\t\t}, config.testTimeout );\n\t\t}\n\t}\n\t\n\tfunction resumeProcessing() {\n\t\trunStarted = true;\n\t\n\t\t// A slight delay to allow this iteration of the event loop to finish (more assertions, etc.)\n\t\tif ( defined.setTimeout ) {\n\t\t\tsetTimeout( function() {\n\t\t\t\tif ( config.current && config.current.semaphore > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif ( config.timeout ) {\n\t\t\t\t\tclearTimeout( config.timeout );\n\t\t\t\t}\n\t\n\t\t\t\tbegin();\n\t\t\t}, 13 );\n\t\t} else {\n\t\t\tbegin();\n\t\t}\n\t}\n\t\n\tfunction done() {\n\t\tvar runtime, passed;\n\t\n\t\tconfig.autorun = true;\n\t\n\t\t// Log the last module results\n\t\tif ( config.previousModule ) {\n\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\tname: config.previousModule.name,\n\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t} );\n\t\t}\n\t\tdelete config.previousModule;\n\t\n\t\truntime = now() - config.started;\n\t\tpassed = config.stats.all - config.stats.bad;\n\t\n\t\trunLoggingCallbacks( \"done\", {\n\t\t\tfailed: config.stats.bad,\n\t\t\tpassed: passed,\n\t\t\ttotal: config.stats.all,\n\t\t\truntime: runtime\n\t\t} );\n\t}\n\t\n\tfunction setHook( module, hookName ) {\n\t\tif ( module.testEnvironment === undefined ) {\n\t\t\tmodule.testEnvironment = {};\n\t\t}\n\t\n\t\treturn function( callback ) {\n\t\t\tmodule.testEnvironment[ hookName ] = callback;\n\t\t};\n\t}\n\t\n\tvar focused = false;\n\tvar priorityCount = 0;\n\tvar unitSampler;\n\t\n\tfunction Test( settings ) {\n\t\tvar i, l;\n\t\n\t\t++Test.count;\n\t\n\t\textend( this, settings );\n\t\tthis.assertions = [];\n\t\tthis.semaphore = 0;\n\t\tthis.usedAsync = false;\n\t\tthis.module = config.currentModule;\n\t\tthis.stack = sourceFromStacktrace( 3 );\n\t\n\t\t// Register unique strings\n\t\tfor ( i = 0, l = this.module.tests; i < l.length; i++ ) {\n\t\t\tif ( this.module.tests[ i ].name === this.testName ) {\n\t\t\t\tthis.testName += \" \";\n\t\t\t}\n\t\t}\n\t\n\t\tthis.testId = generateHash( this.module.name, this.testName );\n\t\n\t\tthis.module.tests.push( {\n\t\t\tname: this.testName,\n\t\t\ttestId: this.testId\n\t\t} );\n\t\n\t\tif ( settings.skip ) {\n\t\n\t\t\t// Skipped tests will fully ignore any sent callback\n\t\t\tthis.callback = function() {};\n\t\t\tthis.async = false;\n\t\t\tthis.expected = 0;\n\t\t} else {\n\t\t\tthis.assert = new Assert( this );\n\t\t}\n\t}\n\t\n\tTest.count = 0;\n\t\n\tTest.prototype = {\n\t\tbefore: function() {\n\t\t\tif (\n\t\n\t\t\t\t// Emit moduleStart when we're switching from one module to another\n\t\t\t\tthis.module !== config.previousModule ||\n\t\n\t\t\t\t\t// They could be equal (both undefined) but if the previousModule property doesn't\n\t\t\t\t\t// yet exist it means this is the first test in a suite that isn't wrapped in a\n\t\t\t\t\t// module, in which case we'll just emit a moduleStart event for 'undefined'.\n\t\t\t\t\t// Without this, reporters can get testStart before moduleStart  which is a problem.\n\t\t\t\t\t!hasOwn.call( config, \"previousModule\" )\n\t\t\t) {\n\t\t\t\tif ( hasOwn.call( config, \"previousModule\" ) ) {\n\t\t\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\t\t\tname: config.previousModule.name,\n\t\t\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tconfig.previousModule = this.module;\n\t\t\t\tconfig.moduleStats = { all: 0, bad: 0, started: now() };\n\t\t\t\trunLoggingCallbacks( \"moduleStart\", {\n\t\t\t\t\tname: this.module.name,\n\t\t\t\t\ttests: this.module.tests\n\t\t\t\t} );\n\t\t\t}\n\t\n\t\t\tconfig.current = this;\n\t\n\t\t\tif ( this.module.testEnvironment ) {\n\t\t\t\tdelete this.module.testEnvironment.beforeEach;\n\t\t\t\tdelete this.module.testEnvironment.afterEach;\n\t\t\t}\n\t\t\tthis.testEnvironment = extend( {}, this.module.testEnvironment );\n\t\n\t\t\tthis.started = now();\n\t\t\trunLoggingCallbacks( \"testStart\", {\n\t\t\t\tname: this.testName,\n\t\t\t\tmodule: this.module.name,\n\t\t\t\ttestId: this.testId\n\t\t\t} );\n\t\n\t\t\tif ( !config.pollution ) {\n\t\t\t\tsaveGlobal();\n\t\t\t}\n\t\t},\n\t\n\t\trun: function() {\n\t\t\tvar promise;\n\t\n\t\t\tconfig.current = this;\n\t\n\t\t\tif ( this.async ) {\n\t\t\t\tQUnit.stop();\n\t\t\t}\n\t\n\t\t\tthis.callbackStarted = now();\n\t\n\t\t\tif ( config.notrycatch ) {\n\t\t\t\trunTest( this );\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\ttry {\n\t\t\t\trunTest( this );\n\t\t\t} catch ( e ) {\n\t\t\t\tthis.pushFailure( \"Died on test #\" + ( this.assertions.length + 1 ) + \" \" +\n\t\t\t\t\tthis.stack + \": \" + ( e.message || e ), extractStacktrace( e, 0 ) );\n\t\n\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\tsaveGlobal();\n\t\n\t\t\t\t// Restart the tests if they're blocking\n\t\t\t\tif ( config.blocking ) {\n\t\t\t\t\tQUnit.start();\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction runTest( test ) {\n\t\t\t\tpromise = test.callback.call( test.testEnvironment, test.assert );\n\t\t\t\ttest.resolvePromise( promise );\n\t\t\t}\n\t\t},\n\t\n\t\tafter: function() {\n\t\t\tcheckPollution();\n\t\t},\n\t\n\t\tqueueHook: function( hook, hookName ) {\n\t\t\tvar promise,\n\t\t\t\ttest = this;\n\t\t\treturn function runHook() {\n\t\t\t\tconfig.current = test;\n\t\t\t\tif ( config.notrycatch ) {\n\t\t\t\t\tcallHook();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tcallHook();\n\t\t\t\t} catch ( error ) {\n\t\t\t\t\ttest.pushFailure( hookName + \" failed on \" + test.testName + \": \" +\n\t\t\t\t\t( error.message || error ), extractStacktrace( error, 0 ) );\n\t\t\t\t}\n\t\n\t\t\t\tfunction callHook() {\n\t\t\t\t\tpromise = hook.call( test.testEnvironment, test.assert );\n\t\t\t\t\ttest.resolvePromise( promise, hookName );\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t\n\t\t// Currently only used for module level hooks, can be used to add global level ones\n\t\thooks: function( handler ) {\n\t\t\tvar hooks = [];\n\t\n\t\t\tfunction processHooks( test, module ) {\n\t\t\t\tif ( module.parentModule ) {\n\t\t\t\t\tprocessHooks( test, module.parentModule );\n\t\t\t\t}\n\t\t\t\tif ( module.testEnvironment &&\n\t\t\t\t\tQUnit.objectType( module.testEnvironment[ handler ] ) === \"function\" ) {\n\t\t\t\t\thooks.push( test.queueHook( module.testEnvironment[ handler ], handler ) );\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Hooks are ignored on skipped tests\n\t\t\tif ( !this.skip ) {\n\t\t\t\tprocessHooks( this, this.module );\n\t\t\t}\n\t\t\treturn hooks;\n\t\t},\n\t\n\t\tfinish: function() {\n\t\t\tconfig.current = this;\n\t\t\tif ( config.requireExpects && this.expected === null ) {\n\t\t\t\tthis.pushFailure( \"Expected number of assertions to be defined, but expect() was \" +\n\t\t\t\t\t\"not called.\", this.stack );\n\t\t\t} else if ( this.expected !== null && this.expected !== this.assertions.length ) {\n\t\t\t\tthis.pushFailure( \"Expected \" + this.expected + \" assertions, but \" +\n\t\t\t\t\tthis.assertions.length + \" were run\", this.stack );\n\t\t\t} else if ( this.expected === null && !this.assertions.length ) {\n\t\t\t\tthis.pushFailure( \"Expected at least one assertion, but none were run - call \" +\n\t\t\t\t\t\"expect(0) to accept zero assertions.\", this.stack );\n\t\t\t}\n\t\n\t\t\tvar i,\n\t\t\t\tbad = 0;\n\t\n\t\t\tthis.runtime = now() - this.started;\n\t\t\tconfig.stats.all += this.assertions.length;\n\t\t\tconfig.moduleStats.all += this.assertions.length;\n\t\n\t\t\tfor ( i = 0; i < this.assertions.length; i++ ) {\n\t\t\t\tif ( !this.assertions[ i ].result ) {\n\t\t\t\t\tbad++;\n\t\t\t\t\tconfig.stats.bad++;\n\t\t\t\t\tconfig.moduleStats.bad++;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"testDone\", {\n\t\t\t\tname: this.testName,\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tskipped: !!this.skip,\n\t\t\t\tfailed: bad,\n\t\t\t\tpassed: this.assertions.length - bad,\n\t\t\t\ttotal: this.assertions.length,\n\t\t\t\truntime: this.runtime,\n\t\n\t\t\t\t// HTML Reporter use\n\t\t\t\tassertions: this.assertions,\n\t\t\t\ttestId: this.testId,\n\t\n\t\t\t\t// Source of Test\n\t\t\t\tsource: this.stack,\n\t\n\t\t\t\t// DEPRECATED: this property will be removed in 2.0.0, use runtime instead\n\t\t\t\tduration: this.runtime\n\t\t\t} );\n\t\n\t\t\t// QUnit.reset() is deprecated and will be replaced for a new\n\t\t\t// fixture reset function on QUnit 2.0/2.1.\n\t\t\t// It's still called here for backwards compatibility handling\n\t\t\tQUnit.reset();\n\t\n\t\t\tconfig.current = undefined;\n\t\t},\n\t\n\t\tqueue: function() {\n\t\t\tvar priority,\n\t\t\t\ttest = this;\n\t\n\t\t\tif ( !this.valid() ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tfunction run() {\n\t\n\t\t\t\t// Each of these can by async\n\t\t\t\tsynchronize( [\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.before();\n\t\t\t\t\t},\n\t\n\t\t\t\t\ttest.hooks( \"beforeEach\" ),\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.run();\n\t\t\t\t\t},\n\t\n\t\t\t\t\ttest.hooks( \"afterEach\" ).reverse(),\n\t\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.after();\n\t\t\t\t\t},\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\ttest.finish();\n\t\t\t\t\t}\n\t\t\t\t] );\n\t\t\t}\n\t\n\t\t\t// Prioritize previously failed tests, detected from sessionStorage\n\t\t\tpriority = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + this.module.name + \"-\" + this.testName );\n\t\n\t\t\treturn synchronize( run, priority, config.seed );\n\t\t},\n\t\n\t\tpushResult: function( resultInfo ) {\n\t\n\t\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\t\tvar source,\n\t\t\t\tdetails = {\n\t\t\t\t\tmodule: this.module.name,\n\t\t\t\t\tname: this.testName,\n\t\t\t\t\tresult: resultInfo.result,\n\t\t\t\t\tmessage: resultInfo.message,\n\t\t\t\t\tactual: resultInfo.actual,\n\t\t\t\t\texpected: resultInfo.expected,\n\t\t\t\t\ttestId: this.testId,\n\t\t\t\t\tnegative: resultInfo.negative || false,\n\t\t\t\t\truntime: now() - this.started\n\t\t\t\t};\n\t\n\t\t\tif ( !resultInfo.result ) {\n\t\t\t\tsource = sourceFromStacktrace();\n\t\n\t\t\t\tif ( source ) {\n\t\t\t\t\tdetails.source = source;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"log\", details );\n\t\n\t\t\tthis.assertions.push( {\n\t\t\t\tresult: !!resultInfo.result,\n\t\t\t\tmessage: resultInfo.message\n\t\t\t} );\n\t\t},\n\t\n\t\tpushFailure: function( message, source, actual ) {\n\t\t\tif ( !( this instanceof Test ) ) {\n\t\t\t\tthrow new Error( \"pushFailure() assertion outside test context, was \" +\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t}\n\t\n\t\t\tvar details = {\n\t\t\t\t\tmodule: this.module.name,\n\t\t\t\t\tname: this.testName,\n\t\t\t\t\tresult: false,\n\t\t\t\t\tmessage: message || \"error\",\n\t\t\t\t\tactual: actual || null,\n\t\t\t\t\ttestId: this.testId,\n\t\t\t\t\truntime: now() - this.started\n\t\t\t\t};\n\t\n\t\t\tif ( source ) {\n\t\t\t\tdetails.source = source;\n\t\t\t}\n\t\n\t\t\trunLoggingCallbacks( \"log\", details );\n\t\n\t\t\tthis.assertions.push( {\n\t\t\t\tresult: false,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tresolvePromise: function( promise, phase ) {\n\t\t\tvar then, message,\n\t\t\t\ttest = this;\n\t\t\tif ( promise != null ) {\n\t\t\t\tthen = promise.then;\n\t\t\t\tif ( QUnit.objectType( then ) === \"function\" ) {\n\t\t\t\t\tQUnit.stop();\n\t\t\t\t\tthen.call(\n\t\t\t\t\t\tpromise,\n\t\t\t\t\t\tfunction() { QUnit.start(); },\n\t\t\t\t\t\tfunction( error ) {\n\t\t\t\t\t\t\tmessage = \"Promise rejected \" +\n\t\t\t\t\t\t\t\t( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) +\n\t\t\t\t\t\t\t\t\" \" + test.testName + \": \" + ( error.message || error );\n\t\t\t\t\t\t\ttest.pushFailure( message, extractStacktrace( error, 0 ) );\n\t\n\t\t\t\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\t\t\t\tsaveGlobal();\n\t\n\t\t\t\t\t\t\t// Unblock\n\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\n\t\tvalid: function() {\n\t\t\tvar filter = config.filter,\n\t\t\t\tregexFilter = /^(!?)\\/([\\w\\W]*)\\/(i?$)/.exec( filter ),\n\t\t\t\tmodule = config.module && config.module.toLowerCase(),\n\t\t\t\tfullName = ( this.module.name + \": \" + this.testName );\n\t\n\t\t\tfunction moduleChainNameMatch( testModule ) {\n\t\t\t\tvar testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\n\t\t\t\tif ( testModuleName === module ) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else if ( testModule.parentModule ) {\n\t\t\t\t\treturn moduleChainNameMatch( testModule.parentModule );\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tfunction moduleChainIdMatch( testModule ) {\n\t\t\t\treturn inArray( testModule.moduleId, config.moduleId ) > -1 ||\n\t\t\t\t\ttestModule.parentModule && moduleChainIdMatch( testModule.parentModule );\n\t\t\t}\n\t\n\t\t\t// Internally-generated tests are always valid\n\t\t\tif ( this.callback && this.callback.validTest ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\tif ( config.moduleId && config.moduleId.length > 0 &&\n\t\t\t\t!moduleChainIdMatch( this.module ) ) {\n\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( config.testId && config.testId.length > 0 &&\n\t\t\t\tinArray( this.testId, config.testId ) < 0 ) {\n\t\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( module && !moduleChainNameMatch( this.module ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\n\t\t\tif ( !filter ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\treturn regexFilter ?\n\t\t\t\tthis.regexFilter( !!regexFilter[ 1 ], regexFilter[ 2 ], regexFilter[ 3 ], fullName ) :\n\t\t\t\tthis.stringFilter( filter, fullName );\n\t\t},\n\t\n\t\tregexFilter: function( exclude, pattern, flags, fullName ) {\n\t\t\tvar regex = new RegExp( pattern, flags );\n\t\t\tvar match = regex.test( fullName );\n\t\n\t\t\treturn match !== exclude;\n\t\t},\n\t\n\t\tstringFilter: function( filter, fullName ) {\n\t\t\tfilter = filter.toLowerCase();\n\t\t\tfullName = fullName.toLowerCase();\n\t\n\t\t\tvar include = filter.charAt( 0 ) !== \"!\";\n\t\t\tif ( !include ) {\n\t\t\t\tfilter = filter.slice( 1 );\n\t\t\t}\n\t\n\t\t\t// If the filter matches, we need to honour include\n\t\t\tif ( fullName.indexOf( filter ) !== -1 ) {\n\t\t\t\treturn include;\n\t\t\t}\n\t\n\t\t\t// Otherwise, do the opposite\n\t\t\treturn !include;\n\t\t}\n\t};\n\t\n\t// Resets the test setup. Useful for tests that modify the DOM.\n\t/*\n\tDEPRECATED: Use multiple tests instead of resetting inside a test.\n\tUse testStart or testDone for custom cleanup.\n\tThis method will throw an error in 2.0, and will be removed in 2.1\n\t*/\n\tQUnit.reset = function() {\n\t\n\t\t// Return on non-browser environments\n\t\t// This is necessary to not break on node tests\n\t\tif ( !defined.document ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tvar fixture = defined.document && document.getElementById &&\n\t\t\t\tdocument.getElementById( \"qunit-fixture\" );\n\t\n\t\tif ( fixture ) {\n\t\t\tfixture.innerHTML = config.fixture;\n\t\t}\n\t};\n\t\n\tQUnit.pushFailure = function() {\n\t\tif ( !QUnit.config.current ) {\n\t\t\tthrow new Error( \"pushFailure() assertion outside test context, in \" +\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t}\n\t\n\t\t// Gets current test obj\n\t\tvar currentTest = QUnit.config.current;\n\t\n\t\treturn currentTest.pushFailure.apply( currentTest, arguments );\n\t};\n\t\n\t// Based on Java's String.hashCode, a simple but not\n\t// rigorously collision resistant hashing function\n\tfunction generateHash( module, testName ) {\n\t\tvar hex,\n\t\t\ti = 0,\n\t\t\thash = 0,\n\t\t\tstr = module + \"\\x1C\" + testName,\n\t\t\tlen = str.length;\n\t\n\t\tfor ( ; i < len; i++ ) {\n\t\t\thash  = ( ( hash << 5 ) - hash ) + str.charCodeAt( i );\n\t\t\thash |= 0;\n\t\t}\n\t\n\t\t// Convert the possibly negative integer hash code into an 8 character hex string, which isn't\n\t\t// strictly necessary but increases user understanding that the id is a SHA-like hash\n\t\thex = ( 0x100000000 + hash ).toString( 16 );\n\t\tif ( hex.length < 8 ) {\n\t\t\thex = \"0000000\" + hex;\n\t\t}\n\t\n\t\treturn hex.slice( -8 );\n\t}\n\t\n\tfunction synchronize( callback, priority, seed ) {\n\t\tvar last = !priority,\n\t\t\tindex;\n\t\n\t\tif ( QUnit.objectType( callback ) === \"array\" ) {\n\t\t\twhile ( callback.length ) {\n\t\t\t\tsynchronize( callback.shift() );\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\n\t\tif ( priority ) {\n\t\t\tconfig.queue.splice( priorityCount++, 0, callback );\n\t\t} else if ( seed ) {\n\t\t\tif ( !unitSampler ) {\n\t\t\t\tunitSampler = unitSamplerGenerator( seed );\n\t\t\t}\n\t\n\t\t\t// Insert into a random position after all priority items\n\t\t\tindex = Math.floor( unitSampler() * ( config.queue.length - priorityCount + 1 ) );\n\t\t\tconfig.queue.splice( priorityCount + index, 0, callback );\n\t\t} else {\n\t\t\tconfig.queue.push( callback );\n\t\t}\n\t\n\t\tif ( config.autorun && !config.blocking ) {\n\t\t\tprocess( last );\n\t\t}\n\t}\n\t\n\tfunction unitSamplerGenerator( seed ) {\n\t\n\t\t// 32-bit xorshift, requires only a nonzero seed\n\t\t// http://excamera.com/sphinx/article-xorshift.html\n\t\tvar sample = parseInt( generateHash( seed ), 16 ) || -1;\n\t\treturn function() {\n\t\t\tsample ^= sample << 13;\n\t\t\tsample ^= sample >>> 17;\n\t\t\tsample ^= sample << 5;\n\t\n\t\t\t// ECMAScript has no unsigned number type\n\t\t\tif ( sample < 0 ) {\n\t\t\t\tsample += 0x100000000;\n\t\t\t}\n\t\n\t\t\treturn sample / 0x100000000;\n\t\t};\n\t}\n\t\n\tfunction saveGlobal() {\n\t\tconfig.pollution = [];\n\t\n\t\tif ( config.noglobals ) {\n\t\t\tfor ( var key in global ) {\n\t\t\t\tif ( hasOwn.call( global, key ) ) {\n\t\n\t\t\t\t\t// In Opera sometimes DOM element ids show up here, ignore them\n\t\t\t\t\tif ( /^qunit-test-output/.test( key ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconfig.pollution.push( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction checkPollution() {\n\t\tvar newGlobals,\n\t\t\tdeletedGlobals,\n\t\t\told = config.pollution;\n\t\n\t\tsaveGlobal();\n\t\n\t\tnewGlobals = diff( config.pollution, old );\n\t\tif ( newGlobals.length > 0 ) {\n\t\t\tQUnit.pushFailure( \"Introduced global variable(s): \" + newGlobals.join( \", \" ) );\n\t\t}\n\t\n\t\tdeletedGlobals = diff( old, config.pollution );\n\t\tif ( deletedGlobals.length > 0 ) {\n\t\t\tQUnit.pushFailure( \"Deleted global variable(s): \" + deletedGlobals.join( \", \" ) );\n\t\t}\n\t}\n\t\n\t// Will be exposed as QUnit.asyncTest\n\tfunction asyncTest( testName, expected, callback ) {\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tQUnit.test( testName, expected, callback, true );\n\t}\n\t\n\t// Will be exposed as QUnit.test\n\tfunction test( testName, expected, callback, async ) {\n\t\tif ( focused )  { return; }\n\t\n\t\tvar newTest;\n\t\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tnewTest = new Test( {\n\t\t\ttestName: testName,\n\t\t\texpected: expected,\n\t\t\tasync: async,\n\t\t\tcallback: callback\n\t\t} );\n\t\n\t\tnewTest.queue();\n\t}\n\t\n\t// Will be exposed as QUnit.skip\n\tfunction skip( testName ) {\n\t\tif ( focused )  { return; }\n\t\n\t\tvar test = new Test( {\n\t\t\ttestName: testName,\n\t\t\tskip: true\n\t\t} );\n\t\n\t\ttest.queue();\n\t}\n\t\n\t// Will be exposed as QUnit.only\n\tfunction only( testName, expected, callback, async ) {\n\t\tvar newTest;\n\t\n\t\tif ( focused )  { return; }\n\t\n\t\tQUnit.config.queue.length = 0;\n\t\tfocused = true;\n\t\n\t\tif ( arguments.length === 2 ) {\n\t\t\tcallback = expected;\n\t\t\texpected = null;\n\t\t}\n\t\n\t\tnewTest = new Test( {\n\t\t\ttestName: testName,\n\t\t\texpected: expected,\n\t\t\tasync: async,\n\t\t\tcallback: callback\n\t\t} );\n\t\n\t\tnewTest.queue();\n\t}\n\t\n\tfunction Assert( testContext ) {\n\t\tthis.test = testContext;\n\t}\n\t\n\t// Assert helpers\n\tQUnit.assert = Assert.prototype = {\n\t\n\t\t// Specify the number of expected assertions to guarantee that failed test\n\t\t// (no assertions are run at all) don't slip through.\n\t\texpect: function( asserts ) {\n\t\t\tif ( arguments.length === 1 ) {\n\t\t\t\tthis.test.expected = asserts;\n\t\t\t} else {\n\t\t\t\treturn this.test.expected;\n\t\t\t}\n\t\t},\n\t\n\t\t// Increment this Test's semaphore counter, then return a function that\n\t\t// decrements that counter a maximum of once.\n\t\tasync: function( count ) {\n\t\t\tvar test = this.test,\n\t\t\t\tpopped = false,\n\t\t\t\tacceptCallCount = count;\n\t\n\t\t\tif ( typeof acceptCallCount === \"undefined\" ) {\n\t\t\t\tacceptCallCount = 1;\n\t\t\t}\n\t\n\t\t\ttest.semaphore += 1;\n\t\t\ttest.usedAsync = true;\n\t\t\tpauseProcessing();\n\t\n\t\t\treturn function done() {\n\t\n\t\t\t\tif ( popped ) {\n\t\t\t\t\ttest.pushFailure( \"Too many calls to the `assert.async` callback\",\n\t\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tacceptCallCount -= 1;\n\t\t\t\tif ( acceptCallCount > 0 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\n\t\t\t\ttest.semaphore -= 1;\n\t\t\t\tpopped = true;\n\t\t\t\tresumeProcessing();\n\t\t\t};\n\t\t},\n\t\n\t\t// Exports test.push() to the user API\n\t\t// Alias of pushResult.\n\t\tpush: function( result, actual, expected, message, negative ) {\n\t\t\tvar currentAssert = this instanceof Assert ? this : QUnit.config.current.assert;\n\t\t\treturn currentAssert.pushResult( {\n\t\t\t\tresult: result,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: negative\n\t\t\t} );\n\t\t},\n\t\n\t\tpushResult: function( resultInfo ) {\n\t\n\t\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\t\tvar assert = this,\n\t\t\t\tcurrentTest = ( assert instanceof Assert && assert.test ) || QUnit.config.current;\n\t\n\t\t\t// Backwards compatibility fix.\n\t\t\t// Allows the direct use of global exported assertions and QUnit.assert.*\n\t\t\t// Although, it's use is not recommended as it can leak assertions\n\t\t\t// to other tests from async tests, because we only get a reference to the current test,\n\t\t\t// not exactly the test where assertion were intended to be called.\n\t\t\tif ( !currentTest ) {\n\t\t\t\tthrow new Error( \"assertion outside test context, in \" + sourceFromStacktrace( 2 ) );\n\t\t\t}\n\t\n\t\t\tif ( currentTest.usedAsync === true && currentTest.semaphore === 0 ) {\n\t\t\t\tcurrentTest.pushFailure( \"Assertion after the final `assert.async` was resolved\",\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\n\t\t\t\t// Allow this assertion to continue running anyway...\n\t\t\t}\n\t\n\t\t\tif ( !( assert instanceof Assert ) ) {\n\t\t\t\tassert = currentTest.assert;\n\t\t\t}\n\t\n\t\t\treturn assert.test.pushResult( resultInfo );\n\t\t},\n\t\n\t\tok: function( result, message ) {\n\t\t\tmessage = message || ( result ? \"okay\" : \"failed, expected argument to be truthy, was: \" +\n\t\t\t\tQUnit.dump.parse( result ) );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !!result,\n\t\t\t\tactual: result,\n\t\t\t\texpected: true,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotOk: function( result, message ) {\n\t\t\tmessage = message || ( !result ? \"okay\" : \"failed, expected argument to be falsy, was: \" +\n\t\t\t\tQUnit.dump.parse( result ) );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !result,\n\t\t\t\tactual: result,\n\t\t\t\texpected: false,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tequal: function( actual, expected, message ) {\n\t\t\t/*jshint eqeqeq:false */\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected == actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotEqual: function( actual, expected, message ) {\n\t\t\t/*jshint eqeqeq:false */\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected != actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tpropEqual: function( actual, expected, message ) {\n\t\t\tactual = objectValues( actual );\n\t\t\texpected = objectValues( expected );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotPropEqual: function( actual, expected, message ) {\n\t\t\tactual = objectValues( actual );\n\t\t\texpected = objectValues( expected );\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tdeepEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotDeepEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\tstrictEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected === actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t},\n\t\n\t\tnotStrictEqual: function( actual, expected, message ) {\n\t\t\tthis.pushResult( {\n\t\t\t\tresult: expected !== actual,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expected,\n\t\t\t\tmessage: message,\n\t\t\t\tnegative: true\n\t\t\t} );\n\t\t},\n\t\n\t\t\"throws\": function( block, expected, message ) {\n\t\t\tvar actual, expectedType,\n\t\t\t\texpectedOutput = expected,\n\t\t\t\tok = false,\n\t\t\t\tcurrentTest = ( this instanceof Assert && this.test ) || QUnit.config.current;\n\t\n\t\t\t// 'expected' is optional unless doing string comparison\n\t\t\tif ( message == null && typeof expected === \"string\" ) {\n\t\t\t\tmessage = expected;\n\t\t\t\texpected = null;\n\t\t\t}\n\t\n\t\t\tcurrentTest.ignoreGlobalErrors = true;\n\t\t\ttry {\n\t\t\t\tblock.call( currentTest.testEnvironment );\n\t\t\t} catch ( e ) {\n\t\t\t\tactual = e;\n\t\t\t}\n\t\t\tcurrentTest.ignoreGlobalErrors = false;\n\t\n\t\t\tif ( actual ) {\n\t\t\t\texpectedType = QUnit.objectType( expected );\n\t\n\t\t\t\t// We don't want to validate thrown error\n\t\t\t\tif ( !expected ) {\n\t\t\t\t\tok = true;\n\t\t\t\t\texpectedOutput = null;\n\t\n\t\t\t\t// Expected is a regexp\n\t\t\t\t} else if ( expectedType === \"regexp\" ) {\n\t\t\t\t\tok = expected.test( errorString( actual ) );\n\t\n\t\t\t\t// Expected is a string\n\t\t\t\t} else if ( expectedType === \"string\" ) {\n\t\t\t\t\tok = expected === errorString( actual );\n\t\n\t\t\t\t// Expected is a constructor, maybe an Error constructor\n\t\t\t\t} else if ( expectedType === \"function\" && actual instanceof expected ) {\n\t\t\t\t\tok = true;\n\t\n\t\t\t\t// Expected is an Error object\n\t\t\t\t} else if ( expectedType === \"object\" ) {\n\t\t\t\t\tok = actual instanceof expected.constructor &&\n\t\t\t\t\t\tactual.name === expected.name &&\n\t\t\t\t\t\tactual.message === expected.message;\n\t\n\t\t\t\t// Expected is a validation function which returns true if validation passed\n\t\t\t\t} else if ( expectedType === \"function\" && expected.call( {}, actual ) === true ) {\n\t\t\t\t\texpectedOutput = null;\n\t\t\t\t\tok = true;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\tcurrentTest.assert.pushResult( {\n\t\t\t\tresult: ok,\n\t\t\t\tactual: actual,\n\t\t\t\texpected: expectedOutput,\n\t\t\t\tmessage: message\n\t\t\t} );\n\t\t}\n\t};\n\t\n\t// Provide an alternative to assert.throws(), for environments that consider throws a reserved word\n\t// Known to us are: Closure Compiler, Narwhal\n\t( function() {\n\t\t/*jshint sub:true */\n\t\tAssert.prototype.raises = Assert.prototype [ \"throws\" ]; //jscs:ignore requireDotNotation\n\t}() );\n\t\n\tfunction errorString( error ) {\n\t\tvar name, message,\n\t\t\tresultErrorString = error.toString();\n\t\tif ( resultErrorString.substring( 0, 7 ) === \"[object\" ) {\n\t\t\tname = error.name ? error.name.toString() : \"Error\";\n\t\t\tmessage = error.message ? error.message.toString() : \"\";\n\t\t\tif ( name && message ) {\n\t\t\t\treturn name + \": \" + message;\n\t\t\t} else if ( name ) {\n\t\t\t\treturn name;\n\t\t\t} else if ( message ) {\n\t\t\t\treturn message;\n\t\t\t} else {\n\t\t\t\treturn \"Error\";\n\t\t\t}\n\t\t} else {\n\t\t\treturn resultErrorString;\n\t\t}\n\t}\n\t\n\t// Test for equality any JavaScript type.\n\t// Author: Philippe Rathé <prathe@gmail.com>\n\tQUnit.equiv = ( function() {\n\t\n\t\t// Stack to decide between skip/abort functions\n\t\tvar callers = [];\n\t\n\t\t// Stack to avoiding loops from circular referencing\n\t\tvar parents = [];\n\t\tvar parentsB = [];\n\t\n\t\tvar getProto = Object.getPrototypeOf || function( obj ) {\n\t\n\t\t\t/*jshint proto: true */\n\t\t\treturn obj.__proto__;\n\t\t};\n\t\n\t\tfunction useStrictEquality( b, a ) {\n\t\n\t\t\t// To catch short annotation VS 'new' annotation of a declaration. e.g.:\n\t\t\t// `var i = 1;`\n\t\t\t// `var j = new Number(1);`\n\t\t\tif ( typeof a === \"object\" ) {\n\t\t\t\ta = a.valueOf();\n\t\t\t}\n\t\t\tif ( typeof b === \"object\" ) {\n\t\t\t\tb = b.valueOf();\n\t\t\t}\n\t\n\t\t\treturn a === b;\n\t\t}\n\t\n\t\tfunction compareConstructors( a, b ) {\n\t\t\tvar protoA = getProto( a );\n\t\t\tvar protoB = getProto( b );\n\t\n\t\t\t// Comparing constructors is more strict than using `instanceof`\n\t\t\tif ( a.constructor === b.constructor ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\t// Ref #851\n\t\t\t// If the obj prototype descends from a null constructor, treat it\n\t\t\t// as a null prototype.\n\t\t\tif ( protoA && protoA.constructor === null ) {\n\t\t\t\tprotoA = null;\n\t\t\t}\n\t\t\tif ( protoB && protoB.constructor === null ) {\n\t\t\t\tprotoB = null;\n\t\t\t}\n\t\n\t\t\t// Allow objects with no prototype to be equivalent to\n\t\t\t// objects with Object as their constructor.\n\t\t\tif ( ( protoA === null && protoB === Object.prototype ) ||\n\t\t\t\t\t( protoB === null && protoA === Object.prototype ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\t}\n\t\n\t\tfunction getRegExpFlags( regexp ) {\n\t\t\treturn \"flags\" in regexp ? regexp.flags : regexp.toString().match( /[gimuy]*$/ )[ 0 ];\n\t\t}\n\t\n\t\tvar callbacks = {\n\t\t\t\"string\": useStrictEquality,\n\t\t\t\"boolean\": useStrictEquality,\n\t\t\t\"number\": useStrictEquality,\n\t\t\t\"null\": useStrictEquality,\n\t\t\t\"undefined\": useStrictEquality,\n\t\t\t\"symbol\": useStrictEquality,\n\t\t\t\"date\": useStrictEquality,\n\t\n\t\t\t\"nan\": function() {\n\t\t\t\treturn true;\n\t\t\t},\n\t\n\t\t\t\"regexp\": function( b, a ) {\n\t\t\t\treturn a.source === b.source &&\n\t\n\t\t\t\t\t// Include flags in the comparison\n\t\t\t\t\tgetRegExpFlags( a ) === getRegExpFlags( b );\n\t\t\t},\n\t\n\t\t\t// - skip when the property is a method of an instance (OOP)\n\t\t\t// - abort otherwise,\n\t\t\t// initial === would have catch identical references anyway\n\t\t\t\"function\": function() {\n\t\t\t\tvar caller = callers[ callers.length - 1 ];\n\t\t\t\treturn caller !== Object && typeof caller !== \"undefined\";\n\t\t\t},\n\t\n\t\t\t\"array\": function( b, a ) {\n\t\t\t\tvar i, j, len, loop, aCircular, bCircular;\n\t\n\t\t\t\tlen = a.length;\n\t\t\t\tif ( len !== b.length ) {\n\t\n\t\t\t\t\t// Safe and faster\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\t// Track reference to avoid circular references\n\t\t\t\tparents.push( a );\n\t\t\t\tparentsB.push( b );\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tloop = false;\n\t\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tparents.pop();\n\t\t\t\tparentsB.pop();\n\t\t\t\treturn true;\n\t\t\t},\n\t\n\t\t\t\"set\": function( b, a ) {\n\t\t\t\tvar innerEq,\n\t\t\t\t\touterEq = true;\n\t\n\t\t\t\tif ( a.size !== b.size ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\ta.forEach( function( aVal ) {\n\t\t\t\t\tinnerEq = false;\n\t\n\t\t\t\t\tb.forEach( function( bVal ) {\n\t\t\t\t\t\tif ( innerEquiv( bVal, aVal ) ) {\n\t\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\t\touterEq = false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\n\t\t\t\treturn outerEq;\n\t\t\t},\n\t\n\t\t\t\"map\": function( b, a ) {\n\t\t\t\tvar innerEq,\n\t\t\t\t\touterEq = true;\n\t\n\t\t\t\tif ( a.size !== b.size ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\ta.forEach( function( aVal, aKey ) {\n\t\t\t\t\tinnerEq = false;\n\t\n\t\t\t\t\tb.forEach( function( bVal, bKey ) {\n\t\t\t\t\t\tif ( innerEquiv( [ bVal, bKey ], [ aVal, aKey ] ) ) {\n\t\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\n\t\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\t\touterEq = false;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\n\t\t\t\treturn outerEq;\n\t\t\t},\n\t\n\t\t\t\"object\": function( b, a ) {\n\t\t\t\tvar i, j, loop, aCircular, bCircular;\n\t\n\t\t\t\t// Default to true\n\t\t\t\tvar eq = true;\n\t\t\t\tvar aProperties = [];\n\t\t\t\tvar bProperties = [];\n\t\n\t\t\t\tif ( compareConstructors( a, b ) === false ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\n\t\t\t\t// Stack constructor before traversing properties\n\t\t\t\tcallers.push( a.constructor );\n\t\n\t\t\t\t// Track reference to avoid circular references\n\t\t\t\tparents.push( a );\n\t\t\t\tparentsB.push( b );\n\t\n\t\t\t\t// Be strict: don't ensure hasOwnProperty and go deep\n\t\t\t\tfor ( i in a ) {\n\t\t\t\t\tloop = false;\n\t\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\teq = false;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\taProperties.push( i );\n\t\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\t\teq = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tparents.pop();\n\t\t\t\tparentsB.pop();\n\t\n\t\t\t\t// Unstack, we are done\n\t\t\t\tcallers.pop();\n\t\n\t\t\t\tfor ( i in b ) {\n\t\n\t\t\t\t\t// Collect b's properties\n\t\t\t\t\tbProperties.push( i );\n\t\t\t\t}\n\t\n\t\t\t\t// Ensures identical properties name\n\t\t\t\treturn eq && innerEquiv( aProperties.sort(), bProperties.sort() );\n\t\t\t}\n\t\t};\n\t\n\t\tfunction typeEquiv( a, b ) {\n\t\t\tvar type = QUnit.objectType( a );\n\t\t\treturn QUnit.objectType( b ) === type && callbacks[ type ]( b, a );\n\t\t}\n\t\n\t\t// The real equiv function\n\t\tfunction innerEquiv( a, b ) {\n\t\n\t\t\t// We're done when there's nothing more to compare\n\t\t\tif ( arguments.length < 2 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\n\t\t\t// Require type-specific equality\n\t\t\treturn ( a === b || typeEquiv( a, b ) ) &&\n\t\n\t\t\t\t// ...across all consecutive argument pairs\n\t\t\t\t( arguments.length === 2 || innerEquiv.apply( this, [].slice.call( arguments, 1 ) ) );\n\t\t}\n\t\n\t\treturn innerEquiv;\n\t}() );\n\t\n\t// Based on jsDump by Ariel Flesler\n\t// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html\n\tQUnit.dump = ( function() {\n\t\tfunction quote( str ) {\n\t\t\treturn \"\\\"\" + str.toString().replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\"/g, \"\\\\\\\"\" ) + \"\\\"\";\n\t\t}\n\t\tfunction literal( o ) {\n\t\t\treturn o + \"\";\n\t\t}\n\t\tfunction join( pre, arr, post ) {\n\t\t\tvar s = dump.separator(),\n\t\t\t\tbase = dump.indent(),\n\t\t\t\tinner = dump.indent( 1 );\n\t\t\tif ( arr.join ) {\n\t\t\t\tarr = arr.join( \",\" + s + inner );\n\t\t\t}\n\t\t\tif ( !arr ) {\n\t\t\t\treturn pre + post;\n\t\t\t}\n\t\t\treturn [ pre, inner + arr, base + post ].join( s );\n\t\t}\n\t\tfunction array( arr, stack ) {\n\t\t\tvar i = arr.length,\n\t\t\t\tret = new Array( i );\n\t\n\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\treturn \"[object Array]\";\n\t\t\t}\n\t\n\t\t\tthis.up();\n\t\t\twhile ( i-- ) {\n\t\t\t\tret[ i ] = this.parse( arr[ i ], undefined, stack );\n\t\t\t}\n\t\t\tthis.down();\n\t\t\treturn join( \"[\", ret, \"]\" );\n\t\t}\n\t\n\t\tvar reName = /^function (\\w+)/,\n\t\t\tdump = {\n\t\n\t\t\t\t// The objType is used mostly internally, you can fix a (custom) type in advance\n\t\t\t\tparse: function( obj, objType, stack ) {\n\t\t\t\t\tstack = stack || [];\n\t\t\t\t\tvar res, parser, parserType,\n\t\t\t\t\t\tinStack = inArray( obj, stack );\n\t\n\t\t\t\t\tif ( inStack !== -1 ) {\n\t\t\t\t\t\treturn \"recursion(\" + ( inStack - stack.length ) + \")\";\n\t\t\t\t\t}\n\t\n\t\t\t\t\tobjType = objType || this.typeOf( obj  );\n\t\t\t\t\tparser = this.parsers[ objType ];\n\t\t\t\t\tparserType = typeof parser;\n\t\n\t\t\t\t\tif ( parserType === \"function\" ) {\n\t\t\t\t\t\tstack.push( obj );\n\t\t\t\t\t\tres = parser.call( this, obj, stack );\n\t\t\t\t\t\tstack.pop();\n\t\t\t\t\t\treturn res;\n\t\t\t\t\t}\n\t\t\t\t\treturn ( parserType === \"string\" ) ? parser : this.parsers.error;\n\t\t\t\t},\n\t\t\t\ttypeOf: function( obj ) {\n\t\t\t\t\tvar type;\n\t\t\t\t\tif ( obj === null ) {\n\t\t\t\t\t\ttype = \"null\";\n\t\t\t\t\t} else if ( typeof obj === \"undefined\" ) {\n\t\t\t\t\t\ttype = \"undefined\";\n\t\t\t\t\t} else if ( QUnit.is( \"regexp\", obj ) ) {\n\t\t\t\t\t\ttype = \"regexp\";\n\t\t\t\t\t} else if ( QUnit.is( \"date\", obj ) ) {\n\t\t\t\t\t\ttype = \"date\";\n\t\t\t\t\t} else if ( QUnit.is( \"function\", obj ) ) {\n\t\t\t\t\t\ttype = \"function\";\n\t\t\t\t\t} else if ( obj.setInterval !== undefined &&\n\t\t\t\t\t\t\tobj.document !== undefined &&\n\t\t\t\t\t\t\tobj.nodeType === undefined ) {\n\t\t\t\t\t\ttype = \"window\";\n\t\t\t\t\t} else if ( obj.nodeType === 9 ) {\n\t\t\t\t\t\ttype = \"document\";\n\t\t\t\t\t} else if ( obj.nodeType ) {\n\t\t\t\t\t\ttype = \"node\";\n\t\t\t\t\t} else if (\n\t\n\t\t\t\t\t\t// Native arrays\n\t\t\t\t\t\ttoString.call( obj ) === \"[object Array]\" ||\n\t\n\t\t\t\t\t\t// NodeList objects\n\t\t\t\t\t\t( typeof obj.length === \"number\" && obj.item !== undefined &&\n\t\t\t\t\t\t( obj.length ? obj.item( 0 ) === obj[ 0 ] : ( obj.item( 0 ) === null &&\n\t\t\t\t\t\tobj[ 0 ] === undefined ) ) )\n\t\t\t\t\t) {\n\t\t\t\t\t\ttype = \"array\";\n\t\t\t\t\t} else if ( obj.constructor === Error.prototype.constructor ) {\n\t\t\t\t\t\ttype = \"error\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = typeof obj;\n\t\t\t\t\t}\n\t\t\t\t\treturn type;\n\t\t\t\t},\n\t\n\t\t\t\tseparator: function() {\n\t\t\t\t\treturn this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&#160;\" : \" \";\n\t\t\t\t},\n\t\n\t\t\t\t// Extra can be a number, shortcut for increasing-calling-decreasing\n\t\t\t\tindent: function( extra ) {\n\t\t\t\t\tif ( !this.multiline ) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\t\t\t\t\tvar chr = this.indentChar;\n\t\t\t\t\tif ( this.HTML ) {\n\t\t\t\t\t\tchr = chr.replace( /\\t/g, \"   \" ).replace( / /g, \"&#160;\" );\n\t\t\t\t\t}\n\t\t\t\t\treturn new Array( this.depth + ( extra || 0 ) ).join( chr );\n\t\t\t\t},\n\t\t\t\tup: function( a ) {\n\t\t\t\t\tthis.depth += a || 1;\n\t\t\t\t},\n\t\t\t\tdown: function( a ) {\n\t\t\t\t\tthis.depth -= a || 1;\n\t\t\t\t},\n\t\t\t\tsetParser: function( name, parser ) {\n\t\t\t\t\tthis.parsers[ name ] = parser;\n\t\t\t\t},\n\t\n\t\t\t\t// The next 3 are exposed so you can use them\n\t\t\t\tquote: quote,\n\t\t\t\tliteral: literal,\n\t\t\t\tjoin: join,\n\t\t\t\tdepth: 1,\n\t\t\t\tmaxDepth: QUnit.config.maxDepth,\n\t\n\t\t\t\t// This is the list of parsers, to modify them, use dump.setParser\n\t\t\t\tparsers: {\n\t\t\t\t\twindow: \"[Window]\",\n\t\t\t\t\tdocument: \"[Document]\",\n\t\t\t\t\terror: function( error ) {\n\t\t\t\t\t\treturn \"Error(\\\"\" + error.message + \"\\\")\";\n\t\t\t\t\t},\n\t\t\t\t\tunknown: \"[Unknown]\",\n\t\t\t\t\t\"null\": \"null\",\n\t\t\t\t\t\"undefined\": \"undefined\",\n\t\t\t\t\t\"function\": function( fn ) {\n\t\t\t\t\t\tvar ret = \"function\",\n\t\n\t\t\t\t\t\t\t// Functions never have name in IE\n\t\t\t\t\t\t\tname = \"name\" in fn ? fn.name : ( reName.exec( fn ) || [] )[ 1 ];\n\t\n\t\t\t\t\t\tif ( name ) {\n\t\t\t\t\t\t\tret += \" \" + name;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tret += \"(\";\n\t\n\t\t\t\t\t\tret = [ ret, dump.parse( fn, \"functionArgs\" ), \"){\" ].join( \"\" );\n\t\t\t\t\t\treturn join( ret, dump.parse( fn, \"functionCode\" ), \"}\" );\n\t\t\t\t\t},\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnodelist: array,\n\t\t\t\t\t\"arguments\": array,\n\t\t\t\t\tobject: function( map, stack ) {\n\t\t\t\t\t\tvar keys, key, val, i, nonEnumerableProperties,\n\t\t\t\t\t\t\tret = [];\n\t\n\t\t\t\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\t\t\t\treturn \"[object Object]\";\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tdump.up();\n\t\t\t\t\t\tkeys = [];\n\t\t\t\t\t\tfor ( key in map ) {\n\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Some properties are not always enumerable on Error objects.\n\t\t\t\t\t\tnonEnumerableProperties = [ \"message\", \"name\" ];\n\t\t\t\t\t\tfor ( i in nonEnumerableProperties ) {\n\t\t\t\t\t\t\tkey = nonEnumerableProperties[ i ];\n\t\t\t\t\t\t\tif ( key in map && inArray( key, keys ) < 0 ) {\n\t\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tkeys.sort();\n\t\t\t\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\t\t\tval = map[ key ];\n\t\t\t\t\t\t\tret.push( dump.parse( key, \"key\" ) + \": \" +\n\t\t\t\t\t\t\t\tdump.parse( val, undefined, stack ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdump.down();\n\t\t\t\t\t\treturn join( \"{\", ret, \"}\" );\n\t\t\t\t\t},\n\t\t\t\t\tnode: function( node ) {\n\t\t\t\t\t\tvar len, i, val,\n\t\t\t\t\t\t\topen = dump.HTML ? \"&lt;\" : \"<\",\n\t\t\t\t\t\t\tclose = dump.HTML ? \"&gt;\" : \">\",\n\t\t\t\t\t\t\ttag = node.nodeName.toLowerCase(),\n\t\t\t\t\t\t\tret = open + tag,\n\t\t\t\t\t\t\tattrs = node.attributes;\n\t\n\t\t\t\t\t\tif ( attrs ) {\n\t\t\t\t\t\t\tfor ( i = 0, len = attrs.length; i < len; i++ ) {\n\t\t\t\t\t\t\t\tval = attrs[ i ].nodeValue;\n\t\n\t\t\t\t\t\t\t\t// IE6 includes all attributes in .attributes, even ones not explicitly\n\t\t\t\t\t\t\t\t// set. Those have values like undefined, null, 0, false, \"\" or\n\t\t\t\t\t\t\t\t// \"inherit\".\n\t\t\t\t\t\t\t\tif ( val && val !== \"inherit\" ) {\n\t\t\t\t\t\t\t\t\tret += \" \" + attrs[ i ].nodeName + \"=\" +\n\t\t\t\t\t\t\t\t\t\tdump.parse( val, \"attribute\" );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tret += close;\n\t\n\t\t\t\t\t\t// Show content of TextNode or CDATASection\n\t\t\t\t\t\tif ( node.nodeType === 3 || node.nodeType === 4 ) {\n\t\t\t\t\t\t\tret += node.nodeValue;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\treturn ret + open + \"/\" + tag + close;\n\t\t\t\t\t},\n\t\n\t\t\t\t\t// Function calls it internally, it's the arguments part of the function\n\t\t\t\t\tfunctionArgs: function( fn ) {\n\t\t\t\t\t\tvar args,\n\t\t\t\t\t\t\tl = fn.length;\n\t\n\t\t\t\t\t\tif ( !l ) {\n\t\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\targs = new Array( l );\n\t\t\t\t\t\twhile ( l-- ) {\n\t\n\t\t\t\t\t\t\t// 97 is 'a'\n\t\t\t\t\t\t\targs[ l ] = String.fromCharCode( 97 + l );\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn \" \" + args.join( \", \" ) + \" \";\n\t\t\t\t\t},\n\t\n\t\t\t\t\t// Object calls it internally, the key part of an item in a map\n\t\t\t\t\tkey: quote,\n\t\n\t\t\t\t\t// Function calls it internally, it's the content of the function\n\t\t\t\t\tfunctionCode: \"[code]\",\n\t\n\t\t\t\t\t// Node calls it internally, it's a html attribute value\n\t\t\t\t\tattribute: quote,\n\t\t\t\t\tstring: quote,\n\t\t\t\t\tdate: quote,\n\t\t\t\t\tregexp: literal,\n\t\t\t\t\tnumber: literal,\n\t\t\t\t\t\"boolean\": literal\n\t\t\t\t},\n\t\n\t\t\t\t// If true, entities are escaped ( <, >, \\t, space and \\n )\n\t\t\t\tHTML: false,\n\t\n\t\t\t\t// Indentation unit\n\t\t\t\tindentChar: \"  \",\n\t\n\t\t\t\t// If true, items in a collection, are separated by a \\n, else just a space.\n\t\t\t\tmultiline: true\n\t\t\t};\n\t\n\t\treturn dump;\n\t}() );\n\t\n\t// Back compat\n\tQUnit.jsDump = QUnit.dump;\n\t\n\t// Deprecated\n\t// Extend assert methods to QUnit for Backwards compatibility\n\t( function() {\n\t\tvar i,\n\t\t\tassertions = Assert.prototype;\n\t\n\t\tfunction applyCurrent( current ) {\n\t\t\treturn function() {\n\t\t\t\tvar assert = new Assert( QUnit.config.current );\n\t\t\t\tcurrent.apply( assert, arguments );\n\t\t\t};\n\t\t}\n\t\n\t\tfor ( i in assertions ) {\n\t\t\tQUnit[ i ] = applyCurrent( assertions[ i ] );\n\t\t}\n\t}() );\n\t\n\t// For browser, export only select globals\n\tif ( defined.document ) {\n\t\n\t\t( function() {\n\t\t\tvar i, l,\n\t\t\t\tkeys = [\n\t\t\t\t\t\"test\",\n\t\t\t\t\t\"module\",\n\t\t\t\t\t\"expect\",\n\t\t\t\t\t\"asyncTest\",\n\t\t\t\t\t\"start\",\n\t\t\t\t\t\"stop\",\n\t\t\t\t\t\"ok\",\n\t\t\t\t\t\"notOk\",\n\t\t\t\t\t\"equal\",\n\t\t\t\t\t\"notEqual\",\n\t\t\t\t\t\"propEqual\",\n\t\t\t\t\t\"notPropEqual\",\n\t\t\t\t\t\"deepEqual\",\n\t\t\t\t\t\"notDeepEqual\",\n\t\t\t\t\t\"strictEqual\",\n\t\t\t\t\t\"notStrictEqual\",\n\t\t\t\t\t\"throws\",\n\t\t\t\t\t\"raises\"\n\t\t\t\t];\n\t\n\t\t\tfor ( i = 0, l = keys.length; i < l; i++ ) {\n\t\t\t\twindow[ keys[ i ] ] = QUnit[ keys[ i ] ];\n\t\t\t}\n\t\t}() );\n\t\n\t\twindow.QUnit = QUnit;\n\t}\n\t\n\t// For nodejs\n\tif ( typeof module !== \"undefined\" && module && module.exports ) {\n\t\tmodule.exports = QUnit;\n\t\n\t\t// For consistency with CommonJS environments' exports\n\t\tmodule.exports.QUnit = QUnit;\n\t}\n\t\n\t// For CommonJS with exports, but without module.exports, like Rhino\n\tif ( typeof exports !== \"undefined\" && exports ) {\n\t\texports.QUnit = QUnit;\n\t}\n\t\n\tif ( true ) {\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn QUnit;\n\t\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t\tQUnit.config.autostart = false;\n\t}\n\t\n\t// Get a reference to the global object, like window in browsers\n\t}( ( function() {\n\t\treturn this;\n\t}() ) ) );\n\t\n\t( function() {\n\t\n\t// Only interact with URLs via window.location\n\tvar location = typeof window !== \"undefined\" && window.location;\n\tif ( !location ) {\n\t\treturn;\n\t}\n\t\n\tvar urlParams = getUrlParams();\n\t\n\tQUnit.urlParams = urlParams;\n\t\n\t// Match module/test by inclusion in an array\n\tQUnit.config.moduleId = [].concat( urlParams.moduleId || [] );\n\tQUnit.config.testId = [].concat( urlParams.testId || [] );\n\t\n\t// Exact case-insensitive match of the module name\n\tQUnit.config.module = urlParams.module;\n\t\n\t// Regular expression or case-insenstive substring match against \"moduleName: testName\"\n\tQUnit.config.filter = urlParams.filter;\n\t\n\t// Test order randomization\n\tif ( urlParams.seed === true ) {\n\t\n\t\t// Generate a random seed if the option is specified without a value\n\t\tQUnit.config.seed = Math.random().toString( 36 ).slice( 2 );\n\t} else if ( urlParams.seed ) {\n\t\tQUnit.config.seed = urlParams.seed;\n\t}\n\t\n\t// Add URL-parameter-mapped config values with UI form rendering data\n\tQUnit.config.urlConfig.push(\n\t\t{\n\t\t\tid: \"hidepassed\",\n\t\t\tlabel: \"Hide passed tests\",\n\t\t\ttooltip: \"Only show tests and assertions that fail. Stored as query-strings.\"\n\t\t},\n\t\t{\n\t\t\tid: \"noglobals\",\n\t\t\tlabel: \"Check for Globals\",\n\t\t\ttooltip: \"Enabling this will test if any test introduces new properties on the \" +\n\t\t\t\t\"global object (`window` in Browsers). Stored as query-strings.\"\n\t\t},\n\t\t{\n\t\t\tid: \"notrycatch\",\n\t\t\tlabel: \"No try-catch\",\n\t\t\ttooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging \" +\n\t\t\t\t\"exceptions in IE reasonable. Stored as query-strings.\"\n\t\t}\n\t);\n\t\n\tQUnit.begin( function() {\n\t\tvar i, option,\n\t\t\turlConfig = QUnit.config.urlConfig;\n\t\n\t\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\t\n\t\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\t\toption = QUnit.config.urlConfig[ i ];\n\t\t\tif ( typeof option !== \"string\" ) {\n\t\t\t\toption = option.id;\n\t\t\t}\n\t\n\t\t\tif ( QUnit.config[ option ] === undefined ) {\n\t\t\t\tQUnit.config[ option ] = urlParams[ option ];\n\t\t\t}\n\t\t}\n\t} );\n\t\n\tfunction getUrlParams() {\n\t\tvar i, param, name, value;\n\t\tvar urlParams = {};\n\t\tvar params = location.search.slice( 1 ).split( \"&\" );\n\t\tvar length = params.length;\n\t\n\t\tfor ( i = 0; i < length; i++ ) {\n\t\t\tif ( params[ i ] ) {\n\t\t\t\tparam = params[ i ].split( \"=\" );\n\t\t\t\tname = decodeURIComponent( param[ 0 ] );\n\t\n\t\t\t\t// Allow just a key to turn on a flag, e.g., test.html?noglobals\n\t\t\t\tvalue = param.length === 1 ||\n\t\t\t\t\tdecodeURIComponent( param.slice( 1 ).join( \"=\" ) ) ;\n\t\t\t\tif ( urlParams[ name ] ) {\n\t\t\t\t\turlParams[ name ] = [].concat( urlParams[ name ], value );\n\t\t\t\t} else {\n\t\t\t\t\turlParams[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\treturn urlParams;\n\t}\n\t\n\t// Don't load the HTML Reporter on non-browser environments\n\tif ( typeof window === \"undefined\" || !window.document ) {\n\t\treturn;\n\t}\n\t\n\t// Deprecated QUnit.init - Ref #530\n\t// Re-initialize the configuration options\n\tQUnit.init = function() {\n\t\tvar config = QUnit.config;\n\t\n\t\tconfig.stats = { all: 0, bad: 0 };\n\t\tconfig.moduleStats = { all: 0, bad: 0 };\n\t\tconfig.started = 0;\n\t\tconfig.updateRate = 1000;\n\t\tconfig.blocking = false;\n\t\tconfig.autostart = true;\n\t\tconfig.autorun = false;\n\t\tconfig.filter = \"\";\n\t\tconfig.queue = [];\n\t\n\t\tappendInterface();\n\t};\n\t\n\tvar config = QUnit.config,\n\t\tdocument = window.document,\n\t\tcollapseNext = false,\n\t\thasOwn = Object.prototype.hasOwnProperty,\n\t\tunfilteredUrl = setUrl( { filter: undefined, module: undefined,\n\t\t\tmoduleId: undefined, testId: undefined } ),\n\t\tdefined = {\n\t\t\tsessionStorage: ( function() {\n\t\t\t\tvar x = \"qunit-test-string\";\n\t\t\t\ttry {\n\t\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\t\treturn true;\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}() )\n\t\t},\n\t\tmodulesList = [];\n\t\n\t/**\n\t* Escape text for attribute or text content.\n\t*/\n\tfunction escapeText( s ) {\n\t\tif ( !s ) {\n\t\t\treturn \"\";\n\t\t}\n\t\ts = s + \"\";\n\t\n\t\t// Both single quotes and double quotes (for attributes)\n\t\treturn s.replace( /['\"<>&]/g, function( s ) {\n\t\t\tswitch ( s ) {\n\t\t\tcase \"'\":\n\t\t\t\treturn \"&#039;\";\n\t\t\tcase \"\\\"\":\n\t\t\t\treturn \"&quot;\";\n\t\t\tcase \"<\":\n\t\t\t\treturn \"&lt;\";\n\t\t\tcase \">\":\n\t\t\t\treturn \"&gt;\";\n\t\t\tcase \"&\":\n\t\t\t\treturn \"&amp;\";\n\t\t\t}\n\t\t} );\n\t}\n\t\n\t/**\n\t * @param {HTMLElement} elem\n\t * @param {string} type\n\t * @param {Function} fn\n\t */\n\tfunction addEvent( elem, type, fn ) {\n\t\tif ( elem.addEventListener ) {\n\t\n\t\t\t// Standards-based browsers\n\t\t\telem.addEventListener( type, fn, false );\n\t\t} else if ( elem.attachEvent ) {\n\t\n\t\t\t// Support: IE <9\n\t\t\telem.attachEvent( \"on\" + type, function() {\n\t\t\t\tvar event = window.event;\n\t\t\t\tif ( !event.target ) {\n\t\t\t\t\tevent.target = event.srcElement || document;\n\t\t\t\t}\n\t\n\t\t\t\tfn.call( elem, event );\n\t\t\t} );\n\t\t}\n\t}\n\t\n\t/**\n\t * @param {Array|NodeList} elems\n\t * @param {string} type\n\t * @param {Function} fn\n\t */\n\tfunction addEvents( elems, type, fn ) {\n\t\tvar i = elems.length;\n\t\twhile ( i-- ) {\n\t\t\taddEvent( elems[ i ], type, fn );\n\t\t}\n\t}\n\t\n\tfunction hasClass( elem, name ) {\n\t\treturn ( \" \" + elem.className + \" \" ).indexOf( \" \" + name + \" \" ) >= 0;\n\t}\n\t\n\tfunction addClass( elem, name ) {\n\t\tif ( !hasClass( elem, name ) ) {\n\t\t\telem.className += ( elem.className ? \" \" : \"\" ) + name;\n\t\t}\n\t}\n\t\n\tfunction toggleClass( elem, name, force ) {\n\t\tif ( force || typeof force === \"undefined\" && !hasClass( elem, name ) ) {\n\t\t\taddClass( elem, name );\n\t\t} else {\n\t\t\tremoveClass( elem, name );\n\t\t}\n\t}\n\t\n\tfunction removeClass( elem, name ) {\n\t\tvar set = \" \" + elem.className + \" \";\n\t\n\t\t// Class name may appear multiple times\n\t\twhile ( set.indexOf( \" \" + name + \" \" ) >= 0 ) {\n\t\t\tset = set.replace( \" \" + name + \" \", \" \" );\n\t\t}\n\t\n\t\t// Trim for prettiness\n\t\telem.className = typeof set.trim === \"function\" ? set.trim() : set.replace( /^\\s+|\\s+$/g, \"\" );\n\t}\n\t\n\tfunction id( name ) {\n\t\treturn document.getElementById && document.getElementById( name );\n\t}\n\t\n\tfunction getUrlConfigHtml() {\n\t\tvar i, j, val,\n\t\t\tescaped, escapedTooltip,\n\t\t\tselection = false,\n\t\t\turlConfig = config.urlConfig,\n\t\t\turlConfigHtml = \"\";\n\t\n\t\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\t\n\t\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\t\tval = config.urlConfig[ i ];\n\t\t\tif ( typeof val === \"string\" ) {\n\t\t\t\tval = {\n\t\t\t\t\tid: val,\n\t\t\t\t\tlabel: val\n\t\t\t\t};\n\t\t\t}\n\t\n\t\t\tescaped = escapeText( val.id );\n\t\t\tescapedTooltip = escapeText( val.tooltip );\n\t\n\t\t\tif ( !val.value || typeof val.value === \"string\" ) {\n\t\t\t\turlConfigHtml += \"<input id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' name='\" + escaped + \"' type='checkbox'\" +\n\t\t\t\t\t( val.value ? \" value='\" + escapeText( val.value ) + \"'\" : \"\" ) +\n\t\t\t\t\t( config[ val.id ] ? \" checked='checked'\" : \"\" ) +\n\t\t\t\t\t\" title='\" + escapedTooltip + \"' /><label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label + \"</label>\";\n\t\t\t} else {\n\t\t\t\turlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label +\n\t\t\t\t\t\": </label><select id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\t\"' name='\" + escaped + \"' title='\" + escapedTooltip + \"'><option></option>\";\n\t\n\t\t\t\tif ( QUnit.is( \"array\", val.value ) ) {\n\t\t\t\t\tfor ( j = 0; j < val.value.length; j++ ) {\n\t\t\t\t\t\tescaped = escapeText( val.value[ j ] );\n\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped + \"'\" +\n\t\t\t\t\t\t\t( config[ val.id ] === val.value[ j ] ?\n\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\">\" + escaped + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor ( j in val.value ) {\n\t\t\t\t\t\tif ( hasOwn.call( val.value, j ) ) {\n\t\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escapeText( j ) + \"'\" +\n\t\t\t\t\t\t\t\t( config[ val.id ] === j ?\n\t\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\t\">\" + escapeText( val.value[ j ] ) + \"</option>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( config[ val.id ] && !selection ) {\n\t\t\t\t\tescaped = escapeText( config[ val.id ] );\n\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped +\n\t\t\t\t\t\t\"' selected='selected' disabled='disabled'>\" + escaped + \"</option>\";\n\t\t\t\t}\n\t\t\t\turlConfigHtml += \"</select>\";\n\t\t\t}\n\t\t}\n\t\n\t\treturn urlConfigHtml;\n\t}\n\t\n\t// Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.\n\t// Updates the URL with the new state of `config.urlConfig` values.\n\tfunction toolbarChanged() {\n\t\tvar updatedUrl, value, tests,\n\t\t\tfield = this,\n\t\t\tparams = {};\n\t\n\t\t// Detect if field is a select menu or a checkbox\n\t\tif ( \"selectedIndex\" in field ) {\n\t\t\tvalue = field.options[ field.selectedIndex ].value || undefined;\n\t\t} else {\n\t\t\tvalue = field.checked ? ( field.defaultValue || true ) : undefined;\n\t\t}\n\t\n\t\tparams[ field.name ] = value;\n\t\tupdatedUrl = setUrl( params );\n\t\n\t\t// Check if we can apply the change without a page refresh\n\t\tif ( \"hidepassed\" === field.name && \"replaceState\" in window.history ) {\n\t\t\tQUnit.urlParams[ field.name ] = value;\n\t\t\tconfig[ field.name ] = value || false;\n\t\t\ttests = id( \"qunit-tests\" );\n\t\t\tif ( tests ) {\n\t\t\t\ttoggleClass( tests, \"hidepass\", value || false );\n\t\t\t}\n\t\t\twindow.history.replaceState( null, \"\", updatedUrl );\n\t\t} else {\n\t\t\twindow.location = updatedUrl;\n\t\t}\n\t}\n\t\n\tfunction setUrl( params ) {\n\t\tvar key, arrValue, i,\n\t\t\tquerystring = \"?\",\n\t\t\tlocation = window.location;\n\t\n\t\tparams = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\n\t\n\t\tfor ( key in params ) {\n\t\n\t\t\t// Skip inherited or undefined properties\n\t\t\tif ( hasOwn.call( params, key ) && params[ key ] !== undefined ) {\n\t\n\t\t\t\t// Output a parameter for each value of this key (but usually just one)\n\t\t\t\tarrValue = [].concat( params[ key ] );\n\t\t\t\tfor ( i = 0; i < arrValue.length; i++ ) {\n\t\t\t\t\tquerystring += encodeURIComponent( key );\n\t\t\t\t\tif ( arrValue[ i ] !== true ) {\n\t\t\t\t\t\tquerystring += \"=\" + encodeURIComponent( arrValue[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tquerystring += \"&\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn location.protocol + \"//\" + location.host +\n\t\t\tlocation.pathname + querystring.slice( 0, -1 );\n\t}\n\t\n\tfunction applyUrlParams() {\n\t\tvar selectedModule,\n\t\t\tmodulesList = id( \"qunit-modulefilter\" ),\n\t\t\tfilter = id( \"qunit-filter-input\" ).value;\n\t\n\t\tselectedModule = modulesList ?\n\t\t\tdecodeURIComponent( modulesList.options[ modulesList.selectedIndex ].value ) :\n\t\t\tundefined;\n\t\n\t\twindow.location = setUrl( {\n\t\t\tmodule: ( selectedModule === \"\" ) ? undefined : selectedModule,\n\t\t\tfilter: ( filter === \"\" ) ? undefined : filter,\n\t\n\t\t\t// Remove moduleId and testId filters\n\t\t\tmoduleId: undefined,\n\t\t\ttestId: undefined\n\t\t} );\n\t}\n\t\n\tfunction toolbarUrlConfigContainer() {\n\t\tvar urlConfigContainer = document.createElement( \"span\" );\n\t\n\t\turlConfigContainer.innerHTML = getUrlConfigHtml();\n\t\taddClass( urlConfigContainer, \"qunit-url-config\" );\n\t\n\t\t// For oldIE support:\n\t\t// * Add handlers to the individual elements instead of the container\n\t\t// * Use \"click\" instead of \"change\" for checkboxes\n\t\taddEvents( urlConfigContainer.getElementsByTagName( \"input\" ), \"click\", toolbarChanged );\n\t\taddEvents( urlConfigContainer.getElementsByTagName( \"select\" ), \"change\", toolbarChanged );\n\t\n\t\treturn urlConfigContainer;\n\t}\n\t\n\tfunction toolbarLooseFilter() {\n\t\tvar filter = document.createElement( \"form\" ),\n\t\t\tlabel = document.createElement( \"label\" ),\n\t\t\tinput = document.createElement( \"input\" ),\n\t\t\tbutton = document.createElement( \"button\" );\n\t\n\t\taddClass( filter, \"qunit-filter\" );\n\t\n\t\tlabel.innerHTML = \"Filter: \";\n\t\n\t\tinput.type = \"text\";\n\t\tinput.value = config.filter || \"\";\n\t\tinput.name = \"filter\";\n\t\tinput.id = \"qunit-filter-input\";\n\t\n\t\tbutton.innerHTML = \"Go\";\n\t\n\t\tlabel.appendChild( input );\n\t\n\t\tfilter.appendChild( label );\n\t\tfilter.appendChild( button );\n\t\taddEvent( filter, \"submit\", function( ev ) {\n\t\t\tapplyUrlParams();\n\t\n\t\t\tif ( ev && ev.preventDefault ) {\n\t\t\t\tev.preventDefault();\n\t\t\t}\n\t\n\t\t\treturn false;\n\t\t} );\n\t\n\t\treturn filter;\n\t}\n\t\n\tfunction toolbarModuleFilterHtml() {\n\t\tvar i,\n\t\t\tmoduleFilterHtml = \"\";\n\t\n\t\tif ( !modulesList.length ) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tmoduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label>\" +\n\t\t\t\"<select id='qunit-modulefilter' name='modulefilter'><option value='' \" +\n\t\t\t( QUnit.urlParams.module === undefined ? \"selected='selected'\" : \"\" ) +\n\t\t\t\">< All Modules ></option>\";\n\t\n\t\tfor ( i = 0; i < modulesList.length; i++ ) {\n\t\t\tmoduleFilterHtml += \"<option value='\" +\n\t\t\t\tescapeText( encodeURIComponent( modulesList[ i ] ) ) + \"' \" +\n\t\t\t\t( QUnit.urlParams.module === modulesList[ i ] ? \"selected='selected'\" : \"\" ) +\n\t\t\t\t\">\" + escapeText( modulesList[ i ] ) + \"</option>\";\n\t\t}\n\t\tmoduleFilterHtml += \"</select>\";\n\t\n\t\treturn moduleFilterHtml;\n\t}\n\t\n\tfunction toolbarModuleFilter() {\n\t\tvar toolbar = id( \"qunit-testrunner-toolbar\" ),\n\t\t\tmoduleFilter = document.createElement( \"span\" ),\n\t\t\tmoduleFilterHtml = toolbarModuleFilterHtml();\n\t\n\t\tif ( !toolbar || !moduleFilterHtml ) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tmoduleFilter.setAttribute( \"id\", \"qunit-modulefilter-container\" );\n\t\tmoduleFilter.innerHTML = moduleFilterHtml;\n\t\n\t\taddEvent( moduleFilter.lastChild, \"change\", applyUrlParams );\n\t\n\t\ttoolbar.appendChild( moduleFilter );\n\t}\n\t\n\tfunction appendToolbar() {\n\t\tvar toolbar = id( \"qunit-testrunner-toolbar\" );\n\t\n\t\tif ( toolbar ) {\n\t\t\ttoolbar.appendChild( toolbarUrlConfigContainer() );\n\t\t\ttoolbar.appendChild( toolbarLooseFilter() );\n\t\t\ttoolbarModuleFilter();\n\t\t}\n\t}\n\t\n\tfunction appendHeader() {\n\t\tvar header = id( \"qunit-header\" );\n\t\n\t\tif ( header ) {\n\t\t\theader.innerHTML = \"<a href='\" + escapeText( unfilteredUrl ) + \"'>\" + header.innerHTML +\n\t\t\t\t\"</a> \";\n\t\t}\n\t}\n\t\n\tfunction appendBanner() {\n\t\tvar banner = id( \"qunit-banner\" );\n\t\n\t\tif ( banner ) {\n\t\t\tbanner.className = \"\";\n\t\t}\n\t}\n\t\n\tfunction appendTestResults() {\n\t\tvar tests = id( \"qunit-tests\" ),\n\t\t\tresult = id( \"qunit-testresult\" );\n\t\n\t\tif ( result ) {\n\t\t\tresult.parentNode.removeChild( result );\n\t\t}\n\t\n\t\tif ( tests ) {\n\t\t\ttests.innerHTML = \"\";\n\t\t\tresult = document.createElement( \"p\" );\n\t\t\tresult.id = \"qunit-testresult\";\n\t\t\tresult.className = \"result\";\n\t\t\ttests.parentNode.insertBefore( result, tests );\n\t\t\tresult.innerHTML = \"Running...<br />&#160;\";\n\t\t}\n\t}\n\t\n\tfunction storeFixture() {\n\t\tvar fixture = id( \"qunit-fixture\" );\n\t\tif ( fixture ) {\n\t\t\tconfig.fixture = fixture.innerHTML;\n\t\t}\n\t}\n\t\n\tfunction appendFilteredTest() {\n\t\tvar testId = QUnit.config.testId;\n\t\tif ( !testId || testId.length <= 0 ) {\n\t\t\treturn \"\";\n\t\t}\n\t\treturn \"<div id='qunit-filteredTest'>Rerunning selected tests: \" +\n\t\t\tescapeText( testId.join( \", \" ) ) +\n\t\t\t\" <a id='qunit-clearFilter' href='\" +\n\t\t\tescapeText( unfilteredUrl ) +\n\t\t\t\"'>Run all tests</a></div>\";\n\t}\n\t\n\tfunction appendUserAgent() {\n\t\tvar userAgent = id( \"qunit-userAgent\" );\n\t\n\t\tif ( userAgent ) {\n\t\t\tuserAgent.innerHTML = \"\";\n\t\t\tuserAgent.appendChild(\n\t\t\t\tdocument.createTextNode(\n\t\t\t\t\t\"QUnit \" + QUnit.version + \"; \" + navigator.userAgent\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\t\n\tfunction appendInterface() {\n\t\tvar qunit = id( \"qunit\" );\n\t\n\t\tif ( qunit ) {\n\t\t\tqunit.innerHTML =\n\t\t\t\t\"<h1 id='qunit-header'>\" + escapeText( document.title ) + \"</h1>\" +\n\t\t\t\t\"<h2 id='qunit-banner'></h2>\" +\n\t\t\t\t\"<div id='qunit-testrunner-toolbar'></div>\" +\n\t\t\t\tappendFilteredTest() +\n\t\t\t\t\"<h2 id='qunit-userAgent'></h2>\" +\n\t\t\t\t\"<ol id='qunit-tests'></ol>\";\n\t\t}\n\t\n\t\tappendHeader();\n\t\tappendBanner();\n\t\tappendTestResults();\n\t\tappendUserAgent();\n\t\tappendToolbar();\n\t}\n\t\n\tfunction appendTestsList( modules ) {\n\t\tvar i, l, x, z, test, moduleObj;\n\t\n\t\tfor ( i = 0, l = modules.length; i < l; i++ ) {\n\t\t\tmoduleObj = modules[ i ];\n\t\n\t\t\tfor ( x = 0, z = moduleObj.tests.length; x < z; x++ ) {\n\t\t\t\ttest = moduleObj.tests[ x ];\n\t\n\t\t\t\tappendTest( test.name, test.testId, moduleObj.name );\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction appendTest( name, testId, moduleName ) {\n\t\tvar title, rerunTrigger, testBlock, assertList,\n\t\t\ttests = id( \"qunit-tests\" );\n\t\n\t\tif ( !tests ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\ttitle = document.createElement( \"strong\" );\n\t\ttitle.innerHTML = getNameHtml( name, moduleName );\n\t\n\t\trerunTrigger = document.createElement( \"a\" );\n\t\trerunTrigger.innerHTML = \"Rerun\";\n\t\trerunTrigger.href = setUrl( { testId: testId } );\n\t\n\t\ttestBlock = document.createElement( \"li\" );\n\t\ttestBlock.appendChild( title );\n\t\ttestBlock.appendChild( rerunTrigger );\n\t\ttestBlock.id = \"qunit-test-output-\" + testId;\n\t\n\t\tassertList = document.createElement( \"ol\" );\n\t\tassertList.className = \"qunit-assert-list\";\n\t\n\t\ttestBlock.appendChild( assertList );\n\t\n\t\ttests.appendChild( testBlock );\n\t}\n\t\n\t// HTML Reporter initialization and load\n\tQUnit.begin( function( details ) {\n\t\tvar i, moduleObj, tests;\n\t\n\t\t// Sort modules by name for the picker\n\t\tfor ( i = 0; i < details.modules.length; i++ ) {\n\t\t\tmoduleObj = details.modules[ i ];\n\t\t\tif ( moduleObj.name ) {\n\t\t\t\tmodulesList.push( moduleObj.name );\n\t\t\t}\n\t\t}\n\t\tmodulesList.sort( function( a, b ) {\n\t\t\treturn a.localeCompare( b );\n\t\t} );\n\t\n\t\t// Capture fixture HTML from the page\n\t\tstoreFixture();\n\t\n\t\t// Initialize QUnit elements\n\t\tappendInterface();\n\t\tappendTestsList( details.modules );\n\t\ttests = id( \"qunit-tests\" );\n\t\tif ( tests && config.hidepassed ) {\n\t\t\taddClass( tests, \"hidepass\" );\n\t\t}\n\t} );\n\t\n\tQUnit.done( function( details ) {\n\t\tvar i, key,\n\t\t\tbanner = id( \"qunit-banner\" ),\n\t\t\ttests = id( \"qunit-tests\" ),\n\t\t\thtml = [\n\t\t\t\t\"Tests completed in \",\n\t\t\t\tdetails.runtime,\n\t\t\t\t\" milliseconds.<br />\",\n\t\t\t\t\"<span class='passed'>\",\n\t\t\t\tdetails.passed,\n\t\t\t\t\"</span> assertions of <span class='total'>\",\n\t\t\t\tdetails.total,\n\t\t\t\t\"</span> passed, <span class='failed'>\",\n\t\t\t\tdetails.failed,\n\t\t\t\t\"</span> failed.\"\n\t\t\t].join( \"\" );\n\t\n\t\tif ( banner ) {\n\t\t\tbanner.className = details.failed ? \"qunit-fail\" : \"qunit-pass\";\n\t\t}\n\t\n\t\tif ( tests ) {\n\t\t\tid( \"qunit-testresult\" ).innerHTML = html;\n\t\t}\n\t\n\t\tif ( config.altertitle && document.title ) {\n\t\n\t\t\t// Show ✖ for good, ✔ for bad suite result in title\n\t\t\t// use escape sequences in case file gets loaded with non-utf-8-charset\n\t\t\tdocument.title = [\n\t\t\t\t( details.failed ? \"\\u2716\" : \"\\u2714\" ),\n\t\t\t\tdocument.title.replace( /^[\\u2714\\u2716] /i, \"\" )\n\t\t\t].join( \" \" );\n\t\t}\n\t\n\t\t// Clear own sessionStorage items if all tests passed\n\t\tif ( config.reorder && defined.sessionStorage && details.failed === 0 ) {\n\t\t\tfor ( i = 0; i < sessionStorage.length; i++ ) {\n\t\t\t\tkey = sessionStorage.key( i++ );\n\t\t\t\tif ( key.indexOf( \"qunit-test-\" ) === 0 ) {\n\t\t\t\t\tsessionStorage.removeItem( key );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Scroll back to top to show results\n\t\tif ( config.scrolltop && window.scrollTo ) {\n\t\t\twindow.scrollTo( 0, 0 );\n\t\t}\n\t} );\n\t\n\tfunction getNameHtml( name, module ) {\n\t\tvar nameHtml = \"\";\n\t\n\t\tif ( module ) {\n\t\t\tnameHtml = \"<span class='module-name'>\" + escapeText( module ) + \"</span>: \";\n\t\t}\n\t\n\t\tnameHtml += \"<span class='test-name'>\" + escapeText( name ) + \"</span>\";\n\t\n\t\treturn nameHtml;\n\t}\n\t\n\tQUnit.testStart( function( details ) {\n\t\tvar running, testBlock, bad;\n\t\n\t\ttestBlock = id( \"qunit-test-output-\" + details.testId );\n\t\tif ( testBlock ) {\n\t\t\ttestBlock.className = \"running\";\n\t\t} else {\n\t\n\t\t\t// Report later registered tests\n\t\t\tappendTest( details.name, details.testId, details.module );\n\t\t}\n\t\n\t\trunning = id( \"qunit-testresult\" );\n\t\tif ( running ) {\n\t\t\tbad = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\n\t\t\trunning.innerHTML = ( bad ?\n\t\t\t\t\"Rerunning previously failed test: <br />\" :\n\t\t\t\t\"Running: <br />\" ) +\n\t\t\t\tgetNameHtml( details.name, details.module );\n\t\t}\n\t\n\t} );\n\t\n\tfunction stripHtml( string ) {\n\t\n\t\t// Strip tags, html entity and whitespaces\n\t\treturn string.replace( /<\\/?[^>]+(>|$)/g, \"\" ).replace( /\\&quot;/g, \"\" ).replace( /\\s+/g, \"\" );\n\t}\n\t\n\tQUnit.log( function( details ) {\n\t\tvar assertList, assertLi,\n\t\t\tmessage, expected, actual, diff,\n\t\t\tshowDiff = false,\n\t\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\t\n\t\tif ( !testItem ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\tmessage = escapeText( details.message ) || ( details.result ? \"okay\" : \"failed\" );\n\t\tmessage = \"<span class='test-message'>\" + message + \"</span>\";\n\t\tmessage += \"<span class='runtime'>@ \" + details.runtime + \" ms</span>\";\n\t\n\t\t// The pushFailure doesn't provide details.expected\n\t\t// when it calls, it's implicit to also not show expected and diff stuff\n\t\t// Also, we need to check details.expected existence, as it can exist and be undefined\n\t\tif ( !details.result && hasOwn.call( details, \"expected\" ) ) {\n\t\t\tif ( details.negative ) {\n\t\t\t\texpected = \"NOT \" + QUnit.dump.parse( details.expected );\n\t\t\t} else {\n\t\t\t\texpected = QUnit.dump.parse( details.expected );\n\t\t\t}\n\t\n\t\t\tactual = QUnit.dump.parse( details.actual );\n\t\t\tmessage += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" +\n\t\t\t\tescapeText( expected ) +\n\t\t\t\t\"</pre></td></tr>\";\n\t\n\t\t\tif ( actual !== expected ) {\n\t\n\t\t\t\tmessage += \"<tr class='test-actual'><th>Result: </th><td><pre>\" +\n\t\t\t\t\tescapeText( actual ) + \"</pre></td></tr>\";\n\t\n\t\t\t\t// Don't show diff if actual or expected are booleans\n\t\t\t\tif ( !( /^(true|false)$/.test( actual ) ) &&\n\t\t\t\t\t\t!( /^(true|false)$/.test( expected ) ) ) {\n\t\t\t\t\tdiff = QUnit.diff( expected, actual );\n\t\t\t\t\tshowDiff = stripHtml( diff ).length !==\n\t\t\t\t\t\tstripHtml( expected ).length +\n\t\t\t\t\t\tstripHtml( actual ).length;\n\t\t\t\t}\n\t\n\t\t\t\t// Don't show diff if expected and actual are totally different\n\t\t\t\tif ( showDiff ) {\n\t\t\t\t\tmessage += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" +\n\t\t\t\t\t\tdiff + \"</pre></td></tr>\";\n\t\t\t\t}\n\t\t\t} else if ( expected.indexOf( \"[object Array]\" ) !== -1 ||\n\t\t\t\t\texpected.indexOf( \"[object Object]\" ) !== -1 ) {\n\t\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\t\"Diff suppressed as the depth of object is more than current max depth (\" +\n\t\t\t\t\tQUnit.config.maxDepth + \").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \" +\n\t\t\t\t\t\" run with a higher max depth or <a href='\" +\n\t\t\t\t\tescapeText( setUrl( { maxDepth: -1 } ) ) + \"'>\" +\n\t\t\t\t\t\"Rerun</a> without max depth.</p></td></tr>\";\n\t\t\t} else {\n\t\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\t\"Diff suppressed as the expected and actual results have an equivalent\" +\n\t\t\t\t\t\" serialization</td></tr>\";\n\t\t\t}\n\t\n\t\t\tif ( details.source ) {\n\t\t\t\tmessage += \"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\";\n\t\t\t}\n\t\n\t\t\tmessage += \"</table>\";\n\t\n\t\t// This occurs when pushFailure is set and we have an extracted stack trace\n\t\t} else if ( !details.result && details.source ) {\n\t\t\tmessage += \"<table>\" +\n\t\t\t\t\"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\" +\n\t\t\t\t\"</table>\";\n\t\t}\n\t\n\t\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\t\n\t\tassertLi = document.createElement( \"li\" );\n\t\tassertLi.className = details.result ? \"pass\" : \"fail\";\n\t\tassertLi.innerHTML = message;\n\t\tassertList.appendChild( assertLi );\n\t} );\n\t\n\tQUnit.testDone( function( details ) {\n\t\tvar testTitle, time, testItem, assertList,\n\t\t\tgood, bad, testCounts, skipped, sourceName,\n\t\t\ttests = id( \"qunit-tests\" );\n\t\n\t\tif ( !tests ) {\n\t\t\treturn;\n\t\t}\n\t\n\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\t\n\t\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\t\n\t\tgood = details.passed;\n\t\tbad = details.failed;\n\t\n\t\t// Store result when possible\n\t\tif ( config.reorder && defined.sessionStorage ) {\n\t\t\tif ( bad ) {\n\t\t\t\tsessionStorage.setItem( \"qunit-test-\" + details.module + \"-\" + details.name, bad );\n\t\t\t} else {\n\t\t\t\tsessionStorage.removeItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\t\t}\n\t\t}\n\t\n\t\tif ( bad === 0 ) {\n\t\n\t\t\t// Collapse the passing tests\n\t\t\taddClass( assertList, \"qunit-collapsed\" );\n\t\t} else if ( bad && config.collapse && !collapseNext ) {\n\t\n\t\t\t// Skip collapsing the first failing test\n\t\t\tcollapseNext = true;\n\t\t} else {\n\t\n\t\t\t// Collapse remaining tests\n\t\t\taddClass( assertList, \"qunit-collapsed\" );\n\t\t}\n\t\n\t\t// The testItem.firstChild is the test name\n\t\ttestTitle = testItem.firstChild;\n\t\n\t\ttestCounts = bad ?\n\t\t\t\"<b class='failed'>\" + bad + \"</b>, \" + \"<b class='passed'>\" + good + \"</b>, \" :\n\t\t\t\"\";\n\t\n\t\ttestTitle.innerHTML += \" <b class='counts'>(\" + testCounts +\n\t\t\tdetails.assertions.length + \")</b>\";\n\t\n\t\tif ( details.skipped ) {\n\t\t\ttestItem.className = \"skipped\";\n\t\t\tskipped = document.createElement( \"em\" );\n\t\t\tskipped.className = \"qunit-skipped-label\";\n\t\t\tskipped.innerHTML = \"skipped\";\n\t\t\ttestItem.insertBefore( skipped, testTitle );\n\t\t} else {\n\t\t\taddEvent( testTitle, \"click\", function() {\n\t\t\t\ttoggleClass( assertList, \"qunit-collapsed\" );\n\t\t\t} );\n\t\n\t\t\ttestItem.className = bad ? \"fail\" : \"pass\";\n\t\n\t\t\ttime = document.createElement( \"span\" );\n\t\t\ttime.className = \"runtime\";\n\t\t\ttime.innerHTML = details.runtime + \" ms\";\n\t\t\ttestItem.insertBefore( time, assertList );\n\t\t}\n\t\n\t\t// Show the source of the test when showing assertions\n\t\tif ( details.source ) {\n\t\t\tsourceName = document.createElement( \"p\" );\n\t\t\tsourceName.innerHTML = \"<strong>Source: </strong>\" + details.source;\n\t\t\taddClass( sourceName, \"qunit-source\" );\n\t\t\tif ( bad === 0 ) {\n\t\t\t\taddClass( sourceName, \"qunit-collapsed\" );\n\t\t\t}\n\t\t\taddEvent( testTitle, \"click\", function() {\n\t\t\t\ttoggleClass( sourceName, \"qunit-collapsed\" );\n\t\t\t} );\n\t\t\ttestItem.appendChild( sourceName );\n\t\t}\n\t} );\n\t\n\t// Avoid readyState issue with phantomjs\n\t// Ref: #818\n\tvar notPhantom = ( function( p ) {\n\t\treturn !( p && p.version && p.version.major > 0 );\n\t} )( window.phantom );\n\t\n\tif ( notPhantom && document.readyState === \"complete\" ) {\n\t\tQUnit.load();\n\t} else {\n\t\taddEvent( window, \"load\", QUnit.load );\n\t}\n\t\n\t/*\n\t * This file is a modified version of google-diff-match-patch's JavaScript implementation\n\t * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\n\t * modifications are licensed as more fully set forth in LICENSE.txt.\n\t *\n\t * The original source of google-diff-match-patch is attributable and licensed as follows:\n\t *\n\t * Copyright 2006 Google Inc.\n\t * https://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t * https://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t *\n\t * More Info:\n\t *  https://code.google.com/p/google-diff-match-patch/\n\t *\n\t * Usage: QUnit.diff(expected, actual)\n\t *\n\t */\n\tQUnit.diff = ( function() {\n\t\tfunction DiffMatchPatch() {\n\t\t}\n\t\n\t\t//  DIFF FUNCTIONS\n\t\n\t\t/**\n\t\t * The data structure representing a diff is an array of tuples:\n\t\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t\t */\n\t\tvar DIFF_DELETE = -1,\n\t\t\tDIFF_INSERT = 1,\n\t\t\tDIFF_EQUAL = 0;\n\t\n\t\t/**\n\t\t * Find the differences between two texts.  Simplifies the problem by stripping\n\t\t * any common prefix or suffix off the texts before diffing.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {boolean=} optChecklines Optional speedup flag. If present and false,\n\t\t *     then don't run a line-level diff first to identify the changed areas.\n\t\t *     Defaults to true, which does a faster, slightly less optimal diff.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.DiffMain = function( text1, text2, optChecklines ) {\n\t\t\tvar deadline, checklines, commonlength,\n\t\t\t\tcommonprefix, commonsuffix, diffs;\n\t\n\t\t\t// The diff must be complete in up to 1 second.\n\t\t\tdeadline = ( new Date() ).getTime() + 1000;\n\t\n\t\t\t// Check for null inputs.\n\t\t\tif ( text1 === null || text2 === null ) {\n\t\t\t\tthrow new Error( \"Null input. (DiffMain)\" );\n\t\t\t}\n\t\n\t\t\t// Check for equality (speedup).\n\t\t\tif ( text1 === text2 ) {\n\t\t\t\tif ( text1 ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t[ DIFF_EQUAL, text1 ]\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\t\n\t\t\tif ( typeof optChecklines === \"undefined\" ) {\n\t\t\t\toptChecklines = true;\n\t\t\t}\n\t\n\t\t\tchecklines = optChecklines;\n\t\n\t\t\t// Trim off common prefix (speedup).\n\t\t\tcommonlength = this.diffCommonPrefix( text1, text2 );\n\t\t\tcommonprefix = text1.substring( 0, commonlength );\n\t\t\ttext1 = text1.substring( commonlength );\n\t\t\ttext2 = text2.substring( commonlength );\n\t\n\t\t\t// Trim off common suffix (speedup).\n\t\t\tcommonlength = this.diffCommonSuffix( text1, text2 );\n\t\t\tcommonsuffix = text1.substring( text1.length - commonlength );\n\t\t\ttext1 = text1.substring( 0, text1.length - commonlength );\n\t\t\ttext2 = text2.substring( 0, text2.length - commonlength );\n\t\n\t\t\t// Compute the diff on the middle block.\n\t\t\tdiffs = this.diffCompute( text1, text2, checklines, deadline );\n\t\n\t\t\t// Restore the prefix and suffix.\n\t\t\tif ( commonprefix ) {\n\t\t\t\tdiffs.unshift( [ DIFF_EQUAL, commonprefix ] );\n\t\t\t}\n\t\t\tif ( commonsuffix ) {\n\t\t\t\tdiffs.push( [ DIFF_EQUAL, commonsuffix ] );\n\t\t\t}\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\treturn diffs;\n\t\t};\n\t\n\t\t/**\n\t\t * Reduce the number of edits by eliminating operationally trivial equalities.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupEfficiency = function( diffs ) {\n\t\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\t\tpointer, preIns, preDel, postIns, postDel;\n\t\t\tchanges = false;\n\t\t\tequalities = []; // Stack of indices where equalities are found.\n\t\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t\t/** @type {?string} */\n\t\t\tlastequality = null;\n\t\n\t\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\t\tpointer = 0; // Index of current position.\n\t\n\t\t\t// Is there an insertion operation before the last equality.\n\t\t\tpreIns = false;\n\t\n\t\t\t// Is there a deletion operation before the last equality.\n\t\t\tpreDel = false;\n\t\n\t\t\t// Is there an insertion operation after the last equality.\n\t\t\tpostIns = false;\n\t\n\t\t\t// Is there a deletion operation after the last equality.\n\t\t\tpostDel = false;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\n\t\t\t\t// Equality found.\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) {\n\t\t\t\t\tif ( diffs[ pointer ][ 1 ].length < 4 && ( postIns || postDel ) ) {\n\t\n\t\t\t\t\t\t// Candidate found.\n\t\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\t\tpreIns = postIns;\n\t\t\t\t\t\tpreDel = postDel;\n\t\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t\t} else {\n\t\n\t\t\t\t\t\t// Not a candidate, and can never become one.\n\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t}\n\t\t\t\t\tpostIns = postDel = false;\n\t\n\t\t\t\t// An insertion or deletion.\n\t\t\t\t} else {\n\t\n\t\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_DELETE ) {\n\t\t\t\t\t\tpostDel = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpostIns = true;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t/*\n\t\t\t\t\t * Five types to be split:\n\t\t\t\t\t * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins>X<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins><del>B</del>X<ins>C</ins>\n\t\t\t\t\t * <ins>A</del>X<ins>C</ins><del>D</del>\n\t\t\t\t\t * <ins>A</ins><del>B</del>X<del>C</del>\n\t\t\t\t\t */\n\t\t\t\t\tif ( lastequality && ( ( preIns && preDel && postIns && postDel ) ||\n\t\t\t\t\t\t\t( ( lastequality.length < 2 ) &&\n\t\t\t\t\t\t\t( preIns + preDel + postIns + postDel ) === 3 ) ) ) {\n\t\n\t\t\t\t\t\t// Duplicate record.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\tequalitiesLength--; // Throw away the equality we just deleted;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t\tif ( preIns && preDel ) {\n\t\n\t\t\t\t\t\t\t// No changes made which could affect previous entry, keep going.\n\t\t\t\t\t\t\tpostIns = postDel = true;\n\t\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tequalitiesLength--; // Throw away the previous equality.\n\t\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\t\t\t\t\t\tpostIns = postDel = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Convert a diff array into a pretty HTML report.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t * @param {integer} string to be beautified.\n\t\t * @return {string} HTML representation.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffPrettyHtml = function( diffs ) {\n\t\t\tvar op, data, x,\n\t\t\t\thtml = [];\n\t\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\t\top = diffs[ x ][ 0 ]; // Operation (insert, delete, equal)\n\t\t\t\tdata = diffs[ x ][ 1 ]; // Text of change.\n\t\t\t\tswitch ( op ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\thtml[ x ] = \"<ins>\" + escapeText( data ) + \"</ins>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\thtml[ x ] = \"<del>\" + escapeText( data ) + \"</del>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\t\t\t\thtml[ x ] = \"<span>\" + escapeText( data ) + \"</span>\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn html.join( \"\" );\n\t\t};\n\t\n\t\t/**\n\t\t * Determine the common prefix of two strings.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the start of each\n\t\t *     string.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonPrefix = function( text1, text2 ) {\n\t\t\tvar pointermid, pointermax, pointermin, pointerstart;\n\t\n\t\t\t// Quick check for common null cases.\n\t\t\tif ( !text1 || !text2 || text1.charAt( 0 ) !== text2.charAt( 0 ) ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Binary search.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\t\tpointermin = 0;\n\t\t\tpointermax = Math.min( text1.length, text2.length );\n\t\t\tpointermid = pointermax;\n\t\t\tpointerstart = 0;\n\t\t\twhile ( pointermin < pointermid ) {\n\t\t\t\tif ( text1.substring( pointerstart, pointermid ) ===\n\t\t\t\t\t\ttext2.substring( pointerstart, pointermid ) ) {\n\t\t\t\t\tpointermin = pointermid;\n\t\t\t\t\tpointerstart = pointermin;\n\t\t\t\t} else {\n\t\t\t\t\tpointermax = pointermid;\n\t\t\t\t}\n\t\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t\t}\n\t\t\treturn pointermid;\n\t\t};\n\t\n\t\t/**\n\t\t * Determine the common suffix of two strings.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the end of each string.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonSuffix = function( text1, text2 ) {\n\t\t\tvar pointermid, pointermax, pointermin, pointerend;\n\t\n\t\t\t// Quick check for common null cases.\n\t\t\tif ( !text1 ||\n\t\t\t\t\t!text2 ||\n\t\t\t\t\ttext1.charAt( text1.length - 1 ) !== text2.charAt( text2.length - 1 ) ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Binary search.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\t\tpointermin = 0;\n\t\t\tpointermax = Math.min( text1.length, text2.length );\n\t\t\tpointermid = pointermax;\n\t\t\tpointerend = 0;\n\t\t\twhile ( pointermin < pointermid ) {\n\t\t\t\tif ( text1.substring( text1.length - pointermid, text1.length - pointerend ) ===\n\t\t\t\t\t\ttext2.substring( text2.length - pointermid, text2.length - pointerend ) ) {\n\t\t\t\t\tpointermin = pointermid;\n\t\t\t\t\tpointerend = pointermin;\n\t\t\t\t} else {\n\t\t\t\t\tpointermax = pointermid;\n\t\t\t\t}\n\t\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t\t}\n\t\t\treturn pointermid;\n\t\t};\n\t\n\t\t/**\n\t\t * Find the differences between two texts.  Assumes that the texts do not\n\t\t * have any common prefix or suffix.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {boolean} checklines Speedup flag.  If false, then don't run a\n\t\t *     line-level diff first to identify the changed areas.\n\t\t *     If true, then run a faster, slightly less optimal diff.\n\t\t * @param {number} deadline Time when the diff should be complete by.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCompute = function( text1, text2, checklines, deadline ) {\n\t\t\tvar diffs, longtext, shorttext, i, hm,\n\t\t\t\ttext1A, text2A, text1B, text2B,\n\t\t\t\tmidCommon, diffsA, diffsB;\n\t\n\t\t\tif ( !text1 ) {\n\t\n\t\t\t\t// Just add some text (speedup).\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\tif ( !text2 ) {\n\t\n\t\t\t\t// Just delete some text (speedup).\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_DELETE, text1 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\t\ti = longtext.indexOf( shorttext );\n\t\t\tif ( i !== -1 ) {\n\t\n\t\t\t\t// Shorter text is inside the longer text (speedup).\n\t\t\t\tdiffs = [\n\t\t\t\t\t[ DIFF_INSERT, longtext.substring( 0, i ) ],\n\t\t\t\t\t[ DIFF_EQUAL, shorttext ],\n\t\t\t\t\t[ DIFF_INSERT, longtext.substring( i + shorttext.length ) ]\n\t\t\t\t];\n\t\n\t\t\t\t// Swap insertions for deletions if diff is reversed.\n\t\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\t\tdiffs[ 0 ][ 0 ] = diffs[ 2 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t}\n\t\t\t\treturn diffs;\n\t\t\t}\n\t\n\t\t\tif ( shorttext.length === 1 ) {\n\t\n\t\t\t\t// Single character string.\n\t\t\t\t// After the previous speedup, the character can't be an equality.\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t\t];\n\t\t\t}\n\t\n\t\t\t// Check to see if the problem can be split in two.\n\t\t\thm = this.diffHalfMatch( text1, text2 );\n\t\t\tif ( hm ) {\n\t\n\t\t\t\t// A half-match was found, sort out the return data.\n\t\t\t\ttext1A = hm[ 0 ];\n\t\t\t\ttext1B = hm[ 1 ];\n\t\t\t\ttext2A = hm[ 2 ];\n\t\t\t\ttext2B = hm[ 3 ];\n\t\t\t\tmidCommon = hm[ 4 ];\n\t\n\t\t\t\t// Send both pairs off for separate processing.\n\t\t\t\tdiffsA = this.DiffMain( text1A, text2A, checklines, deadline );\n\t\t\t\tdiffsB = this.DiffMain( text1B, text2B, checklines, deadline );\n\t\n\t\t\t\t// Merge the results.\n\t\t\t\treturn diffsA.concat( [\n\t\t\t\t\t[ DIFF_EQUAL, midCommon ]\n\t\t\t\t], diffsB );\n\t\t\t}\n\t\n\t\t\tif ( checklines && text1.length > 100 && text2.length > 100 ) {\n\t\t\t\treturn this.diffLineMode( text1, text2, deadline );\n\t\t\t}\n\t\n\t\t\treturn this.diffBisect( text1, text2, deadline );\n\t\t};\n\t\n\t\t/**\n\t\t * Do the two texts share a substring which is at least half the length of the\n\t\t * longer text?\n\t\t * This speedup can produce non-minimal diffs.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t\t *     text2 and the common middle.  Or null if there was no match.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffHalfMatch = function( text1, text2 ) {\n\t\t\tvar longtext, shorttext, dmp,\n\t\t\t\ttext1A, text2B, text2A, text1B, midCommon,\n\t\t\t\thm1, hm2, hm;\n\t\n\t\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\t\tif ( longtext.length < 4 || shorttext.length * 2 < longtext.length ) {\n\t\t\t\treturn null; // Pointless.\n\t\t\t}\n\t\t\tdmp = this; // 'this' becomes 'window' in a closure.\n\t\n\t\t\t/**\n\t\t\t * Does a substring of shorttext exist within longtext such that the substring\n\t\t\t * is at least half the length of longtext?\n\t\t\t * Closure, but does not reference any external variables.\n\t\t\t * @param {string} longtext Longer string.\n\t\t\t * @param {string} shorttext Shorter string.\n\t\t\t * @param {number} i Start index of quarter length substring within longtext.\n\t\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t\t *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t\t\t *     of shorttext and the common middle.  Or null if there was no match.\n\t\t\t * @private\n\t\t\t */\n\t\t\tfunction diffHalfMatchI( longtext, shorttext, i ) {\n\t\t\t\tvar seed, j, bestCommon, prefixLength, suffixLength,\n\t\t\t\t\tbestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;\n\t\n\t\t\t\t// Start with a 1/4 length substring at position i as a seed.\n\t\t\t\tseed = longtext.substring( i, i + Math.floor( longtext.length / 4 ) );\n\t\t\t\tj = -1;\n\t\t\t\tbestCommon = \"\";\n\t\t\t\twhile ( ( j = shorttext.indexOf( seed, j + 1 ) ) !== -1 ) {\n\t\t\t\t\tprefixLength = dmp.diffCommonPrefix( longtext.substring( i ),\n\t\t\t\t\t\tshorttext.substring( j ) );\n\t\t\t\t\tsuffixLength = dmp.diffCommonSuffix( longtext.substring( 0, i ),\n\t\t\t\t\t\tshorttext.substring( 0, j ) );\n\t\t\t\t\tif ( bestCommon.length < suffixLength + prefixLength ) {\n\t\t\t\t\t\tbestCommon = shorttext.substring( j - suffixLength, j ) +\n\t\t\t\t\t\t\tshorttext.substring( j, j + prefixLength );\n\t\t\t\t\t\tbestLongtextA = longtext.substring( 0, i - suffixLength );\n\t\t\t\t\t\tbestLongtextB = longtext.substring( i + prefixLength );\n\t\t\t\t\t\tbestShorttextA = shorttext.substring( 0, j - suffixLength );\n\t\t\t\t\t\tbestShorttextB = shorttext.substring( j + prefixLength );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( bestCommon.length * 2 >= longtext.length ) {\n\t\t\t\t\treturn [ bestLongtextA, bestLongtextB,\n\t\t\t\t\t\tbestShorttextA, bestShorttextB, bestCommon\n\t\t\t\t\t];\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// First check if the second quarter is the seed for a half-match.\n\t\t\thm1 = diffHalfMatchI( longtext, shorttext,\n\t\t\t\tMath.ceil( longtext.length / 4 ) );\n\t\n\t\t\t// Check again based on the third quarter.\n\t\t\thm2 = diffHalfMatchI( longtext, shorttext,\n\t\t\t\tMath.ceil( longtext.length / 2 ) );\n\t\t\tif ( !hm1 && !hm2 ) {\n\t\t\t\treturn null;\n\t\t\t} else if ( !hm2 ) {\n\t\t\t\thm = hm1;\n\t\t\t} else if ( !hm1 ) {\n\t\t\t\thm = hm2;\n\t\t\t} else {\n\t\n\t\t\t\t// Both matched.  Select the longest.\n\t\t\t\thm = hm1[ 4 ].length > hm2[ 4 ].length ? hm1 : hm2;\n\t\t\t}\n\t\n\t\t\t// A half-match was found, sort out the return data.\n\t\t\ttext1A, text1B, text2A, text2B;\n\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\ttext1A = hm[ 0 ];\n\t\t\t\ttext1B = hm[ 1 ];\n\t\t\t\ttext2A = hm[ 2 ];\n\t\t\t\ttext2B = hm[ 3 ];\n\t\t\t} else {\n\t\t\t\ttext2A = hm[ 0 ];\n\t\t\t\ttext2B = hm[ 1 ];\n\t\t\t\ttext1A = hm[ 2 ];\n\t\t\t\ttext1B = hm[ 3 ];\n\t\t\t}\n\t\t\tmidCommon = hm[ 4 ];\n\t\t\treturn [ text1A, text1B, text2A, text2B, midCommon ];\n\t\t};\n\t\n\t\t/**\n\t\t * Do a quick line-level diff on both strings, then rediff the parts for\n\t\t * greater accuracy.\n\t\t * This speedup can produce non-minimal diffs.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} deadline Time when the diff should be complete by.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffLineMode = function( text1, text2, deadline ) {\n\t\t\tvar a, diffs, linearray, pointer, countInsert,\n\t\t\t\tcountDelete, textInsert, textDelete, j;\n\t\n\t\t\t// Scan the text on a line-by-line basis first.\n\t\t\ta = this.diffLinesToChars( text1, text2 );\n\t\t\ttext1 = a.chars1;\n\t\t\ttext2 = a.chars2;\n\t\t\tlinearray = a.lineArray;\n\t\n\t\t\tdiffs = this.DiffMain( text1, text2, false, deadline );\n\t\n\t\t\t// Convert the diff back to original text.\n\t\t\tthis.diffCharsToLines( diffs, linearray );\n\t\n\t\t\t// Eliminate freak matches (e.g. blank lines)\n\t\t\tthis.diffCleanupSemantic( diffs );\n\t\n\t\t\t// Rediff any replacement blocks, this time character-by-character.\n\t\t\t// Add a dummy entry at the end.\n\t\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] );\n\t\t\tpointer = 0;\n\t\t\tcountDelete = 0;\n\t\t\tcountInsert = 0;\n\t\t\ttextDelete = \"\";\n\t\t\ttextInsert = \"\";\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\tcountInsert++;\n\t\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\tcountDelete++;\n\t\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\n\t\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\t\tif ( countDelete >= 1 && countInsert >= 1 ) {\n\t\n\t\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\t\tdiffs.splice( pointer - countDelete - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert );\n\t\t\t\t\t\tpointer = pointer - countDelete - countInsert;\n\t\t\t\t\t\ta = this.DiffMain( textDelete, textInsert, false, deadline );\n\t\t\t\t\t\tfor ( j = a.length - 1; j >= 0; j-- ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer, 0, a[ j ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpointer = pointer + a.length;\n\t\t\t\t\t}\n\t\t\t\t\tcountInsert = 0;\n\t\t\t\t\tcountDelete = 0;\n\t\t\t\t\ttextDelete = \"\";\n\t\t\t\t\ttextInsert = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\n\t\t\treturn diffs;\n\t\t};\n\t\n\t\t/**\n\t\t * Find the 'middle snake' of a diff, split the problem in two\n\t\t * and return the recursively constructed diff.\n\t\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} deadline Time at which to bail if not yet complete.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffBisect = function( text1, text2, deadline ) {\n\t\t\tvar text1Length, text2Length, maxD, vOffset, vLength,\n\t\t\t\tv1, v2, x, delta, front, k1start, k1end, k2start,\n\t\t\t\tk2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;\n\t\n\t\t\t// Cache the text lengths to prevent multiple calls.\n\t\t\ttext1Length = text1.length;\n\t\t\ttext2Length = text2.length;\n\t\t\tmaxD = Math.ceil( ( text1Length + text2Length ) / 2 );\n\t\t\tvOffset = maxD;\n\t\t\tvLength = 2 * maxD;\n\t\t\tv1 = new Array( vLength );\n\t\t\tv2 = new Array( vLength );\n\t\n\t\t\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t\t\t// integers and undefined.\n\t\t\tfor ( x = 0; x < vLength; x++ ) {\n\t\t\t\tv1[ x ] = -1;\n\t\t\t\tv2[ x ] = -1;\n\t\t\t}\n\t\t\tv1[ vOffset + 1 ] = 0;\n\t\t\tv2[ vOffset + 1 ] = 0;\n\t\t\tdelta = text1Length - text2Length;\n\t\n\t\t\t// If the total number of characters is odd, then the front path will collide\n\t\t\t// with the reverse path.\n\t\t\tfront = ( delta % 2 !== 0 );\n\t\n\t\t\t// Offsets for start and end of k loop.\n\t\t\t// Prevents mapping of space beyond the grid.\n\t\t\tk1start = 0;\n\t\t\tk1end = 0;\n\t\t\tk2start = 0;\n\t\t\tk2end = 0;\n\t\t\tfor ( d = 0; d < maxD; d++ ) {\n\t\n\t\t\t\t// Bail out if deadline is reached.\n\t\t\t\tif ( ( new Date() ).getTime() > deadline ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\n\t\t\t\t// Walk the front path one step.\n\t\t\t\tfor ( k1 = -d + k1start; k1 <= d - k1end; k1 += 2 ) {\n\t\t\t\t\tk1Offset = vOffset + k1;\n\t\t\t\t\tif ( k1 === -d || ( k1 !== d && v1[ k1Offset - 1 ] < v1[ k1Offset + 1 ] ) ) {\n\t\t\t\t\t\tx1 = v1[ k1Offset + 1 ];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx1 = v1[ k1Offset - 1 ] + 1;\n\t\t\t\t\t}\n\t\t\t\t\ty1 = x1 - k1;\n\t\t\t\t\twhile ( x1 < text1Length && y1 < text2Length &&\n\t\t\t\t\t\ttext1.charAt( x1 ) === text2.charAt( y1 ) ) {\n\t\t\t\t\t\tx1++;\n\t\t\t\t\t\ty1++;\n\t\t\t\t\t}\n\t\t\t\t\tv1[ k1Offset ] = x1;\n\t\t\t\t\tif ( x1 > text1Length ) {\n\t\n\t\t\t\t\t\t// Ran off the right of the graph.\n\t\t\t\t\t\tk1end += 2;\n\t\t\t\t\t} else if ( y1 > text2Length ) {\n\t\n\t\t\t\t\t\t// Ran off the bottom of the graph.\n\t\t\t\t\t\tk1start += 2;\n\t\t\t\t\t} else if ( front ) {\n\t\t\t\t\t\tk2Offset = vOffset + delta - k1;\n\t\t\t\t\t\tif ( k2Offset >= 0 && k2Offset < vLength && v2[ k2Offset ] !== -1 ) {\n\t\n\t\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\t\tx2 = text1Length - v2[ k2Offset ];\n\t\t\t\t\t\t\tif ( x1 >= x2 ) {\n\t\n\t\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// Walk the reverse path one step.\n\t\t\t\tfor ( k2 = -d + k2start; k2 <= d - k2end; k2 += 2 ) {\n\t\t\t\t\tk2Offset = vOffset + k2;\n\t\t\t\t\tif ( k2 === -d || ( k2 !== d && v2[ k2Offset - 1 ] < v2[ k2Offset + 1 ] ) ) {\n\t\t\t\t\t\tx2 = v2[ k2Offset + 1 ];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx2 = v2[ k2Offset - 1 ] + 1;\n\t\t\t\t\t}\n\t\t\t\t\ty2 = x2 - k2;\n\t\t\t\t\twhile ( x2 < text1Length && y2 < text2Length &&\n\t\t\t\t\t\ttext1.charAt( text1Length - x2 - 1 ) ===\n\t\t\t\t\t\ttext2.charAt( text2Length - y2 - 1 ) ) {\n\t\t\t\t\t\tx2++;\n\t\t\t\t\t\ty2++;\n\t\t\t\t\t}\n\t\t\t\t\tv2[ k2Offset ] = x2;\n\t\t\t\t\tif ( x2 > text1Length ) {\n\t\n\t\t\t\t\t\t// Ran off the left of the graph.\n\t\t\t\t\t\tk2end += 2;\n\t\t\t\t\t} else if ( y2 > text2Length ) {\n\t\n\t\t\t\t\t\t// Ran off the top of the graph.\n\t\t\t\t\t\tk2start += 2;\n\t\t\t\t\t} else if ( !front ) {\n\t\t\t\t\t\tk1Offset = vOffset + delta - k2;\n\t\t\t\t\t\tif ( k1Offset >= 0 && k1Offset < vLength && v1[ k1Offset ] !== -1 ) {\n\t\t\t\t\t\t\tx1 = v1[ k1Offset ];\n\t\t\t\t\t\t\ty1 = vOffset + x1 - k1Offset;\n\t\n\t\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\t\tx2 = text1Length - x2;\n\t\t\t\t\t\t\tif ( x1 >= x2 ) {\n\t\n\t\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t// Diff took too long and hit the deadline or\n\t\t\t// number of diffs equals number of characters, no commonality at all.\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t};\n\t\n\t\t/**\n\t\t * Given the location of the 'middle snake', split the diff in two parts\n\t\t * and recurse.\n\t\t * @param {string} text1 Old string to be diffed.\n\t\t * @param {string} text2 New string to be diffed.\n\t\t * @param {number} x Index of split point in text1.\n\t\t * @param {number} y Index of split point in text2.\n\t\t * @param {number} deadline Time at which to bail if not yet complete.\n\t\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffBisectSplit = function( text1, text2, x, y, deadline ) {\n\t\t\tvar text1a, text1b, text2a, text2b, diffs, diffsb;\n\t\t\ttext1a = text1.substring( 0, x );\n\t\t\ttext2a = text2.substring( 0, y );\n\t\t\ttext1b = text1.substring( x );\n\t\t\ttext2b = text2.substring( y );\n\t\n\t\t\t// Compute both diffs serially.\n\t\t\tdiffs = this.DiffMain( text1a, text2a, false, deadline );\n\t\t\tdiffsb = this.DiffMain( text1b, text2b, false, deadline );\n\t\n\t\t\treturn diffs.concat( diffsb );\n\t\t};\n\t\n\t\t/**\n\t\t * Reduce the number of edits by eliminating semantically trivial equalities.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupSemantic = function( diffs ) {\n\t\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\t\tpointer, lengthInsertions2, lengthDeletions2, lengthInsertions1,\n\t\t\t\tlengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\n\t\t\tchanges = false;\n\t\t\tequalities = []; // Stack of indices where equalities are found.\n\t\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t\t/** @type {?string} */\n\t\t\tlastequality = null;\n\t\n\t\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\t\tpointer = 0; // Index of current position.\n\t\n\t\t\t// Number of characters that changed prior to the equality.\n\t\t\tlengthInsertions1 = 0;\n\t\t\tlengthDeletions1 = 0;\n\t\n\t\t\t// Number of characters that changed after the equality.\n\t\t\tlengthInsertions2 = 0;\n\t\t\tlengthDeletions2 = 0;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) { // Equality found.\n\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\tlengthInsertions1 = lengthInsertions2;\n\t\t\t\t\tlengthDeletions1 = lengthDeletions2;\n\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t} else { // An insertion or deletion.\n\t\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\t\tlengthInsertions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlengthDeletions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Eliminate an equality that is smaller or equal to the edits on both\n\t\t\t\t\t// sides of it.\n\t\t\t\t\tif ( lastequality && ( lastequality.length <=\n\t\t\t\t\t\t\tMath.max( lengthInsertions1, lengthDeletions1 ) ) &&\n\t\t\t\t\t\t\t( lastequality.length <= Math.max( lengthInsertions2,\n\t\t\t\t\t\t\t\tlengthDeletions2 ) ) ) {\n\t\n\t\t\t\t\t\t// Duplicate record.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\n\t\t\t\t\t\t// Throw away the equality we just deleted.\n\t\t\t\t\t\tequalitiesLength--;\n\t\n\t\t\t\t\t\t// Throw away the previous equality (it needs to be reevaluated).\n\t\t\t\t\t\tequalitiesLength--;\n\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\n\t\t\t\t\t\t// Reset the counters.\n\t\t\t\t\t\tlengthInsertions1 = 0;\n\t\t\t\t\t\tlengthDeletions1 = 0;\n\t\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\t\tlastequality = null;\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\t// Normalize the diff.\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\n\t\t\t// Find any overlaps between deletions and insertions.\n\t\t\t// e.g: <del>abcxxx</del><ins>xxxdef</ins>\n\t\t\t//   -> <del>abc</del>xxx<ins>def</ins>\n\t\t\t// e.g: <del>xxxabc</del><ins>defxxx</ins>\n\t\t\t//   -> <ins>def</ins>xxx<del>abc</del>\n\t\t\t// Only extract an overlap if it is as big as the edit ahead or behind it.\n\t\t\tpointer = 1;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_DELETE &&\n\t\t\t\t\t\tdiffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\tdeletion = diffs[ pointer - 1 ][ 1 ];\n\t\t\t\t\tinsertion = diffs[ pointer ][ 1 ];\n\t\t\t\t\toverlapLength1 = this.diffCommonOverlap( deletion, insertion );\n\t\t\t\t\toverlapLength2 = this.diffCommonOverlap( insertion, deletion );\n\t\t\t\t\tif ( overlapLength1 >= overlapLength2 ) {\n\t\t\t\t\t\tif ( overlapLength1 >= deletion.length / 2 ||\n\t\t\t\t\t\t\t\toverlapLength1 >= insertion.length / 2 ) {\n\t\n\t\t\t\t\t\t\t// Overlap found.  Insert an equality and trim the surrounding edits.\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t[ DIFF_EQUAL, insertion.substring( 0, overlapLength1 ) ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tdeletion.substring( 0, deletion.length - overlapLength1 );\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] = insertion.substring( overlapLength1 );\n\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ( overlapLength2 >= deletion.length / 2 ||\n\t\t\t\t\t\t\t\toverlapLength2 >= insertion.length / 2 ) {\n\t\n\t\t\t\t\t\t\t// Reverse overlap found.\n\t\t\t\t\t\t\t// Insert an equality and swap and trim the surrounding edits.\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t[ DIFF_EQUAL, deletion.substring( 0, overlapLength2 ) ]\n\t\t\t\t\t\t\t);\n\t\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tinsertion.substring( 0, insertion.length - overlapLength2 );\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\t\tdeletion.substring( overlapLength2 );\n\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpointer++;\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Determine if the suffix of one string is the prefix of another.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {number} The number of characters common to the end of the first\n\t\t *     string and the start of the second string.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCommonOverlap = function( text1, text2 ) {\n\t\t\tvar text1Length, text2Length, textLength,\n\t\t\t\tbest, length, pattern, found;\n\t\n\t\t\t// Cache the text lengths to prevent multiple calls.\n\t\t\ttext1Length = text1.length;\n\t\t\ttext2Length = text2.length;\n\t\n\t\t\t// Eliminate the null case.\n\t\t\tif ( text1Length === 0 || text2Length === 0 ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\n\t\t\t// Truncate the longer string.\n\t\t\tif ( text1Length > text2Length ) {\n\t\t\t\ttext1 = text1.substring( text1Length - text2Length );\n\t\t\t} else if ( text1Length < text2Length ) {\n\t\t\t\ttext2 = text2.substring( 0, text1Length );\n\t\t\t}\n\t\t\ttextLength = Math.min( text1Length, text2Length );\n\t\n\t\t\t// Quick check for the worst case.\n\t\t\tif ( text1 === text2 ) {\n\t\t\t\treturn textLength;\n\t\t\t}\n\t\n\t\t\t// Start by looking for a single character match\n\t\t\t// and increase length until no match is found.\n\t\t\t// Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\t\t\tbest = 0;\n\t\t\tlength = 1;\n\t\t\twhile ( true ) {\n\t\t\t\tpattern = text1.substring( textLength - length );\n\t\t\t\tfound = text2.indexOf( pattern );\n\t\t\t\tif ( found === -1 ) {\n\t\t\t\t\treturn best;\n\t\t\t\t}\n\t\t\t\tlength += found;\n\t\t\t\tif ( found === 0 || text1.substring( textLength - length ) ===\n\t\t\t\t\t\ttext2.substring( 0, length ) ) {\n\t\t\t\t\tbest = length;\n\t\t\t\t\tlength++;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Split two texts into an array of strings.  Reduce the texts to a string of\n\t\t * hashes where each Unicode character represents one line.\n\t\t * @param {string} text1 First string.\n\t\t * @param {string} text2 Second string.\n\t\t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n\t\t *     An object containing the encoded text1, the encoded text2 and\n\t\t *     the array of unique strings.\n\t\t *     The zeroth element of the array of unique strings is intentionally blank.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffLinesToChars = function( text1, text2 ) {\n\t\t\tvar lineArray, lineHash, chars1, chars2;\n\t\t\tlineArray = []; // E.g. lineArray[4] === 'Hello\\n'\n\t\t\tlineHash = {};  // E.g. lineHash['Hello\\n'] === 4\n\t\n\t\t\t// '\\x00' is a valid character, but various debuggers don't like it.\n\t\t\t// So we'll insert a junk entry to avoid generating a null character.\n\t\t\tlineArray[ 0 ] = \"\";\n\t\n\t\t\t/**\n\t\t\t * Split a text into an array of strings.  Reduce the texts to a string of\n\t\t\t * hashes where each Unicode character represents one line.\n\t\t\t * Modifies linearray and linehash through being a closure.\n\t\t\t * @param {string} text String to encode.\n\t\t\t * @return {string} Encoded string.\n\t\t\t * @private\n\t\t\t */\n\t\t\tfunction diffLinesToCharsMunge( text ) {\n\t\t\t\tvar chars, lineStart, lineEnd, lineArrayLength, line;\n\t\t\t\tchars = \"\";\n\t\n\t\t\t\t// Walk the text, pulling out a substring for each line.\n\t\t\t\t// text.split('\\n') would would temporarily double our memory footprint.\n\t\t\t\t// Modifying text would create many large strings to garbage collect.\n\t\t\t\tlineStart = 0;\n\t\t\t\tlineEnd = -1;\n\t\n\t\t\t\t// Keeping our own length variable is faster than looking it up.\n\t\t\t\tlineArrayLength = lineArray.length;\n\t\t\t\twhile ( lineEnd < text.length - 1 ) {\n\t\t\t\t\tlineEnd = text.indexOf( \"\\n\", lineStart );\n\t\t\t\t\tif ( lineEnd === -1 ) {\n\t\t\t\t\t\tlineEnd = text.length - 1;\n\t\t\t\t\t}\n\t\t\t\t\tline = text.substring( lineStart, lineEnd + 1 );\n\t\t\t\t\tlineStart = lineEnd + 1;\n\t\n\t\t\t\t\tif ( lineHash.hasOwnProperty ? lineHash.hasOwnProperty( line ) :\n\t\t\t\t\t\t\t\t( lineHash[ line ] !== undefined ) ) {\n\t\t\t\t\t\tchars += String.fromCharCode( lineHash[ line ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchars += String.fromCharCode( lineArrayLength );\n\t\t\t\t\t\tlineHash[ line ] = lineArrayLength;\n\t\t\t\t\t\tlineArray[ lineArrayLength++ ] = line;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn chars;\n\t\t\t}\n\t\n\t\t\tchars1 = diffLinesToCharsMunge( text1 );\n\t\t\tchars2 = diffLinesToCharsMunge( text2 );\n\t\t\treturn {\n\t\t\t\tchars1: chars1,\n\t\t\t\tchars2: chars2,\n\t\t\t\tlineArray: lineArray\n\t\t\t};\n\t\t};\n\t\n\t\t/**\n\t\t * Rehydrate the text in a diff from a string of line hashes to real lines of\n\t\t * text.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t * @param {!Array.<string>} lineArray Array of unique strings.\n\t\t * @private\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCharsToLines = function( diffs, lineArray ) {\n\t\t\tvar x, chars, text, y;\n\t\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\t\tchars = diffs[ x ][ 1 ];\n\t\t\t\ttext = [];\n\t\t\t\tfor ( y = 0; y < chars.length; y++ ) {\n\t\t\t\t\ttext[ y ] = lineArray[ chars.charCodeAt( y ) ];\n\t\t\t\t}\n\t\t\t\tdiffs[ x ][ 1 ] = text.join( \"\" );\n\t\t\t}\n\t\t};\n\t\n\t\t/**\n\t\t * Reorder and merge like edit sections.  Merge equalities.\n\t\t * Any edit section can move as long as it doesn't cross an equality.\n\t\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t\t */\n\t\tDiffMatchPatch.prototype.diffCleanupMerge = function( diffs ) {\n\t\t\tvar pointer, countDelete, countInsert, textInsert, textDelete,\n\t\t\t\tcommonlength, changes, diffPointer, position;\n\t\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] ); // Add a dummy entry at the end.\n\t\t\tpointer = 0;\n\t\t\tcountDelete = 0;\n\t\t\tcountInsert = 0;\n\t\t\ttextDelete = \"\";\n\t\t\ttextInsert = \"\";\n\t\t\tcommonlength;\n\t\t\twhile ( pointer < diffs.length ) {\n\t\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\t\tcase DIFF_INSERT:\n\t\t\t\t\tcountInsert++;\n\t\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\t\tpointer++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_DELETE:\n\t\t\t\t\tcountDelete++;\n\t\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\t\tpointer++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIFF_EQUAL:\n\t\n\t\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\t\tif ( countDelete + countInsert > 1 ) {\n\t\t\t\t\t\tif ( countDelete !== 0 && countInsert !== 0 ) {\n\t\n\t\t\t\t\t\t\t// Factor out any common prefixes.\n\t\t\t\t\t\t\tcommonlength = this.diffCommonPrefix( textInsert, textDelete );\n\t\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\t\tif ( ( pointer - countDelete - countInsert ) > 0 &&\n\t\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 0 ] ===\n\t\t\t\t\t\t\t\t\t\tDIFF_EQUAL ) {\n\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 1 ] +=\n\t\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tdiffs.splice( 0, 0, [ DIFF_EQUAL,\n\t\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength )\n\t\t\t\t\t\t\t\t\t] );\n\t\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\ttextInsert = textInsert.substring( commonlength );\n\t\t\t\t\t\t\t\ttextDelete = textDelete.substring( commonlength );\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Factor out any common suffixies.\n\t\t\t\t\t\t\tcommonlength = this.diffCommonSuffix( textInsert, textDelete );\n\t\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = textInsert.substring( textInsert.length -\n\t\t\t\t\t\t\t\t\t\tcommonlength ) + diffs[ pointer ][ 1 ];\n\t\t\t\t\t\t\t\ttextInsert = textInsert.substring( 0, textInsert.length -\n\t\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\t\ttextDelete = textDelete.substring( 0, textDelete.length -\n\t\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\t\tif ( countDelete === 0 ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer - countInsert,\n\t\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_INSERT, textInsert ] );\n\t\t\t\t\t\t} else if ( countInsert === 0 ) {\n\t\t\t\t\t\t\tdiffs.splice( pointer - countDelete,\n\t\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_DELETE, textDelete ] );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\t\tpointer - countDelete - countInsert,\n\t\t\t\t\t\t\t\tcountDelete + countInsert,\n\t\t\t\t\t\t\t\t[ DIFF_DELETE, textDelete ], [ DIFF_INSERT, textInsert ]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpointer = pointer - countDelete - countInsert +\n\t\t\t\t\t\t\t( countDelete ? 1 : 0 ) + ( countInsert ? 1 : 0 ) + 1;\n\t\t\t\t\t} else if ( pointer !== 0 && diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL ) {\n\t\n\t\t\t\t\t\t// Merge this equality with the previous one.\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer, 1 );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t\tcountInsert = 0;\n\t\t\t\t\tcountDelete = 0;\n\t\t\t\t\ttextDelete = \"\";\n\t\t\t\t\ttextInsert = \"\";\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( diffs[ diffs.length - 1 ][ 1 ] === \"\" ) {\n\t\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\t\t}\n\t\n\t\t\t// Second pass: look for single edits surrounded on both sides by equalities\n\t\t\t// which can be shifted sideways to eliminate an equality.\n\t\t\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t\t\tchanges = false;\n\t\t\tpointer = 1;\n\t\n\t\t\t// Intentionally ignore the first and last element (don't need checking).\n\t\t\twhile ( pointer < diffs.length - 1 ) {\n\t\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL &&\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] === DIFF_EQUAL ) {\n\t\n\t\t\t\t\tdiffPointer = diffs[ pointer ][ 1 ];\n\t\t\t\t\tposition = diffPointer.substring(\n\t\t\t\t\t\tdiffPointer.length - diffs[ pointer - 1 ][ 1 ].length\n\t\t\t\t\t);\n\t\n\t\t\t\t\t// This is a single edit surrounded by equalities.\n\t\t\t\t\tif ( position === diffs[ pointer - 1 ][ 1 ] ) {\n\t\n\t\t\t\t\t\t// Shift the edit over the previous equality.\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = diffs[ pointer - 1 ][ 1 ] +\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( 0, diffs[ pointer ][ 1 ].length -\n\t\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ].length );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] + diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer - 1, 1 );\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t} else if ( diffPointer.substring( 0, diffs[ pointer + 1 ][ 1 ].length ) ===\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] ) {\n\t\n\t\t\t\t\t\t// Shift the edit over the next equality.\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ] =\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( diffs[ pointer + 1 ][ 1 ].length ) +\n\t\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\t\tdiffs.splice( pointer + 1, 1 );\n\t\t\t\t\t\tchanges = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\n\t\t\t// If shifts were made, the diff needs reordering and another shift sweep.\n\t\t\tif ( changes ) {\n\t\t\t\tthis.diffCleanupMerge( diffs );\n\t\t\t}\n\t\t};\n\t\n\t\treturn function( o, n ) {\n\t\t\tvar diff, output, text;\n\t\t\tdiff = new DiffMatchPatch();\n\t\t\toutput = diff.DiffMain( o, n );\n\t\t\tdiff.diffCleanupEfficiency( output );\n\t\t\ttext = diff.diffPrettyHtml( output );\n\t\n\t\t\treturn text;\n\t\t};\n\t}() );\n\t\n\t}() );\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(24), __webpack_require__(25)(module)))\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\tprocess.prependListener = noop;\n\tprocess.prependOnceListener = noop;\n\t\n\tprocess.listeners = function (name) { return [] }\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\n\t\tif(!module.webpackPolyfill) {\n\t\t\tmodule.deprecate = function() {};\n\t\t\tmodule.paths = [];\n\t\t\t// module.parent = undefined by default\n\t\t\tmodule.children = [];\n\t\t\tmodule.webpackPolyfill = 1;\n\t\t}\n\t\treturn module;\n\t}\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n\t * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n\t *\n\t * https://github.com/twada/qunit-tap\n\t * version: 1.5.1\n\t *\n\t * Copyright (c) 2010-2016 Takuto Wada\n\t * Dual licensed under the MIT and GPLv2 licenses.\n\t *   https://raw.github.com/twada/qunit-tap/master/MIT-LICENSE.txt\n\t *   https://raw.github.com/twada/qunit-tap/master/GPL-LICENSE.txt\n\t *\n\t * A part of extend function is:\n\t *   Copyright 2012 jQuery Foundation and other contributors\n\t *   Released under the MIT license.\n\t *   http://jquery.org/license\n\t */\n\t(function (root, factory) {\n\t    'use strict';\n\t\n\t    // using returnExports UMD pattern\n\t    if (true) {\n\t        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports === 'object') {\n\t        module.exports = factory();\n\t    } else {\n\t        root.qunitTap = factory();\n\t    }\n\t}(this, function () {\n\t    'use strict';\n\t\n\t    var qunitTapVersion = '1.5.1',\n\t        slice = Array.prototype.slice;\n\t\n\t    // borrowed from qunit.js\n\t    function extend (a, b) {\n\t        var prop;\n\t        for (prop in b) {\n\t            if (b.hasOwnProperty(prop)) {\n\t                if (typeof b[prop] === 'undefined') {\n\t                    delete a[prop];\n\t                } else {\n\t                    a[prop] = b[prop];\n\t                }\n\t            }\n\t        }\n\t        return a;\n\t    }\n\t\n\t    function indexOf (ary, element) {\n\t        var i;\n\t        for (i = 0; i < ary.length; i += 1) {\n\t            if (ary[i] === element) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    }\n\t\n\t    function removeElement (ary, element) {\n\t        var index = indexOf(ary, element);\n\t        if (index !== -1) {\n\t            return ary.splice(index, 1);\n\t        } else {\n\t            return [];\n\t        }\n\t    }\n\t\n\t    function isPlanRequired (conf) {\n\t        return (typeof conf !== 'undefined' && typeof conf.requireExpects !== 'undefined' && conf.requireExpects);\n\t    }\n\t\n\t    function isPassed (details) {\n\t        return !!(details.result);\n\t    }\n\t\n\t    function isFailed (details) {\n\t        return !(isPassed(details));\n\t    }\n\t\n\t    function isAssertOkFailed (details) {\n\t        return isFailed(details) && typeof details.expected === 'undefined' && typeof details.actual === 'undefined';\n\t    }\n\t\n\t    function escapeLineEndings (str) {\n\t        return str.replace(/(\\r?\\n)/g, '$&# ');\n\t    }\n\t\n\t    function ltrim (str) {\n\t        return str.replace(/^\\s+/, '');\n\t    }\n\t\n\t    function noop (obj) {\n\t        return obj;\n\t    }\n\t\n\t    function render (desc, fieldName, fieldValue, formatter) {\n\t        desc.push(fieldName + ': ' + formatter(fieldValue));\n\t    }\n\t\n\t    function renderIf (shouldRender, desc, fieldName, fieldValue, formatter) {\n\t        if (!shouldRender || typeof fieldValue === 'undefined') {\n\t            return;\n\t        }\n\t        render(desc, fieldName, fieldValue, formatter);\n\t    }\n\t\n\t    function formatTestLine (testLine, rest) {\n\t        if (!rest) {\n\t            return testLine;\n\t        }\n\t        return testLine + ' - ' + escapeLineEndings(rest);\n\t    }\n\t\n\t    var createCallbackAppenderFor = function (qu) {\n\t        return function (subject, observer, event) {\n\t            var originalLoggingCallback = subject[event],\n\t                callback = function () {\n\t                    // make listener methods (moduleStart,testStart,log, ...) overridable.\n\t                    observer[event].apply(observer, slice.apply(arguments));\n\t                };\n\t            originalLoggingCallback(callback);\n\t            return callback;\n\t        };\n\t    };\n\t\n\t\n\t    /**\n\t     * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n\t     * @param qunitObject QUnit object reference.\n\t     * @param printLikeFunction print-like function for TAP output (assumes line-separator is added by this function for each call).\n\t     * @param options configuration options to customize default behavior.\n\t     * @return object to provide QUnit-TAP API and customization subject.\n\t     */\n\t    function qunitTap(qunitObject, printLikeFunction, options) {\n\t        if (!qunitObject) {\n\t            throw new Error('should pass QUnit object reference. Please check QUnit\\'s \"require\" path if you are using Node.js (or any CommonJS env).');\n\t        } else if (typeof printLikeFunction !== 'function') {\n\t            throw new Error('should pass print-like function');\n\t        }\n\t\n\t        var qu = qunitObject,\n\t            tap = {},\n\t            deprecateOption = function deprecateOption (optionName, fallback) {\n\t                // option deprecation and fallback function\n\t                if (!options || typeof options !== 'object') {\n\t                    return;\n\t                }\n\t                if (typeof options[optionName] === 'undefined') {\n\t                    return;\n\t                }\n\t                printLikeFunction('# WARNING: Option \"' + optionName + '\" is deprecated and will be removed in future version.');\n\t                fallback(options[optionName]);\n\t            },\n\t            targetEvents = [\n\t                'moduleStart',\n\t                'testStart',\n\t                'log',\n\t                'testDone',\n\t                'done'\n\t            ],\n\t            registeredCallbacks = {},\n\t            explain = (function () {\n\t                if (typeof qu.dump !== 'undefined' && typeof qu.dump.parse === 'function') {\n\t                    return function explain (obj) {\n\t                        return qu.dump.parse(obj);\n\t                    };\n\t                }\n\t                if (typeof qu.jsDump !== 'undefined' && typeof qu.jsDump.parse === 'function') {\n\t                    return function explain (obj) {\n\t                        return qu.jsDump.parse(obj);\n\t                    };\n\t                }\n\t                return noop;\n\t            })();\n\t\n\t        tap.config = extend(\n\t            {\n\t                initialCount: 1,\n\t                showModuleNameOnFailure: true,\n\t                showTestNameOnFailure: true,\n\t                showExpectationOnFailure: true,\n\t                showSourceOnFailure: true\n\t            },\n\t            options\n\t        );\n\t        deprecateOption('noPlan', function (flag) {\n\t            printLikeFunction('# Now QUnit-TAP works as with \"noPlan: true\" by default. If you want to delare plan explicitly, please use \"QUnit.config.requireExpects\" option instead.');\n\t            tap.config.noPlan = flag;\n\t        });\n\t        deprecateOption('count', function (count) {\n\t            tap.config.initialCount = (count + 1);\n\t        });\n\t        deprecateOption('showDetailsOnFailure', function (flag) {\n\t            tap.config.showModuleNameOnFailure = flag;\n\t            tap.config.showTestNameOnFailure = flag;\n\t            tap.config.showExpectationOnFailure = flag;\n\t            tap.config.showSourceOnFailure = flag;\n\t        });\n\t        tap.VERSION = qunitTapVersion;\n\t        tap.puts = printLikeFunction;\n\t        tap.count = tap.config.initialCount - 1;\n\t        tap.expectedCount = tap.config.initialCount - 1;\n\t\n\t        function isEnabled (configName) {\n\t            return tap.config[configName];\n\t        }\n\t\n\t        function formatDetails (details) {\n\t            if (isPassed(details)) {\n\t                return details.message;\n\t            }\n\t            var desc = [];\n\t            if (details.message) {\n\t                desc.push(details.message);\n\t            }\n\t            if (isEnabled('showExpectationOnFailure') && !(isAssertOkFailed(details))) {\n\t                render(desc, 'expected', details.expected, explain);\n\t                render(desc, 'got', details.actual, explain);\n\t            }\n\t            renderIf(isEnabled('showTestNameOnFailure'), desc, 'test', details.name, noop);\n\t            renderIf(isEnabled('showModuleNameOnFailure'), desc, 'module', details.module, noop);\n\t            renderIf(isEnabled('showSourceOnFailure'), desc, 'source', details.source, ltrim);\n\t            return desc.join(', ');\n\t        }\n\t\n\t        function printPlanLine (toCount) {\n\t            tap.puts(tap.config.initialCount + '..' + toCount);\n\t        }\n\t\n\t        function unsubscribeEvent (eventName) {\n\t            var listeners;\n\t            if (indexOf(targetEvents, eventName) === -1) {\n\t                return;\n\t            }\n\t            listeners = qu.config[eventName];\n\t            if (typeof listeners === 'undefined') {\n\t                return;\n\t            }\n\t            removeElement(listeners, registeredCallbacks[eventName]);\n\t        }\n\t\n\t        function unsubscribeEvents (eventNames) {\n\t            var i;\n\t            for (i = 0; i < eventNames.length; i += 1) {\n\t                unsubscribeEvent(eventNames[i]);\n\t            }\n\t        }\n\t\n\t        tap.explain = explain;\n\t\n\t        tap.note = function note (obj) {\n\t            tap.puts(escapeLineEndings('# ' + obj));\n\t        };\n\t\n\t        tap.diag = function diag (obj) {\n\t            tap.note(obj);\n\t            return false;\n\t        };\n\t\n\t        tap.moduleStart = function moduleStart (arg) {\n\t            var name = (typeof arg === 'string') ? arg : arg.name;\n\t            tap.note('module: ' + name);\n\t        };\n\t\n\t        tap.testStart = function testStart (arg) {\n\t            var name = (typeof arg === 'string') ? arg : arg.name;\n\t            tap.note('test: ' + name);\n\t        };\n\t\n\t        tap.log = function log (details) {\n\t            var testLine = '';\n\t            tap.count += 1;\n\t            if (isFailed(details)) {\n\t                testLine += 'not ';\n\t            }\n\t            testLine += ('ok ' + tap.count);\n\t            tap.puts(formatTestLine(testLine, formatDetails(details)));\n\t        };\n\t\n\t        tap.testDone = function testDone () {\n\t            if (isPlanRequired(qu.config)) {\n\t                tap.expectedCount += qu.config.current.expected;\n\t            }\n\t        };\n\t\n\t        tap.done = function done () {\n\t            if (typeof tap.config.noPlan !== 'undefined' && !(tap.config.noPlan)) {\n\t                // Do nothing until removal of 'noPlan' option.\n\t            } else if (isPlanRequired(qu.config)) {\n\t                printPlanLine(tap.expectedCount);\n\t            } else {\n\t                printPlanLine(tap.count);\n\t            }\n\t        };\n\t\n\t        tap.unsubscribe = function unsubscribe () {\n\t            if (typeof qu.config === 'undefined') {\n\t                return;\n\t            }\n\t            if (arguments.length === 0) {\n\t                unsubscribeEvents(targetEvents);\n\t            } else {\n\t                unsubscribeEvents(slice.apply(arguments));\n\t            }\n\t        };\n\t\n\t        (function () {\n\t            var appendCallback = createCallbackAppenderFor(qu),\n\t                eventName, i, callback;\n\t            for (i = 0; i < targetEvents.length; i += 1) {\n\t                eventName = targetEvents[i];\n\t                callback = appendCallback(qu, tap, eventName);\n\t                registeredCallbacks[eventName] = callback;\n\t            }\n\t        })();\n\t\n\t        return tap;\n\t    }\n\t\n\t    qunitTap.qunitTap = function () {\n\t        throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require(\"qunit-tap\") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');\n\t    };\n\t\n\t    // using substack pattern (export single function)\n\t    return qunitTap;\n\t}));\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\t\n\t/* global QUnit, qunitTap */\n\t\n\tvar qunit_started = false;\n\t\n\t/* Always use explicit start */\n\tQUnit.config.autostart = false;\n\t\n\t/*\n\t * HACK: phantomjs doesn't handle uncaught exceptions as it should if\n\t * window.onerror is non-null, even when that handler returns false\n\t * (expecting that the browser default behavior will occur).\n\t *\n\t * So remove the qunit window.onerror handler until the tests actually\n\t * start, and any errors become part of the test suite results.\n\t */\n\tvar qunit_onerror = window.onerror;\n\twindow.onerror = null;\n\tQUnit.begin(function() {\n\t    window.onerror = function(error, file, line) {\n\t        var ret = false;\n\t        if (qunit_onerror)\n\t            ret = qunit_onerror(error, file, line);\n\t\n\t        /*\n\t         * If a global exception happens during an async test\n\t         * then that test won't be able to call the start() function\n\t         * to move to the next test, so call it here.\n\t         */\n\t        if (QUnit.config.current && QUnit.config.current.async)\n\t            QUnit.start();\n\t\n\t        return ret;\n\t    };\n\t});\n\t\n\tQUnit.moduleStart(function() {\n\t    qunit_started = true;\n\t});\n\t\n\tQUnit.done(function() {\n\t    console.log(\"cockpittest-tap-done\");\n\t    window.onerror = null;\n\t});\n\t/*\n\t * Now initialize qunit-tap\n\t *\n\t * When not running under tap-phantom this stuff will just show up in\n\t * the console. We print out a special canary at the end of the tests\n\t * so that tap-phantom can know when the testing is done.\n\t *\n\t * In addition double check for a test file that doesn't properly call\n\t * QUnit.start() after its done setting up its tests.\n\t *\n\t * We also want to insert the current test name into all tap lines.\n\t */\n\tvar tap_regex = /^((not )?ok [0-9]+ (- )?)(.*)$/;\n\tqunitTap(QUnit, function() {\n\t    if (arguments.length == 1 && QUnit.config.current) {\n\t        var match = tap_regex.exec(arguments[0]);\n\t        if (match) {\n\t            console.log(match[1] + QUnit.config.current.testName + \": \" + match[4]);\n\t            return;\n\t        }\n\t    }\n\t    console.log.apply(console, arguments);\n\t});\n\t\n\twindow.setTimeout(function() {\n\t    if (!qunit_started) {\n\t        console.log(\"QUnit not started by test\");\n\t        console.log(\"cockpittest-tap-error\");\n\t    }\n\t}, 20000);\n\t\n\twindow.tests_included = true;\n\t\n\tif (module && module.exports)\n\t    module.exports = QUnit;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(25)(module)))\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// networkmanager/test-utils.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 33f16c6aa8ffb9642269","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2014 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\nvar utils = require(\"./utils\");\nvar cockpit = require(\"cockpit\");\nvar QUnit = require(\"qunit-tests\");\nvar assert = QUnit;\n\nfunction assert_throws(func, checks) {\n    assert.expect(checks.length);\n\n    checks.forEach(function(c) {\n        assert.throws(function() {\n            func(c);\n        });\n    });\n}\n\nQUnit.test(\"ip_prefix_from_text\", function() {\n    var checks = [\n        [ \"0\",      0 ],\n        [ \"12\",    12 ],\n        [ \" 12  \", 12 ]\n    ];\n\n    assert.expect(checks.length);\n\n    checks.forEach(function(c) {\n        assert.strictEqual(utils.ip_prefix_from_text(c[0]), c[1]);\n    });\n});\n\nQUnit.test(\"ip_prefix_from_text invalids\", function() {\n    var checks = [\n        \"\",\n        \"-1\",\n        \"foo\",\n        \"1foo\",\n        \"1.5\",\n        \"1 2 3\"\n    ];\n\n    assert_throws(utils.ip_prefix_from_text, checks);\n});\n\nQUnit.test(\"ip_metric_from_text\", function() {\n    var checks = [\n        [ \"\",       0 ],\n        [ \"0\",      0 ],\n        [ \"12\",    12 ],\n        [ \" 12  \", 12 ]\n    ];\n\n    assert.expect(checks.length);\n\n    checks.forEach(function(c) {\n        assert.strictEqual(utils.ip_metric_from_text(c[0]), c[1]);\n    });\n});\n\nQUnit.test(\"ip_metric_from_text invalids\", function() {\n    var checks = [\n        \"-1\",\n        \"foo\",\n        \"1foo\",\n        \"1.5\",\n        \"1 2 3\"\n    ];\n\n    assert_throws(utils.ip_metric_from_text, checks);\n});\n\nQUnit.test(\"ip4_to/from_text be\", function() {\n    var checks = [\n        [ \"0.0.0.0\",           0x00000000 ],\n        [ \"255.255.255.255\",   0xFFFFFFFF ],\n        [ \"1.2.3.4\",           0x01020304 ],\n        [ \" 1.2.3.4 \",         0x01020304 ],\n        [ \" 1 . 2 . 3. 4 \",    0x01020304 ]\n    ];\n\n    assert.expect(2*checks.length);\n\n    utils.set_byteorder(\"be\");\n    checks.forEach(function(c) {\n        assert.strictEqual(utils.ip4_to_text(c[1]), c[0].replace(/ /g, \"\"));\n        assert.strictEqual(utils.ip4_from_text(c[0]), c[1]);\n    });\n});\n\nQUnit.test(\"ip4_to/from_text le\", function() {\n    var checks = [\n        [ \"0.0.0.0\",           0x00000000 ],\n        [ \"255.255.255.255\",   0xFFFFFFFF ],\n        [ \"1.2.3.4\",           0x04030201 ],\n        [ \" 1.2.3.4 \",         0x04030201 ],\n        [ \" 1 . 2 . 3. 4 \",    0x04030201 ]\n    ];\n\n    assert.expect(2*checks.length);\n\n    utils.set_byteorder(\"le\");\n    checks.forEach(function(c) {\n        assert.strictEqual(utils.ip4_to_text(c[1]), c[0].replace(/ /g, \"\"));\n        assert.strictEqual(utils.ip4_from_text(c[0]), c[1]);\n    });\n});\n\nQUnit.test(\"ip4_from_text invalids\", function() {\n    var checks = [\n        \"\",\n        \"0\",\n        \"0.0\",\n        \"0.0.0\",\n        \"0.0.0.0.0\",\n        \"-1.2.3.4\",\n        \"foo\",\n        \"1.foo.3.4\",\n        \"1foo.2.3.4\",\n        \"1.2.3.400\",\n        \"1,2,3,4\",\n        \"1 1.2.3 3.4\"\n    ];\n\n    assert_throws(utils.ip4_from_text, checks);\n});\n\nQUnit.test(\"ip4_to_text zero\", function() {\n    utils.set_byteorder(\"be\");\n    assert.strictEqual(utils.ip4_to_text(0, true), \"\");\n});\n\nQUnit.test(\"ip4_from_text empty\", function() {\n    utils.set_byteorder(\"be\");\n    assert.strictEqual(utils.ip4_from_text(\"\", true), 0);\n});\n\nQUnit.test(\"ip4_prefix_from_text\", function() {\n    var checks = [\n        \"0.0.0.0\",\n\n        \" 128.0.0.0\",\n        \"192.0.0.0 \",\n        \"224. 0. 0.0\",\n        \"240. 0.0 .0\",\n        \"248.0.0.0\",\n        \"252. 0.0.0\",\n        \"254.0.0.0\",\n        \"255.0.0.0\",\n\n        \"255.128.0.0\",\n        \"255.192.0.0\",\n        \"255.224.0.0\",\n        \"255.240.0.0\",\n        \"255.248.0.0\",\n        \"255.252.0.0\",\n        \"255.254.0.0\",\n        \"255.255.0.0\",\n\n        \"255.255.128.0\",\n        \"255.255.192.0\",\n        \"255.255.224.0\",\n        \"255.255.240.0\",\n        \"255.255.248.0\",\n        \"255.255.252.0\",\n        \"255.255.254.0\",\n        \"255.255.255.0\",\n\n        \"255.255.255.128\",\n        \"255.255.255.192\",\n        \"255.255.255.224\",\n        \"255.255.255.240\",\n        \"255.255.255.248\",\n        \"255.255.255.252\",\n        \"255.255.255.254\",\n        \"255.255.255.255\"\n    ];\n\n    assert.expect(checks.length);\n\n    checks.forEach(function(c, i) {\n        assert.strictEqual(utils.ip4_prefix_from_text(c), i);\n    });\n});\n\nQUnit.test(\"ip4_prefix_from_text invalids\", function() {\n    var checks = [\n        \"\",\n        \"-1\",\n        \"foo\",\n        \"1foo\",\n        \"1.5\",\n\n        \"0.0\",\n        \"0.0.0\",\n        \"0.0.0.0.0\",\n        \"1.2.3.4\",\n        \"255.255.255.8\",\n        \"255.192.0.10\"\n    ];\n\n    assert_throws(utils.ip4_prefix_from_text, checks);\n});\n\nQUnit.test(\"ip6_to/from_text\", function() {\n    var checks = [\n        [ [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],\n          \"0:0:0:0:0:0:0:0\"\n        ],\n        [ [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F ],\n          \"1:203:405:607:809:a0b:c0d:e0f\"\n        ],\n        [ [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F ],\n          \" 1: 203 :  405: 607: 809:a0b :c0d:e0f\"\n        ],\n    ];\n\n    assert.expect(2*checks.length);\n\n    checks.forEach(function(c) {\n        assert.strictEqual(utils.ip6_to_text(cockpit.base64_encode(c[0])), c[1].replace(/ /g, \"\"));\n        assert.deepEqual(cockpit.base64_decode(utils.ip6_from_text(c[1])), c[0]);\n    });\n});\n\nQUnit.test(\"ip6_from_text abbrevs\", function() {\n    var checks = [\n        [ \"::\",\n          [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],\n        ],\n        [ \"::1\",\n          [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 ],\n        ],\n        [ \"1::\",\n          [ 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ],\n        ],\n        [ \"1:2:3::2:1\",\n          [ 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01 ],\n        ],\n        [ \"2001::1\",\n          [ 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 ],\n        ],\n    ];\n\n    checks.forEach(function(c) {\n        assert.deepEqual(cockpit.base64_decode(utils.ip6_from_text(c[0])), c[1]);\n    });\n});\n\nQUnit.test(\"ip6_from_text invalids\", function() {\n    var checks = [\n        \"\",\n        \"0\",\n        \"0:0\",\n        \"0:0:0\",\n        \"0:0:0:0\",\n        \"0:0:0:0:0\",\n        \"0:0:0:0:0:0\",\n        \"0:0:0:0:0:0:0\",\n        \"0:0:0:0:0:0:0:0:0\",\n        \"foo\",\n        \"1:2:3:four:5:6:7:8\",\n        \"1:2:3:-4:5:6:7:8\",\n        \"1:2:3:4.0:5:6:7:8\",\n        \"1:2:3:4foo:5:6:7:8\",\n        \"1:2:3:10000:5:6:7:8\",\n        \"1::4::8\",\n        \"::8::\",\n        \"1:2:3:4 4:5:6:7:8\",\n    ];\n\n    assert_throws(utils.ip6_from_text, checks);\n});\n\nQUnit.test(\"ip6_to_text zero\", function() {\n    var zero = [ 0, 0, 0, 0, 0, 0, 0, 0,\n                 0, 0, 0, 0, 0, 0, 0, 0\n               ];\n    assert.strictEqual(utils.ip6_to_text(cockpit.base64_encode(zero), true), \"\");\n});\n\nQUnit.test(\"ip6_from_text empty\", function() {\n    var zero = [ 0, 0, 0, 0, 0, 0, 0, 0,\n                 0, 0, 0, 0, 0, 0, 0, 0\n               ];\n    assert.deepEqual(cockpit.base64_decode(utils.ip6_from_text(\"\", true)), zero);\n});\n\nQUnit.start();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/networkmanager/test-utils.js\n// module id = 0\n// module chunks = 1","module.exports = cockpit;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"cockpit\"\n// module id = 3\n// module chunks = 0 1","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2016 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    var cockpit = require(\"cockpit\");\n\n    var _ = cockpit.gettext;\n\n    /* NetworkManager specific data conversions and utility functions.\n     */\n\n    var byteorder;\n\n    function set_byteorder(bo) {\n        byteorder = bo;\n    }\n\n    function ip_prefix_to_text(num) {\n        return num.toString();\n    }\n\n    function ip_prefix_from_text(text) {\n        if (/^[0-9]+$/.test(text.trim()))\n            return parseInt(text, 10);\n\n        throw cockpit.format(_(\"Invalid prefix $0\"), text);\n    }\n\n    function ip_metric_to_text(num) {\n        return num.toString();\n    }\n\n    function ip_metric_from_text(text) {\n        if (text === \"\")\n            return 0;\n\n        if (/^[0-9]+$/.test(text.trim()))\n            return parseInt(text, 10);\n\n        throw cockpit.format(_(\"Invalid metric $0\"), text);\n    }\n\n    function toDec(n) {\n        return n.toString(10);\n    }\n\n    function bytes_from_nm32(num) {\n        var bytes = [], i;\n        if (byteorder == \"be\") {\n            for (i = 3; i >= 0; i--) {\n                bytes[i] = num & 0xFF;\n                num = num >>> 8;\n            }\n        } else {\n            for (i = 0; i < 4; i++) {\n                bytes[i] = num & 0xFF;\n                num = num >>> 8;\n            }\n        }\n        return bytes;\n    }\n\n    function ip4_to_text(num, zero_is_empty) {\n        if (num === 0 && zero_is_empty)\n            return \"\";\n        return bytes_from_nm32(num).map(toDec).join('.');\n    }\n\n    function ip4_from_text(text, empty_is_zero) {\n        function invalid() {\n            throw cockpit.format(_(\"Invalid address $0\"), text);\n        }\n\n        if (text === \"\" && empty_is_zero)\n            return 0;\n\n        var parts = text.split('.');\n        if (parts.length != 4)\n            invalid();\n\n        var bytes = parts.map(function(s) {\n            if (/^[0-9]+$/.test(s.trim()))\n                return parseInt(s, 10);\n            else\n                invalid();\n        });\n\n        var num = 0;\n        function shift(b) {\n            if (isNaN(b) || b < 0 || b > 0xFF)\n                invalid();\n            num = 0x100*num + b;\n        }\n\n        var i;\n        if (byteorder == \"be\") {\n            for (i = 0; i < 4; i++) {\n                shift(bytes[i]);\n            }\n        } else {\n            for (i = 3; i >= 0; i--) {\n                shift(bytes[i]);\n            }\n        }\n\n        return num;\n    }\n\n    var text_to_prefix_bits = {\n        \"255\": 8, \"254\": 7, \"252\": 6, \"248\": 5, \"240\": 4, \"224\": 3, \"192\": 2, \"128\": 1, \"0\": 0\n    };\n\n    function ip4_prefix_from_text(text) {\n        function invalid() {\n            throw cockpit.format(_(\"Invalid prefix or netmask $0\"), text);\n        }\n\n        if (/^[0-9]+$/.test(text.trim()))\n            return parseInt(text, 10);\n        var parts = text.split('.');\n        if (parts.length != 4)\n            invalid();\n        var prefix = 0;\n        var i;\n        for (i = 0; i < 4; i++) {\n            var p = text_to_prefix_bits[parts[i].trim()];\n            if (p !== undefined) {\n                prefix += p;\n                if (p < 8)\n                    break;\n            } else\n                invalid();\n        }\n        for (i += 1; i < 4; i++) {\n            if (/^0+$/.test(parts[i].trim()) === false)\n                invalid();\n        }\n        return prefix;\n    }\n\n    function ip6_to_text(data, zero_is_empty) {\n        var parts = [];\n        var bytes = cockpit.base64_decode(data);\n        for (var i = 0; i < 8; i++)\n            parts[i] = ((bytes[2*i] << 8) + bytes[2*i+1]).toString(16);\n        var result = parts.join(':');\n        if (result == \"0:0:0:0:0:0:0:0\" && zero_is_empty)\n            return \"\";\n        return result;\n    }\n\n    function ip6_from_text(text, empty_is_zero) {\n        function invalid() {\n            throw cockpit.format(_(\"Invalid address $0\"), text);\n        }\n\n        if (text === \"\" && empty_is_zero)\n            return cockpit.base64_encode([ 0, 0, 0, 0, 0, 0, 0, 0,\n                                           0, 0, 0, 0, 0, 0, 0, 0,\n                                         ]);\n\n        var parts = text.split(':');\n        if (parts.length < 1 || parts.length > 8)\n            invalid();\n\n        if (parts[0] === \"\")\n            parts[0] = \"0\";\n        if (parts[parts.length-1] === \"\")\n            parts[parts.length-1] = \"0\";\n\n        var bytes = [], n, i, j;\n        var empty_seen = false;\n        for (i = 0, j = 0; i < parts.length; i++, j++) {\n            if (parts[i] === \"\") {\n                if (empty_seen)\n                    invalid();\n                empty_seen = true;\n                while (j < i + (8 - parts.length)) {\n                    bytes[2*j] = bytes[2*j+1] = 0;\n                    j++;\n                }\n            } else {\n                if (!/^[0-9a-fA-F]+$/.test(parts[i].trim()))\n                    invalid();\n                n = parseInt(parts[i], 16);\n                if (isNaN(n) || n < 0 || n > 0xFFFF)\n                    invalid();\n                bytes[2*j] = n >> 8;\n                bytes[2*j+1] = n & 0xFF;\n            }\n        }\n        if (j != 8)\n            invalid();\n\n        return cockpit.base64_encode(bytes);\n    }\n\n    module.exports = {\n        set_byteorder: set_byteorder,\n\n        ip_prefix_to_text: ip_prefix_to_text,\n        ip_prefix_from_text: ip_prefix_from_text,\n        ip_metric_to_text: ip_metric_to_text,\n        ip_metric_from_text: ip_metric_from_text,\n\n        ip4_to_text: ip4_to_text,\n        ip4_from_text: ip4_from_text,\n        ip4_prefix_from_text: ip4_prefix_from_text,\n\n        ip6_to_text: ip6_to_text,\n        ip6_from_text: ip6_from_text\n    };\n\n})();\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/networkmanager/utils.js\n// module id = 4\n// module chunks = 0 1","'use strict';\n\n/*\n * This file is part of Cockpit.\n *\n * Copyright (C) 2014 Red Hat, Inc.\n *\n * Cockpit is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation; either version 2.1 of the License, or\n * (at your option) any later version.\n *\n * Cockpit is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.\n */\n\n(function() {\n    \"use strict\";\n\n    /* QUnit needs to have 'window' as 'this' in order to load */\n    window.QUnit = require(\"qunitjs/qunit/qunit.js\");\n    window.qunitTap = require(\"qunit-tap/lib/qunit-tap.js\");\n\n    require(\"./qunit-config.js\");\n\n    require(\"qunitjs/qunit/qunit.css\");\n\n    module.exports = window.QUnit;\n\n}());\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/qunit-tests.js\n// module id = 22\n// module chunks = 1","/*!\n * QUnit 1.23.1\n * https://qunitjs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2016-04-12T17:29Z\n */\n\n( function( global ) {\n\nvar QUnit = {};\n\nvar Date = global.Date;\nvar now = Date.now || function() {\n\treturn new Date().getTime();\n};\n\nvar setTimeout = global.setTimeout;\nvar clearTimeout = global.clearTimeout;\n\n// Store a local window from the global to allow direct references.\nvar window = global.window;\n\nvar defined = {\n\tdocument: window && window.document !== undefined,\n\tsetTimeout: setTimeout !== undefined,\n\tsessionStorage: ( function() {\n\t\tvar x = \"qunit-test-string\";\n\t\ttry {\n\t\t\tsessionStorage.setItem( x, x );\n\t\t\tsessionStorage.removeItem( x );\n\t\t\treturn true;\n\t\t} catch ( e ) {\n\t\t\treturn false;\n\t\t}\n\t}() )\n};\n\nvar fileName = ( sourceFromStacktrace( 0 ) || \"\" ).replace( /(:\\d+)+\\)?/, \"\" ).replace( /.+\\//, \"\" );\nvar globalStartCalled = false;\nvar runStarted = false;\n\nvar toString = Object.prototype.toString,\n\thasOwn = Object.prototype.hasOwnProperty;\n\n// Returns a new Array with the elements that are in a but not in b\nfunction diff( a, b ) {\n\tvar i, j,\n\t\tresult = a.slice();\n\n\tfor ( i = 0; i < result.length; i++ ) {\n\t\tfor ( j = 0; j < b.length; j++ ) {\n\t\t\tif ( result[ i ] === b[ j ] ) {\n\t\t\t\tresult.splice( i, 1 );\n\t\t\t\ti--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\n// From jquery.js\nfunction inArray( elem, array ) {\n\tif ( array.indexOf ) {\n\t\treturn array.indexOf( elem );\n\t}\n\n\tfor ( var i = 0, length = array.length; i < length; i++ ) {\n\t\tif ( array[ i ] === elem ) {\n\t\t\treturn i;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * Makes a clone of an object using only Array or Object as base,\n * and copies over the own enumerable properties.\n *\n * @param {Object} obj\n * @return {Object} New object with only the own properties (recursively).\n */\nfunction objectValues ( obj ) {\n\tvar key, val,\n\t\tvals = QUnit.is( \"array\", obj ) ? [] : {};\n\tfor ( key in obj ) {\n\t\tif ( hasOwn.call( obj, key ) ) {\n\t\t\tval = obj[ key ];\n\t\t\tvals[ key ] = val === Object( val ) ? objectValues( val ) : val;\n\t\t}\n\t}\n\treturn vals;\n}\n\nfunction extend( a, b, undefOnly ) {\n\tfor ( var prop in b ) {\n\t\tif ( hasOwn.call( b, prop ) ) {\n\n\t\t\t// Avoid \"Member not found\" error in IE8 caused by messing with window.constructor\n\t\t\t// This block runs on every environment, so `global` is being used instead of `window`\n\t\t\t// to avoid errors on node.\n\t\t\tif ( prop !== \"constructor\" || a !== global ) {\n\t\t\t\tif ( b[ prop ] === undefined ) {\n\t\t\t\t\tdelete a[ prop ];\n\t\t\t\t} else if ( !( undefOnly && typeof a[ prop ] !== \"undefined\" ) ) {\n\t\t\t\t\ta[ prop ] = b[ prop ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a;\n}\n\nfunction objectType( obj ) {\n\tif ( typeof obj === \"undefined\" ) {\n\t\treturn \"undefined\";\n\t}\n\n\t// Consider: typeof null === object\n\tif ( obj === null ) {\n\t\treturn \"null\";\n\t}\n\n\tvar match = toString.call( obj ).match( /^\\[object\\s(.*)\\]$/ ),\n\t\ttype = match && match[ 1 ];\n\n\tswitch ( type ) {\n\t\tcase \"Number\":\n\t\t\tif ( isNaN( obj ) ) {\n\t\t\t\treturn \"nan\";\n\t\t\t}\n\t\t\treturn \"number\";\n\t\tcase \"String\":\n\t\tcase \"Boolean\":\n\t\tcase \"Array\":\n\t\tcase \"Set\":\n\t\tcase \"Map\":\n\t\tcase \"Date\":\n\t\tcase \"RegExp\":\n\t\tcase \"Function\":\n\t\tcase \"Symbol\":\n\t\t\treturn type.toLowerCase();\n\t}\n\tif ( typeof obj === \"object\" ) {\n\t\treturn \"object\";\n\t}\n}\n\n// Safe object type checking\nfunction is( type, obj ) {\n\treturn QUnit.objectType( obj ) === type;\n}\n\n// Doesn't support IE6 to IE9, it will return undefined on these browsers\n// See also https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error/Stack\nfunction extractStacktrace( e, offset ) {\n\toffset = offset === undefined ? 4 : offset;\n\n\tvar stack, include, i;\n\n\tif ( e.stack ) {\n\t\tstack = e.stack.split( \"\\n\" );\n\t\tif ( /^error$/i.test( stack[ 0 ] ) ) {\n\t\t\tstack.shift();\n\t\t}\n\t\tif ( fileName ) {\n\t\t\tinclude = [];\n\t\t\tfor ( i = offset; i < stack.length; i++ ) {\n\t\t\t\tif ( stack[ i ].indexOf( fileName ) !== -1 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tinclude.push( stack[ i ] );\n\t\t\t}\n\t\t\tif ( include.length ) {\n\t\t\t\treturn include.join( \"\\n\" );\n\t\t\t}\n\t\t}\n\t\treturn stack[ offset ];\n\n\t// Support: Safari <=6 only\n\t} else if ( e.sourceURL ) {\n\n\t\t// Exclude useless self-reference for generated Error objects\n\t\tif ( /qunit.js$/.test( e.sourceURL ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// For actual exceptions, this is useful\n\t\treturn e.sourceURL + \":\" + e.line;\n\t}\n}\n\nfunction sourceFromStacktrace( offset ) {\n\tvar error = new Error();\n\n\t// Support: Safari <=7 only, IE <=10 - 11 only\n\t// Not all browsers generate the `stack` property for `new Error()`, see also #636\n\tif ( !error.stack ) {\n\t\ttry {\n\t\t\tthrow error;\n\t\t} catch ( err ) {\n\t\t\terror = err;\n\t\t}\n\t}\n\n\treturn extractStacktrace( error, offset );\n}\n\n/**\n * Config object: Maintain internal state\n * Later exposed as QUnit.config\n * `config` initialized at top of scope\n */\nvar config = {\n\n\t// The queue of tests to run\n\tqueue: [],\n\n\t// Block until document ready\n\tblocking: true,\n\n\t// By default, run previously failed tests first\n\t// very useful in combination with \"Hide passed tests\" checked\n\treorder: true,\n\n\t// By default, modify document.title when suite is done\n\taltertitle: true,\n\n\t// HTML Reporter: collapse every test except the first failing test\n\t// If false, all failing tests will be expanded\n\tcollapse: true,\n\n\t// By default, scroll to top of the page when suite is done\n\tscrolltop: true,\n\n\t// Depth up-to which object will be dumped\n\tmaxDepth: 5,\n\n\t// When enabled, all tests must call expect()\n\trequireExpects: false,\n\n\t// Placeholder for user-configurable form-exposed URL parameters\n\turlConfig: [],\n\n\t// Set of all modules.\n\tmodules: [],\n\n\t// Stack of nested modules\n\tmoduleStack: [],\n\n\t// The first unnamed module\n\tcurrentModule: {\n\t\tname: \"\",\n\t\ttests: []\n\t},\n\n\tcallbacks: {}\n};\n\n// Push a loose unnamed module to the modules collection\nconfig.modules.push( config.currentModule );\n\nvar loggingCallbacks = {};\n\n// Register logging callbacks\nfunction registerLoggingCallbacks( obj ) {\n\tvar i, l, key,\n\t\tcallbackNames = [ \"begin\", \"done\", \"log\", \"testStart\", \"testDone\",\n\t\t\t\"moduleStart\", \"moduleDone\" ];\n\n\tfunction registerLoggingCallback( key ) {\n\t\tvar loggingCallback = function( callback ) {\n\t\t\tif ( objectType( callback ) !== \"function\" ) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"QUnit logging methods require a callback function as their first parameters.\"\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconfig.callbacks[ key ].push( callback );\n\t\t};\n\n\t\t// DEPRECATED: This will be removed on QUnit 2.0.0+\n\t\t// Stores the registered functions allowing restoring\n\t\t// at verifyLoggingCallbacks() if modified\n\t\tloggingCallbacks[ key ] = loggingCallback;\n\n\t\treturn loggingCallback;\n\t}\n\n\tfor ( i = 0, l = callbackNames.length; i < l; i++ ) {\n\t\tkey = callbackNames[ i ];\n\n\t\t// Initialize key collection of logging callback\n\t\tif ( objectType( config.callbacks[ key ] ) === \"undefined\" ) {\n\t\t\tconfig.callbacks[ key ] = [];\n\t\t}\n\n\t\tobj[ key ] = registerLoggingCallback( key );\n\t}\n}\n\nfunction runLoggingCallbacks( key, args ) {\n\tvar i, l, callbacks;\n\n\tcallbacks = config.callbacks[ key ];\n\tfor ( i = 0, l = callbacks.length; i < l; i++ ) {\n\t\tcallbacks[ i ]( args );\n\t}\n}\n\n// DEPRECATED: This will be removed on 2.0.0+\n// This function verifies if the loggingCallbacks were modified by the user\n// If so, it will restore it, assign the given callback and print a console warning\nfunction verifyLoggingCallbacks() {\n\tvar loggingCallback, userCallback;\n\n\tfor ( loggingCallback in loggingCallbacks ) {\n\t\tif ( QUnit[ loggingCallback ] !== loggingCallbacks[ loggingCallback ] ) {\n\n\t\t\tuserCallback = QUnit[ loggingCallback ];\n\n\t\t\t// Restore the callback function\n\t\t\tQUnit[ loggingCallback ] = loggingCallbacks[ loggingCallback ];\n\n\t\t\t// Assign the deprecated given callback\n\t\t\tQUnit[ loggingCallback ]( userCallback );\n\n\t\t\tif ( global.console && global.console.warn ) {\n\t\t\t\tglobal.console.warn(\n\t\t\t\t\t\"QUnit.\" + loggingCallback + \" was replaced with a new value.\\n\" +\n\t\t\t\t\t\"Please, check out the documentation on how to apply logging callbacks.\\n\" +\n\t\t\t\t\t\"Reference: https://api.qunitjs.com/category/callbacks/\"\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n\n( function() {\n\tif ( !defined.document ) {\n\t\treturn;\n\t}\n\n\t// `onErrorFnPrev` initialized at top of scope\n\t// Preserve other handlers\n\tvar onErrorFnPrev = window.onerror;\n\n\t// Cover uncaught exceptions\n\t// Returning true will suppress the default browser handler,\n\t// returning false will let it run.\n\twindow.onerror = function( error, filePath, linerNr ) {\n\t\tvar ret = false;\n\t\tif ( onErrorFnPrev ) {\n\t\t\tret = onErrorFnPrev( error, filePath, linerNr );\n\t\t}\n\n\t\t// Treat return value as window.onerror itself does,\n\t\t// Only do our handling if not suppressed.\n\t\tif ( ret !== true ) {\n\t\t\tif ( QUnit.config.current ) {\n\t\t\t\tif ( QUnit.config.current.ignoreGlobalErrors ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t} else {\n\t\t\t\tQUnit.test( \"global failure\", extend( function() {\n\t\t\t\t\tQUnit.pushFailure( error, filePath + \":\" + linerNr );\n\t\t\t\t}, { validTest: true } ) );\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\treturn ret;\n\t};\n}() );\n\n// Figure out if we're running the tests from a server or not\nQUnit.isLocal = !( defined.document && window.location.protocol !== \"file:\" );\n\n// Expose the current QUnit version\nQUnit.version = \"1.23.1\";\n\nextend( QUnit, {\n\n\t// Call on start of module test to prepend name to all tests\n\tmodule: function( name, testEnvironment, executeNow ) {\n\t\tvar module, moduleFns;\n\t\tvar currentModule = config.currentModule;\n\n\t\tif ( arguments.length === 2 ) {\n\t\t\tif ( objectType( testEnvironment ) === \"function\" ) {\n\t\t\t\texecuteNow = testEnvironment;\n\t\t\t\ttestEnvironment = undefined;\n\t\t\t}\n\t\t}\n\n\t\t// DEPRECATED: handles setup/teardown functions,\n\t\t// beforeEach and afterEach should be used instead\n\t\tif ( testEnvironment && testEnvironment.setup ) {\n\t\t\ttestEnvironment.beforeEach = testEnvironment.setup;\n\t\t\tdelete testEnvironment.setup;\n\t\t}\n\t\tif ( testEnvironment && testEnvironment.teardown ) {\n\t\t\ttestEnvironment.afterEach = testEnvironment.teardown;\n\t\t\tdelete testEnvironment.teardown;\n\t\t}\n\n\t\tmodule = createModule();\n\n\t\tmoduleFns = {\n\t\t\tbeforeEach: setHook( module, \"beforeEach\" ),\n\t\t\tafterEach: setHook( module, \"afterEach\" )\n\t\t};\n\n\t\tif ( objectType( executeNow ) === \"function\" ) {\n\t\t\tconfig.moduleStack.push( module );\n\t\t\tsetCurrentModule( module );\n\t\t\texecuteNow.call( module.testEnvironment, moduleFns );\n\t\t\tconfig.moduleStack.pop();\n\t\t\tmodule = module.parentModule || currentModule;\n\t\t}\n\n\t\tsetCurrentModule( module );\n\n\t\tfunction createModule() {\n\t\t\tvar parentModule = config.moduleStack.length ?\n\t\t\t\tconfig.moduleStack.slice( -1 )[ 0 ] : null;\n\t\t\tvar moduleName = parentModule !== null ?\n\t\t\t\t[ parentModule.name, name ].join( \" > \" ) : name;\n\t\t\tvar module = {\n\t\t\t\tname: moduleName,\n\t\t\t\tparentModule: parentModule,\n\t\t\t\ttests: [],\n\t\t\t\tmoduleId: generateHash( moduleName )\n\t\t\t};\n\n\t\t\tvar env = {};\n\t\t\tif ( parentModule ) {\n\t\t\t\textend( env, parentModule.testEnvironment );\n\t\t\t\tdelete env.beforeEach;\n\t\t\t\tdelete env.afterEach;\n\t\t\t}\n\t\t\textend( env, testEnvironment );\n\t\t\tmodule.testEnvironment = env;\n\n\t\t\tconfig.modules.push( module );\n\t\t\treturn module;\n\t\t}\n\n\t\tfunction setCurrentModule( module ) {\n\t\t\tconfig.currentModule = module;\n\t\t}\n\n\t},\n\n\t// DEPRECATED: QUnit.asyncTest() will be removed in QUnit 2.0.\n\tasyncTest: asyncTest,\n\n\ttest: test,\n\n\tskip: skip,\n\n\tonly: only,\n\n\t// DEPRECATED: The functionality of QUnit.start() will be altered in QUnit 2.0.\n\t// In QUnit 2.0, invoking it will ONLY affect the `QUnit.config.autostart` blocking behavior.\n\tstart: function( count ) {\n\t\tvar globalStartAlreadyCalled = globalStartCalled;\n\n\t\tif ( !config.current ) {\n\t\t\tglobalStartCalled = true;\n\n\t\t\tif ( runStarted ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context while already started\" );\n\t\t\t} else if ( globalStartAlreadyCalled || count > 1 ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context too many times\" );\n\t\t\t} else if ( config.autostart ) {\n\t\t\t\tthrow new Error( \"Called start() outside of a test context when \" +\n\t\t\t\t\t\"QUnit.config.autostart was true\" );\n\t\t\t} else if ( !config.pageLoaded ) {\n\n\t\t\t\t// The page isn't completely loaded yet, so bail out and let `QUnit.load` handle it\n\t\t\t\tconfig.autostart = true;\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\n\t\t\t// If a test is running, adjust its semaphore\n\t\t\tconfig.current.semaphore -= count || 1;\n\n\t\t\t// If semaphore is non-numeric, throw error\n\t\t\tif ( isNaN( config.current.semaphore ) ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\n\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\"Called start() with a non-numeric decrement.\",\n\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Don't start until equal number of stop-calls\n\t\t\tif ( config.current.semaphore > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Throw an Error if start is called more often than stop\n\t\t\tif ( config.current.semaphore < 0 ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\n\t\t\t\tQUnit.pushFailure(\n\t\t\t\t\t\"Called start() while already started (test's semaphore was 0 already)\",\n\t\t\t\t\tsourceFromStacktrace( 2 )\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tresumeProcessing();\n\t},\n\n\t// DEPRECATED: QUnit.stop() will be removed in QUnit 2.0.\n\tstop: function( count ) {\n\n\t\t// If there isn't a test running, don't allow QUnit.stop() to be called\n\t\tif ( !config.current ) {\n\t\t\tthrow new Error( \"Called stop() outside of a test context\" );\n\t\t}\n\n\t\t// If a test is running, adjust its semaphore\n\t\tconfig.current.semaphore += count || 1;\n\n\t\tpauseProcessing();\n\t},\n\n\tconfig: config,\n\n\tis: is,\n\n\tobjectType: objectType,\n\n\textend: extend,\n\n\tload: function() {\n\t\tconfig.pageLoaded = true;\n\n\t\t// Initialize the configuration options\n\t\textend( config, {\n\t\t\tstats: { all: 0, bad: 0 },\n\t\t\tmoduleStats: { all: 0, bad: 0 },\n\t\t\tstarted: 0,\n\t\t\tupdateRate: 1000,\n\t\t\tautostart: true,\n\t\t\tfilter: \"\"\n\t\t}, true );\n\n\t\tconfig.blocking = false;\n\n\t\tif ( config.autostart ) {\n\t\t\tresumeProcessing();\n\t\t}\n\t},\n\n\tstack: function( offset ) {\n\t\toffset = ( offset || 0 ) + 2;\n\t\treturn sourceFromStacktrace( offset );\n\t}\n} );\n\nregisterLoggingCallbacks( QUnit );\n\nfunction begin() {\n\tvar i, l,\n\t\tmodulesLog = [];\n\n\t// If the test run hasn't officially begun yet\n\tif ( !config.started ) {\n\n\t\t// Record the time of the test run's beginning\n\t\tconfig.started = now();\n\n\t\tverifyLoggingCallbacks();\n\n\t\t// Delete the loose unnamed module if unused.\n\t\tif ( config.modules[ 0 ].name === \"\" && config.modules[ 0 ].tests.length === 0 ) {\n\t\t\tconfig.modules.shift();\n\t\t}\n\n\t\t// Avoid unnecessary information by not logging modules' test environments\n\t\tfor ( i = 0, l = config.modules.length; i < l; i++ ) {\n\t\t\tmodulesLog.push( {\n\t\t\t\tname: config.modules[ i ].name,\n\t\t\t\ttests: config.modules[ i ].tests\n\t\t\t} );\n\t\t}\n\n\t\t// The test run is officially beginning now\n\t\trunLoggingCallbacks( \"begin\", {\n\t\t\ttotalTests: Test.count,\n\t\t\tmodules: modulesLog\n\t\t} );\n\t}\n\n\tconfig.blocking = false;\n\tprocess( true );\n}\n\nfunction process( last ) {\n\tfunction next() {\n\t\tprocess( last );\n\t}\n\tvar start = now();\n\tconfig.depth = ( config.depth || 0 ) + 1;\n\n\twhile ( config.queue.length && !config.blocking ) {\n\t\tif ( !defined.setTimeout || config.updateRate <= 0 ||\n\t\t\t\t( ( now() - start ) < config.updateRate ) ) {\n\t\t\tif ( config.current ) {\n\n\t\t\t\t// Reset async tracking for each phase of the Test lifecycle\n\t\t\t\tconfig.current.usedAsync = false;\n\t\t\t}\n\t\t\tconfig.queue.shift()();\n\t\t} else {\n\t\t\tsetTimeout( next, 13 );\n\t\t\tbreak;\n\t\t}\n\t}\n\tconfig.depth--;\n\tif ( last && !config.blocking && !config.queue.length && config.depth === 0 ) {\n\t\tdone();\n\t}\n}\n\nfunction pauseProcessing() {\n\tconfig.blocking = true;\n\n\tif ( config.testTimeout && defined.setTimeout ) {\n\t\tclearTimeout( config.timeout );\n\t\tconfig.timeout = setTimeout( function() {\n\t\t\tif ( config.current ) {\n\t\t\t\tconfig.current.semaphore = 0;\n\t\t\t\tQUnit.pushFailure( \"Test timed out\", sourceFromStacktrace( 2 ) );\n\t\t\t} else {\n\t\t\t\tthrow new Error( \"Test timed out\" );\n\t\t\t}\n\t\t\tresumeProcessing();\n\t\t}, config.testTimeout );\n\t}\n}\n\nfunction resumeProcessing() {\n\trunStarted = true;\n\n\t// A slight delay to allow this iteration of the event loop to finish (more assertions, etc.)\n\tif ( defined.setTimeout ) {\n\t\tsetTimeout( function() {\n\t\t\tif ( config.current && config.current.semaphore > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( config.timeout ) {\n\t\t\t\tclearTimeout( config.timeout );\n\t\t\t}\n\n\t\t\tbegin();\n\t\t}, 13 );\n\t} else {\n\t\tbegin();\n\t}\n}\n\nfunction done() {\n\tvar runtime, passed;\n\n\tconfig.autorun = true;\n\n\t// Log the last module results\n\tif ( config.previousModule ) {\n\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\tname: config.previousModule.name,\n\t\t\ttests: config.previousModule.tests,\n\t\t\tfailed: config.moduleStats.bad,\n\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\ttotal: config.moduleStats.all,\n\t\t\truntime: now() - config.moduleStats.started\n\t\t} );\n\t}\n\tdelete config.previousModule;\n\n\truntime = now() - config.started;\n\tpassed = config.stats.all - config.stats.bad;\n\n\trunLoggingCallbacks( \"done\", {\n\t\tfailed: config.stats.bad,\n\t\tpassed: passed,\n\t\ttotal: config.stats.all,\n\t\truntime: runtime\n\t} );\n}\n\nfunction setHook( module, hookName ) {\n\tif ( module.testEnvironment === undefined ) {\n\t\tmodule.testEnvironment = {};\n\t}\n\n\treturn function( callback ) {\n\t\tmodule.testEnvironment[ hookName ] = callback;\n\t};\n}\n\nvar focused = false;\nvar priorityCount = 0;\nvar unitSampler;\n\nfunction Test( settings ) {\n\tvar i, l;\n\n\t++Test.count;\n\n\textend( this, settings );\n\tthis.assertions = [];\n\tthis.semaphore = 0;\n\tthis.usedAsync = false;\n\tthis.module = config.currentModule;\n\tthis.stack = sourceFromStacktrace( 3 );\n\n\t// Register unique strings\n\tfor ( i = 0, l = this.module.tests; i < l.length; i++ ) {\n\t\tif ( this.module.tests[ i ].name === this.testName ) {\n\t\t\tthis.testName += \" \";\n\t\t}\n\t}\n\n\tthis.testId = generateHash( this.module.name, this.testName );\n\n\tthis.module.tests.push( {\n\t\tname: this.testName,\n\t\ttestId: this.testId\n\t} );\n\n\tif ( settings.skip ) {\n\n\t\t// Skipped tests will fully ignore any sent callback\n\t\tthis.callback = function() {};\n\t\tthis.async = false;\n\t\tthis.expected = 0;\n\t} else {\n\t\tthis.assert = new Assert( this );\n\t}\n}\n\nTest.count = 0;\n\nTest.prototype = {\n\tbefore: function() {\n\t\tif (\n\n\t\t\t// Emit moduleStart when we're switching from one module to another\n\t\t\tthis.module !== config.previousModule ||\n\n\t\t\t\t// They could be equal (both undefined) but if the previousModule property doesn't\n\t\t\t\t// yet exist it means this is the first test in a suite that isn't wrapped in a\n\t\t\t\t// module, in which case we'll just emit a moduleStart event for 'undefined'.\n\t\t\t\t// Without this, reporters can get testStart before moduleStart  which is a problem.\n\t\t\t\t!hasOwn.call( config, \"previousModule\" )\n\t\t) {\n\t\t\tif ( hasOwn.call( config, \"previousModule\" ) ) {\n\t\t\t\trunLoggingCallbacks( \"moduleDone\", {\n\t\t\t\t\tname: config.previousModule.name,\n\t\t\t\t\ttests: config.previousModule.tests,\n\t\t\t\t\tfailed: config.moduleStats.bad,\n\t\t\t\t\tpassed: config.moduleStats.all - config.moduleStats.bad,\n\t\t\t\t\ttotal: config.moduleStats.all,\n\t\t\t\t\truntime: now() - config.moduleStats.started\n\t\t\t\t} );\n\t\t\t}\n\t\t\tconfig.previousModule = this.module;\n\t\t\tconfig.moduleStats = { all: 0, bad: 0, started: now() };\n\t\t\trunLoggingCallbacks( \"moduleStart\", {\n\t\t\t\tname: this.module.name,\n\t\t\t\ttests: this.module.tests\n\t\t\t} );\n\t\t}\n\n\t\tconfig.current = this;\n\n\t\tif ( this.module.testEnvironment ) {\n\t\t\tdelete this.module.testEnvironment.beforeEach;\n\t\t\tdelete this.module.testEnvironment.afterEach;\n\t\t}\n\t\tthis.testEnvironment = extend( {}, this.module.testEnvironment );\n\n\t\tthis.started = now();\n\t\trunLoggingCallbacks( \"testStart\", {\n\t\t\tname: this.testName,\n\t\t\tmodule: this.module.name,\n\t\t\ttestId: this.testId\n\t\t} );\n\n\t\tif ( !config.pollution ) {\n\t\t\tsaveGlobal();\n\t\t}\n\t},\n\n\trun: function() {\n\t\tvar promise;\n\n\t\tconfig.current = this;\n\n\t\tif ( this.async ) {\n\t\t\tQUnit.stop();\n\t\t}\n\n\t\tthis.callbackStarted = now();\n\n\t\tif ( config.notrycatch ) {\n\t\t\trunTest( this );\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\trunTest( this );\n\t\t} catch ( e ) {\n\t\t\tthis.pushFailure( \"Died on test #\" + ( this.assertions.length + 1 ) + \" \" +\n\t\t\t\tthis.stack + \": \" + ( e.message || e ), extractStacktrace( e, 0 ) );\n\n\t\t\t// Else next test will carry the responsibility\n\t\t\tsaveGlobal();\n\n\t\t\t// Restart the tests if they're blocking\n\t\t\tif ( config.blocking ) {\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t}\n\n\t\tfunction runTest( test ) {\n\t\t\tpromise = test.callback.call( test.testEnvironment, test.assert );\n\t\t\ttest.resolvePromise( promise );\n\t\t}\n\t},\n\n\tafter: function() {\n\t\tcheckPollution();\n\t},\n\n\tqueueHook: function( hook, hookName ) {\n\t\tvar promise,\n\t\t\ttest = this;\n\t\treturn function runHook() {\n\t\t\tconfig.current = test;\n\t\t\tif ( config.notrycatch ) {\n\t\t\t\tcallHook();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tcallHook();\n\t\t\t} catch ( error ) {\n\t\t\t\ttest.pushFailure( hookName + \" failed on \" + test.testName + \": \" +\n\t\t\t\t( error.message || error ), extractStacktrace( error, 0 ) );\n\t\t\t}\n\n\t\t\tfunction callHook() {\n\t\t\t\tpromise = hook.call( test.testEnvironment, test.assert );\n\t\t\t\ttest.resolvePromise( promise, hookName );\n\t\t\t}\n\t\t};\n\t},\n\n\t// Currently only used for module level hooks, can be used to add global level ones\n\thooks: function( handler ) {\n\t\tvar hooks = [];\n\n\t\tfunction processHooks( test, module ) {\n\t\t\tif ( module.parentModule ) {\n\t\t\t\tprocessHooks( test, module.parentModule );\n\t\t\t}\n\t\t\tif ( module.testEnvironment &&\n\t\t\t\tQUnit.objectType( module.testEnvironment[ handler ] ) === \"function\" ) {\n\t\t\t\thooks.push( test.queueHook( module.testEnvironment[ handler ], handler ) );\n\t\t\t}\n\t\t}\n\n\t\t// Hooks are ignored on skipped tests\n\t\tif ( !this.skip ) {\n\t\t\tprocessHooks( this, this.module );\n\t\t}\n\t\treturn hooks;\n\t},\n\n\tfinish: function() {\n\t\tconfig.current = this;\n\t\tif ( config.requireExpects && this.expected === null ) {\n\t\t\tthis.pushFailure( \"Expected number of assertions to be defined, but expect() was \" +\n\t\t\t\t\"not called.\", this.stack );\n\t\t} else if ( this.expected !== null && this.expected !== this.assertions.length ) {\n\t\t\tthis.pushFailure( \"Expected \" + this.expected + \" assertions, but \" +\n\t\t\t\tthis.assertions.length + \" were run\", this.stack );\n\t\t} else if ( this.expected === null && !this.assertions.length ) {\n\t\t\tthis.pushFailure( \"Expected at least one assertion, but none were run - call \" +\n\t\t\t\t\"expect(0) to accept zero assertions.\", this.stack );\n\t\t}\n\n\t\tvar i,\n\t\t\tbad = 0;\n\n\t\tthis.runtime = now() - this.started;\n\t\tconfig.stats.all += this.assertions.length;\n\t\tconfig.moduleStats.all += this.assertions.length;\n\n\t\tfor ( i = 0; i < this.assertions.length; i++ ) {\n\t\t\tif ( !this.assertions[ i ].result ) {\n\t\t\t\tbad++;\n\t\t\t\tconfig.stats.bad++;\n\t\t\t\tconfig.moduleStats.bad++;\n\t\t\t}\n\t\t}\n\n\t\trunLoggingCallbacks( \"testDone\", {\n\t\t\tname: this.testName,\n\t\t\tmodule: this.module.name,\n\t\t\tskipped: !!this.skip,\n\t\t\tfailed: bad,\n\t\t\tpassed: this.assertions.length - bad,\n\t\t\ttotal: this.assertions.length,\n\t\t\truntime: this.runtime,\n\n\t\t\t// HTML Reporter use\n\t\t\tassertions: this.assertions,\n\t\t\ttestId: this.testId,\n\n\t\t\t// Source of Test\n\t\t\tsource: this.stack,\n\n\t\t\t// DEPRECATED: this property will be removed in 2.0.0, use runtime instead\n\t\t\tduration: this.runtime\n\t\t} );\n\n\t\t// QUnit.reset() is deprecated and will be replaced for a new\n\t\t// fixture reset function on QUnit 2.0/2.1.\n\t\t// It's still called here for backwards compatibility handling\n\t\tQUnit.reset();\n\n\t\tconfig.current = undefined;\n\t},\n\n\tqueue: function() {\n\t\tvar priority,\n\t\t\ttest = this;\n\n\t\tif ( !this.valid() ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction run() {\n\n\t\t\t// Each of these can by async\n\t\t\tsynchronize( [\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.before();\n\t\t\t\t},\n\n\t\t\t\ttest.hooks( \"beforeEach\" ),\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.run();\n\t\t\t\t},\n\n\t\t\t\ttest.hooks( \"afterEach\" ).reverse(),\n\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.after();\n\t\t\t\t},\n\t\t\t\tfunction() {\n\t\t\t\t\ttest.finish();\n\t\t\t\t}\n\t\t\t] );\n\t\t}\n\n\t\t// Prioritize previously failed tests, detected from sessionStorage\n\t\tpriority = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t\t+sessionStorage.getItem( \"qunit-test-\" + this.module.name + \"-\" + this.testName );\n\n\t\treturn synchronize( run, priority, config.seed );\n\t},\n\n\tpushResult: function( resultInfo ) {\n\n\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\tvar source,\n\t\t\tdetails = {\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tname: this.testName,\n\t\t\t\tresult: resultInfo.result,\n\t\t\t\tmessage: resultInfo.message,\n\t\t\t\tactual: resultInfo.actual,\n\t\t\t\texpected: resultInfo.expected,\n\t\t\t\ttestId: this.testId,\n\t\t\t\tnegative: resultInfo.negative || false,\n\t\t\t\truntime: now() - this.started\n\t\t\t};\n\n\t\tif ( !resultInfo.result ) {\n\t\t\tsource = sourceFromStacktrace();\n\n\t\t\tif ( source ) {\n\t\t\t\tdetails.source = source;\n\t\t\t}\n\t\t}\n\n\t\trunLoggingCallbacks( \"log\", details );\n\n\t\tthis.assertions.push( {\n\t\t\tresult: !!resultInfo.result,\n\t\t\tmessage: resultInfo.message\n\t\t} );\n\t},\n\n\tpushFailure: function( message, source, actual ) {\n\t\tif ( !( this instanceof Test ) ) {\n\t\t\tthrow new Error( \"pushFailure() assertion outside test context, was \" +\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t}\n\n\t\tvar details = {\n\t\t\t\tmodule: this.module.name,\n\t\t\t\tname: this.testName,\n\t\t\t\tresult: false,\n\t\t\t\tmessage: message || \"error\",\n\t\t\t\tactual: actual || null,\n\t\t\t\ttestId: this.testId,\n\t\t\t\truntime: now() - this.started\n\t\t\t};\n\n\t\tif ( source ) {\n\t\t\tdetails.source = source;\n\t\t}\n\n\t\trunLoggingCallbacks( \"log\", details );\n\n\t\tthis.assertions.push( {\n\t\t\tresult: false,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tresolvePromise: function( promise, phase ) {\n\t\tvar then, message,\n\t\t\ttest = this;\n\t\tif ( promise != null ) {\n\t\t\tthen = promise.then;\n\t\t\tif ( QUnit.objectType( then ) === \"function\" ) {\n\t\t\t\tQUnit.stop();\n\t\t\t\tthen.call(\n\t\t\t\t\tpromise,\n\t\t\t\t\tfunction() { QUnit.start(); },\n\t\t\t\t\tfunction( error ) {\n\t\t\t\t\t\tmessage = \"Promise rejected \" +\n\t\t\t\t\t\t\t( !phase ? \"during\" : phase.replace( /Each$/, \"\" ) ) +\n\t\t\t\t\t\t\t\" \" + test.testName + \": \" + ( error.message || error );\n\t\t\t\t\t\ttest.pushFailure( message, extractStacktrace( error, 0 ) );\n\n\t\t\t\t\t\t// Else next test will carry the responsibility\n\t\t\t\t\t\tsaveGlobal();\n\n\t\t\t\t\t\t// Unblock\n\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t},\n\n\tvalid: function() {\n\t\tvar filter = config.filter,\n\t\t\tregexFilter = /^(!?)\\/([\\w\\W]*)\\/(i?$)/.exec( filter ),\n\t\t\tmodule = config.module && config.module.toLowerCase(),\n\t\t\tfullName = ( this.module.name + \": \" + this.testName );\n\n\t\tfunction moduleChainNameMatch( testModule ) {\n\t\t\tvar testModuleName = testModule.name ? testModule.name.toLowerCase() : null;\n\t\t\tif ( testModuleName === module ) {\n\t\t\t\treturn true;\n\t\t\t} else if ( testModule.parentModule ) {\n\t\t\t\treturn moduleChainNameMatch( testModule.parentModule );\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfunction moduleChainIdMatch( testModule ) {\n\t\t\treturn inArray( testModule.moduleId, config.moduleId ) > -1 ||\n\t\t\t\ttestModule.parentModule && moduleChainIdMatch( testModule.parentModule );\n\t\t}\n\n\t\t// Internally-generated tests are always valid\n\t\tif ( this.callback && this.callback.validTest ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif ( config.moduleId && config.moduleId.length > 0 &&\n\t\t\t!moduleChainIdMatch( this.module ) ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( config.testId && config.testId.length > 0 &&\n\t\t\tinArray( this.testId, config.testId ) < 0 ) {\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( module && !moduleChainNameMatch( this.module ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( !filter ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn regexFilter ?\n\t\t\tthis.regexFilter( !!regexFilter[ 1 ], regexFilter[ 2 ], regexFilter[ 3 ], fullName ) :\n\t\t\tthis.stringFilter( filter, fullName );\n\t},\n\n\tregexFilter: function( exclude, pattern, flags, fullName ) {\n\t\tvar regex = new RegExp( pattern, flags );\n\t\tvar match = regex.test( fullName );\n\n\t\treturn match !== exclude;\n\t},\n\n\tstringFilter: function( filter, fullName ) {\n\t\tfilter = filter.toLowerCase();\n\t\tfullName = fullName.toLowerCase();\n\n\t\tvar include = filter.charAt( 0 ) !== \"!\";\n\t\tif ( !include ) {\n\t\t\tfilter = filter.slice( 1 );\n\t\t}\n\n\t\t// If the filter matches, we need to honour include\n\t\tif ( fullName.indexOf( filter ) !== -1 ) {\n\t\t\treturn include;\n\t\t}\n\n\t\t// Otherwise, do the opposite\n\t\treturn !include;\n\t}\n};\n\n// Resets the test setup. Useful for tests that modify the DOM.\n/*\nDEPRECATED: Use multiple tests instead of resetting inside a test.\nUse testStart or testDone for custom cleanup.\nThis method will throw an error in 2.0, and will be removed in 2.1\n*/\nQUnit.reset = function() {\n\n\t// Return on non-browser environments\n\t// This is necessary to not break on node tests\n\tif ( !defined.document ) {\n\t\treturn;\n\t}\n\n\tvar fixture = defined.document && document.getElementById &&\n\t\t\tdocument.getElementById( \"qunit-fixture\" );\n\n\tif ( fixture ) {\n\t\tfixture.innerHTML = config.fixture;\n\t}\n};\n\nQUnit.pushFailure = function() {\n\tif ( !QUnit.config.current ) {\n\t\tthrow new Error( \"pushFailure() assertion outside test context, in \" +\n\t\t\tsourceFromStacktrace( 2 ) );\n\t}\n\n\t// Gets current test obj\n\tvar currentTest = QUnit.config.current;\n\n\treturn currentTest.pushFailure.apply( currentTest, arguments );\n};\n\n// Based on Java's String.hashCode, a simple but not\n// rigorously collision resistant hashing function\nfunction generateHash( module, testName ) {\n\tvar hex,\n\t\ti = 0,\n\t\thash = 0,\n\t\tstr = module + \"\\x1C\" + testName,\n\t\tlen = str.length;\n\n\tfor ( ; i < len; i++ ) {\n\t\thash  = ( ( hash << 5 ) - hash ) + str.charCodeAt( i );\n\t\thash |= 0;\n\t}\n\n\t// Convert the possibly negative integer hash code into an 8 character hex string, which isn't\n\t// strictly necessary but increases user understanding that the id is a SHA-like hash\n\thex = ( 0x100000000 + hash ).toString( 16 );\n\tif ( hex.length < 8 ) {\n\t\thex = \"0000000\" + hex;\n\t}\n\n\treturn hex.slice( -8 );\n}\n\nfunction synchronize( callback, priority, seed ) {\n\tvar last = !priority,\n\t\tindex;\n\n\tif ( QUnit.objectType( callback ) === \"array\" ) {\n\t\twhile ( callback.length ) {\n\t\t\tsynchronize( callback.shift() );\n\t\t}\n\t\treturn;\n\t}\n\n\tif ( priority ) {\n\t\tconfig.queue.splice( priorityCount++, 0, callback );\n\t} else if ( seed ) {\n\t\tif ( !unitSampler ) {\n\t\t\tunitSampler = unitSamplerGenerator( seed );\n\t\t}\n\n\t\t// Insert into a random position after all priority items\n\t\tindex = Math.floor( unitSampler() * ( config.queue.length - priorityCount + 1 ) );\n\t\tconfig.queue.splice( priorityCount + index, 0, callback );\n\t} else {\n\t\tconfig.queue.push( callback );\n\t}\n\n\tif ( config.autorun && !config.blocking ) {\n\t\tprocess( last );\n\t}\n}\n\nfunction unitSamplerGenerator( seed ) {\n\n\t// 32-bit xorshift, requires only a nonzero seed\n\t// http://excamera.com/sphinx/article-xorshift.html\n\tvar sample = parseInt( generateHash( seed ), 16 ) || -1;\n\treturn function() {\n\t\tsample ^= sample << 13;\n\t\tsample ^= sample >>> 17;\n\t\tsample ^= sample << 5;\n\n\t\t// ECMAScript has no unsigned number type\n\t\tif ( sample < 0 ) {\n\t\t\tsample += 0x100000000;\n\t\t}\n\n\t\treturn sample / 0x100000000;\n\t};\n}\n\nfunction saveGlobal() {\n\tconfig.pollution = [];\n\n\tif ( config.noglobals ) {\n\t\tfor ( var key in global ) {\n\t\t\tif ( hasOwn.call( global, key ) ) {\n\n\t\t\t\t// In Opera sometimes DOM element ids show up here, ignore them\n\t\t\t\tif ( /^qunit-test-output/.test( key ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconfig.pollution.push( key );\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction checkPollution() {\n\tvar newGlobals,\n\t\tdeletedGlobals,\n\t\told = config.pollution;\n\n\tsaveGlobal();\n\n\tnewGlobals = diff( config.pollution, old );\n\tif ( newGlobals.length > 0 ) {\n\t\tQUnit.pushFailure( \"Introduced global variable(s): \" + newGlobals.join( \", \" ) );\n\t}\n\n\tdeletedGlobals = diff( old, config.pollution );\n\tif ( deletedGlobals.length > 0 ) {\n\t\tQUnit.pushFailure( \"Deleted global variable(s): \" + deletedGlobals.join( \", \" ) );\n\t}\n}\n\n// Will be exposed as QUnit.asyncTest\nfunction asyncTest( testName, expected, callback ) {\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tQUnit.test( testName, expected, callback, true );\n}\n\n// Will be exposed as QUnit.test\nfunction test( testName, expected, callback, async ) {\n\tif ( focused )  { return; }\n\n\tvar newTest;\n\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tnewTest = new Test( {\n\t\ttestName: testName,\n\t\texpected: expected,\n\t\tasync: async,\n\t\tcallback: callback\n\t} );\n\n\tnewTest.queue();\n}\n\n// Will be exposed as QUnit.skip\nfunction skip( testName ) {\n\tif ( focused )  { return; }\n\n\tvar test = new Test( {\n\t\ttestName: testName,\n\t\tskip: true\n\t} );\n\n\ttest.queue();\n}\n\n// Will be exposed as QUnit.only\nfunction only( testName, expected, callback, async ) {\n\tvar newTest;\n\n\tif ( focused )  { return; }\n\n\tQUnit.config.queue.length = 0;\n\tfocused = true;\n\n\tif ( arguments.length === 2 ) {\n\t\tcallback = expected;\n\t\texpected = null;\n\t}\n\n\tnewTest = new Test( {\n\t\ttestName: testName,\n\t\texpected: expected,\n\t\tasync: async,\n\t\tcallback: callback\n\t} );\n\n\tnewTest.queue();\n}\n\nfunction Assert( testContext ) {\n\tthis.test = testContext;\n}\n\n// Assert helpers\nQUnit.assert = Assert.prototype = {\n\n\t// Specify the number of expected assertions to guarantee that failed test\n\t// (no assertions are run at all) don't slip through.\n\texpect: function( asserts ) {\n\t\tif ( arguments.length === 1 ) {\n\t\t\tthis.test.expected = asserts;\n\t\t} else {\n\t\t\treturn this.test.expected;\n\t\t}\n\t},\n\n\t// Increment this Test's semaphore counter, then return a function that\n\t// decrements that counter a maximum of once.\n\tasync: function( count ) {\n\t\tvar test = this.test,\n\t\t\tpopped = false,\n\t\t\tacceptCallCount = count;\n\n\t\tif ( typeof acceptCallCount === \"undefined\" ) {\n\t\t\tacceptCallCount = 1;\n\t\t}\n\n\t\ttest.semaphore += 1;\n\t\ttest.usedAsync = true;\n\t\tpauseProcessing();\n\n\t\treturn function done() {\n\n\t\t\tif ( popped ) {\n\t\t\t\ttest.pushFailure( \"Too many calls to the `assert.async` callback\",\n\t\t\t\t\tsourceFromStacktrace( 2 ) );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tacceptCallCount -= 1;\n\t\t\tif ( acceptCallCount > 0 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttest.semaphore -= 1;\n\t\t\tpopped = true;\n\t\t\tresumeProcessing();\n\t\t};\n\t},\n\n\t// Exports test.push() to the user API\n\t// Alias of pushResult.\n\tpush: function( result, actual, expected, message, negative ) {\n\t\tvar currentAssert = this instanceof Assert ? this : QUnit.config.current.assert;\n\t\treturn currentAssert.pushResult( {\n\t\t\tresult: result,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: negative\n\t\t} );\n\t},\n\n\tpushResult: function( resultInfo ) {\n\n\t\t// Destructure of resultInfo = { result, actual, expected, message, negative }\n\t\tvar assert = this,\n\t\t\tcurrentTest = ( assert instanceof Assert && assert.test ) || QUnit.config.current;\n\n\t\t// Backwards compatibility fix.\n\t\t// Allows the direct use of global exported assertions and QUnit.assert.*\n\t\t// Although, it's use is not recommended as it can leak assertions\n\t\t// to other tests from async tests, because we only get a reference to the current test,\n\t\t// not exactly the test where assertion were intended to be called.\n\t\tif ( !currentTest ) {\n\t\t\tthrow new Error( \"assertion outside test context, in \" + sourceFromStacktrace( 2 ) );\n\t\t}\n\n\t\tif ( currentTest.usedAsync === true && currentTest.semaphore === 0 ) {\n\t\t\tcurrentTest.pushFailure( \"Assertion after the final `assert.async` was resolved\",\n\t\t\t\tsourceFromStacktrace( 2 ) );\n\n\t\t\t// Allow this assertion to continue running anyway...\n\t\t}\n\n\t\tif ( !( assert instanceof Assert ) ) {\n\t\t\tassert = currentTest.assert;\n\t\t}\n\n\t\treturn assert.test.pushResult( resultInfo );\n\t},\n\n\tok: function( result, message ) {\n\t\tmessage = message || ( result ? \"okay\" : \"failed, expected argument to be truthy, was: \" +\n\t\t\tQUnit.dump.parse( result ) );\n\t\tthis.pushResult( {\n\t\t\tresult: !!result,\n\t\t\tactual: result,\n\t\t\texpected: true,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotOk: function( result, message ) {\n\t\tmessage = message || ( !result ? \"okay\" : \"failed, expected argument to be falsy, was: \" +\n\t\t\tQUnit.dump.parse( result ) );\n\t\tthis.pushResult( {\n\t\t\tresult: !result,\n\t\t\tactual: result,\n\t\t\texpected: false,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tequal: function( actual, expected, message ) {\n\t\t/*jshint eqeqeq:false */\n\t\tthis.pushResult( {\n\t\t\tresult: expected == actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotEqual: function( actual, expected, message ) {\n\t\t/*jshint eqeqeq:false */\n\t\tthis.pushResult( {\n\t\t\tresult: expected != actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tpropEqual: function( actual, expected, message ) {\n\t\tactual = objectValues( actual );\n\t\texpected = objectValues( expected );\n\t\tthis.pushResult( {\n\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotPropEqual: function( actual, expected, message ) {\n\t\tactual = objectValues( actual );\n\t\texpected = objectValues( expected );\n\t\tthis.pushResult( {\n\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tdeepEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotDeepEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: !QUnit.equiv( actual, expected ),\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\tstrictEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: expected === actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message\n\t\t} );\n\t},\n\n\tnotStrictEqual: function( actual, expected, message ) {\n\t\tthis.pushResult( {\n\t\t\tresult: expected !== actual,\n\t\t\tactual: actual,\n\t\t\texpected: expected,\n\t\t\tmessage: message,\n\t\t\tnegative: true\n\t\t} );\n\t},\n\n\t\"throws\": function( block, expected, message ) {\n\t\tvar actual, expectedType,\n\t\t\texpectedOutput = expected,\n\t\t\tok = false,\n\t\t\tcurrentTest = ( this instanceof Assert && this.test ) || QUnit.config.current;\n\n\t\t// 'expected' is optional unless doing string comparison\n\t\tif ( message == null && typeof expected === \"string\" ) {\n\t\t\tmessage = expected;\n\t\t\texpected = null;\n\t\t}\n\n\t\tcurrentTest.ignoreGlobalErrors = true;\n\t\ttry {\n\t\t\tblock.call( currentTest.testEnvironment );\n\t\t} catch ( e ) {\n\t\t\tactual = e;\n\t\t}\n\t\tcurrentTest.ignoreGlobalErrors = false;\n\n\t\tif ( actual ) {\n\t\t\texpectedType = QUnit.objectType( expected );\n\n\t\t\t// We don't want to validate thrown error\n\t\t\tif ( !expected ) {\n\t\t\t\tok = true;\n\t\t\t\texpectedOutput = null;\n\n\t\t\t// Expected is a regexp\n\t\t\t} else if ( expectedType === \"regexp\" ) {\n\t\t\t\tok = expected.test( errorString( actual ) );\n\n\t\t\t// Expected is a string\n\t\t\t} else if ( expectedType === \"string\" ) {\n\t\t\t\tok = expected === errorString( actual );\n\n\t\t\t// Expected is a constructor, maybe an Error constructor\n\t\t\t} else if ( expectedType === \"function\" && actual instanceof expected ) {\n\t\t\t\tok = true;\n\n\t\t\t// Expected is an Error object\n\t\t\t} else if ( expectedType === \"object\" ) {\n\t\t\t\tok = actual instanceof expected.constructor &&\n\t\t\t\t\tactual.name === expected.name &&\n\t\t\t\t\tactual.message === expected.message;\n\n\t\t\t// Expected is a validation function which returns true if validation passed\n\t\t\t} else if ( expectedType === \"function\" && expected.call( {}, actual ) === true ) {\n\t\t\t\texpectedOutput = null;\n\t\t\t\tok = true;\n\t\t\t}\n\t\t}\n\n\t\tcurrentTest.assert.pushResult( {\n\t\t\tresult: ok,\n\t\t\tactual: actual,\n\t\t\texpected: expectedOutput,\n\t\t\tmessage: message\n\t\t} );\n\t}\n};\n\n// Provide an alternative to assert.throws(), for environments that consider throws a reserved word\n// Known to us are: Closure Compiler, Narwhal\n( function() {\n\t/*jshint sub:true */\n\tAssert.prototype.raises = Assert.prototype [ \"throws\" ]; //jscs:ignore requireDotNotation\n}() );\n\nfunction errorString( error ) {\n\tvar name, message,\n\t\tresultErrorString = error.toString();\n\tif ( resultErrorString.substring( 0, 7 ) === \"[object\" ) {\n\t\tname = error.name ? error.name.toString() : \"Error\";\n\t\tmessage = error.message ? error.message.toString() : \"\";\n\t\tif ( name && message ) {\n\t\t\treturn name + \": \" + message;\n\t\t} else if ( name ) {\n\t\t\treturn name;\n\t\t} else if ( message ) {\n\t\t\treturn message;\n\t\t} else {\n\t\t\treturn \"Error\";\n\t\t}\n\t} else {\n\t\treturn resultErrorString;\n\t}\n}\n\n// Test for equality any JavaScript type.\n// Author: Philippe Rathé <prathe@gmail.com>\nQUnit.equiv = ( function() {\n\n\t// Stack to decide between skip/abort functions\n\tvar callers = [];\n\n\t// Stack to avoiding loops from circular referencing\n\tvar parents = [];\n\tvar parentsB = [];\n\n\tvar getProto = Object.getPrototypeOf || function( obj ) {\n\n\t\t/*jshint proto: true */\n\t\treturn obj.__proto__;\n\t};\n\n\tfunction useStrictEquality( b, a ) {\n\n\t\t// To catch short annotation VS 'new' annotation of a declaration. e.g.:\n\t\t// `var i = 1;`\n\t\t// `var j = new Number(1);`\n\t\tif ( typeof a === \"object\" ) {\n\t\t\ta = a.valueOf();\n\t\t}\n\t\tif ( typeof b === \"object\" ) {\n\t\t\tb = b.valueOf();\n\t\t}\n\n\t\treturn a === b;\n\t}\n\n\tfunction compareConstructors( a, b ) {\n\t\tvar protoA = getProto( a );\n\t\tvar protoB = getProto( b );\n\n\t\t// Comparing constructors is more strict than using `instanceof`\n\t\tif ( a.constructor === b.constructor ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ref #851\n\t\t// If the obj prototype descends from a null constructor, treat it\n\t\t// as a null prototype.\n\t\tif ( protoA && protoA.constructor === null ) {\n\t\t\tprotoA = null;\n\t\t}\n\t\tif ( protoB && protoB.constructor === null ) {\n\t\t\tprotoB = null;\n\t\t}\n\n\t\t// Allow objects with no prototype to be equivalent to\n\t\t// objects with Object as their constructor.\n\t\tif ( ( protoA === null && protoB === Object.prototype ) ||\n\t\t\t\t( protoB === null && protoA === Object.prototype ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction getRegExpFlags( regexp ) {\n\t\treturn \"flags\" in regexp ? regexp.flags : regexp.toString().match( /[gimuy]*$/ )[ 0 ];\n\t}\n\n\tvar callbacks = {\n\t\t\"string\": useStrictEquality,\n\t\t\"boolean\": useStrictEquality,\n\t\t\"number\": useStrictEquality,\n\t\t\"null\": useStrictEquality,\n\t\t\"undefined\": useStrictEquality,\n\t\t\"symbol\": useStrictEquality,\n\t\t\"date\": useStrictEquality,\n\n\t\t\"nan\": function() {\n\t\t\treturn true;\n\t\t},\n\n\t\t\"regexp\": function( b, a ) {\n\t\t\treturn a.source === b.source &&\n\n\t\t\t\t// Include flags in the comparison\n\t\t\t\tgetRegExpFlags( a ) === getRegExpFlags( b );\n\t\t},\n\n\t\t// - skip when the property is a method of an instance (OOP)\n\t\t// - abort otherwise,\n\t\t// initial === would have catch identical references anyway\n\t\t\"function\": function() {\n\t\t\tvar caller = callers[ callers.length - 1 ];\n\t\t\treturn caller !== Object && typeof caller !== \"undefined\";\n\t\t},\n\n\t\t\"array\": function( b, a ) {\n\t\t\tvar i, j, len, loop, aCircular, bCircular;\n\n\t\t\tlen = a.length;\n\t\t\tif ( len !== b.length ) {\n\n\t\t\t\t// Safe and faster\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Track reference to avoid circular references\n\t\t\tparents.push( a );\n\t\t\tparentsB.push( b );\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tloop = false;\n\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparents.pop();\n\t\t\t\t\t\t\tparentsB.pop();\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\tparents.pop();\n\t\t\t\t\tparentsB.pop();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparents.pop();\n\t\t\tparentsB.pop();\n\t\t\treturn true;\n\t\t},\n\n\t\t\"set\": function( b, a ) {\n\t\t\tvar innerEq,\n\t\t\t\touterEq = true;\n\n\t\t\tif ( a.size !== b.size ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ta.forEach( function( aVal ) {\n\t\t\t\tinnerEq = false;\n\n\t\t\t\tb.forEach( function( bVal ) {\n\t\t\t\t\tif ( innerEquiv( bVal, aVal ) ) {\n\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\touterEq = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn outerEq;\n\t\t},\n\n\t\t\"map\": function( b, a ) {\n\t\t\tvar innerEq,\n\t\t\t\touterEq = true;\n\n\t\t\tif ( a.size !== b.size ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\ta.forEach( function( aVal, aKey ) {\n\t\t\t\tinnerEq = false;\n\n\t\t\t\tb.forEach( function( bVal, bKey ) {\n\t\t\t\t\tif ( innerEquiv( [ bVal, bKey ], [ aVal, aKey ] ) ) {\n\t\t\t\t\t\tinnerEq = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tif ( !innerEq ) {\n\t\t\t\t\touterEq = false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturn outerEq;\n\t\t},\n\n\t\t\"object\": function( b, a ) {\n\t\t\tvar i, j, loop, aCircular, bCircular;\n\n\t\t\t// Default to true\n\t\t\tvar eq = true;\n\t\t\tvar aProperties = [];\n\t\t\tvar bProperties = [];\n\n\t\t\tif ( compareConstructors( a, b ) === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Stack constructor before traversing properties\n\t\t\tcallers.push( a.constructor );\n\n\t\t\t// Track reference to avoid circular references\n\t\t\tparents.push( a );\n\t\t\tparentsB.push( b );\n\n\t\t\t// Be strict: don't ensure hasOwnProperty and go deep\n\t\t\tfor ( i in a ) {\n\t\t\t\tloop = false;\n\t\t\t\tfor ( j = 0; j < parents.length; j++ ) {\n\t\t\t\t\taCircular = parents[ j ] === a[ i ];\n\t\t\t\t\tbCircular = parentsB[ j ] === b[ i ];\n\t\t\t\t\tif ( aCircular || bCircular ) {\n\t\t\t\t\t\tif ( a[ i ] === b[ i ] || aCircular && bCircular ) {\n\t\t\t\t\t\t\tloop = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teq = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\taProperties.push( i );\n\t\t\t\tif ( !loop && !innerEquiv( a[ i ], b[ i ] ) ) {\n\t\t\t\t\teq = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparents.pop();\n\t\t\tparentsB.pop();\n\n\t\t\t// Unstack, we are done\n\t\t\tcallers.pop();\n\n\t\t\tfor ( i in b ) {\n\n\t\t\t\t// Collect b's properties\n\t\t\t\tbProperties.push( i );\n\t\t\t}\n\n\t\t\t// Ensures identical properties name\n\t\t\treturn eq && innerEquiv( aProperties.sort(), bProperties.sort() );\n\t\t}\n\t};\n\n\tfunction typeEquiv( a, b ) {\n\t\tvar type = QUnit.objectType( a );\n\t\treturn QUnit.objectType( b ) === type && callbacks[ type ]( b, a );\n\t}\n\n\t// The real equiv function\n\tfunction innerEquiv( a, b ) {\n\n\t\t// We're done when there's nothing more to compare\n\t\tif ( arguments.length < 2 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Require type-specific equality\n\t\treturn ( a === b || typeEquiv( a, b ) ) &&\n\n\t\t\t// ...across all consecutive argument pairs\n\t\t\t( arguments.length === 2 || innerEquiv.apply( this, [].slice.call( arguments, 1 ) ) );\n\t}\n\n\treturn innerEquiv;\n}() );\n\n// Based on jsDump by Ariel Flesler\n// http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html\nQUnit.dump = ( function() {\n\tfunction quote( str ) {\n\t\treturn \"\\\"\" + str.toString().replace( /\\\\/g, \"\\\\\\\\\" ).replace( /\"/g, \"\\\\\\\"\" ) + \"\\\"\";\n\t}\n\tfunction literal( o ) {\n\t\treturn o + \"\";\n\t}\n\tfunction join( pre, arr, post ) {\n\t\tvar s = dump.separator(),\n\t\t\tbase = dump.indent(),\n\t\t\tinner = dump.indent( 1 );\n\t\tif ( arr.join ) {\n\t\t\tarr = arr.join( \",\" + s + inner );\n\t\t}\n\t\tif ( !arr ) {\n\t\t\treturn pre + post;\n\t\t}\n\t\treturn [ pre, inner + arr, base + post ].join( s );\n\t}\n\tfunction array( arr, stack ) {\n\t\tvar i = arr.length,\n\t\t\tret = new Array( i );\n\n\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\treturn \"[object Array]\";\n\t\t}\n\n\t\tthis.up();\n\t\twhile ( i-- ) {\n\t\t\tret[ i ] = this.parse( arr[ i ], undefined, stack );\n\t\t}\n\t\tthis.down();\n\t\treturn join( \"[\", ret, \"]\" );\n\t}\n\n\tvar reName = /^function (\\w+)/,\n\t\tdump = {\n\n\t\t\t// The objType is used mostly internally, you can fix a (custom) type in advance\n\t\t\tparse: function( obj, objType, stack ) {\n\t\t\t\tstack = stack || [];\n\t\t\t\tvar res, parser, parserType,\n\t\t\t\t\tinStack = inArray( obj, stack );\n\n\t\t\t\tif ( inStack !== -1 ) {\n\t\t\t\t\treturn \"recursion(\" + ( inStack - stack.length ) + \")\";\n\t\t\t\t}\n\n\t\t\t\tobjType = objType || this.typeOf( obj  );\n\t\t\t\tparser = this.parsers[ objType ];\n\t\t\t\tparserType = typeof parser;\n\n\t\t\t\tif ( parserType === \"function\" ) {\n\t\t\t\t\tstack.push( obj );\n\t\t\t\t\tres = parser.call( this, obj, stack );\n\t\t\t\t\tstack.pop();\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t\treturn ( parserType === \"string\" ) ? parser : this.parsers.error;\n\t\t\t},\n\t\t\ttypeOf: function( obj ) {\n\t\t\t\tvar type;\n\t\t\t\tif ( obj === null ) {\n\t\t\t\t\ttype = \"null\";\n\t\t\t\t} else if ( typeof obj === \"undefined\" ) {\n\t\t\t\t\ttype = \"undefined\";\n\t\t\t\t} else if ( QUnit.is( \"regexp\", obj ) ) {\n\t\t\t\t\ttype = \"regexp\";\n\t\t\t\t} else if ( QUnit.is( \"date\", obj ) ) {\n\t\t\t\t\ttype = \"date\";\n\t\t\t\t} else if ( QUnit.is( \"function\", obj ) ) {\n\t\t\t\t\ttype = \"function\";\n\t\t\t\t} else if ( obj.setInterval !== undefined &&\n\t\t\t\t\t\tobj.document !== undefined &&\n\t\t\t\t\t\tobj.nodeType === undefined ) {\n\t\t\t\t\ttype = \"window\";\n\t\t\t\t} else if ( obj.nodeType === 9 ) {\n\t\t\t\t\ttype = \"document\";\n\t\t\t\t} else if ( obj.nodeType ) {\n\t\t\t\t\ttype = \"node\";\n\t\t\t\t} else if (\n\n\t\t\t\t\t// Native arrays\n\t\t\t\t\ttoString.call( obj ) === \"[object Array]\" ||\n\n\t\t\t\t\t// NodeList objects\n\t\t\t\t\t( typeof obj.length === \"number\" && obj.item !== undefined &&\n\t\t\t\t\t( obj.length ? obj.item( 0 ) === obj[ 0 ] : ( obj.item( 0 ) === null &&\n\t\t\t\t\tobj[ 0 ] === undefined ) ) )\n\t\t\t\t) {\n\t\t\t\t\ttype = \"array\";\n\t\t\t\t} else if ( obj.constructor === Error.prototype.constructor ) {\n\t\t\t\t\ttype = \"error\";\n\t\t\t\t} else {\n\t\t\t\t\ttype = typeof obj;\n\t\t\t\t}\n\t\t\t\treturn type;\n\t\t\t},\n\n\t\t\tseparator: function() {\n\t\t\t\treturn this.multiline ? this.HTML ? \"<br />\" : \"\\n\" : this.HTML ? \"&#160;\" : \" \";\n\t\t\t},\n\n\t\t\t// Extra can be a number, shortcut for increasing-calling-decreasing\n\t\t\tindent: function( extra ) {\n\t\t\t\tif ( !this.multiline ) {\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\tvar chr = this.indentChar;\n\t\t\t\tif ( this.HTML ) {\n\t\t\t\t\tchr = chr.replace( /\\t/g, \"   \" ).replace( / /g, \"&#160;\" );\n\t\t\t\t}\n\t\t\t\treturn new Array( this.depth + ( extra || 0 ) ).join( chr );\n\t\t\t},\n\t\t\tup: function( a ) {\n\t\t\t\tthis.depth += a || 1;\n\t\t\t},\n\t\t\tdown: function( a ) {\n\t\t\t\tthis.depth -= a || 1;\n\t\t\t},\n\t\t\tsetParser: function( name, parser ) {\n\t\t\t\tthis.parsers[ name ] = parser;\n\t\t\t},\n\n\t\t\t// The next 3 are exposed so you can use them\n\t\t\tquote: quote,\n\t\t\tliteral: literal,\n\t\t\tjoin: join,\n\t\t\tdepth: 1,\n\t\t\tmaxDepth: QUnit.config.maxDepth,\n\n\t\t\t// This is the list of parsers, to modify them, use dump.setParser\n\t\t\tparsers: {\n\t\t\t\twindow: \"[Window]\",\n\t\t\t\tdocument: \"[Document]\",\n\t\t\t\terror: function( error ) {\n\t\t\t\t\treturn \"Error(\\\"\" + error.message + \"\\\")\";\n\t\t\t\t},\n\t\t\t\tunknown: \"[Unknown]\",\n\t\t\t\t\"null\": \"null\",\n\t\t\t\t\"undefined\": \"undefined\",\n\t\t\t\t\"function\": function( fn ) {\n\t\t\t\t\tvar ret = \"function\",\n\n\t\t\t\t\t\t// Functions never have name in IE\n\t\t\t\t\t\tname = \"name\" in fn ? fn.name : ( reName.exec( fn ) || [] )[ 1 ];\n\n\t\t\t\t\tif ( name ) {\n\t\t\t\t\t\tret += \" \" + name;\n\t\t\t\t\t}\n\t\t\t\t\tret += \"(\";\n\n\t\t\t\t\tret = [ ret, dump.parse( fn, \"functionArgs\" ), \"){\" ].join( \"\" );\n\t\t\t\t\treturn join( ret, dump.parse( fn, \"functionCode\" ), \"}\" );\n\t\t\t\t},\n\t\t\t\tarray: array,\n\t\t\t\tnodelist: array,\n\t\t\t\t\"arguments\": array,\n\t\t\t\tobject: function( map, stack ) {\n\t\t\t\t\tvar keys, key, val, i, nonEnumerableProperties,\n\t\t\t\t\t\tret = [];\n\n\t\t\t\t\tif ( dump.maxDepth && dump.depth > dump.maxDepth ) {\n\t\t\t\t\t\treturn \"[object Object]\";\n\t\t\t\t\t}\n\n\t\t\t\t\tdump.up();\n\t\t\t\t\tkeys = [];\n\t\t\t\t\tfor ( key in map ) {\n\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Some properties are not always enumerable on Error objects.\n\t\t\t\t\tnonEnumerableProperties = [ \"message\", \"name\" ];\n\t\t\t\t\tfor ( i in nonEnumerableProperties ) {\n\t\t\t\t\t\tkey = nonEnumerableProperties[ i ];\n\t\t\t\t\t\tif ( key in map && inArray( key, keys ) < 0 ) {\n\t\t\t\t\t\t\tkeys.push( key );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tkeys.sort();\n\t\t\t\t\tfor ( i = 0; i < keys.length; i++ ) {\n\t\t\t\t\t\tkey = keys[ i ];\n\t\t\t\t\t\tval = map[ key ];\n\t\t\t\t\t\tret.push( dump.parse( key, \"key\" ) + \": \" +\n\t\t\t\t\t\t\tdump.parse( val, undefined, stack ) );\n\t\t\t\t\t}\n\t\t\t\t\tdump.down();\n\t\t\t\t\treturn join( \"{\", ret, \"}\" );\n\t\t\t\t},\n\t\t\t\tnode: function( node ) {\n\t\t\t\t\tvar len, i, val,\n\t\t\t\t\t\topen = dump.HTML ? \"&lt;\" : \"<\",\n\t\t\t\t\t\tclose = dump.HTML ? \"&gt;\" : \">\",\n\t\t\t\t\t\ttag = node.nodeName.toLowerCase(),\n\t\t\t\t\t\tret = open + tag,\n\t\t\t\t\t\tattrs = node.attributes;\n\n\t\t\t\t\tif ( attrs ) {\n\t\t\t\t\t\tfor ( i = 0, len = attrs.length; i < len; i++ ) {\n\t\t\t\t\t\t\tval = attrs[ i ].nodeValue;\n\n\t\t\t\t\t\t\t// IE6 includes all attributes in .attributes, even ones not explicitly\n\t\t\t\t\t\t\t// set. Those have values like undefined, null, 0, false, \"\" or\n\t\t\t\t\t\t\t// \"inherit\".\n\t\t\t\t\t\t\tif ( val && val !== \"inherit\" ) {\n\t\t\t\t\t\t\t\tret += \" \" + attrs[ i ].nodeName + \"=\" +\n\t\t\t\t\t\t\t\t\tdump.parse( val, \"attribute\" );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tret += close;\n\n\t\t\t\t\t// Show content of TextNode or CDATASection\n\t\t\t\t\tif ( node.nodeType === 3 || node.nodeType === 4 ) {\n\t\t\t\t\t\tret += node.nodeValue;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ret + open + \"/\" + tag + close;\n\t\t\t\t},\n\n\t\t\t\t// Function calls it internally, it's the arguments part of the function\n\t\t\t\tfunctionArgs: function( fn ) {\n\t\t\t\t\tvar args,\n\t\t\t\t\t\tl = fn.length;\n\n\t\t\t\t\tif ( !l ) {\n\t\t\t\t\t\treturn \"\";\n\t\t\t\t\t}\n\n\t\t\t\t\targs = new Array( l );\n\t\t\t\t\twhile ( l-- ) {\n\n\t\t\t\t\t\t// 97 is 'a'\n\t\t\t\t\t\targs[ l ] = String.fromCharCode( 97 + l );\n\t\t\t\t\t}\n\t\t\t\t\treturn \" \" + args.join( \", \" ) + \" \";\n\t\t\t\t},\n\n\t\t\t\t// Object calls it internally, the key part of an item in a map\n\t\t\t\tkey: quote,\n\n\t\t\t\t// Function calls it internally, it's the content of the function\n\t\t\t\tfunctionCode: \"[code]\",\n\n\t\t\t\t// Node calls it internally, it's a html attribute value\n\t\t\t\tattribute: quote,\n\t\t\t\tstring: quote,\n\t\t\t\tdate: quote,\n\t\t\t\tregexp: literal,\n\t\t\t\tnumber: literal,\n\t\t\t\t\"boolean\": literal\n\t\t\t},\n\n\t\t\t// If true, entities are escaped ( <, >, \\t, space and \\n )\n\t\t\tHTML: false,\n\n\t\t\t// Indentation unit\n\t\t\tindentChar: \"  \",\n\n\t\t\t// If true, items in a collection, are separated by a \\n, else just a space.\n\t\t\tmultiline: true\n\t\t};\n\n\treturn dump;\n}() );\n\n// Back compat\nQUnit.jsDump = QUnit.dump;\n\n// Deprecated\n// Extend assert methods to QUnit for Backwards compatibility\n( function() {\n\tvar i,\n\t\tassertions = Assert.prototype;\n\n\tfunction applyCurrent( current ) {\n\t\treturn function() {\n\t\t\tvar assert = new Assert( QUnit.config.current );\n\t\t\tcurrent.apply( assert, arguments );\n\t\t};\n\t}\n\n\tfor ( i in assertions ) {\n\t\tQUnit[ i ] = applyCurrent( assertions[ i ] );\n\t}\n}() );\n\n// For browser, export only select globals\nif ( defined.document ) {\n\n\t( function() {\n\t\tvar i, l,\n\t\t\tkeys = [\n\t\t\t\t\"test\",\n\t\t\t\t\"module\",\n\t\t\t\t\"expect\",\n\t\t\t\t\"asyncTest\",\n\t\t\t\t\"start\",\n\t\t\t\t\"stop\",\n\t\t\t\t\"ok\",\n\t\t\t\t\"notOk\",\n\t\t\t\t\"equal\",\n\t\t\t\t\"notEqual\",\n\t\t\t\t\"propEqual\",\n\t\t\t\t\"notPropEqual\",\n\t\t\t\t\"deepEqual\",\n\t\t\t\t\"notDeepEqual\",\n\t\t\t\t\"strictEqual\",\n\t\t\t\t\"notStrictEqual\",\n\t\t\t\t\"throws\",\n\t\t\t\t\"raises\"\n\t\t\t];\n\n\t\tfor ( i = 0, l = keys.length; i < l; i++ ) {\n\t\t\twindow[ keys[ i ] ] = QUnit[ keys[ i ] ];\n\t\t}\n\t}() );\n\n\twindow.QUnit = QUnit;\n}\n\n// For nodejs\nif ( typeof module !== \"undefined\" && module && module.exports ) {\n\tmodule.exports = QUnit;\n\n\t// For consistency with CommonJS environments' exports\n\tmodule.exports.QUnit = QUnit;\n}\n\n// For CommonJS with exports, but without module.exports, like Rhino\nif ( typeof exports !== \"undefined\" && exports ) {\n\texports.QUnit = QUnit;\n}\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( function() {\n\t\treturn QUnit;\n\t} );\n\tQUnit.config.autostart = false;\n}\n\n// Get a reference to the global object, like window in browsers\n}( ( function() {\n\treturn this;\n}() ) ) );\n\n( function() {\n\n// Only interact with URLs via window.location\nvar location = typeof window !== \"undefined\" && window.location;\nif ( !location ) {\n\treturn;\n}\n\nvar urlParams = getUrlParams();\n\nQUnit.urlParams = urlParams;\n\n// Match module/test by inclusion in an array\nQUnit.config.moduleId = [].concat( urlParams.moduleId || [] );\nQUnit.config.testId = [].concat( urlParams.testId || [] );\n\n// Exact case-insensitive match of the module name\nQUnit.config.module = urlParams.module;\n\n// Regular expression or case-insenstive substring match against \"moduleName: testName\"\nQUnit.config.filter = urlParams.filter;\n\n// Test order randomization\nif ( urlParams.seed === true ) {\n\n\t// Generate a random seed if the option is specified without a value\n\tQUnit.config.seed = Math.random().toString( 36 ).slice( 2 );\n} else if ( urlParams.seed ) {\n\tQUnit.config.seed = urlParams.seed;\n}\n\n// Add URL-parameter-mapped config values with UI form rendering data\nQUnit.config.urlConfig.push(\n\t{\n\t\tid: \"hidepassed\",\n\t\tlabel: \"Hide passed tests\",\n\t\ttooltip: \"Only show tests and assertions that fail. Stored as query-strings.\"\n\t},\n\t{\n\t\tid: \"noglobals\",\n\t\tlabel: \"Check for Globals\",\n\t\ttooltip: \"Enabling this will test if any test introduces new properties on the \" +\n\t\t\t\"global object (`window` in Browsers). Stored as query-strings.\"\n\t},\n\t{\n\t\tid: \"notrycatch\",\n\t\tlabel: \"No try-catch\",\n\t\ttooltip: \"Enabling this will run tests outside of a try-catch block. Makes debugging \" +\n\t\t\t\"exceptions in IE reasonable. Stored as query-strings.\"\n\t}\n);\n\nQUnit.begin( function() {\n\tvar i, option,\n\t\turlConfig = QUnit.config.urlConfig;\n\n\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\n\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\toption = QUnit.config.urlConfig[ i ];\n\t\tif ( typeof option !== \"string\" ) {\n\t\t\toption = option.id;\n\t\t}\n\n\t\tif ( QUnit.config[ option ] === undefined ) {\n\t\t\tQUnit.config[ option ] = urlParams[ option ];\n\t\t}\n\t}\n} );\n\nfunction getUrlParams() {\n\tvar i, param, name, value;\n\tvar urlParams = {};\n\tvar params = location.search.slice( 1 ).split( \"&\" );\n\tvar length = params.length;\n\n\tfor ( i = 0; i < length; i++ ) {\n\t\tif ( params[ i ] ) {\n\t\t\tparam = params[ i ].split( \"=\" );\n\t\t\tname = decodeURIComponent( param[ 0 ] );\n\n\t\t\t// Allow just a key to turn on a flag, e.g., test.html?noglobals\n\t\t\tvalue = param.length === 1 ||\n\t\t\t\tdecodeURIComponent( param.slice( 1 ).join( \"=\" ) ) ;\n\t\t\tif ( urlParams[ name ] ) {\n\t\t\t\turlParams[ name ] = [].concat( urlParams[ name ], value );\n\t\t\t} else {\n\t\t\t\turlParams[ name ] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn urlParams;\n}\n\n// Don't load the HTML Reporter on non-browser environments\nif ( typeof window === \"undefined\" || !window.document ) {\n\treturn;\n}\n\n// Deprecated QUnit.init - Ref #530\n// Re-initialize the configuration options\nQUnit.init = function() {\n\tvar config = QUnit.config;\n\n\tconfig.stats = { all: 0, bad: 0 };\n\tconfig.moduleStats = { all: 0, bad: 0 };\n\tconfig.started = 0;\n\tconfig.updateRate = 1000;\n\tconfig.blocking = false;\n\tconfig.autostart = true;\n\tconfig.autorun = false;\n\tconfig.filter = \"\";\n\tconfig.queue = [];\n\n\tappendInterface();\n};\n\nvar config = QUnit.config,\n\tdocument = window.document,\n\tcollapseNext = false,\n\thasOwn = Object.prototype.hasOwnProperty,\n\tunfilteredUrl = setUrl( { filter: undefined, module: undefined,\n\t\tmoduleId: undefined, testId: undefined } ),\n\tdefined = {\n\t\tsessionStorage: ( function() {\n\t\t\tvar x = \"qunit-test-string\";\n\t\t\ttry {\n\t\t\t\tsessionStorage.setItem( x, x );\n\t\t\t\tsessionStorage.removeItem( x );\n\t\t\t\treturn true;\n\t\t\t} catch ( e ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}() )\n\t},\n\tmodulesList = [];\n\n/**\n* Escape text for attribute or text content.\n*/\nfunction escapeText( s ) {\n\tif ( !s ) {\n\t\treturn \"\";\n\t}\n\ts = s + \"\";\n\n\t// Both single quotes and double quotes (for attributes)\n\treturn s.replace( /['\"<>&]/g, function( s ) {\n\t\tswitch ( s ) {\n\t\tcase \"'\":\n\t\t\treturn \"&#039;\";\n\t\tcase \"\\\"\":\n\t\t\treturn \"&quot;\";\n\t\tcase \"<\":\n\t\t\treturn \"&lt;\";\n\t\tcase \">\":\n\t\t\treturn \"&gt;\";\n\t\tcase \"&\":\n\t\t\treturn \"&amp;\";\n\t\t}\n\t} );\n}\n\n/**\n * @param {HTMLElement} elem\n * @param {string} type\n * @param {Function} fn\n */\nfunction addEvent( elem, type, fn ) {\n\tif ( elem.addEventListener ) {\n\n\t\t// Standards-based browsers\n\t\telem.addEventListener( type, fn, false );\n\t} else if ( elem.attachEvent ) {\n\n\t\t// Support: IE <9\n\t\telem.attachEvent( \"on\" + type, function() {\n\t\t\tvar event = window.event;\n\t\t\tif ( !event.target ) {\n\t\t\t\tevent.target = event.srcElement || document;\n\t\t\t}\n\n\t\t\tfn.call( elem, event );\n\t\t} );\n\t}\n}\n\n/**\n * @param {Array|NodeList} elems\n * @param {string} type\n * @param {Function} fn\n */\nfunction addEvents( elems, type, fn ) {\n\tvar i = elems.length;\n\twhile ( i-- ) {\n\t\taddEvent( elems[ i ], type, fn );\n\t}\n}\n\nfunction hasClass( elem, name ) {\n\treturn ( \" \" + elem.className + \" \" ).indexOf( \" \" + name + \" \" ) >= 0;\n}\n\nfunction addClass( elem, name ) {\n\tif ( !hasClass( elem, name ) ) {\n\t\telem.className += ( elem.className ? \" \" : \"\" ) + name;\n\t}\n}\n\nfunction toggleClass( elem, name, force ) {\n\tif ( force || typeof force === \"undefined\" && !hasClass( elem, name ) ) {\n\t\taddClass( elem, name );\n\t} else {\n\t\tremoveClass( elem, name );\n\t}\n}\n\nfunction removeClass( elem, name ) {\n\tvar set = \" \" + elem.className + \" \";\n\n\t// Class name may appear multiple times\n\twhile ( set.indexOf( \" \" + name + \" \" ) >= 0 ) {\n\t\tset = set.replace( \" \" + name + \" \", \" \" );\n\t}\n\n\t// Trim for prettiness\n\telem.className = typeof set.trim === \"function\" ? set.trim() : set.replace( /^\\s+|\\s+$/g, \"\" );\n}\n\nfunction id( name ) {\n\treturn document.getElementById && document.getElementById( name );\n}\n\nfunction getUrlConfigHtml() {\n\tvar i, j, val,\n\t\tescaped, escapedTooltip,\n\t\tselection = false,\n\t\turlConfig = config.urlConfig,\n\t\turlConfigHtml = \"\";\n\n\tfor ( i = 0; i < urlConfig.length; i++ ) {\n\n\t\t// Options can be either strings or objects with nonempty \"id\" properties\n\t\tval = config.urlConfig[ i ];\n\t\tif ( typeof val === \"string\" ) {\n\t\t\tval = {\n\t\t\t\tid: val,\n\t\t\t\tlabel: val\n\t\t\t};\n\t\t}\n\n\t\tescaped = escapeText( val.id );\n\t\tescapedTooltip = escapeText( val.tooltip );\n\n\t\tif ( !val.value || typeof val.value === \"string\" ) {\n\t\t\turlConfigHtml += \"<input id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' name='\" + escaped + \"' type='checkbox'\" +\n\t\t\t\t( val.value ? \" value='\" + escapeText( val.value ) + \"'\" : \"\" ) +\n\t\t\t\t( config[ val.id ] ? \" checked='checked'\" : \"\" ) +\n\t\t\t\t\" title='\" + escapedTooltip + \"' /><label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label + \"</label>\";\n\t\t} else {\n\t\t\turlConfigHtml += \"<label for='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' title='\" + escapedTooltip + \"'>\" + val.label +\n\t\t\t\t\": </label><select id='qunit-urlconfig-\" + escaped +\n\t\t\t\t\"' name='\" + escaped + \"' title='\" + escapedTooltip + \"'><option></option>\";\n\n\t\t\tif ( QUnit.is( \"array\", val.value ) ) {\n\t\t\t\tfor ( j = 0; j < val.value.length; j++ ) {\n\t\t\t\t\tescaped = escapeText( val.value[ j ] );\n\t\t\t\t\turlConfigHtml += \"<option value='\" + escaped + \"'\" +\n\t\t\t\t\t\t( config[ val.id ] === val.value[ j ] ?\n\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\">\" + escaped + \"</option>\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( j in val.value ) {\n\t\t\t\t\tif ( hasOwn.call( val.value, j ) ) {\n\t\t\t\t\t\turlConfigHtml += \"<option value='\" + escapeText( j ) + \"'\" +\n\t\t\t\t\t\t\t( config[ val.id ] === j ?\n\t\t\t\t\t\t\t\t( selection = true ) && \" selected='selected'\" : \"\" ) +\n\t\t\t\t\t\t\t\">\" + escapeText( val.value[ j ] ) + \"</option>\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( config[ val.id ] && !selection ) {\n\t\t\t\tescaped = escapeText( config[ val.id ] );\n\t\t\t\turlConfigHtml += \"<option value='\" + escaped +\n\t\t\t\t\t\"' selected='selected' disabled='disabled'>\" + escaped + \"</option>\";\n\t\t\t}\n\t\t\turlConfigHtml += \"</select>\";\n\t\t}\n\t}\n\n\treturn urlConfigHtml;\n}\n\n// Handle \"click\" events on toolbar checkboxes and \"change\" for select menus.\n// Updates the URL with the new state of `config.urlConfig` values.\nfunction toolbarChanged() {\n\tvar updatedUrl, value, tests,\n\t\tfield = this,\n\t\tparams = {};\n\n\t// Detect if field is a select menu or a checkbox\n\tif ( \"selectedIndex\" in field ) {\n\t\tvalue = field.options[ field.selectedIndex ].value || undefined;\n\t} else {\n\t\tvalue = field.checked ? ( field.defaultValue || true ) : undefined;\n\t}\n\n\tparams[ field.name ] = value;\n\tupdatedUrl = setUrl( params );\n\n\t// Check if we can apply the change without a page refresh\n\tif ( \"hidepassed\" === field.name && \"replaceState\" in window.history ) {\n\t\tQUnit.urlParams[ field.name ] = value;\n\t\tconfig[ field.name ] = value || false;\n\t\ttests = id( \"qunit-tests\" );\n\t\tif ( tests ) {\n\t\t\ttoggleClass( tests, \"hidepass\", value || false );\n\t\t}\n\t\twindow.history.replaceState( null, \"\", updatedUrl );\n\t} else {\n\t\twindow.location = updatedUrl;\n\t}\n}\n\nfunction setUrl( params ) {\n\tvar key, arrValue, i,\n\t\tquerystring = \"?\",\n\t\tlocation = window.location;\n\n\tparams = QUnit.extend( QUnit.extend( {}, QUnit.urlParams ), params );\n\n\tfor ( key in params ) {\n\n\t\t// Skip inherited or undefined properties\n\t\tif ( hasOwn.call( params, key ) && params[ key ] !== undefined ) {\n\n\t\t\t// Output a parameter for each value of this key (but usually just one)\n\t\t\tarrValue = [].concat( params[ key ] );\n\t\t\tfor ( i = 0; i < arrValue.length; i++ ) {\n\t\t\t\tquerystring += encodeURIComponent( key );\n\t\t\t\tif ( arrValue[ i ] !== true ) {\n\t\t\t\t\tquerystring += \"=\" + encodeURIComponent( arrValue[ i ] );\n\t\t\t\t}\n\t\t\t\tquerystring += \"&\";\n\t\t\t}\n\t\t}\n\t}\n\treturn location.protocol + \"//\" + location.host +\n\t\tlocation.pathname + querystring.slice( 0, -1 );\n}\n\nfunction applyUrlParams() {\n\tvar selectedModule,\n\t\tmodulesList = id( \"qunit-modulefilter\" ),\n\t\tfilter = id( \"qunit-filter-input\" ).value;\n\n\tselectedModule = modulesList ?\n\t\tdecodeURIComponent( modulesList.options[ modulesList.selectedIndex ].value ) :\n\t\tundefined;\n\n\twindow.location = setUrl( {\n\t\tmodule: ( selectedModule === \"\" ) ? undefined : selectedModule,\n\t\tfilter: ( filter === \"\" ) ? undefined : filter,\n\n\t\t// Remove moduleId and testId filters\n\t\tmoduleId: undefined,\n\t\ttestId: undefined\n\t} );\n}\n\nfunction toolbarUrlConfigContainer() {\n\tvar urlConfigContainer = document.createElement( \"span\" );\n\n\turlConfigContainer.innerHTML = getUrlConfigHtml();\n\taddClass( urlConfigContainer, \"qunit-url-config\" );\n\n\t// For oldIE support:\n\t// * Add handlers to the individual elements instead of the container\n\t// * Use \"click\" instead of \"change\" for checkboxes\n\taddEvents( urlConfigContainer.getElementsByTagName( \"input\" ), \"click\", toolbarChanged );\n\taddEvents( urlConfigContainer.getElementsByTagName( \"select\" ), \"change\", toolbarChanged );\n\n\treturn urlConfigContainer;\n}\n\nfunction toolbarLooseFilter() {\n\tvar filter = document.createElement( \"form\" ),\n\t\tlabel = document.createElement( \"label\" ),\n\t\tinput = document.createElement( \"input\" ),\n\t\tbutton = document.createElement( \"button\" );\n\n\taddClass( filter, \"qunit-filter\" );\n\n\tlabel.innerHTML = \"Filter: \";\n\n\tinput.type = \"text\";\n\tinput.value = config.filter || \"\";\n\tinput.name = \"filter\";\n\tinput.id = \"qunit-filter-input\";\n\n\tbutton.innerHTML = \"Go\";\n\n\tlabel.appendChild( input );\n\n\tfilter.appendChild( label );\n\tfilter.appendChild( button );\n\taddEvent( filter, \"submit\", function( ev ) {\n\t\tapplyUrlParams();\n\n\t\tif ( ev && ev.preventDefault ) {\n\t\t\tev.preventDefault();\n\t\t}\n\n\t\treturn false;\n\t} );\n\n\treturn filter;\n}\n\nfunction toolbarModuleFilterHtml() {\n\tvar i,\n\t\tmoduleFilterHtml = \"\";\n\n\tif ( !modulesList.length ) {\n\t\treturn false;\n\t}\n\n\tmoduleFilterHtml += \"<label for='qunit-modulefilter'>Module: </label>\" +\n\t\t\"<select id='qunit-modulefilter' name='modulefilter'><option value='' \" +\n\t\t( QUnit.urlParams.module === undefined ? \"selected='selected'\" : \"\" ) +\n\t\t\">< All Modules ></option>\";\n\n\tfor ( i = 0; i < modulesList.length; i++ ) {\n\t\tmoduleFilterHtml += \"<option value='\" +\n\t\t\tescapeText( encodeURIComponent( modulesList[ i ] ) ) + \"' \" +\n\t\t\t( QUnit.urlParams.module === modulesList[ i ] ? \"selected='selected'\" : \"\" ) +\n\t\t\t\">\" + escapeText( modulesList[ i ] ) + \"</option>\";\n\t}\n\tmoduleFilterHtml += \"</select>\";\n\n\treturn moduleFilterHtml;\n}\n\nfunction toolbarModuleFilter() {\n\tvar toolbar = id( \"qunit-testrunner-toolbar\" ),\n\t\tmoduleFilter = document.createElement( \"span\" ),\n\t\tmoduleFilterHtml = toolbarModuleFilterHtml();\n\n\tif ( !toolbar || !moduleFilterHtml ) {\n\t\treturn false;\n\t}\n\n\tmoduleFilter.setAttribute( \"id\", \"qunit-modulefilter-container\" );\n\tmoduleFilter.innerHTML = moduleFilterHtml;\n\n\taddEvent( moduleFilter.lastChild, \"change\", applyUrlParams );\n\n\ttoolbar.appendChild( moduleFilter );\n}\n\nfunction appendToolbar() {\n\tvar toolbar = id( \"qunit-testrunner-toolbar\" );\n\n\tif ( toolbar ) {\n\t\ttoolbar.appendChild( toolbarUrlConfigContainer() );\n\t\ttoolbar.appendChild( toolbarLooseFilter() );\n\t\ttoolbarModuleFilter();\n\t}\n}\n\nfunction appendHeader() {\n\tvar header = id( \"qunit-header\" );\n\n\tif ( header ) {\n\t\theader.innerHTML = \"<a href='\" + escapeText( unfilteredUrl ) + \"'>\" + header.innerHTML +\n\t\t\t\"</a> \";\n\t}\n}\n\nfunction appendBanner() {\n\tvar banner = id( \"qunit-banner\" );\n\n\tif ( banner ) {\n\t\tbanner.className = \"\";\n\t}\n}\n\nfunction appendTestResults() {\n\tvar tests = id( \"qunit-tests\" ),\n\t\tresult = id( \"qunit-testresult\" );\n\n\tif ( result ) {\n\t\tresult.parentNode.removeChild( result );\n\t}\n\n\tif ( tests ) {\n\t\ttests.innerHTML = \"\";\n\t\tresult = document.createElement( \"p\" );\n\t\tresult.id = \"qunit-testresult\";\n\t\tresult.className = \"result\";\n\t\ttests.parentNode.insertBefore( result, tests );\n\t\tresult.innerHTML = \"Running...<br />&#160;\";\n\t}\n}\n\nfunction storeFixture() {\n\tvar fixture = id( \"qunit-fixture\" );\n\tif ( fixture ) {\n\t\tconfig.fixture = fixture.innerHTML;\n\t}\n}\n\nfunction appendFilteredTest() {\n\tvar testId = QUnit.config.testId;\n\tif ( !testId || testId.length <= 0 ) {\n\t\treturn \"\";\n\t}\n\treturn \"<div id='qunit-filteredTest'>Rerunning selected tests: \" +\n\t\tescapeText( testId.join( \", \" ) ) +\n\t\t\" <a id='qunit-clearFilter' href='\" +\n\t\tescapeText( unfilteredUrl ) +\n\t\t\"'>Run all tests</a></div>\";\n}\n\nfunction appendUserAgent() {\n\tvar userAgent = id( \"qunit-userAgent\" );\n\n\tif ( userAgent ) {\n\t\tuserAgent.innerHTML = \"\";\n\t\tuserAgent.appendChild(\n\t\t\tdocument.createTextNode(\n\t\t\t\t\"QUnit \" + QUnit.version + \"; \" + navigator.userAgent\n\t\t\t)\n\t\t);\n\t}\n}\n\nfunction appendInterface() {\n\tvar qunit = id( \"qunit\" );\n\n\tif ( qunit ) {\n\t\tqunit.innerHTML =\n\t\t\t\"<h1 id='qunit-header'>\" + escapeText( document.title ) + \"</h1>\" +\n\t\t\t\"<h2 id='qunit-banner'></h2>\" +\n\t\t\t\"<div id='qunit-testrunner-toolbar'></div>\" +\n\t\t\tappendFilteredTest() +\n\t\t\t\"<h2 id='qunit-userAgent'></h2>\" +\n\t\t\t\"<ol id='qunit-tests'></ol>\";\n\t}\n\n\tappendHeader();\n\tappendBanner();\n\tappendTestResults();\n\tappendUserAgent();\n\tappendToolbar();\n}\n\nfunction appendTestsList( modules ) {\n\tvar i, l, x, z, test, moduleObj;\n\n\tfor ( i = 0, l = modules.length; i < l; i++ ) {\n\t\tmoduleObj = modules[ i ];\n\n\t\tfor ( x = 0, z = moduleObj.tests.length; x < z; x++ ) {\n\t\t\ttest = moduleObj.tests[ x ];\n\n\t\t\tappendTest( test.name, test.testId, moduleObj.name );\n\t\t}\n\t}\n}\n\nfunction appendTest( name, testId, moduleName ) {\n\tvar title, rerunTrigger, testBlock, assertList,\n\t\ttests = id( \"qunit-tests\" );\n\n\tif ( !tests ) {\n\t\treturn;\n\t}\n\n\ttitle = document.createElement( \"strong\" );\n\ttitle.innerHTML = getNameHtml( name, moduleName );\n\n\trerunTrigger = document.createElement( \"a\" );\n\trerunTrigger.innerHTML = \"Rerun\";\n\trerunTrigger.href = setUrl( { testId: testId } );\n\n\ttestBlock = document.createElement( \"li\" );\n\ttestBlock.appendChild( title );\n\ttestBlock.appendChild( rerunTrigger );\n\ttestBlock.id = \"qunit-test-output-\" + testId;\n\n\tassertList = document.createElement( \"ol\" );\n\tassertList.className = \"qunit-assert-list\";\n\n\ttestBlock.appendChild( assertList );\n\n\ttests.appendChild( testBlock );\n}\n\n// HTML Reporter initialization and load\nQUnit.begin( function( details ) {\n\tvar i, moduleObj, tests;\n\n\t// Sort modules by name for the picker\n\tfor ( i = 0; i < details.modules.length; i++ ) {\n\t\tmoduleObj = details.modules[ i ];\n\t\tif ( moduleObj.name ) {\n\t\t\tmodulesList.push( moduleObj.name );\n\t\t}\n\t}\n\tmodulesList.sort( function( a, b ) {\n\t\treturn a.localeCompare( b );\n\t} );\n\n\t// Capture fixture HTML from the page\n\tstoreFixture();\n\n\t// Initialize QUnit elements\n\tappendInterface();\n\tappendTestsList( details.modules );\n\ttests = id( \"qunit-tests\" );\n\tif ( tests && config.hidepassed ) {\n\t\taddClass( tests, \"hidepass\" );\n\t}\n} );\n\nQUnit.done( function( details ) {\n\tvar i, key,\n\t\tbanner = id( \"qunit-banner\" ),\n\t\ttests = id( \"qunit-tests\" ),\n\t\thtml = [\n\t\t\t\"Tests completed in \",\n\t\t\tdetails.runtime,\n\t\t\t\" milliseconds.<br />\",\n\t\t\t\"<span class='passed'>\",\n\t\t\tdetails.passed,\n\t\t\t\"</span> assertions of <span class='total'>\",\n\t\t\tdetails.total,\n\t\t\t\"</span> passed, <span class='failed'>\",\n\t\t\tdetails.failed,\n\t\t\t\"</span> failed.\"\n\t\t].join( \"\" );\n\n\tif ( banner ) {\n\t\tbanner.className = details.failed ? \"qunit-fail\" : \"qunit-pass\";\n\t}\n\n\tif ( tests ) {\n\t\tid( \"qunit-testresult\" ).innerHTML = html;\n\t}\n\n\tif ( config.altertitle && document.title ) {\n\n\t\t// Show ✖ for good, ✔ for bad suite result in title\n\t\t// use escape sequences in case file gets loaded with non-utf-8-charset\n\t\tdocument.title = [\n\t\t\t( details.failed ? \"\\u2716\" : \"\\u2714\" ),\n\t\t\tdocument.title.replace( /^[\\u2714\\u2716] /i, \"\" )\n\t\t].join( \" \" );\n\t}\n\n\t// Clear own sessionStorage items if all tests passed\n\tif ( config.reorder && defined.sessionStorage && details.failed === 0 ) {\n\t\tfor ( i = 0; i < sessionStorage.length; i++ ) {\n\t\t\tkey = sessionStorage.key( i++ );\n\t\t\tif ( key.indexOf( \"qunit-test-\" ) === 0 ) {\n\t\t\t\tsessionStorage.removeItem( key );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Scroll back to top to show results\n\tif ( config.scrolltop && window.scrollTo ) {\n\t\twindow.scrollTo( 0, 0 );\n\t}\n} );\n\nfunction getNameHtml( name, module ) {\n\tvar nameHtml = \"\";\n\n\tif ( module ) {\n\t\tnameHtml = \"<span class='module-name'>\" + escapeText( module ) + \"</span>: \";\n\t}\n\n\tnameHtml += \"<span class='test-name'>\" + escapeText( name ) + \"</span>\";\n\n\treturn nameHtml;\n}\n\nQUnit.testStart( function( details ) {\n\tvar running, testBlock, bad;\n\n\ttestBlock = id( \"qunit-test-output-\" + details.testId );\n\tif ( testBlock ) {\n\t\ttestBlock.className = \"running\";\n\t} else {\n\n\t\t// Report later registered tests\n\t\tappendTest( details.name, details.testId, details.module );\n\t}\n\n\trunning = id( \"qunit-testresult\" );\n\tif ( running ) {\n\t\tbad = QUnit.config.reorder && defined.sessionStorage &&\n\t\t\t+sessionStorage.getItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\n\t\trunning.innerHTML = ( bad ?\n\t\t\t\"Rerunning previously failed test: <br />\" :\n\t\t\t\"Running: <br />\" ) +\n\t\t\tgetNameHtml( details.name, details.module );\n\t}\n\n} );\n\nfunction stripHtml( string ) {\n\n\t// Strip tags, html entity and whitespaces\n\treturn string.replace( /<\\/?[^>]+(>|$)/g, \"\" ).replace( /\\&quot;/g, \"\" ).replace( /\\s+/g, \"\" );\n}\n\nQUnit.log( function( details ) {\n\tvar assertList, assertLi,\n\t\tmessage, expected, actual, diff,\n\t\tshowDiff = false,\n\t\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\n\tif ( !testItem ) {\n\t\treturn;\n\t}\n\n\tmessage = escapeText( details.message ) || ( details.result ? \"okay\" : \"failed\" );\n\tmessage = \"<span class='test-message'>\" + message + \"</span>\";\n\tmessage += \"<span class='runtime'>@ \" + details.runtime + \" ms</span>\";\n\n\t// The pushFailure doesn't provide details.expected\n\t// when it calls, it's implicit to also not show expected and diff stuff\n\t// Also, we need to check details.expected existence, as it can exist and be undefined\n\tif ( !details.result && hasOwn.call( details, \"expected\" ) ) {\n\t\tif ( details.negative ) {\n\t\t\texpected = \"NOT \" + QUnit.dump.parse( details.expected );\n\t\t} else {\n\t\t\texpected = QUnit.dump.parse( details.expected );\n\t\t}\n\n\t\tactual = QUnit.dump.parse( details.actual );\n\t\tmessage += \"<table><tr class='test-expected'><th>Expected: </th><td><pre>\" +\n\t\t\tescapeText( expected ) +\n\t\t\t\"</pre></td></tr>\";\n\n\t\tif ( actual !== expected ) {\n\n\t\t\tmessage += \"<tr class='test-actual'><th>Result: </th><td><pre>\" +\n\t\t\t\tescapeText( actual ) + \"</pre></td></tr>\";\n\n\t\t\t// Don't show diff if actual or expected are booleans\n\t\t\tif ( !( /^(true|false)$/.test( actual ) ) &&\n\t\t\t\t\t!( /^(true|false)$/.test( expected ) ) ) {\n\t\t\t\tdiff = QUnit.diff( expected, actual );\n\t\t\t\tshowDiff = stripHtml( diff ).length !==\n\t\t\t\t\tstripHtml( expected ).length +\n\t\t\t\t\tstripHtml( actual ).length;\n\t\t\t}\n\n\t\t\t// Don't show diff if expected and actual are totally different\n\t\t\tif ( showDiff ) {\n\t\t\t\tmessage += \"<tr class='test-diff'><th>Diff: </th><td><pre>\" +\n\t\t\t\t\tdiff + \"</pre></td></tr>\";\n\t\t\t}\n\t\t} else if ( expected.indexOf( \"[object Array]\" ) !== -1 ||\n\t\t\t\texpected.indexOf( \"[object Object]\" ) !== -1 ) {\n\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\"Diff suppressed as the depth of object is more than current max depth (\" +\n\t\t\t\tQUnit.config.maxDepth + \").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to \" +\n\t\t\t\t\" run with a higher max depth or <a href='\" +\n\t\t\t\tescapeText( setUrl( { maxDepth: -1 } ) ) + \"'>\" +\n\t\t\t\t\"Rerun</a> without max depth.</p></td></tr>\";\n\t\t} else {\n\t\t\tmessage += \"<tr class='test-message'><th>Message: </th><td>\" +\n\t\t\t\t\"Diff suppressed as the expected and actual results have an equivalent\" +\n\t\t\t\t\" serialization</td></tr>\";\n\t\t}\n\n\t\tif ( details.source ) {\n\t\t\tmessage += \"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\t\tescapeText( details.source ) + \"</pre></td></tr>\";\n\t\t}\n\n\t\tmessage += \"</table>\";\n\n\t// This occurs when pushFailure is set and we have an extracted stack trace\n\t} else if ( !details.result && details.source ) {\n\t\tmessage += \"<table>\" +\n\t\t\t\"<tr class='test-source'><th>Source: </th><td><pre>\" +\n\t\t\tescapeText( details.source ) + \"</pre></td></tr>\" +\n\t\t\t\"</table>\";\n\t}\n\n\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\n\tassertLi = document.createElement( \"li\" );\n\tassertLi.className = details.result ? \"pass\" : \"fail\";\n\tassertLi.innerHTML = message;\n\tassertList.appendChild( assertLi );\n} );\n\nQUnit.testDone( function( details ) {\n\tvar testTitle, time, testItem, assertList,\n\t\tgood, bad, testCounts, skipped, sourceName,\n\t\ttests = id( \"qunit-tests\" );\n\n\tif ( !tests ) {\n\t\treturn;\n\t}\n\n\ttestItem = id( \"qunit-test-output-\" + details.testId );\n\n\tassertList = testItem.getElementsByTagName( \"ol\" )[ 0 ];\n\n\tgood = details.passed;\n\tbad = details.failed;\n\n\t// Store result when possible\n\tif ( config.reorder && defined.sessionStorage ) {\n\t\tif ( bad ) {\n\t\t\tsessionStorage.setItem( \"qunit-test-\" + details.module + \"-\" + details.name, bad );\n\t\t} else {\n\t\t\tsessionStorage.removeItem( \"qunit-test-\" + details.module + \"-\" + details.name );\n\t\t}\n\t}\n\n\tif ( bad === 0 ) {\n\n\t\t// Collapse the passing tests\n\t\taddClass( assertList, \"qunit-collapsed\" );\n\t} else if ( bad && config.collapse && !collapseNext ) {\n\n\t\t// Skip collapsing the first failing test\n\t\tcollapseNext = true;\n\t} else {\n\n\t\t// Collapse remaining tests\n\t\taddClass( assertList, \"qunit-collapsed\" );\n\t}\n\n\t// The testItem.firstChild is the test name\n\ttestTitle = testItem.firstChild;\n\n\ttestCounts = bad ?\n\t\t\"<b class='failed'>\" + bad + \"</b>, \" + \"<b class='passed'>\" + good + \"</b>, \" :\n\t\t\"\";\n\n\ttestTitle.innerHTML += \" <b class='counts'>(\" + testCounts +\n\t\tdetails.assertions.length + \")</b>\";\n\n\tif ( details.skipped ) {\n\t\ttestItem.className = \"skipped\";\n\t\tskipped = document.createElement( \"em\" );\n\t\tskipped.className = \"qunit-skipped-label\";\n\t\tskipped.innerHTML = \"skipped\";\n\t\ttestItem.insertBefore( skipped, testTitle );\n\t} else {\n\t\taddEvent( testTitle, \"click\", function() {\n\t\t\ttoggleClass( assertList, \"qunit-collapsed\" );\n\t\t} );\n\n\t\ttestItem.className = bad ? \"fail\" : \"pass\";\n\n\t\ttime = document.createElement( \"span\" );\n\t\ttime.className = \"runtime\";\n\t\ttime.innerHTML = details.runtime + \" ms\";\n\t\ttestItem.insertBefore( time, assertList );\n\t}\n\n\t// Show the source of the test when showing assertions\n\tif ( details.source ) {\n\t\tsourceName = document.createElement( \"p\" );\n\t\tsourceName.innerHTML = \"<strong>Source: </strong>\" + details.source;\n\t\taddClass( sourceName, \"qunit-source\" );\n\t\tif ( bad === 0 ) {\n\t\t\taddClass( sourceName, \"qunit-collapsed\" );\n\t\t}\n\t\taddEvent( testTitle, \"click\", function() {\n\t\t\ttoggleClass( sourceName, \"qunit-collapsed\" );\n\t\t} );\n\t\ttestItem.appendChild( sourceName );\n\t}\n} );\n\n// Avoid readyState issue with phantomjs\n// Ref: #818\nvar notPhantom = ( function( p ) {\n\treturn !( p && p.version && p.version.major > 0 );\n} )( window.phantom );\n\nif ( notPhantom && document.readyState === \"complete\" ) {\n\tQUnit.load();\n} else {\n\taddEvent( window, \"load\", QUnit.load );\n}\n\n/*\n * This file is a modified version of google-diff-match-patch's JavaScript implementation\n * (https://code.google.com/p/google-diff-match-patch/source/browse/trunk/javascript/diff_match_patch_uncompressed.js),\n * modifications are licensed as more fully set forth in LICENSE.txt.\n *\n * The original source of google-diff-match-patch is attributable and licensed as follows:\n *\n * Copyright 2006 Google Inc.\n * https://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * More Info:\n *  https://code.google.com/p/google-diff-match-patch/\n *\n * Usage: QUnit.diff(expected, actual)\n *\n */\nQUnit.diff = ( function() {\n\tfunction DiffMatchPatch() {\n\t}\n\n\t//  DIFF FUNCTIONS\n\n\t/**\n\t * The data structure representing a diff is an array of tuples:\n\t * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n\t * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n\t */\n\tvar DIFF_DELETE = -1,\n\t\tDIFF_INSERT = 1,\n\t\tDIFF_EQUAL = 0;\n\n\t/**\n\t * Find the differences between two texts.  Simplifies the problem by stripping\n\t * any common prefix or suffix off the texts before diffing.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {boolean=} optChecklines Optional speedup flag. If present and false,\n\t *     then don't run a line-level diff first to identify the changed areas.\n\t *     Defaults to true, which does a faster, slightly less optimal diff.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.DiffMain = function( text1, text2, optChecklines ) {\n\t\tvar deadline, checklines, commonlength,\n\t\t\tcommonprefix, commonsuffix, diffs;\n\n\t\t// The diff must be complete in up to 1 second.\n\t\tdeadline = ( new Date() ).getTime() + 1000;\n\n\t\t// Check for null inputs.\n\t\tif ( text1 === null || text2 === null ) {\n\t\t\tthrow new Error( \"Null input. (DiffMain)\" );\n\t\t}\n\n\t\t// Check for equality (speedup).\n\t\tif ( text1 === text2 ) {\n\t\t\tif ( text1 ) {\n\t\t\t\treturn [\n\t\t\t\t\t[ DIFF_EQUAL, text1 ]\n\t\t\t\t];\n\t\t\t}\n\t\t\treturn [];\n\t\t}\n\n\t\tif ( typeof optChecklines === \"undefined\" ) {\n\t\t\toptChecklines = true;\n\t\t}\n\n\t\tchecklines = optChecklines;\n\n\t\t// Trim off common prefix (speedup).\n\t\tcommonlength = this.diffCommonPrefix( text1, text2 );\n\t\tcommonprefix = text1.substring( 0, commonlength );\n\t\ttext1 = text1.substring( commonlength );\n\t\ttext2 = text2.substring( commonlength );\n\n\t\t// Trim off common suffix (speedup).\n\t\tcommonlength = this.diffCommonSuffix( text1, text2 );\n\t\tcommonsuffix = text1.substring( text1.length - commonlength );\n\t\ttext1 = text1.substring( 0, text1.length - commonlength );\n\t\ttext2 = text2.substring( 0, text2.length - commonlength );\n\n\t\t// Compute the diff on the middle block.\n\t\tdiffs = this.diffCompute( text1, text2, checklines, deadline );\n\n\t\t// Restore the prefix and suffix.\n\t\tif ( commonprefix ) {\n\t\t\tdiffs.unshift( [ DIFF_EQUAL, commonprefix ] );\n\t\t}\n\t\tif ( commonsuffix ) {\n\t\t\tdiffs.push( [ DIFF_EQUAL, commonsuffix ] );\n\t\t}\n\t\tthis.diffCleanupMerge( diffs );\n\t\treturn diffs;\n\t};\n\n\t/**\n\t * Reduce the number of edits by eliminating operationally trivial equalities.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupEfficiency = function( diffs ) {\n\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\tpointer, preIns, preDel, postIns, postDel;\n\t\tchanges = false;\n\t\tequalities = []; // Stack of indices where equalities are found.\n\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t/** @type {?string} */\n\t\tlastequality = null;\n\n\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\tpointer = 0; // Index of current position.\n\n\t\t// Is there an insertion operation before the last equality.\n\t\tpreIns = false;\n\n\t\t// Is there a deletion operation before the last equality.\n\t\tpreDel = false;\n\n\t\t// Is there an insertion operation after the last equality.\n\t\tpostIns = false;\n\n\t\t// Is there a deletion operation after the last equality.\n\t\tpostDel = false;\n\t\twhile ( pointer < diffs.length ) {\n\n\t\t\t// Equality found.\n\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) {\n\t\t\t\tif ( diffs[ pointer ][ 1 ].length < 4 && ( postIns || postDel ) ) {\n\n\t\t\t\t\t// Candidate found.\n\t\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\t\tpreIns = postIns;\n\t\t\t\t\tpreDel = postDel;\n\t\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t\t} else {\n\n\t\t\t\t\t// Not a candidate, and can never become one.\n\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t}\n\t\t\t\tpostIns = postDel = false;\n\n\t\t\t// An insertion or deletion.\n\t\t\t} else {\n\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_DELETE ) {\n\t\t\t\t\tpostDel = true;\n\t\t\t\t} else {\n\t\t\t\t\tpostIns = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * Five types to be split:\n\t\t\t\t * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins>X<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins><del>B</del>X<ins>C</ins>\n\t\t\t\t * <ins>A</del>X<ins>C</ins><del>D</del>\n\t\t\t\t * <ins>A</ins><del>B</del>X<del>C</del>\n\t\t\t\t */\n\t\t\t\tif ( lastequality && ( ( preIns && preDel && postIns && postDel ) ||\n\t\t\t\t\t\t( ( lastequality.length < 2 ) &&\n\t\t\t\t\t\t( preIns + preDel + postIns + postDel ) === 3 ) ) ) {\n\n\t\t\t\t\t// Duplicate record.\n\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t);\n\n\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\tequalitiesLength--; // Throw away the equality we just deleted;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t\tif ( preIns && preDel ) {\n\n\t\t\t\t\t\t// No changes made which could affect previous entry, keep going.\n\t\t\t\t\t\tpostIns = postDel = true;\n\t\t\t\t\t\tequalitiesLength = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tequalitiesLength--; // Throw away the previous equality.\n\t\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\t\t\t\t\t\tpostIns = postDel = false;\n\t\t\t\t\t}\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\t};\n\n\t/**\n\t * Convert a diff array into a pretty HTML report.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t * @param {integer} string to be beautified.\n\t * @return {string} HTML representation.\n\t */\n\tDiffMatchPatch.prototype.diffPrettyHtml = function( diffs ) {\n\t\tvar op, data, x,\n\t\t\thtml = [];\n\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\top = diffs[ x ][ 0 ]; // Operation (insert, delete, equal)\n\t\t\tdata = diffs[ x ][ 1 ]; // Text of change.\n\t\t\tswitch ( op ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\thtml[ x ] = \"<ins>\" + escapeText( data ) + \"</ins>\";\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\thtml[ x ] = \"<del>\" + escapeText( data ) + \"</del>\";\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\t\t\t\thtml[ x ] = \"<span>\" + escapeText( data ) + \"</span>\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn html.join( \"\" );\n\t};\n\n\t/**\n\t * Determine the common prefix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the start of each\n\t *     string.\n\t */\n\tDiffMatchPatch.prototype.diffCommonPrefix = function( text1, text2 ) {\n\t\tvar pointermid, pointermax, pointermin, pointerstart;\n\n\t\t// Quick check for common null cases.\n\t\tif ( !text1 || !text2 || text1.charAt( 0 ) !== text2.charAt( 0 ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Binary search.\n\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\tpointermin = 0;\n\t\tpointermax = Math.min( text1.length, text2.length );\n\t\tpointermid = pointermax;\n\t\tpointerstart = 0;\n\t\twhile ( pointermin < pointermid ) {\n\t\t\tif ( text1.substring( pointerstart, pointermid ) ===\n\t\t\t\t\ttext2.substring( pointerstart, pointermid ) ) {\n\t\t\t\tpointermin = pointermid;\n\t\t\t\tpointerstart = pointermin;\n\t\t\t} else {\n\t\t\t\tpointermax = pointermid;\n\t\t\t}\n\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t}\n\t\treturn pointermid;\n\t};\n\n\t/**\n\t * Determine the common suffix of two strings.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of each string.\n\t */\n\tDiffMatchPatch.prototype.diffCommonSuffix = function( text1, text2 ) {\n\t\tvar pointermid, pointermax, pointermin, pointerend;\n\n\t\t// Quick check for common null cases.\n\t\tif ( !text1 ||\n\t\t\t\t!text2 ||\n\t\t\t\ttext1.charAt( text1.length - 1 ) !== text2.charAt( text2.length - 1 ) ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Binary search.\n\t\t// Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\t\tpointermin = 0;\n\t\tpointermax = Math.min( text1.length, text2.length );\n\t\tpointermid = pointermax;\n\t\tpointerend = 0;\n\t\twhile ( pointermin < pointermid ) {\n\t\t\tif ( text1.substring( text1.length - pointermid, text1.length - pointerend ) ===\n\t\t\t\t\ttext2.substring( text2.length - pointermid, text2.length - pointerend ) ) {\n\t\t\t\tpointermin = pointermid;\n\t\t\t\tpointerend = pointermin;\n\t\t\t} else {\n\t\t\t\tpointermax = pointermid;\n\t\t\t}\n\t\t\tpointermid = Math.floor( ( pointermax - pointermin ) / 2 + pointermin );\n\t\t}\n\t\treturn pointermid;\n\t};\n\n\t/**\n\t * Find the differences between two texts.  Assumes that the texts do not\n\t * have any common prefix or suffix.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {boolean} checklines Speedup flag.  If false, then don't run a\n\t *     line-level diff first to identify the changed areas.\n\t *     If true, then run a faster, slightly less optimal diff.\n\t * @param {number} deadline Time when the diff should be complete by.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCompute = function( text1, text2, checklines, deadline ) {\n\t\tvar diffs, longtext, shorttext, i, hm,\n\t\t\ttext1A, text2A, text1B, text2B,\n\t\t\tmidCommon, diffsA, diffsB;\n\n\t\tif ( !text1 ) {\n\n\t\t\t// Just add some text (speedup).\n\t\t\treturn [\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t}\n\n\t\tif ( !text2 ) {\n\n\t\t\t// Just delete some text (speedup).\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ]\n\t\t\t];\n\t\t}\n\n\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\ti = longtext.indexOf( shorttext );\n\t\tif ( i !== -1 ) {\n\n\t\t\t// Shorter text is inside the longer text (speedup).\n\t\t\tdiffs = [\n\t\t\t\t[ DIFF_INSERT, longtext.substring( 0, i ) ],\n\t\t\t\t[ DIFF_EQUAL, shorttext ],\n\t\t\t\t[ DIFF_INSERT, longtext.substring( i + shorttext.length ) ]\n\t\t\t];\n\n\t\t\t// Swap insertions for deletions if diff is reversed.\n\t\t\tif ( text1.length > text2.length ) {\n\t\t\t\tdiffs[ 0 ][ 0 ] = diffs[ 2 ][ 0 ] = DIFF_DELETE;\n\t\t\t}\n\t\t\treturn diffs;\n\t\t}\n\n\t\tif ( shorttext.length === 1 ) {\n\n\t\t\t// Single character string.\n\t\t\t// After the previous speedup, the character can't be an equality.\n\t\t\treturn [\n\t\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t\t[ DIFF_INSERT, text2 ]\n\t\t\t];\n\t\t}\n\n\t\t// Check to see if the problem can be split in two.\n\t\thm = this.diffHalfMatch( text1, text2 );\n\t\tif ( hm ) {\n\n\t\t\t// A half-match was found, sort out the return data.\n\t\t\ttext1A = hm[ 0 ];\n\t\t\ttext1B = hm[ 1 ];\n\t\t\ttext2A = hm[ 2 ];\n\t\t\ttext2B = hm[ 3 ];\n\t\t\tmidCommon = hm[ 4 ];\n\n\t\t\t// Send both pairs off for separate processing.\n\t\t\tdiffsA = this.DiffMain( text1A, text2A, checklines, deadline );\n\t\t\tdiffsB = this.DiffMain( text1B, text2B, checklines, deadline );\n\n\t\t\t// Merge the results.\n\t\t\treturn diffsA.concat( [\n\t\t\t\t[ DIFF_EQUAL, midCommon ]\n\t\t\t], diffsB );\n\t\t}\n\n\t\tif ( checklines && text1.length > 100 && text2.length > 100 ) {\n\t\t\treturn this.diffLineMode( text1, text2, deadline );\n\t\t}\n\n\t\treturn this.diffBisect( text1, text2, deadline );\n\t};\n\n\t/**\n\t * Do the two texts share a substring which is at least half the length of the\n\t * longer text?\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t *     text1, the suffix of text1, the prefix of text2, the suffix of\n\t *     text2 and the common middle.  Or null if there was no match.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffHalfMatch = function( text1, text2 ) {\n\t\tvar longtext, shorttext, dmp,\n\t\t\ttext1A, text2B, text2A, text1B, midCommon,\n\t\t\thm1, hm2, hm;\n\n\t\tlongtext = text1.length > text2.length ? text1 : text2;\n\t\tshorttext = text1.length > text2.length ? text2 : text1;\n\t\tif ( longtext.length < 4 || shorttext.length * 2 < longtext.length ) {\n\t\t\treturn null; // Pointless.\n\t\t}\n\t\tdmp = this; // 'this' becomes 'window' in a closure.\n\n\t\t/**\n\t\t * Does a substring of shorttext exist within longtext such that the substring\n\t\t * is at least half the length of longtext?\n\t\t * Closure, but does not reference any external variables.\n\t\t * @param {string} longtext Longer string.\n\t\t * @param {string} shorttext Shorter string.\n\t\t * @param {number} i Start index of quarter length substring within longtext.\n\t\t * @return {Array.<string>} Five element Array, containing the prefix of\n\t\t *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n\t\t *     of shorttext and the common middle.  Or null if there was no match.\n\t\t * @private\n\t\t */\n\t\tfunction diffHalfMatchI( longtext, shorttext, i ) {\n\t\t\tvar seed, j, bestCommon, prefixLength, suffixLength,\n\t\t\t\tbestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;\n\n\t\t\t// Start with a 1/4 length substring at position i as a seed.\n\t\t\tseed = longtext.substring( i, i + Math.floor( longtext.length / 4 ) );\n\t\t\tj = -1;\n\t\t\tbestCommon = \"\";\n\t\t\twhile ( ( j = shorttext.indexOf( seed, j + 1 ) ) !== -1 ) {\n\t\t\t\tprefixLength = dmp.diffCommonPrefix( longtext.substring( i ),\n\t\t\t\t\tshorttext.substring( j ) );\n\t\t\t\tsuffixLength = dmp.diffCommonSuffix( longtext.substring( 0, i ),\n\t\t\t\t\tshorttext.substring( 0, j ) );\n\t\t\t\tif ( bestCommon.length < suffixLength + prefixLength ) {\n\t\t\t\t\tbestCommon = shorttext.substring( j - suffixLength, j ) +\n\t\t\t\t\t\tshorttext.substring( j, j + prefixLength );\n\t\t\t\t\tbestLongtextA = longtext.substring( 0, i - suffixLength );\n\t\t\t\t\tbestLongtextB = longtext.substring( i + prefixLength );\n\t\t\t\t\tbestShorttextA = shorttext.substring( 0, j - suffixLength );\n\t\t\t\t\tbestShorttextB = shorttext.substring( j + prefixLength );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( bestCommon.length * 2 >= longtext.length ) {\n\t\t\t\treturn [ bestLongtextA, bestLongtextB,\n\t\t\t\t\tbestShorttextA, bestShorttextB, bestCommon\n\t\t\t\t];\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// First check if the second quarter is the seed for a half-match.\n\t\thm1 = diffHalfMatchI( longtext, shorttext,\n\t\t\tMath.ceil( longtext.length / 4 ) );\n\n\t\t// Check again based on the third quarter.\n\t\thm2 = diffHalfMatchI( longtext, shorttext,\n\t\t\tMath.ceil( longtext.length / 2 ) );\n\t\tif ( !hm1 && !hm2 ) {\n\t\t\treturn null;\n\t\t} else if ( !hm2 ) {\n\t\t\thm = hm1;\n\t\t} else if ( !hm1 ) {\n\t\t\thm = hm2;\n\t\t} else {\n\n\t\t\t// Both matched.  Select the longest.\n\t\t\thm = hm1[ 4 ].length > hm2[ 4 ].length ? hm1 : hm2;\n\t\t}\n\n\t\t// A half-match was found, sort out the return data.\n\t\ttext1A, text1B, text2A, text2B;\n\t\tif ( text1.length > text2.length ) {\n\t\t\ttext1A = hm[ 0 ];\n\t\t\ttext1B = hm[ 1 ];\n\t\t\ttext2A = hm[ 2 ];\n\t\t\ttext2B = hm[ 3 ];\n\t\t} else {\n\t\t\ttext2A = hm[ 0 ];\n\t\t\ttext2B = hm[ 1 ];\n\t\t\ttext1A = hm[ 2 ];\n\t\t\ttext1B = hm[ 3 ];\n\t\t}\n\t\tmidCommon = hm[ 4 ];\n\t\treturn [ text1A, text1B, text2A, text2B, midCommon ];\n\t};\n\n\t/**\n\t * Do a quick line-level diff on both strings, then rediff the parts for\n\t * greater accuracy.\n\t * This speedup can produce non-minimal diffs.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} deadline Time when the diff should be complete by.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffLineMode = function( text1, text2, deadline ) {\n\t\tvar a, diffs, linearray, pointer, countInsert,\n\t\t\tcountDelete, textInsert, textDelete, j;\n\n\t\t// Scan the text on a line-by-line basis first.\n\t\ta = this.diffLinesToChars( text1, text2 );\n\t\ttext1 = a.chars1;\n\t\ttext2 = a.chars2;\n\t\tlinearray = a.lineArray;\n\n\t\tdiffs = this.DiffMain( text1, text2, false, deadline );\n\n\t\t// Convert the diff back to original text.\n\t\tthis.diffCharsToLines( diffs, linearray );\n\n\t\t// Eliminate freak matches (e.g. blank lines)\n\t\tthis.diffCleanupSemantic( diffs );\n\n\t\t// Rediff any replacement blocks, this time character-by-character.\n\t\t// Add a dummy entry at the end.\n\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] );\n\t\tpointer = 0;\n\t\tcountDelete = 0;\n\t\tcountInsert = 0;\n\t\ttextDelete = \"\";\n\t\ttextInsert = \"\";\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\tcountInsert++;\n\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\tcountDelete++;\n\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\n\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\tif ( countDelete >= 1 && countInsert >= 1 ) {\n\n\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\tdiffs.splice( pointer - countDelete - countInsert,\n\t\t\t\t\t\tcountDelete + countInsert );\n\t\t\t\t\tpointer = pointer - countDelete - countInsert;\n\t\t\t\t\ta = this.DiffMain( textDelete, textInsert, false, deadline );\n\t\t\t\t\tfor ( j = a.length - 1; j >= 0; j-- ) {\n\t\t\t\t\t\tdiffs.splice( pointer, 0, a[ j ] );\n\t\t\t\t\t}\n\t\t\t\t\tpointer = pointer + a.length;\n\t\t\t\t}\n\t\t\t\tcountInsert = 0;\n\t\t\t\tcountDelete = 0;\n\t\t\t\ttextDelete = \"\";\n\t\t\t\ttextInsert = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\n\t\treturn diffs;\n\t};\n\n\t/**\n\t * Find the 'middle snake' of a diff, split the problem in two\n\t * and return the recursively constructed diff.\n\t * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} deadline Time at which to bail if not yet complete.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffBisect = function( text1, text2, deadline ) {\n\t\tvar text1Length, text2Length, maxD, vOffset, vLength,\n\t\t\tv1, v2, x, delta, front, k1start, k1end, k2start,\n\t\t\tk2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;\n\n\t\t// Cache the text lengths to prevent multiple calls.\n\t\ttext1Length = text1.length;\n\t\ttext2Length = text2.length;\n\t\tmaxD = Math.ceil( ( text1Length + text2Length ) / 2 );\n\t\tvOffset = maxD;\n\t\tvLength = 2 * maxD;\n\t\tv1 = new Array( vLength );\n\t\tv2 = new Array( vLength );\n\n\t\t// Setting all elements to -1 is faster in Chrome & Firefox than mixing\n\t\t// integers and undefined.\n\t\tfor ( x = 0; x < vLength; x++ ) {\n\t\t\tv1[ x ] = -1;\n\t\t\tv2[ x ] = -1;\n\t\t}\n\t\tv1[ vOffset + 1 ] = 0;\n\t\tv2[ vOffset + 1 ] = 0;\n\t\tdelta = text1Length - text2Length;\n\n\t\t// If the total number of characters is odd, then the front path will collide\n\t\t// with the reverse path.\n\t\tfront = ( delta % 2 !== 0 );\n\n\t\t// Offsets for start and end of k loop.\n\t\t// Prevents mapping of space beyond the grid.\n\t\tk1start = 0;\n\t\tk1end = 0;\n\t\tk2start = 0;\n\t\tk2end = 0;\n\t\tfor ( d = 0; d < maxD; d++ ) {\n\n\t\t\t// Bail out if deadline is reached.\n\t\t\tif ( ( new Date() ).getTime() > deadline ) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Walk the front path one step.\n\t\t\tfor ( k1 = -d + k1start; k1 <= d - k1end; k1 += 2 ) {\n\t\t\t\tk1Offset = vOffset + k1;\n\t\t\t\tif ( k1 === -d || ( k1 !== d && v1[ k1Offset - 1 ] < v1[ k1Offset + 1 ] ) ) {\n\t\t\t\t\tx1 = v1[ k1Offset + 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tx1 = v1[ k1Offset - 1 ] + 1;\n\t\t\t\t}\n\t\t\t\ty1 = x1 - k1;\n\t\t\t\twhile ( x1 < text1Length && y1 < text2Length &&\n\t\t\t\t\ttext1.charAt( x1 ) === text2.charAt( y1 ) ) {\n\t\t\t\t\tx1++;\n\t\t\t\t\ty1++;\n\t\t\t\t}\n\t\t\t\tv1[ k1Offset ] = x1;\n\t\t\t\tif ( x1 > text1Length ) {\n\n\t\t\t\t\t// Ran off the right of the graph.\n\t\t\t\t\tk1end += 2;\n\t\t\t\t} else if ( y1 > text2Length ) {\n\n\t\t\t\t\t// Ran off the bottom of the graph.\n\t\t\t\t\tk1start += 2;\n\t\t\t\t} else if ( front ) {\n\t\t\t\t\tk2Offset = vOffset + delta - k1;\n\t\t\t\t\tif ( k2Offset >= 0 && k2Offset < vLength && v2[ k2Offset ] !== -1 ) {\n\n\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\tx2 = text1Length - v2[ k2Offset ];\n\t\t\t\t\t\tif ( x1 >= x2 ) {\n\n\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Walk the reverse path one step.\n\t\t\tfor ( k2 = -d + k2start; k2 <= d - k2end; k2 += 2 ) {\n\t\t\t\tk2Offset = vOffset + k2;\n\t\t\t\tif ( k2 === -d || ( k2 !== d && v2[ k2Offset - 1 ] < v2[ k2Offset + 1 ] ) ) {\n\t\t\t\t\tx2 = v2[ k2Offset + 1 ];\n\t\t\t\t} else {\n\t\t\t\t\tx2 = v2[ k2Offset - 1 ] + 1;\n\t\t\t\t}\n\t\t\t\ty2 = x2 - k2;\n\t\t\t\twhile ( x2 < text1Length && y2 < text2Length &&\n\t\t\t\t\ttext1.charAt( text1Length - x2 - 1 ) ===\n\t\t\t\t\ttext2.charAt( text2Length - y2 - 1 ) ) {\n\t\t\t\t\tx2++;\n\t\t\t\t\ty2++;\n\t\t\t\t}\n\t\t\t\tv2[ k2Offset ] = x2;\n\t\t\t\tif ( x2 > text1Length ) {\n\n\t\t\t\t\t// Ran off the left of the graph.\n\t\t\t\t\tk2end += 2;\n\t\t\t\t} else if ( y2 > text2Length ) {\n\n\t\t\t\t\t// Ran off the top of the graph.\n\t\t\t\t\tk2start += 2;\n\t\t\t\t} else if ( !front ) {\n\t\t\t\t\tk1Offset = vOffset + delta - k2;\n\t\t\t\t\tif ( k1Offset >= 0 && k1Offset < vLength && v1[ k1Offset ] !== -1 ) {\n\t\t\t\t\t\tx1 = v1[ k1Offset ];\n\t\t\t\t\t\ty1 = vOffset + x1 - k1Offset;\n\n\t\t\t\t\t\t// Mirror x2 onto top-left coordinate system.\n\t\t\t\t\t\tx2 = text1Length - x2;\n\t\t\t\t\t\tif ( x1 >= x2 ) {\n\n\t\t\t\t\t\t\t// Overlap detected.\n\t\t\t\t\t\t\treturn this.diffBisectSplit( text1, text2, x1, y1, deadline );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Diff took too long and hit the deadline or\n\t\t// number of diffs equals number of characters, no commonality at all.\n\t\treturn [\n\t\t\t[ DIFF_DELETE, text1 ],\n\t\t\t[ DIFF_INSERT, text2 ]\n\t\t];\n\t};\n\n\t/**\n\t * Given the location of the 'middle snake', split the diff in two parts\n\t * and recurse.\n\t * @param {string} text1 Old string to be diffed.\n\t * @param {string} text2 New string to be diffed.\n\t * @param {number} x Index of split point in text1.\n\t * @param {number} y Index of split point in text2.\n\t * @param {number} deadline Time at which to bail if not yet complete.\n\t * @return {!Array.<!DiffMatchPatch.Diff>} Array of diff tuples.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffBisectSplit = function( text1, text2, x, y, deadline ) {\n\t\tvar text1a, text1b, text2a, text2b, diffs, diffsb;\n\t\ttext1a = text1.substring( 0, x );\n\t\ttext2a = text2.substring( 0, y );\n\t\ttext1b = text1.substring( x );\n\t\ttext2b = text2.substring( y );\n\n\t\t// Compute both diffs serially.\n\t\tdiffs = this.DiffMain( text1a, text2a, false, deadline );\n\t\tdiffsb = this.DiffMain( text1b, text2b, false, deadline );\n\n\t\treturn diffs.concat( diffsb );\n\t};\n\n\t/**\n\t * Reduce the number of edits by eliminating semantically trivial equalities.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupSemantic = function( diffs ) {\n\t\tvar changes, equalities, equalitiesLength, lastequality,\n\t\t\tpointer, lengthInsertions2, lengthDeletions2, lengthInsertions1,\n\t\t\tlengthDeletions1, deletion, insertion, overlapLength1, overlapLength2;\n\t\tchanges = false;\n\t\tequalities = []; // Stack of indices where equalities are found.\n\t\tequalitiesLength = 0; // Keeping our own length var is faster in JS.\n\t\t/** @type {?string} */\n\t\tlastequality = null;\n\n\t\t// Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\t\tpointer = 0; // Index of current position.\n\n\t\t// Number of characters that changed prior to the equality.\n\t\tlengthInsertions1 = 0;\n\t\tlengthDeletions1 = 0;\n\n\t\t// Number of characters that changed after the equality.\n\t\tlengthInsertions2 = 0;\n\t\tlengthDeletions2 = 0;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_EQUAL ) { // Equality found.\n\t\t\t\tequalities[ equalitiesLength++ ] = pointer;\n\t\t\t\tlengthInsertions1 = lengthInsertions2;\n\t\t\t\tlengthDeletions1 = lengthDeletions2;\n\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\tlastequality = diffs[ pointer ][ 1 ];\n\t\t\t} else { // An insertion or deletion.\n\t\t\t\tif ( diffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\t\tlengthInsertions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t} else {\n\t\t\t\t\tlengthDeletions2 += diffs[ pointer ][ 1 ].length;\n\t\t\t\t}\n\n\t\t\t\t// Eliminate an equality that is smaller or equal to the edits on both\n\t\t\t\t// sides of it.\n\t\t\t\tif ( lastequality && ( lastequality.length <=\n\t\t\t\t\t\tMath.max( lengthInsertions1, lengthDeletions1 ) ) &&\n\t\t\t\t\t\t( lastequality.length <= Math.max( lengthInsertions2,\n\t\t\t\t\t\t\tlengthDeletions2 ) ) ) {\n\n\t\t\t\t\t// Duplicate record.\n\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\tequalities[ equalitiesLength - 1 ],\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t[ DIFF_DELETE, lastequality ]\n\t\t\t\t\t);\n\n\t\t\t\t\t// Change second copy to insert.\n\t\t\t\t\tdiffs[ equalities[ equalitiesLength - 1 ] + 1 ][ 0 ] = DIFF_INSERT;\n\n\t\t\t\t\t// Throw away the equality we just deleted.\n\t\t\t\t\tequalitiesLength--;\n\n\t\t\t\t\t// Throw away the previous equality (it needs to be reevaluated).\n\t\t\t\t\tequalitiesLength--;\n\t\t\t\t\tpointer = equalitiesLength > 0 ? equalities[ equalitiesLength - 1 ] : -1;\n\n\t\t\t\t\t// Reset the counters.\n\t\t\t\t\tlengthInsertions1 = 0;\n\t\t\t\t\tlengthDeletions1 = 0;\n\t\t\t\t\tlengthInsertions2 = 0;\n\t\t\t\t\tlengthDeletions2 = 0;\n\t\t\t\t\tlastequality = null;\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\t// Normalize the diff.\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\n\t\t// Find any overlaps between deletions and insertions.\n\t\t// e.g: <del>abcxxx</del><ins>xxxdef</ins>\n\t\t//   -> <del>abc</del>xxx<ins>def</ins>\n\t\t// e.g: <del>xxxabc</del><ins>defxxx</ins>\n\t\t//   -> <ins>def</ins>xxx<del>abc</del>\n\t\t// Only extract an overlap if it is as big as the edit ahead or behind it.\n\t\tpointer = 1;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_DELETE &&\n\t\t\t\t\tdiffs[ pointer ][ 0 ] === DIFF_INSERT ) {\n\t\t\t\tdeletion = diffs[ pointer - 1 ][ 1 ];\n\t\t\t\tinsertion = diffs[ pointer ][ 1 ];\n\t\t\t\toverlapLength1 = this.diffCommonOverlap( deletion, insertion );\n\t\t\t\toverlapLength2 = this.diffCommonOverlap( insertion, deletion );\n\t\t\t\tif ( overlapLength1 >= overlapLength2 ) {\n\t\t\t\t\tif ( overlapLength1 >= deletion.length / 2 ||\n\t\t\t\t\t\t\toverlapLength1 >= insertion.length / 2 ) {\n\n\t\t\t\t\t\t// Overlap found.  Insert an equality and trim the surrounding edits.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_EQUAL, insertion.substring( 0, overlapLength1 ) ]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\tdeletion.substring( 0, deletion.length - overlapLength1 );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] = insertion.substring( overlapLength1 );\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ( overlapLength2 >= deletion.length / 2 ||\n\t\t\t\t\t\t\toverlapLength2 >= insertion.length / 2 ) {\n\n\t\t\t\t\t\t// Reverse overlap found.\n\t\t\t\t\t\t// Insert an equality and swap and trim the surrounding edits.\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t[ DIFF_EQUAL, deletion.substring( 0, overlapLength2 ) ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 0 ] = DIFF_INSERT;\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] =\n\t\t\t\t\t\t\tinsertion.substring( 0, insertion.length - overlapLength2 );\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] = DIFF_DELETE;\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\t\tdeletion.substring( overlapLength2 );\n\t\t\t\t\t\tpointer++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpointer++;\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\t};\n\n\t/**\n\t * Determine if the suffix of one string is the prefix of another.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {number} The number of characters common to the end of the first\n\t *     string and the start of the second string.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCommonOverlap = function( text1, text2 ) {\n\t\tvar text1Length, text2Length, textLength,\n\t\t\tbest, length, pattern, found;\n\n\t\t// Cache the text lengths to prevent multiple calls.\n\t\ttext1Length = text1.length;\n\t\ttext2Length = text2.length;\n\n\t\t// Eliminate the null case.\n\t\tif ( text1Length === 0 || text2Length === 0 ) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Truncate the longer string.\n\t\tif ( text1Length > text2Length ) {\n\t\t\ttext1 = text1.substring( text1Length - text2Length );\n\t\t} else if ( text1Length < text2Length ) {\n\t\t\ttext2 = text2.substring( 0, text1Length );\n\t\t}\n\t\ttextLength = Math.min( text1Length, text2Length );\n\n\t\t// Quick check for the worst case.\n\t\tif ( text1 === text2 ) {\n\t\t\treturn textLength;\n\t\t}\n\n\t\t// Start by looking for a single character match\n\t\t// and increase length until no match is found.\n\t\t// Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\t\tbest = 0;\n\t\tlength = 1;\n\t\twhile ( true ) {\n\t\t\tpattern = text1.substring( textLength - length );\n\t\t\tfound = text2.indexOf( pattern );\n\t\t\tif ( found === -1 ) {\n\t\t\t\treturn best;\n\t\t\t}\n\t\t\tlength += found;\n\t\t\tif ( found === 0 || text1.substring( textLength - length ) ===\n\t\t\t\t\ttext2.substring( 0, length ) ) {\n\t\t\t\tbest = length;\n\t\t\t\tlength++;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * Split two texts into an array of strings.  Reduce the texts to a string of\n\t * hashes where each Unicode character represents one line.\n\t * @param {string} text1 First string.\n\t * @param {string} text2 Second string.\n\t * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n\t *     An object containing the encoded text1, the encoded text2 and\n\t *     the array of unique strings.\n\t *     The zeroth element of the array of unique strings is intentionally blank.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffLinesToChars = function( text1, text2 ) {\n\t\tvar lineArray, lineHash, chars1, chars2;\n\t\tlineArray = []; // E.g. lineArray[4] === 'Hello\\n'\n\t\tlineHash = {};  // E.g. lineHash['Hello\\n'] === 4\n\n\t\t// '\\x00' is a valid character, but various debuggers don't like it.\n\t\t// So we'll insert a junk entry to avoid generating a null character.\n\t\tlineArray[ 0 ] = \"\";\n\n\t\t/**\n\t\t * Split a text into an array of strings.  Reduce the texts to a string of\n\t\t * hashes where each Unicode character represents one line.\n\t\t * Modifies linearray and linehash through being a closure.\n\t\t * @param {string} text String to encode.\n\t\t * @return {string} Encoded string.\n\t\t * @private\n\t\t */\n\t\tfunction diffLinesToCharsMunge( text ) {\n\t\t\tvar chars, lineStart, lineEnd, lineArrayLength, line;\n\t\t\tchars = \"\";\n\n\t\t\t// Walk the text, pulling out a substring for each line.\n\t\t\t// text.split('\\n') would would temporarily double our memory footprint.\n\t\t\t// Modifying text would create many large strings to garbage collect.\n\t\t\tlineStart = 0;\n\t\t\tlineEnd = -1;\n\n\t\t\t// Keeping our own length variable is faster than looking it up.\n\t\t\tlineArrayLength = lineArray.length;\n\t\t\twhile ( lineEnd < text.length - 1 ) {\n\t\t\t\tlineEnd = text.indexOf( \"\\n\", lineStart );\n\t\t\t\tif ( lineEnd === -1 ) {\n\t\t\t\t\tlineEnd = text.length - 1;\n\t\t\t\t}\n\t\t\t\tline = text.substring( lineStart, lineEnd + 1 );\n\t\t\t\tlineStart = lineEnd + 1;\n\n\t\t\t\tif ( lineHash.hasOwnProperty ? lineHash.hasOwnProperty( line ) :\n\t\t\t\t\t\t\t( lineHash[ line ] !== undefined ) ) {\n\t\t\t\t\tchars += String.fromCharCode( lineHash[ line ] );\n\t\t\t\t} else {\n\t\t\t\t\tchars += String.fromCharCode( lineArrayLength );\n\t\t\t\t\tlineHash[ line ] = lineArrayLength;\n\t\t\t\t\tlineArray[ lineArrayLength++ ] = line;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn chars;\n\t\t}\n\n\t\tchars1 = diffLinesToCharsMunge( text1 );\n\t\tchars2 = diffLinesToCharsMunge( text2 );\n\t\treturn {\n\t\t\tchars1: chars1,\n\t\t\tchars2: chars2,\n\t\t\tlineArray: lineArray\n\t\t};\n\t};\n\n\t/**\n\t * Rehydrate the text in a diff from a string of line hashes to real lines of\n\t * text.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t * @param {!Array.<string>} lineArray Array of unique strings.\n\t * @private\n\t */\n\tDiffMatchPatch.prototype.diffCharsToLines = function( diffs, lineArray ) {\n\t\tvar x, chars, text, y;\n\t\tfor ( x = 0; x < diffs.length; x++ ) {\n\t\t\tchars = diffs[ x ][ 1 ];\n\t\t\ttext = [];\n\t\t\tfor ( y = 0; y < chars.length; y++ ) {\n\t\t\t\ttext[ y ] = lineArray[ chars.charCodeAt( y ) ];\n\t\t\t}\n\t\t\tdiffs[ x ][ 1 ] = text.join( \"\" );\n\t\t}\n\t};\n\n\t/**\n\t * Reorder and merge like edit sections.  Merge equalities.\n\t * Any edit section can move as long as it doesn't cross an equality.\n\t * @param {!Array.<!DiffMatchPatch.Diff>} diffs Array of diff tuples.\n\t */\n\tDiffMatchPatch.prototype.diffCleanupMerge = function( diffs ) {\n\t\tvar pointer, countDelete, countInsert, textInsert, textDelete,\n\t\t\tcommonlength, changes, diffPointer, position;\n\t\tdiffs.push( [ DIFF_EQUAL, \"\" ] ); // Add a dummy entry at the end.\n\t\tpointer = 0;\n\t\tcountDelete = 0;\n\t\tcountInsert = 0;\n\t\ttextDelete = \"\";\n\t\ttextInsert = \"\";\n\t\tcommonlength;\n\t\twhile ( pointer < diffs.length ) {\n\t\t\tswitch ( diffs[ pointer ][ 0 ] ) {\n\t\t\tcase DIFF_INSERT:\n\t\t\t\tcountInsert++;\n\t\t\t\ttextInsert += diffs[ pointer ][ 1 ];\n\t\t\t\tpointer++;\n\t\t\t\tbreak;\n\t\t\tcase DIFF_DELETE:\n\t\t\t\tcountDelete++;\n\t\t\t\ttextDelete += diffs[ pointer ][ 1 ];\n\t\t\t\tpointer++;\n\t\t\t\tbreak;\n\t\t\tcase DIFF_EQUAL:\n\n\t\t\t\t// Upon reaching an equality, check for prior redundancies.\n\t\t\t\tif ( countDelete + countInsert > 1 ) {\n\t\t\t\t\tif ( countDelete !== 0 && countInsert !== 0 ) {\n\n\t\t\t\t\t\t// Factor out any common prefixes.\n\t\t\t\t\t\tcommonlength = this.diffCommonPrefix( textInsert, textDelete );\n\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\tif ( ( pointer - countDelete - countInsert ) > 0 &&\n\t\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 0 ] ===\n\t\t\t\t\t\t\t\t\tDIFF_EQUAL ) {\n\t\t\t\t\t\t\t\tdiffs[ pointer - countDelete - countInsert - 1 ][ 1 ] +=\n\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdiffs.splice( 0, 0, [ DIFF_EQUAL,\n\t\t\t\t\t\t\t\t\ttextInsert.substring( 0, commonlength )\n\t\t\t\t\t\t\t\t] );\n\t\t\t\t\t\t\t\tpointer++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttextInsert = textInsert.substring( commonlength );\n\t\t\t\t\t\t\ttextDelete = textDelete.substring( commonlength );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Factor out any common suffixies.\n\t\t\t\t\t\tcommonlength = this.diffCommonSuffix( textInsert, textDelete );\n\t\t\t\t\t\tif ( commonlength !== 0 ) {\n\t\t\t\t\t\t\tdiffs[ pointer ][ 1 ] = textInsert.substring( textInsert.length -\n\t\t\t\t\t\t\t\t\tcommonlength ) + diffs[ pointer ][ 1 ];\n\t\t\t\t\t\t\ttextInsert = textInsert.substring( 0, textInsert.length -\n\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t\ttextDelete = textDelete.substring( 0, textDelete.length -\n\t\t\t\t\t\t\t\tcommonlength );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Delete the offending records and add the merged ones.\n\t\t\t\t\tif ( countDelete === 0 ) {\n\t\t\t\t\t\tdiffs.splice( pointer - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_INSERT, textInsert ] );\n\t\t\t\t\t} else if ( countInsert === 0 ) {\n\t\t\t\t\t\tdiffs.splice( pointer - countDelete,\n\t\t\t\t\t\t\tcountDelete + countInsert, [ DIFF_DELETE, textDelete ] );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdiffs.splice(\n\t\t\t\t\t\t\tpointer - countDelete - countInsert,\n\t\t\t\t\t\t\tcountDelete + countInsert,\n\t\t\t\t\t\t\t[ DIFF_DELETE, textDelete ], [ DIFF_INSERT, textInsert ]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tpointer = pointer - countDelete - countInsert +\n\t\t\t\t\t\t( countDelete ? 1 : 0 ) + ( countInsert ? 1 : 0 ) + 1;\n\t\t\t\t} else if ( pointer !== 0 && diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL ) {\n\n\t\t\t\t\t// Merge this equality with the previous one.\n\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer, 1 );\n\t\t\t\t} else {\n\t\t\t\t\tpointer++;\n\t\t\t\t}\n\t\t\t\tcountInsert = 0;\n\t\t\t\tcountDelete = 0;\n\t\t\t\ttextDelete = \"\";\n\t\t\t\ttextInsert = \"\";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ( diffs[ diffs.length - 1 ][ 1 ] === \"\" ) {\n\t\t\tdiffs.pop(); // Remove the dummy entry at the end.\n\t\t}\n\n\t\t// Second pass: look for single edits surrounded on both sides by equalities\n\t\t// which can be shifted sideways to eliminate an equality.\n\t\t// e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\t\tchanges = false;\n\t\tpointer = 1;\n\n\t\t// Intentionally ignore the first and last element (don't need checking).\n\t\twhile ( pointer < diffs.length - 1 ) {\n\t\t\tif ( diffs[ pointer - 1 ][ 0 ] === DIFF_EQUAL &&\n\t\t\t\t\tdiffs[ pointer + 1 ][ 0 ] === DIFF_EQUAL ) {\n\n\t\t\t\tdiffPointer = diffs[ pointer ][ 1 ];\n\t\t\t\tposition = diffPointer.substring(\n\t\t\t\t\tdiffPointer.length - diffs[ pointer - 1 ][ 1 ].length\n\t\t\t\t);\n\n\t\t\t\t// This is a single edit surrounded by equalities.\n\t\t\t\tif ( position === diffs[ pointer - 1 ][ 1 ] ) {\n\n\t\t\t\t\t// Shift the edit over the previous equality.\n\t\t\t\t\tdiffs[ pointer ][ 1 ] = diffs[ pointer - 1 ][ 1 ] +\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( 0, diffs[ pointer ][ 1 ].length -\n\t\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ].length );\n\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] =\n\t\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] + diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer - 1, 1 );\n\t\t\t\t\tchanges = true;\n\t\t\t\t} else if ( diffPointer.substring( 0, diffs[ pointer + 1 ][ 1 ].length ) ===\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ] ) {\n\n\t\t\t\t\t// Shift the edit over the next equality.\n\t\t\t\t\tdiffs[ pointer - 1 ][ 1 ] += diffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs[ pointer ][ 1 ] =\n\t\t\t\t\t\tdiffs[ pointer ][ 1 ].substring( diffs[ pointer + 1 ][ 1 ].length ) +\n\t\t\t\t\t\tdiffs[ pointer + 1 ][ 1 ];\n\t\t\t\t\tdiffs.splice( pointer + 1, 1 );\n\t\t\t\t\tchanges = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpointer++;\n\t\t}\n\n\t\t// If shifts were made, the diff needs reordering and another shift sweep.\n\t\tif ( changes ) {\n\t\t\tthis.diffCleanupMerge( diffs );\n\t\t}\n\t};\n\n\treturn function( o, n ) {\n\t\tvar diff, output, text;\n\t\tdiff = new DiffMatchPatch();\n\t\toutput = diff.DiffMain( o, n );\n\t\tdiff.diffCleanupEfficiency( output );\n\t\ttext = diff.diffPrettyHtml( output );\n\n\t\treturn text;\n\t};\n}() );\n\n}() );\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/qunitjs/qunit/qunit.js\n// module id = 23\n// module chunks = 1","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/process/browser.js\n// module id = 24\n// module chunks = 1","module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/webpack/buildin/module.js\n// module id = 25\n// module chunks = 1","/**\n * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n *\n * https://github.com/twada/qunit-tap\n * version: 1.5.1\n *\n * Copyright (c) 2010-2016 Takuto Wada\n * Dual licensed under the MIT and GPLv2 licenses.\n *   https://raw.github.com/twada/qunit-tap/master/MIT-LICENSE.txt\n *   https://raw.github.com/twada/qunit-tap/master/GPL-LICENSE.txt\n *\n * A part of extend function is:\n *   Copyright 2012 jQuery Foundation and other contributors\n *   Released under the MIT license.\n *   http://jquery.org/license\n */\n(function (root, factory) {\n    'use strict';\n\n    // using returnExports UMD pattern\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.qunitTap = factory();\n    }\n}(this, function () {\n    'use strict';\n\n    var qunitTapVersion = '1.5.1',\n        slice = Array.prototype.slice;\n\n    // borrowed from qunit.js\n    function extend (a, b) {\n        var prop;\n        for (prop in b) {\n            if (b.hasOwnProperty(prop)) {\n                if (typeof b[prop] === 'undefined') {\n                    delete a[prop];\n                } else {\n                    a[prop] = b[prop];\n                }\n            }\n        }\n        return a;\n    }\n\n    function indexOf (ary, element) {\n        var i;\n        for (i = 0; i < ary.length; i += 1) {\n            if (ary[i] === element) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function removeElement (ary, element) {\n        var index = indexOf(ary, element);\n        if (index !== -1) {\n            return ary.splice(index, 1);\n        } else {\n            return [];\n        }\n    }\n\n    function isPlanRequired (conf) {\n        return (typeof conf !== 'undefined' && typeof conf.requireExpects !== 'undefined' && conf.requireExpects);\n    }\n\n    function isPassed (details) {\n        return !!(details.result);\n    }\n\n    function isFailed (details) {\n        return !(isPassed(details));\n    }\n\n    function isAssertOkFailed (details) {\n        return isFailed(details) && typeof details.expected === 'undefined' && typeof details.actual === 'undefined';\n    }\n\n    function escapeLineEndings (str) {\n        return str.replace(/(\\r?\\n)/g, '$&# ');\n    }\n\n    function ltrim (str) {\n        return str.replace(/^\\s+/, '');\n    }\n\n    function noop (obj) {\n        return obj;\n    }\n\n    function render (desc, fieldName, fieldValue, formatter) {\n        desc.push(fieldName + ': ' + formatter(fieldValue));\n    }\n\n    function renderIf (shouldRender, desc, fieldName, fieldValue, formatter) {\n        if (!shouldRender || typeof fieldValue === 'undefined') {\n            return;\n        }\n        render(desc, fieldName, fieldValue, formatter);\n    }\n\n    function formatTestLine (testLine, rest) {\n        if (!rest) {\n            return testLine;\n        }\n        return testLine + ' - ' + escapeLineEndings(rest);\n    }\n\n    var createCallbackAppenderFor = function (qu) {\n        return function (subject, observer, event) {\n            var originalLoggingCallback = subject[event],\n                callback = function () {\n                    // make listener methods (moduleStart,testStart,log, ...) overridable.\n                    observer[event].apply(observer, slice.apply(arguments));\n                };\n            originalLoggingCallback(callback);\n            return callback;\n        };\n    };\n\n\n    /**\n     * QUnit-TAP - A TAP Output Producer Plugin for QUnit\n     * @param qunitObject QUnit object reference.\n     * @param printLikeFunction print-like function for TAP output (assumes line-separator is added by this function for each call).\n     * @param options configuration options to customize default behavior.\n     * @return object to provide QUnit-TAP API and customization subject.\n     */\n    function qunitTap(qunitObject, printLikeFunction, options) {\n        if (!qunitObject) {\n            throw new Error('should pass QUnit object reference. Please check QUnit\\'s \"require\" path if you are using Node.js (or any CommonJS env).');\n        } else if (typeof printLikeFunction !== 'function') {\n            throw new Error('should pass print-like function');\n        }\n\n        var qu = qunitObject,\n            tap = {},\n            deprecateOption = function deprecateOption (optionName, fallback) {\n                // option deprecation and fallback function\n                if (!options || typeof options !== 'object') {\n                    return;\n                }\n                if (typeof options[optionName] === 'undefined') {\n                    return;\n                }\n                printLikeFunction('# WARNING: Option \"' + optionName + '\" is deprecated and will be removed in future version.');\n                fallback(options[optionName]);\n            },\n            targetEvents = [\n                'moduleStart',\n                'testStart',\n                'log',\n                'testDone',\n                'done'\n            ],\n            registeredCallbacks = {},\n            explain = (function () {\n                if (typeof qu.dump !== 'undefined' && typeof qu.dump.parse === 'function') {\n                    return function explain (obj) {\n                        return qu.dump.parse(obj);\n                    };\n                }\n                if (typeof qu.jsDump !== 'undefined' && typeof qu.jsDump.parse === 'function') {\n                    return function explain (obj) {\n                        return qu.jsDump.parse(obj);\n                    };\n                }\n                return noop;\n            })();\n\n        tap.config = extend(\n            {\n                initialCount: 1,\n                showModuleNameOnFailure: true,\n                showTestNameOnFailure: true,\n                showExpectationOnFailure: true,\n                showSourceOnFailure: true\n            },\n            options\n        );\n        deprecateOption('noPlan', function (flag) {\n            printLikeFunction('# Now QUnit-TAP works as with \"noPlan: true\" by default. If you want to delare plan explicitly, please use \"QUnit.config.requireExpects\" option instead.');\n            tap.config.noPlan = flag;\n        });\n        deprecateOption('count', function (count) {\n            tap.config.initialCount = (count + 1);\n        });\n        deprecateOption('showDetailsOnFailure', function (flag) {\n            tap.config.showModuleNameOnFailure = flag;\n            tap.config.showTestNameOnFailure = flag;\n            tap.config.showExpectationOnFailure = flag;\n            tap.config.showSourceOnFailure = flag;\n        });\n        tap.VERSION = qunitTapVersion;\n        tap.puts = printLikeFunction;\n        tap.count = tap.config.initialCount - 1;\n        tap.expectedCount = tap.config.initialCount - 1;\n\n        function isEnabled (configName) {\n            return tap.config[configName];\n        }\n\n        function formatDetails (details) {\n            if (isPassed(details)) {\n                return details.message;\n            }\n            var desc = [];\n            if (details.message) {\n                desc.push(details.message);\n            }\n            if (isEnabled('showExpectationOnFailure') && !(isAssertOkFailed(details))) {\n                render(desc, 'expected', details.expected, explain);\n                render(desc, 'got', details.actual, explain);\n            }\n            renderIf(isEnabled('showTestNameOnFailure'), desc, 'test', details.name, noop);\n            renderIf(isEnabled('showModuleNameOnFailure'), desc, 'module', details.module, noop);\n            renderIf(isEnabled('showSourceOnFailure'), desc, 'source', details.source, ltrim);\n            return desc.join(', ');\n        }\n\n        function printPlanLine (toCount) {\n            tap.puts(tap.config.initialCount + '..' + toCount);\n        }\n\n        function unsubscribeEvent (eventName) {\n            var listeners;\n            if (indexOf(targetEvents, eventName) === -1) {\n                return;\n            }\n            listeners = qu.config[eventName];\n            if (typeof listeners === 'undefined') {\n                return;\n            }\n            removeElement(listeners, registeredCallbacks[eventName]);\n        }\n\n        function unsubscribeEvents (eventNames) {\n            var i;\n            for (i = 0; i < eventNames.length; i += 1) {\n                unsubscribeEvent(eventNames[i]);\n            }\n        }\n\n        tap.explain = explain;\n\n        tap.note = function note (obj) {\n            tap.puts(escapeLineEndings('# ' + obj));\n        };\n\n        tap.diag = function diag (obj) {\n            tap.note(obj);\n            return false;\n        };\n\n        tap.moduleStart = function moduleStart (arg) {\n            var name = (typeof arg === 'string') ? arg : arg.name;\n            tap.note('module: ' + name);\n        };\n\n        tap.testStart = function testStart (arg) {\n            var name = (typeof arg === 'string') ? arg : arg.name;\n            tap.note('test: ' + name);\n        };\n\n        tap.log = function log (details) {\n            var testLine = '';\n            tap.count += 1;\n            if (isFailed(details)) {\n                testLine += 'not ';\n            }\n            testLine += ('ok ' + tap.count);\n            tap.puts(formatTestLine(testLine, formatDetails(details)));\n        };\n\n        tap.testDone = function testDone () {\n            if (isPlanRequired(qu.config)) {\n                tap.expectedCount += qu.config.current.expected;\n            }\n        };\n\n        tap.done = function done () {\n            if (typeof tap.config.noPlan !== 'undefined' && !(tap.config.noPlan)) {\n                // Do nothing until removal of 'noPlan' option.\n            } else if (isPlanRequired(qu.config)) {\n                printPlanLine(tap.expectedCount);\n            } else {\n                printPlanLine(tap.count);\n            }\n        };\n\n        tap.unsubscribe = function unsubscribe () {\n            if (typeof qu.config === 'undefined') {\n                return;\n            }\n            if (arguments.length === 0) {\n                unsubscribeEvents(targetEvents);\n            } else {\n                unsubscribeEvents(slice.apply(arguments));\n            }\n        };\n\n        (function () {\n            var appendCallback = createCallbackAppenderFor(qu),\n                eventName, i, callback;\n            for (i = 0; i < targetEvents.length; i += 1) {\n                eventName = targetEvents[i];\n                callback = appendCallback(qu, tap, eventName);\n                registeredCallbacks[eventName] = callback;\n            }\n        })();\n\n        return tap;\n    }\n\n    qunitTap.qunitTap = function () {\n        throw new Error('[BC BREAK] Since 1.4.0, QUnit-TAP exports single qunitTap function as module.exports. Therefore, require(\"qunit-tap\") returns qunitTap function itself. Please fix your code if you are using Node.js (or any CommonJS env).');\n    };\n\n    // using substack pattern (export single function)\n    return qunitTap;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/qunit-tap/lib/qunit-tap.js\n// module id = 26\n// module chunks = 1","'use strict';\n\n/* global QUnit, qunitTap */\n\nvar qunit_started = false;\n\n/* Always use explicit start */\nQUnit.config.autostart = false;\n\n/*\n * HACK: phantomjs doesn't handle uncaught exceptions as it should if\n * window.onerror is non-null, even when that handler returns false\n * (expecting that the browser default behavior will occur).\n *\n * So remove the qunit window.onerror handler until the tests actually\n * start, and any errors become part of the test suite results.\n */\nvar qunit_onerror = window.onerror;\nwindow.onerror = null;\nQUnit.begin(function() {\n    window.onerror = function(error, file, line) {\n        var ret = false;\n        if (qunit_onerror)\n            ret = qunit_onerror(error, file, line);\n\n        /*\n         * If a global exception happens during an async test\n         * then that test won't be able to call the start() function\n         * to move to the next test, so call it here.\n         */\n        if (QUnit.config.current && QUnit.config.current.async)\n            QUnit.start();\n\n        return ret;\n    };\n});\n\nQUnit.moduleStart(function() {\n    qunit_started = true;\n});\n\nQUnit.done(function() {\n    console.log(\"cockpittest-tap-done\");\n    window.onerror = null;\n});\n/*\n * Now initialize qunit-tap\n *\n * When not running under tap-phantom this stuff will just show up in\n * the console. We print out a special canary at the end of the tests\n * so that tap-phantom can know when the testing is done.\n *\n * In addition double check for a test file that doesn't properly call\n * QUnit.start() after its done setting up its tests.\n *\n * We also want to insert the current test name into all tap lines.\n */\nvar tap_regex = /^((not )?ok [0-9]+ (- )?)(.*)$/;\nqunitTap(QUnit, function() {\n    if (arguments.length == 1 && QUnit.config.current) {\n        var match = tap_regex.exec(arguments[0]);\n        if (match) {\n            console.log(match[1] + QUnit.config.current.testName + \": \" + match[4]);\n            return;\n        }\n    }\n    console.log.apply(console, arguments);\n});\n\nwindow.setTimeout(function() {\n    if (!qunit_started) {\n        console.log(\"QUnit not started by test\");\n        console.log(\"cockpittest-tap-error\");\n    }\n}, 20000);\n\nwindow.tests_included = true;\n\nif (module && module.exports)\n    module.exports = QUnit;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../pkg/lib/qunit-config.js\n// module id = 27\n// module chunks = 1"],"sourceRoot":""}