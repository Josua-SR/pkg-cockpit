!function(e) {
    function t(n) {
        if (a[n]) return a[n].exports;
        var s = a[n] = {
            exports: {},
            id: n,
            loaded: !1
        };
        return e[n].call(s.exports, s, s.exports, t), s.loaded = !0, s.exports;
    }
    var a = {};
    return t.m = e, t.c = a, t.p = "", t(0);
}([ function(e, t, a) {
    a(155), e.exports = a(158);
}, , function(e, t) {
    e.exports = cockpit;
}, function(e, t, a) {
    (function(e) {
        !function(t, a) {
            e.exports = a();
        }(this, function() {
            "use strict";
            function t() {
                return Hn.apply(null, arguments);
            }
            function n(e) {
                Hn = e;
            }
            function s(e) {
                return e instanceof Array || "[object Array]" === Object.prototype.toString.call(e);
            }
            function i(e) {
                return null != e && "[object Object]" === Object.prototype.toString.call(e);
            }
            function r(e) {
                if (Object.getOwnPropertyNames) return 0 === Object.getOwnPropertyNames(e).length;
                var t;
                for (t in e) if (e.hasOwnProperty(t)) return !1;
                return !0;
            }
            function d(e) {
                return void 0 === e;
            }
            function o(e) {
                return "number" == typeof e || "[object Number]" === Object.prototype.toString.call(e);
            }
            function _(e) {
                return e instanceof Date || "[object Date]" === Object.prototype.toString.call(e);
            }
            function u(e, t) {
                var a, n = [];
                for (a = 0; a < e.length; ++a) n.push(t(e[a], a));
                return n;
            }
            function l(e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
            }
            function m(e, t) {
                for (var a in t) l(t, a) && (e[a] = t[a]);
                return l(t, "toString") && (e.toString = t.toString), l(t, "valueOf") && (e.valueOf = t.valueOf), 
                e;
            }
            function c(e, t, a, n) {
                return Tt(e, t, a, n, !0).utc();
            }
            function h() {
                return {
                    empty: !1,
                    unusedTokens: [],
                    unusedInput: [],
                    overflow: -2,
                    charsLeftOver: 0,
                    nullInput: !1,
                    invalidMonth: null,
                    invalidFormat: !1,
                    userInvalidated: !1,
                    iso: !1,
                    parsedDateParts: [],
                    meridiem: null,
                    rfc2822: !1,
                    weekdayMismatch: !1
                };
            }
            function f(e) {
                return null == e._pf && (e._pf = h()), e._pf;
            }
            function M(e) {
                if (null == e._isValid) {
                    var t = f(e), a = jn.call(t.parsedDateParts, function(e) {
                        return null != e;
                    }), n = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidMonth && !t.invalidWeekday && !t.weekdayMismatch && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && a);
                    if (e._strict && (n = n && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), 
                    null != Object.isFrozen && Object.isFrozen(e)) return n;
                    e._isValid = n;
                }
                return e._isValid;
            }
            function p(e) {
                var t = c(NaN);
                return null != e ? m(f(t), e) : f(t).userInvalidated = !0, t;
            }
            function y(e, t) {
                var a, n, s;
                if (d(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), d(t._i) || (e._i = t._i), 
                d(t._f) || (e._f = t._f), d(t._l) || (e._l = t._l), d(t._strict) || (e._strict = t._strict), 
                d(t._tzm) || (e._tzm = t._tzm), d(t._isUTC) || (e._isUTC = t._isUTC), d(t._offset) || (e._offset = t._offset), 
                d(t._pf) || (e._pf = f(t)), d(t._locale) || (e._locale = t._locale), xn.length > 0) for (a = 0; a < xn.length; a++) n = xn[a], 
                s = t[n], d(s) || (e[n] = s);
                return e;
            }
            function L(e) {
                y(this, e), this._d = new Date(null != e._d ? e._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), 
                On === !1 && (On = !0, t.updateOffset(this), On = !1);
            }
            function Y(e) {
                return e instanceof L || null != e && null != e._isAMomentObject;
            }
            function k(e) {
                return e < 0 ? Math.ceil(e) || 0 : Math.floor(e);
            }
            function g(e) {
                var t = +e, a = 0;
                return 0 !== t && isFinite(t) && (a = k(t)), a;
            }
            function D(e, t, a) {
                var n, s = Math.min(e.length, t.length), i = Math.abs(e.length - t.length), r = 0;
                for (n = 0; n < s; n++) (a && e[n] !== t[n] || !a && g(e[n]) !== g(t[n])) && r++;
                return r + i;
            }
            function v(e) {
                t.suppressDeprecationWarnings === !1 && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + e);
            }
            function w(e, a) {
                var n = !0;
                return m(function() {
                    if (null != t.deprecationHandler && t.deprecationHandler(null, e), n) {
                        for (var s, i = [], r = 0; r < arguments.length; r++) {
                            if (s = "", "object" == typeof arguments[r]) {
                                s += "\n[" + r + "] ";
                                for (var d in arguments[0]) s += d + ": " + arguments[0][d] + ", ";
                                s = s.slice(0, -2);
                            } else s = arguments[r];
                            i.push(s);
                        }
                        v(e + "\nArguments: " + Array.prototype.slice.call(i).join("") + "\n" + new Error().stack), 
                        n = !1;
                    }
                    return a.apply(this, arguments);
                }, a);
            }
            function T(e, a) {
                null != t.deprecationHandler && t.deprecationHandler(e, a), Pn[e] || (v(a), Pn[e] = !0);
            }
            function b(e) {
                return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e);
            }
            function S(e) {
                var t, a;
                for (a in e) t = e[a], b(t) ? this[a] = t : this["_" + a] = t;
                this._config = e, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
            }
            function H(e, t) {
                var a, n = m({}, e);
                for (a in t) l(t, a) && (i(e[a]) && i(t[a]) ? (n[a] = {}, m(n[a], e[a]), m(n[a], t[a])) : null != t[a] ? n[a] = t[a] : delete n[a]);
                for (a in e) l(e, a) && !l(t, a) && i(e[a]) && (n[a] = m({}, n[a]));
                return n;
            }
            function j(e) {
                null != e && this.set(e);
            }
            function x(e, t, a) {
                var n = this._calendar[e] || this._calendar.sameElse;
                return b(n) ? n.call(t, a) : n;
            }
            function O(e) {
                var t = this._longDateFormat[e], a = this._longDateFormat[e.toUpperCase()];
                return t || !a ? t : (this._longDateFormat[e] = a.replace(/MMMM|MM|DD|dddd/g, function(e) {
                    return e.slice(1);
                }), this._longDateFormat[e]);
            }
            function P() {
                return this._invalidDate;
            }
            function W(e) {
                return this._ordinal.replace("%d", e);
            }
            function E(e, t, a, n) {
                var s = this._relativeTime[a];
                return b(s) ? s(e, t, a, n) : s.replace(/%d/i, e);
            }
            function F(e, t) {
                var a = this._relativeTime[e > 0 ? "future" : "past"];
                return b(a) ? a(t) : a.replace(/%s/i, t);
            }
            function A(e, t) {
                var a = e.toLowerCase();
                Nn[a] = Nn[a + "s"] = Nn[t] = e;
            }
            function C(e) {
                return "string" == typeof e ? Nn[e] || Nn[e.toLowerCase()] : void 0;
            }
            function U(e) {
                var t, a, n = {};
                for (a in e) l(e, a) && (t = C(a), t && (n[t] = e[a]));
                return n;
            }
            function z(e, t) {
                Jn[e] = t;
            }
            function N(e) {
                var t = [];
                for (var a in e) t.push({
                    unit: a,
                    priority: Jn[a]
                });
                return t.sort(function(e, t) {
                    return e.priority - t.priority;
                }), t;
            }
            function J(e, t, a) {
                var n = "" + Math.abs(e), s = t - n.length, i = e >= 0;
                return (i ? a ? "+" : "" : "-") + Math.pow(10, Math.max(0, s)).toString().substr(1) + n;
            }
            function I(e, t, a, n) {
                var s = n;
                "string" == typeof n && (s = function() {
                    return this[n]();
                }), e && (Gn[e] = s), t && (Gn[t[0]] = function() {
                    return J(s.apply(this, arguments), t[1], t[2]);
                }), a && (Gn[a] = function() {
                    return this.localeData().ordinal(s.apply(this, arguments), e);
                });
            }
            function R(e) {
                return e.match(/\[[\s\S]/) ? e.replace(/^\[|\]$/g, "") : e.replace(/\\/g, "");
            }
            function V(e) {
                var t, a, n = e.match(In);
                for (t = 0, a = n.length; t < a; t++) Gn[n[t]] ? n[t] = Gn[n[t]] : n[t] = R(n[t]);
                return function(t) {
                    var s, i = "";
                    for (s = 0; s < a; s++) i += b(n[s]) ? n[s].call(t, e) : n[s];
                    return i;
                };
            }
            function G(e, t) {
                return e.isValid() ? (t = B(t, e.localeData()), Vn[t] = Vn[t] || V(t), Vn[t](e)) : e.localeData().invalidDate();
            }
            function B(e, t) {
                function a(e) {
                    return t.longDateFormat(e) || e;
                }
                var n = 5;
                for (Rn.lastIndex = 0; n >= 0 && Rn.test(e); ) e = e.replace(Rn, a), Rn.lastIndex = 0, 
                n -= 1;
                return e;
            }
            function $(e, t, a) {
                us[e] = b(t) ? t : function(e, n) {
                    return e && a ? a : t;
                };
            }
            function q(e, t) {
                return l(us, e) ? us[e](t._strict, t._locale) : new RegExp(K(e));
            }
            function K(e) {
                return Z(e.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(e, t, a, n, s) {
                    return t || a || n || s;
                }));
            }
            function Z(e) {
                return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
            }
            function Q(e, t) {
                var a, n = t;
                for ("string" == typeof e && (e = [ e ]), o(t) && (n = function(e, a) {
                    a[t] = g(e);
                }), a = 0; a < e.length; a++) ls[e[a]] = n;
            }
            function X(e, t) {
                Q(e, function(e, a, n, s) {
                    n._w = n._w || {}, t(e, n._w, n, s);
                });
            }
            function ee(e, t, a) {
                null != t && l(ls, e) && ls[e](t, a._a, a, e);
            }
            function te(e) {
                return ae(e) ? 366 : 365;
            }
            function ae(e) {
                return e % 4 === 0 && e % 100 !== 0 || e % 400 === 0;
            }
            function ne() {
                return ae(this.year());
            }
            function se(e, a) {
                return function(n) {
                    return null != n ? (re(this, e, n), t.updateOffset(this, a), this) : ie(this, e);
                };
            }
            function ie(e, t) {
                return e.isValid() ? e._d["get" + (e._isUTC ? "UTC" : "") + t]() : NaN;
            }
            function re(e, t, a) {
                e.isValid() && !isNaN(a) && ("FullYear" === t && ae(e.year()) && 1 === e.month() && 29 === e.date() ? e._d["set" + (e._isUTC ? "UTC" : "") + t](a, e.month(), ue(a, e.month())) : e._d["set" + (e._isUTC ? "UTC" : "") + t](a));
            }
            function de(e) {
                return e = C(e), b(this[e]) ? this[e]() : this;
            }
            function oe(e, t) {
                if ("object" == typeof e) {
                    e = U(e);
                    for (var a = N(e), n = 0; n < a.length; n++) this[a[n].unit](e[a[n].unit]);
                } else if (e = C(e), b(this[e])) return this[e](t);
                return this;
            }
            function _e(e, t) {
                return (e % t + t) % t;
            }
            function ue(e, t) {
                if (isNaN(e) || isNaN(t)) return NaN;
                var a = _e(t, 12);
                return e += (t - a) / 12, 1 === a ? ae(e) ? 29 : 28 : 31 - a % 7 % 2;
            }
            function le(e, t) {
                return e ? s(this._months) ? this._months[e.month()] : this._months[(this._months.isFormat || Ds).test(t) ? "format" : "standalone"][e.month()] : s(this._months) ? this._months : this._months.standalone;
            }
            function me(e, t) {
                return e ? s(this._monthsShort) ? this._monthsShort[e.month()] : this._monthsShort[Ds.test(t) ? "format" : "standalone"][e.month()] : s(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
            }
            function ce(e, t, a) {
                var n, s, i, r = e.toLocaleLowerCase();
                if (!this._monthsParse) for (this._monthsParse = [], this._longMonthsParse = [], 
                this._shortMonthsParse = [], n = 0; n < 12; ++n) i = c([ 2e3, n ]), this._shortMonthsParse[n] = this.monthsShort(i, "").toLocaleLowerCase(), 
                this._longMonthsParse[n] = this.months(i, "").toLocaleLowerCase();
                return a ? "MMM" === t ? (s = ks.call(this._shortMonthsParse, r), s !== -1 ? s : null) : (s = ks.call(this._longMonthsParse, r), 
                s !== -1 ? s : null) : "MMM" === t ? (s = ks.call(this._shortMonthsParse, r), s !== -1 ? s : (s = ks.call(this._longMonthsParse, r), 
                s !== -1 ? s : null)) : (s = ks.call(this._longMonthsParse, r), s !== -1 ? s : (s = ks.call(this._shortMonthsParse, r), 
                s !== -1 ? s : null));
            }
            function he(e, t, a) {
                var n, s, i;
                if (this._monthsParseExact) return ce.call(this, e, t, a);
                for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), 
                n = 0; n < 12; n++) {
                    if (s = c([ 2e3, n ]), a && !this._longMonthsParse[n] && (this._longMonthsParse[n] = new RegExp("^" + this.months(s, "").replace(".", "") + "$", "i"), 
                    this._shortMonthsParse[n] = new RegExp("^" + this.monthsShort(s, "").replace(".", "") + "$", "i")), 
                    a || this._monthsParse[n] || (i = "^" + this.months(s, "") + "|^" + this.monthsShort(s, ""), 
                    this._monthsParse[n] = new RegExp(i.replace(".", ""), "i")), a && "MMMM" === t && this._longMonthsParse[n].test(e)) return n;
                    if (a && "MMM" === t && this._shortMonthsParse[n].test(e)) return n;
                    if (!a && this._monthsParse[n].test(e)) return n;
                }
            }
            function fe(e, t) {
                var a;
                if (!e.isValid()) return e;
                if ("string" == typeof t) if (/^\d+$/.test(t)) t = g(t); else if (t = e.localeData().monthsParse(t), 
                !o(t)) return e;
                return a = Math.min(e.date(), ue(e.year(), t)), e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, a), 
                e;
            }
            function Me(e) {
                return null != e ? (fe(this, e), t.updateOffset(this, !0), this) : ie(this, "Month");
            }
            function pe() {
                return ue(this.year(), this.month());
            }
            function ye(e) {
                return this._monthsParseExact ? (l(this, "_monthsRegex") || Ye.call(this), e ? this._monthsShortStrictRegex : this._monthsShortRegex) : (l(this, "_monthsShortRegex") || (this._monthsShortRegex = Ts), 
                this._monthsShortStrictRegex && e ? this._monthsShortStrictRegex : this._monthsShortRegex);
            }
            function Le(e) {
                return this._monthsParseExact ? (l(this, "_monthsRegex") || Ye.call(this), e ? this._monthsStrictRegex : this._monthsRegex) : (l(this, "_monthsRegex") || (this._monthsRegex = bs), 
                this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex);
            }
            function Ye() {
                function e(e, t) {
                    return t.length - e.length;
                }
                var t, a, n = [], s = [], i = [];
                for (t = 0; t < 12; t++) a = c([ 2e3, t ]), n.push(this.monthsShort(a, "")), s.push(this.months(a, "")), 
                i.push(this.months(a, "")), i.push(this.monthsShort(a, ""));
                for (n.sort(e), s.sort(e), i.sort(e), t = 0; t < 12; t++) n[t] = Z(n[t]), s[t] = Z(s[t]);
                for (t = 0; t < 24; t++) i[t] = Z(i[t]);
                this._monthsRegex = new RegExp("^(" + i.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, 
                this._monthsStrictRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + n.join("|") + ")", "i");
            }
            function ke(e, t, a, n, s, i, r) {
                var d = new Date(e, t, a, n, s, i, r);
                return e < 100 && e >= 0 && isFinite(d.getFullYear()) && d.setFullYear(e), d;
            }
            function ge(e) {
                var t = new Date(Date.UTC.apply(null, arguments));
                return e < 100 && e >= 0 && isFinite(t.getUTCFullYear()) && t.setUTCFullYear(e), 
                t;
            }
            function De(e, t, a) {
                var n = 7 + t - a, s = (7 + ge(e, 0, n).getUTCDay() - t) % 7;
                return -s + n - 1;
            }
            function ve(e, t, a, n, s) {
                var i, r, d = (7 + a - n) % 7, o = De(e, n, s), _ = 1 + 7 * (t - 1) + d + o;
                return _ <= 0 ? (i = e - 1, r = te(i) + _) : _ > te(e) ? (i = e + 1, r = _ - te(e)) : (i = e, 
                r = _), {
                    year: i,
                    dayOfYear: r
                };
            }
            function we(e, t, a) {
                var n, s, i = De(e.year(), t, a), r = Math.floor((e.dayOfYear() - i - 1) / 7) + 1;
                return r < 1 ? (s = e.year() - 1, n = r + Te(s, t, a)) : r > Te(e.year(), t, a) ? (n = r - Te(e.year(), t, a), 
                s = e.year() + 1) : (s = e.year(), n = r), {
                    week: n,
                    year: s
                };
            }
            function Te(e, t, a) {
                var n = De(e, t, a), s = De(e + 1, t, a);
                return (te(e) - n + s) / 7;
            }
            function be(e) {
                return we(e, this._week.dow, this._week.doy).week;
            }
            function Se() {
                return this._week.dow;
            }
            function He() {
                return this._week.doy;
            }
            function je(e) {
                var t = this.localeData().week(this);
                return null == e ? t : this.add(7 * (e - t), "d");
            }
            function xe(e) {
                var t = we(this, 1, 4).week;
                return null == e ? t : this.add(7 * (e - t), "d");
            }
            function Oe(e, t) {
                return "string" != typeof e ? e : isNaN(e) ? (e = t.weekdaysParse(e), "number" == typeof e ? e : null) : parseInt(e, 10);
            }
            function Pe(e, t) {
                return "string" == typeof e ? t.weekdaysParse(e) % 7 || 7 : isNaN(e) ? null : e;
            }
            function We(e, t) {
                return e ? s(this._weekdays) ? this._weekdays[e.day()] : this._weekdays[this._weekdays.isFormat.test(t) ? "format" : "standalone"][e.day()] : s(this._weekdays) ? this._weekdays : this._weekdays.standalone;
            }
            function Ee(e) {
                return e ? this._weekdaysShort[e.day()] : this._weekdaysShort;
            }
            function Fe(e) {
                return e ? this._weekdaysMin[e.day()] : this._weekdaysMin;
            }
            function Ae(e, t, a) {
                var n, s, i, r = e.toLocaleLowerCase();
                if (!this._weekdaysParse) for (this._weekdaysParse = [], this._shortWeekdaysParse = [], 
                this._minWeekdaysParse = [], n = 0; n < 7; ++n) i = c([ 2e3, 1 ]).day(n), this._minWeekdaysParse[n] = this.weekdaysMin(i, "").toLocaleLowerCase(), 
                this._shortWeekdaysParse[n] = this.weekdaysShort(i, "").toLocaleLowerCase(), this._weekdaysParse[n] = this.weekdays(i, "").toLocaleLowerCase();
                return a ? "dddd" === t ? (s = ks.call(this._weekdaysParse, r), s !== -1 ? s : null) : "ddd" === t ? (s = ks.call(this._shortWeekdaysParse, r), 
                s !== -1 ? s : null) : (s = ks.call(this._minWeekdaysParse, r), s !== -1 ? s : null) : "dddd" === t ? (s = ks.call(this._weekdaysParse, r), 
                s !== -1 ? s : (s = ks.call(this._shortWeekdaysParse, r), s !== -1 ? s : (s = ks.call(this._minWeekdaysParse, r), 
                s !== -1 ? s : null))) : "ddd" === t ? (s = ks.call(this._shortWeekdaysParse, r), 
                s !== -1 ? s : (s = ks.call(this._weekdaysParse, r), s !== -1 ? s : (s = ks.call(this._minWeekdaysParse, r), 
                s !== -1 ? s : null))) : (s = ks.call(this._minWeekdaysParse, r), s !== -1 ? s : (s = ks.call(this._weekdaysParse, r), 
                s !== -1 ? s : (s = ks.call(this._shortWeekdaysParse, r), s !== -1 ? s : null)));
            }
            function Ce(e, t, a) {
                var n, s, i;
                if (this._weekdaysParseExact) return Ae.call(this, e, t, a);
                for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], 
                this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), n = 0; n < 7; n++) {
                    if (s = c([ 2e3, 1 ]).day(n), a && !this._fullWeekdaysParse[n] && (this._fullWeekdaysParse[n] = new RegExp("^" + this.weekdays(s, "").replace(".", "\\.?") + "$", "i"), 
                    this._shortWeekdaysParse[n] = new RegExp("^" + this.weekdaysShort(s, "").replace(".", "\\.?") + "$", "i"), 
                    this._minWeekdaysParse[n] = new RegExp("^" + this.weekdaysMin(s, "").replace(".", "\\.?") + "$", "i")), 
                    this._weekdaysParse[n] || (i = "^" + this.weekdays(s, "") + "|^" + this.weekdaysShort(s, "") + "|^" + this.weekdaysMin(s, ""), 
                    this._weekdaysParse[n] = new RegExp(i.replace(".", ""), "i")), a && "dddd" === t && this._fullWeekdaysParse[n].test(e)) return n;
                    if (a && "ddd" === t && this._shortWeekdaysParse[n].test(e)) return n;
                    if (a && "dd" === t && this._minWeekdaysParse[n].test(e)) return n;
                    if (!a && this._weekdaysParse[n].test(e)) return n;
                }
            }
            function Ue(e) {
                if (!this.isValid()) return null != e ? this : NaN;
                var t = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
                return null != e ? (e = Oe(e, this.localeData()), this.add(e - t, "d")) : t;
            }
            function ze(e) {
                if (!this.isValid()) return null != e ? this : NaN;
                var t = (this.day() + 7 - this.localeData()._week.dow) % 7;
                return null == e ? t : this.add(e - t, "d");
            }
            function Ne(e) {
                if (!this.isValid()) return null != e ? this : NaN;
                if (null != e) {
                    var t = Pe(e, this.localeData());
                    return this.day(this.day() % 7 ? t : t - 7);
                }
                return this.day() || 7;
            }
            function Je(e) {
                return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ve.call(this), e ? this._weekdaysStrictRegex : this._weekdaysRegex) : (l(this, "_weekdaysRegex") || (this._weekdaysRegex = Os), 
                this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex);
            }
            function Ie(e) {
                return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ve.call(this), e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (l(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = Ps), 
                this._weekdaysShortStrictRegex && e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
            }
            function Re(e) {
                return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ve.call(this), e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (l(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = Ws), 
                this._weekdaysMinStrictRegex && e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
            }
            function Ve() {
                function e(e, t) {
                    return t.length - e.length;
                }
                var t, a, n, s, i, r = [], d = [], o = [], _ = [];
                for (t = 0; t < 7; t++) a = c([ 2e3, 1 ]).day(t), n = this.weekdaysMin(a, ""), s = this.weekdaysShort(a, ""), 
                i = this.weekdays(a, ""), r.push(n), d.push(s), o.push(i), _.push(n), _.push(s), 
                _.push(i);
                for (r.sort(e), d.sort(e), o.sort(e), _.sort(e), t = 0; t < 7; t++) d[t] = Z(d[t]), 
                o[t] = Z(o[t]), _[t] = Z(_[t]);
                this._weekdaysRegex = new RegExp("^(" + _.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, 
                this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + o.join("|") + ")", "i"), 
                this._weekdaysShortStrictRegex = new RegExp("^(" + d.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + r.join("|") + ")", "i");
            }
            function Ge() {
                return this.hours() % 12 || 12;
            }
            function Be() {
                return this.hours() || 24;
            }
            function $e(e, t) {
                I(e, 0, 0, function() {
                    return this.localeData().meridiem(this.hours(), this.minutes(), t);
                });
            }
            function qe(e, t) {
                return t._meridiemParse;
            }
            function Ke(e) {
                return "p" === (e + "").toLowerCase().charAt(0);
            }
            function Ze(e, t, a) {
                return e > 11 ? a ? "pm" : "PM" : a ? "am" : "AM";
            }
            function Qe(e) {
                return e ? e.toLowerCase().replace("_", "-") : e;
            }
            function Xe(e) {
                for (var t, a, n, s, i = 0; i < e.length; ) {
                    for (s = Qe(e[i]).split("-"), t = s.length, a = Qe(e[i + 1]), a = a ? a.split("-") : null; t > 0; ) {
                        if (n = et(s.slice(0, t).join("-"))) return n;
                        if (a && a.length >= t && D(s, a, !0) >= t - 1) break;
                        t--;
                    }
                    i++;
                }
                return Es;
            }
            function et(t) {
                var n = null;
                if (!Us[t] && "undefined" != typeof e && e && e.exports) try {
                    n = Es._abbr;
                    a(5)("./" + t), tt(n);
                } catch (e) {}
                return Us[t];
            }
            function tt(e, t) {
                var a;
                return e && (a = d(t) ? st(e) : at(e, t), a ? Es = a : "undefined" != typeof console && console.warn && console.warn("Locale " + e + " not found. Did you forget to load it?")), 
                Es._abbr;
            }
            function at(e, t) {
                if (null !== t) {
                    var a, n = Cs;
                    if (t.abbr = e, null != Us[e]) T("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), 
                    n = Us[e]._config; else if (null != t.parentLocale) if (null != Us[t.parentLocale]) n = Us[t.parentLocale]._config; else {
                        if (a = et(t.parentLocale), null == a) return zs[t.parentLocale] || (zs[t.parentLocale] = []), 
                        zs[t.parentLocale].push({
                            name: e,
                            config: t
                        }), null;
                        n = a._config;
                    }
                    return Us[e] = new j(H(n, t)), zs[e] && zs[e].forEach(function(e) {
                        at(e.name, e.config);
                    }), tt(e), Us[e];
                }
                return delete Us[e], null;
            }
            function nt(e, t) {
                if (null != t) {
                    var a, n, s = Cs;
                    n = et(e), null != n && (s = n._config), t = H(s, t), a = new j(t), a.parentLocale = Us[e], 
                    Us[e] = a, tt(e);
                } else null != Us[e] && (null != Us[e].parentLocale ? Us[e] = Us[e].parentLocale : null != Us[e] && delete Us[e]);
                return Us[e];
            }
            function st(e) {
                var t;
                if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e) return Es;
                if (!s(e)) {
                    if (t = et(e)) return t;
                    e = [ e ];
                }
                return Xe(e);
            }
            function it() {
                return Wn(Us);
            }
            function rt(e) {
                var t, a = e._a;
                return a && f(e).overflow === -2 && (t = a[cs] < 0 || a[cs] > 11 ? cs : a[hs] < 1 || a[hs] > ue(a[ms], a[cs]) ? hs : a[fs] < 0 || a[fs] > 24 || 24 === a[fs] && (0 !== a[Ms] || 0 !== a[ps] || 0 !== a[ys]) ? fs : a[Ms] < 0 || a[Ms] > 59 ? Ms : a[ps] < 0 || a[ps] > 59 ? ps : a[ys] < 0 || a[ys] > 999 ? ys : -1, 
                f(e)._overflowDayOfYear && (t < ms || t > hs) && (t = hs), f(e)._overflowWeeks && t === -1 && (t = Ls), 
                f(e)._overflowWeekday && t === -1 && (t = Ys), f(e).overflow = t), e;
            }
            function dt(e, t, a) {
                return null != e ? e : null != t ? t : a;
            }
            function ot(e) {
                var a = new Date(t.now());
                return e._useUTC ? [ a.getUTCFullYear(), a.getUTCMonth(), a.getUTCDate() ] : [ a.getFullYear(), a.getMonth(), a.getDate() ];
            }
            function _t(e) {
                var t, a, n, s, i, r = [];
                if (!e._d) {
                    for (n = ot(e), e._w && null == e._a[hs] && null == e._a[cs] && ut(e), null != e._dayOfYear && (i = dt(e._a[ms], n[ms]), 
                    (e._dayOfYear > te(i) || 0 === e._dayOfYear) && (f(e)._overflowDayOfYear = !0), 
                    a = ge(i, 0, e._dayOfYear), e._a[cs] = a.getUTCMonth(), e._a[hs] = a.getUTCDate()), 
                    t = 0; t < 3 && null == e._a[t]; ++t) e._a[t] = r[t] = n[t];
                    for (;t < 7; t++) e._a[t] = r[t] = null == e._a[t] ? 2 === t ? 1 : 0 : e._a[t];
                    24 === e._a[fs] && 0 === e._a[Ms] && 0 === e._a[ps] && 0 === e._a[ys] && (e._nextDay = !0, 
                    e._a[fs] = 0), e._d = (e._useUTC ? ge : ke).apply(null, r), s = e._useUTC ? e._d.getUTCDay() : e._d.getDay(), 
                    null != e._tzm && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), e._nextDay && (e._a[fs] = 24), 
                    e._w && "undefined" != typeof e._w.d && e._w.d !== s && (f(e).weekdayMismatch = !0);
                }
            }
            function ut(e) {
                var t, a, n, s, i, r, d, o;
                if (t = e._w, null != t.GG || null != t.W || null != t.E) i = 1, r = 4, a = dt(t.GG, e._a[ms], we(bt(), 1, 4).year), 
                n = dt(t.W, 1), s = dt(t.E, 1), (s < 1 || s > 7) && (o = !0); else {
                    i = e._locale._week.dow, r = e._locale._week.doy;
                    var _ = we(bt(), i, r);
                    a = dt(t.gg, e._a[ms], _.year), n = dt(t.w, _.week), null != t.d ? (s = t.d, (s < 0 || s > 6) && (o = !0)) : null != t.e ? (s = t.e + i, 
                    (t.e < 0 || t.e > 6) && (o = !0)) : s = i;
                }
                n < 1 || n > Te(a, i, r) ? f(e)._overflowWeeks = !0 : null != o ? f(e)._overflowWeekday = !0 : (d = ve(a, n, s, i, r), 
                e._a[ms] = d.year, e._dayOfYear = d.dayOfYear);
            }
            function lt(e) {
                var t, a, n, s, i, r, d = e._i, o = Ns.exec(d) || Js.exec(d);
                if (o) {
                    for (f(e).iso = !0, t = 0, a = Rs.length; t < a; t++) if (Rs[t][1].exec(o[1])) {
                        s = Rs[t][0], n = Rs[t][2] !== !1;
                        break;
                    }
                    if (null == s) return void (e._isValid = !1);
                    if (o[3]) {
                        for (t = 0, a = Vs.length; t < a; t++) if (Vs[t][1].exec(o[3])) {
                            i = (o[2] || " ") + Vs[t][0];
                            break;
                        }
                        if (null == i) return void (e._isValid = !1);
                    }
                    if (!n && null != i) return void (e._isValid = !1);
                    if (o[4]) {
                        if (!Is.exec(o[4])) return void (e._isValid = !1);
                        r = "Z";
                    }
                    e._f = s + (i || "") + (r || ""), Lt(e);
                } else e._isValid = !1;
            }
            function mt(e, t, a, n, s, i) {
                var r = [ ct(e), ws.indexOf(t), parseInt(a, 10), parseInt(n, 10), parseInt(s, 10) ];
                return i && r.push(parseInt(i, 10)), r;
            }
            function ct(e) {
                var t = parseInt(e, 10);
                return t <= 49 ? 2e3 + t : t <= 999 ? 1900 + t : t;
            }
            function ht(e) {
                return e.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
            }
            function ft(e, t, a) {
                if (e) {
                    var n = js.indexOf(e), s = new Date(t[0], t[1], t[2]).getDay();
                    if (n !== s) return f(a).weekdayMismatch = !0, a._isValid = !1, !1;
                }
                return !0;
            }
            function Mt(e, t, a) {
                if (e) return $s[e];
                if (t) return 0;
                var n = parseInt(a, 10), s = n % 100, i = (n - s) / 100;
                return 60 * i + s;
            }
            function pt(e) {
                var t = Bs.exec(ht(e._i));
                if (t) {
                    var a = mt(t[4], t[3], t[2], t[5], t[6], t[7]);
                    if (!ft(t[1], a, e)) return;
                    e._a = a, e._tzm = Mt(t[8], t[9], t[10]), e._d = ge.apply(null, e._a), e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), 
                    f(e).rfc2822 = !0;
                } else e._isValid = !1;
            }
            function yt(e) {
                var a = Gs.exec(e._i);
                return null !== a ? void (e._d = new Date(+a[1])) : (lt(e), void (e._isValid === !1 && (delete e._isValid, 
                pt(e), e._isValid === !1 && (delete e._isValid, t.createFromInputFallback(e)))));
            }
            function Lt(e) {
                if (e._f === t.ISO_8601) return void lt(e);
                if (e._f === t.RFC_2822) return void pt(e);
                e._a = [], f(e).empty = !0;
                var a, n, s, i, r, d = "" + e._i, o = d.length, _ = 0;
                for (s = B(e._f, e._locale).match(In) || [], a = 0; a < s.length; a++) i = s[a], 
                n = (d.match(q(i, e)) || [])[0], n && (r = d.substr(0, d.indexOf(n)), r.length > 0 && f(e).unusedInput.push(r), 
                d = d.slice(d.indexOf(n) + n.length), _ += n.length), Gn[i] ? (n ? f(e).empty = !1 : f(e).unusedTokens.push(i), 
                ee(i, n, e)) : e._strict && !n && f(e).unusedTokens.push(i);
                f(e).charsLeftOver = o - _, d.length > 0 && f(e).unusedInput.push(d), e._a[fs] <= 12 && f(e).bigHour === !0 && e._a[fs] > 0 && (f(e).bigHour = void 0), 
                f(e).parsedDateParts = e._a.slice(0), f(e).meridiem = e._meridiem, e._a[fs] = Yt(e._locale, e._a[fs], e._meridiem), 
                _t(e), rt(e);
            }
            function Yt(e, t, a) {
                var n;
                return null == a ? t : null != e.meridiemHour ? e.meridiemHour(t, a) : null != e.isPM ? (n = e.isPM(a), 
                n && t < 12 && (t += 12), n || 12 !== t || (t = 0), t) : t;
            }
            function kt(e) {
                var t, a, n, s, i;
                if (0 === e._f.length) return f(e).invalidFormat = !0, void (e._d = new Date(NaN));
                for (s = 0; s < e._f.length; s++) i = 0, t = y({}, e), null != e._useUTC && (t._useUTC = e._useUTC), 
                t._f = e._f[s], Lt(t), M(t) && (i += f(t).charsLeftOver, i += 10 * f(t).unusedTokens.length, 
                f(t).score = i, (null == n || i < n) && (n = i, a = t));
                m(e, a || t);
            }
            function gt(e) {
                if (!e._d) {
                    var t = U(e._i);
                    e._a = u([ t.year, t.month, t.day || t.date, t.hour, t.minute, t.second, t.millisecond ], function(e) {
                        return e && parseInt(e, 10);
                    }), _t(e);
                }
            }
            function Dt(e) {
                var t = new L(rt(vt(e)));
                return t._nextDay && (t.add(1, "d"), t._nextDay = void 0), t;
            }
            function vt(e) {
                var t = e._i, a = e._f;
                return e._locale = e._locale || st(e._l), null === t || void 0 === a && "" === t ? p({
                    nullInput: !0
                }) : ("string" == typeof t && (e._i = t = e._locale.preparse(t)), Y(t) ? new L(rt(t)) : (_(t) ? e._d = t : s(a) ? kt(e) : a ? Lt(e) : wt(e), 
                M(e) || (e._d = null), e));
            }
            function wt(e) {
                var a = e._i;
                d(a) ? e._d = new Date(t.now()) : _(a) ? e._d = new Date(a.valueOf()) : "string" == typeof a ? yt(e) : s(a) ? (e._a = u(a.slice(0), function(e) {
                    return parseInt(e, 10);
                }), _t(e)) : i(a) ? gt(e) : o(a) ? e._d = new Date(a) : t.createFromInputFallback(e);
            }
            function Tt(e, t, a, n, d) {
                var o = {};
                return a !== !0 && a !== !1 || (n = a, a = void 0), (i(e) && r(e) || s(e) && 0 === e.length) && (e = void 0), 
                o._isAMomentObject = !0, o._useUTC = o._isUTC = d, o._l = a, o._i = e, o._f = t, 
                o._strict = n, Dt(o);
            }
            function bt(e, t, a, n) {
                return Tt(e, t, a, n, !1);
            }
            function St(e, t) {
                var a, n;
                if (1 === t.length && s(t[0]) && (t = t[0]), !t.length) return bt();
                for (a = t[0], n = 1; n < t.length; ++n) t[n].isValid() && !t[n][e](a) || (a = t[n]);
                return a;
            }
            function Ht() {
                var e = [].slice.call(arguments, 0);
                return St("isBefore", e);
            }
            function jt() {
                var e = [].slice.call(arguments, 0);
                return St("isAfter", e);
            }
            function xt(e) {
                for (var t in e) if (ks.call(Qs, t) === -1 || null != e[t] && isNaN(e[t])) return !1;
                for (var a = !1, n = 0; n < Qs.length; ++n) if (e[Qs[n]]) {
                    if (a) return !1;
                    parseFloat(e[Qs[n]]) !== g(e[Qs[n]]) && (a = !0);
                }
                return !0;
            }
            function Ot() {
                return this._isValid;
            }
            function Pt() {
                return Qt(NaN);
            }
            function Wt(e) {
                var t = U(e), a = t.year || 0, n = t.quarter || 0, s = t.month || 0, i = t.week || 0, r = t.day || 0, d = t.hour || 0, o = t.minute || 0, _ = t.second || 0, u = t.millisecond || 0;
                this._isValid = xt(t), this._milliseconds = +u + 1e3 * _ + 6e4 * o + 1e3 * d * 60 * 60, 
                this._days = +r + 7 * i, this._months = +s + 3 * n + 12 * a, this._data = {}, this._locale = st(), 
                this._bubble();
            }
            function Et(e) {
                return e instanceof Wt;
            }
            function Ft(e) {
                return e < 0 ? Math.round(-1 * e) * -1 : Math.round(e);
            }
            function At(e, t) {
                I(e, 0, 0, function() {
                    var e = this.utcOffset(), a = "+";
                    return e < 0 && (e = -e, a = "-"), a + J(~~(e / 60), 2) + t + J(~~e % 60, 2);
                });
            }
            function Ct(e, t) {
                var a = (t || "").match(e);
                if (null === a) return null;
                var n = a[a.length - 1] || [], s = (n + "").match(Xs) || [ "-", 0, 0 ], i = +(60 * s[1]) + g(s[2]);
                return 0 === i ? 0 : "+" === s[0] ? i : -i;
            }
            function Ut(e, a) {
                var n, s;
                return a._isUTC ? (n = a.clone(), s = (Y(e) || _(e) ? e.valueOf() : bt(e).valueOf()) - n.valueOf(), 
                n._d.setTime(n._d.valueOf() + s), t.updateOffset(n, !1), n) : bt(e).local();
            }
            function zt(e) {
                return 15 * -Math.round(e._d.getTimezoneOffset() / 15);
            }
            function Nt(e, a, n) {
                var s, i = this._offset || 0;
                if (!this.isValid()) return null != e ? this : NaN;
                if (null != e) {
                    if ("string" == typeof e) {
                        if (e = Ct(ds, e), null === e) return this;
                    } else Math.abs(e) < 16 && !n && (e *= 60);
                    return !this._isUTC && a && (s = zt(this)), this._offset = e, this._isUTC = !0, 
                    null != s && this.add(s, "m"), i !== e && (!a || this._changeInProgress ? na(this, Qt(e - i, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, 
                    t.updateOffset(this, !0), this._changeInProgress = null)), this;
                }
                return this._isUTC ? i : zt(this);
            }
            function Jt(e, t) {
                return null != e ? ("string" != typeof e && (e = -e), this.utcOffset(e, t), this) : -this.utcOffset();
            }
            function It(e) {
                return this.utcOffset(0, e);
            }
            function Rt(e) {
                return this._isUTC && (this.utcOffset(0, e), this._isUTC = !1, e && this.subtract(zt(this), "m")), 
                this;
            }
            function Vt() {
                if (null != this._tzm) this.utcOffset(this._tzm, !1, !0); else if ("string" == typeof this._i) {
                    var e = Ct(rs, this._i);
                    null != e ? this.utcOffset(e) : this.utcOffset(0, !0);
                }
                return this;
            }
            function Gt(e) {
                return !!this.isValid() && (e = e ? bt(e).utcOffset() : 0, (this.utcOffset() - e) % 60 === 0);
            }
            function Bt() {
                return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
            }
            function $t() {
                if (!d(this._isDSTShifted)) return this._isDSTShifted;
                var e = {};
                if (y(e, this), e = vt(e), e._a) {
                    var t = e._isUTC ? c(e._a) : bt(e._a);
                    this._isDSTShifted = this.isValid() && D(e._a, t.toArray()) > 0;
                } else this._isDSTShifted = !1;
                return this._isDSTShifted;
            }
            function qt() {
                return !!this.isValid() && !this._isUTC;
            }
            function Kt() {
                return !!this.isValid() && this._isUTC;
            }
            function Zt() {
                return !!this.isValid() && (this._isUTC && 0 === this._offset);
            }
            function Qt(e, t) {
                var a, n, s, i = e, r = null;
                return Et(e) ? i = {
                    ms: e._milliseconds,
                    d: e._days,
                    M: e._months
                } : o(e) ? (i = {}, t ? i[t] = e : i.milliseconds = e) : (r = ei.exec(e)) ? (a = "-" === r[1] ? -1 : 1, 
                i = {
                    y: 0,
                    d: g(r[hs]) * a,
                    h: g(r[fs]) * a,
                    m: g(r[Ms]) * a,
                    s: g(r[ps]) * a,
                    ms: g(Ft(1e3 * r[ys])) * a
                }) : (r = ti.exec(e)) ? (a = "-" === r[1] ? -1 : ("+" === r[1], 1), i = {
                    y: Xt(r[2], a),
                    M: Xt(r[3], a),
                    w: Xt(r[4], a),
                    d: Xt(r[5], a),
                    h: Xt(r[6], a),
                    m: Xt(r[7], a),
                    s: Xt(r[8], a)
                }) : null == i ? i = {} : "object" == typeof i && ("from" in i || "to" in i) && (s = ta(bt(i.from), bt(i.to)), 
                i = {}, i.ms = s.milliseconds, i.M = s.months), n = new Wt(i), Et(e) && l(e, "_locale") && (n._locale = e._locale), 
                n;
            }
            function Xt(e, t) {
                var a = e && parseFloat(e.replace(",", "."));
                return (isNaN(a) ? 0 : a) * t;
            }
            function ea(e, t) {
                var a = {
                    milliseconds: 0,
                    months: 0
                };
                return a.months = t.month() - e.month() + 12 * (t.year() - e.year()), e.clone().add(a.months, "M").isAfter(t) && --a.months, 
                a.milliseconds = +t - +e.clone().add(a.months, "M"), a;
            }
            function ta(e, t) {
                var a;
                return e.isValid() && t.isValid() ? (t = Ut(t, e), e.isBefore(t) ? a = ea(e, t) : (a = ea(t, e), 
                a.milliseconds = -a.milliseconds, a.months = -a.months), a) : {
                    milliseconds: 0,
                    months: 0
                };
            }
            function aa(e, t) {
                return function(a, n) {
                    var s, i;
                    return null === n || isNaN(+n) || (T(t, "moment()." + t + "(period, number) is deprecated. Please use moment()." + t + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), 
                    i = a, a = n, n = i), a = "string" == typeof a ? +a : a, s = Qt(a, n), na(this, s, e), 
                    this;
                };
            }
            function na(e, a, n, s) {
                var i = a._milliseconds, r = Ft(a._days), d = Ft(a._months);
                e.isValid() && (s = null == s || s, d && fe(e, ie(e, "Month") + d * n), r && re(e, "Date", ie(e, "Date") + r * n), 
                i && e._d.setTime(e._d.valueOf() + i * n), s && t.updateOffset(e, r || d));
            }
            function sa(e, t) {
                var a = e.diff(t, "days", !0);
                return a < -6 ? "sameElse" : a < -1 ? "lastWeek" : a < 0 ? "lastDay" : a < 1 ? "sameDay" : a < 2 ? "nextDay" : a < 7 ? "nextWeek" : "sameElse";
            }
            function ia(e, a) {
                var n = e || bt(), s = Ut(n, this).startOf("day"), i = t.calendarFormat(this, s) || "sameElse", r = a && (b(a[i]) ? a[i].call(this, n) : a[i]);
                return this.format(r || this.localeData().calendar(i, this, bt(n)));
            }
            function ra() {
                return new L(this);
            }
            function da(e, t) {
                var a = Y(e) ? e : bt(e);
                return !(!this.isValid() || !a.isValid()) && (t = C(d(t) ? "millisecond" : t), "millisecond" === t ? this.valueOf() > a.valueOf() : a.valueOf() < this.clone().startOf(t).valueOf());
            }
            function oa(e, t) {
                var a = Y(e) ? e : bt(e);
                return !(!this.isValid() || !a.isValid()) && (t = C(d(t) ? "millisecond" : t), "millisecond" === t ? this.valueOf() < a.valueOf() : this.clone().endOf(t).valueOf() < a.valueOf());
            }
            function _a(e, t, a, n) {
                return n = n || "()", ("(" === n[0] ? this.isAfter(e, a) : !this.isBefore(e, a)) && (")" === n[1] ? this.isBefore(t, a) : !this.isAfter(t, a));
            }
            function ua(e, t) {
                var a, n = Y(e) ? e : bt(e);
                return !(!this.isValid() || !n.isValid()) && (t = C(t || "millisecond"), "millisecond" === t ? this.valueOf() === n.valueOf() : (a = n.valueOf(), 
                this.clone().startOf(t).valueOf() <= a && a <= this.clone().endOf(t).valueOf()));
            }
            function la(e, t) {
                return this.isSame(e, t) || this.isAfter(e, t);
            }
            function ma(e, t) {
                return this.isSame(e, t) || this.isBefore(e, t);
            }
            function ca(e, t, a) {
                var n, s, i;
                if (!this.isValid()) return NaN;
                if (n = Ut(e, this), !n.isValid()) return NaN;
                switch (s = 6e4 * (n.utcOffset() - this.utcOffset()), t = C(t)) {
                  case "year":
                    i = ha(this, n) / 12;
                    break;

                  case "month":
                    i = ha(this, n);
                    break;

                  case "quarter":
                    i = ha(this, n) / 3;
                    break;

                  case "second":
                    i = (this - n) / 1e3;
                    break;

                  case "minute":
                    i = (this - n) / 6e4;
                    break;

                  case "hour":
                    i = (this - n) / 36e5;
                    break;

                  case "day":
                    i = (this - n - s) / 864e5;
                    break;

                  case "week":
                    i = (this - n - s) / 6048e5;
                    break;

                  default:
                    i = this - n;
                }
                return a ? i : k(i);
            }
            function ha(e, t) {
                var a, n, s = 12 * (t.year() - e.year()) + (t.month() - e.month()), i = e.clone().add(s, "months");
                return t - i < 0 ? (a = e.clone().add(s - 1, "months"), n = (t - i) / (i - a)) : (a = e.clone().add(s + 1, "months"), 
                n = (t - i) / (a - i)), -(s + n) || 0;
            }
            function fa() {
                return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
            }
            function Ma(e) {
                if (!this.isValid()) return null;
                var t = e !== !0, a = t ? this.clone().utc() : this;
                return a.year() < 0 || a.year() > 9999 ? G(a, t ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : b(Date.prototype.toISOString) ? t ? this.toDate().toISOString() : new Date(this.valueOf() + 60 * this.utcOffset() * 1e3).toISOString().replace("Z", G(a, "Z")) : G(a, t ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
            }
            function pa() {
                if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
                var e = "moment", t = "";
                this.isLocal() || (e = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", 
                t = "Z");
                var a = "[" + e + '("]', n = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", s = "-MM-DD[T]HH:mm:ss.SSS", i = t + '[")]';
                return this.format(a + n + s + i);
            }
            function ya(e) {
                e || (e = this.isUtc() ? t.defaultFormatUtc : t.defaultFormat);
                var a = G(this, e);
                return this.localeData().postformat(a);
            }
            function La(e, t) {
                return this.isValid() && (Y(e) && e.isValid() || bt(e).isValid()) ? Qt({
                    to: this,
                    from: e
                }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate();
            }
            function Ya(e) {
                return this.from(bt(), e);
            }
            function ka(e, t) {
                return this.isValid() && (Y(e) && e.isValid() || bt(e).isValid()) ? Qt({
                    from: this,
                    to: e
                }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate();
            }
            function ga(e) {
                return this.to(bt(), e);
            }
            function Da(e) {
                var t;
                return void 0 === e ? this._locale._abbr : (t = st(e), null != t && (this._locale = t), 
                this);
            }
            function va() {
                return this._locale;
            }
            function wa(e) {
                switch (e = C(e)) {
                  case "year":
                    this.month(0);

                  case "quarter":
                  case "month":
                    this.date(1);

                  case "week":
                  case "isoWeek":
                  case "day":
                  case "date":
                    this.hours(0);

                  case "hour":
                    this.minutes(0);

                  case "minute":
                    this.seconds(0);

                  case "second":
                    this.milliseconds(0);
                }
                return "week" === e && this.weekday(0), "isoWeek" === e && this.isoWeekday(1), "quarter" === e && this.month(3 * Math.floor(this.month() / 3)), 
                this;
            }
            function Ta(e) {
                return e = C(e), void 0 === e || "millisecond" === e ? this : ("date" === e && (e = "day"), 
                this.startOf(e).add(1, "isoWeek" === e ? "week" : e).subtract(1, "ms"));
            }
            function ba() {
                return this._d.valueOf() - 6e4 * (this._offset || 0);
            }
            function Sa() {
                return Math.floor(this.valueOf() / 1e3);
            }
            function Ha() {
                return new Date(this.valueOf());
            }
            function ja() {
                var e = this;
                return [ e.year(), e.month(), e.date(), e.hour(), e.minute(), e.second(), e.millisecond() ];
            }
            function xa() {
                var e = this;
                return {
                    years: e.year(),
                    months: e.month(),
                    date: e.date(),
                    hours: e.hours(),
                    minutes: e.minutes(),
                    seconds: e.seconds(),
                    milliseconds: e.milliseconds()
                };
            }
            function Oa() {
                return this.isValid() ? this.toISOString() : null;
            }
            function Pa() {
                return M(this);
            }
            function Wa() {
                return m({}, f(this));
            }
            function Ea() {
                return f(this).overflow;
            }
            function Fa() {
                return {
                    input: this._i,
                    format: this._f,
                    locale: this._locale,
                    isUTC: this._isUTC,
                    strict: this._strict
                };
            }
            function Aa(e, t) {
                I(0, [ e, e.length ], 0, t);
            }
            function Ca(e) {
                return Ja.call(this, e, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
            }
            function Ua(e) {
                return Ja.call(this, e, this.isoWeek(), this.isoWeekday(), 1, 4);
            }
            function za() {
                return Te(this.year(), 1, 4);
            }
            function Na() {
                var e = this.localeData()._week;
                return Te(this.year(), e.dow, e.doy);
            }
            function Ja(e, t, a, n, s) {
                var i;
                return null == e ? we(this, n, s).year : (i = Te(e, n, s), t > i && (t = i), Ia.call(this, e, t, a, n, s));
            }
            function Ia(e, t, a, n, s) {
                var i = ve(e, t, a, n, s), r = ge(i.year, 0, i.dayOfYear);
                return this.year(r.getUTCFullYear()), this.month(r.getUTCMonth()), this.date(r.getUTCDate()), 
                this;
            }
            function Ra(e) {
                return null == e ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (e - 1) + this.month() % 3);
            }
            function Va(e) {
                var t = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
                return null == e ? t : this.add(e - t, "d");
            }
            function Ga(e, t) {
                t[ys] = g(1e3 * ("0." + e));
            }
            function Ba() {
                return this._isUTC ? "UTC" : "";
            }
            function $a() {
                return this._isUTC ? "Coordinated Universal Time" : "";
            }
            function qa(e) {
                return bt(1e3 * e);
            }
            function Ka() {
                return bt.apply(null, arguments).parseZone();
            }
            function Za(e) {
                return e;
            }
            function Qa(e, t, a, n) {
                var s = st(), i = c().set(n, t);
                return s[a](i, e);
            }
            function Xa(e, t, a) {
                if (o(e) && (t = e, e = void 0), e = e || "", null != t) return Qa(e, t, a, "month");
                var n, s = [];
                for (n = 0; n < 12; n++) s[n] = Qa(e, n, a, "month");
                return s;
            }
            function en(e, t, a, n) {
                "boolean" == typeof e ? (o(t) && (a = t, t = void 0), t = t || "") : (t = e, a = t, 
                e = !1, o(t) && (a = t, t = void 0), t = t || "");
                var s = st(), i = e ? s._week.dow : 0;
                if (null != a) return Qa(t, (a + i) % 7, n, "day");
                var r, d = [];
                for (r = 0; r < 7; r++) d[r] = Qa(t, (r + i) % 7, n, "day");
                return d;
            }
            function tn(e, t) {
                return Xa(e, t, "months");
            }
            function an(e, t) {
                return Xa(e, t, "monthsShort");
            }
            function nn(e, t, a) {
                return en(e, t, a, "weekdays");
            }
            function sn(e, t, a) {
                return en(e, t, a, "weekdaysShort");
            }
            function rn(e, t, a) {
                return en(e, t, a, "weekdaysMin");
            }
            function dn() {
                var e = this._data;
                return this._milliseconds = mi(this._milliseconds), this._days = mi(this._days), 
                this._months = mi(this._months), e.milliseconds = mi(e.milliseconds), e.seconds = mi(e.seconds), 
                e.minutes = mi(e.minutes), e.hours = mi(e.hours), e.months = mi(e.months), e.years = mi(e.years), 
                this;
            }
            function on(e, t, a, n) {
                var s = Qt(t, a);
                return e._milliseconds += n * s._milliseconds, e._days += n * s._days, e._months += n * s._months, 
                e._bubble();
            }
            function _n(e, t) {
                return on(this, e, t, 1);
            }
            function un(e, t) {
                return on(this, e, t, -1);
            }
            function ln(e) {
                return e < 0 ? Math.floor(e) : Math.ceil(e);
            }
            function mn() {
                var e, t, a, n, s, i = this._milliseconds, r = this._days, d = this._months, o = this._data;
                return i >= 0 && r >= 0 && d >= 0 || i <= 0 && r <= 0 && d <= 0 || (i += 864e5 * ln(hn(d) + r), 
                r = 0, d = 0), o.milliseconds = i % 1e3, e = k(i / 1e3), o.seconds = e % 60, t = k(e / 60), 
                o.minutes = t % 60, a = k(t / 60), o.hours = a % 24, r += k(a / 24), s = k(cn(r)), 
                d += s, r -= ln(hn(s)), n = k(d / 12), d %= 12, o.days = r, o.months = d, o.years = n, 
                this;
            }
            function cn(e) {
                return 4800 * e / 146097;
            }
            function hn(e) {
                return 146097 * e / 4800;
            }
            function fn(e) {
                if (!this.isValid()) return NaN;
                var t, a, n = this._milliseconds;
                if (e = C(e), "month" === e || "year" === e) return t = this._days + n / 864e5, 
                a = this._months + cn(t), "month" === e ? a : a / 12;
                switch (t = this._days + Math.round(hn(this._months)), e) {
                  case "week":
                    return t / 7 + n / 6048e5;

                  case "day":
                    return t + n / 864e5;

                  case "hour":
                    return 24 * t + n / 36e5;

                  case "minute":
                    return 1440 * t + n / 6e4;

                  case "second":
                    return 86400 * t + n / 1e3;

                  case "millisecond":
                    return Math.floor(864e5 * t) + n;

                  default:
                    throw new Error("Unknown unit " + e);
                }
            }
            function Mn() {
                return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * g(this._months / 12) : NaN;
            }
            function pn(e) {
                return function() {
                    return this.as(e);
                };
            }
            function yn() {
                return Qt(this);
            }
            function Ln(e) {
                return e = C(e), this.isValid() ? this[e + "s"]() : NaN;
            }
            function Yn(e) {
                return function() {
                    return this.isValid() ? this._data[e] : NaN;
                };
            }
            function kn() {
                return k(this.days() / 7);
            }
            function gn(e, t, a, n, s) {
                return s.relativeTime(t || 1, !!a, e, n);
            }
            function Dn(e, t, a) {
                var n = Qt(e).abs(), s = Si(n.as("s")), i = Si(n.as("m")), r = Si(n.as("h")), d = Si(n.as("d")), o = Si(n.as("M")), _ = Si(n.as("y")), u = s <= Hi.ss && [ "s", s ] || s < Hi.s && [ "ss", s ] || i <= 1 && [ "m" ] || i < Hi.m && [ "mm", i ] || r <= 1 && [ "h" ] || r < Hi.h && [ "hh", r ] || d <= 1 && [ "d" ] || d < Hi.d && [ "dd", d ] || o <= 1 && [ "M" ] || o < Hi.M && [ "MM", o ] || _ <= 1 && [ "y" ] || [ "yy", _ ];
                return u[2] = t, u[3] = +e > 0, u[4] = a, gn.apply(null, u);
            }
            function vn(e) {
                return void 0 === e ? Si : "function" == typeof e && (Si = e, !0);
            }
            function wn(e, t) {
                return void 0 !== Hi[e] && (void 0 === t ? Hi[e] : (Hi[e] = t, "s" === e && (Hi.ss = t - 1), 
                !0));
            }
            function Tn(e) {
                if (!this.isValid()) return this.localeData().invalidDate();
                var t = this.localeData(), a = Dn(this, !e, t);
                return e && (a = t.pastFuture(+this, a)), t.postformat(a);
            }
            function bn(e) {
                return (e > 0) - (e < 0) || +e;
            }
            function Sn() {
                if (!this.isValid()) return this.localeData().invalidDate();
                var e, t, a, n = ji(this._milliseconds) / 1e3, s = ji(this._days), i = ji(this._months);
                e = k(n / 60), t = k(e / 60), n %= 60, e %= 60, a = k(i / 12), i %= 12;
                var r = a, d = i, o = s, _ = t, u = e, l = n ? n.toFixed(3).replace(/\.?0+$/, "") : "", m = this.asSeconds();
                if (!m) return "P0D";
                var c = m < 0 ? "-" : "", h = bn(this._months) !== bn(m) ? "-" : "", f = bn(this._days) !== bn(m) ? "-" : "", M = bn(this._milliseconds) !== bn(m) ? "-" : "";
                return c + "P" + (r ? h + r + "Y" : "") + (d ? h + d + "M" : "") + (o ? f + o + "D" : "") + (_ || u || l ? "T" : "") + (_ ? M + _ + "H" : "") + (u ? M + u + "M" : "") + (l ? M + l + "S" : "");
            }
            var Hn, jn;
            jn = Array.prototype.some ? Array.prototype.some : function(e) {
                for (var t = Object(this), a = t.length >>> 0, n = 0; n < a; n++) if (n in t && e.call(this, t[n], n, t)) return !0;
                return !1;
            };
            var xn = t.momentProperties = [], On = !1, Pn = {};
            t.suppressDeprecationWarnings = !1, t.deprecationHandler = null;
            var Wn;
            Wn = Object.keys ? Object.keys : function(e) {
                var t, a = [];
                for (t in e) l(e, t) && a.push(t);
                return a;
            };
            var En = {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            }, Fn = {
                LTS: "h:mm:ss A",
                LT: "h:mm A",
                L: "MM/DD/YYYY",
                LL: "MMMM D, YYYY",
                LLL: "MMMM D, YYYY h:mm A",
                LLLL: "dddd, MMMM D, YYYY h:mm A"
            }, An = "Invalid date", Cn = "%d", Un = /\d{1,2}/, zn = {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                ss: "%d seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            }, Nn = {}, Jn = {}, In = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, Rn = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, Vn = {}, Gn = {}, Bn = /\d/, $n = /\d\d/, qn = /\d{3}/, Kn = /\d{4}/, Zn = /[+-]?\d{6}/, Qn = /\d\d?/, Xn = /\d\d\d\d?/, es = /\d\d\d\d\d\d?/, ts = /\d{1,3}/, as = /\d{1,4}/, ns = /[+-]?\d{1,6}/, ss = /\d+/, is = /[+-]?\d+/, rs = /Z|[+-]\d\d:?\d\d/gi, ds = /Z|[+-]\d\d(?::?\d\d)?/gi, os = /[+-]?\d+(\.\d{1,3})?/, _s = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, us = {}, ls = {}, ms = 0, cs = 1, hs = 2, fs = 3, Ms = 4, ps = 5, ys = 6, Ls = 7, Ys = 8;
            I("Y", 0, 0, function() {
                var e = this.year();
                return e <= 9999 ? "" + e : "+" + e;
            }), I(0, [ "YY", 2 ], 0, function() {
                return this.year() % 100;
            }), I(0, [ "YYYY", 4 ], 0, "year"), I(0, [ "YYYYY", 5 ], 0, "year"), I(0, [ "YYYYYY", 6, !0 ], 0, "year"), 
            A("year", "y"), z("year", 1), $("Y", is), $("YY", Qn, $n), $("YYYY", as, Kn), $("YYYYY", ns, Zn), 
            $("YYYYYY", ns, Zn), Q([ "YYYYY", "YYYYYY" ], ms), Q("YYYY", function(e, a) {
                a[ms] = 2 === e.length ? t.parseTwoDigitYear(e) : g(e);
            }), Q("YY", function(e, a) {
                a[ms] = t.parseTwoDigitYear(e);
            }), Q("Y", function(e, t) {
                t[ms] = parseInt(e, 10);
            }), t.parseTwoDigitYear = function(e) {
                return g(e) + (g(e) > 68 ? 1900 : 2e3);
            };
            var ks, gs = se("FullYear", !0);
            ks = Array.prototype.indexOf ? Array.prototype.indexOf : function(e) {
                var t;
                for (t = 0; t < this.length; ++t) if (this[t] === e) return t;
                return -1;
            }, I("M", [ "MM", 2 ], "Mo", function() {
                return this.month() + 1;
            }), I("MMM", 0, 0, function(e) {
                return this.localeData().monthsShort(this, e);
            }), I("MMMM", 0, 0, function(e) {
                return this.localeData().months(this, e);
            }), A("month", "M"), z("month", 8), $("M", Qn), $("MM", Qn, $n), $("MMM", function(e, t) {
                return t.monthsShortRegex(e);
            }), $("MMMM", function(e, t) {
                return t.monthsRegex(e);
            }), Q([ "M", "MM" ], function(e, t) {
                t[cs] = g(e) - 1;
            }), Q([ "MMM", "MMMM" ], function(e, t, a, n) {
                var s = a._locale.monthsParse(e, n, a._strict);
                null != s ? t[cs] = s : f(a).invalidMonth = e;
            });
            var Ds = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, vs = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ws = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), Ts = _s, bs = _s;
            I("w", [ "ww", 2 ], "wo", "week"), I("W", [ "WW", 2 ], "Wo", "isoWeek"), A("week", "w"), 
            A("isoWeek", "W"), z("week", 5), z("isoWeek", 5), $("w", Qn), $("ww", Qn, $n), $("W", Qn), 
            $("WW", Qn, $n), X([ "w", "ww", "W", "WW" ], function(e, t, a, n) {
                t[n.substr(0, 1)] = g(e);
            });
            var Ss = {
                dow: 0,
                doy: 6
            };
            I("d", 0, "do", "day"), I("dd", 0, 0, function(e) {
                return this.localeData().weekdaysMin(this, e);
            }), I("ddd", 0, 0, function(e) {
                return this.localeData().weekdaysShort(this, e);
            }), I("dddd", 0, 0, function(e) {
                return this.localeData().weekdays(this, e);
            }), I("e", 0, 0, "weekday"), I("E", 0, 0, "isoWeekday"), A("day", "d"), A("weekday", "e"), 
            A("isoWeekday", "E"), z("day", 11), z("weekday", 11), z("isoWeekday", 11), $("d", Qn), 
            $("e", Qn), $("E", Qn), $("dd", function(e, t) {
                return t.weekdaysMinRegex(e);
            }), $("ddd", function(e, t) {
                return t.weekdaysShortRegex(e);
            }), $("dddd", function(e, t) {
                return t.weekdaysRegex(e);
            }), X([ "dd", "ddd", "dddd" ], function(e, t, a, n) {
                var s = a._locale.weekdaysParse(e, n, a._strict);
                null != s ? t.d = s : f(a).invalidWeekday = e;
            }), X([ "d", "e", "E" ], function(e, t, a, n) {
                t[n] = g(e);
            });
            var Hs = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), js = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), xs = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), Os = _s, Ps = _s, Ws = _s;
            I("H", [ "HH", 2 ], 0, "hour"), I("h", [ "hh", 2 ], 0, Ge), I("k", [ "kk", 2 ], 0, Be), 
            I("hmm", 0, 0, function() {
                return "" + Ge.apply(this) + J(this.minutes(), 2);
            }), I("hmmss", 0, 0, function() {
                return "" + Ge.apply(this) + J(this.minutes(), 2) + J(this.seconds(), 2);
            }), I("Hmm", 0, 0, function() {
                return "" + this.hours() + J(this.minutes(), 2);
            }), I("Hmmss", 0, 0, function() {
                return "" + this.hours() + J(this.minutes(), 2) + J(this.seconds(), 2);
            }), $e("a", !0), $e("A", !1), A("hour", "h"), z("hour", 13), $("a", qe), $("A", qe), 
            $("H", Qn), $("h", Qn), $("k", Qn), $("HH", Qn, $n), $("hh", Qn, $n), $("kk", Qn, $n), 
            $("hmm", Xn), $("hmmss", es), $("Hmm", Xn), $("Hmmss", es), Q([ "H", "HH" ], fs), 
            Q([ "k", "kk" ], function(e, t, a) {
                var n = g(e);
                t[fs] = 24 === n ? 0 : n;
            }), Q([ "a", "A" ], function(e, t, a) {
                a._isPm = a._locale.isPM(e), a._meridiem = e;
            }), Q([ "h", "hh" ], function(e, t, a) {
                t[fs] = g(e), f(a).bigHour = !0;
            }), Q("hmm", function(e, t, a) {
                var n = e.length - 2;
                t[fs] = g(e.substr(0, n)), t[Ms] = g(e.substr(n)), f(a).bigHour = !0;
            }), Q("hmmss", function(e, t, a) {
                var n = e.length - 4, s = e.length - 2;
                t[fs] = g(e.substr(0, n)), t[Ms] = g(e.substr(n, 2)), t[ps] = g(e.substr(s)), f(a).bigHour = !0;
            }), Q("Hmm", function(e, t, a) {
                var n = e.length - 2;
                t[fs] = g(e.substr(0, n)), t[Ms] = g(e.substr(n));
            }), Q("Hmmss", function(e, t, a) {
                var n = e.length - 4, s = e.length - 2;
                t[fs] = g(e.substr(0, n)), t[Ms] = g(e.substr(n, 2)), t[ps] = g(e.substr(s));
            });
            var Es, Fs = /[ap]\.?m?\.?/i, As = se("Hours", !0), Cs = {
                calendar: En,
                longDateFormat: Fn,
                invalidDate: An,
                ordinal: Cn,
                dayOfMonthOrdinalParse: Un,
                relativeTime: zn,
                months: vs,
                monthsShort: ws,
                week: Ss,
                weekdays: Hs,
                weekdaysMin: xs,
                weekdaysShort: js,
                meridiemParse: Fs
            }, Us = {}, zs = {}, Ns = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Js = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Is = /Z|[+-]\d\d(?::?\d\d)?/, Rs = [ [ "YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/ ], [ "YYYY-MM-DD", /\d{4}-\d\d-\d\d/ ], [ "GGGG-[W]WW-E", /\d{4}-W\d\d-\d/ ], [ "GGGG-[W]WW", /\d{4}-W\d\d/, !1 ], [ "YYYY-DDD", /\d{4}-\d{3}/ ], [ "YYYY-MM", /\d{4}-\d\d/, !1 ], [ "YYYYYYMMDD", /[+-]\d{10}/ ], [ "YYYYMMDD", /\d{8}/ ], [ "GGGG[W]WWE", /\d{4}W\d{3}/ ], [ "GGGG[W]WW", /\d{4}W\d{2}/, !1 ], [ "YYYYDDD", /\d{7}/ ] ], Vs = [ [ "HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/ ], [ "HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/ ], [ "HH:mm:ss", /\d\d:\d\d:\d\d/ ], [ "HH:mm", /\d\d:\d\d/ ], [ "HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/ ], [ "HHmmss,SSSS", /\d\d\d\d\d\d,\d+/ ], [ "HHmmss", /\d\d\d\d\d\d/ ], [ "HHmm", /\d\d\d\d/ ], [ "HH", /\d\d/ ] ], Gs = /^\/?Date\((\-?\d+)/i, Bs = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, $s = {
                UT: 0,
                GMT: 0,
                EDT: -240,
                EST: -300,
                CDT: -300,
                CST: -360,
                MDT: -360,
                MST: -420,
                PDT: -420,
                PST: -480
            };
            t.createFromInputFallback = w("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(e) {
                e._d = new Date(e._i + (e._useUTC ? " UTC" : ""));
            }), t.ISO_8601 = function() {}, t.RFC_2822 = function() {};
            var qs = w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                var e = bt.apply(null, arguments);
                return this.isValid() && e.isValid() ? e < this ? this : e : p();
            }), Ks = w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
                var e = bt.apply(null, arguments);
                return this.isValid() && e.isValid() ? e > this ? this : e : p();
            }), Zs = function() {
                return Date.now ? Date.now() : +new Date();
            }, Qs = [ "year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond" ];
            At("Z", ":"), At("ZZ", ""), $("Z", ds), $("ZZ", ds), Q([ "Z", "ZZ" ], function(e, t, a) {
                a._useUTC = !0, a._tzm = Ct(ds, e);
            });
            var Xs = /([\+\-]|\d\d)/gi;
            t.updateOffset = function() {};
            var ei = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/, ti = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
            Qt.fn = Wt.prototype, Qt.invalid = Pt;
            var ai = aa(1, "add"), ni = aa(-1, "subtract");
            t.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", t.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
            var si = w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(e) {
                return void 0 === e ? this.localeData() : this.locale(e);
            });
            I(0, [ "gg", 2 ], 0, function() {
                return this.weekYear() % 100;
            }), I(0, [ "GG", 2 ], 0, function() {
                return this.isoWeekYear() % 100;
            }), Aa("gggg", "weekYear"), Aa("ggggg", "weekYear"), Aa("GGGG", "isoWeekYear"), 
            Aa("GGGGG", "isoWeekYear"), A("weekYear", "gg"), A("isoWeekYear", "GG"), z("weekYear", 1), 
            z("isoWeekYear", 1), $("G", is), $("g", is), $("GG", Qn, $n), $("gg", Qn, $n), $("GGGG", as, Kn), 
            $("gggg", as, Kn), $("GGGGG", ns, Zn), $("ggggg", ns, Zn), X([ "gggg", "ggggg", "GGGG", "GGGGG" ], function(e, t, a, n) {
                t[n.substr(0, 2)] = g(e);
            }), X([ "gg", "GG" ], function(e, a, n, s) {
                a[s] = t.parseTwoDigitYear(e);
            }), I("Q", 0, "Qo", "quarter"), A("quarter", "Q"), z("quarter", 7), $("Q", Bn), 
            Q("Q", function(e, t) {
                t[cs] = 3 * (g(e) - 1);
            }), I("D", [ "DD", 2 ], "Do", "date"), A("date", "D"), z("date", 9), $("D", Qn), 
            $("DD", Qn, $n), $("Do", function(e, t) {
                return e ? t._dayOfMonthOrdinalParse || t._ordinalParse : t._dayOfMonthOrdinalParseLenient;
            }), Q([ "D", "DD" ], hs), Q("Do", function(e, t) {
                t[hs] = g(e.match(Qn)[0]);
            });
            var ii = se("Date", !0);
            I("DDD", [ "DDDD", 3 ], "DDDo", "dayOfYear"), A("dayOfYear", "DDD"), z("dayOfYear", 4), 
            $("DDD", ts), $("DDDD", qn), Q([ "DDD", "DDDD" ], function(e, t, a) {
                a._dayOfYear = g(e);
            }), I("m", [ "mm", 2 ], 0, "minute"), A("minute", "m"), z("minute", 14), $("m", Qn), 
            $("mm", Qn, $n), Q([ "m", "mm" ], Ms);
            var ri = se("Minutes", !1);
            I("s", [ "ss", 2 ], 0, "second"), A("second", "s"), z("second", 15), $("s", Qn), 
            $("ss", Qn, $n), Q([ "s", "ss" ], ps);
            var di = se("Seconds", !1);
            I("S", 0, 0, function() {
                return ~~(this.millisecond() / 100);
            }), I(0, [ "SS", 2 ], 0, function() {
                return ~~(this.millisecond() / 10);
            }), I(0, [ "SSS", 3 ], 0, "millisecond"), I(0, [ "SSSS", 4 ], 0, function() {
                return 10 * this.millisecond();
            }), I(0, [ "SSSSS", 5 ], 0, function() {
                return 100 * this.millisecond();
            }), I(0, [ "SSSSSS", 6 ], 0, function() {
                return 1e3 * this.millisecond();
            }), I(0, [ "SSSSSSS", 7 ], 0, function() {
                return 1e4 * this.millisecond();
            }), I(0, [ "SSSSSSSS", 8 ], 0, function() {
                return 1e5 * this.millisecond();
            }), I(0, [ "SSSSSSSSS", 9 ], 0, function() {
                return 1e6 * this.millisecond();
            }), A("millisecond", "ms"), z("millisecond", 16), $("S", ts, Bn), $("SS", ts, $n), 
            $("SSS", ts, qn);
            var oi;
            for (oi = "SSSS"; oi.length <= 9; oi += "S") $(oi, ss);
            for (oi = "S"; oi.length <= 9; oi += "S") Q(oi, Ga);
            var _i = se("Milliseconds", !1);
            I("z", 0, 0, "zoneAbbr"), I("zz", 0, 0, "zoneName");
            var ui = L.prototype;
            ui.add = ai, ui.calendar = ia, ui.clone = ra, ui.diff = ca, ui.endOf = Ta, ui.format = ya, 
            ui.from = La, ui.fromNow = Ya, ui.to = ka, ui.toNow = ga, ui.get = de, ui.invalidAt = Ea, 
            ui.isAfter = da, ui.isBefore = oa, ui.isBetween = _a, ui.isSame = ua, ui.isSameOrAfter = la, 
            ui.isSameOrBefore = ma, ui.isValid = Pa, ui.lang = si, ui.locale = Da, ui.localeData = va, 
            ui.max = Ks, ui.min = qs, ui.parsingFlags = Wa, ui.set = oe, ui.startOf = wa, ui.subtract = ni, 
            ui.toArray = ja, ui.toObject = xa, ui.toDate = Ha, ui.toISOString = Ma, ui.inspect = pa, 
            ui.toJSON = Oa, ui.toString = fa, ui.unix = Sa, ui.valueOf = ba, ui.creationData = Fa, 
            ui.year = gs, ui.isLeapYear = ne, ui.weekYear = Ca, ui.isoWeekYear = Ua, ui.quarter = ui.quarters = Ra, 
            ui.month = Me, ui.daysInMonth = pe, ui.week = ui.weeks = je, ui.isoWeek = ui.isoWeeks = xe, 
            ui.weeksInYear = Na, ui.isoWeeksInYear = za, ui.date = ii, ui.day = ui.days = Ue, 
            ui.weekday = ze, ui.isoWeekday = Ne, ui.dayOfYear = Va, ui.hour = ui.hours = As, 
            ui.minute = ui.minutes = ri, ui.second = ui.seconds = di, ui.millisecond = ui.milliseconds = _i, 
            ui.utcOffset = Nt, ui.utc = It, ui.local = Rt, ui.parseZone = Vt, ui.hasAlignedHourOffset = Gt, 
            ui.isDST = Bt, ui.isLocal = qt, ui.isUtcOffset = Kt, ui.isUtc = Zt, ui.isUTC = Zt, 
            ui.zoneAbbr = Ba, ui.zoneName = $a, ui.dates = w("dates accessor is deprecated. Use date instead.", ii), 
            ui.months = w("months accessor is deprecated. Use month instead", Me), ui.years = w("years accessor is deprecated. Use year instead", gs), 
            ui.zone = w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", Jt), 
            ui.isDSTShifted = w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", $t);
            var li = j.prototype;
            li.calendar = x, li.longDateFormat = O, li.invalidDate = P, li.ordinal = W, li.preparse = Za, 
            li.postformat = Za, li.relativeTime = E, li.pastFuture = F, li.set = S, li.months = le, 
            li.monthsShort = me, li.monthsParse = he, li.monthsRegex = Le, li.monthsShortRegex = ye, 
            li.week = be, li.firstDayOfYear = He, li.firstDayOfWeek = Se, li.weekdays = We, 
            li.weekdaysMin = Fe, li.weekdaysShort = Ee, li.weekdaysParse = Ce, li.weekdaysRegex = Je, 
            li.weekdaysShortRegex = Ie, li.weekdaysMinRegex = Re, li.isPM = Ke, li.meridiem = Ze, 
            tt("en", {
                dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
                ordinal: function(e) {
                    var t = e % 10, a = 1 === g(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                    return e + a;
                }
            }), t.lang = w("moment.lang is deprecated. Use moment.locale instead.", tt), t.langData = w("moment.langData is deprecated. Use moment.localeData instead.", st);
            var mi = Math.abs, ci = pn("ms"), hi = pn("s"), fi = pn("m"), Mi = pn("h"), pi = pn("d"), yi = pn("w"), Li = pn("M"), Yi = pn("y"), ki = Yn("milliseconds"), gi = Yn("seconds"), Di = Yn("minutes"), vi = Yn("hours"), wi = Yn("days"), Ti = Yn("months"), bi = Yn("years"), Si = Math.round, Hi = {
                ss: 44,
                s: 45,
                m: 45,
                h: 22,
                d: 26,
                M: 11
            }, ji = Math.abs, xi = Wt.prototype;
            return xi.isValid = Ot, xi.abs = dn, xi.add = _n, xi.subtract = un, xi.as = fn, 
            xi.asMilliseconds = ci, xi.asSeconds = hi, xi.asMinutes = fi, xi.asHours = Mi, xi.asDays = pi, 
            xi.asWeeks = yi, xi.asMonths = Li, xi.asYears = Yi, xi.valueOf = Mn, xi._bubble = mn, 
            xi.clone = yn, xi.get = Ln, xi.milliseconds = ki, xi.seconds = gi, xi.minutes = Di, 
            xi.hours = vi, xi.days = wi, xi.weeks = kn, xi.months = Ti, xi.years = bi, xi.humanize = Tn, 
            xi.toISOString = Sn, xi.toString = Sn, xi.toJSON = Sn, xi.locale = Da, xi.localeData = va, 
            xi.toIsoString = w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", Sn), 
            xi.lang = si, I("X", 0, 0, "unix"), I("x", 0, 0, "valueOf"), $("x", is), $("X", os), 
            Q("X", function(e, t, a) {
                a._d = new Date(1e3 * parseFloat(e, 10));
            }), Q("x", function(e, t, a) {
                a._d = new Date(g(e));
            }), t.version = "2.22.2", n(bt), t.fn = ui, t.min = Ht, t.max = jt, t.now = Zs, 
            t.utc = c, t.unix = qa, t.months = tn, t.isDate = _, t.locale = tt, t.invalid = p, 
            t.duration = Qt, t.isMoment = Y, t.weekdays = nn, t.parseZone = Ka, t.localeData = st, 
            t.isDuration = Et, t.monthsShort = an, t.weekdaysMin = rn, t.defineLocale = at, 
            t.updateLocale = nt, t.locales = it, t.weekdaysShort = sn, t.normalizeUnits = C, 
            t.relativeTimeRounding = vn, t.relativeTimeThreshold = wn, t.calendarFormat = sa, 
            t.prototype = ui, t.HTML5_FMT = {
                DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
                DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
                DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
                DATE: "YYYY-MM-DD",
                TIME: "HH:mm",
                TIME_SECONDS: "HH:mm:ss",
                TIME_MS: "HH:mm:ss.SSS",
                WEEK: "YYYY-[W]WW",
                MONTH: "YYYY-MM"
            }, t;
        });
    }).call(t, a(4)(e));
}, function(e, t) {
    e.exports = function(e) {
        return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children = [], 
        e.webpackPolyfill = 1), e;
    };
}, function(e, t, a) {
    function n(e) {
        return a(s(e));
    }
    function s(e) {
        return i[e] || function() {
            throw new Error("Cannot find module '" + e + "'.");
        }();
    }
    var i = {
        "./af": 6,
        "./af.js": 6,
        "./ar": 7,
        "./ar-dz": 8,
        "./ar-dz.js": 8,
        "./ar-kw": 9,
        "./ar-kw.js": 9,
        "./ar-ly": 10,
        "./ar-ly.js": 10,
        "./ar-ma": 11,
        "./ar-ma.js": 11,
        "./ar-sa": 12,
        "./ar-sa.js": 12,
        "./ar-tn": 13,
        "./ar-tn.js": 13,
        "./ar.js": 7,
        "./az": 14,
        "./az.js": 14,
        "./be": 15,
        "./be.js": 15,
        "./bg": 16,
        "./bg.js": 16,
        "./bm": 17,
        "./bm.js": 17,
        "./bn": 18,
        "./bn.js": 18,
        "./bo": 19,
        "./bo.js": 19,
        "./br": 20,
        "./br.js": 20,
        "./bs": 21,
        "./bs.js": 21,
        "./ca": 22,
        "./ca.js": 22,
        "./cs": 23,
        "./cs.js": 23,
        "./cv": 24,
        "./cv.js": 24,
        "./cy": 25,
        "./cy.js": 25,
        "./da": 26,
        "./da.js": 26,
        "./de": 27,
        "./de-at": 28,
        "./de-at.js": 28,
        "./de-ch": 29,
        "./de-ch.js": 29,
        "./de.js": 27,
        "./dv": 30,
        "./dv.js": 30,
        "./el": 31,
        "./el.js": 31,
        "./en-au": 32,
        "./en-au.js": 32,
        "./en-ca": 33,
        "./en-ca.js": 33,
        "./en-gb": 34,
        "./en-gb.js": 34,
        "./en-ie": 35,
        "./en-ie.js": 35,
        "./en-il": 36,
        "./en-il.js": 36,
        "./en-nz": 37,
        "./en-nz.js": 37,
        "./eo": 38,
        "./eo.js": 38,
        "./es": 39,
        "./es-do": 40,
        "./es-do.js": 40,
        "./es-us": 41,
        "./es-us.js": 41,
        "./es.js": 39,
        "./et": 42,
        "./et.js": 42,
        "./eu": 43,
        "./eu.js": 43,
        "./fa": 44,
        "./fa.js": 44,
        "./fi": 45,
        "./fi.js": 45,
        "./fo": 46,
        "./fo.js": 46,
        "./fr": 47,
        "./fr-ca": 48,
        "./fr-ca.js": 48,
        "./fr-ch": 49,
        "./fr-ch.js": 49,
        "./fr.js": 47,
        "./fy": 50,
        "./fy.js": 50,
        "./gd": 51,
        "./gd.js": 51,
        "./gl": 52,
        "./gl.js": 52,
        "./gom-latn": 53,
        "./gom-latn.js": 53,
        "./gu": 54,
        "./gu.js": 54,
        "./he": 55,
        "./he.js": 55,
        "./hi": 56,
        "./hi.js": 56,
        "./hr": 57,
        "./hr.js": 57,
        "./hu": 58,
        "./hu.js": 58,
        "./hy-am": 59,
        "./hy-am.js": 59,
        "./id": 60,
        "./id.js": 60,
        "./is": 61,
        "./is.js": 61,
        "./it": 62,
        "./it.js": 62,
        "./ja": 63,
        "./ja.js": 63,
        "./jv": 64,
        "./jv.js": 64,
        "./ka": 65,
        "./ka.js": 65,
        "./kk": 66,
        "./kk.js": 66,
        "./km": 67,
        "./km.js": 67,
        "./kn": 68,
        "./kn.js": 68,
        "./ko": 69,
        "./ko.js": 69,
        "./ky": 70,
        "./ky.js": 70,
        "./lb": 71,
        "./lb.js": 71,
        "./lo": 72,
        "./lo.js": 72,
        "./lt": 73,
        "./lt.js": 73,
        "./lv": 74,
        "./lv.js": 74,
        "./me": 75,
        "./me.js": 75,
        "./mi": 76,
        "./mi.js": 76,
        "./mk": 77,
        "./mk.js": 77,
        "./ml": 78,
        "./ml.js": 78,
        "./mn": 79,
        "./mn.js": 79,
        "./mr": 80,
        "./mr.js": 80,
        "./ms": 81,
        "./ms-my": 82,
        "./ms-my.js": 82,
        "./ms.js": 81,
        "./mt": 83,
        "./mt.js": 83,
        "./my": 84,
        "./my.js": 84,
        "./nb": 85,
        "./nb.js": 85,
        "./ne": 86,
        "./ne.js": 86,
        "./nl": 87,
        "./nl-be": 88,
        "./nl-be.js": 88,
        "./nl.js": 87,
        "./nn": 89,
        "./nn.js": 89,
        "./pa-in": 90,
        "./pa-in.js": 90,
        "./pl": 91,
        "./pl.js": 91,
        "./pt": 92,
        "./pt-br": 93,
        "./pt-br.js": 93,
        "./pt.js": 92,
        "./ro": 94,
        "./ro.js": 94,
        "./ru": 95,
        "./ru.js": 95,
        "./sd": 96,
        "./sd.js": 96,
        "./se": 97,
        "./se.js": 97,
        "./si": 98,
        "./si.js": 98,
        "./sk": 99,
        "./sk.js": 99,
        "./sl": 100,
        "./sl.js": 100,
        "./sq": 101,
        "./sq.js": 101,
        "./sr": 102,
        "./sr-cyrl": 103,
        "./sr-cyrl.js": 103,
        "./sr.js": 102,
        "./ss": 104,
        "./ss.js": 104,
        "./sv": 105,
        "./sv.js": 105,
        "./sw": 106,
        "./sw.js": 106,
        "./ta": 107,
        "./ta.js": 107,
        "./te": 108,
        "./te.js": 108,
        "./tet": 109,
        "./tet.js": 109,
        "./tg": 110,
        "./tg.js": 110,
        "./th": 111,
        "./th.js": 111,
        "./tl-ph": 112,
        "./tl-ph.js": 112,
        "./tlh": 113,
        "./tlh.js": 113,
        "./tr": 114,
        "./tr.js": 114,
        "./tzl": 115,
        "./tzl.js": 115,
        "./tzm": 116,
        "./tzm-latn": 117,
        "./tzm-latn.js": 117,
        "./tzm.js": 116,
        "./ug-cn": 118,
        "./ug-cn.js": 118,
        "./uk": 119,
        "./uk.js": 119,
        "./ur": 120,
        "./ur.js": 120,
        "./uz": 121,
        "./uz-latn": 122,
        "./uz-latn.js": 122,
        "./uz.js": 121,
        "./vi": 123,
        "./vi.js": 123,
        "./x-pseudo": 124,
        "./x-pseudo.js": 124,
        "./yo": 125,
        "./yo.js": 125,
        "./zh-cn": 126,
        "./zh-cn.js": 126,
        "./zh-hk": 127,
        "./zh-hk.js": 127,
        "./zh-tw": 128,
        "./zh-tw.js": 128
    };
    n.keys = function() {
        return Object.keys(i);
    }, n.resolve = s, e.exports = n, n.id = 5;
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("af", {
            months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),
            monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),
            weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),
            weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
            weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
            meridiemParse: /vm|nm/i,
            isPM: function(e) {
                return /^nm$/i.test(e);
            },
            meridiem: function(e, t, a) {
                return e < 12 ? a ? "vm" : "VM" : a ? "nm" : "NM";
            },
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Vandag om] LT",
                nextDay: "[Môre om] LT",
                nextWeek: "dddd [om] LT",
                lastDay: "[Gister om] LT",
                lastWeek: "[Laas] dddd [om] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "oor %s",
                past: "%s gelede",
                s: "'n paar sekondes",
                ss: "%d sekondes",
                m: "'n minuut",
                mm: "%d minute",
                h: "'n uur",
                hh: "%d ure",
                d: "'n dag",
                dd: "%d dae",
                M: "'n maand",
                MM: "%d maande",
                y: "'n jaar",
                yy: "%d jaar"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function(e) {
                return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "١",
            "2": "٢",
            "3": "٣",
            "4": "٤",
            "5": "٥",
            "6": "٦",
            "7": "٧",
            "8": "٨",
            "9": "٩",
            "0": "٠"
        }, a = {
            "١": "1",
            "٢": "2",
            "٣": "3",
            "٤": "4",
            "٥": "5",
            "٦": "6",
            "٧": "7",
            "٨": "8",
            "٩": "9",
            "٠": "0"
        }, n = function(e) {
            return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5;
        }, s = {
            s: [ "أقل من ثانية", "ثانية واحدة", [ "ثانيتان", "ثانيتين" ], "%d ثوان", "%d ثانية", "%d ثانية" ],
            m: [ "أقل من دقيقة", "دقيقة واحدة", [ "دقيقتان", "دقيقتين" ], "%d دقائق", "%d دقيقة", "%d دقيقة" ],
            h: [ "أقل من ساعة", "ساعة واحدة", [ "ساعتان", "ساعتين" ], "%d ساعات", "%d ساعة", "%d ساعة" ],
            d: [ "أقل من يوم", "يوم واحد", [ "يومان", "يومين" ], "%d أيام", "%d يومًا", "%d يوم" ],
            M: [ "أقل من شهر", "شهر واحد", [ "شهران", "شهرين" ], "%d أشهر", "%d شهرا", "%d شهر" ],
            y: [ "أقل من عام", "عام واحد", [ "عامان", "عامين" ], "%d أعوام", "%d عامًا", "%d عام" ]
        }, i = function(e) {
            return function(t, a, i, r) {
                var d = n(t), o = s[e][n(t)];
                return 2 === d && (o = o[a ? 0 : 1]), o.replace(/%d/i, t);
            };
        }, r = [ "يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر" ], d = e.defineLocale("ar", {
            months: r,
            monthsShort: r,
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
            weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "D/‏M/‏YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            meridiemParse: /ص|م/,
            isPM: function(e) {
                return "م" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "ص" : "م";
            },
            calendar: {
                sameDay: "[اليوم عند الساعة] LT",
                nextDay: "[غدًا عند الساعة] LT",
                nextWeek: "dddd [عند الساعة] LT",
                lastDay: "[أمس عند الساعة] LT",
                lastWeek: "dddd [عند الساعة] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "بعد %s",
                past: "منذ %s",
                s: i("s"),
                ss: i("s"),
                m: i("m"),
                mm: i("m"),
                h: i("h"),
                hh: i("h"),
                d: i("d"),
                dd: i("d"),
                M: i("M"),
                MM: i("M"),
                y: i("y"),
                yy: i("y")
            },
            preparse: function(e) {
                return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(e) {
                    return a[e];
                }).replace(/،/g, ",");
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                }).replace(/,/g, "،");
            },
            week: {
                dow: 6,
                doy: 12
            }
        });
        return d;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ar-dz", {
            months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
            monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
            weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "أح_إث_ثلا_أر_خم_جم_سب".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[اليوم على الساعة] LT",
                nextDay: "[غدا على الساعة] LT",
                nextWeek: "dddd [على الساعة] LT",
                lastDay: "[أمس على الساعة] LT",
                lastWeek: "dddd [على الساعة] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "في %s",
                past: "منذ %s",
                s: "ثوان",
                ss: "%d ثانية",
                m: "دقيقة",
                mm: "%d دقائق",
                h: "ساعة",
                hh: "%d ساعات",
                d: "يوم",
                dd: "%d أيام",
                M: "شهر",
                MM: "%d أشهر",
                y: "سنة",
                yy: "%d سنوات"
            },
            week: {
                dow: 0,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ar-kw", {
            months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
            monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
            weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
            weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[اليوم على الساعة] LT",
                nextDay: "[غدا على الساعة] LT",
                nextWeek: "dddd [على الساعة] LT",
                lastDay: "[أمس على الساعة] LT",
                lastWeek: "dddd [على الساعة] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "في %s",
                past: "منذ %s",
                s: "ثوان",
                ss: "%d ثانية",
                m: "دقيقة",
                mm: "%d دقائق",
                h: "ساعة",
                hh: "%d ساعات",
                d: "يوم",
                dd: "%d أيام",
                M: "شهر",
                MM: "%d أشهر",
                y: "سنة",
                yy: "%d سنوات"
            },
            week: {
                dow: 0,
                doy: 12
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "1",
            "2": "2",
            "3": "3",
            "4": "4",
            "5": "5",
            "6": "6",
            "7": "7",
            "8": "8",
            "9": "9",
            "0": "0"
        }, a = function(e) {
            return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5;
        }, n = {
            s: [ "أقل من ثانية", "ثانية واحدة", [ "ثانيتان", "ثانيتين" ], "%d ثوان", "%d ثانية", "%d ثانية" ],
            m: [ "أقل من دقيقة", "دقيقة واحدة", [ "دقيقتان", "دقيقتين" ], "%d دقائق", "%d دقيقة", "%d دقيقة" ],
            h: [ "أقل من ساعة", "ساعة واحدة", [ "ساعتان", "ساعتين" ], "%d ساعات", "%d ساعة", "%d ساعة" ],
            d: [ "أقل من يوم", "يوم واحد", [ "يومان", "يومين" ], "%d أيام", "%d يومًا", "%d يوم" ],
            M: [ "أقل من شهر", "شهر واحد", [ "شهران", "شهرين" ], "%d أشهر", "%d شهرا", "%d شهر" ],
            y: [ "أقل من عام", "عام واحد", [ "عامان", "عامين" ], "%d أعوام", "%d عامًا", "%d عام" ]
        }, s = function(e) {
            return function(t, s, i, r) {
                var d = a(t), o = n[e][a(t)];
                return 2 === d && (o = o[s ? 0 : 1]), o.replace(/%d/i, t);
            };
        }, i = [ "يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر" ], r = e.defineLocale("ar-ly", {
            months: i,
            monthsShort: i,
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
            weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "D/‏M/‏YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            meridiemParse: /ص|م/,
            isPM: function(e) {
                return "م" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "ص" : "م";
            },
            calendar: {
                sameDay: "[اليوم عند الساعة] LT",
                nextDay: "[غدًا عند الساعة] LT",
                nextWeek: "dddd [عند الساعة] LT",
                lastDay: "[أمس عند الساعة] LT",
                lastWeek: "dddd [عند الساعة] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "بعد %s",
                past: "منذ %s",
                s: s("s"),
                ss: s("s"),
                m: s("m"),
                mm: s("m"),
                h: s("h"),
                hh: s("h"),
                d: s("d"),
                dd: s("d"),
                M: s("M"),
                MM: s("M"),
                y: s("y"),
                yy: s("y")
            },
            preparse: function(e) {
                return e.replace(/،/g, ",");
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                }).replace(/,/g, "،");
            },
            week: {
                dow: 6,
                doy: 12
            }
        });
        return r;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ar-ma", {
            months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
            monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
            weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
            weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[اليوم على الساعة] LT",
                nextDay: "[غدا على الساعة] LT",
                nextWeek: "dddd [على الساعة] LT",
                lastDay: "[أمس على الساعة] LT",
                lastWeek: "dddd [على الساعة] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "في %s",
                past: "منذ %s",
                s: "ثوان",
                ss: "%d ثانية",
                m: "دقيقة",
                mm: "%d دقائق",
                h: "ساعة",
                hh: "%d ساعات",
                d: "يوم",
                dd: "%d أيام",
                M: "شهر",
                MM: "%d أشهر",
                y: "سنة",
                yy: "%d سنوات"
            },
            week: {
                dow: 6,
                doy: 12
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "١",
            "2": "٢",
            "3": "٣",
            "4": "٤",
            "5": "٥",
            "6": "٦",
            "7": "٧",
            "8": "٨",
            "9": "٩",
            "0": "٠"
        }, a = {
            "١": "1",
            "٢": "2",
            "٣": "3",
            "٤": "4",
            "٥": "5",
            "٦": "6",
            "٧": "7",
            "٨": "8",
            "٩": "9",
            "٠": "0"
        }, n = e.defineLocale("ar-sa", {
            months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
            monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
            weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            meridiemParse: /ص|م/,
            isPM: function(e) {
                return "م" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "ص" : "م";
            },
            calendar: {
                sameDay: "[اليوم على الساعة] LT",
                nextDay: "[غدا على الساعة] LT",
                nextWeek: "dddd [على الساعة] LT",
                lastDay: "[أمس على الساعة] LT",
                lastWeek: "dddd [على الساعة] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "في %s",
                past: "منذ %s",
                s: "ثوان",
                ss: "%d ثانية",
                m: "دقيقة",
                mm: "%d دقائق",
                h: "ساعة",
                hh: "%d ساعات",
                d: "يوم",
                dd: "%d أيام",
                M: "شهر",
                MM: "%d أشهر",
                y: "سنة",
                yy: "%d سنوات"
            },
            preparse: function(e) {
                return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(e) {
                    return a[e];
                }).replace(/،/g, ",");
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                }).replace(/,/g, "،");
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ar-tn", {
            months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
            monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
            weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
            weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
            weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[اليوم على الساعة] LT",
                nextDay: "[غدا على الساعة] LT",
                nextWeek: "dddd [على الساعة] LT",
                lastDay: "[أمس على الساعة] LT",
                lastWeek: "dddd [على الساعة] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "في %s",
                past: "منذ %s",
                s: "ثوان",
                ss: "%d ثانية",
                m: "دقيقة",
                mm: "%d دقائق",
                h: "ساعة",
                hh: "%d ساعات",
                d: "يوم",
                dd: "%d أيام",
                M: "شهر",
                MM: "%d أشهر",
                y: "سنة",
                yy: "%d سنوات"
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            1: "-inci",
            5: "-inci",
            8: "-inci",
            70: "-inci",
            80: "-inci",
            2: "-nci",
            7: "-nci",
            20: "-nci",
            50: "-nci",
            3: "-üncü",
            4: "-üncü",
            100: "-üncü",
            6: "-ncı",
            9: "-uncu",
            10: "-uncu",
            30: "-uncu",
            60: "-ıncı",
            90: "-ıncı"
        }, a = e.defineLocale("az", {
            months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
            monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
            weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
            weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
            weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[bugün saat] LT",
                nextDay: "[sabah saat] LT",
                nextWeek: "[gələn həftə] dddd [saat] LT",
                lastDay: "[dünən] LT",
                lastWeek: "[keçən həftə] dddd [saat] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s sonra",
                past: "%s əvvəl",
                s: "birneçə saniyə",
                ss: "%d saniyə",
                m: "bir dəqiqə",
                mm: "%d dəqiqə",
                h: "bir saat",
                hh: "%d saat",
                d: "bir gün",
                dd: "%d gün",
                M: "bir ay",
                MM: "%d ay",
                y: "bir il",
                yy: "%d il"
            },
            meridiemParse: /gecə|səhər|gündüz|axşam/,
            isPM: function(e) {
                return /^(gündüz|axşam)$/.test(e);
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "gecə" : e < 12 ? "səhər" : e < 17 ? "gündüz" : "axşam";
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
            ordinal: function(e) {
                if (0 === e) return e + "-ıncı";
                var a = e % 10, n = e % 100 - a, s = e >= 100 ? 100 : null;
                return e + (t[a] || t[n] || t[s]);
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t) {
            var a = e.split("_");
            return t % 10 === 1 && t % 100 !== 11 ? a[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? a[1] : a[2];
        }
        function a(e, a, n) {
            var s = {
                ss: a ? "секунда_секунды_секунд" : "секунду_секунды_секунд",
                mm: a ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін",
                hh: a ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін",
                dd: "дзень_дні_дзён",
                MM: "месяц_месяцы_месяцаў",
                yy: "год_гады_гадоў"
            };
            return "m" === n ? a ? "хвіліна" : "хвіліну" : "h" === n ? a ? "гадзіна" : "гадзіну" : e + " " + t(s[n], +e);
        }
        var n = e.defineLocale("be", {
            months: {
                format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),
                standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")
            },
            monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),
            weekdays: {
                format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),
                standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),
                isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/
            },
            weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"),
            weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY г.",
                LLL: "D MMMM YYYY г., HH:mm",
                LLLL: "dddd, D MMMM YYYY г., HH:mm"
            },
            calendar: {
                sameDay: "[Сёння ў] LT",
                nextDay: "[Заўтра ў] LT",
                lastDay: "[Учора ў] LT",
                nextWeek: function() {
                    return "[У] dddd [ў] LT";
                },
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                      case 3:
                      case 5:
                      case 6:
                        return "[У мінулую] dddd [ў] LT";

                      case 1:
                      case 2:
                      case 4:
                        return "[У мінулы] dddd [ў] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "праз %s",
                past: "%s таму",
                s: "некалькі секунд",
                m: a,
                mm: a,
                h: a,
                hh: a,
                d: "дзень",
                dd: a,
                M: "месяц",
                MM: a,
                y: "год",
                yy: a
            },
            meridiemParse: /ночы|раніцы|дня|вечара/,
            isPM: function(e) {
                return /^(дня|вечара)$/.test(e);
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "ночы" : e < 12 ? "раніцы" : e < 17 ? "дня" : "вечара";
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "M":
                  case "d":
                  case "DDD":
                  case "w":
                  case "W":
                    return e % 10 !== 2 && e % 10 !== 3 || e % 100 === 12 || e % 100 === 13 ? e + "-ы" : e + "-і";

                  case "D":
                    return e + "-га";

                  default:
                    return e;
                }
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("bg", {
            months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
            monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
            weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
            weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"),
            weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "D.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY H:mm",
                LLLL: "dddd, D MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[Днес в] LT",
                nextDay: "[Утре в] LT",
                nextWeek: "dddd [в] LT",
                lastDay: "[Вчера в] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                      case 3:
                      case 6:
                        return "[В изминалата] dddd [в] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[В изминалия] dddd [в] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "след %s",
                past: "преди %s",
                s: "няколко секунди",
                ss: "%d секунди",
                m: "минута",
                mm: "%d минути",
                h: "час",
                hh: "%d часа",
                d: "ден",
                dd: "%d дни",
                M: "месец",
                MM: "%d месеца",
                y: "година",
                yy: "%d години"
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
            ordinal: function(e) {
                var t = e % 10, a = e % 100;
                return 0 === e ? e + "-ев" : 0 === a ? e + "-ен" : a > 10 && a < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти";
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("bm", {
            months: "Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),
            monthsShort: "Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),
            weekdays: "Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),
            weekdaysShort: "Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),
            weekdaysMin: "Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "MMMM [tile] D [san] YYYY",
                LLL: "MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",
                LLLL: "dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"
            },
            calendar: {
                sameDay: "[Bi lɛrɛ] LT",
                nextDay: "[Sini lɛrɛ] LT",
                nextWeek: "dddd [don lɛrɛ] LT",
                lastDay: "[Kunu lɛrɛ] LT",
                lastWeek: "dddd [tɛmɛnen lɛrɛ] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s kɔnɔ",
                past: "a bɛ %s bɔ",
                s: "sanga dama dama",
                ss: "sekondi %d",
                m: "miniti kelen",
                mm: "miniti %d",
                h: "lɛrɛ kelen",
                hh: "lɛrɛ %d",
                d: "tile kelen",
                dd: "tile %d",
                M: "kalo kelen",
                MM: "kalo %d",
                y: "san kelen",
                yy: "san %d"
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "১",
            "2": "২",
            "3": "৩",
            "4": "৪",
            "5": "৫",
            "6": "৬",
            "7": "৭",
            "8": "৮",
            "9": "৯",
            "0": "০"
        }, a = {
            "১": "1",
            "২": "2",
            "৩": "3",
            "৪": "4",
            "৫": "5",
            "৬": "6",
            "৭": "7",
            "৮": "8",
            "৯": "9",
            "০": "0"
        }, n = e.defineLocale("bn", {
            months: "জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),
            monthsShort: "জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),
            weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),
            weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),
            weekdaysMin: "রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),
            longDateFormat: {
                LT: "A h:mm সময়",
                LTS: "A h:mm:ss সময়",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm সময়",
                LLLL: "dddd, D MMMM YYYY, A h:mm সময়"
            },
            calendar: {
                sameDay: "[আজ] LT",
                nextDay: "[আগামীকাল] LT",
                nextWeek: "dddd, LT",
                lastDay: "[গতকাল] LT",
                lastWeek: "[গত] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s পরে",
                past: "%s আগে",
                s: "কয়েক সেকেন্ড",
                ss: "%d সেকেন্ড",
                m: "এক মিনিট",
                mm: "%d মিনিট",
                h: "এক ঘন্টা",
                hh: "%d ঘন্টা",
                d: "এক দিন",
                dd: "%d দিন",
                M: "এক মাস",
                MM: "%d মাস",
                y: "এক বছর",
                yy: "%d বছর"
            },
            preparse: function(e) {
                return e.replace(/[১২৩৪৫৬৭৮৯০]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "রাত" === t && e >= 4 || "দুপুর" === t && e < 5 || "বিকাল" === t ? e + 12 : e;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "রাত" : e < 10 ? "সকাল" : e < 17 ? "দুপুর" : e < 20 ? "বিকাল" : "রাত";
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "༡",
            "2": "༢",
            "3": "༣",
            "4": "༤",
            "5": "༥",
            "6": "༦",
            "7": "༧",
            "8": "༨",
            "9": "༩",
            "0": "༠"
        }, a = {
            "༡": "1",
            "༢": "2",
            "༣": "3",
            "༤": "4",
            "༥": "5",
            "༦": "6",
            "༧": "7",
            "༨": "8",
            "༩": "9",
            "༠": "0"
        }, n = e.defineLocale("bo", {
            months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
            monthsShort: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
            weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),
            weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
            weekdaysMin: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
            longDateFormat: {
                LT: "A h:mm",
                LTS: "A h:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm",
                LLLL: "dddd, D MMMM YYYY, A h:mm"
            },
            calendar: {
                sameDay: "[དི་རིང] LT",
                nextDay: "[སང་ཉིན] LT",
                nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT",
                lastDay: "[ཁ་སང] LT",
                lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s ལ་",
                past: "%s སྔན་ལ",
                s: "ལམ་སང",
                ss: "%d སྐར་ཆ།",
                m: "སྐར་མ་གཅིག",
                mm: "%d སྐར་མ",
                h: "ཆུ་ཚོད་གཅིག",
                hh: "%d ཆུ་ཚོད",
                d: "ཉིན་གཅིག",
                dd: "%d ཉིན་",
                M: "ཟླ་བ་གཅིག",
                MM: "%d ཟླ་བ",
                y: "ལོ་གཅིག",
                yy: "%d ལོ"
            },
            preparse: function(e) {
                return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "མཚན་མོ" === t && e >= 4 || "ཉིན་གུང" === t && e < 5 || "དགོང་དག" === t ? e + 12 : e;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "མཚན་མོ" : e < 10 ? "ཞོགས་ཀས" : e < 17 ? "ཉིན་གུང" : e < 20 ? "དགོང་དག" : "མཚན་མོ";
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a) {
            var n = {
                mm: "munutenn",
                MM: "miz",
                dd: "devezh"
            };
            return e + " " + s(n[a], e);
        }
        function a(e) {
            switch (n(e)) {
              case 1:
              case 3:
              case 4:
              case 5:
              case 9:
                return e + " bloaz";

              default:
                return e + " vloaz";
            }
        }
        function n(e) {
            return e > 9 ? n(e % 10) : e;
        }
        function s(e, t) {
            return 2 === t ? i(e) : e;
        }
        function i(e) {
            var t = {
                m: "v",
                b: "v",
                d: "z"
            };
            return void 0 === t[e.charAt(0)] ? e : t[e.charAt(0)] + e.substring(1);
        }
        var r = e.defineLocale("br", {
            months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
            monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
            weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
            weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
            weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "h[e]mm A",
                LTS: "h[e]mm:ss A",
                L: "DD/MM/YYYY",
                LL: "D [a viz] MMMM YYYY",
                LLL: "D [a viz] MMMM YYYY h[e]mm A",
                LLLL: "dddd, D [a viz] MMMM YYYY h[e]mm A"
            },
            calendar: {
                sameDay: "[Hiziv da] LT",
                nextDay: "[Warc'hoazh da] LT",
                nextWeek: "dddd [da] LT",
                lastDay: "[Dec'h da] LT",
                lastWeek: "dddd [paset da] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "a-benn %s",
                past: "%s 'zo",
                s: "un nebeud segondennoù",
                ss: "%d eilenn",
                m: "ur vunutenn",
                mm: t,
                h: "un eur",
                hh: "%d eur",
                d: "un devezh",
                dd: t,
                M: "ur miz",
                MM: t,
                y: "ur bloaz",
                yy: a
            },
            dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
            ordinal: function(e) {
                var t = 1 === e ? "añ" : "vet";
                return e + t;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return r;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a) {
            var n = e + " ";
            switch (a) {
              case "ss":
                return n += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";

              case "m":
                return t ? "jedna minuta" : "jedne minute";

              case "mm":
                return n += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";

              case "h":
                return t ? "jedan sat" : "jednog sata";

              case "hh":
                return n += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";

              case "dd":
                return n += 1 === e ? "dan" : "dana";

              case "MM":
                return n += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";

              case "yy":
                return n += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina";
            }
        }
        var a = e.defineLocale("bs", {
            months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),
            monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),
            monthsParseExact: !0,
            weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
            weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
            weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd, D. MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[danas u] LT",
                nextDay: "[sutra u] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[u] [nedjelju] [u] LT";

                      case 3:
                        return "[u] [srijedu] [u] LT";

                      case 6:
                        return "[u] [subotu] [u] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[u] dddd [u] LT";
                    }
                },
                lastDay: "[jučer u] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                      case 3:
                        return "[prošlu] dddd [u] LT";

                      case 6:
                        return "[prošle] [subote] [u] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[prošli] dddd [u] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "za %s",
                past: "prije %s",
                s: "par sekundi",
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: "dan",
                dd: t,
                M: "mjesec",
                MM: t,
                y: "godinu",
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ca", {
            months: {
                standalone: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
                format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),
                isFormat: /D[oD]?(\s)+MMMM/
            },
            monthsShort: "gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),
            monthsParseExact: !0,
            weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
            weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
            weekdaysMin: "dg_dl_dt_dc_dj_dv_ds".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM [de] YYYY",
                ll: "D MMM YYYY",
                LLL: "D MMMM [de] YYYY [a les] H:mm",
                lll: "D MMM YYYY, H:mm",
                LLLL: "dddd D MMMM [de] YYYY [a les] H:mm",
                llll: "ddd D MMM YYYY, H:mm"
            },
            calendar: {
                sameDay: function() {
                    return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                },
                nextDay: function() {
                    return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                },
                nextWeek: function() {
                    return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                },
                lastDay: function() {
                    return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                },
                lastWeek: function() {
                    return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT";
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "d'aquí %s",
                past: "fa %s",
                s: "uns segons",
                ss: "%d segons",
                m: "un minut",
                mm: "%d minuts",
                h: "una hora",
                hh: "%d hores",
                d: "un dia",
                dd: "%d dies",
                M: "un mes",
                MM: "%d mesos",
                y: "un any",
                yy: "%d anys"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
            ordinal: function(e, t) {
                var a = 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "è";
                return "w" !== t && "W" !== t || (a = "a"), e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e) {
            return e > 1 && e < 5 && 1 !== ~~(e / 10);
        }
        function a(e, a, n, s) {
            var i = e + " ";
            switch (n) {
              case "s":
                return a || s ? "pár sekund" : "pár sekundami";

              case "ss":
                return a || s ? i + (t(e) ? "sekundy" : "sekund") : i + "sekundami";

              case "m":
                return a ? "minuta" : s ? "minutu" : "minutou";

              case "mm":
                return a || s ? i + (t(e) ? "minuty" : "minut") : i + "minutami";

              case "h":
                return a ? "hodina" : s ? "hodinu" : "hodinou";

              case "hh":
                return a || s ? i + (t(e) ? "hodiny" : "hodin") : i + "hodinami";

              case "d":
                return a || s ? "den" : "dnem";

              case "dd":
                return a || s ? i + (t(e) ? "dny" : "dní") : i + "dny";

              case "M":
                return a || s ? "měsíc" : "měsícem";

              case "MM":
                return a || s ? i + (t(e) ? "měsíce" : "měsíců") : i + "měsíci";

              case "y":
                return a || s ? "rok" : "rokem";

              case "yy":
                return a || s ? i + (t(e) ? "roky" : "let") : i + "lety";
            }
        }
        var n = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"), s = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"), i = e.defineLocale("cs", {
            months: n,
            monthsShort: s,
            monthsParse: function(e, t) {
                var a, n = [];
                for (a = 0; a < 12; a++) n[a] = new RegExp("^" + e[a] + "$|^" + t[a] + "$", "i");
                return n;
            }(n, s),
            shortMonthsParse: function(e) {
                var t, a = [];
                for (t = 0; t < 12; t++) a[t] = new RegExp("^" + e[t] + "$", "i");
                return a;
            }(s),
            longMonthsParse: function(e) {
                var t, a = [];
                for (t = 0; t < 12; t++) a[t] = new RegExp("^" + e[t] + "$", "i");
                return a;
            }(n),
            weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
            weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"),
            weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"),
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd D. MMMM YYYY H:mm",
                l: "D. M. YYYY"
            },
            calendar: {
                sameDay: "[dnes v] LT",
                nextDay: "[zítra v] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[v neděli v] LT";

                      case 1:
                      case 2:
                        return "[v] dddd [v] LT";

                      case 3:
                        return "[ve středu v] LT";

                      case 4:
                        return "[ve čtvrtek v] LT";

                      case 5:
                        return "[v pátek v] LT";

                      case 6:
                        return "[v sobotu v] LT";
                    }
                },
                lastDay: "[včera v] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[minulou neděli v] LT";

                      case 1:
                      case 2:
                        return "[minulé] dddd [v] LT";

                      case 3:
                        return "[minulou středu v] LT";

                      case 4:
                      case 5:
                        return "[minulý] dddd [v] LT";

                      case 6:
                        return "[minulou sobotu v] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "za %s",
                past: "před %s",
                s: a,
                ss: a,
                m: a,
                mm: a,
                h: a,
                hh: a,
                d: a,
                dd: a,
                M: a,
                MM: a,
                y: a,
                yy: a
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("cv", {
            months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),
            monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),
            weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),
            weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),
            weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD-MM-YYYY",
                LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",
                LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",
                LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"
            },
            calendar: {
                sameDay: "[Паян] LT [сехетре]",
                nextDay: "[Ыран] LT [сехетре]",
                lastDay: "[Ӗнер] LT [сехетре]",
                nextWeek: "[Ҫитес] dddd LT [сехетре]",
                lastWeek: "[Иртнӗ] dddd LT [сехетре]",
                sameElse: "L"
            },
            relativeTime: {
                future: function(e) {
                    var t = /сехет$/i.exec(e) ? "рен" : /ҫул$/i.exec(e) ? "тан" : "ран";
                    return e + t;
                },
                past: "%s каялла",
                s: "пӗр-ик ҫеккунт",
                ss: "%d ҫеккунт",
                m: "пӗр минут",
                mm: "%d минут",
                h: "пӗр сехет",
                hh: "%d сехет",
                d: "пӗр кун",
                dd: "%d кун",
                M: "пӗр уйӑх",
                MM: "%d уйӑх",
                y: "пӗр ҫул",
                yy: "%d ҫул"
            },
            dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
            ordinal: "%d-мӗш",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("cy", {
            months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
            monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
            weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
            weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
            weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Heddiw am] LT",
                nextDay: "[Yfory am] LT",
                nextWeek: "dddd [am] LT",
                lastDay: "[Ddoe am] LT",
                lastWeek: "dddd [diwethaf am] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "mewn %s",
                past: "%s yn ôl",
                s: "ychydig eiliadau",
                ss: "%d eiliad",
                m: "munud",
                mm: "%d munud",
                h: "awr",
                hh: "%d awr",
                d: "diwrnod",
                dd: "%d diwrnod",
                M: "mis",
                MM: "%d mis",
                y: "blwyddyn",
                yy: "%d flynedd"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
            ordinal: function(e) {
                var t = e, a = "", n = [ "", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed" ];
                return t > 20 ? a = 40 === t || 50 === t || 60 === t || 80 === t || 100 === t ? "fed" : "ain" : t > 0 && (a = n[t]), 
                e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("da", {
            months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
            monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
            weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
            weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"),
            weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY HH:mm",
                LLLL: "dddd [d.] D. MMMM YYYY [kl.] HH:mm"
            },
            calendar: {
                sameDay: "[i dag kl.] LT",
                nextDay: "[i morgen kl.] LT",
                nextWeek: "på dddd [kl.] LT",
                lastDay: "[i går kl.] LT",
                lastWeek: "[i] dddd[s kl.] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "om %s",
                past: "%s siden",
                s: "få sekunder",
                ss: "%d sekunder",
                m: "et minut",
                mm: "%d minutter",
                h: "en time",
                hh: "%d timer",
                d: "en dag",
                dd: "%d dage",
                M: "en måned",
                MM: "%d måneder",
                y: "et år",
                yy: "%d år"
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = {
                m: [ "eine Minute", "einer Minute" ],
                h: [ "eine Stunde", "einer Stunde" ],
                d: [ "ein Tag", "einem Tag" ],
                dd: [ e + " Tage", e + " Tagen" ],
                M: [ "ein Monat", "einem Monat" ],
                MM: [ e + " Monate", e + " Monaten" ],
                y: [ "ein Jahr", "einem Jahr" ],
                yy: [ e + " Jahre", e + " Jahren" ]
            };
            return t ? s[a][0] : s[a][1];
        }
        var a = e.defineLocale("de", {
            months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
            monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
            monthsParseExact: !0,
            weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
            weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
            weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY HH:mm",
                LLLL: "dddd, D. MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[heute um] LT [Uhr]",
                sameElse: "L",
                nextDay: "[morgen um] LT [Uhr]",
                nextWeek: "dddd [um] LT [Uhr]",
                lastDay: "[gestern um] LT [Uhr]",
                lastWeek: "[letzten] dddd [um] LT [Uhr]"
            },
            relativeTime: {
                future: "in %s",
                past: "vor %s",
                s: "ein paar Sekunden",
                ss: "%d Sekunden",
                m: t,
                mm: "%d Minuten",
                h: t,
                hh: "%d Stunden",
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = {
                m: [ "eine Minute", "einer Minute" ],
                h: [ "eine Stunde", "einer Stunde" ],
                d: [ "ein Tag", "einem Tag" ],
                dd: [ e + " Tage", e + " Tagen" ],
                M: [ "ein Monat", "einem Monat" ],
                MM: [ e + " Monate", e + " Monaten" ],
                y: [ "ein Jahr", "einem Jahr" ],
                yy: [ e + " Jahre", e + " Jahren" ]
            };
            return t ? s[a][0] : s[a][1];
        }
        var a = e.defineLocale("de-at", {
            months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
            monthsShort: "Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
            monthsParseExact: !0,
            weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
            weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
            weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY HH:mm",
                LLLL: "dddd, D. MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[heute um] LT [Uhr]",
                sameElse: "L",
                nextDay: "[morgen um] LT [Uhr]",
                nextWeek: "dddd [um] LT [Uhr]",
                lastDay: "[gestern um] LT [Uhr]",
                lastWeek: "[letzten] dddd [um] LT [Uhr]"
            },
            relativeTime: {
                future: "in %s",
                past: "vor %s",
                s: "ein paar Sekunden",
                ss: "%d Sekunden",
                m: t,
                mm: "%d Minuten",
                h: t,
                hh: "%d Stunden",
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = {
                m: [ "eine Minute", "einer Minute" ],
                h: [ "eine Stunde", "einer Stunde" ],
                d: [ "ein Tag", "einem Tag" ],
                dd: [ e + " Tage", e + " Tagen" ],
                M: [ "ein Monat", "einem Monat" ],
                MM: [ e + " Monate", e + " Monaten" ],
                y: [ "ein Jahr", "einem Jahr" ],
                yy: [ e + " Jahre", e + " Jahren" ]
            };
            return t ? s[a][0] : s[a][1];
        }
        var a = e.defineLocale("de-ch", {
            months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
            monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
            monthsParseExact: !0,
            weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
            weekdaysShort: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
            weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY HH:mm",
                LLLL: "dddd, D. MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[heute um] LT [Uhr]",
                sameElse: "L",
                nextDay: "[morgen um] LT [Uhr]",
                nextWeek: "dddd [um] LT [Uhr]",
                lastDay: "[gestern um] LT [Uhr]",
                lastWeek: "[letzten] dddd [um] LT [Uhr]"
            },
            relativeTime: {
                future: "in %s",
                past: "vor %s",
                s: "ein paar Sekunden",
                ss: "%d Sekunden",
                m: t,
                mm: "%d Minuten",
                h: t,
                hh: "%d Stunden",
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = [ "ޖެނުއަރީ", "ފެބްރުއަރީ", "މާރިޗު", "އޭޕްރީލު", "މޭ", "ޖޫން", "ޖުލައި", "އޯގަސްޓު", "ސެޕްޓެމްބަރު", "އޮކްޓޯބަރު", "ނޮވެމްބަރު", "ޑިސެމްބަރު" ], a = [ "އާދިއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު" ], n = e.defineLocale("dv", {
            months: t,
            monthsShort: t,
            weekdays: a,
            weekdaysShort: a,
            weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "D/M/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            meridiemParse: /މކ|މފ/,
            isPM: function(e) {
                return "މފ" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "މކ" : "މފ";
            },
            calendar: {
                sameDay: "[މިއަދު] LT",
                nextDay: "[މާދަމާ] LT",
                nextWeek: "dddd LT",
                lastDay: "[އިއްޔެ] LT",
                lastWeek: "[ފާއިތުވި] dddd LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "ތެރޭގައި %s",
                past: "ކުރިން %s",
                s: "ސިކުންތުކޮޅެއް",
                ss: "d% ސިކުންތު",
                m: "މިނިޓެއް",
                mm: "މިނިޓު %d",
                h: "ގަޑިއިރެއް",
                hh: "ގަޑިއިރު %d",
                d: "ދުވަހެއް",
                dd: "ދުވަސް %d",
                M: "މަހެއް",
                MM: "މަސް %d",
                y: "އަހަރެއް",
                yy: "އަހަރު %d"
            },
            preparse: function(e) {
                return e.replace(/،/g, ",");
            },
            postformat: function(e) {
                return e.replace(/,/g, "،");
            },
            week: {
                dow: 7,
                doy: 12
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e) {
            return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e);
        }
        var a = e.defineLocale("el", {
            monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
            monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
            months: function(e, t) {
                return e ? "string" == typeof t && /D/.test(t.substring(0, t.indexOf("MMMM"))) ? this._monthsGenitiveEl[e.month()] : this._monthsNominativeEl[e.month()] : this._monthsNominativeEl;
            },
            monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
            weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
            weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
            weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
            meridiem: function(e, t, a) {
                return e > 11 ? a ? "μμ" : "ΜΜ" : a ? "πμ" : "ΠΜ";
            },
            isPM: function(e) {
                return "μ" === (e + "").toLowerCase()[0];
            },
            meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY h:mm A",
                LLLL: "dddd, D MMMM YYYY h:mm A"
            },
            calendarEl: {
                sameDay: "[Σήμερα {}] LT",
                nextDay: "[Αύριο {}] LT",
                nextWeek: "dddd [{}] LT",
                lastDay: "[Χθες {}] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 6:
                        return "[το προηγούμενο] dddd [{}] LT";

                      default:
                        return "[την προηγούμενη] dddd [{}] LT";
                    }
                },
                sameElse: "L"
            },
            calendar: function(e, a) {
                var n = this._calendarEl[e], s = a && a.hours();
                return t(n) && (n = n.apply(a)), n.replace("{}", s % 12 === 1 ? "στη" : "στις");
            },
            relativeTime: {
                future: "σε %s",
                past: "%s πριν",
                s: "λίγα δευτερόλεπτα",
                ss: "%d δευτερόλεπτα",
                m: "ένα λεπτό",
                mm: "%d λεπτά",
                h: "μία ώρα",
                hh: "%d ώρες",
                d: "μία μέρα",
                dd: "%d μέρες",
                M: "ένας μήνας",
                MM: "%d μήνες",
                y: "ένας χρόνος",
                yy: "%d χρόνια"
            },
            dayOfMonthOrdinalParse: /\d{1,2}η/,
            ordinal: "%dη",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("en-au", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY h:mm A",
                LLLL: "dddd, D MMMM YYYY h:mm A"
            },
            calendar: {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                ss: "%d seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                return e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("en-ca", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "YYYY-MM-DD",
                LL: "MMMM D, YYYY",
                LLL: "MMMM D, YYYY h:mm A",
                LLLL: "dddd, MMMM D, YYYY h:mm A"
            },
            calendar: {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                ss: "%d seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                return e + a;
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("en-gb", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                ss: "%d seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                return e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("en-ie", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD-MM-YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                ss: "%d seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                return e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("en-il", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                return e + a;
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("en-nz", {
            months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
            monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
            weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
            weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
            weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY h:mm A",
                LLLL: "dddd, D MMMM YYYY h:mm A"
            },
            calendar: {
                sameDay: "[Today at] LT",
                nextDay: "[Tomorrow at] LT",
                nextWeek: "dddd [at] LT",
                lastDay: "[Yesterday at] LT",
                lastWeek: "[Last] dddd [at] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "a few seconds",
                ss: "%d seconds",
                m: "a minute",
                mm: "%d minutes",
                h: "an hour",
                hh: "%d hours",
                d: "a day",
                dd: "%d days",
                M: "a month",
                MM: "%d months",
                y: "a year",
                yy: "%d years"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                return e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("eo", {
            months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
            monthsShort: "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
            weekdays: "dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),
            weekdaysShort: "dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),
            weekdaysMin: "di_lu_ma_me_ĵa_ve_sa".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY-MM-DD",
                LL: "D[-a de] MMMM, YYYY",
                LLL: "D[-a de] MMMM, YYYY HH:mm",
                LLLL: "dddd, [la] D[-a de] MMMM, YYYY HH:mm"
            },
            meridiemParse: /[ap]\.t\.m/i,
            isPM: function(e) {
                return "p" === e.charAt(0).toLowerCase();
            },
            meridiem: function(e, t, a) {
                return e > 11 ? a ? "p.t.m." : "P.T.M." : a ? "a.t.m." : "A.T.M.";
            },
            calendar: {
                sameDay: "[Hodiaŭ je] LT",
                nextDay: "[Morgaŭ je] LT",
                nextWeek: "dddd [je] LT",
                lastDay: "[Hieraŭ je] LT",
                lastWeek: "[pasinta] dddd [je] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "post %s",
                past: "antaŭ %s",
                s: "sekundoj",
                ss: "%d sekundoj",
                m: "minuto",
                mm: "%d minutoj",
                h: "horo",
                hh: "%d horoj",
                d: "tago",
                dd: "%d tagoj",
                M: "monato",
                MM: "%d monatoj",
                y: "jaro",
                yy: "%d jaroj"
            },
            dayOfMonthOrdinalParse: /\d{1,2}a/,
            ordinal: "%da",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), a = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), n = [ /^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i ], s = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, i = e.defineLocale("es", {
            months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
            monthsShort: function(e, n) {
                return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t;
            },
            monthsRegex: s,
            monthsShortRegex: s,
            monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
            monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
            monthsParse: n,
            longMonthsParse: n,
            shortMonthsParse: n,
            weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
            weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
            weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D [de] MMMM [de] YYYY",
                LLL: "D [de] MMMM [de] YYYY H:mm",
                LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
            },
            calendar: {
                sameDay: function() {
                    return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                nextDay: function() {
                    return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                nextWeek: function() {
                    return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                lastDay: function() {
                    return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                lastWeek: function() {
                    return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "en %s",
                past: "hace %s",
                s: "unos segundos",
                ss: "%d segundos",
                m: "un minuto",
                mm: "%d minutos",
                h: "una hora",
                hh: "%d horas",
                d: "un día",
                dd: "%d días",
                M: "un mes",
                MM: "%d meses",
                y: "un año",
                yy: "%d años"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), a = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), n = [ /^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i ], s = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i, i = e.defineLocale("es-do", {
            months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
            monthsShort: function(e, n) {
                return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t;
            },
            monthsRegex: s,
            monthsShortRegex: s,
            monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
            monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
            monthsParse: n,
            longMonthsParse: n,
            shortMonthsParse: n,
            weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
            weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
            weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "DD/MM/YYYY",
                LL: "D [de] MMMM [de] YYYY",
                LLL: "D [de] MMMM [de] YYYY h:mm A",
                LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A"
            },
            calendar: {
                sameDay: function() {
                    return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                nextDay: function() {
                    return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                nextWeek: function() {
                    return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                lastDay: function() {
                    return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                lastWeek: function() {
                    return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "en %s",
                past: "hace %s",
                s: "unos segundos",
                ss: "%d segundos",
                m: "un minuto",
                mm: "%d minutos",
                h: "una hora",
                hh: "%d horas",
                d: "un día",
                dd: "%d días",
                M: "un mes",
                MM: "%d meses",
                y: "un año",
                yy: "%d años"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"), a = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"), n = e.defineLocale("es-us", {
            months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
            monthsShort: function(e, n) {
                return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t;
            },
            monthsParseExact: !0,
            weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
            weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
            weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "MM/DD/YYYY",
                LL: "MMMM [de] D [de] YYYY",
                LLL: "MMMM [de] D [de] YYYY h:mm A",
                LLLL: "dddd, MMMM [de] D [de] YYYY h:mm A"
            },
            calendar: {
                sameDay: function() {
                    return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                nextDay: function() {
                    return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                nextWeek: function() {
                    return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                lastDay: function() {
                    return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                lastWeek: function() {
                    return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "en %s",
                past: "hace %s",
                s: "unos segundos",
                ss: "%d segundos",
                m: "un minuto",
                mm: "%d minutos",
                h: "una hora",
                hh: "%d horas",
                d: "un día",
                dd: "%d días",
                M: "un mes",
                MM: "%d meses",
                y: "un año",
                yy: "%d años"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = {
                s: [ "mõne sekundi", "mõni sekund", "paar sekundit" ],
                ss: [ e + "sekundi", e + "sekundit" ],
                m: [ "ühe minuti", "üks minut" ],
                mm: [ e + " minuti", e + " minutit" ],
                h: [ "ühe tunni", "tund aega", "üks tund" ],
                hh: [ e + " tunni", e + " tundi" ],
                d: [ "ühe päeva", "üks päev" ],
                M: [ "kuu aja", "kuu aega", "üks kuu" ],
                MM: [ e + " kuu", e + " kuud" ],
                y: [ "ühe aasta", "aasta", "üks aasta" ],
                yy: [ e + " aasta", e + " aastat" ]
            };
            return t ? s[a][2] ? s[a][2] : s[a][1] : n ? s[a][0] : s[a][1];
        }
        var a = e.defineLocale("et", {
            months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
            monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
            weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
            weekdaysShort: "P_E_T_K_N_R_L".split("_"),
            weekdaysMin: "P_E_T_K_N_R_L".split("_"),
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd, D. MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[Täna,] LT",
                nextDay: "[Homme,] LT",
                nextWeek: "[Järgmine] dddd LT",
                lastDay: "[Eile,] LT",
                lastWeek: "[Eelmine] dddd LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s pärast",
                past: "%s tagasi",
                s: t,
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: t,
                dd: "%d päeva",
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("eu", {
            months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
            monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
            monthsParseExact: !0,
            weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
            weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"),
            weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY-MM-DD",
                LL: "YYYY[ko] MMMM[ren] D[a]",
                LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm",
                LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",
                l: "YYYY-M-D",
                ll: "YYYY[ko] MMM D[a]",
                lll: "YYYY[ko] MMM D[a] HH:mm",
                llll: "ddd, YYYY[ko] MMM D[a] HH:mm"
            },
            calendar: {
                sameDay: "[gaur] LT[etan]",
                nextDay: "[bihar] LT[etan]",
                nextWeek: "dddd LT[etan]",
                lastDay: "[atzo] LT[etan]",
                lastWeek: "[aurreko] dddd LT[etan]",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s barru",
                past: "duela %s",
                s: "segundo batzuk",
                ss: "%d segundo",
                m: "minutu bat",
                mm: "%d minutu",
                h: "ordu bat",
                hh: "%d ordu",
                d: "egun bat",
                dd: "%d egun",
                M: "hilabete bat",
                MM: "%d hilabete",
                y: "urte bat",
                yy: "%d urte"
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "۱",
            "2": "۲",
            "3": "۳",
            "4": "۴",
            "5": "۵",
            "6": "۶",
            "7": "۷",
            "8": "۸",
            "9": "۹",
            "0": "۰"
        }, a = {
            "۱": "1",
            "۲": "2",
            "۳": "3",
            "۴": "4",
            "۵": "5",
            "۶": "6",
            "۷": "7",
            "۸": "8",
            "۹": "9",
            "۰": "0"
        }, n = e.defineLocale("fa", {
            months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
            monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
            weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
            weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
            weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            meridiemParse: /قبل از ظهر|بعد از ظهر/,
            isPM: function(e) {
                return /بعد از ظهر/.test(e);
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "قبل از ظهر" : "بعد از ظهر";
            },
            calendar: {
                sameDay: "[امروز ساعت] LT",
                nextDay: "[فردا ساعت] LT",
                nextWeek: "dddd [ساعت] LT",
                lastDay: "[دیروز ساعت] LT",
                lastWeek: "dddd [پیش] [ساعت] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "در %s",
                past: "%s پیش",
                s: "چند ثانیه",
                ss: "ثانیه d%",
                m: "یک دقیقه",
                mm: "%d دقیقه",
                h: "یک ساعت",
                hh: "%d ساعت",
                d: "یک روز",
                dd: "%d روز",
                M: "یک ماه",
                MM: "%d ماه",
                y: "یک سال",
                yy: "%d سال"
            },
            preparse: function(e) {
                return e.replace(/[۰-۹]/g, function(e) {
                    return a[e];
                }).replace(/،/g, ",");
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                }).replace(/,/g, "،");
            },
            dayOfMonthOrdinalParse: /\d{1,2}م/,
            ordinal: "%dم",
            week: {
                dow: 6,
                doy: 12
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, n, s) {
            var i = "";
            switch (n) {
              case "s":
                return s ? "muutaman sekunnin" : "muutama sekunti";

              case "ss":
                return s ? "sekunnin" : "sekuntia";

              case "m":
                return s ? "minuutin" : "minuutti";

              case "mm":
                i = s ? "minuutin" : "minuuttia";
                break;

              case "h":
                return s ? "tunnin" : "tunti";

              case "hh":
                i = s ? "tunnin" : "tuntia";
                break;

              case "d":
                return s ? "päivän" : "päivä";

              case "dd":
                i = s ? "päivän" : "päivää";
                break;

              case "M":
                return s ? "kuukauden" : "kuukausi";

              case "MM":
                i = s ? "kuukauden" : "kuukautta";
                break;

              case "y":
                return s ? "vuoden" : "vuosi";

              case "yy":
                i = s ? "vuoden" : "vuotta";
            }
            return i = a(e, s) + " " + i;
        }
        function a(e, t) {
            return e < 10 ? t ? s[e] : n[e] : e;
        }
        var n = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "), s = [ "nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", n[7], n[8], n[9] ], i = e.defineLocale("fi", {
            months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
            monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
            weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
            weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"),
            weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"),
            longDateFormat: {
                LT: "HH.mm",
                LTS: "HH.mm.ss",
                L: "DD.MM.YYYY",
                LL: "Do MMMM[ta] YYYY",
                LLL: "Do MMMM[ta] YYYY, [klo] HH.mm",
                LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm",
                l: "D.M.YYYY",
                ll: "Do MMM YYYY",
                lll: "Do MMM YYYY, [klo] HH.mm",
                llll: "ddd, Do MMM YYYY, [klo] HH.mm"
            },
            calendar: {
                sameDay: "[tänään] [klo] LT",
                nextDay: "[huomenna] [klo] LT",
                nextWeek: "dddd [klo] LT",
                lastDay: "[eilen] [klo] LT",
                lastWeek: "[viime] dddd[na] [klo] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s päästä",
                past: "%s sitten",
                s: t,
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("fo", {
            months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
            monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
            weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
            weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"),
            weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D. MMMM, YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Í dag kl.] LT",
                nextDay: "[Í morgin kl.] LT",
                nextWeek: "dddd [kl.] LT",
                lastDay: "[Í gjár kl.] LT",
                lastWeek: "[síðstu] dddd [kl] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "um %s",
                past: "%s síðani",
                s: "fá sekund",
                ss: "%d sekundir",
                m: "ein minutt",
                mm: "%d minuttir",
                h: "ein tími",
                hh: "%d tímar",
                d: "ein dagur",
                dd: "%d dagar",
                M: "ein mánaði",
                MM: "%d mánaðir",
                y: "eitt ár",
                yy: "%d ár"
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("fr", {
            months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
            monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
            monthsParseExact: !0,
            weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
            weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
            weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Aujourd’hui à] LT",
                nextDay: "[Demain à] LT",
                nextWeek: "dddd [à] LT",
                lastDay: "[Hier à] LT",
                lastWeek: "dddd [dernier à] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "dans %s",
                past: "il y a %s",
                s: "quelques secondes",
                ss: "%d secondes",
                m: "une minute",
                mm: "%d minutes",
                h: "une heure",
                hh: "%d heures",
                d: "un jour",
                dd: "%d jours",
                M: "un mois",
                MM: "%d mois",
                y: "un an",
                yy: "%d ans"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "D":
                    return e + (1 === e ? "er" : "");

                  default:
                  case "M":
                  case "Q":
                  case "DDD":
                  case "d":
                    return e + (1 === e ? "er" : "e");

                  case "w":
                  case "W":
                    return e + (1 === e ? "re" : "e");
                }
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("fr-ca", {
            months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
            monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
            monthsParseExact: !0,
            weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
            weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
            weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY-MM-DD",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Aujourd’hui à] LT",
                nextDay: "[Demain à] LT",
                nextWeek: "dddd [à] LT",
                lastDay: "[Hier à] LT",
                lastWeek: "dddd [dernier à] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "dans %s",
                past: "il y a %s",
                s: "quelques secondes",
                ss: "%d secondes",
                m: "une minute",
                mm: "%d minutes",
                h: "une heure",
                hh: "%d heures",
                d: "un jour",
                dd: "%d jours",
                M: "un mois",
                MM: "%d mois",
                y: "un an",
                yy: "%d ans"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
            ordinal: function(e, t) {
                switch (t) {
                  default:
                  case "M":
                  case "Q":
                  case "D":
                  case "DDD":
                  case "d":
                    return e + (1 === e ? "er" : "e");

                  case "w":
                  case "W":
                    return e + (1 === e ? "re" : "e");
                }
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("fr-ch", {
            months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
            monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
            monthsParseExact: !0,
            weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
            weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
            weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Aujourd’hui à] LT",
                nextDay: "[Demain à] LT",
                nextWeek: "dddd [à] LT",
                lastDay: "[Hier à] LT",
                lastWeek: "dddd [dernier à] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "dans %s",
                past: "il y a %s",
                s: "quelques secondes",
                ss: "%d secondes",
                m: "une minute",
                mm: "%d minutes",
                h: "une heure",
                hh: "%d heures",
                d: "un jour",
                dd: "%d jours",
                M: "un mois",
                MM: "%d mois",
                y: "un an",
                yy: "%d ans"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
            ordinal: function(e, t) {
                switch (t) {
                  default:
                  case "M":
                  case "Q":
                  case "D":
                  case "DDD":
                  case "d":
                    return e + (1 === e ? "er" : "e");

                  case "w":
                  case "W":
                    return e + (1 === e ? "re" : "e");
                }
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"), a = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), n = e.defineLocale("fy", {
            months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),
            monthsShort: function(e, n) {
                return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t;
            },
            monthsParseExact: !0,
            weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),
            weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"),
            weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD-MM-YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[hjoed om] LT",
                nextDay: "[moarn om] LT",
                nextWeek: "dddd [om] LT",
                lastDay: "[juster om] LT",
                lastWeek: "[ôfrûne] dddd [om] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "oer %s",
                past: "%s lyn",
                s: "in pear sekonden",
                ss: "%d sekonden",
                m: "ien minút",
                mm: "%d minuten",
                h: "ien oere",
                hh: "%d oeren",
                d: "ien dei",
                dd: "%d dagen",
                M: "ien moanne",
                MM: "%d moannen",
                y: "ien jier",
                yy: "%d jierren"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function(e) {
                return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = [ "Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd" ], a = [ "Faoi", "Gear", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùn", "Sult", "Dàmh", "Samh", "Dùbh" ], n = [ "Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne" ], s = [ "Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis" ], i = [ "Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa" ], r = e.defineLocale("gd", {
            months: t,
            monthsShort: a,
            monthsParseExact: !0,
            weekdays: n,
            weekdaysShort: s,
            weekdaysMin: i,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[An-diugh aig] LT",
                nextDay: "[A-màireach aig] LT",
                nextWeek: "dddd [aig] LT",
                lastDay: "[An-dè aig] LT",
                lastWeek: "dddd [seo chaidh] [aig] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "ann an %s",
                past: "bho chionn %s",
                s: "beagan diogan",
                ss: "%d diogan",
                m: "mionaid",
                mm: "%d mionaidean",
                h: "uair",
                hh: "%d uairean",
                d: "latha",
                dd: "%d latha",
                M: "mìos",
                MM: "%d mìosan",
                y: "bliadhna",
                yy: "%d bliadhna"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
            ordinal: function(e) {
                var t = 1 === e ? "d" : e % 10 === 2 ? "na" : "mh";
                return e + t;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return r;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("gl", {
            months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),
            monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),
            monthsParseExact: !0,
            weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),
            weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"),
            weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D [de] MMMM [de] YYYY",
                LLL: "D [de] MMMM [de] YYYY H:mm",
                LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
            },
            calendar: {
                sameDay: function() {
                    return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT";
                },
                nextDay: function() {
                    return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT";
                },
                nextWeek: function() {
                    return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT";
                },
                lastDay: function() {
                    return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT";
                },
                lastWeek: function() {
                    return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT";
                },
                sameElse: "L"
            },
            relativeTime: {
                future: function(e) {
                    return 0 === e.indexOf("un") ? "n" + e : "en " + e;
                },
                past: "hai %s",
                s: "uns segundos",
                ss: "%d segundos",
                m: "un minuto",
                mm: "%d minutos",
                h: "unha hora",
                hh: "%d horas",
                d: "un día",
                dd: "%d días",
                M: "un mes",
                MM: "%d meses",
                y: "un ano",
                yy: "%d anos"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = {
                s: [ "thodde secondanim", "thodde second" ],
                ss: [ e + " secondanim", e + " second" ],
                m: [ "eka mintan", "ek minute" ],
                mm: [ e + " mintanim", e + " mintam" ],
                h: [ "eka horan", "ek hor" ],
                hh: [ e + " horanim", e + " horam" ],
                d: [ "eka disan", "ek dis" ],
                dd: [ e + " disanim", e + " dis" ],
                M: [ "eka mhoinean", "ek mhoino" ],
                MM: [ e + " mhoineanim", e + " mhoine" ],
                y: [ "eka vorsan", "ek voros" ],
                yy: [ e + " vorsanim", e + " vorsam" ]
            };
            return t ? s[a][0] : s[a][1];
        }
        var a = e.defineLocale("gom-latn", {
            months: "Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),
            monthsShort: "Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),
            monthsParseExact: !0,
            weekdays: "Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),
            weekdaysShort: "Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),
            weekdaysMin: "Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "A h:mm [vazta]",
                LTS: "A h:mm:ss [vazta]",
                L: "DD-MM-YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY A h:mm [vazta]",
                LLLL: "dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",
                llll: "ddd, D MMM YYYY, A h:mm [vazta]"
            },
            calendar: {
                sameDay: "[Aiz] LT",
                nextDay: "[Faleam] LT",
                nextWeek: "[Ieta to] dddd[,] LT",
                lastDay: "[Kal] LT",
                lastWeek: "[Fatlo] dddd[,] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s",
                past: "%s adim",
                s: t,
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}(er)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "D":
                    return e + "er";

                  default:
                  case "M":
                  case "Q":
                  case "DDD":
                  case "d":
                  case "w":
                  case "W":
                    return e;
                }
            },
            week: {
                dow: 1,
                doy: 4
            },
            meridiemParse: /rati|sokalli|donparam|sanje/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "rati" === t ? e < 4 ? e : e + 12 : "sokalli" === t ? e : "donparam" === t ? e > 12 ? e : e + 12 : "sanje" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "rati" : e < 12 ? "sokalli" : e < 16 ? "donparam" : e < 20 ? "sanje" : "rati";
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "૧",
            "2": "૨",
            "3": "૩",
            "4": "૪",
            "5": "૫",
            "6": "૬",
            "7": "૭",
            "8": "૮",
            "9": "૯",
            "0": "૦"
        }, a = {
            "૧": "1",
            "૨": "2",
            "૩": "3",
            "૪": "4",
            "૫": "5",
            "૬": "6",
            "૭": "7",
            "૮": "8",
            "૯": "9",
            "૦": "0"
        }, n = e.defineLocale("gu", {
            months: "જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),
            monthsShort: "જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),
            monthsParseExact: !0,
            weekdays: "રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),
            weekdaysShort: "રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),
            weekdaysMin: "ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),
            longDateFormat: {
                LT: "A h:mm વાગ્યે",
                LTS: "A h:mm:ss વાગ્યે",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm વાગ્યે",
                LLLL: "dddd, D MMMM YYYY, A h:mm વાગ્યે"
            },
            calendar: {
                sameDay: "[આજ] LT",
                nextDay: "[કાલે] LT",
                nextWeek: "dddd, LT",
                lastDay: "[ગઇકાલે] LT",
                lastWeek: "[પાછલા] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s મા",
                past: "%s પેહલા",
                s: "અમુક પળો",
                ss: "%d સેકંડ",
                m: "એક મિનિટ",
                mm: "%d મિનિટ",
                h: "એક કલાક",
                hh: "%d કલાક",
                d: "એક દિવસ",
                dd: "%d દિવસ",
                M: "એક મહિનો",
                MM: "%d મહિનો",
                y: "એક વર્ષ",
                yy: "%d વર્ષ"
            },
            preparse: function(e) {
                return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "રાત" === t ? e < 4 ? e : e + 12 : "સવાર" === t ? e : "બપોર" === t ? e >= 10 ? e : e + 12 : "સાંજ" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "રાત" : e < 10 ? "સવાર" : e < 17 ? "બપોર" : e < 20 ? "સાંજ" : "રાત";
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("he", {
            months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
            monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
            weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
            weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
            weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D [ב]MMMM YYYY",
                LLL: "D [ב]MMMM YYYY HH:mm",
                LLLL: "dddd, D [ב]MMMM YYYY HH:mm",
                l: "D/M/YYYY",
                ll: "D MMM YYYY",
                lll: "D MMM YYYY HH:mm",
                llll: "ddd, D MMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[היום ב־]LT",
                nextDay: "[מחר ב־]LT",
                nextWeek: "dddd [בשעה] LT",
                lastDay: "[אתמול ב־]LT",
                lastWeek: "[ביום] dddd [האחרון בשעה] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "בעוד %s",
                past: "לפני %s",
                s: "מספר שניות",
                ss: "%d שניות",
                m: "דקה",
                mm: "%d דקות",
                h: "שעה",
                hh: function(e) {
                    return 2 === e ? "שעתיים" : e + " שעות";
                },
                d: "יום",
                dd: function(e) {
                    return 2 === e ? "יומיים" : e + " ימים";
                },
                M: "חודש",
                MM: function(e) {
                    return 2 === e ? "חודשיים" : e + " חודשים";
                },
                y: "שנה",
                yy: function(e) {
                    return 2 === e ? "שנתיים" : e % 10 === 0 && 10 !== e ? e + " שנה" : e + " שנים";
                }
            },
            meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
            isPM: function(e) {
                return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(e);
            },
            meridiem: function(e, t, a) {
                return e < 5 ? "לפנות בוקר" : e < 10 ? "בבוקר" : e < 12 ? a ? 'לפנה"צ' : "לפני הצהריים" : e < 18 ? a ? 'אחה"צ' : "אחרי הצהריים" : "בערב";
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "१",
            "2": "२",
            "3": "३",
            "4": "४",
            "5": "५",
            "6": "६",
            "7": "७",
            "8": "८",
            "9": "९",
            "0": "०"
        }, a = {
            "१": "1",
            "२": "2",
            "३": "3",
            "४": "4",
            "५": "5",
            "६": "6",
            "७": "7",
            "८": "8",
            "९": "9",
            "०": "0"
        }, n = e.defineLocale("hi", {
            months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),
            monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),
            monthsParseExact: !0,
            weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
            weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),
            weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
            longDateFormat: {
                LT: "A h:mm बजे",
                LTS: "A h:mm:ss बजे",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm बजे",
                LLLL: "dddd, D MMMM YYYY, A h:mm बजे"
            },
            calendar: {
                sameDay: "[आज] LT",
                nextDay: "[कल] LT",
                nextWeek: "dddd, LT",
                lastDay: "[कल] LT",
                lastWeek: "[पिछले] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s में",
                past: "%s पहले",
                s: "कुछ ही क्षण",
                ss: "%d सेकंड",
                m: "एक मिनट",
                mm: "%d मिनट",
                h: "एक घंटा",
                hh: "%d घंटे",
                d: "एक दिन",
                dd: "%d दिन",
                M: "एक महीने",
                MM: "%d महीने",
                y: "एक वर्ष",
                yy: "%d वर्ष"
            },
            preparse: function(e) {
                return e.replace(/[१२३४५६७८९०]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            meridiemParse: /रात|सुबह|दोपहर|शाम/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "रात" === t ? e < 4 ? e : e + 12 : "सुबह" === t ? e : "दोपहर" === t ? e >= 10 ? e : e + 12 : "शाम" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "रात" : e < 10 ? "सुबह" : e < 17 ? "दोपहर" : e < 20 ? "शाम" : "रात";
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a) {
            var n = e + " ";
            switch (a) {
              case "ss":
                return n += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";

              case "m":
                return t ? "jedna minuta" : "jedne minute";

              case "mm":
                return n += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";

              case "h":
                return t ? "jedan sat" : "jednog sata";

              case "hh":
                return n += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";

              case "dd":
                return n += 1 === e ? "dan" : "dana";

              case "MM":
                return n += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";

              case "yy":
                return n += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina";
            }
        }
        var a = e.defineLocale("hr", {
            months: {
                format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),
                standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")
            },
            monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
            monthsParseExact: !0,
            weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
            weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
            weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd, D. MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[danas u] LT",
                nextDay: "[sutra u] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[u] [nedjelju] [u] LT";

                      case 3:
                        return "[u] [srijedu] [u] LT";

                      case 6:
                        return "[u] [subotu] [u] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[u] dddd [u] LT";
                    }
                },
                lastDay: "[jučer u] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                      case 3:
                        return "[prošlu] dddd [u] LT";

                      case 6:
                        return "[prošle] [subote] [u] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[prošli] dddd [u] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "za %s",
                past: "prije %s",
                s: "par sekundi",
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: "dan",
                dd: t,
                M: "mjesec",
                MM: t,
                y: "godinu",
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = e;
            switch (a) {
              case "s":
                return n || t ? "néhány másodperc" : "néhány másodperce";

              case "ss":
                return s + (n || t) ? " másodperc" : " másodperce";

              case "m":
                return "egy" + (n || t ? " perc" : " perce");

              case "mm":
                return s + (n || t ? " perc" : " perce");

              case "h":
                return "egy" + (n || t ? " óra" : " órája");

              case "hh":
                return s + (n || t ? " óra" : " órája");

              case "d":
                return "egy" + (n || t ? " nap" : " napja");

              case "dd":
                return s + (n || t ? " nap" : " napja");

              case "M":
                return "egy" + (n || t ? " hónap" : " hónapja");

              case "MM":
                return s + (n || t ? " hónap" : " hónapja");

              case "y":
                return "egy" + (n || t ? " év" : " éve");

              case "yy":
                return s + (n || t ? " év" : " éve");
            }
            return "";
        }
        function a(e) {
            return (e ? "" : "[múlt] ") + "[" + n[this.day()] + "] LT[-kor]";
        }
        var n = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "), s = e.defineLocale("hu", {
            months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
            monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
            weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
            weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
            weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"),
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "YYYY.MM.DD.",
                LL: "YYYY. MMMM D.",
                LLL: "YYYY. MMMM D. H:mm",
                LLLL: "YYYY. MMMM D., dddd H:mm"
            },
            meridiemParse: /de|du/i,
            isPM: function(e) {
                return "u" === e.charAt(1).toLowerCase();
            },
            meridiem: function(e, t, a) {
                return e < 12 ? a === !0 ? "de" : "DE" : a === !0 ? "du" : "DU";
            },
            calendar: {
                sameDay: "[ma] LT[-kor]",
                nextDay: "[holnap] LT[-kor]",
                nextWeek: function() {
                    return a.call(this, !0);
                },
                lastDay: "[tegnap] LT[-kor]",
                lastWeek: function() {
                    return a.call(this, !1);
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "%s múlva",
                past: "%s",
                s: t,
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return s;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("hy-am", {
            months: {
                format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),
                standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")
            },
            monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),
            weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),
            weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
            weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY թ.",
                LLL: "D MMMM YYYY թ., HH:mm",
                LLLL: "dddd, D MMMM YYYY թ., HH:mm"
            },
            calendar: {
                sameDay: "[այսօր] LT",
                nextDay: "[վաղը] LT",
                lastDay: "[երեկ] LT",
                nextWeek: function() {
                    return "dddd [օրը ժամը] LT";
                },
                lastWeek: function() {
                    return "[անցած] dddd [օրը ժամը] LT";
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "%s հետո",
                past: "%s առաջ",
                s: "մի քանի վայրկյան",
                ss: "%d վայրկյան",
                m: "րոպե",
                mm: "%d րոպե",
                h: "ժամ",
                hh: "%d ժամ",
                d: "օր",
                dd: "%d օր",
                M: "ամիս",
                MM: "%d ամիս",
                y: "տարի",
                yy: "%d տարի"
            },
            meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
            isPM: function(e) {
                return /^(ցերեկվա|երեկոյան)$/.test(e);
            },
            meridiem: function(e) {
                return e < 4 ? "գիշերվա" : e < 12 ? "առավոտվա" : e < 17 ? "ցերեկվա" : "երեկոյան";
            },
            dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "DDD":
                  case "w":
                  case "W":
                  case "DDDo":
                    return 1 === e ? e + "-ին" : e + "-րդ";

                  default:
                    return e;
                }
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("id", {
            months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
            monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),
            weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
            weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
            weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
            longDateFormat: {
                LT: "HH.mm",
                LTS: "HH.mm.ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY [pukul] HH.mm",
                LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
            },
            meridiemParse: /pagi|siang|sore|malam/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "pagi" === t ? e : "siang" === t ? e >= 11 ? e : e + 12 : "sore" === t || "malam" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 11 ? "pagi" : e < 15 ? "siang" : e < 19 ? "sore" : "malam";
            },
            calendar: {
                sameDay: "[Hari ini pukul] LT",
                nextDay: "[Besok pukul] LT",
                nextWeek: "dddd [pukul] LT",
                lastDay: "[Kemarin pukul] LT",
                lastWeek: "dddd [lalu pukul] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "dalam %s",
                past: "%s yang lalu",
                s: "beberapa detik",
                ss: "%d detik",
                m: "semenit",
                mm: "%d menit",
                h: "sejam",
                hh: "%d jam",
                d: "sehari",
                dd: "%d hari",
                M: "sebulan",
                MM: "%d bulan",
                y: "setahun",
                yy: "%d tahun"
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e) {
            return e % 100 === 11 || e % 10 !== 1;
        }
        function a(e, a, n, s) {
            var i = e + " ";
            switch (n) {
              case "s":
                return a || s ? "nokkrar sekúndur" : "nokkrum sekúndum";

              case "ss":
                return t(e) ? i + (a || s ? "sekúndur" : "sekúndum") : i + "sekúnda";

              case "m":
                return a ? "mínúta" : "mínútu";

              case "mm":
                return t(e) ? i + (a || s ? "mínútur" : "mínútum") : a ? i + "mínúta" : i + "mínútu";

              case "hh":
                return t(e) ? i + (a || s ? "klukkustundir" : "klukkustundum") : i + "klukkustund";

              case "d":
                return a ? "dagur" : s ? "dag" : "degi";

              case "dd":
                return t(e) ? a ? i + "dagar" : i + (s ? "daga" : "dögum") : a ? i + "dagur" : i + (s ? "dag" : "degi");

              case "M":
                return a ? "mánuður" : s ? "mánuð" : "mánuði";

              case "MM":
                return t(e) ? a ? i + "mánuðir" : i + (s ? "mánuði" : "mánuðum") : a ? i + "mánuður" : i + (s ? "mánuð" : "mánuði");

              case "y":
                return a || s ? "ár" : "ári";

              case "yy":
                return t(e) ? i + (a || s ? "ár" : "árum") : i + (a || s ? "ár" : "ári");
            }
        }
        var n = e.defineLocale("is", {
            months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
            monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
            weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
            weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"),
            weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY [kl.] H:mm",
                LLLL: "dddd, D. MMMM YYYY [kl.] H:mm"
            },
            calendar: {
                sameDay: "[í dag kl.] LT",
                nextDay: "[á morgun kl.] LT",
                nextWeek: "dddd [kl.] LT",
                lastDay: "[í gær kl.] LT",
                lastWeek: "[síðasta] dddd [kl.] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "eftir %s",
                past: "fyrir %s síðan",
                s: a,
                ss: a,
                m: a,
                mm: a,
                h: "klukkustund",
                hh: a,
                d: a,
                dd: a,
                M: a,
                MM: a,
                y: a,
                yy: a
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("it", {
            months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
            monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
            weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),
            weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
            weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Oggi alle] LT",
                nextDay: "[Domani alle] LT",
                nextWeek: "dddd [alle] LT",
                lastDay: "[Ieri alle] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[la scorsa] dddd [alle] LT";

                      default:
                        return "[lo scorso] dddd [alle] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: function(e) {
                    return (/^[0-9].+$/.test(e) ? "tra" : "in") + " " + e;
                },
                past: "%s fa",
                s: "alcuni secondi",
                ss: "%d secondi",
                m: "un minuto",
                mm: "%d minuti",
                h: "un'ora",
                hh: "%d ore",
                d: "un giorno",
                dd: "%d giorni",
                M: "un mese",
                MM: "%d mesi",
                y: "un anno",
                yy: "%d anni"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ja", {
            months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
            weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
            weekdaysShort: "日_月_火_水_木_金_土".split("_"),
            weekdaysMin: "日_月_火_水_木_金_土".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY/MM/DD",
                LL: "YYYY年M月D日",
                LLL: "YYYY年M月D日 HH:mm",
                LLLL: "YYYY年M月D日 dddd HH:mm",
                l: "YYYY/MM/DD",
                ll: "YYYY年M月D日",
                lll: "YYYY年M月D日 HH:mm",
                llll: "YYYY年M月D日(ddd) HH:mm"
            },
            meridiemParse: /午前|午後/i,
            isPM: function(e) {
                return "午後" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "午前" : "午後";
            },
            calendar: {
                sameDay: "[今日] LT",
                nextDay: "[明日] LT",
                nextWeek: function(e) {
                    return e.week() < this.week() ? "[来週]dddd LT" : "dddd LT";
                },
                lastDay: "[昨日] LT",
                lastWeek: function(e) {
                    return this.week() < e.week() ? "[先週]dddd LT" : "dddd LT";
                },
                sameElse: "L"
            },
            dayOfMonthOrdinalParse: /\d{1,2}日/,
            ordinal: function(e, t) {
                switch (t) {
                  case "d":
                  case "D":
                  case "DDD":
                    return e + "日";

                  default:
                    return e;
                }
            },
            relativeTime: {
                future: "%s後",
                past: "%s前",
                s: "数秒",
                ss: "%d秒",
                m: "1分",
                mm: "%d分",
                h: "1時間",
                hh: "%d時間",
                d: "1日",
                dd: "%d日",
                M: "1ヶ月",
                MM: "%dヶ月",
                y: "1年",
                yy: "%d年"
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("jv", {
            months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),
            monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),
            weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),
            weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),
            weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),
            longDateFormat: {
                LT: "HH.mm",
                LTS: "HH.mm.ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY [pukul] HH.mm",
                LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
            },
            meridiemParse: /enjing|siyang|sonten|ndalu/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "enjing" === t ? e : "siyang" === t ? e >= 11 ? e : e + 12 : "sonten" === t || "ndalu" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 11 ? "enjing" : e < 15 ? "siyang" : e < 19 ? "sonten" : "ndalu";
            },
            calendar: {
                sameDay: "[Dinten puniko pukul] LT",
                nextDay: "[Mbenjang pukul] LT",
                nextWeek: "dddd [pukul] LT",
                lastDay: "[Kala wingi pukul] LT",
                lastWeek: "dddd [kepengker pukul] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "wonten ing %s",
                past: "%s ingkang kepengker",
                s: "sawetawis detik",
                ss: "%d detik",
                m: "setunggal menit",
                mm: "%d menit",
                h: "setunggal jam",
                hh: "%d jam",
                d: "sedinten",
                dd: "%d dinten",
                M: "sewulan",
                MM: "%d wulan",
                y: "setaun",
                yy: "%d taun"
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ka", {
            months: {
                standalone: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),
                format: "იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")
            },
            monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
            weekdays: {
                standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),
                format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),
                isFormat: /(წინა|შემდეგ)/
            },
            weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
            weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY h:mm A",
                LLLL: "dddd, D MMMM YYYY h:mm A"
            },
            calendar: {
                sameDay: "[დღეს] LT[-ზე]",
                nextDay: "[ხვალ] LT[-ზე]",
                lastDay: "[გუშინ] LT[-ზე]",
                nextWeek: "[შემდეგ] dddd LT[-ზე]",
                lastWeek: "[წინა] dddd LT-ზე",
                sameElse: "L"
            },
            relativeTime: {
                future: function(e) {
                    return /(წამი|წუთი|საათი|წელი)/.test(e) ? e.replace(/ი$/, "ში") : e + "ში";
                },
                past: function(e) {
                    return /(წამი|წუთი|საათი|დღე|თვე)/.test(e) ? e.replace(/(ი|ე)$/, "ის წინ") : /წელი/.test(e) ? e.replace(/წელი$/, "წლის წინ") : void 0;
                },
                s: "რამდენიმე წამი",
                ss: "%d წამი",
                m: "წუთი",
                mm: "%d წუთი",
                h: "საათი",
                hh: "%d საათი",
                d: "დღე",
                dd: "%d დღე",
                M: "თვე",
                MM: "%d თვე",
                y: "წელი",
                yy: "%d წელი"
            },
            dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
            ordinal: function(e) {
                return 0 === e ? e : 1 === e ? e + "-ლი" : e < 20 || e <= 100 && e % 20 === 0 || e % 100 === 0 ? "მე-" + e : e + "-ე";
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            0: "-ші",
            1: "-ші",
            2: "-ші",
            3: "-ші",
            4: "-ші",
            5: "-ші",
            6: "-шы",
            7: "-ші",
            8: "-ші",
            9: "-шы",
            10: "-шы",
            20: "-шы",
            30: "-шы",
            40: "-шы",
            50: "-ші",
            60: "-шы",
            70: "-ші",
            80: "-ші",
            90: "-шы",
            100: "-ші"
        }, a = e.defineLocale("kk", {
            months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),
            monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),
            weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),
            weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"),
            weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Бүгін сағат] LT",
                nextDay: "[Ертең сағат] LT",
                nextWeek: "dddd [сағат] LT",
                lastDay: "[Кеше сағат] LT",
                lastWeek: "[Өткен аптаның] dddd [сағат] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s ішінде",
                past: "%s бұрын",
                s: "бірнеше секунд",
                ss: "%d секунд",
                m: "бір минут",
                mm: "%d минут",
                h: "бір сағат",
                hh: "%d сағат",
                d: "бір күн",
                dd: "%d күн",
                M: "бір ай",
                MM: "%d ай",
                y: "бір жыл",
                yy: "%d жыл"
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
            ordinal: function(e) {
                var a = e % 10, n = e >= 100 ? 100 : null;
                return e + (t[e] || t[a] || t[n]);
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "១",
            "2": "២",
            "3": "៣",
            "4": "៤",
            "5": "៥",
            "6": "៦",
            "7": "៧",
            "8": "៨",
            "9": "៩",
            "0": "០"
        }, a = {
            "១": "1",
            "២": "2",
            "៣": "3",
            "៤": "4",
            "៥": "5",
            "៦": "6",
            "៧": "7",
            "៨": "8",
            "៩": "9",
            "០": "0"
        }, n = e.defineLocale("km", {
            months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
            monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
            weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
            weekdaysShort: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
            weekdaysMin: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            meridiemParse: /ព្រឹក|ល្ងាច/,
            isPM: function(e) {
                return "ល្ងាច" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "ព្រឹក" : "ល្ងាច";
            },
            calendar: {
                sameDay: "[ថ្ងៃនេះ ម៉ោង] LT",
                nextDay: "[ស្អែក ម៉ោង] LT",
                nextWeek: "dddd [ម៉ោង] LT",
                lastDay: "[ម្សិលមិញ ម៉ោង] LT",
                lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%sទៀត",
                past: "%sមុន",
                s: "ប៉ុន្មានវិនាទី",
                ss: "%d វិនាទី",
                m: "មួយនាទី",
                mm: "%d នាទី",
                h: "មួយម៉ោង",
                hh: "%d ម៉ោង",
                d: "មួយថ្ងៃ",
                dd: "%d ថ្ងៃ",
                M: "មួយខែ",
                MM: "%d ខែ",
                y: "មួយឆ្នាំ",
                yy: "%d ឆ្នាំ"
            },
            dayOfMonthOrdinalParse: /ទី\d{1,2}/,
            ordinal: "ទី%d",
            preparse: function(e) {
                return e.replace(/[១២៣៤៥៦៧៨៩០]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "೧",
            "2": "೨",
            "3": "೩",
            "4": "೪",
            "5": "೫",
            "6": "೬",
            "7": "೭",
            "8": "೮",
            "9": "೯",
            "0": "೦"
        }, a = {
            "೧": "1",
            "೨": "2",
            "೩": "3",
            "೪": "4",
            "೫": "5",
            "೬": "6",
            "೭": "7",
            "೮": "8",
            "೯": "9",
            "೦": "0"
        }, n = e.defineLocale("kn", {
            months: "ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),
            monthsShort: "ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),
            monthsParseExact: !0,
            weekdays: "ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),
            weekdaysShort: "ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),
            weekdaysMin: "ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),
            longDateFormat: {
                LT: "A h:mm",
                LTS: "A h:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm",
                LLLL: "dddd, D MMMM YYYY, A h:mm"
            },
            calendar: {
                sameDay: "[ಇಂದು] LT",
                nextDay: "[ನಾಳೆ] LT",
                nextWeek: "dddd, LT",
                lastDay: "[ನಿನ್ನೆ] LT",
                lastWeek: "[ಕೊನೆಯ] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s ನಂತರ",
                past: "%s ಹಿಂದೆ",
                s: "ಕೆಲವು ಕ್ಷಣಗಳು",
                ss: "%d ಸೆಕೆಂಡುಗಳು",
                m: "ಒಂದು ನಿಮಿಷ",
                mm: "%d ನಿಮಿಷ",
                h: "ಒಂದು ಗಂಟೆ",
                hh: "%d ಗಂಟೆ",
                d: "ಒಂದು ದಿನ",
                dd: "%d ದಿನ",
                M: "ಒಂದು ತಿಂಗಳು",
                MM: "%d ತಿಂಗಳು",
                y: "ಒಂದು ವರ್ಷ",
                yy: "%d ವರ್ಷ"
            },
            preparse: function(e) {
                return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "ರಾತ್ರಿ" === t ? e < 4 ? e : e + 12 : "ಬೆಳಿಗ್ಗೆ" === t ? e : "ಮಧ್ಯಾಹ್ನ" === t ? e >= 10 ? e : e + 12 : "ಸಂಜೆ" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "ರಾತ್ರಿ" : e < 10 ? "ಬೆಳಿಗ್ಗೆ" : e < 17 ? "ಮಧ್ಯಾಹ್ನ" : e < 20 ? "ಸಂಜೆ" : "ರಾತ್ರಿ";
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
            ordinal: function(e) {
                return e + "ನೇ";
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ko", {
            months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
            monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
            weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
            weekdaysShort: "일_월_화_수_목_금_토".split("_"),
            weekdaysMin: "일_월_화_수_목_금_토".split("_"),
            longDateFormat: {
                LT: "A h:mm",
                LTS: "A h:mm:ss",
                L: "YYYY.MM.DD.",
                LL: "YYYY년 MMMM D일",
                LLL: "YYYY년 MMMM D일 A h:mm",
                LLLL: "YYYY년 MMMM D일 dddd A h:mm",
                l: "YYYY.MM.DD.",
                ll: "YYYY년 MMMM D일",
                lll: "YYYY년 MMMM D일 A h:mm",
                llll: "YYYY년 MMMM D일 dddd A h:mm"
            },
            calendar: {
                sameDay: "오늘 LT",
                nextDay: "내일 LT",
                nextWeek: "dddd LT",
                lastDay: "어제 LT",
                lastWeek: "지난주 dddd LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s 후",
                past: "%s 전",
                s: "몇 초",
                ss: "%d초",
                m: "1분",
                mm: "%d분",
                h: "한 시간",
                hh: "%d시간",
                d: "하루",
                dd: "%d일",
                M: "한 달",
                MM: "%d달",
                y: "일 년",
                yy: "%d년"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "d":
                  case "D":
                  case "DDD":
                    return e + "일";

                  case "M":
                    return e + "월";

                  case "w":
                  case "W":
                    return e + "주";

                  default:
                    return e;
                }
            },
            meridiemParse: /오전|오후/,
            isPM: function(e) {
                return "오후" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "오전" : "오후";
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            0: "-чү",
            1: "-чи",
            2: "-чи",
            3: "-чү",
            4: "-чү",
            5: "-чи",
            6: "-чы",
            7: "-чи",
            8: "-чи",
            9: "-чу",
            10: "-чу",
            20: "-чы",
            30: "-чу",
            40: "-чы",
            50: "-чү",
            60: "-чы",
            70: "-чи",
            80: "-чи",
            90: "-чу",
            100: "-чү"
        }, a = e.defineLocale("ky", {
            months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
            monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),
            weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),
            weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),
            weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Бүгүн саат] LT",
                nextDay: "[Эртең саат] LT",
                nextWeek: "dddd [саат] LT",
                lastDay: "[Кече саат] LT",
                lastWeek: "[Өткен аптанын] dddd [күнү] [саат] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s ичинде",
                past: "%s мурун",
                s: "бирнече секунд",
                ss: "%d секунд",
                m: "бир мүнөт",
                mm: "%d мүнөт",
                h: "бир саат",
                hh: "%d саат",
                d: "бир күн",
                dd: "%d күн",
                M: "бир ай",
                MM: "%d ай",
                y: "бир жыл",
                yy: "%d жыл"
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
            ordinal: function(e) {
                var a = e % 10, n = e >= 100 ? 100 : null;
                return e + (t[e] || t[a] || t[n]);
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = {
                m: [ "eng Minutt", "enger Minutt" ],
                h: [ "eng Stonn", "enger Stonn" ],
                d: [ "een Dag", "engem Dag" ],
                M: [ "ee Mount", "engem Mount" ],
                y: [ "ee Joer", "engem Joer" ]
            };
            return t ? s[a][0] : s[a][1];
        }
        function a(e) {
            var t = e.substr(0, e.indexOf(" "));
            return s(t) ? "a " + e : "an " + e;
        }
        function n(e) {
            var t = e.substr(0, e.indexOf(" "));
            return s(t) ? "viru " + e : "virun " + e;
        }
        function s(e) {
            if (e = parseInt(e, 10), isNaN(e)) return !1;
            if (e < 0) return !0;
            if (e < 10) return 4 <= e && e <= 7;
            if (e < 100) {
                var t = e % 10, a = e / 10;
                return s(0 === t ? a : t);
            }
            if (e < 1e4) {
                for (;e >= 10; ) e /= 10;
                return s(e);
            }
            return e /= 1e3, s(e);
        }
        var i = e.defineLocale("lb", {
            months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
            monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
            monthsParseExact: !0,
            weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
            weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
            weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm [Auer]",
                LTS: "H:mm:ss [Auer]",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm [Auer]",
                LLLL: "dddd, D. MMMM YYYY H:mm [Auer]"
            },
            calendar: {
                sameDay: "[Haut um] LT",
                sameElse: "L",
                nextDay: "[Muer um] LT",
                nextWeek: "dddd [um] LT",
                lastDay: "[Gëschter um] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 2:
                      case 4:
                        return "[Leschten] dddd [um] LT";

                      default:
                        return "[Leschte] dddd [um] LT";
                    }
                }
            },
            relativeTime: {
                future: a,
                past: n,
                s: "e puer Sekonnen",
                ss: "%d Sekonnen",
                m: t,
                mm: "%d Minutten",
                h: t,
                hh: "%d Stonnen",
                d: t,
                dd: "%d Deeg",
                M: t,
                MM: "%d Méint",
                y: t,
                yy: "%d Joer"
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("lo", {
            months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
            monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
            weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
            weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
            weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "ວັນdddd D MMMM YYYY HH:mm"
            },
            meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
            isPM: function(e) {
                return "ຕອນແລງ" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "ຕອນເຊົ້າ" : "ຕອນແລງ";
            },
            calendar: {
                sameDay: "[ມື້ນີ້ເວລາ] LT",
                nextDay: "[ມື້ອື່ນເວລາ] LT",
                nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT",
                lastDay: "[ມື້ວານນີ້ເວລາ] LT",
                lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "ອີກ %s",
                past: "%sຜ່ານມາ",
                s: "ບໍ່ເທົ່າໃດວິນາທີ",
                ss: "%d ວິນາທີ",
                m: "1 ນາທີ",
                mm: "%d ນາທີ",
                h: "1 ຊົ່ວໂມງ",
                hh: "%d ຊົ່ວໂມງ",
                d: "1 ມື້",
                dd: "%d ມື້",
                M: "1 ເດືອນ",
                MM: "%d ເດືອນ",
                y: "1 ປີ",
                yy: "%d ປີ"
            },
            dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
            ordinal: function(e) {
                return "ທີ່" + e;
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            return t ? "kelios sekundės" : n ? "kelių sekundžių" : "kelias sekundes";
        }
        function a(e, t, a, n) {
            return t ? s(a)[0] : n ? s(a)[1] : s(a)[2];
        }
        function n(e) {
            return e % 10 === 0 || e > 10 && e < 20;
        }
        function s(e) {
            return r[e].split("_");
        }
        function i(e, t, i, r) {
            var d = e + " ";
            return 1 === e ? d + a(e, t, i[0], r) : t ? d + (n(e) ? s(i)[1] : s(i)[0]) : r ? d + s(i)[1] : d + (n(e) ? s(i)[1] : s(i)[2]);
        }
        var r = {
            ss: "sekundė_sekundžių_sekundes",
            m: "minutė_minutės_minutę",
            mm: "minutės_minučių_minutes",
            h: "valanda_valandos_valandą",
            hh: "valandos_valandų_valandas",
            d: "diena_dienos_dieną",
            dd: "dienos_dienų_dienas",
            M: "mėnuo_mėnesio_mėnesį",
            MM: "mėnesiai_mėnesių_mėnesius",
            y: "metai_metų_metus",
            yy: "metai_metų_metus"
        }, d = e.defineLocale("lt", {
            months: {
                format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
                standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),
                isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
            },
            monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
            weekdays: {
                format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),
                standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),
                isFormat: /dddd HH:mm/
            },
            weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
            weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY-MM-DD",
                LL: "YYYY [m.] MMMM D [d.]",
                LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
                LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",
                l: "YYYY-MM-DD",
                ll: "YYYY [m.] MMMM D [d.]",
                lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
                llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"
            },
            calendar: {
                sameDay: "[Šiandien] LT",
                nextDay: "[Rytoj] LT",
                nextWeek: "dddd LT",
                lastDay: "[Vakar] LT",
                lastWeek: "[Praėjusį] dddd LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "po %s",
                past: "prieš %s",
                s: t,
                ss: i,
                m: a,
                mm: i,
                h: a,
                hh: i,
                d: a,
                dd: i,
                M: a,
                MM: i,
                y: a,
                yy: i
            },
            dayOfMonthOrdinalParse: /\d{1,2}-oji/,
            ordinal: function(e) {
                return e + "-oji";
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return d;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a) {
            return a ? t % 10 === 1 && t % 100 !== 11 ? e[2] : e[3] : t % 10 === 1 && t % 100 !== 11 ? e[0] : e[1];
        }
        function a(e, a, n) {
            return e + " " + t(i[n], e, a);
        }
        function n(e, a, n) {
            return t(i[n], e, a);
        }
        function s(e, t) {
            return t ? "dažas sekundes" : "dažām sekundēm";
        }
        var i = {
            ss: "sekundes_sekundēm_sekunde_sekundes".split("_"),
            m: "minūtes_minūtēm_minūte_minūtes".split("_"),
            mm: "minūtes_minūtēm_minūte_minūtes".split("_"),
            h: "stundas_stundām_stunda_stundas".split("_"),
            hh: "stundas_stundām_stunda_stundas".split("_"),
            d: "dienas_dienām_diena_dienas".split("_"),
            dd: "dienas_dienām_diena_dienas".split("_"),
            M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
            MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
            y: "gada_gadiem_gads_gadi".split("_"),
            yy: "gada_gadiem_gads_gadi".split("_")
        }, r = e.defineLocale("lv", {
            months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
            monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
            weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
            weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"),
            weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY.",
                LL: "YYYY. [gada] D. MMMM",
                LLL: "YYYY. [gada] D. MMMM, HH:mm",
                LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm"
            },
            calendar: {
                sameDay: "[Šodien pulksten] LT",
                nextDay: "[Rīt pulksten] LT",
                nextWeek: "dddd [pulksten] LT",
                lastDay: "[Vakar pulksten] LT",
                lastWeek: "[Pagājušā] dddd [pulksten] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "pēc %s",
                past: "pirms %s",
                s: s,
                ss: a,
                m: n,
                mm: a,
                h: n,
                hh: a,
                d: n,
                dd: a,
                M: n,
                MM: a,
                y: n,
                yy: a
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return r;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            words: {
                ss: [ "sekund", "sekunda", "sekundi" ],
                m: [ "jedan minut", "jednog minuta" ],
                mm: [ "minut", "minuta", "minuta" ],
                h: [ "jedan sat", "jednog sata" ],
                hh: [ "sat", "sata", "sati" ],
                dd: [ "dan", "dana", "dana" ],
                MM: [ "mjesec", "mjeseca", "mjeseci" ],
                yy: [ "godina", "godine", "godina" ]
            },
            correctGrammaticalCase: function(e, t) {
                return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
            },
            translate: function(e, a, n) {
                var s = t.words[n];
                return 1 === n.length ? a ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s);
            }
        }, a = e.defineLocale("me", {
            months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
            monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
            monthsParseExact: !0,
            weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
            weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
            weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd, D. MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[danas u] LT",
                nextDay: "[sjutra u] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[u] [nedjelju] [u] LT";

                      case 3:
                        return "[u] [srijedu] [u] LT";

                      case 6:
                        return "[u] [subotu] [u] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[u] dddd [u] LT";
                    }
                },
                lastDay: "[juče u] LT",
                lastWeek: function() {
                    var e = [ "[prošle] [nedjelje] [u] LT", "[prošlog] [ponedjeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srijede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT" ];
                    return e[this.day()];
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "za %s",
                past: "prije %s",
                s: "nekoliko sekundi",
                ss: t.translate,
                m: t.translate,
                mm: t.translate,
                h: t.translate,
                hh: t.translate,
                d: "dan",
                dd: t.translate,
                M: "mjesec",
                MM: t.translate,
                y: "godinu",
                yy: t.translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("mi", {
            months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),
            monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),
            monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
            monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
            weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),
            weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
            weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY [i] HH:mm",
                LLLL: "dddd, D MMMM YYYY [i] HH:mm"
            },
            calendar: {
                sameDay: "[i teie mahana, i] LT",
                nextDay: "[apopo i] LT",
                nextWeek: "dddd [i] LT",
                lastDay: "[inanahi i] LT",
                lastWeek: "dddd [whakamutunga i] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "i roto i %s",
                past: "%s i mua",
                s: "te hēkona ruarua",
                ss: "%d hēkona",
                m: "he meneti",
                mm: "%d meneti",
                h: "te haora",
                hh: "%d haora",
                d: "he ra",
                dd: "%d ra",
                M: "he marama",
                MM: "%d marama",
                y: "he tau",
                yy: "%d tau"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("mk", {
            months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
            monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
            weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
            weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"),
            weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"),
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "D.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY H:mm",
                LLLL: "dddd, D MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[Денес во] LT",
                nextDay: "[Утре во] LT",
                nextWeek: "[Во] dddd [во] LT",
                lastDay: "[Вчера во] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                      case 3:
                      case 6:
                        return "[Изминатата] dddd [во] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[Изминатиот] dddd [во] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "после %s",
                past: "пред %s",
                s: "неколку секунди",
                ss: "%d секунди",
                m: "минута",
                mm: "%d минути",
                h: "час",
                hh: "%d часа",
                d: "ден",
                dd: "%d дена",
                M: "месец",
                MM: "%d месеци",
                y: "година",
                yy: "%d години"
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
            ordinal: function(e) {
                var t = e % 10, a = e % 100;
                return 0 === e ? e + "-ев" : 0 === a ? e + "-ен" : a > 10 && a < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти";
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ml", {
            months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),
            monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),
            monthsParseExact: !0,
            weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),
            weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),
            weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),
            longDateFormat: {
                LT: "A h:mm -നു",
                LTS: "A h:mm:ss -നു",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm -നു",
                LLLL: "dddd, D MMMM YYYY, A h:mm -നു"
            },
            calendar: {
                sameDay: "[ഇന്ന്] LT",
                nextDay: "[നാളെ] LT",
                nextWeek: "dddd, LT",
                lastDay: "[ഇന്നലെ] LT",
                lastWeek: "[കഴിഞ്ഞ] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s കഴിഞ്ഞ്",
                past: "%s മുൻപ്",
                s: "അൽപ നിമിഷങ്ങൾ",
                ss: "%d സെക്കൻഡ്",
                m: "ഒരു മിനിറ്റ്",
                mm: "%d മിനിറ്റ്",
                h: "ഒരു മണിക്കൂർ",
                hh: "%d മണിക്കൂർ",
                d: "ഒരു ദിവസം",
                dd: "%d ദിവസം",
                M: "ഒരു മാസം",
                MM: "%d മാസം",
                y: "ഒരു വർഷം",
                yy: "%d വർഷം"
            },
            meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "രാത്രി" === t && e >= 4 || "ഉച്ച കഴിഞ്ഞ്" === t || "വൈകുന്നേരം" === t ? e + 12 : e;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "രാത്രി" : e < 12 ? "രാവിലെ" : e < 17 ? "ഉച്ച കഴിഞ്ഞ്" : e < 20 ? "വൈകുന്നേരം" : "രാത്രി";
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            switch (a) {
              case "s":
                return t ? "хэдхэн секунд" : "хэдхэн секундын";

              case "ss":
                return e + (t ? " секунд" : " секундын");

              case "m":
              case "mm":
                return e + (t ? " минут" : " минутын");

              case "h":
              case "hh":
                return e + (t ? " цаг" : " цагийн");

              case "d":
              case "dd":
                return e + (t ? " өдөр" : " өдрийн");

              case "M":
              case "MM":
                return e + (t ? " сар" : " сарын");

              case "y":
              case "yy":
                return e + (t ? " жил" : " жилийн");

              default:
                return e;
            }
        }
        var a = e.defineLocale("mn", {
            months: "Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),
            monthsShort: "1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),
            monthsParseExact: !0,
            weekdays: "Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),
            weekdaysShort: "Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),
            weekdaysMin: "Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY-MM-DD",
                LL: "YYYY оны MMMMын D",
                LLL: "YYYY оны MMMMын D HH:mm",
                LLLL: "dddd, YYYY оны MMMMын D HH:mm"
            },
            meridiemParse: /ҮӨ|ҮХ/i,
            isPM: function(e) {
                return "ҮХ" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "ҮӨ" : "ҮХ";
            },
            calendar: {
                sameDay: "[Өнөөдөр] LT",
                nextDay: "[Маргааш] LT",
                nextWeek: "[Ирэх] dddd LT",
                lastDay: "[Өчигдөр] LT",
                lastWeek: "[Өнгөрсөн] dddd LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s дараа",
                past: "%s өмнө",
                s: t,
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
            ordinal: function(e, t) {
                switch (t) {
                  case "d":
                  case "D":
                  case "DDD":
                    return e + " өдөр";

                  default:
                    return e;
                }
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = "";
            if (t) switch (a) {
              case "s":
                s = "काही सेकंद";
                break;

              case "ss":
                s = "%d सेकंद";
                break;

              case "m":
                s = "एक मिनिट";
                break;

              case "mm":
                s = "%d मिनिटे";
                break;

              case "h":
                s = "एक तास";
                break;

              case "hh":
                s = "%d तास";
                break;

              case "d":
                s = "एक दिवस";
                break;

              case "dd":
                s = "%d दिवस";
                break;

              case "M":
                s = "एक महिना";
                break;

              case "MM":
                s = "%d महिने";
                break;

              case "y":
                s = "एक वर्ष";
                break;

              case "yy":
                s = "%d वर्षे";
            } else switch (a) {
              case "s":
                s = "काही सेकंदां";
                break;

              case "ss":
                s = "%d सेकंदां";
                break;

              case "m":
                s = "एका मिनिटा";
                break;

              case "mm":
                s = "%d मिनिटां";
                break;

              case "h":
                s = "एका तासा";
                break;

              case "hh":
                s = "%d तासां";
                break;

              case "d":
                s = "एका दिवसा";
                break;

              case "dd":
                s = "%d दिवसां";
                break;

              case "M":
                s = "एका महिन्या";
                break;

              case "MM":
                s = "%d महिन्यां";
                break;

              case "y":
                s = "एका वर्षा";
                break;

              case "yy":
                s = "%d वर्षां";
            }
            return s.replace(/%d/i, e);
        }
        var a = {
            "1": "१",
            "2": "२",
            "3": "३",
            "4": "४",
            "5": "५",
            "6": "६",
            "7": "७",
            "8": "८",
            "9": "९",
            "0": "०"
        }, n = {
            "१": "1",
            "२": "2",
            "३": "3",
            "४": "4",
            "५": "5",
            "६": "6",
            "७": "7",
            "८": "8",
            "९": "9",
            "०": "0"
        }, s = e.defineLocale("mr", {
            months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),
            monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),
            monthsParseExact: !0,
            weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
            weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),
            weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
            longDateFormat: {
                LT: "A h:mm वाजता",
                LTS: "A h:mm:ss वाजता",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm वाजता",
                LLLL: "dddd, D MMMM YYYY, A h:mm वाजता"
            },
            calendar: {
                sameDay: "[आज] LT",
                nextDay: "[उद्या] LT",
                nextWeek: "dddd, LT",
                lastDay: "[काल] LT",
                lastWeek: "[मागील] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%sमध्ये",
                past: "%sपूर्वी",
                s: t,
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            preparse: function(e) {
                return e.replace(/[१२३४५६७८९०]/g, function(e) {
                    return n[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return a[e];
                });
            },
            meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "रात्री" === t ? e < 4 ? e : e + 12 : "सकाळी" === t ? e : "दुपारी" === t ? e >= 10 ? e : e + 12 : "सायंकाळी" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "रात्री" : e < 10 ? "सकाळी" : e < 17 ? "दुपारी" : e < 20 ? "सायंकाळी" : "रात्री";
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return s;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ms", {
            months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
            monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
            weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
            weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
            weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
            longDateFormat: {
                LT: "HH.mm",
                LTS: "HH.mm.ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY [pukul] HH.mm",
                LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
            },
            meridiemParse: /pagi|tengahari|petang|malam/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
            },
            calendar: {
                sameDay: "[Hari ini pukul] LT",
                nextDay: "[Esok pukul] LT",
                nextWeek: "dddd [pukul] LT",
                lastDay: "[Kelmarin pukul] LT",
                lastWeek: "dddd [lepas pukul] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "dalam %s",
                past: "%s yang lepas",
                s: "beberapa saat",
                ss: "%d saat",
                m: "seminit",
                mm: "%d minit",
                h: "sejam",
                hh: "%d jam",
                d: "sehari",
                dd: "%d hari",
                M: "sebulan",
                MM: "%d bulan",
                y: "setahun",
                yy: "%d tahun"
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ms-my", {
            months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
            monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
            weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
            weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
            weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
            longDateFormat: {
                LT: "HH.mm",
                LTS: "HH.mm.ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY [pukul] HH.mm",
                LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
            },
            meridiemParse: /pagi|tengahari|petang|malam/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
            },
            calendar: {
                sameDay: "[Hari ini pukul] LT",
                nextDay: "[Esok pukul] LT",
                nextWeek: "dddd [pukul] LT",
                lastDay: "[Kelmarin pukul] LT",
                lastWeek: "dddd [lepas pukul] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "dalam %s",
                past: "%s yang lepas",
                s: "beberapa saat",
                ss: "%d saat",
                m: "seminit",
                mm: "%d minit",
                h: "sejam",
                hh: "%d jam",
                d: "sehari",
                dd: "%d hari",
                M: "sebulan",
                MM: "%d bulan",
                y: "setahun",
                yy: "%d tahun"
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("mt", {
            months: "Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),
            monthsShort: "Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),
            weekdays: "Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),
            weekdaysShort: "Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),
            weekdaysMin: "Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Illum fil-]LT",
                nextDay: "[Għada fil-]LT",
                nextWeek: "dddd [fil-]LT",
                lastDay: "[Il-bieraħ fil-]LT",
                lastWeek: "dddd [li għadda] [fil-]LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "f’ %s",
                past: "%s ilu",
                s: "ftit sekondi",
                ss: "%d sekondi",
                m: "minuta",
                mm: "%d minuti",
                h: "siegħa",
                hh: "%d siegħat",
                d: "ġurnata",
                dd: "%d ġranet",
                M: "xahar",
                MM: "%d xhur",
                y: "sena",
                yy: "%d sni"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "၁",
            "2": "၂",
            "3": "၃",
            "4": "၄",
            "5": "၅",
            "6": "၆",
            "7": "၇",
            "8": "၈",
            "9": "၉",
            "0": "၀"
        }, a = {
            "၁": "1",
            "၂": "2",
            "၃": "3",
            "၄": "4",
            "၅": "5",
            "၆": "6",
            "၇": "7",
            "၈": "8",
            "၉": "9",
            "၀": "0"
        }, n = e.defineLocale("my", {
            months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),
            monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),
            weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),
            weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
            weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[ယနေ.] LT [မှာ]",
                nextDay: "[မနက်ဖြန်] LT [မှာ]",
                nextWeek: "dddd LT [မှာ]",
                lastDay: "[မနေ.က] LT [မှာ]",
                lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]",
                sameElse: "L"
            },
            relativeTime: {
                future: "လာမည့် %s မှာ",
                past: "လွန်ခဲ့သော %s က",
                s: "စက္ကန်.အနည်းငယ်",
                ss: "%d စက္ကန့်",
                m: "တစ်မိနစ်",
                mm: "%d မိနစ်",
                h: "တစ်နာရီ",
                hh: "%d နာရီ",
                d: "တစ်ရက်",
                dd: "%d ရက်",
                M: "တစ်လ",
                MM: "%d လ",
                y: "တစ်နှစ်",
                yy: "%d နှစ်"
            },
            preparse: function(e) {
                return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("nb", {
            months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
            monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
            monthsParseExact: !0,
            weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
            weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"),
            weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY [kl.] HH:mm",
                LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
            },
            calendar: {
                sameDay: "[i dag kl.] LT",
                nextDay: "[i morgen kl.] LT",
                nextWeek: "dddd [kl.] LT",
                lastDay: "[i går kl.] LT",
                lastWeek: "[forrige] dddd [kl.] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "om %s",
                past: "%s siden",
                s: "noen sekunder",
                ss: "%d sekunder",
                m: "ett minutt",
                mm: "%d minutter",
                h: "en time",
                hh: "%d timer",
                d: "en dag",
                dd: "%d dager",
                M: "en måned",
                MM: "%d måneder",
                y: "ett år",
                yy: "%d år"
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "१",
            "2": "२",
            "3": "३",
            "4": "४",
            "5": "५",
            "6": "६",
            "7": "७",
            "8": "८",
            "9": "९",
            "0": "०"
        }, a = {
            "१": "1",
            "२": "2",
            "३": "3",
            "४": "4",
            "५": "5",
            "६": "6",
            "७": "7",
            "८": "8",
            "९": "9",
            "०": "0"
        }, n = e.defineLocale("ne", {
            months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),
            monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),
            monthsParseExact: !0,
            weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),
            weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),
            weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "Aको h:mm बजे",
                LTS: "Aको h:mm:ss बजे",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, Aको h:mm बजे",
                LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे"
            },
            preparse: function(e) {
                return e.replace(/[१२३४५६७८९०]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "राति" === t ? e < 4 ? e : e + 12 : "बिहान" === t ? e : "दिउँसो" === t ? e >= 10 ? e : e + 12 : "साँझ" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 3 ? "राति" : e < 12 ? "बिहान" : e < 16 ? "दिउँसो" : e < 20 ? "साँझ" : "राति";
            },
            calendar: {
                sameDay: "[आज] LT",
                nextDay: "[भोलि] LT",
                nextWeek: "[आउँदो] dddd[,] LT",
                lastDay: "[हिजो] LT",
                lastWeek: "[गएको] dddd[,] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%sमा",
                past: "%s अगाडि",
                s: "केही क्षण",
                ss: "%d सेकेण्ड",
                m: "एक मिनेट",
                mm: "%d मिनेट",
                h: "एक घण्टा",
                hh: "%d घण्टा",
                d: "एक दिन",
                dd: "%d दिन",
                M: "एक महिना",
                MM: "%d महिना",
                y: "एक बर्ष",
                yy: "%d बर्ष"
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), a = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), n = [ /^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i ], s = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, i = e.defineLocale("nl", {
            months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
            monthsShort: function(e, n) {
                return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t;
            },
            monthsRegex: s,
            monthsShortRegex: s,
            monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
            monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
            monthsParse: n,
            longMonthsParse: n,
            shortMonthsParse: n,
            weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
            weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
            weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD-MM-YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[vandaag om] LT",
                nextDay: "[morgen om] LT",
                nextWeek: "dddd [om] LT",
                lastDay: "[gisteren om] LT",
                lastWeek: "[afgelopen] dddd [om] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "over %s",
                past: "%s geleden",
                s: "een paar seconden",
                ss: "%d seconden",
                m: "één minuut",
                mm: "%d minuten",
                h: "één uur",
                hh: "%d uur",
                d: "één dag",
                dd: "%d dagen",
                M: "één maand",
                MM: "%d maanden",
                y: "één jaar",
                yy: "%d jaar"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function(e) {
                return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"), a = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"), n = [ /^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i ], s = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, i = e.defineLocale("nl-be", {
            months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
            monthsShort: function(e, n) {
                return e ? /-MMM-/.test(n) ? a[e.month()] : t[e.month()] : t;
            },
            monthsRegex: s,
            monthsShortRegex: s,
            monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
            monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
            monthsParse: n,
            longMonthsParse: n,
            shortMonthsParse: n,
            weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
            weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
            weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[vandaag om] LT",
                nextDay: "[morgen om] LT",
                nextWeek: "dddd [om] LT",
                lastDay: "[gisteren om] LT",
                lastWeek: "[afgelopen] dddd [om] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "over %s",
                past: "%s geleden",
                s: "een paar seconden",
                ss: "%d seconden",
                m: "één minuut",
                mm: "%d minuten",
                h: "één uur",
                hh: "%d uur",
                d: "één dag",
                dd: "%d dagen",
                M: "één maand",
                MM: "%d maanden",
                y: "één jaar",
                yy: "%d jaar"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
            ordinal: function(e) {
                return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("nn", {
            months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
            monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
            weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
            weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"),
            weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY [kl.] H:mm",
                LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
            },
            calendar: {
                sameDay: "[I dag klokka] LT",
                nextDay: "[I morgon klokka] LT",
                nextWeek: "dddd [klokka] LT",
                lastDay: "[I går klokka] LT",
                lastWeek: "[Føregåande] dddd [klokka] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "om %s",
                past: "%s sidan",
                s: "nokre sekund",
                ss: "%d sekund",
                m: "eit minutt",
                mm: "%d minutt",
                h: "ein time",
                hh: "%d timar",
                d: "ein dag",
                dd: "%d dagar",
                M: "ein månad",
                MM: "%d månader",
                y: "eit år",
                yy: "%d år"
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "੧",
            "2": "੨",
            "3": "੩",
            "4": "੪",
            "5": "੫",
            "6": "੬",
            "7": "੭",
            "8": "੮",
            "9": "੯",
            "0": "੦"
        }, a = {
            "੧": "1",
            "੨": "2",
            "੩": "3",
            "੪": "4",
            "੫": "5",
            "੬": "6",
            "੭": "7",
            "੮": "8",
            "੯": "9",
            "੦": "0"
        }, n = e.defineLocale("pa-in", {
            months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
            monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
            weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),
            weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
            weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
            longDateFormat: {
                LT: "A h:mm ਵਜੇ",
                LTS: "A h:mm:ss ਵਜੇ",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm ਵਜੇ",
                LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ"
            },
            calendar: {
                sameDay: "[ਅਜ] LT",
                nextDay: "[ਕਲ] LT",
                nextWeek: "[ਅਗਲਾ] dddd, LT",
                lastDay: "[ਕਲ] LT",
                lastWeek: "[ਪਿਛਲੇ] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s ਵਿੱਚ",
                past: "%s ਪਿਛਲੇ",
                s: "ਕੁਝ ਸਕਿੰਟ",
                ss: "%d ਸਕਿੰਟ",
                m: "ਇਕ ਮਿੰਟ",
                mm: "%d ਮਿੰਟ",
                h: "ਇੱਕ ਘੰਟਾ",
                hh: "%d ਘੰਟੇ",
                d: "ਇੱਕ ਦਿਨ",
                dd: "%d ਦਿਨ",
                M: "ਇੱਕ ਮਹੀਨਾ",
                MM: "%d ਮਹੀਨੇ",
                y: "ਇੱਕ ਸਾਲ",
                yy: "%d ਸਾਲ"
            },
            preparse: function(e) {
                return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "ਰਾਤ" === t ? e < 4 ? e : e + 12 : "ਸਵੇਰ" === t ? e : "ਦੁਪਹਿਰ" === t ? e >= 10 ? e : e + 12 : "ਸ਼ਾਮ" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "ਰਾਤ" : e < 10 ? "ਸਵੇਰ" : e < 17 ? "ਦੁਪਹਿਰ" : e < 20 ? "ਸ਼ਾਮ" : "ਰਾਤ";
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e) {
            return e % 10 < 5 && e % 10 > 1 && ~~(e / 10) % 10 !== 1;
        }
        function a(e, a, n) {
            var s = e + " ";
            switch (n) {
              case "ss":
                return s + (t(e) ? "sekundy" : "sekund");

              case "m":
                return a ? "minuta" : "minutę";

              case "mm":
                return s + (t(e) ? "minuty" : "minut");

              case "h":
                return a ? "godzina" : "godzinę";

              case "hh":
                return s + (t(e) ? "godziny" : "godzin");

              case "MM":
                return s + (t(e) ? "miesiące" : "miesięcy");

              case "yy":
                return s + (t(e) ? "lata" : "lat");
            }
        }
        var n = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"), s = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"), i = e.defineLocale("pl", {
            months: function(e, t) {
                return e ? "" === t ? "(" + s[e.month()] + "|" + n[e.month()] + ")" : /D MMMM/.test(t) ? s[e.month()] : n[e.month()] : n;
            },
            monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
            weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
            weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"),
            weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Dziś o] LT",
                nextDay: "[Jutro o] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[W niedzielę o] LT";

                      case 2:
                        return "[We wtorek o] LT";

                      case 3:
                        return "[W środę o] LT";

                      case 6:
                        return "[W sobotę o] LT";

                      default:
                        return "[W] dddd [o] LT";
                    }
                },
                lastDay: "[Wczoraj o] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[W zeszłą niedzielę o] LT";

                      case 3:
                        return "[W zeszłą środę o] LT";

                      case 6:
                        return "[W zeszłą sobotę o] LT";

                      default:
                        return "[W zeszły] dddd [o] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "za %s",
                past: "%s temu",
                s: "kilka sekund",
                ss: a,
                m: a,
                mm: a,
                h: a,
                hh: a,
                d: "1 dzień",
                dd: "%d dni",
                M: "miesiąc",
                MM: a,
                y: "rok",
                yy: a
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("pt", {
            months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
            monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
            weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
            weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
            weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D [de] MMMM [de] YYYY",
                LLL: "D [de] MMMM [de] YYYY HH:mm",
                LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Hoje às] LT",
                nextDay: "[Amanhã às] LT",
                nextWeek: "dddd [às] LT",
                lastDay: "[Ontem às] LT",
                lastWeek: function() {
                    return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "em %s",
                past: "há %s",
                s: "segundos",
                ss: "%d segundos",
                m: "um minuto",
                mm: "%d minutos",
                h: "uma hora",
                hh: "%d horas",
                d: "um dia",
                dd: "%d dias",
                M: "um mês",
                MM: "%d meses",
                y: "um ano",
                yy: "%d anos"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("pt-br", {
            months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
            monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
            weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
            weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
            weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D [de] MMMM [de] YYYY",
                LLL: "D [de] MMMM [de] YYYY [às] HH:mm",
                LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm"
            },
            calendar: {
                sameDay: "[Hoje às] LT",
                nextDay: "[Amanhã às] LT",
                nextWeek: "dddd [às] LT",
                lastDay: "[Ontem às] LT",
                lastWeek: function() {
                    return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "em %s",
                past: "há %s",
                s: "poucos segundos",
                ss: "%d segundos",
                m: "um minuto",
                mm: "%d minutos",
                h: "uma hora",
                hh: "%d horas",
                d: "um dia",
                dd: "%d dias",
                M: "um mês",
                MM: "%d meses",
                y: "um ano",
                yy: "%d anos"
            },
            dayOfMonthOrdinalParse: /\d{1,2}º/,
            ordinal: "%dº"
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a) {
            var n = {
                ss: "secunde",
                mm: "minute",
                hh: "ore",
                dd: "zile",
                MM: "luni",
                yy: "ani"
            }, s = " ";
            return (e % 100 >= 20 || e >= 100 && e % 100 === 0) && (s = " de "), e + s + n[a];
        }
        var a = e.defineLocale("ro", {
            months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
            monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
            monthsParseExact: !0,
            weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
            weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
            weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY H:mm",
                LLLL: "dddd, D MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[azi la] LT",
                nextDay: "[mâine la] LT",
                nextWeek: "dddd [la] LT",
                lastDay: "[ieri la] LT",
                lastWeek: "[fosta] dddd [la] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "peste %s",
                past: "%s în urmă",
                s: "câteva secunde",
                ss: t,
                m: "un minut",
                mm: t,
                h: "o oră",
                hh: t,
                d: "o zi",
                dd: t,
                M: "o lună",
                MM: t,
                y: "un an",
                yy: t
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t) {
            var a = e.split("_");
            return t % 10 === 1 && t % 100 !== 11 ? a[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? a[1] : a[2];
        }
        function a(e, a, n) {
            var s = {
                ss: a ? "секунда_секунды_секунд" : "секунду_секунды_секунд",
                mm: a ? "минута_минуты_минут" : "минуту_минуты_минут",
                hh: "час_часа_часов",
                dd: "день_дня_дней",
                MM: "месяц_месяца_месяцев",
                yy: "год_года_лет"
            };
            return "m" === n ? a ? "минута" : "минуту" : e + " " + t(s[n], +e);
        }
        var n = [ /^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i ], s = e.defineLocale("ru", {
            months: {
                format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),
                standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")
            },
            monthsShort: {
                format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),
                standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")
            },
            weekdays: {
                standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),
                format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),
                isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
            },
            weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"),
            weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"),
            monthsParse: n,
            longMonthsParse: n,
            shortMonthsParse: n,
            monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
            monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
            monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
            monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY г.",
                LLL: "D MMMM YYYY г., H:mm",
                LLLL: "dddd, D MMMM YYYY г., H:mm"
            },
            calendar: {
                sameDay: "[Сегодня, в] LT",
                nextDay: "[Завтра, в] LT",
                lastDay: "[Вчера, в] LT",
                nextWeek: function(e) {
                    if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
                    switch (this.day()) {
                      case 0:
                        return "[В следующее] dddd, [в] LT";

                      case 1:
                      case 2:
                      case 4:
                        return "[В следующий] dddd, [в] LT";

                      case 3:
                      case 5:
                      case 6:
                        return "[В следующую] dddd, [в] LT";
                    }
                },
                lastWeek: function(e) {
                    if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
                    switch (this.day()) {
                      case 0:
                        return "[В прошлое] dddd, [в] LT";

                      case 1:
                      case 2:
                      case 4:
                        return "[В прошлый] dddd, [в] LT";

                      case 3:
                      case 5:
                      case 6:
                        return "[В прошлую] dddd, [в] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "через %s",
                past: "%s назад",
                s: "несколько секунд",
                ss: a,
                m: a,
                mm: a,
                h: "час",
                hh: a,
                d: "день",
                dd: a,
                M: "месяц",
                MM: a,
                y: "год",
                yy: a
            },
            meridiemParse: /ночи|утра|дня|вечера/i,
            isPM: function(e) {
                return /^(дня|вечера)$/.test(e);
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "ночи" : e < 12 ? "утра" : e < 17 ? "дня" : "вечера";
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "M":
                  case "d":
                  case "DDD":
                    return e + "-й";

                  case "D":
                    return e + "-го";

                  case "w":
                  case "W":
                    return e + "-я";

                  default:
                    return e;
                }
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return s;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = [ "جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر" ], a = [ "آچر", "سومر", "اڱارو", "اربع", "خميس", "جمع", "ڇنڇر" ], n = e.defineLocale("sd", {
            months: t,
            monthsShort: t,
            weekdays: a,
            weekdaysShort: a,
            weekdaysMin: a,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd، D MMMM YYYY HH:mm"
            },
            meridiemParse: /صبح|شام/,
            isPM: function(e) {
                return "شام" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "صبح" : "شام";
            },
            calendar: {
                sameDay: "[اڄ] LT",
                nextDay: "[سڀاڻي] LT",
                nextWeek: "dddd [اڳين هفتي تي] LT",
                lastDay: "[ڪالهه] LT",
                lastWeek: "[گزريل هفتي] dddd [تي] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s پوء",
                past: "%s اڳ",
                s: "چند سيڪنڊ",
                ss: "%d سيڪنڊ",
                m: "هڪ منٽ",
                mm: "%d منٽ",
                h: "هڪ ڪلاڪ",
                hh: "%d ڪلاڪ",
                d: "هڪ ڏينهن",
                dd: "%d ڏينهن",
                M: "هڪ مهينو",
                MM: "%d مهينا",
                y: "هڪ سال",
                yy: "%d سال"
            },
            preparse: function(e) {
                return e.replace(/،/g, ",");
            },
            postformat: function(e) {
                return e.replace(/,/g, "،");
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("se", {
            months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),
            monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),
            weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),
            weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),
            weekdaysMin: "s_v_m_g_d_b_L".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "MMMM D. [b.] YYYY",
                LLL: "MMMM D. [b.] YYYY [ti.] HH:mm",
                LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm"
            },
            calendar: {
                sameDay: "[otne ti] LT",
                nextDay: "[ihttin ti] LT",
                nextWeek: "dddd [ti] LT",
                lastDay: "[ikte ti] LT",
                lastWeek: "[ovddit] dddd [ti] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s geažes",
                past: "maŋit %s",
                s: "moadde sekunddat",
                ss: "%d sekunddat",
                m: "okta minuhta",
                mm: "%d minuhtat",
                h: "okta diimmu",
                hh: "%d diimmut",
                d: "okta beaivi",
                dd: "%d beaivvit",
                M: "okta mánnu",
                MM: "%d mánut",
                y: "okta jahki",
                yy: "%d jagit"
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("si", {
            months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),
            monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),
            weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),
            weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),
            weekdaysMin: "ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "a h:mm",
                LTS: "a h:mm:ss",
                L: "YYYY/MM/DD",
                LL: "YYYY MMMM D",
                LLL: "YYYY MMMM D, a h:mm",
                LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss"
            },
            calendar: {
                sameDay: "[අද] LT[ට]",
                nextDay: "[හෙට] LT[ට]",
                nextWeek: "dddd LT[ට]",
                lastDay: "[ඊයේ] LT[ට]",
                lastWeek: "[පසුගිය] dddd LT[ට]",
                sameElse: "L"
            },
            relativeTime: {
                future: "%sකින්",
                past: "%sකට පෙර",
                s: "තත්පර කිහිපය",
                ss: "තත්පර %d",
                m: "මිනිත්තුව",
                mm: "මිනිත්තු %d",
                h: "පැය",
                hh: "පැය %d",
                d: "දිනය",
                dd: "දින %d",
                M: "මාසය",
                MM: "මාස %d",
                y: "වසර",
                yy: "වසර %d"
            },
            dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
            ordinal: function(e) {
                return e + " වැනි";
            },
            meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
            isPM: function(e) {
                return "ප.ව." === e || "පස් වරු" === e;
            },
            meridiem: function(e, t, a) {
                return e > 11 ? a ? "ප.ව." : "පස් වරු" : a ? "පෙ.ව." : "පෙර වරු";
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e) {
            return e > 1 && e < 5;
        }
        function a(e, a, n, s) {
            var i = e + " ";
            switch (n) {
              case "s":
                return a || s ? "pár sekúnd" : "pár sekundami";

              case "ss":
                return a || s ? i + (t(e) ? "sekundy" : "sekúnd") : i + "sekundami";

              case "m":
                return a ? "minúta" : s ? "minútu" : "minútou";

              case "mm":
                return a || s ? i + (t(e) ? "minúty" : "minút") : i + "minútami";

              case "h":
                return a ? "hodina" : s ? "hodinu" : "hodinou";

              case "hh":
                return a || s ? i + (t(e) ? "hodiny" : "hodín") : i + "hodinami";

              case "d":
                return a || s ? "deň" : "dňom";

              case "dd":
                return a || s ? i + (t(e) ? "dni" : "dní") : i + "dňami";

              case "M":
                return a || s ? "mesiac" : "mesiacom";

              case "MM":
                return a || s ? i + (t(e) ? "mesiace" : "mesiacov") : i + "mesiacmi";

              case "y":
                return a || s ? "rok" : "rokom";

              case "yy":
                return a || s ? i + (t(e) ? "roky" : "rokov") : i + "rokmi";
            }
        }
        var n = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"), s = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"), i = e.defineLocale("sk", {
            months: n,
            monthsShort: s,
            weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
            weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"),
            weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"),
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd D. MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[dnes o] LT",
                nextDay: "[zajtra o] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[v nedeľu o] LT";

                      case 1:
                      case 2:
                        return "[v] dddd [o] LT";

                      case 3:
                        return "[v stredu o] LT";

                      case 4:
                        return "[vo štvrtok o] LT";

                      case 5:
                        return "[v piatok o] LT";

                      case 6:
                        return "[v sobotu o] LT";
                    }
                },
                lastDay: "[včera o] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[minulú nedeľu o] LT";

                      case 1:
                      case 2:
                        return "[minulý] dddd [o] LT";

                      case 3:
                        return "[minulú stredu o] LT";

                      case 4:
                      case 5:
                        return "[minulý] dddd [o] LT";

                      case 6:
                        return "[minulú sobotu o] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "za %s",
                past: "pred %s",
                s: a,
                ss: a,
                m: a,
                mm: a,
                h: a,
                hh: a,
                d: a,
                dd: a,
                M: a,
                MM: a,
                y: a,
                yy: a
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = e + " ";
            switch (a) {
              case "s":
                return t || n ? "nekaj sekund" : "nekaj sekundami";

              case "ss":
                return s += 1 === e ? t ? "sekundo" : "sekundi" : 2 === e ? t || n ? "sekundi" : "sekundah" : e < 5 ? t || n ? "sekunde" : "sekundah" : "sekund";

              case "m":
                return t ? "ena minuta" : "eno minuto";

              case "mm":
                return s += 1 === e ? t ? "minuta" : "minuto" : 2 === e ? t || n ? "minuti" : "minutama" : e < 5 ? t || n ? "minute" : "minutami" : t || n ? "minut" : "minutami";

              case "h":
                return t ? "ena ura" : "eno uro";

              case "hh":
                return s += 1 === e ? t ? "ura" : "uro" : 2 === e ? t || n ? "uri" : "urama" : e < 5 ? t || n ? "ure" : "urami" : t || n ? "ur" : "urami";

              case "d":
                return t || n ? "en dan" : "enim dnem";

              case "dd":
                return s += 1 === e ? t || n ? "dan" : "dnem" : 2 === e ? t || n ? "dni" : "dnevoma" : t || n ? "dni" : "dnevi";

              case "M":
                return t || n ? "en mesec" : "enim mesecem";

              case "MM":
                return s += 1 === e ? t || n ? "mesec" : "mesecem" : 2 === e ? t || n ? "meseca" : "mesecema" : e < 5 ? t || n ? "mesece" : "meseci" : t || n ? "mesecev" : "meseci";

              case "y":
                return t || n ? "eno leto" : "enim letom";

              case "yy":
                return s += 1 === e ? t || n ? "leto" : "letom" : 2 === e ? t || n ? "leti" : "letoma" : e < 5 ? t || n ? "leta" : "leti" : t || n ? "let" : "leti";
            }
        }
        var a = e.defineLocale("sl", {
            months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
            monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
            monthsParseExact: !0,
            weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
            weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"),
            weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd, D. MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[danes ob] LT",
                nextDay: "[jutri ob] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[v] [nedeljo] [ob] LT";

                      case 3:
                        return "[v] [sredo] [ob] LT";

                      case 6:
                        return "[v] [soboto] [ob] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[v] dddd [ob] LT";
                    }
                },
                lastDay: "[včeraj ob] LT",
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[prejšnjo] [nedeljo] [ob] LT";

                      case 3:
                        return "[prejšnjo] [sredo] [ob] LT";

                      case 6:
                        return "[prejšnjo] [soboto] [ob] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[prejšnji] dddd [ob] LT";
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "čez %s",
                past: "pred %s",
                s: t,
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("sq", {
            months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
            monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
            weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
            weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
            weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"),
            weekdaysParseExact: !0,
            meridiemParse: /PD|MD/,
            isPM: function(e) {
                return "M" === e.charAt(0);
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "PD" : "MD";
            },
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Sot në] LT",
                nextDay: "[Nesër në] LT",
                nextWeek: "dddd [në] LT",
                lastDay: "[Dje në] LT",
                lastWeek: "dddd [e kaluar në] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "në %s",
                past: "%s më parë",
                s: "disa sekonda",
                ss: "%d sekonda",
                m: "një minutë",
                mm: "%d minuta",
                h: "një orë",
                hh: "%d orë",
                d: "një ditë",
                dd: "%d ditë",
                M: "një muaj",
                MM: "%d muaj",
                y: "një vit",
                yy: "%d vite"
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            words: {
                ss: [ "sekunda", "sekunde", "sekundi" ],
                m: [ "jedan minut", "jedne minute" ],
                mm: [ "minut", "minute", "minuta" ],
                h: [ "jedan sat", "jednog sata" ],
                hh: [ "sat", "sata", "sati" ],
                dd: [ "dan", "dana", "dana" ],
                MM: [ "mesec", "meseca", "meseci" ],
                yy: [ "godina", "godine", "godina" ]
            },
            correctGrammaticalCase: function(e, t) {
                return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
            },
            translate: function(e, a, n) {
                var s = t.words[n];
                return 1 === n.length ? a ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s);
            }
        }, a = e.defineLocale("sr", {
            months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
            monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
            monthsParseExact: !0,
            weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),
            weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"),
            weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd, D. MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[danas u] LT",
                nextDay: "[sutra u] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[u] [nedelju] [u] LT";

                      case 3:
                        return "[u] [sredu] [u] LT";

                      case 6:
                        return "[u] [subotu] [u] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[u] dddd [u] LT";
                    }
                },
                lastDay: "[juče u] LT",
                lastWeek: function() {
                    var e = [ "[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT" ];
                    return e[this.day()];
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "za %s",
                past: "pre %s",
                s: "nekoliko sekundi",
                ss: t.translate,
                m: t.translate,
                mm: t.translate,
                h: t.translate,
                hh: t.translate,
                d: "dan",
                dd: t.translate,
                M: "mesec",
                MM: t.translate,
                y: "godinu",
                yy: t.translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            words: {
                ss: [ "секунда", "секунде", "секунди" ],
                m: [ "један минут", "једне минуте" ],
                mm: [ "минут", "минуте", "минута" ],
                h: [ "један сат", "једног сата" ],
                hh: [ "сат", "сата", "сати" ],
                dd: [ "дан", "дана", "дана" ],
                MM: [ "месец", "месеца", "месеци" ],
                yy: [ "година", "године", "година" ]
            },
            correctGrammaticalCase: function(e, t) {
                return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
            },
            translate: function(e, a, n) {
                var s = t.words[n];
                return 1 === n.length ? a ? s[0] : s[1] : e + " " + t.correctGrammaticalCase(e, s);
            }
        }, a = e.defineLocale("sr-cyrl", {
            months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),
            monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),
            monthsParseExact: !0,
            weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),
            weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"),
            weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM YYYY",
                LLL: "D. MMMM YYYY H:mm",
                LLLL: "dddd, D. MMMM YYYY H:mm"
            },
            calendar: {
                sameDay: "[данас у] LT",
                nextDay: "[сутра у] LT",
                nextWeek: function() {
                    switch (this.day()) {
                      case 0:
                        return "[у] [недељу] [у] LT";

                      case 3:
                        return "[у] [среду] [у] LT";

                      case 6:
                        return "[у] [суботу] [у] LT";

                      case 1:
                      case 2:
                      case 4:
                      case 5:
                        return "[у] dddd [у] LT";
                    }
                },
                lastDay: "[јуче у] LT",
                lastWeek: function() {
                    var e = [ "[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT" ];
                    return e[this.day()];
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "за %s",
                past: "пре %s",
                s: "неколико секунди",
                ss: t.translate,
                m: t.translate,
                mm: t.translate,
                h: t.translate,
                hh: t.translate,
                d: "дан",
                dd: t.translate,
                M: "месец",
                MM: t.translate,
                y: "годину",
                yy: t.translate
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ss", {
            months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),
            monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),
            weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),
            weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),
            weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY h:mm A",
                LLLL: "dddd, D MMMM YYYY h:mm A"
            },
            calendar: {
                sameDay: "[Namuhla nga] LT",
                nextDay: "[Kusasa nga] LT",
                nextWeek: "dddd [nga] LT",
                lastDay: "[Itolo nga] LT",
                lastWeek: "dddd [leliphelile] [nga] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "nga %s",
                past: "wenteka nga %s",
                s: "emizuzwana lomcane",
                ss: "%d mzuzwana",
                m: "umzuzu",
                mm: "%d emizuzu",
                h: "lihora",
                hh: "%d emahora",
                d: "lilanga",
                dd: "%d emalanga",
                M: "inyanga",
                MM: "%d tinyanga",
                y: "umnyaka",
                yy: "%d iminyaka"
            },
            meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
            meridiem: function(e, t, a) {
                return e < 11 ? "ekuseni" : e < 15 ? "emini" : e < 19 ? "entsambama" : "ebusuku";
            },
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "ekuseni" === t ? e : "emini" === t ? e >= 11 ? e : e + 12 : "entsambama" === t || "ebusuku" === t ? 0 === e ? 0 : e + 12 : void 0;
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: "%d",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("sv", {
            months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
            monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
            weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
            weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"),
            weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY-MM-DD",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY [kl.] HH:mm",
                LLLL: "dddd D MMMM YYYY [kl.] HH:mm",
                lll: "D MMM YYYY HH:mm",
                llll: "ddd D MMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Idag] LT",
                nextDay: "[Imorgon] LT",
                lastDay: "[Igår] LT",
                nextWeek: "[På] dddd LT",
                lastWeek: "[I] dddd[s] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "om %s",
                past: "för %s sedan",
                s: "några sekunder",
                ss: "%d sekunder",
                m: "en minut",
                mm: "%d minuter",
                h: "en timme",
                hh: "%d timmar",
                d: "en dag",
                dd: "%d dagar",
                M: "en månad",
                MM: "%d månader",
                y: "ett år",
                yy: "%d år"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "e" : 1 === t ? "a" : 2 === t ? "a" : "e";
                return e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("sw", {
            months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),
            monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),
            weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),
            weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),
            weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[leo saa] LT",
                nextDay: "[kesho saa] LT",
                nextWeek: "[wiki ijayo] dddd [saat] LT",
                lastDay: "[jana] LT",
                lastWeek: "[wiki iliyopita] dddd [saat] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s baadaye",
                past: "tokea %s",
                s: "hivi punde",
                ss: "sekunde %d",
                m: "dakika moja",
                mm: "dakika %d",
                h: "saa limoja",
                hh: "masaa %d",
                d: "siku moja",
                dd: "masiku %d",
                M: "mwezi mmoja",
                MM: "miezi %d",
                y: "mwaka mmoja",
                yy: "miaka %d"
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            "1": "௧",
            "2": "௨",
            "3": "௩",
            "4": "௪",
            "5": "௫",
            "6": "௬",
            "7": "௭",
            "8": "௮",
            "9": "௯",
            "0": "௦"
        }, a = {
            "௧": "1",
            "௨": "2",
            "௩": "3",
            "௪": "4",
            "௫": "5",
            "௬": "6",
            "௭": "7",
            "௮": "8",
            "௯": "9",
            "௦": "0"
        }, n = e.defineLocale("ta", {
            months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
            monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
            weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),
            weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),
            weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, HH:mm",
                LLLL: "dddd, D MMMM YYYY, HH:mm"
            },
            calendar: {
                sameDay: "[இன்று] LT",
                nextDay: "[நாளை] LT",
                nextWeek: "dddd, LT",
                lastDay: "[நேற்று] LT",
                lastWeek: "[கடந்த வாரம்] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s இல்",
                past: "%s முன்",
                s: "ஒரு சில விநாடிகள்",
                ss: "%d விநாடிகள்",
                m: "ஒரு நிமிடம்",
                mm: "%d நிமிடங்கள்",
                h: "ஒரு மணி நேரம்",
                hh: "%d மணி நேரம்",
                d: "ஒரு நாள்",
                dd: "%d நாட்கள்",
                M: "ஒரு மாதம்",
                MM: "%d மாதங்கள்",
                y: "ஒரு வருடம்",
                yy: "%d ஆண்டுகள்"
            },
            dayOfMonthOrdinalParse: /\d{1,2}வது/,
            ordinal: function(e) {
                return e + "வது";
            },
            preparse: function(e) {
                return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function(e) {
                    return a[e];
                });
            },
            postformat: function(e) {
                return e.replace(/\d/g, function(e) {
                    return t[e];
                });
            },
            meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
            meridiem: function(e, t, a) {
                return e < 2 ? " யாமம்" : e < 6 ? " வைகறை" : e < 10 ? " காலை" : e < 14 ? " நண்பகல்" : e < 18 ? " எற்பாடு" : e < 22 ? " மாலை" : " யாமம்";
            },
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "யாமம்" === t ? e < 2 ? e : e + 12 : "வைகறை" === t || "காலை" === t ? e : "நண்பகல்" === t && e >= 10 ? e : e + 12;
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("te", {
            months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),
            monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),
            monthsParseExact: !0,
            weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),
            weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),
            weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"),
            longDateFormat: {
                LT: "A h:mm",
                LTS: "A h:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY, A h:mm",
                LLLL: "dddd, D MMMM YYYY, A h:mm"
            },
            calendar: {
                sameDay: "[నేడు] LT",
                nextDay: "[రేపు] LT",
                nextWeek: "dddd, LT",
                lastDay: "[నిన్న] LT",
                lastWeek: "[గత] dddd, LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s లో",
                past: "%s క్రితం",
                s: "కొన్ని క్షణాలు",
                ss: "%d సెకన్లు",
                m: "ఒక నిమిషం",
                mm: "%d నిమిషాలు",
                h: "ఒక గంట",
                hh: "%d గంటలు",
                d: "ఒక రోజు",
                dd: "%d రోజులు",
                M: "ఒక నెల",
                MM: "%d నెలలు",
                y: "ఒక సంవత్సరం",
                yy: "%d సంవత్సరాలు"
            },
            dayOfMonthOrdinalParse: /\d{1,2}వ/,
            ordinal: "%dవ",
            meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "రాత్రి" === t ? e < 4 ? e : e + 12 : "ఉదయం" === t ? e : "మధ్యాహ్నం" === t ? e >= 10 ? e : e + 12 : "సాయంత్రం" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "రాత్రి" : e < 10 ? "ఉదయం" : e < 17 ? "మధ్యాహ్నం" : e < 20 ? "సాయంత్రం" : "రాత్రి";
            },
            week: {
                dow: 0,
                doy: 6
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("tet", {
            months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),
            monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
            weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),
            weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),
            weekdaysMin: "Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Ohin iha] LT",
                nextDay: "[Aban iha] LT",
                nextWeek: "dddd [iha] LT",
                lastDay: "[Horiseik iha] LT",
                lastWeek: "dddd [semana kotuk] [iha] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "iha %s",
                past: "%s liuba",
                s: "minutu balun",
                ss: "minutu %d",
                m: "minutu ida",
                mm: "minutu %d",
                h: "oras ida",
                hh: "oras %d",
                d: "loron ida",
                dd: "loron %d",
                M: "fulan ida",
                MM: "fulan %d",
                y: "tinan ida",
                yy: "tinan %d"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                return e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            0: "-ум",
            1: "-ум",
            2: "-юм",
            3: "-юм",
            4: "-ум",
            5: "-ум",
            6: "-ум",
            7: "-ум",
            8: "-ум",
            9: "-ум",
            10: "-ум",
            12: "-ум",
            13: "-ум",
            20: "-ум",
            30: "-юм",
            40: "-ум",
            50: "-ум",
            60: "-ум",
            70: "-ум",
            80: "-ум",
            90: "-ум",
            100: "-ум"
        }, a = e.defineLocale("tg", {
            months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),
            monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
            weekdays: "якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),
            weekdaysShort: "яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),
            weekdaysMin: "яш_дш_сш_чш_пш_ҷм_шб".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Имрӯз соати] LT",
                nextDay: "[Пагоҳ соати] LT",
                lastDay: "[Дирӯз соати] LT",
                nextWeek: "dddd[и] [ҳафтаи оянда соати] LT",
                lastWeek: "dddd[и] [ҳафтаи гузашта соати] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "баъди %s",
                past: "%s пеш",
                s: "якчанд сония",
                m: "як дақиқа",
                mm: "%d дақиқа",
                h: "як соат",
                hh: "%d соат",
                d: "як рӯз",
                dd: "%d рӯз",
                M: "як моҳ",
                MM: "%d моҳ",
                y: "як сол",
                yy: "%d сол"
            },
            meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "шаб" === t ? e < 4 ? e : e + 12 : "субҳ" === t ? e : "рӯз" === t ? e >= 11 ? e : e + 12 : "бегоҳ" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "шаб" : e < 11 ? "субҳ" : e < 16 ? "рӯз" : e < 19 ? "бегоҳ" : "шаб";
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
            ordinal: function(e) {
                var a = e % 10, n = e >= 100 ? 100 : null;
                return e + (t[e] || t[a] || t[n]);
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("th", {
            months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
            monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),
            monthsParseExact: !0,
            weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
            weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),
            weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "H:mm",
                LTS: "H:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY เวลา H:mm",
                LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm"
            },
            meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
            isPM: function(e) {
                return "หลังเที่ยง" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "ก่อนเที่ยง" : "หลังเที่ยง";
            },
            calendar: {
                sameDay: "[วันนี้ เวลา] LT",
                nextDay: "[พรุ่งนี้ เวลา] LT",
                nextWeek: "dddd[หน้า เวลา] LT",
                lastDay: "[เมื่อวานนี้ เวลา] LT",
                lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "อีก %s",
                past: "%sที่แล้ว",
                s: "ไม่กี่วินาที",
                ss: "%d วินาที",
                m: "1 นาที",
                mm: "%d นาที",
                h: "1 ชั่วโมง",
                hh: "%d ชั่วโมง",
                d: "1 วัน",
                dd: "%d วัน",
                M: "1 เดือน",
                MM: "%d เดือน",
                y: "1 ปี",
                yy: "%d ปี"
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("tl-ph", {
            months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
            monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
            weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
            weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
            weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "MM/D/YYYY",
                LL: "MMMM D, YYYY",
                LLL: "MMMM D, YYYY HH:mm",
                LLLL: "dddd, MMMM DD, YYYY HH:mm"
            },
            calendar: {
                sameDay: "LT [ngayong araw]",
                nextDay: "[Bukas ng] LT",
                nextWeek: "LT [sa susunod na] dddd",
                lastDay: "LT [kahapon]",
                lastWeek: "LT [noong nakaraang] dddd",
                sameElse: "L"
            },
            relativeTime: {
                future: "sa loob ng %s",
                past: "%s ang nakalipas",
                s: "ilang segundo",
                ss: "%d segundo",
                m: "isang minuto",
                mm: "%d minuto",
                h: "isang oras",
                hh: "%d oras",
                d: "isang araw",
                dd: "%d araw",
                M: "isang buwan",
                MM: "%d buwan",
                y: "isang taon",
                yy: "%d taon"
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: function(e) {
                return e;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e) {
            var t = e;
            return t = e.indexOf("jaj") !== -1 ? t.slice(0, -3) + "leS" : e.indexOf("jar") !== -1 ? t.slice(0, -3) + "waQ" : e.indexOf("DIS") !== -1 ? t.slice(0, -3) + "nem" : t + " pIq";
        }
        function a(e) {
            var t = e;
            return t = e.indexOf("jaj") !== -1 ? t.slice(0, -3) + "Hu’" : e.indexOf("jar") !== -1 ? t.slice(0, -3) + "wen" : e.indexOf("DIS") !== -1 ? t.slice(0, -3) + "ben" : t + " ret";
        }
        function n(e, t, a, n) {
            var i = s(e);
            switch (a) {
              case "ss":
                return i + " lup";

              case "mm":
                return i + " tup";

              case "hh":
                return i + " rep";

              case "dd":
                return i + " jaj";

              case "MM":
                return i + " jar";

              case "yy":
                return i + " DIS";
            }
        }
        function s(e) {
            var t = Math.floor(e % 1e3 / 100), a = Math.floor(e % 100 / 10), n = e % 10, s = "";
            return t > 0 && (s += i[t] + "vatlh"), a > 0 && (s += ("" !== s ? " " : "") + i[a] + "maH"), 
            n > 0 && (s += ("" !== s ? " " : "") + i[n]), "" === s ? "pagh" : s;
        }
        var i = "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_"), r = e.defineLocale("tlh", {
            months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),
            monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),
            monthsParseExact: !0,
            weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
            weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
            weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[DaHjaj] LT",
                nextDay: "[wa’leS] LT",
                nextWeek: "LLL",
                lastDay: "[wa’Hu’] LT",
                lastWeek: "LLL",
                sameElse: "L"
            },
            relativeTime: {
                future: t,
                past: a,
                s: "puS lup",
                ss: n,
                m: "wa’ tup",
                mm: n,
                h: "wa’ rep",
                hh: n,
                d: "wa’ jaj",
                dd: n,
                M: "wa’ jar",
                MM: n,
                y: "wa’ DIS",
                yy: n
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return r;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = {
            1: "'inci",
            5: "'inci",
            8: "'inci",
            70: "'inci",
            80: "'inci",
            2: "'nci",
            7: "'nci",
            20: "'nci",
            50: "'nci",
            3: "'üncü",
            4: "'üncü",
            100: "'üncü",
            6: "'ncı",
            9: "'uncu",
            10: "'uncu",
            30: "'uncu",
            60: "'ıncı",
            90: "'ıncı"
        }, a = e.defineLocale("tr", {
            months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
            monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
            weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
            weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
            weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[bugün saat] LT",
                nextDay: "[yarın saat] LT",
                nextWeek: "[gelecek] dddd [saat] LT",
                lastDay: "[dün] LT",
                lastWeek: "[geçen] dddd [saat] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s sonra",
                past: "%s önce",
                s: "birkaç saniye",
                ss: "%d saniye",
                m: "bir dakika",
                mm: "%d dakika",
                h: "bir saat",
                hh: "%d saat",
                d: "bir gün",
                dd: "%d gün",
                M: "bir ay",
                MM: "%d ay",
                y: "bir yıl",
                yy: "%d yıl"
            },
            ordinal: function(e, a) {
                switch (a) {
                  case "d":
                  case "D":
                  case "Do":
                  case "DD":
                    return e;

                  default:
                    if (0 === e) return e + "'ıncı";
                    var n = e % 10, s = e % 100 - n, i = e >= 100 ? 100 : null;
                    return e + (t[n] || t[s] || t[i]);
                }
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t, a, n) {
            var s = {
                s: [ "viensas secunds", "'iensas secunds" ],
                ss: [ e + " secunds", "" + e + " secunds" ],
                m: [ "'n míut", "'iens míut" ],
                mm: [ e + " míuts", "" + e + " míuts" ],
                h: [ "'n þora", "'iensa þora" ],
                hh: [ e + " þoras", "" + e + " þoras" ],
                d: [ "'n ziua", "'iensa ziua" ],
                dd: [ e + " ziuas", "" + e + " ziuas" ],
                M: [ "'n mes", "'iens mes" ],
                MM: [ e + " mesen", "" + e + " mesen" ],
                y: [ "'n ar", "'iens ar" ],
                yy: [ e + " ars", "" + e + " ars" ]
            };
            return n ? s[a][0] : t ? s[a][0] : s[a][1];
        }
        var a = e.defineLocale("tzl", {
            months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),
            monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),
            weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),
            weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),
            weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),
            longDateFormat: {
                LT: "HH.mm",
                LTS: "HH.mm.ss",
                L: "DD.MM.YYYY",
                LL: "D. MMMM [dallas] YYYY",
                LLL: "D. MMMM [dallas] YYYY HH.mm",
                LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm"
            },
            meridiemParse: /d\'o|d\'a/i,
            isPM: function(e) {
                return "d'o" === e.toLowerCase();
            },
            meridiem: function(e, t, a) {
                return e > 11 ? a ? "d'o" : "D'O" : a ? "d'a" : "D'A";
            },
            calendar: {
                sameDay: "[oxhi à] LT",
                nextDay: "[demà à] LT",
                nextWeek: "dddd [à] LT",
                lastDay: "[ieiri à] LT",
                lastWeek: "[sür el] dddd [lasteu à] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "osprei %s",
                past: "ja%s",
                s: t,
                ss: t,
                m: t,
                mm: t,
                h: t,
                hh: t,
                d: t,
                dd: t,
                M: t,
                MM: t,
                y: t,
                yy: t
            },
            dayOfMonthOrdinalParse: /\d{1,2}\./,
            ordinal: "%d.",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return a;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("tzm", {
            months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
            monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
            weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
            weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
            weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
                nextDay: "[ⴰⵙⴽⴰ ⴴ] LT",
                nextWeek: "dddd [ⴴ] LT",
                lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT",
                lastWeek: "dddd [ⴴ] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
                past: "ⵢⴰⵏ %s",
                s: "ⵉⵎⵉⴽ",
                ss: "%d ⵉⵎⵉⴽ",
                m: "ⵎⵉⵏⵓⴺ",
                mm: "%d ⵎⵉⵏⵓⴺ",
                h: "ⵙⴰⵄⴰ",
                hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
                d: "ⴰⵙⵙ",
                dd: "%d oⵙⵙⴰⵏ",
                M: "ⴰⵢoⵓⵔ",
                MM: "%d ⵉⵢⵢⵉⵔⵏ",
                y: "ⴰⵙⴳⴰⵙ",
                yy: "%d ⵉⵙⴳⴰⵙⵏ"
            },
            week: {
                dow: 6,
                doy: 12
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("tzm-latn", {
            months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
            monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
            weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
            weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
            weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[asdkh g] LT",
                nextDay: "[aska g] LT",
                nextWeek: "dddd [g] LT",
                lastDay: "[assant g] LT",
                lastWeek: "dddd [g] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "dadkh s yan %s",
                past: "yan %s",
                s: "imik",
                ss: "%d imik",
                m: "minuḍ",
                mm: "%d minuḍ",
                h: "saɛa",
                hh: "%d tassaɛin",
                d: "ass",
                dd: "%d ossan",
                M: "ayowr",
                MM: "%d iyyirn",
                y: "asgas",
                yy: "%d isgasn"
            },
            week: {
                dow: 6,
                doy: 12
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("ug-cn", {
            months: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),
            monthsShort: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),
            weekdays: "يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),
            weekdaysShort: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),
            weekdaysMin: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY-MM-DD",
                LL: "YYYY-يىلىM-ئاينىڭD-كۈنى",
                LLL: "YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",
                LLLL: "dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"
            },
            meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "يېرىم كېچە" === t || "سەھەر" === t || "چۈشتىن بۇرۇن" === t ? e : "چۈشتىن كېيىن" === t || "كەچ" === t ? e + 12 : e >= 11 ? e : e + 12;
            },
            meridiem: function(e, t, a) {
                var n = 100 * e + t;
                return n < 600 ? "يېرىم كېچە" : n < 900 ? "سەھەر" : n < 1130 ? "چۈشتىن بۇرۇن" : n < 1230 ? "چۈش" : n < 1800 ? "چۈشتىن كېيىن" : "كەچ";
            },
            calendar: {
                sameDay: "[بۈگۈن سائەت] LT",
                nextDay: "[ئەتە سائەت] LT",
                nextWeek: "[كېلەركى] dddd [سائەت] LT",
                lastDay: "[تۆنۈگۈن] LT",
                lastWeek: "[ئالدىنقى] dddd [سائەت] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s كېيىن",
                past: "%s بۇرۇن",
                s: "نەچچە سېكونت",
                ss: "%d سېكونت",
                m: "بىر مىنۇت",
                mm: "%d مىنۇت",
                h: "بىر سائەت",
                hh: "%d سائەت",
                d: "بىر كۈن",
                dd: "%d كۈن",
                M: "بىر ئاي",
                MM: "%d ئاي",
                y: "بىر يىل",
                yy: "%d يىل"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "d":
                  case "D":
                  case "DDD":
                    return e + "-كۈنى";

                  case "w":
                  case "W":
                    return e + "-ھەپتە";

                  default:
                    return e;
                }
            },
            preparse: function(e) {
                return e.replace(/،/g, ",");
            },
            postformat: function(e) {
                return e.replace(/,/g, "،");
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        function t(e, t) {
            var a = e.split("_");
            return t % 10 === 1 && t % 100 !== 11 ? a[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? a[1] : a[2];
        }
        function a(e, a, n) {
            var s = {
                ss: a ? "секунда_секунди_секунд" : "секунду_секунди_секунд",
                mm: a ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин",
                hh: a ? "година_години_годин" : "годину_години_годин",
                dd: "день_дні_днів",
                MM: "місяць_місяці_місяців",
                yy: "рік_роки_років"
            };
            return "m" === n ? a ? "хвилина" : "хвилину" : "h" === n ? a ? "година" : "годину" : e + " " + t(s[n], +e);
        }
        function n(e, t) {
            var a = {
                nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),
                accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),
                genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")
            };
            if (!e) return a.nominative;
            var n = /(\[[ВвУу]\]) ?dddd/.test(t) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(t) ? "genitive" : "nominative";
            return a[n][e.day()];
        }
        function s(e) {
            return function() {
                return e + "о" + (11 === this.hours() ? "б" : "") + "] LT";
            };
        }
        var i = e.defineLocale("uk", {
            months: {
                format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),
                standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")
            },
            monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
            weekdays: n,
            weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"),
            weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD.MM.YYYY",
                LL: "D MMMM YYYY р.",
                LLL: "D MMMM YYYY р., HH:mm",
                LLLL: "dddd, D MMMM YYYY р., HH:mm"
            },
            calendar: {
                sameDay: s("[Сьогодні "),
                nextDay: s("[Завтра "),
                lastDay: s("[Вчора "),
                nextWeek: s("[У] dddd ["),
                lastWeek: function() {
                    switch (this.day()) {
                      case 0:
                      case 3:
                      case 5:
                      case 6:
                        return s("[Минулої] dddd [").call(this);

                      case 1:
                      case 2:
                      case 4:
                        return s("[Минулого] dddd [").call(this);
                    }
                },
                sameElse: "L"
            },
            relativeTime: {
                future: "за %s",
                past: "%s тому",
                s: "декілька секунд",
                ss: a,
                m: a,
                mm: a,
                h: "годину",
                hh: a,
                d: "день",
                dd: a,
                M: "місяць",
                MM: a,
                y: "рік",
                yy: a
            },
            meridiemParse: /ночі|ранку|дня|вечора/,
            isPM: function(e) {
                return /^(дня|вечора)$/.test(e);
            },
            meridiem: function(e, t, a) {
                return e < 4 ? "ночі" : e < 12 ? "ранку" : e < 17 ? "дня" : "вечора";
            },
            dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "M":
                  case "d":
                  case "DDD":
                  case "w":
                  case "W":
                    return e + "-й";

                  case "D":
                    return e + "-го";

                  default:
                    return e;
                }
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return i;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = [ "جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر" ], a = [ "اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ" ], n = e.defineLocale("ur", {
            months: t,
            monthsShort: t,
            weekdays: a,
            weekdaysShort: a,
            weekdaysMin: a,
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd، D MMMM YYYY HH:mm"
            },
            meridiemParse: /صبح|شام/,
            isPM: function(e) {
                return "شام" === e;
            },
            meridiem: function(e, t, a) {
                return e < 12 ? "صبح" : "شام";
            },
            calendar: {
                sameDay: "[آج بوقت] LT",
                nextDay: "[کل بوقت] LT",
                nextWeek: "dddd [بوقت] LT",
                lastDay: "[گذشتہ روز بوقت] LT",
                lastWeek: "[گذشتہ] dddd [بوقت] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s بعد",
                past: "%s قبل",
                s: "چند سیکنڈ",
                ss: "%d سیکنڈ",
                m: "ایک منٹ",
                mm: "%d منٹ",
                h: "ایک گھنٹہ",
                hh: "%d گھنٹے",
                d: "ایک دن",
                dd: "%d دن",
                M: "ایک ماہ",
                MM: "%d ماہ",
                y: "ایک سال",
                yy: "%d سال"
            },
            preparse: function(e) {
                return e.replace(/،/g, ",");
            },
            postformat: function(e) {
                return e.replace(/,/g, "،");
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return n;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("uz", {
            months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),
            monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
            weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
            weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
            weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "D MMMM YYYY, dddd HH:mm"
            },
            calendar: {
                sameDay: "[Бугун соат] LT [да]",
                nextDay: "[Эртага] LT [да]",
                nextWeek: "dddd [куни соат] LT [да]",
                lastDay: "[Кеча соат] LT [да]",
                lastWeek: "[Утган] dddd [куни соат] LT [да]",
                sameElse: "L"
            },
            relativeTime: {
                future: "Якин %s ичида",
                past: "Бир неча %s олдин",
                s: "фурсат",
                ss: "%d фурсат",
                m: "бир дакика",
                mm: "%d дакика",
                h: "бир соат",
                hh: "%d соат",
                d: "бир кун",
                dd: "%d кун",
                M: "бир ой",
                MM: "%d ой",
                y: "бир йил",
                yy: "%d йил"
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("uz-latn", {
            months: "Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),
            monthsShort: "Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),
            weekdays: "Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),
            weekdaysShort: "Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),
            weekdaysMin: "Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "D MMMM YYYY, dddd HH:mm"
            },
            calendar: {
                sameDay: "[Bugun soat] LT [da]",
                nextDay: "[Ertaga] LT [da]",
                nextWeek: "dddd [kuni soat] LT [da]",
                lastDay: "[Kecha soat] LT [da]",
                lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
                sameElse: "L"
            },
            relativeTime: {
                future: "Yaqin %s ichida",
                past: "Bir necha %s oldin",
                s: "soniya",
                ss: "%d soniya",
                m: "bir daqiqa",
                mm: "%d daqiqa",
                h: "bir soat",
                hh: "%d soat",
                d: "bir kun",
                dd: "%d kun",
                M: "bir oy",
                MM: "%d oy",
                y: "bir yil",
                yy: "%d yil"
            },
            week: {
                dow: 1,
                doy: 7
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("vi", {
            months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
            monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
            monthsParseExact: !0,
            weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
            weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"),
            weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"),
            weekdaysParseExact: !0,
            meridiemParse: /sa|ch/i,
            isPM: function(e) {
                return /^ch$/i.test(e);
            },
            meridiem: function(e, t, a) {
                return e < 12 ? a ? "sa" : "SA" : a ? "ch" : "CH";
            },
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "DD/MM/YYYY",
                LL: "D MMMM [năm] YYYY",
                LLL: "D MMMM [năm] YYYY HH:mm",
                LLLL: "dddd, D MMMM [năm] YYYY HH:mm",
                l: "DD/M/YYYY",
                ll: "D MMM YYYY",
                lll: "D MMM YYYY HH:mm",
                llll: "ddd, D MMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[Hôm nay lúc] LT",
                nextDay: "[Ngày mai lúc] LT",
                nextWeek: "dddd [tuần tới lúc] LT",
                lastDay: "[Hôm qua lúc] LT",
                lastWeek: "dddd [tuần rồi lúc] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "%s tới",
                past: "%s trước",
                s: "vài giây",
                ss: "%d giây",
                m: "một phút",
                mm: "%d phút",
                h: "một giờ",
                hh: "%d giờ",
                d: "một ngày",
                dd: "%d ngày",
                M: "một tháng",
                MM: "%d tháng",
                y: "một năm",
                yy: "%d năm"
            },
            dayOfMonthOrdinalParse: /\d{1,2}/,
            ordinal: function(e) {
                return e;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("x-pseudo", {
            months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),
            monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),
            monthsParseExact: !0,
            weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),
            weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),
            weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),
            weekdaysParseExact: !0,
            longDateFormat: {
                LT: "HH:mm",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY HH:mm",
                LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            calendar: {
                sameDay: "[T~ódá~ý át] LT",
                nextDay: "[T~ómó~rró~w át] LT",
                nextWeek: "dddd [át] LT",
                lastDay: "[Ý~ést~érdá~ý át] LT",
                lastWeek: "[L~ást] dddd [át] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "í~ñ %s",
                past: "%s á~gó",
                s: "á ~féw ~sécó~ñds",
                ss: "%d s~écóñ~ds",
                m: "á ~míñ~úté",
                mm: "%d m~íñú~tés",
                h: "á~ñ hó~úr",
                hh: "%d h~óúrs",
                d: "á ~dáý",
                dd: "%d d~áýs",
                M: "á ~móñ~th",
                MM: "%d m~óñt~hs",
                y: "á ~ýéár",
                yy: "%d ý~éárs"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function(e) {
                var t = e % 10, a = 1 === ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th";
                return e + a;
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("yo", {
            months: "Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),
            monthsShort: "Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),
            weekdays: "Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),
            weekdaysShort: "Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),
            weekdaysMin: "Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),
            longDateFormat: {
                LT: "h:mm A",
                LTS: "h:mm:ss A",
                L: "DD/MM/YYYY",
                LL: "D MMMM YYYY",
                LLL: "D MMMM YYYY h:mm A",
                LLLL: "dddd, D MMMM YYYY h:mm A"
            },
            calendar: {
                sameDay: "[Ònì ni] LT",
                nextDay: "[Ọ̀la ni] LT",
                nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
                lastDay: "[Àna ni] LT",
                lastWeek: "dddd [Ọsẹ̀ tólọ́] [ni] LT",
                sameElse: "L"
            },
            relativeTime: {
                future: "ní %s",
                past: "%s kọjá",
                s: "ìsẹjú aayá die",
                ss: "aayá %d",
                m: "ìsẹjú kan",
                mm: "ìsẹjú %d",
                h: "wákati kan",
                hh: "wákati %d",
                d: "ọjọ́ kan",
                dd: "ọjọ́ %d",
                M: "osù kan",
                MM: "osù %d",
                y: "ọdún kan",
                yy: "ọdún %d"
            },
            dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
            ordinal: "ọjọ́ %d",
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("zh-cn", {
            months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
            weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
            weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
            weekdaysMin: "日_一_二_三_四_五_六".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY/MM/DD",
                LL: "YYYY年M月D日",
                LLL: "YYYY年M月D日Ah点mm分",
                LLLL: "YYYY年M月D日ddddAh点mm分",
                l: "YYYY/M/D",
                ll: "YYYY年M月D日",
                lll: "YYYY年M月D日 HH:mm",
                llll: "YYYY年M月D日dddd HH:mm"
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "下午" === t || "晚上" === t ? e + 12 : e >= 11 ? e : e + 12;
            },
            meridiem: function(e, t, a) {
                var n = 100 * e + t;
                return n < 600 ? "凌晨" : n < 900 ? "早上" : n < 1130 ? "上午" : n < 1230 ? "中午" : n < 1800 ? "下午" : "晚上";
            },
            calendar: {
                sameDay: "[今天]LT",
                nextDay: "[明天]LT",
                nextWeek: "[下]ddddLT",
                lastDay: "[昨天]LT",
                lastWeek: "[上]ddddLT",
                sameElse: "L"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "d":
                  case "D":
                  case "DDD":
                    return e + "日";

                  case "M":
                    return e + "月";

                  case "w":
                  case "W":
                    return e + "周";

                  default:
                    return e;
                }
            },
            relativeTime: {
                future: "%s内",
                past: "%s前",
                s: "几秒",
                ss: "%d 秒",
                m: "1 分钟",
                mm: "%d 分钟",
                h: "1 小时",
                hh: "%d 小时",
                d: "1 天",
                dd: "%d 天",
                M: "1 个月",
                MM: "%d 个月",
                y: "1 年",
                yy: "%d 年"
            },
            week: {
                dow: 1,
                doy: 4
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("zh-hk", {
            months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
            weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
            weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
            weekdaysMin: "日_一_二_三_四_五_六".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY/MM/DD",
                LL: "YYYY年M月D日",
                LLL: "YYYY年M月D日 HH:mm",
                LLLL: "YYYY年M月D日dddd HH:mm",
                l: "YYYY/M/D",
                ll: "YYYY年M月D日",
                lll: "YYYY年M月D日 HH:mm",
                llll: "YYYY年M月D日dddd HH:mm"
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                var n = 100 * e + t;
                return n < 600 ? "凌晨" : n < 900 ? "早上" : n < 1130 ? "上午" : n < 1230 ? "中午" : n < 1800 ? "下午" : "晚上";
            },
            calendar: {
                sameDay: "[今天]LT",
                nextDay: "[明天]LT",
                nextWeek: "[下]ddddLT",
                lastDay: "[昨天]LT",
                lastWeek: "[上]ddddLT",
                sameElse: "L"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "d":
                  case "D":
                  case "DDD":
                    return e + "日";

                  case "M":
                    return e + "月";

                  case "w":
                  case "W":
                    return e + "週";

                  default:
                    return e;
                }
            },
            relativeTime: {
                future: "%s內",
                past: "%s前",
                s: "幾秒",
                ss: "%d 秒",
                m: "1 分鐘",
                mm: "%d 分鐘",
                h: "1 小時",
                hh: "%d 小時",
                d: "1 天",
                dd: "%d 天",
                M: "1 個月",
                MM: "%d 個月",
                y: "1 年",
                yy: "%d 年"
            }
        });
        return t;
    });
}, function(e, t, a) {
    !function(e, t) {
        t(a(3));
    }(this, function(e) {
        "use strict";
        var t = e.defineLocale("zh-tw", {
            months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
            monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
            weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
            weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
            weekdaysMin: "日_一_二_三_四_五_六".split("_"),
            longDateFormat: {
                LT: "HH:mm",
                LTS: "HH:mm:ss",
                L: "YYYY/MM/DD",
                LL: "YYYY年M月D日",
                LLL: "YYYY年M月D日 HH:mm",
                LLLL: "YYYY年M月D日dddd HH:mm",
                l: "YYYY/M/D",
                ll: "YYYY年M月D日",
                lll: "YYYY年M月D日 HH:mm",
                llll: "YYYY年M月D日dddd HH:mm"
            },
            meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
            meridiemHour: function(e, t) {
                return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0;
            },
            meridiem: function(e, t, a) {
                var n = 100 * e + t;
                return n < 600 ? "凌晨" : n < 900 ? "早上" : n < 1130 ? "上午" : n < 1230 ? "中午" : n < 1800 ? "下午" : "晚上";
            },
            calendar: {
                sameDay: "[今天] LT",
                nextDay: "[明天] LT",
                nextWeek: "[下]dddd LT",
                lastDay: "[昨天] LT",
                lastWeek: "[上]dddd LT",
                sameElse: "L"
            },
            dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
            ordinal: function(e, t) {
                switch (t) {
                  case "d":
                  case "D":
                  case "DDD":
                    return e + "日";

                  case "M":
                    return e + "月";

                  case "w":
                  case "W":
                    return e + "週";

                  default:
                    return e;
                }
            },
            relativeTime: {
                future: "%s內",
                past: "%s前",
                s: "幾秒",
                ss: "%d 秒",
                m: "1 分鐘",
                mm: "%d 分鐘",
                h: "1 小時",
                hh: "%d 小時",
                d: "1 天",
                dd: "%d 天",
                M: "1 個月",
                MM: "%d 個月",
                y: "1 年",
                yy: "%d 年"
            }
        });
        return t;
    });
}, , , , , , , , , , , , , , , , , , , , function(e, t) {
    e.exports = jQuery;
}, function(e, t, a) {
    "use strict";
    !function() {
        function t(e) {
            function t(e, t, a, n, i, d) {
                var o = {
                    cursor: d.__CURSOR,
                    time: i,
                    message: a,
                    service: e
                };
                return n > 1 && (o.count = n), "abrt-notification" === e ? (o.problem = !0, o.service = d.PROBLEM_BINARY) : t < 4 && (o.warning = !0), 
                s.render(r, o);
            }
            function a() {
                return l;
            }
            function n(e) {
                return s.render(i, {
                    day: e
                });
            }
            function _(e) {
                var t = document.createElement("div");
                return t.innerHTML = e.trim(), t.children[0];
            }
            e.jquery && (e = e[0]), s.parse(i), s.parse(r), s.parse(d);
            var u = o("Reboot"), l = s.render(d, {
                message: u
            });
            return {
                render_line: t,
                render_day_header: n,
                render_reboot_separator: a,
                append: function(t) {
                    "string" == typeof t && (t = _(t)), e.appendChild(t);
                },
                prepend: function(t) {
                    "string" == typeof t && (t = _(t)), e.firstChild ? e.insertBefore(t, e.firstChild) : e.appendChild(t);
                },
                remove_last: function() {
                    e.lastChild && e.removeChild(e.lastChild);
                },
                remove_first: function() {
                    e.firstChild && e.removeChild(e.firstChild);
                }
            };
        }
        var n = a(2), s = a(150), i = a(152), r = a(153), d = a(154), o = n.gettext, _ = n.gettext, u = {};
        u.journalctl = function() {
            function e() {
                var e, t;
                if (l.length && u.length > 0) for (e = u, u = [], t = 0; t < l.length; t++) l[t].apply(d, [ e ]); else window.clearInterval(m), 
                m = null;
            }
            var t, a, s = [], i = {
                follow: !0
            };
            for (t = 0; t < arguments.length; t++) if (a = arguments[t], "string" == typeof a) s.push(a); else if ("object" == typeof a) {
                if (!(a instanceof Array)) {
                    n.extend(i, a);
                    break;
                }
                s.push.apply(s, a);
            } else console.warn("journal.journalctl called with invalid argument:", a);
            void 0 === i.count && (i.follow ? i.count = 10 : i.count = null);
            var r = [ "journalctl", "-q", "--output=json" ];
            i.count ? r.push("--lines=" + i.count) : r.push("--no-tail"), i.directory && r.push("--directory=" + i.directory), 
            i.boot ? r.push("--boot=" + i.boot) : void 0 !== i.boot && r.push("--boot"), i.since && r.push("--since=" + i.since), 
            i.until && r.push("--until=" + i.until), i.cursor && r.push("--cursor=" + i.cursor), 
            i.after && r.push("--after=" + i.after), i.reverse ? r.push("--reverse") : i.follow && r.push("--follow"), 
            r.push("--"), r.push.apply(r, s);
            var d, o = new n.defer(), _ = "", u = [], l = [], m = null, c = n.spawn(r, {
                host: i.host,
                batch: 8192,
                latency: 300,
                superuser: "try"
            }).stream(function(t) {
                _ && (t = _ + t), _ = "";
                var a = t.split("\n"), n = a.length - 1;
                a.forEach(function(e, t) {
                    if (t == n) _ = e; else if (e && 0 !== e.indexOf("-- ")) try {
                        u.push(JSON.parse(e));
                    } catch (t) {
                        console.warn(t, e);
                    }
                }), l.length && null === m && (m = window.setInterval(e, 300));
            }).done(function() {
                e(), o.resolve(u);
            }).fail(function(t) {
                "cancelled" == t.problem || 1 === t.exit_status ? (e(), o.resolve(u)) : o.reject(t);
            }).always(function() {
                window.clearInterval(m);
            });
            return d = o.promise(), d.stream = function(e) {
                return l.push(e), this;
            }, d.stop = function() {
                c.close("cancelled");
            }, d;
        }, u.printable = function(e) {
            return void 0 === e || null === e ? o("[no data]") : "string" == typeof e ? e : void 0 !== e.length ? n.format(o("[$0 bytes of binary data]"), e.length) : o("[binary data]");
        };
        var l = [ _("month-name", "January"), _("month-name", "February"), _("month-name", "March"), _("month-name", "April"), _("month-name", "May"), _("month-name", "June"), _("month-name", "July"), _("month-name", "August"), _("month-name", "September"), _("month-name", "October"), _("month-name", "November"), _("month-name", "December") ];
        u.renderer = function(e) {
            function a(e) {
                var t = {};
                for (var a in e) t[a] = e[a];
                return t;
            }
            function n(e) {
                function t(e) {
                    var t = e.toFixed();
                    return 1 == t.length && (t = "0" + t), t;
                }
                var a = new Date(e.__REALTIME_TIMESTAMP / 1e3);
                return {
                    cursor: e.__CURSOR,
                    full: e,
                    day: l[a.getMonth()] + " " + a.getDate().toFixed() + ", " + a.getFullYear().toFixed(),
                    time: t(a.getHours()) + ":" + t(a.getMinutes()),
                    bootid: e._BOOT_ID,
                    ident: e.SYSLOG_IDENTIFIER || e._COMM,
                    prio: e.PRIORITY,
                    message: u.printable(e.MESSAGE)
                };
            }
            function s(e, t) {
                return e && t && e.day == t.day && e.bootid == t.bootid && e.ident == t.ident && e.prio == t.prio && e.message == t.message;
            }
            function i(e) {
                return f.render_line(e.entry.ident, e.entry.prio, e.entry.message, e.count, e.last_time, e.entry.full);
            }
            function r() {
                M === p && M.entry && (M = a(p));
            }
            function d() {
                M.header_present && (f.remove_first(), M.header_present = !1), M.line_present && (f.remove_first(), 
                M.line_present = !1), M.entry && (f.prepend(i(M)), M.line_present = !0);
            }
            function o(e) {
                var t = n(e);
                s(M.entry, t) ? (M.count += 1, M.first_time = t.time) : (d(), M.entry && (t.bootid != M.entry.bootid && f.prepend(f.render_reboot_separator()), 
                t.day != M.entry.day && f.prepend(f.render_day_header(M.entry.day))), r(), M.entry = t, 
                M.count = 1, M.first_time = M.last_time = t.time, M.line_present = !1);
            }
            function _() {
                d(), M.entry && (f.prepend(f.render_day_header(M.entry.day)), M.header_present = !0);
            }
            function m() {
                p.line_present && (f.remove_last(), p.line_present = !1), p.entry && (f.append(i(p)), 
                p.line_present = !0);
            }
            function c(e) {
                var t = n(e);
                s(p.entry, t) ? (p.count += 1, p.last_time = t.time) : (m(), p.entry && t.day == p.entry.day || (f.append(f.render_day_header(t.day)), 
                p.header_present = !0), p.entry && t.bootid != p.entry.bootid && f.append(f.render_reboot_separator()), 
                r(), p.entry = t, p.count = 1, p.first_time = p.last_time = t.time, p.line_present = !1);
            }
            function h() {
                m();
            }
            var f;
            f = e.render_line ? e : t(e);
            var M, p;
            return M = p = {}, {
                prepend: o,
                prepend_flush: _,
                append: c,
                append_flush: h
            };
        }, u.logbox = function(e, t) {
            function a() {
                for (var e = u.renderer(s); s.firstChild; ) s.removeChild(s.firstChild);
                for (var t = 0; t < n.length; t++) e.prepend(n[t]);
                e.prepend_flush(), n.length > 0 ? s.removeAttribute("hidden") : s.setAttribute("hidden", "hidden");
            }
            var n = [], s = document.createElement("div");
            a();
            var i = u.journalctl(e, {
                count: t
            }).stream(function(e) {
                n = n.concat(e), n.length > t && (n = n.slice(-t)), a();
            }).fail(function(e) {
                s.appendChild(document.createTextNode(e.message)), s.removeAttribute("hidden");
            });
            return i.promise(s);
        }, e.exports = u;
    }();
}, function(e, t, a) {
    "use strict";
    function n(e) {
        if (e in r) return r[e];
        var t = document.createElement("div");
        t.innerHTML = e, s.translate(t);
        var a = t.innerHTML;
        return r[e] = a, a;
    }
    var s = a(2), i = a(151), r = {};
    e.exports = s.extend({}, i, {
        render: function(e, t, a) {
            return t || (t = {}), n(i.render(e, t, a));
        },
        to_html: function(e, t, a, s) {
            return t || (t = {}), n(i.to_html(e, t, a, s));
        },
        clearCache: function() {
            return r = {}, i.clearCache();
        }
    });
}, function(e, t, a) {
    var n, s, i;
    /*!
	 * mustache.js - Logic-less {{mustache}} templates with JavaScript
	 * http://github.com/janl/mustache.js
	 */
    !function(a, r) {
        "object" == typeof t && t && "string" != typeof t.nodeName ? r(t) : (s = [ t ], 
        n = r, i = "function" == typeof n ? n.apply(t, s) : n, !(void 0 !== i && (e.exports = i)));
    }(this, function(e) {
        function t(e) {
            return "function" == typeof e;
        }
        function a(e) {
            return f(e) ? "array" : typeof e;
        }
        function n(e) {
            return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
        }
        function s(e, t) {
            return null != e && "object" == typeof e && t in e;
        }
        function i(e, t) {
            return M.call(e, t);
        }
        function r(e) {
            return !i(p, e);
        }
        function d(e) {
            return String(e).replace(/[&<>"'`=\/]/g, function(e) {
                return y[e];
            });
        }
        function o(t, a) {
            function s() {
                if (p && !y) for (;M.length; ) delete h[M.pop()]; else M = [];
                p = !1, y = !1;
            }
            function i(e) {
                if ("string" == typeof e && (e = e.split(Y, 2)), !f(e) || 2 !== e.length) throw new Error("Invalid tags: " + e);
                d = new RegExp(n(e[0]) + "\\s*"), o = new RegExp("\\s*" + n(e[1])), m = new RegExp("\\s*" + n("}" + e[1]));
            }
            if (!t) return [];
            var d, o, m, c = [], h = [], M = [], p = !1, y = !1;
            i(a || e.tags);
            for (var v, w, T, b, S, H, j = new l(t); !j.eos(); ) {
                if (v = j.pos, T = j.scanUntil(d)) for (var x = 0, O = T.length; x < O; ++x) b = T.charAt(x), 
                r(b) ? M.push(h.length) : y = !0, h.push([ "text", b, v, v + 1 ]), v += 1, "\n" === b && s();
                if (!j.scan(d)) break;
                if (p = !0, w = j.scan(D) || "name", j.scan(L), "=" === w ? (T = j.scanUntil(k), 
                j.scan(k), j.scanUntil(o)) : "{" === w ? (T = j.scanUntil(m), j.scan(g), j.scanUntil(o), 
                w = "&") : T = j.scanUntil(o), !j.scan(o)) throw new Error("Unclosed tag at " + j.pos);
                if (S = [ w, T, v, j.pos ], h.push(S), "#" === w || "^" === w) c.push(S); else if ("/" === w) {
                    if (H = c.pop(), !H) throw new Error('Unopened section "' + T + '" at ' + v);
                    if (H[1] !== T) throw new Error('Unclosed section "' + H[1] + '" at ' + v);
                } else "name" === w || "{" === w || "&" === w ? y = !0 : "=" === w && i(T);
            }
            if (H = c.pop()) throw new Error('Unclosed section "' + H[1] + '" at ' + j.pos);
            return u(_(h));
        }
        function _(e) {
            for (var t, a, n = [], s = 0, i = e.length; s < i; ++s) t = e[s], t && ("text" === t[0] && a && "text" === a[0] ? (a[1] += t[1], 
            a[3] = t[3]) : (n.push(t), a = t));
            return n;
        }
        function u(e) {
            for (var t, a, n = [], s = n, i = [], r = 0, d = e.length; r < d; ++r) switch (t = e[r], 
            t[0]) {
              case "#":
              case "^":
                s.push(t), i.push(t), s = t[4] = [];
                break;

              case "/":
                a = i.pop(), a[5] = t[2], s = i.length > 0 ? i[i.length - 1][4] : n;
                break;

              default:
                s.push(t);
            }
            return n;
        }
        function l(e) {
            this.string = e, this.tail = e, this.pos = 0;
        }
        function m(e, t) {
            this.view = e, this.cache = {
                ".": this.view
            }, this.parent = t;
        }
        function c() {
            this.cache = {};
        }
        var h = Object.prototype.toString, f = Array.isArray || function(e) {
            return "[object Array]" === h.call(e);
        }, M = RegExp.prototype.test, p = /\S/, y = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#x2F;",
            "`": "&#x60;",
            "=": "&#x3D;"
        }, L = /\s*/, Y = /\s+/, k = /\s*=/, g = /\s*\}/, D = /#|\^|\/|>|\{|&|=|!/;
        l.prototype.eos = function() {
            return "" === this.tail;
        }, l.prototype.scan = function(e) {
            var t = this.tail.match(e);
            if (!t || 0 !== t.index) return "";
            var a = t[0];
            return this.tail = this.tail.substring(a.length), this.pos += a.length, a;
        }, l.prototype.scanUntil = function(e) {
            var t, a = this.tail.search(e);
            switch (a) {
              case -1:
                t = this.tail, this.tail = "";
                break;

              case 0:
                t = "";
                break;

              default:
                t = this.tail.substring(0, a), this.tail = this.tail.substring(a);
            }
            return this.pos += t.length, t;
        }, m.prototype.push = function(e) {
            return new m(e, this);
        }, m.prototype.lookup = function(e) {
            var a, n = this.cache;
            if (n.hasOwnProperty(e)) a = n[e]; else {
                for (var i, r, d = this, o = !1; d; ) {
                    if (e.indexOf(".") > 0) for (a = d.view, i = e.split("."), r = 0; null != a && r < i.length; ) r === i.length - 1 && (o = s(a, i[r])), 
                    a = a[i[r++]]; else a = d.view[e], o = s(d.view, e);
                    if (o) break;
                    d = d.parent;
                }
                n[e] = a;
            }
            return t(a) && (a = a.call(this.view)), a;
        }, c.prototype.clearCache = function() {
            this.cache = {};
        }, c.prototype.parse = function(e, t) {
            var a = this.cache, n = a[e];
            return null == n && (n = a[e] = o(e, t)), n;
        }, c.prototype.render = function(e, t, a) {
            var n = this.parse(e), s = t instanceof m ? t : new m(t);
            return this.renderTokens(n, s, a, e);
        }, c.prototype.renderTokens = function(e, t, a, n) {
            for (var s, i, r, d = "", o = 0, _ = e.length; o < _; ++o) r = void 0, s = e[o], 
            i = s[0], "#" === i ? r = this.renderSection(s, t, a, n) : "^" === i ? r = this.renderInverted(s, t, a, n) : ">" === i ? r = this.renderPartial(s, t, a, n) : "&" === i ? r = this.unescapedValue(s, t) : "name" === i ? r = this.escapedValue(s, t) : "text" === i && (r = this.rawValue(s)), 
            void 0 !== r && (d += r);
            return d;
        }, c.prototype.renderSection = function(e, a, n, s) {
            function i(e) {
                return r.render(e, a, n);
            }
            var r = this, d = "", o = a.lookup(e[1]);
            if (o) {
                if (f(o)) for (var _ = 0, u = o.length; _ < u; ++_) d += this.renderTokens(e[4], a.push(o[_]), n, s); else if ("object" == typeof o || "string" == typeof o || "number" == typeof o) d += this.renderTokens(e[4], a.push(o), n, s); else if (t(o)) {
                    if ("string" != typeof s) throw new Error("Cannot use higher-order sections without the original template");
                    o = o.call(a.view, s.slice(e[3], e[5]), i), null != o && (d += o);
                } else d += this.renderTokens(e[4], a, n, s);
                return d;
            }
        }, c.prototype.renderInverted = function(e, t, a, n) {
            var s = t.lookup(e[1]);
            if (!s || f(s) && 0 === s.length) return this.renderTokens(e[4], t, a, n);
        }, c.prototype.renderPartial = function(e, a, n) {
            if (n) {
                var s = t(n) ? n(e[1]) : n[e[1]];
                return null != s ? this.renderTokens(this.parse(s), a, n, s) : void 0;
            }
        }, c.prototype.unescapedValue = function(e, t) {
            var a = t.lookup(e[1]);
            if (null != a) return a;
        }, c.prototype.escapedValue = function(t, a) {
            var n = a.lookup(t[1]);
            if (null != n) return e.escape(n);
        }, c.prototype.rawValue = function(e) {
            return e[1];
        }, e.name = "mustache.js", e.version = "2.3.2", e.tags = [ "{{", "}}" ];
        var v = new c();
        return e.clearCache = function() {
            return v.clearCache();
        }, e.parse = function(e, t) {
            return v.parse(e, t);
        }, e.render = function(e, t, n) {
            if ("string" != typeof e) throw new TypeError('Invalid template! Template should be a "string" but "' + a(e) + '" was given as the first argument for mustache#render(template, view, partials)');
            return v.render(e, t, n);
        }, e.to_html = function(a, n, s, i) {
            var r = e.render(a, n, s);
            return t(i) ? void i(r) : r;
        }, e.escape = d, e.Scanner = l, e.Context = m, e.Writer = c, e;
    });
}, function(e, t) {
    e.exports = '<div class="panel-heading">{{day}}</div>\n';
}, function(e, t) {
    e.exports = '<div class="cockpit-logline" data-cursor="{{cursor}}" role="row">\n  <div class="cockpit-log-warning" role="cell">{{#warning}}\n    <i class="fa fa-exclamation-triangle"></i>\n  {{/warning}}{{#problem}}\n    <i class="fa fa-times-circle-o"></i>\n  {{/problem}}\n  </div>\n  <div class="cockpit-log-time" role="cell">{{time}}</div>\n  <span class="cockpit-log-message" role="cell">{{message}}</span>\n  {{! if we have count (repeated messages), show service name and badge - otherwise just the service }}\n  {{#count}}\n  <div class="cockpit-log-service-container" role="cell">\n    <div class="cockpit-log-service-reduced">{{service}}</div>\n    <span class="badge">{{count}}&#160;<i class="fa fa-caret-right"></i></span>\n  </div>\n  {{/count}}{{^count}}\n  <div class="cockpit-log-service" role="cell">{{service}}</div>\n  {{/count}}\n</div>\n';
}, function(e, t) {
    e.exports = '<div class="cockpit-logline" role="row">\n  {{! placeholders for correct message alignment }}\n  <div class="cockpit-log-warning" role="cell"></div>\n  <span class="cockpit-log-message cockpit-logmsg-reboot" role="cell">{{message}}</span>\n</div>\n';
}, function(e, t, a) {
    "use strict";
    var n = a(148);
    n(function() {
        function e(e, t) {
            return 0 === e.indexOf(t);
        }
        function t(e) {
            function t(e) {
                var t, a = /[0-9a-zA-Z:-_.\\]/, n = "";
                for (t = 0; t < e.length; t++) {
                    var s = e[t];
                    if ("/" == s) n += "-"; else if ("-" != s && "\\" != s && a.test(s)) n += s; else {
                        n += "\\x";
                        for (var i = s.charCodeAt(0).toString(16); i.length < 2; ) i = "0" + i;
                        n += i;
                    }
                }
                return n;
            }
            function a(e) {
                return e = e.replace(/\/+/g, "/"), e.length > 1 && (e = e.replace(/\/$/, "").replace(/^\//, "")), 
                e;
            }
            function n(e) {
                return e = a(e), "/" == e ? "-" : t(e);
            }
            return e.length > 0 && "/" == e[0] ? n(e) : t(e);
        }
        function s() {
            N || (N = !0, i());
        }
        function i() {
            function t(e) {
                var t = l[e];
                return t || (t = {
                    aliases: [],
                    path: e
                }, l[e] = t), t;
            }
            function a(e, t) {
                function a(a) {
                    t[a] && (e[a] = t[a].v);
                }
                a("Id"), a("Description"), a("LoadState"), a("ActiveState"), a("SubState"), t.Id && (m[e.Id] = e.path), 
                s(e);
            }
            function s(e) {
                var t = e.LoadState, a = e.ActiveState, n = e.SubState;
                if ("loaded" == t && (t = ""), e.HasFailed = "failed" == a || "" !== t, t = j(t), 
                a = j(a), n = j(n), "" !== n && n != a && (a = a + " (" + n + ")"), "" !== t && (a = t + " / " + a), 
                e.CombinedState = a, "timer" == e.Id.slice(-5) && (e.is_timer = !0, "active" == e.ActiveState)) {
                    var s = U.proxy("org.freedesktop.systemd1.Timer", e.path);
                    s.wait(function() {
                        s.valid && r(s, e);
                    });
                }
            }
            function i(e, n) {
                U.call(e, "org.freedesktop.DBus.Properties", "GetAll", [ "org.freedesktop.systemd1.Unit" ]).fail(function(e) {
                    console.log(e);
                }).done(function(s) {
                    var i = t(e);
                    a(i, s[0]), n && n(i), o();
                });
            }
            function r(e, t) {
                t.LastTriggerTime = S(e.LastTriggerUSec / 1e3).calendar();
                var a = 1e3 * x.valueOf() - O;
                e.LastTriggerUSec !== -1 && 0 !== e.LastTriggerUSec || (t.LastTriggerTime = j("unknown"));
                var n = 0;
                n = 0 === e.NextElapseUSecRealtime ? e.NextElapseUSecMonotonic + a : 0 === e.NextElapseUSecMonotonic ? e.NextElapseUSecRealtime : e.NextElapseUSecMonotonic + a < e.NextElapseUSecRealtime ? e.NextElapseUSecMonotonic + a : e.NextElapseUSecRealtime, 
                t.NextRunTime = S(n / 1e3).calendar(), e.NextElapseUSecMonotonic <= 0 && e.NextElapseUSecRealtime <= 0 && (t.NextRunTime = j("unknown"));
            }
            function d() {
                function t(e, t) {
                    return l[e].Id.localeCompare(l[t].Id);
                }
                function a(e, t, a) {
                    var n = b.render(c, {
                        heading: t,
                        table_head: _,
                        units: a
                    });
                    e.html(n);
                }
                var s = n("#services-filter button.active").attr("data-pattern"), i = Object.keys(l).sort(t), r = [], d = [], o = [], _ = {
                    Description: j("Description"),
                    Id: j("Id"),
                    is_timer: ~s.indexOf("timer"),
                    Next_Run_Time: j("Next Run"),
                    Last_Trigger_Time: j("Last Trigger"),
                    Current_State: j("State")
                };
                _.is_timer ? n("#create-timer").show() : n("#create-timer").hide(), i.forEach(function(t) {
                    var a = l[t];
                    a.Id && s && a.Id.match(s) && (a.UnitFileState && e(a.UnitFileState, "enabled") ? r.push(a) : a.UnitFileState && e(a.UnitFileState, "disabled") ? d.push(a) : o.push(a));
                }), a(n("#services-list-enabled"), j("Enabled"), r), a(n("#services-list-disabled"), j("Disabled"), d), 
                a(n("#services-list-static"), j("Static"), o);
            }
            function o() {
                h ? f = !0 : (d(), h = window.setTimeout(_, 200));
            }
            function _() {
                h = null, f && (f = !1, d());
            }
            function u() {
                function e(e) {
                    console.log(e);
                }
                function a(e) {
                    d[e[0]] = !0;
                    var a = t(e[6]);
                    a.Id = e[0], a.Description = e[1], a.LoadState = e[2], a.ActiveState = e[3], a.SubState = e[4], 
                    m[a.Id] = a.path, s(a);
                }
                function n(e) {
                    function t(t) {
                        function n(t) {
                            t.Id == a ? t.UnitFileState = e[1] : t.aliases.push(a), s(t);
                        }
                        var r = l[t];
                        r ? n(r) : i(t, n);
                    }
                    var a = e[0].split("/").pop();
                    return d[a] = !0, a.indexOf("@") != -1 ? (l[a] = {
                        Id: a,
                        Description: T.format(j("$0 Template"), a),
                        UnitFileState: e[1],
                        is_timer: "timer" == a.slice(-5)
                    }, void (m[a] = a)) : void (m[a] ? t(m[a]) : z.LoadUnit(a).fail(function(e) {
                        console.log(e);
                    }).done(t));
                }
                var r = ++M, d = {};
                z.ListUnits().fail(e).done(function(t) {
                    if (r == M) {
                        for (var s = 0; s < t.length; s++) a(t[s]);
                        z.ListUnitFiles().fail(e).done(function(e) {
                            var t, a;
                            if (r == M) {
                                for (t = 0; t < e.length; t++) n(e[t]);
                                for (a = Object.keys(l), t = 0; t < a; t++) d[l[a[t]].Id] || (console.log("R", a[t]), 
                                delete l[a[t]]);
                                o();
                            }
                        });
                    }
                });
            }
            var l = {}, m = {}, c = n("#services-units-tmpl").html();
            b.parse(c);
            var h, f, M = 0;
            n(z).on("UnitNew", function(e, t, a) {
                m[t] = a;
            }), n(z).on("JobNew JobRemoved", function(e, t, a, n, s) {
                var r = m[n];
                r && i(r);
            }), U.subscribe({
                interface: "org.freedesktop.DBus.Properties",
                member: "PropertiesChanged"
            }, function(e, t, n, s) {
                var i = l[e];
                i && (a(i, s[1]), o());
            }), n(z).on("UnitFilesChanged", function(e) {
                u();
            }), n("#services-filter button").on("click", function() {
                n("#services-filter button").removeClass("active").removeAttr("aria-current"), n(this).addClass("active").attr("aria-current", !0), 
                o();
            }), u();
        }
        function r() {
            var e = n(this).attr("data-action").split(":"), t = e[0], a = e[1];
            W && z.call(t, [ P, a || "fail" ]).fail(function(e) {
                n("#service-error-dialog-message").text(e.toString()), n("#service-error-dialog").modal("show");
            });
        }
        function d() {
            var e = n(this).attr("data-action").split(":"), t = e[0], a = e[1];
            if (W) {
                var s = [ [ P ], !1 ];
                void 0 !== a && s.push("true" == a), z.call(t, s).done(function(e) {
                    2 != e.length || e[0] || n("#service-no-install-info-dialog").modal("show"), z.Reload();
                }).fail(function(e) {
                    n("#service-error-dialog-message").text(e.toString()), n("#service-error-dialog").modal("show");
                });
            }
        }
        function o() {
            n("#service-unit-primary-action>button").update_privileged(B, T.format(j("The user <b>$0</b> is not permitted to start or stop services"), B.user ? B.user.name : "")), 
            n("#service-unit-action>button").update_privileged(B, T.format(j("The user <b>$0</b> is not permitted to start or stop services"), B.user ? B.user.name : "")), 
            n("#service-file-action>button").update_privileged(B, T.format(j("The user <b>$0</b> is not permitted to enable or disable services"), B.user ? B.user.name : ""));
        }
        function _(e) {
            function t() {
                if (W.valid) {
                    var e, t = W.ActiveState;
                    e = "active" == t || "reloading" == t || "activating" == t ? 1 : 0;
                    var a, s = W.LoadState, i = W.UnitFileState;
                    a = "masked" == s ? 7 : "static" == i ? 5 : "enabled" == i ? 2 : 0;
                    var _;
                    _ = "active" == t || "reloading" == t ? W.ActiveEnterTimestamp : "inactive" == t || "failed" == t ? W.InactiveEnterTimestamp : "activating" == t ? W.InactiveExitTimestamp : W.ActiveExitTimestamp;
                    var u = "";
                    _ && (u = T.format(j("Since $0"), S(_ / 1e3).format("LLL")));
                    var l = b.render(J, {
                        id: "service-unit-action",
                        "primary-id": "service-unit-primary-action",
                        "primary-action": V[e],
                        def: G[0],
                        actions: G
                    }), m = b.render(J, {
                        id: "service-file-action",
                        def: $[a],
                        actions: $
                    }), c = null;
                    if (A) {
                        var h = b.render('<a data-goto-unit="{{unit}}">{{unit}}</a>', {
                            unit: A
                        });
                        c = T.format(j("This unit is an instance of the $0 template."), h);
                    }
                    for (var f = W.Conditions, M = [], p = 0; p < f.length; p++) f[p][4] < 0 && M.push(T.format(j("Condition $0=$1 was not met"), f[p][0], f[p][3]));
                    var y = b.render(I, {
                        Unit: W,
                        Since: u,
                        HasLoadError: "loaded" !== W.LoadState,
                        LoadError: W.LoadError ? W.LoadError[1] : null,
                        UnitFileState: E,
                        TemplateDescription: c,
                        UnitButton: l,
                        FileButton: m,
                        NotMetConditions: M,
                        Relationships: [ {
                            Name: j("Requires"),
                            Units: W.Requires
                        }, {
                            Name: j("Requisite"),
                            Units: W.Requisite
                        }, {
                            Name: j("Wants"),
                            Units: W.Wants
                        }, {
                            Name: j("Binds To"),
                            Units: W.BindsTo
                        }, {
                            Name: j("Part Of"),
                            Units: W.PartOf
                        }, {
                            Name: j("Required By"),
                            Units: W.RequiredBy
                        }, {
                            Name: j("Requisite Of"),
                            Units: W.RequisiteOf
                        }, {
                            Name: j("Wanted By"),
                            Units: W.WantedBy
                        }, {
                            Name: j("Bound By"),
                            Units: W.BoundBy
                        }, {
                            Name: j("Consists Of"),
                            Units: W.ConsistsOf
                        }, {
                            Name: j("Conflicts"),
                            Units: W.Conflicts
                        }, {
                            Name: j("Conflicted By"),
                            Units: W.ConflictedBy
                        }, {
                            Name: j("Before"),
                            Units: W.Before
                        }, {
                            Name: j("After"),
                            Units: W.After
                        }, {
                            Name: j("On Failure"),
                            Units: W.OnFailure
                        }, {
                            Name: j("Triggers"),
                            Units: W.Triggers
                        }, {
                            Name: j("Triggered By"),
                            Units: W.TriggeredBy
                        }, {
                            Name: j("Propagates Reload To"),
                            Units: W.PropagatesReloadTo
                        }, {
                            Name: j("Reload Propagated From"),
                            Units: W.ReloadPropagatedFrom
                        }, {
                            Name: j("Joins Namespace Of"),
                            Units: W.JoinsNamespaceOf
                        } ]
                    });
                    n("#service-unit").html(y), n("#service-unit-action").on("click", "[data-action]", r), 
                    n("#service-unit-primary-action").on("click", "[data-action]", r), n("#service-file-action").on("click", "[data-action]", d), 
                    o();
                }
            }
            function a() {
                var e = b.render(R, {
                    Description: T.format(j("$0 Template"), P)
                });
                n("#service-template").html(e);
            }
            if (W && (n(W).off("changed"), W = null, E = null), C && (C.stop(), C = null), n("#service-valid").hide(), 
            n("#service-template").hide(), n("#service-invalid").hide(), n("#service").hide(), 
            P = e) {
                n("#service .breadcrumb .active").text(e);
                var s = P.indexOf("@"), i = P.lastIndexOf(".");
                if (F = s != -1 && (s + 1 == i || s + 1 == P.length), A = void 0, s == -1 || F || (A = P.substring(0, s + 1), 
                i != -1 && (A += P.substring(i))), F) return a(), n("#service-template").show(), 
                void n("#service").show();
                z.LoadUnit(e).done(function(a) {
                    if (P == e) {
                        var s = U.proxy("org.freedesktop.systemd1.Unit", a);
                        W = s, s.wait(function() {
                            W == s && (t(), n(W).on("changed", t), n("#service-valid").show(), n("#service").show());
                        });
                    }
                }).fail(function(e) {
                    n("#service-error-message").text(e.toString()), n("#service-invalid").show(), n("#service").show();
                }), c(), C = H.logbox([ "_SYSTEMD_UNIT=" + P, "+", "COREDUMP_UNIT=" + P, "+", "UNIT=" + P ], 10), 
                n("#service-log").empty().append(C);
            }
        }
        function u() {
            T.location.go([ n(this).attr("data-goto-unit") ]);
        }
        function l(e) {
            if (P) {
                var a = P.indexOf("@"), n = P.lastIndexOf(".");
                if (a != -1) {
                    var s = P.substring(0, a + 1);
                    s += t(e), n != -1 && (s += P.substring(n)), T.location.go([ s ]);
                }
            }
        }
        function m() {
            var e = W;
            e && U.call(e.path, "org.freedesktop.DBus.Properties", "GetAll", [ "org.freedesktop.systemd1.Unit" ]).fail(function(e) {
                console.log(e);
            }).done(function(t) {
                var a = {};
                for (var n in t[0]) a[n] = t[0][n].v;
                var s = {};
                s["org.freedesktop.systemd1.Unit"] = a;
                var i = {};
                i[e.path] = s, U.notify(i);
            });
        }
        function c() {
            var e = P;
            e && z.GetUnitFileState(e).done(function(t) {
                P == e && (E = t, W && n(W).triggerHandler("changed"));
            });
        }
        function h() {
            var e = T.location.path;
            0 === e.length ? (_(null), s(), n("#services").show()) : 1 == e.length ? (n("#services").hide(), 
            _(T.location.path[0])) : (console.warn("not a init location: " + e), T.location = ""), 
            n("body").show();
        }
        function f() {
            T.spawn([ "cat", "/proc/uptime" ]).fail(function(e) {
                console.log(e);
            }).done(function(e) {
                var t = parseFloat(e.split(" ")[0]);
                O = parseInt(1e6 * t, 10);
            }), T.spawn([ "date", "+%s" ]).fail(function(e) {
                console.log(e);
            }).done(function(e) {
                x = S.unix(parseInt(e));
            });
        }
        function M() {
            n("#command").val(""), n("#description").val(""), n("#servicename").val(""), k(1), 
            n("span", n("#boot-or-specific-time")).first().text(j("After system boot")), n("span", n("#drop-time")).first().text(j("Seconds")), 
            n("span", n("#drop-time")).first().attr("value", "1"), n(".form-control").removeClass("has-error"), 
            n(".has-error").hide(), Z = [], K = {
                Calendar_or_Boot: "Boot",
                boot_time_unit: "sec",
                repeat: se[0]
            };
        }
        function p(e) {
            n("#specific-time-error-row").is(":visible") && (n("#specific-time-error-row").hide(), 
            n("#hr").removeClass("has-error"), n("#min").removeClass("has-error")), se.map(function(t) {
                t.index === e && (K.repeat = t);
            }), 0 === e ? (n("#specific-time-without-repeat").show(), n("#repeat-time-option").hide(), 
            n("#close_button").hide(), n("#hr").val("00"), n("#min").val("00")) : (n("#specific-time-without-repeat").hide(), 
            n("#repeat-time-option").show(), Z = [], y());
        }
        function y() {
            var e = {
                index: Z.length,
                close: "enabled",
                hours: "00",
                minutes: "00",
                days_value: "1",
                days_text: "Monday",
                date_to_parse: new Date(x),
                date: S().format("YYYY-MM-DD")
            };
            44640 === K.repeat.index && (e.days_text = "1st"), Y(), Z.push(e), 1 === Z.length ? Z[0].close = "disabled" : Z[0].close = "enabled", 
            L(), Q && D();
        }
        function L() {
            if (n("#repeat-time").html(b.render(K.repeat.render, {
                repeat: Z
            })), 525600 === K.repeat.index) for (var e = new Date(x), t = new Date(e.getFullYear(), e.getMonth(), e.getDate(), 0, 0, 0, 0), a = 0; a < Z.length; a++) n("[data-index='" + a + "'][data-content='datepicker']").datepicker({
                autoclose: !0,
                todayHighlight: !0,
                format: "yyyy-mm-dd",
                orientation: "top auto",
                container: "#timer-dialog",
                startDate: t
            });
        }
        function Y() {
            var e = 0;
            if (60 === K.repeat.index) for (;e < Z.length; e++) Z[e].minutes = n("[data-index='" + e + "'][data-content='minutes']").val().trim(); else if (1440 === K.repeat.index) for (;e < Z.length; e++) Z[e].minutes = n("[data-index='" + e + "'][data-content='minutes']").val().trim(), 
            Z[e].hours = n("[data-index='" + e + "'][data-content='hours']").val().trim(); else if (10080 === K.repeat.index) for (;e < Z.length; e++) Z[e].minutes = n("[data-index='" + e + "'][data-content='minutes']").val().trim(), 
            Z[e].hours = n("[data-index='" + e + "'][data-content='hours']").val().trim(), Z[e].days_text = n("span", n("[data-content='week-days'][data-index='" + e + "']")).first().text(), 
            Z[e].days_value = n("span", n("[data-content='week-days'][data-index='" + e + "']")).first().attr("value"); else if (44640 === K.repeat.index) for (;e < Z.length; e++) Z[e].minutes = n("[data-index='" + e + "'][data-content='minutes']").val().trim(), 
            Z[e].hours = n("[data-index='" + e + "'][data-content='hours']").val().trim(), Z[e].days_text = n("span", n("[data-content='month-days'][data-index='" + e + "']")).first().text(), 
            Z[e].days_value = n("span", n("[data-content='month-days'][data-index='" + e + "']")).first().attr("value"); else if (525600 === K.repeat.index) for (;e < Z.length; e++) Z[e].minutes = n("[data-index='" + e + "'][data-content='minutes']").val().trim(), 
            Z[e].hours = n("[data-index='" + e + "'][data-content='hours']").val().trim(), Z[e].date_to_parse = new Date(n("[data-index='" + e + "'] .bootstrap-datepicker").val()), 
            Z[e].date = S(Z[e].date_to_parse).format("YYYY-MM-DD");
        }
        function k(e) {
            1 == e ? (n("#boot").show(), n("#boot-error-row").hide(), n("#specific-time-without-repeat").hide(), 
            n("#specific-time-error-row").hide(), n("#repeat-options").hide(), n("#repeat-time-option").hide(), 
            n("#boot-time").val("00"), n("#boot-time").removeClass("has-error"), K.Calendar_or_Boot = "Boot") : 2 == e && (n("#boot").hide(), 
            n("#boot-error-row").hide(), n("#specific-time-error-row").hide(), n("#repeat-options").show(), 
            p(0), n("span", n("#drop-repeat")).first().text(j("Don't Repeat")), K.Calendar_or_Boot = "Calendar");
        }
        function g(e) {
            switch (e = Number(e)) {
              case 1:
                K.boot_time_unit = "sec";
                break;

              case 60:
                K.boot_time_unit = "min";
                break;

              case 3600:
                K.boot_time_unit = "hr";
                break;

              case 604800:
                K.boot_time_unit = "weeks";
            }
        }
        function D() {
            Q = !1;
            var e = n("#servicename").val();
            if (e.trim().length < 1 ? (n("#servicename-error").text(j("This field cannot be empty.")), 
            n("#servicename-error-row").show(), n("#servicename").addClass("has-error"), Q = !0) : /^[a-zA-Z0-9:_.@-]+$/.test(e) || (n("#servicename-error").text(j("Only alphabets, numbers, : , _ , . , @ , - are allowed.")), 
            n("#servicename-error-row").show(), n("#servicename").addClass("has-error"), Q = !0), 
            e = n("#description").val().trim(), e.length < 1 && (n("#description-error").text(j("This field cannot be empty.")), 
            n("#description-error-row").show(), n("#description").addClass("has-error"), Q = !0), 
            e = n("#command").val().trim(), e.length < 1 && (n("#command-error").text(j("This field cannot be empty.")), 
            n("#command-error-row").show(), n("#command").addClass("has-error"), Q = !0), "Boot" == K.Calendar_or_Boot) e = n("#boot-time").val(), 
            /^[0-9]+$/.test(e.trim()) || (n("#boot-error").text(j("Invalid number.")), n("#boot-error-row").show(), 
            n("#boot-time").addClass("has-error"), Q = !0); else {
                var t = 0;
                if (0 === K.repeat.index) {
                    var a = n("#hr").val().trim(), s = n("#min").val().trim();
                    n("#hr-error").text(""), n("#min-error").text(""), /^[0-9]+$/.test(a) && a <= 23 && a >= 0 || (n("#hr-error").text(j("Hour needs to be a number between 0-23")), 
                    n("#specific-time-error-row").show(), n("#hr").addClass("has-error"), Q = !0), /^[0-9]+$/.test(s) && s <= 59 && s >= 0 || (n("#min-error").text(j("Minute needs to be a number between 0-59")), 
                    n("#specific-time-error-row").show(), n("#min").addClass("has-error"), Q = !0);
                } else if (60 === K.repeat.index) for (;t < Z.length; t++) /^[0-9]+$/.test(Z[t].minutes.trim()) && Z[t].minutes.trim() <= 59 && Z[t].minutes.trim() >= 0 || (n("[data-index='" + t + "'][data-content='minutes']").addClass("has-error"), 
                n("[data-index='" + t + "'][data-content='min-error']").text(j("Minute needs to be a number between 0-59")), 
                Q = !0); else for (;t < Z.length; t++) /^[0-9]+$/.test(Z[t].minutes.trim()) && Z[t].minutes.trim() <= 59 && Z[t].minutes.trim() >= 0 || (Q = !0, 
                n("[data-index='" + t + "'][data-content='minutes']").addClass("has-error"), n("[data-index='" + t + "'][data-content='min-error']").text(j("Minute needs to be a number between 0-59"))), 
                /^[0-9]+$/.test(Z[t].hours.trim()) && Z[t].hours.trim() <= 23 && Z[t].hours.trim() >= 0 || (Q = !0, 
                n("[data-index='" + t + "'][data-content='hours']").addClass("has-error"), n("[data-index='" + t + "'][data-content='hr-error']").text(j("Hour needs to be a number between 0-23"))), 
                525600 === K.repeat.index && (isNaN(Z[t].date_to_parse.getTime()) || Z[t].date_to_parse.getTime() < 0) && (Q = !0, 
                n("[data-index='" + t + "'][data-content='datepicker']").addClass("has-error"), 
                n("[data-index='" + t + "'][data-content='date-error']").text(j("Invalid date format."))), 
                44640 === K.repeat.index && "31" === Z[t].days_value && n("[data-index='" + t + "'][data-content='day-error']").html(j("This day doesn't exist in all months.<br> The timer will only be executed in months that have 31st."));
            }
            return Q;
        }
        function v() {
            Y();
            var e = D();
            if (e) return !1;
            if (K.name = n("#servicename").val().replace(/\s/g, ""), K.Description = n("#description").val(), 
            K.Command = n("#command").val(), K.boot_time = n("#boot-time").val(), 0 === K.repeat.index) {
                K.repeat_hour = Number(n("#hr").val().trim()), K.repeat_minute = Number(n("#min").val().trim());
                var t = new Date(x);
                K.OnCalendar = "OnCalendar=" + t.getFullYear() + "-" + (t.getMonth() + 1) + "-" + t.getDate() + " " + K.repeat_hour + ":" + K.repeat_minute + ":00";
            } else 60 === K.repeat.index ? (K.repeat_minute = Z.map(function(e) {
                return Number(e.minutes);
            }), K.OnCalendar = "OnCalendar=*-*-* *:" + K.repeat_minute + ":00") : 1440 === K.repeat.index ? K.OnCalendar = Z.map(function(e) {
                return "OnCalendar=*-*-* " + Number(e.hours) + ":" + Number(e.minutes) + ":00";
            }) : 10080 === K.repeat.index ? K.OnCalendar = Z.map(function(e) {
                return "OnCalendar=" + e.days_text.slice(0, 3) + " *-*-* " + Number(e.hours) + ":" + Number(e.minutes) + ":00";
            }) : 44640 === K.repeat.index ? K.OnCalendar = Z.map(function(e) {
                return "OnCalendar=*-*-" + e.days_value + " " + Number(e.hours) + ":" + Number(e.minutes) + ":00";
            }) : 525600 === K.repeat.index && (K.OnCalendar = Z.map(function(e) {
                return "OnCalendar=*-" + S(e.date_to_parse).format("MM") + "-" + S(e.date_to_parse).format("DD") + " " + Number(e.hours) + ":" + Number(e.minutes) + ":00";
            }));
            60 !== K.repeat.index && (K.OnCalendar = K.OnCalendar.toString().replace(/,/g, "\n"));
            var a = w();
            return !a && (i(), !0);
        }
        function w() {
            var e = "[Unit]\nDescription=", t = "\n[Service]\nExecStart=", a = "\n[Timer]\n", n = "[Install]\nWantedBy=timers.target\n", s = e + K.Description + t + K.Command + "\n", i = " ";
            if ("Boot" == K.Calendar_or_Boot) {
                var r = a + "OnBootSec=" + K.boot_time + K.boot_time_unit + "\n";
                i = e + K.Description + r;
            } else if ("Calendar" == K.Calendar_or_Boot) {
                var d = a + K.OnCalendar + "\n";
                i = e + K.Description + d;
            }
            i += n;
            var o = "/etc/systemd/system/" + K.name + ".service", _ = T.file(o, {
                superuser: "try"
            });
            _.replace(s).fail(function(e) {
                console.log(e);
            });
            var u = "/etc/systemd/system/" + K.name + ".timer";
            _ = T.file(u, {
                superuser: "try"
            }), _.replace(i).done(function(e) {
                z.Reload().done(function(e) {
                    z.EnableUnitFiles([ K.name + ".timer" ], !1, !1).fail(function(e) {
                        console.warn("Failed to enable timer unit:", e);
                    }), "Calendar" == K.Calendar_or_Boot && z.StartUnit(K.name + ".timer", "replace").fail(function(e) {
                        console.warn("Failed to start timer unit:", e);
                    });
                }).fail(function(e) {
                    console.warn("Failed to reload systemd:", e);
                });
            }).fail(function(e) {
                console.log(e);
            });
        }
        var T = a(2), b = a(150), S = a(3), H = a(149);
        a(156), a(157), T.translate();
        var j = T.gettext;
        S.locale(T.language);
        var x, O, P, W, E, F, A, C, U = T.dbus("org.freedesktop.systemd1", {
            superuser: "try"
        }), z = U.proxy("org.freedesktop.systemd1.Manager", "/org/freedesktop/systemd1"), N = !1, J = n("#action-btn-tmpl").html();
        b.parse(J);
        var I = n("#service-unit-tmpl").html();
        b.parse(I);
        var R = n("#service-template-tmpl").html();
        b.parse(R);
        var V = [ {
            title: j("Start"),
            action: "StartUnit"
        }, {
            title: j("Stop"),
            action: "StopUnit"
        } ], G = [ {
            title: j("Restart"),
            action: "RestartUnit"
        }, {
            title: j("Reload"),
            action: "ReloadUnit"
        } ], B = T.permission({
            admin: !0
        });
        n(B).on("changed", o);
        var $ = [ {
            title: j("Enable"),
            action: "EnableUnitFiles:false"
        }, {
            title: j("Enable Forcefully"),
            action: "EnableUnitFiles:true"
        }, {
            title: j("Disable"),
            action: "DisableUnitFiles"
        }, {
            title: j("Preset"),
            action: "PresetUnitFiles:false"
        }, {
            title: j("Preset Forcefully"),
            action: "PresetUnitFiles:true"
        }, {
            title: j("Mask"),
            action: "MaskUnitFiles:false"
        }, {
            title: j("Mask Forcefully"),
            action: "MaskUnitFiles:true"
        }, {
            title: j("Unmask"),
            action: "UnmaskUnitFiles"
        } ];
        n(z).on("Reloading", function(e, t) {
            t || m();
        }), n(z).on("JobNew JobRemoved", function(e, t, a, n, s) {
            P == n && m();
        }), n(z).on("UnitFilesChanged", function(e) {
            c();
        }), n(T).on("locationchanged", h), n("#service-navigate-home").on("click", function() {
            T.location.go("/");
        }), n("body").on("click", "[data-goto-unit]", u), n("#service-template").on("click", "button", function() {
            l(n("#service-template input").val());
        }), n(B).on("changed", function() {
            B.allowed === !1 && (n("#create-timer").addClass("accounts-privileged"), n(".accounts-privileged").update_privileged(B, T.format(j("The user <b>$0</b> does not have permissions for creating timers"), B.user ? B.user.name : ""), "left"));
        }), n("#create-timer").on("click", function() {
            M(), n("#timer-dialog").modal("show"), f();
        }), n("#timer-dialog").on("click", "#timer-save-button", function() {
            var e = v();
            e && n("#timer-dialog").modal("toggle");
        }), f();
        var q = T.dbus("org.freedesktop.timedate1");
        q.subscribe({
            interface: "org.freedesktop.DBus.Properties",
            member: "PropertiesChanged"
        }, f);
        var K = {}, Z = [], Q = !1, X = n("#repeat-hourly-tmpl").html();
        b.parse(X);
        var ee = n("#repeat-daily-tmpl").html();
        b.parse(ee);
        var te = n("#repeat-weekly-tmpl").html();
        b.parse(te);
        var ae = n("#repeat-monthly-tmpl").html();
        b.parse(ae);
        var ne = n("#repeat-yearly-tmpl").html();
        b.parse(ne);
        var se = [ {
            index: 0,
            render: ""
        }, {
            index: 60,
            render: X
        }, {
            index: 1440,
            render: ee
        }, {
            index: 10080,
            render: te
        }, {
            index: 44640,
            render: ae
        }, {
            index: 525600,
            render: ne
        } ];
        n("#timer-dialog").on("keypress", ".form-control", function() {
            n(this).removeClass("has-error"), "hr" == n(this).attr("id") ? n("#hr-error").text("") : "min" == n(this).attr("id") ? n("#min-error").text("") : "hours" == n(this).attr("data-content") ? n(this).siblings("[data-content='hr-error']").text("") : "minutes" == n(this).attr("data-content") ? n(this).siblings("[data-content='min-error']").text("") : n(this).parents("tr").next().hide();
        });
        var ie = 0, re = 0;
        n("#timer-dialog").on("click", "[data-content='datepicker']", function() {
            ie = n("#timer-dialog").scrollTop(), n(this).removeClass("has-error"), n("[data-index='" + n(this).attr("data-index") + "'][data-content='date-error']").text(""), 
            n(".datepicker-dropdown").css("margin-top", n("#timer-dialog").scrollTop()), n(".datepicker-dropdown").css("visibility", "visible"), 
            n(".datepicker-dropdown .next").show(), n(".datepicker-dropdown .prev").show();
        }), n("#timer-dialog").on("click", ".datepicker.datepicker-dropdown.dropdown-menu", function() {
            re > ie ? n(".datepicker.datepicker-dropdown.dropdown-menu").css("margin-top", re) : n(".datepicker.datepicker-dropdown.dropdown-menu").css("margin-top", ie);
        }), n("#timer-dialog").on("mouseenter", ".datepicker.datepicker-dropdown [class*='datepicker-'] thead", function() {
            re = n("#timer-dialog").scrollTop();
        }), n(".form-table-ct").on("click", "[value]", ".btn-group.bootstrap-select.dropdown.form-control", function(e) {
            var t = n(this).closest(".btn-group.bootstrap-select.dropdown.form-control");
            switch (n("span", t).first().text(e.target.text), n("span", t).first().attr("value", e.currentTarget.value), 
            t.attr("id")) {
              case "boot-or-specific-time":
                k(Number(e.currentTarget.value));
                break;

              case "drop-time":
                g(Number(e.currentTarget.value));
                break;

              case "drop-repeat":
                p(Number(e.currentTarget.value));
            }
        }), n("#repeat-time-option").on("click", ".btn.btn-default.dropdown-toggle.fa.fa-plus", y), 
        n(".form-table-ct").on("click", ".btn.btn-default.dropdown-toggle.pficon-close", function() {
            Y(), Z.splice(n(this).attr("data-index"), 1);
            for (var e = 0; e < Z.length; e++) Z[e].index = e;
            1 === Z.length ? Z[0].close = "disabled" : Z[0].close = "enabled", L(), Q && D();
        }), z.wait(function() {
            z.Subscribe().fail(function(e) {
                "org.freedesktop.systemd1.AlreadySubscribed" != e.name && "org.freedesktop.DBus.Error.FileExists" != e.name && console.warn("Subscribing to systemd signals failed", e);
            }), h();
        });
    });
}, function(e, t, a) {
    "use strict";
    !function() {
        function e() {
            return L += 1, "unique" + -new Date() + -L;
        }
        function t(e) {
            e.find(".dialog-error").remove(), e.find(".has-error").removeClass("has-error"), 
            e.find(".dialog-wrapper").off(".dialog-error"), e.off(".dialog-error");
        }
        function n(e, t) {
            var a, n, s = e.parent();
            s.is(".dialog-wrapper") || (s = p("<div class='dialog-wrapper'>").insertBefore(e), 
            a = e.next(), a.is(".bootstrap-select") && a.selectpicker && (a.remove(), n = a.selectpicker), 
            e.remove().appendTo(s), n && n.call(e));
            var i;
            t.message && (i = p("<div class='dialog-error help-block'>").text(t.message)), s.addClass("has-error").append(i), 
            s.hasClass("error-keep") || s.on("keypress.dialog-error change.dialog-error", function() {
                s.removeClass("has-error").find(".dialog-error.help-block").css("visibility", "hidden");
            });
        }
        function s(e, t) {
            var a = p("<div class='alert alert-danger dialog-error'>"), n = t.message || t.toString();
            a.text(n), p("<span class='fa fa-exclamation-triangle'>").prependTo(a), console.warn(n);
            var s = e.find(".modal-footer");
            s.length ? a.prependTo(s) : a.appendTo(e);
        }
        function i(e, a) {
            t(e), 1 == a.length && p.isArray(a[0]) && (a = a[0]);
            var i = !1;
            a.forEach(function(t) {
                var a;
                t && (a = e.find(t.target), a && a.length ? n(a, t) : s(e, t), i = !0);
            }), i && e.on("show.bs.modal.dialog-error", function() {
                t(e);
            });
        }
        function r(e, t) {
            this.promise = e, this.disabled = [], this.handle = t;
        }
        function d(e) {
            var t = e.data("dialog-wait");
            e.data("dialog-wait", null), e.find(".dialog-wait-ct").remove(), e.find(".btn").off(".dialog-wait"), 
            e.off(".dialog-wait"), t && t.disabled.forEach(function(e) {
                e.removeAttr("disabled");
            });
        }
        function o(e, t, a) {
            function n() {
                var a, n = e.data("dialog-wait");
                n && n.promise === t && (d(e), a = t.state(), m || "resolved" == a && n.handle ? e.modal("hide") : "rejected" == a && n.handle && i(e, [ arguments[0] ]));
            }
            function s(a) {
                var n = e.data("dialog-wait");
                n && n.promise === t && ("string" != typeof a && (a = ""), _.text(a));
            }
            if (d(e), !t) return a && e.modal("hide"), e;
            a && i(e, []);
            var o = p("<div class='dialog-wait-ct pull-left'>");
            p("<div class='spinner spinner-sm'>").appendTo(o);
            var _ = p("<span>").appendTo(o);
            e.find(".modal-footer button").first().before(o);
            var u = new r(t, a);
            e.data("dialog-wait", u);
            var l = t.cancel || t.close, m = !1, c = e.find(".form-control").add(".btn", e);
            return l && (c = c.not("[data-dismiss]").not(".btn-cancel")), c.each(function() {
                var e = p(this);
                e.attr("disabled") || (u.disabled.push(e), e.attr("disabled", "disabled"));
            }), e.find(".btn[data-dismiss], .btn-cancel").on("click.dialog-wait", function() {
                return m = !0, l && l.apply(t), !1;
            }), e.on("hide.bs.modal.dialog-wait", function() {
                d(e);
            }), t.always(n).progress(s), e;
        }
        function _(t) {
            var a = y.gettext || function(e) {
                return e;
            };
            return t = t.find(".btn-onoff-ct").addBack().filter(".btn-onoff-ct"), t.each(function(t, n) {
                var s, i, r, d = p(n).attr("data-toggle", "buttons").addClass("btn-group"), o = d.onoff("value"), _ = d.find(".btn"), u = d.find("input").first().attr("name") || e();
                for (s = _.length; s < 2; s++) i = p('<input type="radio" autocomplete="off">'), 
                r = document.createTextNode(a(0 === s ? "On" : "Off")), d.append(p('<label class="btn">').append(i, r)), 
                _ = null;
                _ = _ || d.find(".btn"), _.find("input").attr("name", u), l(d, !!o);
            }), t;
        }
        function u(e) {
            return e.find(".btn").first().hasClass("active");
        }
        function l(e, t) {
            return e.each(function(e, a) {
                var n = p(a).find(".btn");
                n.first().toggleClass("active", !!t).find("input").prop("checked", !!t), n.last().toggleClass("active", !t).find("input").prop("checked", !t);
            });
        }
        function m(e, t, a, n) {
            var s = 0;
            n > a ? s = 1 : n < 0 || isNaN(n) ? s = 0 : !isNaN(a) && a > 0 && n >= 0 && (s = n / a), 
            p(t).css("width", 100 * s + "%").next("div").css("margin-left", p(t).css("width")), 
            e.value = s;
        }
        function c(e) {
            m(e, p(e).children("div.slider-bar").first()[0], 1, e.value);
        }
        function h(e) {
            p(e).toggleClass("slider-warning", e.offsetWidth < e.scrollWidth);
        }
        function f(e) {
            p(e).attr("unselectable", "on"), Object.defineProperty(e, "value", {
                get: function() {
                    return parseFloat(this.getAttribute("value"));
                },
                set: function(t) {
                    var a = String(t);
                    a != this.getAttribute("value") && (this.setAttribute("value", t), c(e), h(e));
                }
            }), Object.defineProperty(e, "disabled", {
                get: function() {
                    return !!this.hasAttribute("disabled") && "false" != this.getAttribute("disabled").toLowerCase();
                },
                set: function(e) {
                    this.setAttribute("disabled", e ? "true" : "false");
                }
            }), c(e), h(e), p(e).on("change", function() {
                c(e), p(e).toggleClass("slider-disabled", e.disabled);
            }), e.disabled && p(e).addClass("slider-disabled"), p(e).on("mousedown", function(t) {
                if (e.disabled) return !0;
                var a, n = p(e).offset().left;
                if (p(t.target).hasClass("slider-thumb")) {
                    var s = t.offsetX || t.clientX - p(t.target).offset().left;
                    n += s - p(t.target).outerWidth() / 2, a = p(t.target).parent()[0];
                } else a = p(e).children("div.slider-bar").first()[0], m(e, a, p(e).width(), t.pageX - n), 
                p(e).trigger("change", [ e.value ]), h(e);
                return p(document).on("mousemove.slider", function(t) {
                    return m(e, a, p(e).width(), t.pageX - n), p(e).trigger("change", [ e.value ]), 
                    h(e), !1;
                }).on("mouseup.slider", function(e) {
                    return p(document).off("mousemove.slider").off("mouseup.slider"), !1;
                }), !1;
            });
        }
        function M() {
            p("div.slider").each(function() {
                f(this);
            });
        }
        var p = a(148), y = a(2), L = 0;
        p.fn.dialog = function(e) {
            return "failure" === e ? i(this, Array.prototype.slice.call(arguments, 1)) : "wait" === e ? o(this, arguments[1]) : "promise" === e ? o(this, arguments[1], !0) : void console.warn("unknown dialog action: " + e);
        }, window.addEventListener("hashchange", function() {
            p(".modal").modal("hide");
        }), p.fn.onoff = function(e) {
            return 0 === arguments.length || "refresh" == e ? _(this) : "value" === e ? 1 === arguments.length ? u(this) : l(this, arguments[1]) : "disabled" == e ? this.find(".btn").toggleClass("disabled", arguments[1]) : void console.warn("unknown switch action: " + e);
        }, p.fn.slider = function(e) {
            var t = this;
            return 0 === arguments.length || "refresh" == e ? (t.each(function() {
                f(this);
            }), t) : void console.warn("unknown slider action: " + e);
        }, p(document).ready(M), p.fn.update_privileged = function(e, t, a, n) {
            var s = e.allowed !== !1, i = this;
            return n || (n = p(this)), i.each(function() {
                var e = "allowed-title";
                "undefined" != typeof p(this).data(e) && p(this).data(e) !== !1 || p(this).data(e, p(this).attr("title") || "");
                var i = {
                    html: !0
                };
                a && (i.placement = a), n.tooltip(i), p(this).hasClass("disabled") === s && (p(this).toggleClass("disabled", !s), 
                n.attr("data-original-title", null), s ? n.attr("title", p(this).data(e)) : n.attr("title", t), 
                n.tooltip("fixTitle")), p(this).attr("data-stable", "yes");
            }), i;
        };
    }();
}, function(e, t, a) {
    var n, s, i;
    /*!
	 * Datepicker for Bootstrap v1.8.0 (https://github.com/uxsolutions/bootstrap-datepicker)
	 *
	 * Licensed under the Apache License v2.0 (http://www.apache.org/licenses/LICENSE-2.0)
	 */
    !function(r) {
        s = [ a(148) ], n = r, i = "function" == typeof n ? n.apply(t, s) : n, !(void 0 !== i && (e.exports = i));
    }(function(e, t) {
        function a() {
            return new Date(Date.UTC.apply(Date, arguments));
        }
        function n() {
            var e = new Date();
            return a(e.getFullYear(), e.getMonth(), e.getDate());
        }
        function s(e, t) {
            return e.getUTCFullYear() === t.getUTCFullYear() && e.getUTCMonth() === t.getUTCMonth() && e.getUTCDate() === t.getUTCDate();
        }
        function i(a, n) {
            return function() {
                return n !== t && e.fn.datepicker.deprecated(n), this[a].apply(this, arguments);
            };
        }
        function r(e) {
            return e && !isNaN(e.getTime());
        }
        function d(t, a) {
            function n(e, t) {
                return t.toLowerCase();
            }
            var s, i = e(t).data(), r = {}, d = new RegExp("^" + a.toLowerCase() + "([A-Z])");
            a = new RegExp("^" + a.toLowerCase());
            for (var o in i) a.test(o) && (s = o.replace(d, n), r[s] = i[o]);
            return r;
        }
        function o(t) {
            var a = {};
            if (M[t] || (t = t.split("-")[0], M[t])) {
                var n = M[t];
                return e.each(f, function(e, t) {
                    t in n && (a[t] = n[t]);
                }), a;
            }
        }
        var _ = function() {
            var t = {
                get: function(e) {
                    return this.slice(e)[0];
                },
                contains: function(e) {
                    for (var t = e && e.valueOf(), a = 0, n = this.length; a < n; a++) if (0 <= this[a].valueOf() - t && this[a].valueOf() - t < 864e5) return a;
                    return -1;
                },
                remove: function(e) {
                    this.splice(e, 1);
                },
                replace: function(t) {
                    t && (e.isArray(t) || (t = [ t ]), this.clear(), this.push.apply(this, t));
                },
                clear: function() {
                    this.length = 0;
                },
                copy: function() {
                    var e = new _();
                    return e.replace(this), e;
                }
            };
            return function() {
                var a = [];
                return a.push.apply(a, arguments), e.extend(a, t), a;
            };
        }(), u = function(t, a) {
            e.data(t, "datepicker", this), this._process_options(a), this.dates = new _(), this.viewDate = this.o.defaultViewDate, 
            this.focusDate = null, this.element = e(t), this.isInput = this.element.is("input"), 
            this.inputField = this.isInput ? this.element : this.element.find("input"), this.component = !!this.element.hasClass("date") && this.element.find(".add-on, .input-group-addon, .btn"), 
            this.component && 0 === this.component.length && (this.component = !1), this.isInline = !this.component && this.element.is("div"), 
            this.picker = e(p.template), this._check_template(this.o.templates.leftArrow) && this.picker.find(".prev").html(this.o.templates.leftArrow), 
            this._check_template(this.o.templates.rightArrow) && this.picker.find(".next").html(this.o.templates.rightArrow), 
            this._buildEvents(), this._attachEvents(), this.isInline ? this.picker.addClass("datepicker-inline").appendTo(this.element) : this.picker.addClass("datepicker-dropdown dropdown-menu"), 
            this.o.rtl && this.picker.addClass("datepicker-rtl"), this.o.calendarWeeks && this.picker.find(".datepicker-days .datepicker-switch, thead .datepicker-title, tfoot .today, tfoot .clear").attr("colspan", function(e, t) {
                return Number(t) + 1;
            }), this._process_options({
                startDate: this._o.startDate,
                endDate: this._o.endDate,
                daysOfWeekDisabled: this.o.daysOfWeekDisabled,
                daysOfWeekHighlighted: this.o.daysOfWeekHighlighted,
                datesDisabled: this.o.datesDisabled
            }), this._allow_update = !1, this.setViewMode(this.o.startView), this._allow_update = !0, 
            this.fillDow(), this.fillMonths(), this.update(), this.isInline && this.show();
        };
        u.prototype = {
            constructor: u,
            _resolveViewName: function(t) {
                return e.each(p.viewModes, function(a, n) {
                    if (t === a || e.inArray(t, n.names) !== -1) return t = a, !1;
                }), t;
            },
            _resolveDaysOfWeek: function(t) {
                return e.isArray(t) || (t = t.split(/[,\s]*/)), e.map(t, Number);
            },
            _check_template: function(a) {
                try {
                    if (a === t || "" === a) return !1;
                    if ((a.match(/[<>]/g) || []).length <= 0) return !0;
                    var n = e(a);
                    return n.length > 0;
                } catch (e) {
                    return !1;
                }
            },
            _process_options: function(t) {
                this._o = e.extend({}, this._o, t);
                var s = this.o = e.extend({}, this._o), i = s.language;
                M[i] || (i = i.split("-")[0], M[i] || (i = h.language)), s.language = i, s.startView = this._resolveViewName(s.startView), 
                s.minViewMode = this._resolveViewName(s.minViewMode), s.maxViewMode = this._resolveViewName(s.maxViewMode), 
                s.startView = Math.max(this.o.minViewMode, Math.min(this.o.maxViewMode, s.startView)), 
                s.multidate !== !0 && (s.multidate = Number(s.multidate) || !1, s.multidate !== !1 && (s.multidate = Math.max(0, s.multidate))), 
                s.multidateSeparator = String(s.multidateSeparator), s.weekStart %= 7, s.weekEnd = (s.weekStart + 6) % 7;
                var r = p.parseFormat(s.format);
                s.startDate !== -(1 / 0) && (s.startDate ? s.startDate instanceof Date ? s.startDate = this._local_to_utc(this._zero_time(s.startDate)) : s.startDate = p.parseDate(s.startDate, r, s.language, s.assumeNearbyYear) : s.startDate = -(1 / 0)), 
                s.endDate !== 1 / 0 && (s.endDate ? s.endDate instanceof Date ? s.endDate = this._local_to_utc(this._zero_time(s.endDate)) : s.endDate = p.parseDate(s.endDate, r, s.language, s.assumeNearbyYear) : s.endDate = 1 / 0), 
                s.daysOfWeekDisabled = this._resolveDaysOfWeek(s.daysOfWeekDisabled || []), s.daysOfWeekHighlighted = this._resolveDaysOfWeek(s.daysOfWeekHighlighted || []), 
                s.datesDisabled = s.datesDisabled || [], e.isArray(s.datesDisabled) || (s.datesDisabled = s.datesDisabled.split(",")), 
                s.datesDisabled = e.map(s.datesDisabled, function(e) {
                    return p.parseDate(e, r, s.language, s.assumeNearbyYear);
                });
                var d = String(s.orientation).toLowerCase().split(/\s+/g), o = s.orientation.toLowerCase();
                if (d = e.grep(d, function(e) {
                    return /^auto|left|right|top|bottom$/.test(e);
                }), s.orientation = {
                    x: "auto",
                    y: "auto"
                }, o && "auto" !== o) if (1 === d.length) switch (d[0]) {
                  case "top":
                  case "bottom":
                    s.orientation.y = d[0];
                    break;

                  case "left":
                  case "right":
                    s.orientation.x = d[0];
                } else o = e.grep(d, function(e) {
                    return /^left|right$/.test(e);
                }), s.orientation.x = o[0] || "auto", o = e.grep(d, function(e) {
                    return /^top|bottom$/.test(e);
                }), s.orientation.y = o[0] || "auto"; else ;
                if (s.defaultViewDate instanceof Date || "string" == typeof s.defaultViewDate) s.defaultViewDate = p.parseDate(s.defaultViewDate, r, s.language, s.assumeNearbyYear); else if (s.defaultViewDate) {
                    var _ = s.defaultViewDate.year || new Date().getFullYear(), u = s.defaultViewDate.month || 0, l = s.defaultViewDate.day || 1;
                    s.defaultViewDate = a(_, u, l);
                } else s.defaultViewDate = n();
            },
            _events: [],
            _secondaryEvents: [],
            _applyEvents: function(e) {
                for (var a, n, s, i = 0; i < e.length; i++) a = e[i][0], 2 === e[i].length ? (n = t, 
                s = e[i][1]) : 3 === e[i].length && (n = e[i][1], s = e[i][2]), a.on(s, n);
            },
            _unapplyEvents: function(e) {
                for (var a, n, s, i = 0; i < e.length; i++) a = e[i][0], 2 === e[i].length ? (s = t, 
                n = e[i][1]) : 3 === e[i].length && (s = e[i][1], n = e[i][2]), a.off(n, s);
            },
            _buildEvents: function() {
                var t = {
                    keyup: e.proxy(function(t) {
                        e.inArray(t.keyCode, [ 27, 37, 39, 38, 40, 32, 13, 9 ]) === -1 && this.update();
                    }, this),
                    keydown: e.proxy(this.keydown, this),
                    paste: e.proxy(this.paste, this)
                };
                this.o.showOnFocus === !0 && (t.focus = e.proxy(this.show, this)), this.isInput ? this._events = [ [ this.element, t ] ] : this.component && this.inputField.length ? this._events = [ [ this.inputField, t ], [ this.component, {
                    click: e.proxy(this.show, this)
                } ] ] : this._events = [ [ this.element, {
                    click: e.proxy(this.show, this),
                    keydown: e.proxy(this.keydown, this)
                } ] ], this._events.push([ this.element, "*", {
                    blur: e.proxy(function(e) {
                        this._focused_from = e.target;
                    }, this)
                } ], [ this.element, {
                    blur: e.proxy(function(e) {
                        this._focused_from = e.target;
                    }, this)
                } ]), this.o.immediateUpdates && this._events.push([ this.element, {
                    "changeYear changeMonth": e.proxy(function(e) {
                        this.update(e.date);
                    }, this)
                } ]), this._secondaryEvents = [ [ this.picker, {
                    click: e.proxy(this.click, this)
                } ], [ this.picker, ".prev, .next", {
                    click: e.proxy(this.navArrowsClick, this)
                } ], [ this.picker, ".day:not(.disabled)", {
                    click: e.proxy(this.dayCellClick, this)
                } ], [ e(window), {
                    resize: e.proxy(this.place, this)
                } ], [ e(document), {
                    "mousedown touchstart": e.proxy(function(e) {
                        this.element.is(e.target) || this.element.find(e.target).length || this.picker.is(e.target) || this.picker.find(e.target).length || this.isInline || this.hide();
                    }, this)
                } ] ];
            },
            _attachEvents: function() {
                this._detachEvents(), this._applyEvents(this._events);
            },
            _detachEvents: function() {
                this._unapplyEvents(this._events);
            },
            _attachSecondaryEvents: function() {
                this._detachSecondaryEvents(), this._applyEvents(this._secondaryEvents);
            },
            _detachSecondaryEvents: function() {
                this._unapplyEvents(this._secondaryEvents);
            },
            _trigger: function(t, a) {
                var n = a || this.dates.get(-1), s = this._utc_to_local(n);
                this.element.trigger({
                    type: t,
                    date: s,
                    viewMode: this.viewMode,
                    dates: e.map(this.dates, this._utc_to_local),
                    format: e.proxy(function(e, t) {
                        0 === arguments.length ? (e = this.dates.length - 1, t = this.o.format) : "string" == typeof e && (t = e, 
                        e = this.dates.length - 1), t = t || this.o.format;
                        var a = this.dates.get(e);
                        return p.formatDate(a, t, this.o.language);
                    }, this)
                });
            },
            show: function() {
                if (!(this.inputField.prop("disabled") || this.inputField.prop("readonly") && this.o.enableOnReadonly === !1)) return this.isInline || this.picker.appendTo(this.o.container), 
                this.place(), this.picker.show(), this._attachSecondaryEvents(), this._trigger("show"), 
                (window.navigator.msMaxTouchPoints || "ontouchstart" in document) && this.o.disableTouchKeyboard && e(this.element).blur(), 
                this;
            },
            hide: function() {
                return this.isInline || !this.picker.is(":visible") ? this : (this.focusDate = null, 
                this.picker.hide().detach(), this._detachSecondaryEvents(), this.setViewMode(this.o.startView), 
                this.o.forceParse && this.inputField.val() && this.setValue(), this._trigger("hide"), 
                this);
            },
            destroy: function() {
                return this.hide(), this._detachEvents(), this._detachSecondaryEvents(), this.picker.remove(), 
                delete this.element.data().datepicker, this.isInput || delete this.element.data().date, 
                this;
            },
            paste: function(t) {
                var a;
                if (t.originalEvent.clipboardData && t.originalEvent.clipboardData.types && e.inArray("text/plain", t.originalEvent.clipboardData.types) !== -1) a = t.originalEvent.clipboardData.getData("text/plain"); else {
                    if (!window.clipboardData) return;
                    a = window.clipboardData.getData("Text");
                }
                this.setDate(a), this.update(), t.preventDefault();
            },
            _utc_to_local: function(e) {
                if (!e) return e;
                var t = new Date(e.getTime() + 6e4 * e.getTimezoneOffset());
                return t.getTimezoneOffset() !== e.getTimezoneOffset() && (t = new Date(e.getTime() + 6e4 * t.getTimezoneOffset())), 
                t;
            },
            _local_to_utc: function(e) {
                return e && new Date(e.getTime() - 6e4 * e.getTimezoneOffset());
            },
            _zero_time: function(e) {
                return e && new Date(e.getFullYear(), e.getMonth(), e.getDate());
            },
            _zero_utc_time: function(e) {
                return e && a(e.getUTCFullYear(), e.getUTCMonth(), e.getUTCDate());
            },
            getDates: function() {
                return e.map(this.dates, this._utc_to_local);
            },
            getUTCDates: function() {
                return e.map(this.dates, function(e) {
                    return new Date(e);
                });
            },
            getDate: function() {
                return this._utc_to_local(this.getUTCDate());
            },
            getUTCDate: function() {
                var e = this.dates.get(-1);
                return e !== t ? new Date(e) : null;
            },
            clearDates: function() {
                this.inputField.val(""), this.update(), this._trigger("changeDate"), this.o.autoclose && this.hide();
            },
            setDates: function() {
                var t = e.isArray(arguments[0]) ? arguments[0] : arguments;
                return this.update.apply(this, t), this._trigger("changeDate"), this.setValue(), 
                this;
            },
            setUTCDates: function() {
                var t = e.isArray(arguments[0]) ? arguments[0] : arguments;
                return this.setDates.apply(this, e.map(t, this._utc_to_local)), this;
            },
            setDate: i("setDates"),
            setUTCDate: i("setUTCDates"),
            remove: i("destroy", "Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead"),
            setValue: function() {
                var e = this.getFormattedDate();
                return this.inputField.val(e), this;
            },
            getFormattedDate: function(a) {
                a === t && (a = this.o.format);
                var n = this.o.language;
                return e.map(this.dates, function(e) {
                    return p.formatDate(e, a, n);
                }).join(this.o.multidateSeparator);
            },
            getStartDate: function() {
                return this.o.startDate;
            },
            setStartDate: function(e) {
                return this._process_options({
                    startDate: e
                }), this.update(), this.updateNavArrows(), this;
            },
            getEndDate: function() {
                return this.o.endDate;
            },
            setEndDate: function(e) {
                return this._process_options({
                    endDate: e
                }), this.update(), this.updateNavArrows(), this;
            },
            setDaysOfWeekDisabled: function(e) {
                return this._process_options({
                    daysOfWeekDisabled: e
                }), this.update(), this;
            },
            setDaysOfWeekHighlighted: function(e) {
                return this._process_options({
                    daysOfWeekHighlighted: e
                }), this.update(), this;
            },
            setDatesDisabled: function(e) {
                return this._process_options({
                    datesDisabled: e
                }), this.update(), this;
            },
            place: function() {
                if (this.isInline) return this;
                var t = this.picker.outerWidth(), a = this.picker.outerHeight(), n = 10, s = e(this.o.container), i = s.width(), r = "body" === this.o.container ? e(document).scrollTop() : s.scrollTop(), d = s.offset(), o = [ 0 ];
                this.element.parents().each(function() {
                    var t = e(this).css("z-index");
                    "auto" !== t && 0 !== Number(t) && o.push(Number(t));
                });
                var _ = Math.max.apply(Math, o) + this.o.zIndexOffset, u = this.component ? this.component.parent().offset() : this.element.offset(), l = this.component ? this.component.outerHeight(!0) : this.element.outerHeight(!1), m = this.component ? this.component.outerWidth(!0) : this.element.outerWidth(!1), c = u.left - d.left, h = u.top - d.top;
                "body" !== this.o.container && (h += r), this.picker.removeClass("datepicker-orient-top datepicker-orient-bottom datepicker-orient-right datepicker-orient-left"), 
                "auto" !== this.o.orientation.x ? (this.picker.addClass("datepicker-orient-" + this.o.orientation.x), 
                "right" === this.o.orientation.x && (c -= t - m)) : u.left < 0 ? (this.picker.addClass("datepicker-orient-left"), 
                c -= u.left - n) : c + t > i ? (this.picker.addClass("datepicker-orient-right"), 
                c += m - t) : this.o.rtl ? this.picker.addClass("datepicker-orient-right") : this.picker.addClass("datepicker-orient-left");
                var f, M = this.o.orientation.y;
                if ("auto" === M && (f = -r + h - a, M = f < 0 ? "bottom" : "top"), this.picker.addClass("datepicker-orient-" + M), 
                "top" === M ? h -= a + parseInt(this.picker.css("padding-top")) : h += l, this.o.rtl) {
                    var p = i - (c + m);
                    this.picker.css({
                        top: h,
                        right: p,
                        zIndex: _
                    });
                } else this.picker.css({
                    top: h,
                    left: c,
                    zIndex: _
                });
                return this;
            },
            _allow_update: !0,
            update: function() {
                if (!this._allow_update) return this;
                var t = this.dates.copy(), a = [], n = !1;
                return arguments.length ? (e.each(arguments, e.proxy(function(e, t) {
                    t instanceof Date && (t = this._local_to_utc(t)), a.push(t);
                }, this)), n = !0) : (a = this.isInput ? this.element.val() : this.element.data("date") || this.inputField.val(), 
                a = a && this.o.multidate ? a.split(this.o.multidateSeparator) : [ a ], delete this.element.data().date), 
                a = e.map(a, e.proxy(function(e) {
                    return p.parseDate(e, this.o.format, this.o.language, this.o.assumeNearbyYear);
                }, this)), a = e.grep(a, e.proxy(function(e) {
                    return !this.dateWithinRange(e) || !e;
                }, this), !0), this.dates.replace(a), this.o.updateViewDate && (this.dates.length ? this.viewDate = new Date(this.dates.get(-1)) : this.viewDate < this.o.startDate ? this.viewDate = new Date(this.o.startDate) : this.viewDate > this.o.endDate ? this.viewDate = new Date(this.o.endDate) : this.viewDate = this.o.defaultViewDate), 
                n ? (this.setValue(), this.element.change()) : this.dates.length && String(t) !== String(this.dates) && n && (this._trigger("changeDate"), 
                this.element.change()), !this.dates.length && t.length && (this._trigger("clearDate"), 
                this.element.change()), this.fill(), this;
            },
            fillDow: function() {
                if (this.o.showWeekDays) {
                    var t = this.o.weekStart, a = "<tr>";
                    for (this.o.calendarWeeks && (a += '<th class="cw">&#160;</th>'); t < this.o.weekStart + 7; ) a += '<th class="dow', 
                    e.inArray(t, this.o.daysOfWeekDisabled) !== -1 && (a += " disabled"), a += '">' + M[this.o.language].daysMin[t++ % 7] + "</th>";
                    a += "</tr>", this.picker.find(".datepicker-days thead").append(a);
                }
            },
            fillMonths: function() {
                for (var e, t = this._utc_to_local(this.viewDate), a = "", n = 0; n < 12; n++) e = t && t.getMonth() === n ? " focused" : "", 
                a += '<span class="month' + e + '">' + M[this.o.language].monthsShort[n] + "</span>";
                this.picker.find(".datepicker-months td").html(a);
            },
            setRange: function(t) {
                t && t.length ? this.range = e.map(t, function(e) {
                    return e.valueOf();
                }) : delete this.range, this.fill();
            },
            getClassNames: function(t) {
                var a = [], i = this.viewDate.getUTCFullYear(), r = this.viewDate.getUTCMonth(), d = n();
                return t.getUTCFullYear() < i || t.getUTCFullYear() === i && t.getUTCMonth() < r ? a.push("old") : (t.getUTCFullYear() > i || t.getUTCFullYear() === i && t.getUTCMonth() > r) && a.push("new"), 
                this.focusDate && t.valueOf() === this.focusDate.valueOf() && a.push("focused"), 
                this.o.todayHighlight && s(t, d) && a.push("today"), this.dates.contains(t) !== -1 && a.push("active"), 
                this.dateWithinRange(t) || a.push("disabled"), this.dateIsDisabled(t) && a.push("disabled", "disabled-date"), 
                e.inArray(t.getUTCDay(), this.o.daysOfWeekHighlighted) !== -1 && a.push("highlighted"), 
                this.range && (t > this.range[0] && t < this.range[this.range.length - 1] && a.push("range"), 
                e.inArray(t.valueOf(), this.range) !== -1 && a.push("selected"), t.valueOf() === this.range[0] && a.push("range-start"), 
                t.valueOf() === this.range[this.range.length - 1] && a.push("range-end")), a;
            },
            _fill_yearsView: function(a, n, s, i, r, d, o) {
                for (var _, u, l, m = "", c = s / 10, h = this.picker.find(a), f = Math.floor(i / s) * s, M = f + 9 * c, p = Math.floor(this.viewDate.getFullYear() / c) * c, y = e.map(this.dates, function(e) {
                    return Math.floor(e.getUTCFullYear() / c) * c;
                }), L = f - c; L <= M + c; L += c) _ = [ n ], u = null, L === f - c ? _.push("old") : L === M + c && _.push("new"), 
                e.inArray(L, y) !== -1 && _.push("active"), (L < r || L > d) && _.push("disabled"), 
                L === p && _.push("focused"), o !== e.noop && (l = o(new Date(L, 0, 1)), l === t ? l = {} : "boolean" == typeof l ? l = {
                    enabled: l
                } : "string" == typeof l && (l = {
                    classes: l
                }), l.enabled === !1 && _.push("disabled"), l.classes && (_ = _.concat(l.classes.split(/\s+/))), 
                l.tooltip && (u = l.tooltip)), m += '<span class="' + _.join(" ") + '"' + (u ? ' title="' + u + '"' : "") + ">" + L + "</span>";
                h.find(".datepicker-switch").text(f + "-" + M), h.find("td").html(m);
            },
            fill: function() {
                var n, s, i = new Date(this.viewDate), r = i.getUTCFullYear(), d = i.getUTCMonth(), o = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCFullYear() : -(1 / 0), _ = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCMonth() : -(1 / 0), u = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCFullYear() : 1 / 0, l = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCMonth() : 1 / 0, m = M[this.o.language].today || M.en.today || "", c = M[this.o.language].clear || M.en.clear || "", h = M[this.o.language].titleFormat || M.en.titleFormat;
                if (!isNaN(r) && !isNaN(d)) {
                    this.picker.find(".datepicker-days .datepicker-switch").text(p.formatDate(i, h, this.o.language)), 
                    this.picker.find("tfoot .today").text(m).css("display", this.o.todayBtn === !0 || "linked" === this.o.todayBtn ? "table-cell" : "none"), 
                    this.picker.find("tfoot .clear").text(c).css("display", this.o.clearBtn === !0 ? "table-cell" : "none"), 
                    this.picker.find("thead .datepicker-title").text(this.o.title).css("display", "string" == typeof this.o.title && "" !== this.o.title ? "table-cell" : "none"), 
                    this.updateNavArrows(), this.fillMonths();
                    var f = a(r, d, 0), y = f.getUTCDate();
                    f.setUTCDate(y - (f.getUTCDay() - this.o.weekStart + 7) % 7);
                    var L = new Date(f);
                    f.getUTCFullYear() < 100 && L.setUTCFullYear(f.getUTCFullYear()), L.setUTCDate(L.getUTCDate() + 42), 
                    L = L.valueOf();
                    for (var Y, k, g = []; f.valueOf() < L; ) {
                        if (Y = f.getUTCDay(), Y === this.o.weekStart && (g.push("<tr>"), this.o.calendarWeeks)) {
                            var D = new Date(+f + (this.o.weekStart - Y - 7) % 7 * 864e5), v = new Date(Number(D) + (11 - D.getUTCDay()) % 7 * 864e5), w = new Date(Number(w = a(v.getUTCFullYear(), 0, 1)) + (11 - w.getUTCDay()) % 7 * 864e5), T = (v - w) / 864e5 / 7 + 1;
                            g.push('<td class="cw">' + T + "</td>");
                        }
                        k = this.getClassNames(f), k.push("day");
                        var b = f.getUTCDate();
                        this.o.beforeShowDay !== e.noop && (s = this.o.beforeShowDay(this._utc_to_local(f)), 
                        s === t ? s = {} : "boolean" == typeof s ? s = {
                            enabled: s
                        } : "string" == typeof s && (s = {
                            classes: s
                        }), s.enabled === !1 && k.push("disabled"), s.classes && (k = k.concat(s.classes.split(/\s+/))), 
                        s.tooltip && (n = s.tooltip), s.content && (b = s.content)), k = e.isFunction(e.uniqueSort) ? e.uniqueSort(k) : e.unique(k), 
                        g.push('<td class="' + k.join(" ") + '"' + (n ? ' title="' + n + '"' : "") + ' data-date="' + f.getTime().toString() + '">' + b + "</td>"), 
                        n = null, Y === this.o.weekEnd && g.push("</tr>"), f.setUTCDate(f.getUTCDate() + 1);
                    }
                    this.picker.find(".datepicker-days tbody").html(g.join(""));
                    var S = M[this.o.language].monthsTitle || M.en.monthsTitle || "Months", H = this.picker.find(".datepicker-months").find(".datepicker-switch").text(this.o.maxViewMode < 2 ? S : r).end().find("tbody span").removeClass("active");
                    if (e.each(this.dates, function(e, t) {
                        t.getUTCFullYear() === r && H.eq(t.getUTCMonth()).addClass("active");
                    }), (r < o || r > u) && H.addClass("disabled"), r === o && H.slice(0, _).addClass("disabled"), 
                    r === u && H.slice(l + 1).addClass("disabled"), this.o.beforeShowMonth !== e.noop) {
                        var j = this;
                        e.each(H, function(a, n) {
                            var s = new Date(r, a, 1), i = j.o.beforeShowMonth(s);
                            i === t ? i = {} : "boolean" == typeof i ? i = {
                                enabled: i
                            } : "string" == typeof i && (i = {
                                classes: i
                            }), i.enabled !== !1 || e(n).hasClass("disabled") || e(n).addClass("disabled"), 
                            i.classes && e(n).addClass(i.classes), i.tooltip && e(n).prop("title", i.tooltip);
                        });
                    }
                    this._fill_yearsView(".datepicker-years", "year", 10, r, o, u, this.o.beforeShowYear), 
                    this._fill_yearsView(".datepicker-decades", "decade", 100, r, o, u, this.o.beforeShowDecade), 
                    this._fill_yearsView(".datepicker-centuries", "century", 1e3, r, o, u, this.o.beforeShowCentury);
                }
            },
            updateNavArrows: function() {
                if (this._allow_update) {
                    var e, t, a = new Date(this.viewDate), n = a.getUTCFullYear(), s = a.getUTCMonth(), i = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCFullYear() : -(1 / 0), r = this.o.startDate !== -(1 / 0) ? this.o.startDate.getUTCMonth() : -(1 / 0), d = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCFullYear() : 1 / 0, o = this.o.endDate !== 1 / 0 ? this.o.endDate.getUTCMonth() : 1 / 0, _ = 1;
                    switch (this.viewMode) {
                      case 4:
                        _ *= 10;

                      case 3:
                        _ *= 10;

                      case 2:
                        _ *= 10;

                      case 1:
                        e = Math.floor(n / _) * _ < i, t = Math.floor(n / _) * _ + _ > d;
                        break;

                      case 0:
                        e = n <= i && s < r, t = n >= d && s > o;
                    }
                    this.picker.find(".prev").toggleClass("disabled", e), this.picker.find(".next").toggleClass("disabled", t);
                }
            },
            click: function(t) {
                t.preventDefault(), t.stopPropagation();
                var s, i, r, d;
                s = e(t.target), s.hasClass("datepicker-switch") && this.viewMode !== this.o.maxViewMode && this.setViewMode(this.viewMode + 1), 
                s.hasClass("today") && !s.hasClass("day") && (this.setViewMode(0), this._setDate(n(), "linked" === this.o.todayBtn ? null : "view")), 
                s.hasClass("clear") && this.clearDates(), s.hasClass("disabled") || (s.hasClass("month") || s.hasClass("year") || s.hasClass("decade") || s.hasClass("century")) && (this.viewDate.setUTCDate(1), 
                i = 1, 1 === this.viewMode ? (d = s.parent().find("span").index(s), r = this.viewDate.getUTCFullYear(), 
                this.viewDate.setUTCMonth(d)) : (d = 0, r = Number(s.text()), this.viewDate.setUTCFullYear(r)), 
                this._trigger(p.viewModes[this.viewMode - 1].e, this.viewDate), this.viewMode === this.o.minViewMode ? this._setDate(a(r, d, i)) : (this.setViewMode(this.viewMode - 1), 
                this.fill())), this.picker.is(":visible") && this._focused_from && this._focused_from.focus(), 
                delete this._focused_from;
            },
            dayCellClick: function(t) {
                var a = e(t.currentTarget), n = a.data("date"), s = new Date(n);
                this.o.updateViewDate && (s.getUTCFullYear() !== this.viewDate.getUTCFullYear() && this._trigger("changeYear", this.viewDate), 
                s.getUTCMonth() !== this.viewDate.getUTCMonth() && this._trigger("changeMonth", this.viewDate)), 
                this._setDate(s);
            },
            navArrowsClick: function(t) {
                var a = e(t.currentTarget), n = a.hasClass("prev") ? -1 : 1;
                0 !== this.viewMode && (n *= 12 * p.viewModes[this.viewMode].navStep), this.viewDate = this.moveMonth(this.viewDate, n), 
                this._trigger(p.viewModes[this.viewMode].e, this.viewDate), this.fill();
            },
            _toggle_multidate: function(e) {
                var t = this.dates.contains(e);
                if (e || this.dates.clear(), t !== -1 ? (this.o.multidate === !0 || this.o.multidate > 1 || this.o.toggleActive) && this.dates.remove(t) : this.o.multidate === !1 ? (this.dates.clear(), 
                this.dates.push(e)) : this.dates.push(e), "number" == typeof this.o.multidate) for (;this.dates.length > this.o.multidate; ) this.dates.remove(0);
            },
            _setDate: function(e, t) {
                t && "date" !== t || this._toggle_multidate(e && new Date(e)), (!t && this.o.updateViewDate || "view" === t) && (this.viewDate = e && new Date(e)), 
                this.fill(), this.setValue(), t && "view" === t || this._trigger("changeDate"), 
                this.inputField.trigger("change"), !this.o.autoclose || t && "date" !== t || this.hide();
            },
            moveDay: function(e, t) {
                var a = new Date(e);
                return a.setUTCDate(e.getUTCDate() + t), a;
            },
            moveWeek: function(e, t) {
                return this.moveDay(e, 7 * t);
            },
            moveMonth: function(e, t) {
                if (!r(e)) return this.o.defaultViewDate;
                if (!t) return e;
                var a, n, s = new Date(e.valueOf()), i = s.getUTCDate(), d = s.getUTCMonth(), o = Math.abs(t);
                if (t = t > 0 ? 1 : -1, 1 === o) n = t === -1 ? function() {
                    return s.getUTCMonth() === d;
                } : function() {
                    return s.getUTCMonth() !== a;
                }, a = d + t, s.setUTCMonth(a), a = (a + 12) % 12; else {
                    for (var _ = 0; _ < o; _++) s = this.moveMonth(s, t);
                    a = s.getUTCMonth(), s.setUTCDate(i), n = function() {
                        return a !== s.getUTCMonth();
                    };
                }
                for (;n(); ) s.setUTCDate(--i), s.setUTCMonth(a);
                return s;
            },
            moveYear: function(e, t) {
                return this.moveMonth(e, 12 * t);
            },
            moveAvailableDate: function(e, t, a) {
                do {
                    if (e = this[a](e, t), !this.dateWithinRange(e)) return !1;
                    a = "moveDay";
                } while (this.dateIsDisabled(e));
                return e;
            },
            weekOfDateIsDisabled: function(t) {
                return e.inArray(t.getUTCDay(), this.o.daysOfWeekDisabled) !== -1;
            },
            dateIsDisabled: function(t) {
                return this.weekOfDateIsDisabled(t) || e.grep(this.o.datesDisabled, function(e) {
                    return s(t, e);
                }).length > 0;
            },
            dateWithinRange: function(e) {
                return e >= this.o.startDate && e <= this.o.endDate;
            },
            keydown: function(e) {
                if (!this.picker.is(":visible")) return void (40 !== e.keyCode && 27 !== e.keyCode || (this.show(), 
                e.stopPropagation()));
                var t, a, n = !1, s = this.focusDate || this.viewDate;
                switch (e.keyCode) {
                  case 27:
                    this.focusDate ? (this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, 
                    this.fill()) : this.hide(), e.preventDefault(), e.stopPropagation();
                    break;

                  case 37:
                  case 38:
                  case 39:
                  case 40:
                    if (!this.o.keyboardNavigation || 7 === this.o.daysOfWeekDisabled.length) break;
                    t = 37 === e.keyCode || 38 === e.keyCode ? -1 : 1, 0 === this.viewMode ? e.ctrlKey ? (a = this.moveAvailableDate(s, t, "moveYear"), 
                    a && this._trigger("changeYear", this.viewDate)) : e.shiftKey ? (a = this.moveAvailableDate(s, t, "moveMonth"), 
                    a && this._trigger("changeMonth", this.viewDate)) : 37 === e.keyCode || 39 === e.keyCode ? a = this.moveAvailableDate(s, t, "moveDay") : this.weekOfDateIsDisabled(s) || (a = this.moveAvailableDate(s, t, "moveWeek")) : 1 === this.viewMode ? (38 !== e.keyCode && 40 !== e.keyCode || (t *= 4), 
                    a = this.moveAvailableDate(s, t, "moveMonth")) : 2 === this.viewMode && (38 !== e.keyCode && 40 !== e.keyCode || (t *= 4), 
                    a = this.moveAvailableDate(s, t, "moveYear")), a && (this.focusDate = this.viewDate = a, 
                    this.setValue(), this.fill(), e.preventDefault());
                    break;

                  case 13:
                    if (!this.o.forceParse) break;
                    s = this.focusDate || this.dates.get(-1) || this.viewDate, this.o.keyboardNavigation && (this._toggle_multidate(s), 
                    n = !0), this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, 
                    this.setValue(), this.fill(), this.picker.is(":visible") && (e.preventDefault(), 
                    e.stopPropagation(), this.o.autoclose && this.hide());
                    break;

                  case 9:
                    this.focusDate = null, this.viewDate = this.dates.get(-1) || this.viewDate, this.fill(), 
                    this.hide();
                }
                n && (this.dates.length ? this._trigger("changeDate") : this._trigger("clearDate"), 
                this.inputField.trigger("change"));
            },
            setViewMode: function(e) {
                this.viewMode = e, this.picker.children("div").hide().filter(".datepicker-" + p.viewModes[this.viewMode].clsName).show(), 
                this.updateNavArrows(), this._trigger("changeViewMode", new Date(this.viewDate));
            }
        };
        var l = function(t, a) {
            e.data(t, "datepicker", this), this.element = e(t), this.inputs = e.map(a.inputs, function(e) {
                return e.jquery ? e[0] : e;
            }), delete a.inputs, this.keepEmptyValues = a.keepEmptyValues, delete a.keepEmptyValues, 
            c.call(e(this.inputs), a).on("changeDate", e.proxy(this.dateUpdated, this)), this.pickers = e.map(this.inputs, function(t) {
                return e.data(t, "datepicker");
            }), this.updateDates();
        };
        l.prototype = {
            updateDates: function() {
                this.dates = e.map(this.pickers, function(e) {
                    return e.getUTCDate();
                }), this.updateRanges();
            },
            updateRanges: function() {
                var t = e.map(this.dates, function(e) {
                    return e.valueOf();
                });
                e.each(this.pickers, function(e, a) {
                    a.setRange(t);
                });
            },
            clearDates: function() {
                e.each(this.pickers, function(e, t) {
                    t.clearDates();
                });
            },
            dateUpdated: function(a) {
                if (!this.updating) {
                    this.updating = !0;
                    var n = e.data(a.target, "datepicker");
                    if (n !== t) {
                        var s = n.getUTCDate(), i = this.keepEmptyValues, r = e.inArray(a.target, this.inputs), d = r - 1, o = r + 1, _ = this.inputs.length;
                        if (r !== -1) {
                            if (e.each(this.pickers, function(e, t) {
                                t.getUTCDate() || t !== n && i || t.setUTCDate(s);
                            }), s < this.dates[d]) for (;d >= 0 && s < this.dates[d]; ) this.pickers[d--].setUTCDate(s); else if (s > this.dates[o]) for (;o < _ && s > this.dates[o]; ) this.pickers[o++].setUTCDate(s);
                            this.updateDates(), delete this.updating;
                        }
                    }
                }
            },
            destroy: function() {
                e.map(this.pickers, function(e) {
                    e.destroy();
                }), e(this.inputs).off("changeDate", this.dateUpdated), delete this.element.data().datepicker;
            },
            remove: i("destroy", "Method `remove` is deprecated and will be removed in version 2.0. Use `destroy` instead")
        };
        var m = e.fn.datepicker, c = function(a) {
            var n = Array.apply(null, arguments);
            n.shift();
            var s;
            if (this.each(function() {
                var t = e(this), i = t.data("datepicker"), r = "object" == typeof a && a;
                if (!i) {
                    var _ = d(this, "date"), m = e.extend({}, h, _, r), c = o(m.language), f = e.extend({}, h, c, _, r);
                    t.hasClass("input-daterange") || f.inputs ? (e.extend(f, {
                        inputs: f.inputs || t.find("input").toArray()
                    }), i = new l(this, f)) : i = new u(this, f), t.data("datepicker", i);
                }
                "string" == typeof a && "function" == typeof i[a] && (s = i[a].apply(i, n));
            }), s === t || s instanceof u || s instanceof l) return this;
            if (this.length > 1) throw new Error("Using only allowed for the collection of a single element (" + a + " function)");
            return s;
        };
        e.fn.datepicker = c;
        var h = e.fn.datepicker.defaults = {
            assumeNearbyYear: !1,
            autoclose: !1,
            beforeShowDay: e.noop,
            beforeShowMonth: e.noop,
            beforeShowYear: e.noop,
            beforeShowDecade: e.noop,
            beforeShowCentury: e.noop,
            calendarWeeks: !1,
            clearBtn: !1,
            toggleActive: !1,
            daysOfWeekDisabled: [],
            daysOfWeekHighlighted: [],
            datesDisabled: [],
            endDate: 1 / 0,
            forceParse: !0,
            format: "mm/dd/yyyy",
            keepEmptyValues: !1,
            keyboardNavigation: !0,
            language: "en",
            minViewMode: 0,
            maxViewMode: 4,
            multidate: !1,
            multidateSeparator: ",",
            orientation: "auto",
            rtl: !1,
            startDate: -(1 / 0),
            startView: 0,
            todayBtn: !1,
            todayHighlight: !1,
            updateViewDate: !0,
            weekStart: 0,
            disableTouchKeyboard: !1,
            enableOnReadonly: !0,
            showOnFocus: !0,
            zIndexOffset: 10,
            container: "body",
            immediateUpdates: !1,
            title: "",
            templates: {
                leftArrow: "&#x00AB;",
                rightArrow: "&#x00BB;"
            },
            showWeekDays: !0
        }, f = e.fn.datepicker.locale_opts = [ "format", "rtl", "weekStart" ];
        e.fn.datepicker.Constructor = u;
        var M = e.fn.datepicker.dates = {
            en: {
                days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                daysShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
                daysMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
                months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                monthsShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
                today: "Today",
                clear: "Clear",
                titleFormat: "MM yyyy"
            }
        }, p = {
            viewModes: [ {
                names: [ "days", "month" ],
                clsName: "days",
                e: "changeMonth"
            }, {
                names: [ "months", "year" ],
                clsName: "months",
                e: "changeYear",
                navStep: 1
            }, {
                names: [ "years", "decade" ],
                clsName: "years",
                e: "changeDecade",
                navStep: 10
            }, {
                names: [ "decades", "century" ],
                clsName: "decades",
                e: "changeCentury",
                navStep: 100
            }, {
                names: [ "centuries", "millennium" ],
                clsName: "centuries",
                e: "changeMillennium",
                navStep: 1e3
            } ],
            validParts: /dd?|DD?|mm?|MM?|yy(?:yy)?/g,
            nonpunctuation: /[^ -\/:-@\u5e74\u6708\u65e5\[-`{-~\t\n\r]+/g,
            parseFormat: function(e) {
                if ("function" == typeof e.toValue && "function" == typeof e.toDisplay) return e;
                var t = e.replace(this.validParts, "\0").split("\0"), a = e.match(this.validParts);
                if (!t || !t.length || !a || 0 === a.length) throw new Error("Invalid date format.");
                return {
                    separators: t,
                    parts: a
                };
            },
            parseDate: function(a, s, i, r) {
                function d(e, t) {
                    return t === !0 && (t = 10), e < 100 && (e += 2e3, e > new Date().getFullYear() + t && (e -= 100)), 
                    e;
                }
                function o() {
                    var e = this.slice(0, _[c].length), t = _[c].slice(0, e.length);
                    return e.toLowerCase() === t.toLowerCase();
                }
                if (!a) return t;
                if (a instanceof Date) return a;
                if ("string" == typeof s && (s = p.parseFormat(s)), s.toValue) return s.toValue(a, s, i);
                var _, l, m, c, h, f = {
                    d: "moveDay",
                    m: "moveMonth",
                    w: "moveWeek",
                    y: "moveYear"
                }, y = {
                    yesterday: "-1d",
                    today: "+0d",
                    tomorrow: "+1d"
                };
                if (a in y && (a = y[a]), /^[\-+]\d+[dmwy]([\s,]+[\-+]\d+[dmwy])*$/i.test(a)) {
                    for (_ = a.match(/([\-+]\d+)([dmwy])/gi), a = new Date(), c = 0; c < _.length; c++) l = _[c].match(/([\-+]\d+)([dmwy])/i), 
                    m = Number(l[1]), h = f[l[2].toLowerCase()], a = u.prototype[h](a, m);
                    return u.prototype._zero_utc_time(a);
                }
                _ = a && a.match(this.nonpunctuation) || [];
                var L, Y, k = {}, g = [ "yyyy", "yy", "M", "MM", "m", "mm", "d", "dd" ], D = {
                    yyyy: function(e, t) {
                        return e.setUTCFullYear(r ? d(t, r) : t);
                    },
                    m: function(e, t) {
                        if (isNaN(e)) return e;
                        for (t -= 1; t < 0; ) t += 12;
                        for (t %= 12, e.setUTCMonth(t); e.getUTCMonth() !== t; ) e.setUTCDate(e.getUTCDate() - 1);
                        return e;
                    },
                    d: function(e, t) {
                        return e.setUTCDate(t);
                    }
                };
                D.yy = D.yyyy, D.M = D.MM = D.mm = D.m, D.dd = D.d, a = n();
                var v = s.parts.slice();
                if (_.length !== v.length && (v = e(v).filter(function(t, a) {
                    return e.inArray(a, g) !== -1;
                }).toArray()), _.length === v.length) {
                    var w;
                    for (c = 0, w = v.length; c < w; c++) {
                        if (L = parseInt(_[c], 10), l = v[c], isNaN(L)) switch (l) {
                          case "MM":
                            Y = e(M[i].months).filter(o), L = e.inArray(Y[0], M[i].months) + 1;
                            break;

                          case "M":
                            Y = e(M[i].monthsShort).filter(o), L = e.inArray(Y[0], M[i].monthsShort) + 1;
                        }
                        k[l] = L;
                    }
                    var T, b;
                    for (c = 0; c < g.length; c++) b = g[c], b in k && !isNaN(k[b]) && (T = new Date(a), 
                    D[b](T, k[b]), isNaN(T) || (a = T));
                }
                return a;
            },
            formatDate: function(t, a, n) {
                if (!t) return "";
                if ("string" == typeof a && (a = p.parseFormat(a)), a.toDisplay) return a.toDisplay(t, a, n);
                var s = {
                    d: t.getUTCDate(),
                    D: M[n].daysShort[t.getUTCDay()],
                    DD: M[n].days[t.getUTCDay()],
                    m: t.getUTCMonth() + 1,
                    M: M[n].monthsShort[t.getUTCMonth()],
                    MM: M[n].months[t.getUTCMonth()],
                    yy: t.getUTCFullYear().toString().substring(2),
                    yyyy: t.getUTCFullYear()
                };
                s.dd = (s.d < 10 ? "0" : "") + s.d, s.mm = (s.m < 10 ? "0" : "") + s.m, t = [];
                for (var i = e.extend([], a.separators), r = 0, d = a.parts.length; r <= d; r++) i.length && t.push(i.shift()), 
                t.push(s[a.parts[r]]);
                return t.join("");
            },
            headTemplate: '<thead><tr><th colspan="7" class="datepicker-title"></th></tr><tr><th class="prev">' + h.templates.leftArrow + '</th><th colspan="5" class="datepicker-switch"></th><th class="next">' + h.templates.rightArrow + "</th></tr></thead>",
            contTemplate: '<tbody><tr><td colspan="7"></td></tr></tbody>',
            footTemplate: '<tfoot><tr><th colspan="7" class="today"></th></tr><tr><th colspan="7" class="clear"></th></tr></tfoot>'
        };
        p.template = '<div class="datepicker"><div class="datepicker-days"><table class="table-condensed">' + p.headTemplate + "<tbody></tbody>" + p.footTemplate + '</table></div><div class="datepicker-months"><table class="table-condensed">' + p.headTemplate + p.contTemplate + p.footTemplate + '</table></div><div class="datepicker-years"><table class="table-condensed">' + p.headTemplate + p.contTemplate + p.footTemplate + '</table></div><div class="datepicker-decades"><table class="table-condensed">' + p.headTemplate + p.contTemplate + p.footTemplate + '</table></div><div class="datepicker-centuries"><table class="table-condensed">' + p.headTemplate + p.contTemplate + p.footTemplate + "</table></div></div>", 
        e.fn.datepicker.DPGlobal = p, e.fn.datepicker.noConflict = function() {
            return e.fn.datepicker = m, this;
        }, e.fn.datepicker.version = "1.8.0", e.fn.datepicker.deprecated = function(e) {
            var t = window.console;
            t && t.warn && t.warn("DEPRECATED: " + e);
        }, e(document).on("focus.datepicker.data-api click.datepicker.data-api", '[data-provide="datepicker"]', function(t) {
            var a = e(this);
            a.data("datepicker") || (t.preventDefault(), c.call(a, "show"));
        }), e(function() {
            c.call(e('[data-provide="datepicker-inline"]'));
        });
    });
}, function(e, t) {} ]);
//# sourceMappingURL=services.min.js.map