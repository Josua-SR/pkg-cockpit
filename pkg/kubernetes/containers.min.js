define(["jquery","base1/cockpit","base1/angular","base1/term","kubernetes/app","kubernetes/container-terminal"],function(e,n,t,r){"use strict";var a=a||function(){};return t.module("kubernetes.containers",["ngRoute","kubernetesUI"]).config(["$routeProvider","kubernetesContainerSocketProvider",function(e,n){e.when("/pods/:namespace?",{templateUrl:"views/containers-page.html",controller:"ContainersCtrl"});n.WebSocketFactory="kubeContainerWebSocket"}]).controller("ContainersCtrl",["$scope","$routeParams","$location",function(n,t,r){var a=n.client;var o={};var i=r.search();for(var s in i){if(s!=="namespace")o[s]=i[s]}if(e.isEmptyObject(o))o=null;var c=a.select("Pod",t.namespace,o);a.track(c);n.pods=c;e(c).on("changed",function(){n.$digest()});n.$on("$destroy",function(){a.track(c,false);e(c).off()});n.should_mask=function(e){return e.toLowerCase().indexOf("password")!==-1};n.containers=function l(e){var n=a.containers(e);var t,r,o={};for(var i in n){r=n[i];t=e.metadata.namespace+"/pod/"+e.metadata.name+"/"+r.spec.name;o[t]=r;r.key=t}return o}}]).directive("kubeContainerBody",function(){return{restrict:"E",templateUrl:"views/container-body.html"}}).directive("kubePodBody",function(){return{restrict:"E",templateUrl:"views/pod-body.html"}}).directive("kubeConsole",function(){return{restrict:"E",link:function(t,r,o){var i=64*1024;var s=["kubectl","logs","--namespace="+o.namespace,"--container="+o.container,"--follow",o.pod];var c=e("<div>").addClass("console");r.append(c);var l=e("<pre>").addClass("logs");c.append(l);var u=null;var f=null;function v(){l.empty();u=n.channel({payload:"stream",spawn:s,err:"out"});var t=[];var r=0;function o(){f=null;var n=l[0].scrollHeight-l.scrollTop()<=l.outerHeight();var o=t.join("");r+=o.length;var s;while(r>i){s=l.children().first();if(!s[0])break;r-=s.remove().text().length}var c=e("<span>").text(o);t.length=0;l.append(c);if(n)l.scrollTop(l.prop("scrollHeight"));a()}e(u).on("close",function(e,n){if(n.problem)t.push(n.problem);o();d()}).on("message",function(e,n){t.push(n);if(f===null)f=window.setTimeout(o,50)})}function d(){if(u){u.close("terminated");e(u).off()}u=null;window.clearTimeout(f);f=null}t.$on("connect",function(e,n){if(n=="console"){if(!u)v()}});t.$on("$destroy",d)}}}).factory("kubeContainerWebSocket",[function(){function r(e){var r={};var a=n.location.decode(e,r);var o=[];var i="default";var s=null;var c="";var l,u;for(l=0,u=a.length;l<u;l++){if(a[l]==="namespaces")i=a[++l];else if(a[l]==="pods")c=a[++l]}for(l in r){if(l=="container"){s=r[l]}else if(l=="command"){if(t.isArray(r[l]))o=r[l];else o.push(r[l])}}var f=["kubectl","exec","--namespace="+i];if(s)f.push("--container="+s);f.push("--tty","--stdin",c,"--");f.push.apply(f,o);return f}return function a(o,i){var s=r(o);var c="base64.channel.k8s.io";var l;var u=0;var f={};n.event_target(f);function v(){l=n.channel({payload:"stream",spawn:s,pty:true});e(l).on("close",function(n,t){console.log("closing state 3",n,t);var r=t.problem||"";e(l).off();l=null;u=3;var a=document.createEvent("Event");a.initEvent("close",false,false,!!r,1e3,r);f.dispatchEvent(a)}).on("message",function(e,n){n="1"+window.btoa(n);var t=document.createEvent("MessageEvent");if(!t.initMessageEvent)t=new window.MessageEvent("message",{data:n});else t.initMessageEvent("message",false,false,n,"");f.dispatchEvent(t)});u=1;var t=document.createEvent("Event");t.initEvent("open",false,false);f.dispatchEvent(t)}function d(){var e=document.createEvent("Event");e.initEvent("close",false,false,false,1002,"protocol-error");f.dispatchEvent(e)}function p(e,n){if(l)l.close(n)}function m(e){if(l)l.send(window.atob(e.slice(1)))}Object.defineProperties(f,{binaryType:{value:"arraybuffer"},bufferedAmount:{value:0},extensions:{value:""},protocol:{value:c},readyState:{get:function(){return u}},url:{value:o},close:{value:p},send:{value:m}});var b=true;if(i){if(t.isArray(i))b=i.indexOf(c)!==-1;else b=i===c}if(b){window.setTimeout(v)}else{console.warn("Unsupported kubernetes container WebSocket subprotocol: "+i);window.setTimeout(d)}return f}}]).filter("kubeIdentifier",function(){var e=/docker:\/\/([\w]{12})\w+/;return function(n){var t=e.exec(n);if(t)return t[1];return n}})});
